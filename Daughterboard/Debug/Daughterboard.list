
Daughterboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d144  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f4b8  0800d2e4  0800d2e4  0001d2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802c79c  0802c79c  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802c79c  0802c79c  0003c79c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802c7a4  0802c7a4  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802c7a4  0802c7a4  0003c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802c7a8  0802c7a8  0003c7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802c7ac  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ea0  20000090  0802c83c  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f30  0802c83c  00044f30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000226d5  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043a5  00000000  00000000  00062795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  00066b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ae8  00000000  00000000  000687d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b3d  00000000  00000000  0006a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee2c  00000000  00000000  0006fdf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eb27  00000000  00000000  0008ec21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007eb4  00000000  00000000  0012d798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d2cc 	.word	0x0800d2cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800d2cc 	.word	0x0800d2cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 ff54 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f864 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9ea 	bl	8000968 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f982 	bl	800089c <MX_DMA_Init>
  MX_SPI1_Init();
 8000598:	f000 f8c6 	bl	8000728 <MX_SPI1_Init>
  MX_TIM1_Init();
 800059c:	f000 f8fa 	bl	8000794 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f950 	bl	8000844 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f008 feaa 	bl	80092fc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreDMAComplete */
  xSemaphoreDMACompleteHandle = osSemaphoreNew(1, 1, &xSemaphoreDMAComplete_attributes);
 80005a8:	4a15      	ldr	r2, [pc, #84]	; (8000600 <main+0x7c>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	2001      	movs	r0, #1
 80005ae:	f008 ff9c 	bl	80094ea <osSemaphoreNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a13      	ldr	r2, [pc, #76]	; (8000604 <main+0x80>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	4a13      	ldr	r2, [pc, #76]	; (8000608 <main+0x84>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4813      	ldr	r0, [pc, #76]	; (800060c <main+0x88>)
 80005be:	f008 fee7 	bl	8009390 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a12      	ldr	r2, [pc, #72]	; (8000610 <main+0x8c>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLCD */
  TaskLCDHandle = osThreadNew(vTaskLCD, NULL, &TaskLCD_attributes);
 80005c8:	4a12      	ldr	r2, [pc, #72]	; (8000614 <main+0x90>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0x94>)
 80005ce:	f008 fedf 	bl	8009390 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a11      	ldr	r2, [pc, #68]	; (800061c <main+0x98>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlink */
  TaskBlinkHandle = osThreadNew(vTaskBlink, NULL, &TaskBlink_attributes);
 80005d8:	4a11      	ldr	r2, [pc, #68]	; (8000620 <main+0x9c>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4811      	ldr	r0, [pc, #68]	; (8000624 <main+0xa0>)
 80005de:	f008 fed7 	bl	8009390 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <main+0xa4>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLeds */
  TaskLedsHandle = osThreadNew(vTaskLeds, NULL, &TaskLeds_attributes);
 80005e8:	4a10      	ldr	r2, [pc, #64]	; (800062c <main+0xa8>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4810      	ldr	r0, [pc, #64]	; (8000630 <main+0xac>)
 80005ee:	f008 fecf 	bl	8009390 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a0f      	ldr	r2, [pc, #60]	; (8000634 <main+0xb0>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f008 fea4 	bl	8009344 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x78>
 80005fe:	bf00      	nop
 8000600:	0800d4b4 	.word	0x0800d4b4
 8000604:	200002c0 	.word	0x200002c0
 8000608:	0800d424 	.word	0x0800d424
 800060c:	08000b31 	.word	0x08000b31
 8000610:	200002b0 	.word	0x200002b0
 8000614:	0800d448 	.word	0x0800d448
 8000618:	08000b41 	.word	0x08000b41
 800061c:	200002b4 	.word	0x200002b4
 8000620:	0800d46c 	.word	0x0800d46c
 8000624:	08000bf1 	.word	0x08000bf1
 8000628:	200002b8 	.word	0x200002b8
 800062c:	0800d490 	.word	0x0800d490
 8000630:	08000c11 	.word	0x08000c11
 8000634:	200002bc 	.word	0x200002bc

08000638 <DMATrasferCpltCallback>:
  }
  /* USER CODE END 3 */
}

void DMATrasferCpltCallback(DMA_HandleTypeDef *DmaHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(xSemaphoreDMACompleteHandle);
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <DMATrasferCpltCallback+0x1c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f009 f82b 	bl	80096a0 <osSemaphoreRelease>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200002c0 	.word	0x200002c0

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	; 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2230      	movs	r2, #48	; 0x30
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00c f94a 	bl	800c900 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xc8>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	4a26      	ldr	r2, [pc, #152]	; (8000720 <SystemClock_Config+0xc8>)
 8000686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068a:	6413      	str	r3, [r2, #64]	; 0x40
 800068c:	4b24      	ldr	r3, [pc, #144]	; (8000720 <SystemClock_Config+0xc8>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000698:	2300      	movs	r3, #0
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	4b21      	ldr	r3, [pc, #132]	; (8000724 <SystemClock_Config+0xcc>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a20      	ldr	r2, [pc, #128]	; (8000724 <SystemClock_Config+0xcc>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b1e      	ldr	r3, [pc, #120]	; (8000724 <SystemClock_Config+0xcc>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006c8:	230c      	movs	r3, #12
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006cc:	2360      	movs	r3, #96	; 0x60
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006d4:	2304      	movs	r3, #4
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 fe91 	bl	8003404 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e8:	f000 fab2 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2302      	movs	r3, #2
 80006f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2103      	movs	r1, #3
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f8f3 	bl	80038f4 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000714:	f000 fa9c 	bl	8000c50 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3750      	adds	r7, #80	; 0x50
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_SPI1_Init+0x64>)
 800072e:	4a18      	ldr	r2, [pc, #96]	; (8000790 <MX_SPI1_Init+0x68>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI1_Init+0x64>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI1_Init+0x64>)
 8000748:	2202      	movs	r2, #2
 800074a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI1_Init+0x64>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI1_Init+0x64>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000760:	4b0a      	ldr	r3, [pc, #40]	; (800078c <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI1_Init+0x64>)
 8000768:	2200      	movs	r2, #0
 800076a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <MX_SPI1_Init+0x64>)
 800076e:	2200      	movs	r2, #0
 8000770:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI1_Init+0x64>)
 8000774:	220a      	movs	r2, #10
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <MX_SPI1_Init+0x64>)
 800077a:	f003 fa9b 	bl	8003cb4 <HAL_SPI_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000784:	f000 fa64 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}
 800078c:	200000ac 	.word	0x200000ac
 8000790:	40013000 	.word	0x40013000

08000794 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	; 0x30
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	2224      	movs	r2, #36	; 0x24
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f00c f8ac 	bl	800c900 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_TIM1_Init+0xa8>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_TIM1_Init+0xac>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_TIM1_Init+0xa8>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_TIM1_Init+0xa8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007c2:	4b1e      	ldr	r3, [pc, #120]	; (800083c <MX_TIM1_Init+0xa8>)
 80007c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_TIM1_Init+0xa8>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_TIM1_Init+0xa8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_TIM1_Init+0xa8>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007dc:	2301      	movs	r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007e0:	2300      	movs	r3, #0
 80007e2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007e4:	2301      	movs	r3, #1
 80007e6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007f4:	2301      	movs	r3, #1
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_TIM1_Init+0xa8>)
 8000808:	f003 fe3a 	bl	8004480 <HAL_TIM_Encoder_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000812:	f000 fa1d 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	4619      	mov	r1, r3
 8000822:	4806      	ldr	r0, [pc, #24]	; (800083c <MX_TIM1_Init+0xa8>)
 8000824:	f003 ff52 	bl	80046cc <HAL_TIMEx_MasterConfigSynchronization>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800082e:	f000 fa0f 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000832:	bf00      	nop
 8000834:	3730      	adds	r7, #48	; 0x30
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000164 	.word	0x20000164
 8000840:	40010000 	.word	0x40010000

08000844 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MX_USART1_UART_Init+0x50>)
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_USART1_UART_Init+0x54>)
 800084c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART1_UART_Init+0x50>)
 8000850:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_USART1_UART_Init+0x50>)
 8000858:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800085c:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800085e:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_USART1_UART_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART1_UART_Init+0x50>)
 8000866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800086a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART1_UART_Init+0x50>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART1_UART_Init+0x50>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART1_UART_Init+0x50>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART1_UART_Init+0x50>)
 8000880:	f003 ff92 	bl	80047a8 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800088a:	f000 f9e1 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001ac 	.word	0x200001ac
 8000898:	40011000 	.word	0x40011000

0800089c <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_DMA_Init+0xc0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a2c      	ldr	r2, [pc, #176]	; (800095c <MX_DMA_Init+0xc0>)
 80008ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_DMA_Init+0xc0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 80008be:	4b28      	ldr	r3, [pc, #160]	; (8000960 <MX_DMA_Init+0xc4>)
 80008c0:	4a28      	ldr	r2, [pc, #160]	; (8000964 <MX_DMA_Init+0xc8>)
 80008c2:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 80008c4:	4b26      	ldr	r3, [pc, #152]	; (8000960 <MX_DMA_Init+0xc4>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80008ca:	4b25      	ldr	r3, [pc, #148]	; (8000960 <MX_DMA_Init+0xc4>)
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 80008d0:	4b23      	ldr	r3, [pc, #140]	; (8000960 <MX_DMA_Init+0xc4>)
 80008d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008d6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 80008d8:	4b21      	ldr	r3, [pc, #132]	; (8000960 <MX_DMA_Init+0xc4>)
 80008da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008de:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008e0:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <MX_DMA_Init+0xc4>)
 80008e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008e6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008e8:	4b1d      	ldr	r3, [pc, #116]	; (8000960 <MX_DMA_Init+0xc4>)
 80008ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008ee:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <MX_DMA_Init+0xc4>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 80008f6:	4b1a      	ldr	r3, [pc, #104]	; (8000960 <MX_DMA_Init+0xc4>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008fc:	4b18      	ldr	r3, [pc, #96]	; (8000960 <MX_DMA_Init+0xc4>)
 80008fe:	2204      	movs	r2, #4
 8000900:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MX_DMA_Init+0xc4>)
 8000904:	2203      	movs	r2, #3
 8000906:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <MX_DMA_Init+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800090e:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_DMA_Init+0xc4>)
 8000910:	2200      	movs	r2, #0
 8000912:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_DMA_Init+0xc4>)
 8000916:	f001 ff35 	bl	8002784 <HAL_DMA_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000920:	f000 f996 	bl	8000c50 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000924:	2200      	movs	r2, #0
 8000926:	2105      	movs	r1, #5
 8000928:	2039      	movs	r0, #57	; 0x39
 800092a:	f001 fef4 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800092e:	2039      	movs	r0, #57	; 0x39
 8000930:	f001 ff0d 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	2105      	movs	r1, #5
 8000938:	203a      	movs	r0, #58	; 0x3a
 800093a:	f001 feec 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800093e:	203a      	movs	r0, #58	; 0x3a
 8000940:	f001 ff05 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2105      	movs	r1, #5
 8000948:	2046      	movs	r0, #70	; 0x46
 800094a:	f001 fee4 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800094e:	2046      	movs	r0, #70	; 0x46
 8000950:	f001 fefd 	bl	800274e <HAL_NVIC_EnableIRQ>

}
 8000954:	bf00      	nop
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40023800 	.word	0x40023800
 8000960:	20000250 	.word	0x20000250
 8000964:	40026428 	.word	0x40026428

08000968 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b67      	ldr	r3, [pc, #412]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a66      	ldr	r2, [pc, #408]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b64      	ldr	r3, [pc, #400]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b60      	ldr	r3, [pc, #384]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a5f      	ldr	r2, [pc, #380]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b5d      	ldr	r3, [pc, #372]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	4b59      	ldr	r3, [pc, #356]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a58      	ldr	r2, [pc, #352]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b56      	ldr	r3, [pc, #344]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60bb      	str	r3, [r7, #8]
 80009d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a51      	ldr	r2, [pc, #324]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b4f      	ldr	r3, [pc, #316]	; (8000b20 <MX_GPIO_Init+0x1b8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GP_GPIO_Port, LED_GP_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f4:	484b      	ldr	r0, [pc, #300]	; (8000b24 <MX_GPIO_Init+0x1bc>)
 80009f6:	f002 fcad 	bl	8003354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80009fa:	2201      	movs	r2, #1
 80009fc:	2150      	movs	r1, #80	; 0x50
 80009fe:	484a      	ldr	r0, [pc, #296]	; (8000b28 <MX_GPIO_Init+0x1c0>)
 8000a00:	f002 fca8 	bl	8003354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2103      	movs	r1, #3
 8000a08:	4848      	ldr	r0, [pc, #288]	; (8000b2c <MX_GPIO_Init+0x1c4>)
 8000a0a:	f002 fca3 	bl	8003354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a14:	4845      	ldr	r0, [pc, #276]	; (8000b2c <MX_GPIO_Init+0x1c4>)
 8000a16:	f002 fc9d 	bl	8003354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GP_Pin */
  GPIO_InitStruct.Pin = LED_GP_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GP_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	483c      	ldr	r0, [pc, #240]	; (8000b24 <MX_GPIO_Init+0x1bc>)
 8000a34:	f002 fb0a 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 8000a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a3e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4835      	ldr	r0, [pc, #212]	; (8000b24 <MX_GPIO_Init+0x1bc>)
 8000a50:	f002 fafc 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000a54:	f240 430f 	movw	r3, #1039	; 0x40f
 8000a58:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a5a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	482f      	ldr	r0, [pc, #188]	; (8000b28 <MX_GPIO_Init+0x1c0>)
 8000a6c:	f002 faee 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000a70:	2350      	movs	r3, #80	; 0x50
 8000a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a74:	2301      	movs	r3, #1
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	4828      	ldr	r0, [pc, #160]	; (8000b28 <MX_GPIO_Init+0x1c0>)
 8000a88:	f002 fae0 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4822      	ldr	r0, [pc, #136]	; (8000b2c <MX_GPIO_Init+0x1c4>)
 8000aa4:	f002 fad2 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_COMM_Pin LED_USB_Pin LED_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin;
 8000aa8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	481a      	ldr	r0, [pc, #104]	; (8000b2c <MX_GPIO_Init+0x1c4>)
 8000ac2:	f002 fac3 	bl	800304c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2006      	movs	r0, #6
 8000acc:	f001 fe23 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ad0:	2006      	movs	r0, #6
 8000ad2:	f001 fe3c 	bl	800274e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2105      	movs	r1, #5
 8000ada:	2007      	movs	r0, #7
 8000adc:	f001 fe1b 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ae0:	2007      	movs	r0, #7
 8000ae2:	f001 fe34 	bl	800274e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2008      	movs	r0, #8
 8000aec:	f001 fe13 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000af0:	2008      	movs	r0, #8
 8000af2:	f001 fe2c 	bl	800274e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000af6:	2200      	movs	r2, #0
 8000af8:	2105      	movs	r1, #5
 8000afa:	2009      	movs	r0, #9
 8000afc:	f001 fe0b 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b00:	2009      	movs	r0, #9
 8000b02:	f001 fe24 	bl	800274e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2105      	movs	r1, #5
 8000b0a:	2028      	movs	r0, #40	; 0x28
 8000b0c:	f001 fe03 	bl	8002716 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b10:	2028      	movs	r0, #40	; 0x28
 8000b12:	f001 fe1c 	bl	800274e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020800 	.word	0x40020800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400

08000b30 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f008 fcbb 	bl	80094b4 <osDelay>
 8000b3e:	e7fb      	b.n	8000b38 <StartDefaultTask+0x8>

08000b40 <vTaskLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLCD */
void vTaskLCD(void *argument)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b086      	sub	sp, #24
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	 * Stack usage for the
	 * image processing with
	 * chunks of 256 Bytes
	 */
	uint16_t *ITMLogoRAMBuffer;
	UG_BMP ITMLogoRAM = {
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	23a1      	movs	r3, #161	; 0xa1
 8000b5a:	81bb      	strh	r3, [r7, #12]
 8000b5c:	2399      	movs	r3, #153	; 0x99
 8000b5e:	81fb      	strh	r3, [r7, #14]
 8000b60:	2310      	movs	r3, #16
 8000b62:	743b      	strb	r3, [r7, #16]
		.height = 153,
		.bpp = BMP_BPP_16
	};
	uint16_t *Pixels;

	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream1, HAL_DMA_XFER_CPLT_CB_ID, DMATrasferCpltCallback);
 8000b64:	4a1e      	ldr	r2, [pc, #120]	; (8000be0 <vTaskLCD+0xa0>)
 8000b66:	2100      	movs	r1, #0
 8000b68:	481e      	ldr	r0, [pc, #120]	; (8000be4 <vTaskLCD+0xa4>)
 8000b6a:	f002 f92d 	bl	8002dc8 <HAL_DMA_RegisterCallback>

	ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 8000b6e:	2102      	movs	r1, #2
 8000b70:	f246 0039 	movw	r0, #24633	; 0x6039
 8000b74:	f00b fe7a 	bl	800c86c <calloc>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	617b      	str	r3, [r7, #20]
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream1, (uint32_t)&ITMLogo.p, (uint32_t)ITMLogoRAMBuffer, ITMLOGO_SIZE);
 8000b7c:	491a      	ldr	r1, [pc, #104]	; (8000be8 <vTaskLCD+0xa8>)
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	f246 0339 	movw	r3, #24633	; 0x6039
 8000b84:	4817      	ldr	r0, [pc, #92]	; (8000be4 <vTaskLCD+0xa4>)
 8000b86:	f001 feab 	bl	80028e0 <HAL_DMA_Start_IT>
	osSemaphoreAcquire(xSemaphoreDMACompleteHandle, osWaitForever);
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <vTaskLCD+0xac>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b92:	4618      	mov	r0, r3
 8000b94:	f008 fd32 	bl	80095fc <osSemaphoreAcquire>
	UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogoRAM);
 8000b98:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <vTaskLCD+0xa8>)
 8000b9a:	889b      	ldrh	r3, [r3, #4]
 8000b9c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000ba0:	0fda      	lsrs	r2, r3, #31
 8000ba2:	4413      	add	r3, r2
 8000ba4:	105b      	asrs	r3, r3, #1
 8000ba6:	b218      	sxth	r0, r3
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <vTaskLCD+0xa8>)
 8000baa:	88db      	ldrh	r3, [r3, #6]
 8000bac:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8000bb0:	0fda      	lsrs	r2, r3, #31
 8000bb2:	4413      	add	r3, r2
 8000bb4:	105b      	asrs	r3, r3, #1
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	f107 0208 	add.w	r2, r7, #8
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f006 fc8d 	bl	80074dc <UG_DrawBMP>
	osDelay(pdMS_TO_TICKS(500));
 8000bc2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bc6:	f008 fc75 	bl	80094b4 <osDelay>
	/*Process image*/
	LCD_init();
 8000bca:	f000 fe55 	bl	8001878 <LCD_init>
	LCD_Test();
 8000bce:	f000 fefb 	bl	80019c8 <LCD_Test>
	free(ITMLogoRAMBuffer);
 8000bd2:	6978      	ldr	r0, [r7, #20]
 8000bd4:	f00b fe7e 	bl	800c8d4 <free>
  for(;;)
  {
  	LCD_Test();
 8000bd8:	f000 fef6 	bl	80019c8 <LCD_Test>
 8000bdc:	e7fc      	b.n	8000bd8 <vTaskLCD+0x98>
 8000bde:	bf00      	nop
 8000be0:	08000639 	.word	0x08000639
 8000be4:	20000250 	.word	0x20000250
 8000be8:	2000001c 	.word	0x2000001c
 8000bec:	200002c0 	.word	0x200002c0

08000bf0 <vTaskBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskBlink */
void vTaskBlink(void *argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskBlink */

  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000bf8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bfc:	4803      	ldr	r0, [pc, #12]	; (8000c0c <vTaskBlink+0x1c>)
 8000bfe:	f002 fbc2 	bl	8003386 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(250));
 8000c02:	20fa      	movs	r0, #250	; 0xfa
 8000c04:	f008 fc56 	bl	80094b4 <osDelay>
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000c08:	e7f6      	b.n	8000bf8 <vTaskBlink+0x8>
 8000c0a:	bf00      	nop
 8000c0c:	40020800 	.word	0x40020800

08000c10 <vTaskLeds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLeds */
void vTaskLeds(void *argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLeds */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000c18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c1c:	480b      	ldr	r0, [pc, #44]	; (8000c4c <vTaskLeds+0x3c>)
 8000c1e:	f002 fbb2 	bl	8003386 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000c22:	2064      	movs	r0, #100	; 0x64
 8000c24:	f008 fc46 	bl	80094b4 <osDelay>
    HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8000c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2c:	4807      	ldr	r0, [pc, #28]	; (8000c4c <vTaskLeds+0x3c>)
 8000c2e:	f002 fbaa 	bl	8003386 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000c32:	2064      	movs	r0, #100	; 0x64
 8000c34:	f008 fc3e 	bl	80094b4 <osDelay>
    HAL_GPIO_TogglePin(LED_CONTROL_GPIO_Port, LED_CONTROL_Pin);
 8000c38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <vTaskLeds+0x3c>)
 8000c3e:	f002 fba2 	bl	8003386 <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000c42:	2064      	movs	r0, #100	; 0x64
 8000c44:	f008 fc36 	bl	80094b4 <osDelay>
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000c48:	e7e6      	b.n	8000c18 <vTaskLeds+0x8>
 8000c4a:	bf00      	nop
 8000c4c:	40020400 	.word	0x40020400

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6a:	4a11      	ldr	r2, [pc, #68]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	; 0x44
 8000c72:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a0a      	ldr	r2, [pc, #40]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <HAL_MspInit+0x54>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	210f      	movs	r1, #15
 8000c9e:	f06f 0001 	mvn.w	r0, #1
 8000ca2:	f001 fd38 	bl	8002716 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40023800 	.word	0x40023800

08000cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a30      	ldr	r2, [pc, #192]	; (8000d94 <HAL_SPI_MspInit+0xe0>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d15a      	bne.n	8000d8c <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b2f      	ldr	r3, [pc, #188]	; (8000d98 <HAL_SPI_MspInit+0xe4>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	4a2e      	ldr	r2, [pc, #184]	; (8000d98 <HAL_SPI_MspInit+0xe4>)
 8000ce0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ce4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	; (8000d98 <HAL_SPI_MspInit+0xe4>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	4b28      	ldr	r3, [pc, #160]	; (8000d98 <HAL_SPI_MspInit+0xe4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a27      	ldr	r2, [pc, #156]	; (8000d98 <HAL_SPI_MspInit+0xe4>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b25      	ldr	r3, [pc, #148]	; (8000d98 <HAL_SPI_MspInit+0xe4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60fb      	str	r3, [r7, #12]
 8000d0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000d0e:	23a0      	movs	r3, #160	; 0xa0
 8000d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	481c      	ldr	r0, [pc, #112]	; (8000d9c <HAL_SPI_MspInit+0xe8>)
 8000d2a:	f002 f98f 	bl	800304c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d30:	4a1c      	ldr	r2, [pc, #112]	; (8000da4 <HAL_SPI_MspInit+0xf0>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000d3a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d3c:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d50:	4b13      	ldr	r3, [pc, #76]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d56:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d5c:	4b10      	ldr	r3, [pc, #64]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d68:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d72:	f001 fd07 	bl	8002784 <HAL_DMA_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000d7c:	f7ff ff68 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d84:	649a      	str	r2, [r3, #72]	; 0x48
 8000d86:	4a06      	ldr	r2, [pc, #24]	; (8000da0 <HAL_SPI_MspInit+0xec>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40013000 	.word	0x40013000
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	20000104 	.word	0x20000104
 8000da4:	40026440 	.word	0x40026440

08000da8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a19      	ldr	r2, [pc, #100]	; (8000e2c <HAL_TIM_Encoder_MspInit+0x84>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d12c      	bne.n	8000e24 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a10      	ldr	r2, [pc, #64]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_TIM_Encoder_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_TIM_Encoder_MspInit+0x8c>)
 8000e20:	f002 f914 	bl	800304c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	; 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a44      	ldr	r2, [pc, #272]	; (8000f68 <HAL_UART_MspInit+0x130>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	f040 8081 	bne.w	8000f5e <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e64:	4a41      	ldr	r2, [pc, #260]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	613b      	str	r3, [r7, #16]
 8000e76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
 8000e7c:	4b3b      	ldr	r3, [pc, #236]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e80:	4a3a      	ldr	r2, [pc, #232]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6313      	str	r3, [r2, #48]	; 0x30
 8000e88:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f003 0301 	and.w	r3, r3, #1
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
 8000e98:	4b34      	ldr	r3, [pc, #208]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9c:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000e9e:	f043 0302 	orr.w	r3, r3, #2
 8000ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea4:	4b31      	ldr	r3, [pc, #196]	; (8000f6c <HAL_UART_MspInit+0x134>)
 8000ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4828      	ldr	r0, [pc, #160]	; (8000f70 <HAL_UART_MspInit+0x138>)
 8000ece:	f002 f8bd 	bl	800304c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ee2:	2307      	movs	r3, #7
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4821      	ldr	r0, [pc, #132]	; (8000f74 <HAL_UART_MspInit+0x13c>)
 8000eee:	f002 f8ad 	bl	800304c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000ef2:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000ef4:	4a21      	ldr	r2, [pc, #132]	; (8000f7c <HAL_UART_MspInit+0x144>)
 8000ef6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000efa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efe:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f02:	2240      	movs	r2, #64	; 0x40
 8000f04:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f06:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f12:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f1a:	4b17      	ldr	r3, [pc, #92]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f32:	4811      	ldr	r0, [pc, #68]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f34:	f001 fc26 	bl	8002784 <HAL_DMA_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000f3e:	f7ff fe87 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a0c      	ldr	r2, [pc, #48]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f46:	635a      	str	r2, [r3, #52]	; 0x34
 8000f48:	4a0b      	ldr	r2, [pc, #44]	; (8000f78 <HAL_UART_MspInit+0x140>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2105      	movs	r1, #5
 8000f52:	2025      	movs	r0, #37	; 0x25
 8000f54:	f001 fbdf 	bl	8002716 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f58:	2025      	movs	r0, #37	; 0x25
 8000f5a:	f001 fbf8 	bl	800274e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3728      	adds	r7, #40	; 0x28
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	200001f0 	.word	0x200001f0
 8000f7c:	400264b8 	.word	0x400264b8

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b480      	push	{r7}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <MemManage_Handler+0x4>

08000f92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f96:	e7fe      	b.n	8000f96 <BusFault_Handler+0x4>

08000f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f9c:	e7fe      	b.n	8000f9c <UsageFault_Handler+0x4>

08000f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f001 fa92 	bl	80024d8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fb4:	f00a faf6 	bl	800b5a4 <xTaskGetSchedulerState>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d001      	beq.n	8000fc2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fbe:	f00b f9db 	bl	800c378 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f002 f9f6 	bl	80033bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 8000fd8:	2002      	movs	r0, #2
 8000fda:	f002 f9ef 	bl	80033bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 8000fe6:	2004      	movs	r0, #4
 8000fe8:	f002 f9e8 	bl	80033bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 8000ff4:	2008      	movs	r0, #8
 8000ff6:	f002 f9e1 	bl	80033bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f003 fc1d 	bl	8004844 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200001ac 	.word	0x200001ac

08001014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 8001018:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800101c:	f002 f9ce 	bl	80033bc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 8001020:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001024:	f002 f9ca 	bl	80033bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 8001030:	4802      	ldr	r0, [pc, #8]	; (800103c <DMA2_Stream1_IRQHandler+0x10>)
 8001032:	f001 fd3f 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000250 	.word	0x20000250

08001040 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001044:	4802      	ldr	r0, [pc, #8]	; (8001050 <DMA2_Stream2_IRQHandler+0x10>)
 8001046:	f001 fd35 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000104 	.word	0x20000104

08001054 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001058:	4802      	ldr	r0, [pc, #8]	; (8001064 <DMA2_Stream7_IRQHandler+0x10>)
 800105a:	f001 fd2b 	bl	8002ab4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200001f0 	.word	0x200001f0

08001068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001070:	4a14      	ldr	r2, [pc, #80]	; (80010c4 <_sbrk+0x5c>)
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <_sbrk+0x60>)
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d102      	bne.n	800108a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <_sbrk+0x64>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <_sbrk+0x68>)
 8001088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <_sbrk+0x64>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	429a      	cmp	r2, r3
 8001096:	d207      	bcs.n	80010a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001098:	f00b fbf0 	bl	800c87c <__errno>
 800109c:	4603      	mov	r3, r0
 800109e:	220c      	movs	r2, #12
 80010a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010a6:	e009      	b.n	80010bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <_sbrk+0x64>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ae:	4b07      	ldr	r3, [pc, #28]	; (80010cc <_sbrk+0x64>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4413      	add	r3, r2
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_sbrk+0x64>)
 80010b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20020000 	.word	0x20020000
 80010c8:	00000400 	.word	0x00000400
 80010cc:	200002c4 	.word	0x200002c4
 80010d0:	20004f30 	.word	0x20004f30

080010d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d8:	4b06      	ldr	r3, [pc, #24]	; (80010f4 <SystemInit+0x20>)
 80010da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010de:	4a05      	ldr	r2, [pc, #20]	; (80010f4 <SystemInit+0x20>)
 80010e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fe:	490e      	ldr	r1, [pc, #56]	; (8001138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001114:	4c0b      	ldr	r4, [pc, #44]	; (8001144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001122:	f7ff ffd7 	bl	80010d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f00b fbaf 	bl	800c888 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fa2b 	bl	8000584 <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001130:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800113c:	0802c7ac 	.word	0x0802c7ac
  ldr r2, =_sbss
 8001140:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001144:	20004f30 	.word	0x20004f30

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 8001156:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <setSPI_Size+0x84>)
 8001158:	f993 3000 	ldrsb.w	r3, [r3]
 800115c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001160:	429a      	cmp	r2, r3
 8001162:	d02e      	beq.n	80011c2 <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <setSPI_Size+0x88>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4b1a      	ldr	r3, [pc, #104]	; (80011d4 <setSPI_Size+0x88>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001172:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 8001174:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <setSPI_Size+0x84>)
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d10c      	bne.n	800119c <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8001182:	4b14      	ldr	r3, [pc, #80]	; (80011d4 <setSPI_Size+0x88>)
 8001184:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001188:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <setSPI_Size+0x88>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <setSPI_Size+0x88>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	e00a      	b.n	80011b2 <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <setSPI_Size+0x88>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <setSPI_Size+0x88>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <setSPI_Size+0x88>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011b0:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <setSPI_Size+0x88>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <setSPI_Size+0x88>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011c0:	601a      	str	r2, [r3, #0]
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	20000004 	.word	0x20000004
 80011d4:	200000ac 	.word	0x200000ac

080011d8 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	460a      	mov	r2, r1
 80011e2:	71fb      	strb	r3, [r7, #7]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 80011e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff ffad 	bl	800114c <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 80011f2:	4b41      	ldr	r3, [pc, #260]	; (80012f8 <setDMAMemMode+0x120>)
 80011f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011f8:	461a      	mov	r2, r3
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d106      	bne.n	800120e <setDMAMemMode+0x36>
 8001200:	4b3d      	ldr	r3, [pc, #244]	; (80012f8 <setDMAMemMode+0x120>)
 8001202:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001206:	461a      	mov	r2, r3
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	429a      	cmp	r2, r3
 800120c:	d06f      	beq.n	80012ee <setDMAMemMode+0x116>
    config.dma_sz =size;
 800120e:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <setDMAMemMode+0x120>)
 8001214:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 8001216:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <setDMAMemMode+0x120>)
 800121c:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 800121e:	4b37      	ldr	r3, [pc, #220]	; (80012fc <setDMAMemMode+0x124>)
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	4b35      	ldr	r3, [pc, #212]	; (80012fc <setDMAMemMode+0x124>)
 8001228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0201 	bic.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 8001232:	bf00      	nop
 8001234:	4b31      	ldr	r3, [pc, #196]	; (80012fc <setDMAMemMode+0x124>)
 8001236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f7      	bne.n	8001234 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10f      	bne.n	800126a <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800124a:	4b2c      	ldr	r3, [pc, #176]	; (80012fc <setDMAMemMode+0x124>)
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001252:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8001254:	4b29      	ldr	r3, [pc, #164]	; (80012fc <setDMAMemMode+0x124>)
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b27      	ldr	r3, [pc, #156]	; (80012fc <setDMAMemMode+0x124>)
 800125e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e00d      	b.n	8001286 <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <setDMAMemMode+0x124>)
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 8001272:	4b22      	ldr	r3, [pc, #136]	; (80012fc <setDMAMemMode+0x124>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <setDMAMemMode+0x124>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001284:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d116      	bne.n	80012ba <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <setDMAMemMode+0x124>)
 800128e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001294:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <setDMAMemMode+0x124>)
 8001298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800129a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800129e:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 80012a0:	4b16      	ldr	r3, [pc, #88]	; (80012fc <setDMAMemMode+0x124>)
 80012a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80012ac:	4b13      	ldr	r3, [pc, #76]	; (80012fc <setDMAMemMode+0x124>)
 80012ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e011      	b.n	80012de <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <setDMAMemMode+0x124>)
 80012bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <setDMAMemMode+0x124>)
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	2200      	movs	r2, #0
 80012c8:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <setDMAMemMode+0x124>)
 80012cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <setDMAMemMode+0x124>)
 80012d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 80012dc:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 80012de:	4b07      	ldr	r3, [pc, #28]	; (80012fc <setDMAMemMode+0x124>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <setDMAMemMode+0x124>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012ec:	601a      	str	r2, [r3, #0]
  }
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000004 	.word	0x20000004
 80012fc:	200000ac 	.word	0x200000ac

08001300 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 800130c:	2000      	movs	r0, #0
 800130e:	f7ff ff1d 	bl	800114c <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8001312:	4b12      	ldr	r3, [pc, #72]	; (800135c <LCD_WriteCommand+0x5c>)
 8001314:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001318:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <LCD_WriteCommand+0x60>)
 800131c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001320:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001326:	2201      	movs	r2, #1
 8001328:	6879      	ldr	r1, [r7, #4]
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <LCD_WriteCommand+0x64>)
 800132c:	f002 fd4b 	bl	8003dc6 <HAL_SPI_Transmit>
  if(argc){
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <LCD_WriteCommand+0x5c>)
 8001338:	2210      	movs	r2, #16
 800133a:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	1c59      	adds	r1, r3, #1
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	b29a      	uxth	r2, r3
 8001344:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001348:	4806      	ldr	r0, [pc, #24]	; (8001364 <LCD_WriteCommand+0x64>)
 800134a:	f002 fd3c 	bl	8003dc6 <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 800134e:	4b04      	ldr	r3, [pc, #16]	; (8001360 <LCD_WriteCommand+0x60>)
 8001350:	2201      	movs	r2, #1
 8001352:	619a      	str	r2, [r3, #24]
#endif
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	200000ac 	.word	0x200000ac

08001368 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 8001372:	4b2e      	ldr	r3, [pc, #184]	; (800142c <LCD_WriteData+0xc4>)
 8001374:	2210      	movs	r2, #16
 8001376:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <LCD_WriteData+0xc8>)
 800137a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800137e:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001380:	e049      	b.n	8001416 <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001388:	4293      	cmp	r3, r2
 800138a:	bf28      	it	cs
 800138c:	4613      	movcs	r3, r2
 800138e:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d924      	bls.n	80013e0 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	461a      	mov	r2, r3
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	4825      	ldr	r0, [pc, #148]	; (8001434 <LCD_WriteData+0xcc>)
 800139e:	f002 fe4f 	bl	8004040 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 80013a2:	bf00      	nop
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <LCD_WriteData+0xcc>)
 80013a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 fd61 	bl	8002e70 <HAL_DMA_GetState>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d1f7      	bne.n	80013a4 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <LCD_WriteData+0xd0>)
 80013b6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d127      	bne.n	800140e <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 80013be:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <LCD_WriteData+0xd0>)
 80013c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d104      	bne.n	80013d2 <LCD_WriteData+0x6a>
          buff += chunk_size;
 80013c8:	89fb      	ldrh	r3, [r7, #14]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	4413      	add	r3, r2
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	e01d      	b.n	800140e <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 80013d2:	89fb      	ldrh	r3, [r7, #14]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	461a      	mov	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4413      	add	r3, r2
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	e016      	b.n	800140e <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 80013e0:	89fa      	ldrh	r2, [r7, #14]
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4812      	ldr	r0, [pc, #72]	; (8001434 <LCD_WriteData+0xcc>)
 80013ea:	f002 fcec 	bl	8003dc6 <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <LCD_WriteData+0xd0>)
 80013f0:	f993 3000 	ldrsb.w	r3, [r3]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d104      	bne.n	8001402 <LCD_WriteData+0x9a>
        buff += chunk_size;
 80013f8:	89fb      	ldrh	r3, [r7, #14]
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	e005      	b.n	800140e <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 8001402:	89fb      	ldrh	r3, [r7, #14]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4413      	add	r3, r2
 800140c:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1b2      	bne.n	8001382 <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 800141c:	4b04      	ldr	r3, [pc, #16]	; (8001430 <LCD_WriteData+0xc8>)
 800141e:	2201      	movs	r2, #1
 8001420:	619a      	str	r2, [r3, #24]
#endif
}
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	200000ac 	.word	0x200000ac
 8001438:	20000004 	.word	0x20000004

0800143c <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b08b      	sub	sp, #44	; 0x2c
 8001440:	af00      	add	r7, sp, #0
 8001442:	4604      	mov	r4, r0
 8001444:	4608      	mov	r0, r1
 8001446:	4611      	mov	r1, r2
 8001448:	461a      	mov	r2, r3
 800144a:	4623      	mov	r3, r4
 800144c:	80fb      	strh	r3, [r7, #6]
 800144e:	4603      	mov	r3, r0
 8001450:	80bb      	strh	r3, [r7, #4]
 8001452:	460b      	mov	r3, r1
 8001454:	807b      	strh	r3, [r7, #2]
 8001456:	4613      	mov	r3, r2
 8001458:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800145e:	887b      	ldrh	r3, [r7, #2]
 8001460:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8001462:	88bb      	ldrh	r3, [r7, #4]
 8001464:	847b      	strh	r3, [r7, #34]	; 0x22
 8001466:	883b      	ldrh	r3, [r7, #0]
 8001468:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800146a:	232a      	movs	r3, #42	; 0x2a
 800146c:	763b      	strb	r3, [r7, #24]
 800146e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001472:	121b      	asrs	r3, r3, #8
 8001474:	b21b      	sxth	r3, r3
 8001476:	b2db      	uxtb	r3, r3
 8001478:	767b      	strb	r3, [r7, #25]
 800147a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800147c:	b2db      	uxtb	r3, r3
 800147e:	76bb      	strb	r3, [r7, #26]
 8001480:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001484:	121b      	asrs	r3, r3, #8
 8001486:	b21b      	sxth	r3, r3
 8001488:	b2db      	uxtb	r3, r3
 800148a:	76fb      	strb	r3, [r7, #27]
 800148c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800148e:	b2db      	uxtb	r3, r3
 8001490:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001492:	f107 0318 	add.w	r3, r7, #24
 8001496:	2104      	movs	r1, #4
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff31 	bl	8001300 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800149e:	232b      	movs	r3, #43	; 0x2b
 80014a0:	743b      	strb	r3, [r7, #16]
 80014a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80014a6:	121b      	asrs	r3, r3, #8
 80014a8:	b21b      	sxth	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	747b      	strb	r3, [r7, #17]
 80014ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	74bb      	strb	r3, [r7, #18]
 80014b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014b8:	121b      	asrs	r3, r3, #8
 80014ba:	b21b      	sxth	r3, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	74fb      	strb	r3, [r7, #19]
 80014c0:	8c3b      	ldrh	r3, [r7, #32]
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80014c6:	f107 0310 	add.w	r3, r7, #16
 80014ca:	2104      	movs	r1, #4
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff17 	bl	8001300 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 80014d2:	232c      	movs	r3, #44	; 0x2c
 80014d4:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	2100      	movs	r1, #0
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff0f 	bl	8001300 <LCD_WriteCommand>
  }
}
 80014e2:	bf00      	nop
 80014e4:	372c      	adds	r7, #44	; 0x2c
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
	...

080014ec <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
 80014f6:	460b      	mov	r3, r1
 80014f8:	80bb      	strh	r3, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db30      	blt.n	8001568 <LCD_DrawPixel+0x7c>
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	2bef      	cmp	r3, #239	; 0xef
 800150c:	dc2c      	bgt.n	8001568 <LCD_DrawPixel+0x7c>
 800150e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	db28      	blt.n	8001568 <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 8001516:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800151a:	2bef      	cmp	r3, #239	; 0xef
 800151c:	dc24      	bgt.n	8001568 <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	b29b      	uxth	r3, r3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	733b      	strb	r3, [r7, #12]
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	b2db      	uxtb	r3, r3
 800152c:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 800152e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001532:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001536:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800153a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800153e:	f7ff ff7d 	bl	800143c <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <LCD_DrawPixel+0x84>)
 8001544:	2210      	movs	r2, #16
 8001546:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001548:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <LCD_DrawPixel+0x88>)
 800154a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800154e:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001550:	f107 010c 	add.w	r1, r7, #12
 8001554:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001558:	2202      	movs	r2, #2
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <LCD_DrawPixel+0x8c>)
 800155c:	f002 fc33 	bl	8003dc6 <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <LCD_DrawPixel+0x88>)
 8001562:	2201      	movs	r2, #1
 8001564:	619a      	str	r2, [r3, #24]
 8001566:	e000      	b.n	800156a <LCD_DrawPixel+0x7e>
    return;
 8001568:	bf00      	nop
#endif
}
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	200000ac 	.word	0x200000ac

0800157c <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 800157c:	b580      	push	{r7, lr}
 800157e:	b0a4      	sub	sp, #144	; 0x90
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d905      	bls.n	800159a <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800158e:	1cbb      	adds	r3, r7, #2
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fee8 	bl	8001368 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8001598:	e02f      	b.n	80015fa <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 800159a:	2300      	movs	r3, #0
 800159c:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80015a0:	e00c      	b.n	80015bc <LCD_FillPixels+0x40>
      fill[t]=color;
 80015a2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	3390      	adds	r3, #144	; 0x90
 80015ac:	443b      	add	r3, r7
 80015ae:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 80015b2:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80015b6:	3301      	adds	r3, #1
 80015b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80015bc:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b40      	cmp	r3, #64	; 0x40
 80015c4:	bf28      	it	cs
 80015c6:	2340      	movcs	r3, #64	; 0x40
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d3ea      	bcc.n	80015a2 <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 80015cc:	e012      	b.n	80015f4 <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	bf28      	it	cs
 80015d4:	2340      	movcs	r3, #64	; 0x40
 80015d6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 80015da:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff febf 	bl	8001368 <LCD_WriteData>
      pixels-=sz;
 80015ea:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80015ee:	687a      	ldr	r2, [r7, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1e9      	bne.n	80015ce <LCD_FillPixels+0x52>
}
 80015fa:	bf00      	nop
 80015fc:	3790      	adds	r7, #144	; 0x90
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4604      	mov	r4, r0
 800160c:	4608      	mov	r0, r1
 800160e:	4611      	mov	r1, r2
 8001610:	461a      	mov	r2, r3
 8001612:	4623      	mov	r3, r4
 8001614:	80fb      	strh	r3, [r7, #6]
 8001616:	4603      	mov	r3, r0
 8001618:	80bb      	strh	r3, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	807b      	strh	r3, [r7, #2]
 800161e:	4613      	mov	r3, r2
 8001620:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001622:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001626:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800162a:	d105      	bne.n	8001638 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 800162c:	2100      	movs	r1, #0
 800162e:	2001      	movs	r0, #1
 8001630:	f7ff fdd2 	bl	80011d8 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8001634:	2300      	movs	r3, #0
 8001636:	e011      	b.n	800165c <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 8001638:	f9b7 3000 	ldrsh.w	r3, [r7]
 800163c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001640:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001644:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001648:	f7ff fef8 	bl	800143c <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 800164c:	2101      	movs	r1, #1
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fdc2 	bl	80011d8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <LCD_FillArea+0x60>)
 8001656:	2210      	movs	r2, #16
 8001658:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 800165a:	4b03      	ldr	r3, [pc, #12]	; (8001668 <LCD_FillArea+0x64>)
}
 800165c:	4618      	mov	r0, r3
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	bd90      	pop	{r4, r7, pc}
 8001664:	40020000 	.word	0x40020000
 8001668:	0800157d 	.word	0x0800157d

0800166c <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 800166c:	b590      	push	{r4, r7, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
 8001672:	4604      	mov	r4, r0
 8001674:	4608      	mov	r0, r1
 8001676:	4611      	mov	r1, r2
 8001678:	461a      	mov	r2, r3
 800167a:	4623      	mov	r3, r4
 800167c:	80fb      	strh	r3, [r7, #6]
 800167e:	4603      	mov	r3, r0
 8001680:	80bb      	strh	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	807b      	strh	r3, [r7, #2]
 8001686:	4613      	mov	r3, r2
 8001688:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 800168a:	887a      	ldrh	r2, [r7, #2]
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	3301      	adds	r3, #1
 8001692:	4619      	mov	r1, r3
 8001694:	883a      	ldrh	r2, [r7, #0]
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	3301      	adds	r3, #1
 800169c:	fb01 f303 	mul.w	r3, r1, r3
 80016a0:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80016a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016a6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016aa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80016ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016b2:	f7ff fec3 	bl	800143c <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80016b6:	2101      	movs	r1, #1
 80016b8:	2000      	movs	r0, #0
 80016ba:	f7ff fd8d 	bl	80011d8 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80016be:	8c3b      	ldrh	r3, [r7, #32]
 80016c0:	4619      	mov	r1, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7ff ff5a 	bl	800157c <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 80016c8:	2100      	movs	r1, #0
 80016ca:	2001      	movs	r0, #1
 80016cc:	f7ff fd84 	bl	80011d8 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd90      	pop	{r4, r7, pc}

080016da <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 80016da:	b590      	push	{r4, r7, lr}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	603a      	str	r2, [r7, #0]
 80016e4:	80fb      	strh	r3, [r7, #6]
 80016e6:	460b      	mov	r3, r1
 80016e8:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	889b      	ldrh	r3, [r3, #4]
 80016ee:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	88db      	ldrh	r3, [r3, #6]
 80016f4:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	2bef      	cmp	r3, #239	; 0xef
 80016fa:	d837      	bhi.n	800176c <LCD_DrawImage+0x92>
 80016fc:	88bb      	ldrh	r3, [r7, #4]
 80016fe:	2bef      	cmp	r3, #239	; 0xef
 8001700:	d834      	bhi.n	800176c <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001702:	88fa      	ldrh	r2, [r7, #6]
 8001704:	89fb      	ldrh	r3, [r7, #14]
 8001706:	4413      	add	r3, r2
 8001708:	2bf0      	cmp	r3, #240	; 0xf0
 800170a:	dc31      	bgt.n	8001770 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800170c:	88ba      	ldrh	r2, [r7, #4]
 800170e:	89bb      	ldrh	r3, [r7, #12]
 8001710:	4413      	add	r3, r2
 8001712:	2bf0      	cmp	r3, #240	; 0xf0
 8001714:	dc2e      	bgt.n	8001774 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	7a1b      	ldrb	r3, [r3, #8]
 800171a:	2b10      	cmp	r3, #16
 800171c:	d12c      	bne.n	8001778 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 800171e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001722:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001726:	88fa      	ldrh	r2, [r7, #6]
 8001728:	89fb      	ldrh	r3, [r7, #14]
 800172a:	4413      	add	r3, r2
 800172c:	b29b      	uxth	r3, r3
 800172e:	3b01      	subs	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	b21c      	sxth	r4, r3
 8001734:	88ba      	ldrh	r2, [r7, #4]
 8001736:	89bb      	ldrh	r3, [r7, #12]
 8001738:	4413      	add	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	3b01      	subs	r3, #1
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21b      	sxth	r3, r3
 8001742:	4622      	mov	r2, r4
 8001744:	f7ff fe7a 	bl	800143c <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 8001748:	2101      	movs	r1, #1
 800174a:	2001      	movs	r0, #1
 800174c:	f7ff fd44 	bl	80011d8 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	89fb      	ldrh	r3, [r7, #14]
 8001756:	89ba      	ldrh	r2, [r7, #12]
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4619      	mov	r1, r3
 800175e:	f7ff fe03 	bl	8001368 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001762:	2100      	movs	r1, #0
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fd37 	bl	80011d8 <setDMAMemMode>
 800176a:	e006      	b.n	800177a <LCD_DrawImage+0xa0>
    return;
 800176c:	bf00      	nop
 800176e:	e004      	b.n	800177a <LCD_DrawImage+0xa0>
    return;
 8001770:	bf00      	nop
 8001772:	e002      	b.n	800177a <LCD_DrawImage+0xa0>
    return;
 8001774:	bf00      	nop
 8001776:	e000      	b.n	800177a <LCD_DrawImage+0xa0>
    return;
 8001778:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 800177a:	3714      	adds	r7, #20
 800177c:	46bd      	mov	sp, r7
 800177e:	bd90      	pop	{r4, r7, pc}

08001780 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001780:	b590      	push	{r4, r7, lr}
 8001782:	b087      	sub	sp, #28
 8001784:	af02      	add	r7, sp, #8
 8001786:	4604      	mov	r4, r0
 8001788:	4608      	mov	r0, r1
 800178a:	4611      	mov	r1, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4623      	mov	r3, r4
 8001790:	80fb      	strh	r3, [r7, #6]
 8001792:	4603      	mov	r3, r0
 8001794:	80bb      	strh	r3, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	807b      	strh	r3, [r7, #2]
 800179a:	4613      	mov	r3, r2
 800179c:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 800179e:	88fa      	ldrh	r2, [r7, #6]
 80017a0:	887b      	ldrh	r3, [r7, #2]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d10a      	bne.n	80017bc <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80017a6:	88ba      	ldrh	r2, [r7, #4]
 80017a8:	883b      	ldrh	r3, [r7, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d918      	bls.n	80017e0 <LCD_DrawLine+0x60>
 80017ae:	88bb      	ldrh	r3, [r7, #4]
 80017b0:	81bb      	strh	r3, [r7, #12]
 80017b2:	883b      	ldrh	r3, [r7, #0]
 80017b4:	80bb      	strh	r3, [r7, #4]
 80017b6:	89bb      	ldrh	r3, [r7, #12]
 80017b8:	803b      	strh	r3, [r7, #0]
 80017ba:	e011      	b.n	80017e0 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80017bc:	88ba      	ldrh	r2, [r7, #4]
 80017be:	883b      	ldrh	r3, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d10a      	bne.n	80017da <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80017c4:	88fa      	ldrh	r2, [r7, #6]
 80017c6:	887b      	ldrh	r3, [r7, #2]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d909      	bls.n	80017e0 <LCD_DrawLine+0x60>
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	81fb      	strh	r3, [r7, #14]
 80017d0:	887b      	ldrh	r3, [r7, #2]
 80017d2:	80fb      	strh	r3, [r7, #6]
 80017d4:	89fb      	ldrh	r3, [r7, #14]
 80017d6:	807b      	strh	r3, [r7, #2]
 80017d8:	e002      	b.n	80017e0 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017de:	e009      	b.n	80017f4 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 80017e0:	883c      	ldrh	r4, [r7, #0]
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	88b9      	ldrh	r1, [r7, #4]
 80017e6:	88f8      	ldrh	r0, [r7, #6]
 80017e8:	8c3b      	ldrh	r3, [r7, #32]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	4623      	mov	r3, r4
 80017ee:	f7ff ff3d 	bl	800166c <LCD_Fill>
  return UG_RESULT_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd90      	pop	{r4, r7, pc}

080017fc <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60ba      	str	r2, [r7, #8]
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4603      	mov	r3, r0
 8001808:	81fb      	strh	r3, [r7, #14]
 800180a:	460b      	mov	r3, r1
 800180c:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f003 ff68 	bl	80056e4 <UG_FontSelect>
  UG_SetForecolor(color);
 8001814:	8b3b      	ldrh	r3, [r7, #24]
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fdac 	bl	8006374 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	4618      	mov	r0, r3
 8001820:	f004 fdba 	bl	8006398 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001824:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001828:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	4618      	mov	r0, r3
 8001830:	f004 fd18 	bl	8006264 <UG_PutString>
}
 8001834:	bf00      	nop
 8001836:	3710      	adds	r7, #16
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}

0800183c <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <LCD_setPower+0x14>
 800184c:	2329      	movs	r3, #41	; 0x29
 800184e:	e000      	b.n	8001852 <LCD_setPower+0x16>
 8001850:	2328      	movs	r3, #40	; 0x28
 8001852:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2100      	movs	r1, #0
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fd50 	bl	8001300 <LCD_WriteCommand>
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <LCD_Update>:

static void LCD_Update(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800186c:	2100      	movs	r1, #0
 800186e:	2001      	movs	r0, #1
 8001870:	f7ff fcb2 	bl	80011d8 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}

08001878 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <LCD_init+0xa8>)
 8001880:	2201      	movs	r2, #1
 8001882:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <LCD_init+0xac>)
 8001886:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800188a:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 800188c:	2019      	movs	r0, #25
 800188e:	f000 fe43 	bl	8002518 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <LCD_init+0xac>)
 8001894:	2240      	movs	r2, #64	; 0x40
 8001896:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001898:	20c8      	movs	r0, #200	; 0xc8
 800189a:	f000 fe3d 	bl	8002518 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 800189e:	4922      	ldr	r1, [pc, #136]	; (8001928 <LCD_init+0xb0>)
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <LCD_init+0xb4>)
 80018a2:	f003 fead 	bl	8005600 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80018a6:	4922      	ldr	r1, [pc, #136]	; (8001930 <LCD_init+0xb8>)
 80018a8:	2000      	movs	r0, #0
 80018aa:	f005 fd35 	bl	8007318 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80018ae:	4921      	ldr	r1, [pc, #132]	; (8001934 <LCD_init+0xbc>)
 80018b0:	2001      	movs	r0, #1
 80018b2:	f005 fd31 	bl	8007318 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 80018b6:	4920      	ldr	r1, [pc, #128]	; (8001938 <LCD_init+0xc0>)
 80018b8:	2002      	movs	r0, #2
 80018ba:	f005 fd2d 	bl	8007318 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 80018be:	491f      	ldr	r1, [pc, #124]	; (800193c <LCD_init+0xc4>)
 80018c0:	2003      	movs	r0, #3
 80018c2:	f005 fd29 	bl	8007318 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 80018c6:	2000      	movs	r0, #0
 80018c8:	f004 fd94 	bl	80063f4 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 80018cc:	2000      	movs	r0, #0
 80018ce:	f004 fda5 	bl	800641c <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80018d2:	2300      	movs	r3, #0
 80018d4:	80fb      	strh	r3, [r7, #6]
 80018d6:	e013      	b.n	8001900 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	3301      	adds	r3, #1
 80018dc:	4a18      	ldr	r2, [pc, #96]	; (8001940 <LCD_init+0xc8>)
 80018de:	441a      	add	r2, r3
 80018e0:	88fb      	ldrh	r3, [r7, #6]
 80018e2:	4917      	ldr	r1, [pc, #92]	; (8001940 <LCD_init+0xc8>)
 80018e4:	5ccb      	ldrb	r3, [r1, r3]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4610      	mov	r0, r2
 80018ea:	f7ff fd09 	bl	8001300 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 80018ee:	88fb      	ldrh	r3, [r7, #6]
 80018f0:	4a13      	ldr	r2, [pc, #76]	; (8001940 <LCD_init+0xc8>)
 80018f2:	5cd3      	ldrb	r3, [r2, r3]
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	88fb      	ldrh	r3, [r7, #6]
 80018f8:	4413      	add	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	3302      	adds	r3, #2
 80018fe:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	2b4b      	cmp	r3, #75	; 0x4b
 8001904:	d9e8      	bls.n	80018d8 <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8001906:	2000      	movs	r0, #0
 8001908:	f003 fefc 	bl	8005704 <UG_FillScreen>
  LCD_setPower(ENABLE);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff ff95 	bl	800183c <LCD_setPower>
  UG_Update();
 8001912:	f005 fd23 	bl	800735c <UG_Update>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40020400 	.word	0x40020400
 8001924:	40020000 	.word	0x40020000
 8001928:	20000008 	.word	0x20000008
 800192c:	200002e8 	.word	0x200002e8
 8001930:	08001781 	.word	0x08001781
 8001934:	0800166d 	.word	0x0800166d
 8001938:	08001605 	.word	0x08001605
 800193c:	080016db 	.word	0x080016db
 8001940:	0800d4dc 	.word	0x0800d4dc

08001944 <clearTime>:


#define DEFAULT_FONT FONT_6X8

static uint32_t draw_time=0;
static void clearTime(void){
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  draw_time=HAL_GetTick();
 8001948:	f000 fdda 	bl	8002500 <HAL_GetTick>
 800194c:	4603      	mov	r3, r0
 800194e:	4a02      	ldr	r2, [pc, #8]	; (8001958 <clearTime+0x14>)
 8001950:	6013      	str	r3, [r2, #0]
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000344 	.word	0x20000344

0800195c <printTime>:
static void printTime(void){
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
  char str[8];
  uint8_t t = UG_FontGetTransparency();
 8001962:	f004 fd81 	bl	8006468 <UG_FontGetTransparency>
 8001966:	4603      	mov	r3, r0
 8001968:	73fb      	strb	r3, [r7, #15]
  sprintf(str,"%lums",HAL_GetTick()-draw_time);
 800196a:	f000 fdc9 	bl	8002500 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <printTime+0x60>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	4911      	ldr	r1, [pc, #68]	; (80019c0 <printTime+0x64>)
 800197a:	4618      	mov	r0, r3
 800197c:	f00b f938 	bl	800cbf0 <siprintf>
  UG_FontSelect(DEFAULT_FONT);
 8001980:	4810      	ldr	r0, [pc, #64]	; (80019c4 <printTime+0x68>)
 8001982:	f003 feaf 	bl	80056e4 <UG_FontSelect>
  UG_SetForecolor(C_YELLOW);
 8001986:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 800198a:	f004 fcf3 	bl	8006374 <UG_SetForecolor>
  UG_SetBackcolor(C_BLACK);
 800198e:	2000      	movs	r0, #0
 8001990:	f004 fd02 	bl	8006398 <UG_SetBackcolor>
  UG_FontSetTransparency(0);
 8001994:	2000      	movs	r0, #0
 8001996:	f004 fd55 	bl	8006444 <UG_FontSetTransparency>
  UG_PutString(10, 15, str);
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	461a      	mov	r2, r3
 800199e:	210f      	movs	r1, #15
 80019a0:	200a      	movs	r0, #10
 80019a2:	f004 fc5f 	bl	8006264 <UG_PutString>
  UG_FontSetTransparency(t);
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f004 fd4b 	bl	8006444 <UG_FontSetTransparency>
  UG_Update();
 80019ae:	f005 fcd5 	bl	800735c <UG_Update>
}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000344 	.word	0x20000344
 80019c0:	0800d328 	.word	0x0800d328
 80019c4:	0801fe24 	.word	0x0801fe24

080019c8 <LCD_Test>:
static UG_BUTTON button_1;
static UG_TEXTBOX textbox_1;
static UG_OBJECT obj_buff_wnd_1[MAX_OBJECTS];
static UG_PROGRESS pgb;
void LCD_Test(void)
{
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b091      	sub	sp, #68	; 0x44
 80019cc:	af04      	add	r7, sp, #16

  int16_t x=40,y=40,rad=20,count=0;
 80019ce:	2328      	movs	r3, #40	; 0x28
 80019d0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019d2:	2328      	movs	r3, #40	; 0x28
 80019d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80019d6:	2314      	movs	r3, #20
 80019d8:	827b      	strh	r3, [r7, #18]
 80019da:	2300      	movs	r3, #0
 80019dc:	857b      	strh	r3, [r7, #42]	; 0x2a
  int8_t xadd=2,yadd=2,dstep=2;
 80019de:	2302      	movs	r3, #2
 80019e0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 80019e4:	2302      	movs	r3, #2
 80019e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80019ea:	2302      	movs	r3, #2
 80019ec:	747b      	strb	r3, [r7, #17]
  uint8_t r=0,g=0,b=0, t;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t start, show;

  UG_FontSetTransparency(1);
 8001a00:	2001      	movs	r0, #1
 8001a02:	f004 fd1f 	bl	8006444 <UG_FontSetTransparency>

  UG_FillScreen(C_BLACK);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f003 fe7c 	bl	8005704 <UG_FillScreen>

  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	4bc0      	ldr	r3, [pc, #768]	; (8001d18 <LCD_Test+0x350>)
 8001a18:	4ac0      	ldr	r2, [pc, #768]	; (8001d1c <LCD_Test+0x354>)
 8001a1a:	2138      	movs	r1, #56	; 0x38
 8001a1c:	2032      	movs	r0, #50	; 0x32
 8001a1e:	f7ff feed 	bl	80017fc <LCD_PutStr>
  HAL_Delay(500);
 8001a22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a26:	f000 fd77 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001a2a:	2000      	movs	r0, #0
 8001a2c:	f003 fe6a 	bl	8005704 <UG_FillScreen>
  show=start=HAL_GetTick();
 8001a30:	f000 fd66 	bl	8002500 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	623b      	str	r3, [r7, #32]
  t = UG_FontGetTransparency();
 8001a3a:	f004 fd15 	bl	8006468 <UG_FontGetTransparency>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	72fb      	strb	r3, [r7, #11]
  while(HAL_GetTick()-start<4000){
 8001a42:	e0a8      	b.n	8001b96 <LCD_Test+0x1ce>
    UG_FillFrame(x-rad, y-rad, x+rad, y+rad, C_BLACK);
 8001a44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001a46:	8a7b      	ldrh	r3, [r7, #18]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	b218      	sxth	r0, r3
 8001a4e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a50:	8a7b      	ldrh	r3, [r7, #18]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	b219      	sxth	r1, r3
 8001a58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001a5a:	8a7b      	ldrh	r3, [r7, #18]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	b29b      	uxth	r3, r3
 8001a60:	b21c      	sxth	r4, r3
 8001a62:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a64:	8a7b      	ldrh	r3, [r7, #18]
 8001a66:	4413      	add	r3, r2
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	b21b      	sxth	r3, r3
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	9200      	str	r2, [sp, #0]
 8001a70:	4622      	mov	r2, r4
 8001a72:	f003 fe6b 	bl	800574c <UG_FillFrame>
    x+=xadd;
 8001a76:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y+=yadd;
 8001a84:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x-rad<1){
 8001a92:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a96:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	dc0a      	bgt.n	8001ab6 <LCD_Test+0xee>
      xadd=dstep;
 8001aa0:	7c7b      	ldrb	r3, [r7, #17]
 8001aa2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001aa6:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001aae:	4413      	add	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001ab4:	e012      	b.n	8001adc <LCD_Test+0x114>
    }
    else if(x+rad>(LCD_WIDTH-1)){
 8001ab6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001aba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001abe:	4413      	add	r3, r2
 8001ac0:	2bef      	cmp	r3, #239	; 0xef
 8001ac2:	dd0b      	ble.n	8001adc <LCD_Test+0x114>
      xadd=-dstep;
 8001ac4:	7c7b      	ldrb	r3, [r7, #17]
 8001ac6:	425b      	negs	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001ace:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if(y-rad<1){
 8001adc:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001ae0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	dc0a      	bgt.n	8001b00 <LCD_Test+0x138>
      yadd=dstep;
 8001aea:	7c7b      	ldrb	r3, [r7, #17]
 8001aec:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001af0:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001af8:	4413      	add	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001afe:	e012      	b.n	8001b26 <LCD_Test+0x15e>
    }
    else if(y+rad>(LCD_HEIGHT-1)){
 8001b00:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001b04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2bef      	cmp	r3, #239	; 0xef
 8001b0c:	dd0b      	ble.n	8001b26 <LCD_Test+0x15e>
      yadd=-dstep;
 8001b0e:	7c7b      	ldrb	r3, [r7, #17]
 8001b10:	425b      	negs	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001b18:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b20:	4413      	add	r3, r2
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    UG_FillCircle(x, y, rad, C_WHITE);
 8001b26:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b2a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001b2e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001b32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b36:	f004 f839 	bl	8005bac <UG_FillCircle>
    UG_FontSetTransparency(0);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f004 fc82 	bl	8006444 <UG_FontSetTransparency>
    LCD_PutStr(0, 0, str, DEFAULT_FONT, C_RED, C_BLACK);
 8001b40:	2300      	movs	r3, #0
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4b73      	ldr	r3, [pc, #460]	; (8001d18 <LCD_Test+0x350>)
 8001b4c:	4a74      	ldr	r2, [pc, #464]	; (8001d20 <LCD_Test+0x358>)
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff fe53 	bl	80017fc <LCD_PutStr>
    UG_FontSetTransparency(t);
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f004 fc73 	bl	8006444 <UG_FontSetTransparency>
    UG_Update();
 8001b5e:	f005 fbfd 	bl	800735c <UG_Update>
    count++;
 8001b62:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(HAL_GetTick()-show>999){
 8001b6e:	f000 fcc7 	bl	8002500 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b7c:	d30b      	bcc.n	8001b96 <LCD_Test+0x1ce>
      show=HAL_GetTick();
 8001b7e:	f000 fcbf 	bl	8002500 <HAL_GetTick>
 8001b82:	6238      	str	r0, [r7, #32]
      sprintf(str,"%dFPS",count);
 8001b84:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4966      	ldr	r1, [pc, #408]	; (8001d24 <LCD_Test+0x35c>)
 8001b8c:	4864      	ldr	r0, [pc, #400]	; (8001d20 <LCD_Test+0x358>)
 8001b8e:	f00b f82f 	bl	800cbf0 <siprintf>
      count=0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	857b      	strh	r3, [r7, #42]	; 0x2a
  while(HAL_GetTick()-start<4000){
 8001b96:	f000 fcb3 	bl	8002500 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001ba4:	f4ff af4e 	bcc.w	8001a44 <LCD_Test+0x7c>
    }
  }

  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bae:	e019      	b.n	8001be4 <LCD_Test+0x21c>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb4:	02db      	lsls	r3, r3, #11
 8001bb6:	b21a      	sxth	r2, r3
 8001bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bbc:	015b      	lsls	r3, r3, #5
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bc8:	b21b      	sxth	r3, r3
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	b21b      	sxth	r3, r3
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 fd97 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001bd6:	f005 fbc1 	bl	800735c <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001bda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bde:	3301      	adds	r3, #1
 8001be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001be8:	2b1f      	cmp	r3, #31
 8001bea:	d9e1      	bls.n	8001bb0 <LCD_Test+0x1e8>
  }
  r=31;
 8001bec:	231f      	movs	r3, #31
 8001bee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bf8:	e019      	b.n	8001c2e <LCD_Test+0x266>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bfe:	02db      	lsls	r3, r3, #11
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c06:	015b      	lsls	r3, r3, #5
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	b29b      	uxth	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 fd72 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001c20:	f005 fb9c 	bl	800735c <UG_Update>
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001c24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c28:	3302      	adds	r3, #2
 8001c2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c32:	2b3f      	cmp	r3, #63	; 0x3f
 8001c34:	d9e1      	bls.n	8001bfa <LCD_Test+0x232>
  }
  g=63;
 8001c36:	233f      	movs	r3, #63	; 0x3f
 8001c38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001c3c:	231c      	movs	r3, #28
 8001c3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c42:	e019      	b.n	8001c78 <LCD_Test+0x2b0>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c48:	02db      	lsls	r3, r3, #11
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c50:	015b      	lsls	r3, r3, #5
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b21a      	sxth	r2, r3
 8001c58:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c5c:	b21b      	sxth	r3, r3
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	b21b      	sxth	r3, r3
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fd4d 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001c6a:	f005 fb77 	bl	800735c <UG_Update>
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001c6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c72:	3b01      	subs	r3, #1
 8001c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1e1      	bne.n	8001c44 <LCD_Test+0x27c>
  }
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c86:	e019      	b.n	8001cbc <LCD_Test+0x2f4>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c8c:	02db      	lsls	r3, r3, #11
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c94:	015b      	lsls	r3, r3, #5
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	b21a      	sxth	r2, r3
 8001c9c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	b21b      	sxth	r3, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f003 fd2b 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001cae:	f005 fb55 	bl	800735c <UG_Update>
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001cb2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001cbc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cc0:	2b1f      	cmp	r3, #31
 8001cc2:	d9e1      	bls.n	8001c88 <LCD_Test+0x2c0>
  }
  b=31;
 8001cc4:	231f      	movs	r3, #31
 8001cc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001cca:	2338      	movs	r3, #56	; 0x38
 8001ccc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cd0:	e019      	b.n	8001d06 <LCD_Test+0x33e>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001cd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd6:	02db      	lsls	r3, r3, #11
 8001cd8:	b21a      	sxth	r2, r3
 8001cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cde:	015b      	lsls	r3, r3, #5
 8001ce0:	b21b      	sxth	r3, r3
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b21a      	sxth	r2, r3
 8001ce6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cea:	b21b      	sxth	r3, r3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b21b      	sxth	r3, r3
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f003 fd06 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001cf8:	f005 fb30 	bl	800735c <UG_Update>
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d00:	3b02      	subs	r3, #2
 8001d02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e1      	bne.n	8001cd2 <LCD_Test+0x30a>
  }
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d14:	e022      	b.n	8001d5c <LCD_Test+0x394>
 8001d16:	bf00      	nop
 8001d18:	0801fe24 	.word	0x0801fe24
 8001d1c:	0800d330 	.word	0x0800d330
 8001d20:	200002c8 	.word	0x200002c8
 8001d24:	0800d340 	.word	0x0800d340
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d2c:	02db      	lsls	r3, r3, #11
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d34:	015b      	lsls	r3, r3, #5
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	b21a      	sxth	r2, r3
 8001d3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d40:	b21b      	sxth	r3, r3
 8001d42:	4313      	orrs	r3, r2
 8001d44:	b21b      	sxth	r3, r3
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fcdb 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001d4e:	f005 fb05 	bl	800735c <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d56:	3301      	adds	r3, #1
 8001d58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d60:	2b1f      	cmp	r3, #31
 8001d62:	d9e1      	bls.n	8001d28 <LCD_Test+0x360>
  }
  r=31;
 8001d64:	231f      	movs	r3, #31
 8001d66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d70:	e019      	b.n	8001da6 <LCD_Test+0x3de>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001d72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d76:	02db      	lsls	r3, r3, #11
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d7e:	015b      	lsls	r3, r3, #5
 8001d80:	b21b      	sxth	r3, r3
 8001d82:	4313      	orrs	r3, r2
 8001d84:	b21a      	sxth	r2, r3
 8001d86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	b21b      	sxth	r3, r3
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fcb6 	bl	8005704 <UG_FillScreen>
    UG_Update();
 8001d98:	f005 fae0 	bl	800735c <UG_Update>
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001da0:	3302      	adds	r3, #2
 8001da2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001da6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001daa:	2b3f      	cmp	r3, #63	; 0x3f
 8001dac:	d9e1      	bls.n	8001d72 <LCD_Test+0x3aa>
  }


  UG_FillScreen(C_RED);
 8001dae:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001db2:	f003 fca7 	bl	8005704 <UG_FillScreen>
  UG_Update();
 8001db6:	f005 fad1 	bl	800735c <UG_Update>
  HAL_Delay(500);
 8001dba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dbe:	f000 fbab 	bl	8002518 <HAL_Delay>
  UG_FillScreen(C_GREEN);
 8001dc2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001dc6:	f003 fc9d 	bl	8005704 <UG_FillScreen>
  UG_Update();
 8001dca:	f005 fac7 	bl	800735c <UG_Update>
  HAL_Delay(500);
 8001dce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dd2:	f000 fba1 	bl	8002518 <HAL_Delay>
  UG_FillScreen(C_BLUE);
 8001dd6:	201f      	movs	r0, #31
 8001dd8:	f003 fc94 	bl	8005704 <UG_FillScreen>
  UG_Update();
 8001ddc:	f005 fabe 	bl	800735c <UG_Update>
  HAL_Delay(500);
 8001de0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de4:	f000 fb98 	bl	8002518 <HAL_Delay>
  UG_FillScreen(C_BLACK);
 8001de8:	2000      	movs	r0, #0
 8001dea:	f003 fc8b 	bl	8005704 <UG_FillScreen>
  UG_Update();
 8001dee:	f005 fab5 	bl	800735c <UG_Update>
  HAL_Delay(500);
 8001df2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001df6:	f000 fb8f 	bl	8002518 <HAL_Delay>

  clearTime();
 8001dfa:	f7ff fda3 	bl	8001944 <clearTime>
  UG_FillScreen(C_WHITE);
 8001dfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e02:	f003 fc7f 	bl	8005704 <UG_FillScreen>
  printTime();
 8001e06:	f7ff fda9 	bl	800195c <printTime>
  LCD_PutStr(10, 5, "Fill", DEFAULT_FONT, C_RED, C_WHITE);
 8001e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4bd6      	ldr	r3, [pc, #856]	; (8002170 <LCD_Test+0x7a8>)
 8001e18:	4ad6      	ldr	r2, [pc, #856]	; (8002174 <LCD_Test+0x7ac>)
 8001e1a:	2105      	movs	r1, #5
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f7ff fced 	bl	80017fc <LCD_PutStr>
  UG_Update();
 8001e22:	f005 fa9b 	bl	800735c <UG_Update>
  HAL_Delay(1000);
 8001e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e2a:	f000 fb75 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f003 fc68 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Font", DEFAULT_FONT, C_RED, C_BLACK);
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4bcc      	ldr	r3, [pc, #816]	; (8002170 <LCD_Test+0x7a8>)
 8001e40:	4acd      	ldr	r2, [pc, #820]	; (8002178 <LCD_Test+0x7b0>)
 8001e42:	2105      	movs	r1, #5
 8001e44:	200a      	movs	r0, #10
 8001e46:	f7ff fcd9 	bl	80017fc <LCD_PutStr>
  clearTime();
 8001e4a:	f7ff fd7b 	bl	8001944 <clearTime>
  LCD_PutStr(10, 35, "Hello Steve!", DEFAULT_FONT, C_CYAN, C_BLACK);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4bc5      	ldr	r3, [pc, #788]	; (8002170 <LCD_Test+0x7a8>)
 8001e5a:	4ac8      	ldr	r2, [pc, #800]	; (800217c <LCD_Test+0x7b4>)
 8001e5c:	2123      	movs	r1, #35	; 0x23
 8001e5e:	200a      	movs	r0, #10
 8001e60:	f7ff fccc 	bl	80017fc <LCD_PutStr>
  LCD_PutStr(10, 55, "Hello Steve!", DEFAULT_FONT, C_ORANGE_RED, C_BLACK);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4bc0      	ldr	r3, [pc, #768]	; (8002170 <LCD_Test+0x7a8>)
 8001e70:	4ac2      	ldr	r2, [pc, #776]	; (800217c <LCD_Test+0x7b4>)
 8001e72:	2137      	movs	r1, #55	; 0x37
 8001e74:	200a      	movs	r0, #10
 8001e76:	f7ff fcc1 	bl	80017fc <LCD_PutStr>
  LCD_PutStr(10, 75, "Hello Steve!", DEFAULT_FONT, C_LIME_GREEN, C_BLACK);
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	f243 6366 	movw	r3, #13926	; 0x3666
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	4bba      	ldr	r3, [pc, #744]	; (8002170 <LCD_Test+0x7a8>)
 8001e86:	4abd      	ldr	r2, [pc, #756]	; (800217c <LCD_Test+0x7b4>)
 8001e88:	214b      	movs	r1, #75	; 0x4b
 8001e8a:	200a      	movs	r0, #10
 8001e8c:	f7ff fcb6 	bl	80017fc <LCD_PutStr>
  LCD_PutStr(10, 95, "Hello Steve!", DEFAULT_FONT, C_HOT_PINK, C_BLACK);
 8001e90:	2300      	movs	r3, #0
 8001e92:	9301      	str	r3, [sp, #4]
 8001e94:	f64f 3356 	movw	r3, #64342	; 0xfb56
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4bb5      	ldr	r3, [pc, #724]	; (8002170 <LCD_Test+0x7a8>)
 8001e9c:	4ab7      	ldr	r2, [pc, #732]	; (800217c <LCD_Test+0x7b4>)
 8001e9e:	215f      	movs	r1, #95	; 0x5f
 8001ea0:	200a      	movs	r0, #10
 8001ea2:	f7ff fcab 	bl	80017fc <LCD_PutStr>
  UG_Update();
 8001ea6:	f005 fa59 	bl	800735c <UG_Update>
  printTime();
 8001eaa:	f7ff fd57 	bl	800195c <printTime>
  HAL_Delay(1000);
 8001eae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb2:	f000 fb31 	bl	8002518 <HAL_Delay>

#if DEMO_FLASH_KB >=128
  UG_FillScreen(C_BLACK);
 8001eb6:	2000      	movs	r0, #0
 8001eb8:	f003 fc24 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Big font", DEFAULT_FONT, C_RED, C_BLACK);
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	4baa      	ldr	r3, [pc, #680]	; (8002170 <LCD_Test+0x7a8>)
 8001ec8:	4aad      	ldr	r2, [pc, #692]	; (8002180 <LCD_Test+0x7b8>)
 8001eca:	2105      	movs	r1, #5
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f7ff fc95 	bl	80017fc <LCD_PutStr>
  clearTime();
 8001ed2:	f7ff fd37 	bl	8001944 <clearTime>
  LCD_PutStr(10, 35, "Hello", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9301      	str	r3, [sp, #4]
 8001eda:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ede:	9300      	str	r3, [sp, #0]
 8001ee0:	4ba8      	ldr	r3, [pc, #672]	; (8002184 <LCD_Test+0x7bc>)
 8001ee2:	4aa9      	ldr	r2, [pc, #676]	; (8002188 <LCD_Test+0x7c0>)
 8001ee4:	2123      	movs	r1, #35	; 0x23
 8001ee6:	200a      	movs	r0, #10
 8001ee8:	f7ff fc88 	bl	80017fc <LCD_PutStr>
  LCD_PutStr(10, 80, "Steve!", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	4ba3      	ldr	r3, [pc, #652]	; (8002184 <LCD_Test+0x7bc>)
 8001ef8:	4aa4      	ldr	r2, [pc, #656]	; (800218c <LCD_Test+0x7c4>)
 8001efa:	2150      	movs	r1, #80	; 0x50
 8001efc:	200a      	movs	r0, #10
 8001efe:	f7ff fc7d 	bl	80017fc <LCD_PutStr>
  UG_Update();
 8001f02:	f005 fa2b 	bl	800735c <UG_Update>
  printTime();
 8001f06:	f7ff fd29 	bl	800195c <printTime>
  HAL_Delay(1000);
 8001f0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f0e:	f000 fb03 	bl	8002518 <HAL_Delay>
#endif

  UG_FillScreen(C_RED);
 8001f12:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f16:	f003 fbf5 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Line", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f1a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f1e:	9301      	str	r3, [sp, #4]
 8001f20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4b92      	ldr	r3, [pc, #584]	; (8002170 <LCD_Test+0x7a8>)
 8001f28:	4a99      	ldr	r2, [pc, #612]	; (8002190 <LCD_Test+0x7c8>)
 8001f2a:	2105      	movs	r1, #5
 8001f2c:	200a      	movs	r0, #10
 8001f2e:	f7ff fc65 	bl	80017fc <LCD_PutStr>
  clearTime();
 8001f32:	f7ff fd07 	bl	8001944 <clearTime>
  UG_DrawLine(10, 30, 10, 100, C_WHITE);
 8001f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2364      	movs	r3, #100	; 0x64
 8001f3e:	220a      	movs	r2, #10
 8001f40:	211e      	movs	r1, #30
 8001f42:	200a      	movs	r0, #10
 8001f44:	f003 ff0c 	bl	8005d60 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 30, C_WHITE);
 8001f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	231e      	movs	r3, #30
 8001f50:	2264      	movs	r2, #100	; 0x64
 8001f52:	211e      	movs	r1, #30
 8001f54:	200a      	movs	r0, #10
 8001f56:	f003 ff03 	bl	8005d60 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 100, C_WHITE);
 8001f5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2364      	movs	r3, #100	; 0x64
 8001f62:	2264      	movs	r2, #100	; 0x64
 8001f64:	211e      	movs	r1, #30
 8001f66:	200a      	movs	r0, #10
 8001f68:	f003 fefa 	bl	8005d60 <UG_DrawLine>
  UG_Update();
 8001f6c:	f005 f9f6 	bl	800735c <UG_Update>
  printTime();
 8001f70:	f7ff fcf4 	bl	800195c <printTime>
  HAL_Delay(1000);
 8001f74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f78:	f000 face 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f7c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f80:	f003 fbc0 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f88:	9301      	str	r3, [sp, #4]
 8001f8a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	4b77      	ldr	r3, [pc, #476]	; (8002170 <LCD_Test+0x7a8>)
 8001f92:	4a80      	ldr	r2, [pc, #512]	; (8002194 <LCD_Test+0x7cc>)
 8001f94:	2105      	movs	r1, #5
 8001f96:	200a      	movs	r0, #10
 8001f98:	f7ff fc30 	bl	80017fc <LCD_PutStr>
  clearTime();
 8001f9c:	f7ff fcd2 	bl	8001944 <clearTime>
  UG_DrawFrame(10, 30, 100, 100, C_WHITE);
 8001fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa4:	9300      	str	r3, [sp, #0]
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	2264      	movs	r2, #100	; 0x64
 8001faa:	211e      	movs	r1, #30
 8001fac:	200a      	movs	r0, #10
 8001fae:	f003 fcb6 	bl	800591e <UG_DrawFrame>
  UG_Update();
 8001fb2:	f005 f9d3 	bl	800735c <UG_Update>
  printTime();
 8001fb6:	f7ff fcd1 	bl	800195c <printTime>
  HAL_Delay(1000);
 8001fba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fbe:	f000 faab 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001fc2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001fc6:	f003 fb9d 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001fca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	4b66      	ldr	r3, [pc, #408]	; (8002170 <LCD_Test+0x7a8>)
 8001fd8:	4a6f      	ldr	r2, [pc, #444]	; (8002198 <LCD_Test+0x7d0>)
 8001fda:	2105      	movs	r1, #5
 8001fdc:	200a      	movs	r0, #10
 8001fde:	f7ff fc0d 	bl	80017fc <LCD_PutStr>
  clearTime();
 8001fe2:	f7ff fcaf 	bl	8001944 <clearTime>
  UG_FillFrame(10, 30, 100, 100, C_WHITE);
 8001fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	2364      	movs	r3, #100	; 0x64
 8001fee:	2264      	movs	r2, #100	; 0x64
 8001ff0:	211e      	movs	r1, #30
 8001ff2:	200a      	movs	r0, #10
 8001ff4:	f003 fbaa 	bl	800574c <UG_FillFrame>
  UG_Update();
 8001ff8:	f005 f9b0 	bl	800735c <UG_Update>
  printTime();
 8001ffc:	f7ff fcae 	bl	800195c <printTime>
  HAL_Delay(1000);
 8002000:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002004:	f000 fa88 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002008:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800200c:	f003 fb7a 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Mesh.", DEFAULT_FONT, C_YELLOW, C_RED);
 8002010:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4b54      	ldr	r3, [pc, #336]	; (8002170 <LCD_Test+0x7a8>)
 800201e:	4a5f      	ldr	r2, [pc, #380]	; (800219c <LCD_Test+0x7d4>)
 8002020:	2105      	movs	r1, #5
 8002022:	200a      	movs	r0, #10
 8002024:	f7ff fbea 	bl	80017fc <LCD_PutStr>
  clearTime();
 8002028:	f7ff fc8c 	bl	8001944 <clearTime>
  UG_DrawMesh(10, 30, 100, 100, 5, C_WHITE);
 800202c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002030:	9301      	str	r3, [sp, #4]
 8002032:	2305      	movs	r3, #5
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	2264      	movs	r2, #100	; 0x64
 800203a:	211e      	movs	r1, #30
 800203c:	200a      	movs	r0, #10
 800203e:	f003 fbf7 	bl	8005830 <UG_DrawMesh>
  UG_Update();
 8002042:	f005 f98b 	bl	800735c <UG_Update>
  printTime();
 8002046:	f7ff fc89 	bl	800195c <printTime>
  HAL_Delay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f000 fa63 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002052:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002056:	f003 fb55 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 800205a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4b42      	ldr	r3, [pc, #264]	; (8002170 <LCD_Test+0x7a8>)
 8002068:	4a4d      	ldr	r2, [pc, #308]	; (80021a0 <LCD_Test+0x7d8>)
 800206a:	2105      	movs	r1, #5
 800206c:	200a      	movs	r0, #10
 800206e:	f7ff fbc5 	bl	80017fc <LCD_PutStr>
  clearTime();
 8002072:	f7ff fc67 	bl	8001944 <clearTime>
  UG_DrawCircle(45, 65, 30, C_WHITE);
 8002076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207a:	221e      	movs	r2, #30
 800207c:	2141      	movs	r1, #65	; 0x41
 800207e:	202d      	movs	r0, #45	; 0x2d
 8002080:	f003 fcae 	bl	80059e0 <UG_DrawCircle>
  UG_Update();
 8002084:	f005 f96a 	bl	800735c <UG_Update>
  printTime();
 8002088:	f7ff fc68 	bl	800195c <printTime>
  HAL_Delay(1000);
 800208c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002090:	f000 fa42 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002094:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002098:	f003 fb34 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 800209c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4b31      	ldr	r3, [pc, #196]	; (8002170 <LCD_Test+0x7a8>)
 80020aa:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <LCD_Test+0x7dc>)
 80020ac:	2105      	movs	r1, #5
 80020ae:	200a      	movs	r0, #10
 80020b0:	f7ff fba4 	bl	80017fc <LCD_PutStr>
  UG_Update();
 80020b4:	f005 f952 	bl	800735c <UG_Update>
  clearTime();
 80020b8:	f7ff fc44 	bl	8001944 <clearTime>
  UG_FillCircle(45, 65, 30, C_WHITE);
 80020bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c0:	221e      	movs	r2, #30
 80020c2:	2141      	movs	r1, #65	; 0x41
 80020c4:	202d      	movs	r0, #45	; 0x2d
 80020c6:	f003 fd71 	bl	8005bac <UG_FillCircle>
  UG_Update();
 80020ca:	f005 f947 	bl	800735c <UG_Update>
  printTime();
 80020ce:	f7ff fc45 	bl	800195c <printTime>
  HAL_Delay(1000);
 80020d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020d6:	f000 fa1f 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 80020da:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020de:	f003 fb11 	bl	8005704 <UG_FillScreen>
  LCD_PutStr(10, 5, "Triangle", DEFAULT_FONT, C_YELLOW, C_RED);
 80020e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <LCD_Test+0x7a8>)
 80020f0:	4a2d      	ldr	r2, [pc, #180]	; (80021a8 <LCD_Test+0x7e0>)
 80020f2:	2105      	movs	r1, #5
 80020f4:	200a      	movs	r0, #10
 80020f6:	f7ff fb81 	bl	80017fc <LCD_PutStr>
  clearTime();
 80020fa:	f7ff fc23 	bl	8001944 <clearTime>
  UG_DrawTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 80020fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002102:	9302      	str	r3, [sp, #8]
 8002104:	2364      	movs	r3, #100	; 0x64
 8002106:	9301      	str	r3, [sp, #4]
 8002108:	2332      	movs	r3, #50	; 0x32
 800210a:	9300      	str	r3, [sp, #0]
 800210c:	231e      	movs	r3, #30
 800210e:	2264      	movs	r2, #100	; 0x64
 8002110:	211e      	movs	r1, #30
 8002112:	200a      	movs	r0, #10
 8002114:	f003 ff04 	bl	8005f20 <UG_DrawTriangle>
  UG_Update();
 8002118:	f005 f920 	bl	800735c <UG_Update>
  printTime();
 800211c:	f7ff fc1e 	bl	800195c <printTime>
  HAL_Delay(1000);
 8002120:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002124:	f000 f9f8 	bl	8002518 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002128:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800212c:	f003 faea 	bl	8005704 <UG_FillScreen>
  clearTime();
 8002130:	f7ff fc08 	bl	8001944 <clearTime>
  LCD_PutStr(10, 5, "Filled Tri.", DEFAULT_FONT, C_YELLOW, C_RED);
 8002134:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002138:	9301      	str	r3, [sp, #4]
 800213a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <LCD_Test+0x7a8>)
 8002142:	4a1a      	ldr	r2, [pc, #104]	; (80021ac <LCD_Test+0x7e4>)
 8002144:	2105      	movs	r1, #5
 8002146:	200a      	movs	r0, #10
 8002148:	f7ff fb58 	bl	80017fc <LCD_PutStr>
  UG_FillTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 800214c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002150:	9302      	str	r3, [sp, #8]
 8002152:	2364      	movs	r3, #100	; 0x64
 8002154:	9301      	str	r3, [sp, #4]
 8002156:	2332      	movs	r3, #50	; 0x32
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	231e      	movs	r3, #30
 800215c:	2264      	movs	r2, #100	; 0x64
 800215e:	211e      	movs	r1, #30
 8002160:	200a      	movs	r0, #10
 8002162:	f003 ff17 	bl	8005f94 <UG_FillTriangle>
  UG_Update();
 8002166:	f005 f8f9 	bl	800735c <UG_Update>
  printTime();
 800216a:	f7ff fbf7 	bl	800195c <printTime>
 800216e:	e01f      	b.n	80021b0 <LCD_Test+0x7e8>
 8002170:	0801fe24 	.word	0x0801fe24
 8002174:	0800d348 	.word	0x0800d348
 8002178:	0800d350 	.word	0x0800d350
 800217c:	0800d358 	.word	0x0800d358
 8002180:	0800d368 	.word	0x0800d368
 8002184:	0800d530 	.word	0x0800d530
 8002188:	0800d374 	.word	0x0800d374
 800218c:	0800d37c 	.word	0x0800d37c
 8002190:	0800d384 	.word	0x0800d384
 8002194:	0800d38c 	.word	0x0800d38c
 8002198:	0800d394 	.word	0x0800d394
 800219c:	0800d3a0 	.word	0x0800d3a0
 80021a0:	0800d3a8 	.word	0x0800d3a8
 80021a4:	0800d3b0 	.word	0x0800d3b0
 80021a8:	0800d3c0 	.word	0x0800d3c0
 80021ac:	0800d3cc 	.word	0x0800d3cc
  HAL_Delay(1000);
 80021b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021b4:	f000 f9b0 	bl	8002518 <HAL_Delay>

  clearTime();
 80021b8:	f7ff fbc4 	bl	8001944 <clearTime>
  // Create the window
  UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);
 80021bc:	4b8b      	ldr	r3, [pc, #556]	; (80023ec <LCD_Test+0xa24>)
 80021be:	220a      	movs	r2, #10
 80021c0:	498b      	ldr	r1, [pc, #556]	; (80023f0 <LCD_Test+0xa28>)
 80021c2:	488c      	ldr	r0, [pc, #560]	; (80023f4 <LCD_Test+0xa2c>)
 80021c4:	f005 faaa 	bl	800771c <UG_WindowCreate>
  // Window Title
  UG_WindowSetTitleText(&window_1, "Test Window");
 80021c8:	498b      	ldr	r1, [pc, #556]	; (80023f8 <LCD_Test+0xa30>)
 80021ca:	488a      	ldr	r0, [pc, #552]	; (80023f4 <LCD_Test+0xa2c>)
 80021cc:	f005 fcfc 	bl	8007bc8 <UG_WindowSetTitleText>
  UG_WindowSetTitleTextFont(&window_1, DEFAULT_FONT);
 80021d0:	498a      	ldr	r1, [pc, #552]	; (80023fc <LCD_Test+0xa34>)
 80021d2:	4888      	ldr	r0, [pc, #544]	; (80023f4 <LCD_Test+0xa2c>)
 80021d4:	f005 fd1a 	bl	8007c0c <UG_WindowSetTitleTextFont>
  UG_WindowSetTitleHeight(&window_1, 15);
 80021d8:	210f      	movs	r1, #15
 80021da:	4886      	ldr	r0, [pc, #536]	; (80023f4 <LCD_Test+0xa2c>)
 80021dc:	f005 fd51 	bl	8007c82 <UG_WindowSetTitleHeight>
  UG_WindowSetXStart(&window_1, 0);
 80021e0:	2100      	movs	r1, #0
 80021e2:	4884      	ldr	r0, [pc, #528]	; (80023f4 <LCD_Test+0xa2c>)
 80021e4:	f005 fd78 	bl	8007cd8 <UG_WindowSetXStart>
  UG_WindowSetYStart(&window_1, 0);
 80021e8:	2100      	movs	r1, #0
 80021ea:	4882      	ldr	r0, [pc, #520]	; (80023f4 <LCD_Test+0xa2c>)
 80021ec:	f005 fda6 	bl	8007d3c <UG_WindowSetYStart>
  UG_WindowSetXEnd(&window_1, LCD_WIDTH-1);
 80021f0:	21ef      	movs	r1, #239	; 0xef
 80021f2:	4880      	ldr	r0, [pc, #512]	; (80023f4 <LCD_Test+0xa2c>)
 80021f4:	f005 fdd4 	bl	8007da0 <UG_WindowSetXEnd>
  UG_WindowSetYEnd(&window_1, LCD_HEIGHT-1);
 80021f8:	21ef      	movs	r1, #239	; 0xef
 80021fa:	487e      	ldr	r0, [pc, #504]	; (80023f4 <LCD_Test+0xa2c>)
 80021fc:	f005 fe02 	bl	8007e04 <UG_WindowSetYEnd>

  // Create Buttons
  UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 5, 5, 70, 35);
 8002200:	2323      	movs	r3, #35	; 0x23
 8002202:	9302      	str	r3, [sp, #8]
 8002204:	2346      	movs	r3, #70	; 0x46
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	2305      	movs	r3, #5
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2305      	movs	r3, #5
 800220e:	2200      	movs	r2, #0
 8002210:	497b      	ldr	r1, [pc, #492]	; (8002400 <LCD_Test+0xa38>)
 8002212:	4878      	ldr	r0, [pc, #480]	; (80023f4 <LCD_Test+0xa2c>)
 8002214:	f006 f850 	bl	80082b8 <UG_ButtonCreate>
  //Label Buttons
  UG_ButtonSetFont(&window_1,BTN_ID_0,DEFAULT_FONT);
 8002218:	4a78      	ldr	r2, [pc, #480]	; (80023fc <LCD_Test+0xa34>)
 800221a:	2100      	movs	r1, #0
 800221c:	4875      	ldr	r0, [pc, #468]	; (80023f4 <LCD_Test+0xa2c>)
 800221e:	f006 f94b 	bl	80084b8 <UG_ButtonSetFont>
  UG_ButtonSetForeColor(&window_1,BTN_ID_0, C_BLACK);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	4873      	ldr	r0, [pc, #460]	; (80023f4 <LCD_Test+0xa2c>)
 8002228:	f006 f8c6 	bl	80083b8 <UG_ButtonSetForeColor>
  UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_LIGHT_GRAY);
 800222c:	f24d 629a 	movw	r2, #54938	; 0xd69a
 8002230:	2100      	movs	r1, #0
 8002232:	4870      	ldr	r0, [pc, #448]	; (80023f4 <LCD_Test+0xa2c>)
 8002234:	f006 f8eb 	bl	800840e <UG_ButtonSetBackColor>
  UG_ButtonSetText(&window_1,BTN_ID_0,"3D Btn");
 8002238:	4a72      	ldr	r2, [pc, #456]	; (8002404 <LCD_Test+0xa3c>)
 800223a:	2100      	movs	r1, #0
 800223c:	486d      	ldr	r0, [pc, #436]	; (80023f4 <LCD_Test+0xa2c>)
 800223e:	f006 f911 	bl	8008464 <UG_ButtonSetText>

  // Create Textbox
  UG_TextboxCreate(&window_1, &textbox_1, TXB_ID_0, 10, 40, LCD_WIDTH-20, 65);
 8002242:	2341      	movs	r3, #65	; 0x41
 8002244:	9302      	str	r3, [sp, #8]
 8002246:	23dc      	movs	r3, #220	; 0xdc
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	2328      	movs	r3, #40	; 0x28
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	230a      	movs	r3, #10
 8002250:	2200      	movs	r2, #0
 8002252:	496d      	ldr	r1, [pc, #436]	; (8002408 <LCD_Test+0xa40>)
 8002254:	4867      	ldr	r0, [pc, #412]	; (80023f4 <LCD_Test+0xa2c>)
 8002256:	f006 fe03 	bl	8008e60 <UG_TextboxCreate>
  UG_TextboxSetFont(&window_1, TXB_ID_0, DEFAULT_FONT);
 800225a:	4a68      	ldr	r2, [pc, #416]	; (80023fc <LCD_Test+0xa34>)
 800225c:	2100      	movs	r1, #0
 800225e:	4865      	ldr	r0, [pc, #404]	; (80023f4 <LCD_Test+0xa2c>)
 8002260:	f006 fef8 	bl	8009054 <UG_TextboxSetFont>
  UG_TextboxSetText(&window_1, TXB_ID_0, "Some Text");
 8002264:	4a69      	ldr	r2, [pc, #420]	; (800240c <LCD_Test+0xa44>)
 8002266:	2100      	movs	r1, #0
 8002268:	4862      	ldr	r0, [pc, #392]	; (80023f4 <LCD_Test+0xa2c>)
 800226a:	f006 fec9 	bl	8009000 <UG_TextboxSetText>
  UG_TextboxSetBackColor(&window_1, TXB_ID_0, C_LIGHT_YELLOW);
 800226e:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 8002272:	2100      	movs	r1, #0
 8002274:	485f      	ldr	r0, [pc, #380]	; (80023f4 <LCD_Test+0xa2c>)
 8002276:	f006 fe98 	bl	8008faa <UG_TextboxSetBackColor>
  UG_TextboxSetForeColor(&window_1, TXB_ID_0, C_BLACK);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	485d      	ldr	r0, [pc, #372]	; (80023f4 <LCD_Test+0xa2c>)
 8002280:	f006 fe68 	bl	8008f54 <UG_TextboxSetForeColor>
  UG_TextboxSetAlignment(&window_1, TXB_ID_0, ALIGN_CENTER);
 8002284:	2212      	movs	r2, #18
 8002286:	2100      	movs	r1, #0
 8002288:	485a      	ldr	r0, [pc, #360]	; (80023f4 <LCD_Test+0xa2c>)
 800228a:	f006 ff0d 	bl	80090a8 <UG_TextboxSetAlignment>

  // Create progress bar
  UG_ProgressCreate(&window_1, &pgb, PGB_ID_0, 10, 72, LCD_WIDTH-20, 85);
 800228e:	2355      	movs	r3, #85	; 0x55
 8002290:	9302      	str	r3, [sp, #8]
 8002292:	23dc      	movs	r3, #220	; 0xdc
 8002294:	9301      	str	r3, [sp, #4]
 8002296:	2348      	movs	r3, #72	; 0x48
 8002298:	9300      	str	r3, [sp, #0]
 800229a:	230a      	movs	r3, #10
 800229c:	2200      	movs	r2, #0
 800229e:	495c      	ldr	r1, [pc, #368]	; (8002410 <LCD_Test+0xa48>)
 80022a0:	4854      	ldr	r0, [pc, #336]	; (80023f4 <LCD_Test+0xa2c>)
 80022a2:	f006 fb51 	bl	8008948 <UG_ProgressCreate>
  UG_ProgressSetForeColor(&window_1, PGB_ID_0, C_ROYAL_BLUE);
 80022a6:	f244 325b 	movw	r2, #17243	; 0x435b
 80022aa:	2100      	movs	r1, #0
 80022ac:	4851      	ldr	r0, [pc, #324]	; (80023f4 <LCD_Test+0xa2c>)
 80022ae:	f006 fbaf 	bl	8008a10 <UG_ProgressSetForeColor>

  UG_WindowShow(&window_1);
 80022b2:	4850      	ldr	r0, [pc, #320]	; (80023f4 <LCD_Test+0xa2c>)
 80022b4:	f005 fb00 	bl	80078b8 <UG_WindowShow>
  UG_Update();
 80022b8:	f005 f850 	bl	800735c <UG_Update>
  printTime();
 80022bc:	f7ff fb4e 	bl	800195c <printTime>
  HAL_Delay(1000);
 80022c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022c4:	f000 f928 	bl	8002518 <HAL_Delay>
  uint32_t btn_time,progress_time,now;
  uint8_t i=0, j=0,u=0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	75fb      	strb	r3, [r7, #23]
 80022cc:	2300      	movs	r3, #0
 80022ce:	75bb      	strb	r3, [r7, #22]
 80022d0:	2300      	movs	r3, #0
 80022d2:	757b      	strb	r3, [r7, #21]
  btn_time = progress_time = HAL_GetTick();
 80022d4:	f000 f914 	bl	8002500 <HAL_GetTick>
 80022d8:	61b8      	str	r0, [r7, #24]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	61fb      	str	r3, [r7, #28]
  while(1){
    now=HAL_GetTick();
 80022de:	f000 f90f 	bl	8002500 <HAL_GetTick>
 80022e2:	6078      	str	r0, [r7, #4]
    if(now-btn_time>199){
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2bc7      	cmp	r3, #199	; 0xc7
 80022ec:	d916      	bls.n	800231c <LCD_Test+0x954>
      btn_time=now;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	61fb      	str	r3, [r7, #28]
      u=1;
 80022f2:	2301      	movs	r3, #1
 80022f4:	757b      	strb	r3, [r7, #21]
      i++;
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	3301      	adds	r3, #1
 80022fa:	75fb      	strb	r3, [r7, #23]
      //UG_TouchUpdate((i&1 ? 10 : -1), (i&1 ? 31 : -1), OBJ_TOUCH_STATE_CHANGED | (i&1 ? OBJ_TOUCH_STATE_IS_PRESSED : 0));
      if(i==9){
 80022fc:	7dfb      	ldrb	r3, [r7, #23]
 80022fe:	2b09      	cmp	r3, #9
 8002300:	d109      	bne.n	8002316 <LCD_Test+0x94e>
        UG_ButtonSetText(&window_1,BTN_ID_0,"2D Btn");
 8002302:	4a44      	ldr	r2, [pc, #272]	; (8002414 <LCD_Test+0xa4c>)
 8002304:	2100      	movs	r1, #0
 8002306:	483b      	ldr	r0, [pc, #236]	; (80023f4 <LCD_Test+0xa2c>)
 8002308:	f006 f8ac 	bl	8008464 <UG_ButtonSetText>
        UG_ButtonSetStyle(&window_1, BTN_ID_0, BTN_STYLE_2D);
 800230c:	2200      	movs	r2, #0
 800230e:	2100      	movs	r1, #0
 8002310:	4838      	ldr	r0, [pc, #224]	; (80023f4 <LCD_Test+0xa2c>)
 8002312:	f006 f8fb 	bl	800850c <UG_ButtonSetStyle>
      }
      if(i>19){
 8002316:	7dfb      	ldrb	r3, [r7, #23]
 8002318:	2b13      	cmp	r3, #19
 800231a:	d81e      	bhi.n	800235a <LCD_Test+0x992>
        break;
      }
    }
    if(now-progress_time>19){
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b13      	cmp	r3, #19
 8002324:	d911      	bls.n	800234a <LCD_Test+0x982>
      progress_time=now;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	61bb      	str	r3, [r7, #24]
      u=1;
 800232a:	2301      	movs	r3, #1
 800232c:	757b      	strb	r3, [r7, #21]
      if(++j>100)
 800232e:	7dbb      	ldrb	r3, [r7, #22]
 8002330:	3301      	adds	r3, #1
 8002332:	75bb      	strb	r3, [r7, #22]
 8002334:	7dbb      	ldrb	r3, [r7, #22]
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <LCD_Test+0x976>
        j=0;
 800233a:	2300      	movs	r3, #0
 800233c:	75bb      	strb	r3, [r7, #22]
      UG_ProgressSetProgress(&window_1, PGB_ID_0, j);
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	461a      	mov	r2, r3
 8002342:	2100      	movs	r1, #0
 8002344:	482b      	ldr	r0, [pc, #172]	; (80023f4 <LCD_Test+0xa2c>)
 8002346:	f006 fb8e 	bl	8008a66 <UG_ProgressSetProgress>
    }
    if(u){
 800234a:	7d7b      	ldrb	r3, [r7, #21]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d0c6      	beq.n	80022de <LCD_Test+0x916>
      u=0;
 8002350:	2300      	movs	r3, #0
 8002352:	757b      	strb	r3, [r7, #21]
      UG_Update();
 8002354:	f005 f802 	bl	800735c <UG_Update>
    now=HAL_GetTick();
 8002358:	e7c1      	b.n	80022de <LCD_Test+0x916>
        break;
 800235a:	bf00      	nop
    }
  }
  UG_WindowHide(&window_1);
 800235c:	4825      	ldr	r0, [pc, #148]	; (80023f4 <LCD_Test+0xa2c>)
 800235e:	f005 fad1 	bl	8007904 <UG_WindowHide>
  UG_WindowDelete(&window_1);
 8002362:	4824      	ldr	r0, [pc, #144]	; (80023f4 <LCD_Test+0xa2c>)
 8002364:	f005 fa6a 	bl	800783c <UG_WindowDelete>
  UG_Update();
 8002368:	f004 fff8 	bl	800735c <UG_Update>
  t = UG_FontGetTransparency();
 800236c:	f004 f87c 	bl	8006468 <UG_FontGetTransparency>
 8002370:	4603      	mov	r3, r0
 8002372:	72fb      	strb	r3, [r7, #11]
#if DEMO_FLASH_KB >=64
  UG_FillScreen(0x4b10);
 8002374:	f644 3010 	movw	r0, #19216	; 0x4b10
 8002378:	f003 f9c4 	bl	8005704 <UG_FillScreen>
  clearTime();
 800237c:	f7ff fae2 	bl	8001944 <clearTime>
  UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogo);
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <LCD_Test+0xa50>)
 8002382:	889b      	ldrh	r3, [r3, #4]
 8002384:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002388:	0fda      	lsrs	r2, r3, #31
 800238a:	4413      	add	r3, r2
 800238c:	105b      	asrs	r3, r3, #1
 800238e:	b218      	sxth	r0, r3
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <LCD_Test+0xa50>)
 8002392:	88db      	ldrh	r3, [r3, #6]
 8002394:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002398:	0fda      	lsrs	r2, r3, #31
 800239a:	4413      	add	r3, r2
 800239c:	105b      	asrs	r3, r3, #1
 800239e:	b21b      	sxth	r3, r3
 80023a0:	4a1d      	ldr	r2, [pc, #116]	; (8002418 <LCD_Test+0xa50>)
 80023a2:	4619      	mov	r1, r3
 80023a4:	f005 f89a 	bl	80074dc <UG_DrawBMP>
  UG_Update();
 80023a8:	f004 ffd8 	bl	800735c <UG_Update>
  printTime();
 80023ac:	f7ff fad6 	bl	800195c <printTime>
  UG_FontSetTransparency(0);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f004 f847 	bl	8006444 <UG_FontSetTransparency>
  LCD_PutStr(10, 5, "Image", DEFAULT_FONT, C_YELLOW, C_RED);
 80023b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <LCD_Test+0xa34>)
 80023c4:	4a15      	ldr	r2, [pc, #84]	; (800241c <LCD_Test+0xa54>)
 80023c6:	2105      	movs	r1, #5
 80023c8:	200a      	movs	r0, #10
 80023ca:	f7ff fa17 	bl	80017fc <LCD_PutStr>
  UG_Update();
 80023ce:	f004 ffc5 	bl	800735c <UG_Update>
  UG_FontSetTransparency(t);
 80023d2:	7afb      	ldrb	r3, [r7, #11]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f835 	bl	8006444 <UG_FontSetTransparency>
#endif
  HAL_Delay(1000);
 80023da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023de:	f000 f89b 	bl	8002518 <HAL_Delay>
}
 80023e2:	bf00      	nop
 80023e4:	3734      	adds	r7, #52	; 0x34
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd90      	pop	{r4, r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08002421 	.word	0x08002421
 80023f0:	200003a8 	.word	0x200003a8
 80023f4:	20000348 	.word	0x20000348
 80023f8:	0800d3d8 	.word	0x0800d3d8
 80023fc:	0801fe24 	.word	0x0801fe24
 8002400:	2000037c 	.word	0x2000037c
 8002404:	0800d3e4 	.word	0x0800d3e4
 8002408:	20000394 	.word	0x20000394
 800240c:	0800d3ec 	.word	0x0800d3ec
 8002410:	200004e8 	.word	0x200004e8
 8002414:	0800d3f8 	.word	0x0800d3f8
 8002418:	2000001c 	.word	0x2000001c
 800241c:	0800d400 	.word	0x0800d400

08002420 <window_1_callback>:


static void window_1_callback(UG_MESSAGE *msg)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }
*/
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002438:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_Init+0x40>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <HAL_Init+0x40>)
 800243e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_Init+0x40>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <HAL_Init+0x40>)
 800244a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800244e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002450:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_Init+0x40>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800245c:	2003      	movs	r0, #3
 800245e:	f000 f94f 	bl	8002700 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002462:	200f      	movs	r0, #15
 8002464:	f000 f808 	bl	8002478 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002468:	f7fe fbf8 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023c00 	.word	0x40023c00

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_InitTick+0x54>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	4b12      	ldr	r3, [pc, #72]	; (80024d0 <HAL_InitTick+0x58>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	fbb2 f3f3 	udiv	r3, r2, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f000 f967 	bl	800276a <HAL_SYSTICK_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e00e      	b.n	80024c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0f      	cmp	r3, #15
 80024aa:	d80a      	bhi.n	80024c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ac:	2200      	movs	r2, #0
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b4:	f000 f92f 	bl	8002716 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b8:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <HAL_InitTick+0x5c>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024be:	2300      	movs	r3, #0
 80024c0:	e000      	b.n	80024c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3708      	adds	r7, #8
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000000 	.word	0x20000000
 80024d0:	20000018 	.word	0x20000018
 80024d4:	20000014 	.word	0x20000014

080024d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024dc:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_IncTick+0x20>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	461a      	mov	r2, r3
 80024e2:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x24>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4413      	add	r3, r2
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_IncTick+0x24>)
 80024ea:	6013      	str	r3, [r2, #0]
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000018 	.word	0x20000018
 80024fc:	200004f0 	.word	0x200004f0

08002500 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
  return uwTick;
 8002504:	4b03      	ldr	r3, [pc, #12]	; (8002514 <HAL_GetTick+0x14>)
 8002506:	681b      	ldr	r3, [r3, #0]
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	200004f0 	.word	0x200004f0

08002518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002520:	f7ff ffee 	bl	8002500 <HAL_GetTick>
 8002524:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002530:	d005      	beq.n	800253e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_Delay+0x44>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4413      	add	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800253e:	bf00      	nop
 8002540:	f7ff ffde 	bl	8002500 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	429a      	cmp	r2, r3
 800254e:	d8f7      	bhi.n	8002540 <HAL_Delay+0x28>
  {
  }
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	20000018 	.word	0x20000018

08002560 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f003 0307 	and.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002576:	68ba      	ldr	r2, [r7, #8]
 8002578:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800257c:	4013      	ands	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002588:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800258c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002590:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002592:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	60d3      	str	r3, [r2, #12]
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025ac:	4b04      	ldr	r3, [pc, #16]	; (80025c0 <__NVIC_GetPriorityGrouping+0x18>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	0a1b      	lsrs	r3, r3, #8
 80025b2:	f003 0307 	and.w	r3, r3, #7
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	e000ed00 	.word	0xe000ed00

080025c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	4603      	mov	r3, r0
 80025cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	db0b      	blt.n	80025ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	f003 021f 	and.w	r2, r3, #31
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <__NVIC_EnableIRQ+0x38>)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	2001      	movs	r0, #1
 80025e6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100

08002600 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	6039      	str	r1, [r7, #0]
 800260a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002610:	2b00      	cmp	r3, #0
 8002612:	db0a      	blt.n	800262a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	490c      	ldr	r1, [pc, #48]	; (800264c <__NVIC_SetPriority+0x4c>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	0112      	lsls	r2, r2, #4
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	440b      	add	r3, r1
 8002624:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002628:	e00a      	b.n	8002640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	b2da      	uxtb	r2, r3
 800262e:	4908      	ldr	r1, [pc, #32]	; (8002650 <__NVIC_SetPriority+0x50>)
 8002630:	79fb      	ldrb	r3, [r7, #7]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	3b04      	subs	r3, #4
 8002638:	0112      	lsls	r2, r2, #4
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	440b      	add	r3, r1
 800263e:	761a      	strb	r2, [r3, #24]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000e100 	.word	0xe000e100
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f1c3 0307 	rsb	r3, r3, #7
 800266e:	2b04      	cmp	r3, #4
 8002670:	bf28      	it	cs
 8002672:	2304      	movcs	r3, #4
 8002674:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3304      	adds	r3, #4
 800267a:	2b06      	cmp	r3, #6
 800267c:	d902      	bls.n	8002684 <NVIC_EncodePriority+0x30>
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	3b03      	subs	r3, #3
 8002682:	e000      	b.n	8002686 <NVIC_EncodePriority+0x32>
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	43da      	mvns	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	401a      	ands	r2, r3
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800269c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa01 f303 	lsl.w	r3, r1, r3
 80026a6:	43d9      	mvns	r1, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ac:	4313      	orrs	r3, r2
         );
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
	...

080026bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026cc:	d301      	bcc.n	80026d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00f      	b.n	80026f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	4a0a      	ldr	r2, [pc, #40]	; (80026fc <SysTick_Config+0x40>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026da:	210f      	movs	r1, #15
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e0:	f7ff ff8e 	bl	8002600 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <SysTick_Config+0x40>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ea:	4b04      	ldr	r3, [pc, #16]	; (80026fc <SysTick_Config+0x40>)
 80026ec:	2207      	movs	r2, #7
 80026ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	e000e010 	.word	0xe000e010

08002700 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff ff29 	bl	8002560 <__NVIC_SetPriorityGrouping>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b086      	sub	sp, #24
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002724:	2300      	movs	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002728:	f7ff ff3e 	bl	80025a8 <__NVIC_GetPriorityGrouping>
 800272c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	68b9      	ldr	r1, [r7, #8]
 8002732:	6978      	ldr	r0, [r7, #20]
 8002734:	f7ff ff8e 	bl	8002654 <NVIC_EncodePriority>
 8002738:	4602      	mov	r2, r0
 800273a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff5d 	bl	8002600 <__NVIC_SetPriority>
}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	4603      	mov	r3, r0
 8002756:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff31 	bl	80025c4 <__NVIC_EnableIRQ>
}
 8002762:	bf00      	nop
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}

0800276a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800276a:	b580      	push	{r7, lr}
 800276c:	b082      	sub	sp, #8
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ffa2 	bl	80026bc <SysTick_Config>
 8002778:	4603      	mov	r3, r0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800278c:	2300      	movs	r3, #0
 800278e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff feb6 	bl	8002500 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e099      	b.n	80028d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 0201 	bic.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c0:	e00f      	b.n	80027e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c2:	f7ff fe9d 	bl	8002500 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d908      	bls.n	80027e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2203      	movs	r2, #3
 80027da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e078      	b.n	80028d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1e8      	bne.n	80027c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_DMA_Init+0x158>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800281a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2b04      	cmp	r3, #4
 800283a:	d107      	bne.n	800284c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002844:	4313      	orrs	r3, r2
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f023 0307 	bic.w	r3, r3, #7
 8002862:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	4313      	orrs	r3, r2
 800286c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b04      	cmp	r3, #4
 8002874:	d117      	bne.n	80028a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 fb63 	bl	8002f54 <DMA_CheckFifoParam>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2240      	movs	r2, #64	; 0x40
 8002898:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028a2:	2301      	movs	r3, #1
 80028a4:	e016      	b.n	80028d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f000 fb1a 	bl	8002ee8 <DMA_CalcBaseAndBitshift>
 80028b4:	4603      	mov	r3, r0
 80028b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028bc:	223f      	movs	r2, #63	; 0x3f
 80028be:	409a      	lsls	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	f010803f 	.word	0xf010803f

080028e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_DMA_Start_IT+0x26>
 8002902:	2302      	movs	r3, #2
 8002904:	e040      	b.n	8002988 <HAL_DMA_Start_IT+0xa8>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b01      	cmp	r3, #1
 8002918:	d12f      	bne.n	800297a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68b9      	ldr	r1, [r7, #8]
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 faac 	bl	8002e8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	223f      	movs	r2, #63	; 0x3f
 800293a:	409a      	lsls	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0216 	orr.w	r2, r2, #22
 800294e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	2b00      	cmp	r3, #0
 8002956:	d007      	beq.n	8002968 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0208 	orr.w	r2, r2, #8
 8002966:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f042 0201 	orr.w	r2, r2, #1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	e005      	b.n	8002986 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002982:	2302      	movs	r3, #2
 8002984:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002986:	7dfb      	ldrb	r3, [r7, #23]
}
 8002988:	4618      	mov	r0, r3
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800299e:	f7ff fdaf 	bl	8002500 <HAL_GetTick>
 80029a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d008      	beq.n	80029c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e052      	b.n	8002a68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0216 	bic.w	r2, r2, #22
 80029d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695a      	ldr	r2, [r3, #20]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d103      	bne.n	80029f2 <HAL_DMA_Abort+0x62>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f022 0208 	bic.w	r2, r2, #8
 8002a00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0201 	bic.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a12:	e013      	b.n	8002a3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a14:	f7ff fd74 	bl	8002500 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d90c      	bls.n	8002a3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e015      	b.n	8002a68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e4      	bne.n	8002a14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4e:	223f      	movs	r2, #63	; 0x3f
 8002a50:	409a      	lsls	r2, r3
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d004      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2280      	movs	r2, #128	; 0x80
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e00c      	b.n	8002aa8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2205      	movs	r2, #5
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0201 	bic.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ac0:	4b8e      	ldr	r3, [pc, #568]	; (8002cfc <HAL_DMA_IRQHandler+0x248>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a8e      	ldr	r2, [pc, #568]	; (8002d00 <HAL_DMA_IRQHandler+0x24c>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	0a9b      	lsrs	r3, r3, #10
 8002acc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2208      	movs	r2, #8
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01a      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d013      	beq.n	8002b20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b18:	f043 0201 	orr.w	r2, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2201      	movs	r2, #1
 8002b26:	409a      	lsls	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d012      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00b      	beq.n	8002b56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2201      	movs	r2, #1
 8002b44:	409a      	lsls	r2, r3
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	f043 0202 	orr.w	r2, r3, #2
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2204      	movs	r2, #4
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d012      	beq.n	8002b8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2204      	movs	r2, #4
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b84:	f043 0204 	orr.w	r2, r3, #4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2210      	movs	r2, #16
 8002b92:	409a      	lsls	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d043      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d03c      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	2210      	movs	r2, #16
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d018      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d108      	bne.n	8002be4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d024      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	4798      	blx	r3
 8002be2:	e01f      	b.n	8002c24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d01b      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e016      	b.n	8002c24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0208 	bic.w	r2, r2, #8
 8002c12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c28:	2220      	movs	r2, #32
 8002c2a:	409a      	lsls	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 808f 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8087 	beq.w	8002d54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d136      	bne.n	8002ccc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0216 	bic.w	r2, r2, #22
 8002c6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d103      	bne.n	8002c8e <HAL_DMA_IRQHandler+0x1da>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d007      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f022 0208 	bic.w	r2, r2, #8
 8002c9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca2:	223f      	movs	r2, #63	; 0x3f
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d07e      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
        }
        return;
 8002cca:	e079      	b.n	8002dc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01d      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10d      	bne.n	8002d04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d031      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	4798      	blx	r3
 8002cf8:	e02c      	b.n	8002d54 <HAL_DMA_IRQHandler+0x2a0>
 8002cfa:	bf00      	nop
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d023      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	4798      	blx	r3
 8002d14:	e01e      	b.n	8002d54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10f      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0210 	bic.w	r2, r2, #16
 8002d32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d032      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2205      	movs	r2, #5
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f022 0201 	bic.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	3301      	adds	r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d307      	bcc.n	8002d9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f2      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x2cc>
 8002d9a:	e000      	b.n	8002d9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d005      	beq.n	8002dc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	4798      	blx	r3
 8002dbe:	e000      	b.n	8002dc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dc0:	bf00      	nop
    }
  }
}
 8002dc2:	3718      	adds	r7, #24
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <HAL_DMA_RegisterCallback+0x20>
 8002de4:	2302      	movs	r3, #2
 8002de6:	e03d      	b.n	8002e64 <HAL_DMA_RegisterCallback+0x9c>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d12c      	bne.n	8002e56 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d826      	bhi.n	8002e50 <HAL_DMA_RegisterCallback+0x88>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <HAL_DMA_RegisterCallback+0x40>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e21 	.word	0x08002e21
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	08002e31 	.word	0x08002e31
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e49 	.word	0x08002e49
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002e26:	e018      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002e2e:	e014      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002e36:	e010      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002e3e:	e00c      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002e46:	e008      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002e4e:	e004      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	75fb      	strb	r3, [r7, #23]
      break;
 8002e54:	e001      	b.n	8002e5a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	371c      	adds	r7, #28
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7e:	b2db      	uxtb	r3, r3
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d108      	bne.n	8002ecc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002eca:	e007      	b.n	8002edc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68ba      	ldr	r2, [r7, #8]
 8002ed2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	60da      	str	r2, [r3, #12]
}
 8002edc:	bf00      	nop
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3b10      	subs	r3, #16
 8002ef8:	4a14      	ldr	r2, [pc, #80]	; (8002f4c <DMA_CalcBaseAndBitshift+0x64>)
 8002efa:	fba2 2303 	umull	r2, r3, r2, r3
 8002efe:	091b      	lsrs	r3, r3, #4
 8002f00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f02:	4a13      	ldr	r2, [pc, #76]	; (8002f50 <DMA_CalcBaseAndBitshift+0x68>)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4413      	add	r3, r2
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b03      	cmp	r3, #3
 8002f14:	d909      	bls.n	8002f2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	1d1a      	adds	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	659a      	str	r2, [r3, #88]	; 0x58
 8002f28:	e007      	b.n	8002f3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	aaaaaaab 	.word	0xaaaaaaab
 8002f50:	0800d528 	.word	0x0800d528

08002f54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b03      	cmp	r3, #3
 8002f72:	d856      	bhi.n	8003022 <DMA_CheckFifoParam+0xce>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <DMA_CheckFifoParam+0x28>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08002f8d 	.word	0x08002f8d
 8002f80:	08002f9f 	.word	0x08002f9f
 8002f84:	08002f8d 	.word	0x08002f8d
 8002f88:	08003023 	.word	0x08003023
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d046      	beq.n	8003026 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9c:	e043      	b.n	8003026 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa6:	d140      	bne.n	800302a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fac:	e03d      	b.n	800302a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fb6:	d121      	bne.n	8002ffc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d837      	bhi.n	800302e <DMA_CheckFifoParam+0xda>
 8002fbe:	a201      	add	r2, pc, #4	; (adr r2, 8002fc4 <DMA_CheckFifoParam+0x70>)
 8002fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc4:	08002fd5 	.word	0x08002fd5
 8002fc8:	08002fdb 	.word	0x08002fdb
 8002fcc:	08002fd5 	.word	0x08002fd5
 8002fd0:	08002fed 	.word	0x08002fed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd8:	e030      	b.n	800303c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d025      	beq.n	8003032 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fea:	e022      	b.n	8003032 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ff4:	d11f      	bne.n	8003036 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ffa:	e01c      	b.n	8003036 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d903      	bls.n	800300a <DMA_CheckFifoParam+0xb6>
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	2b03      	cmp	r3, #3
 8003006:	d003      	beq.n	8003010 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003008:	e018      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	73fb      	strb	r3, [r7, #15]
      break;
 800300e:	e015      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003014:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00e      	beq.n	800303a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
      break;
 8003020:	e00b      	b.n	800303a <DMA_CheckFifoParam+0xe6>
      break;
 8003022:	bf00      	nop
 8003024:	e00a      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 8003026:	bf00      	nop
 8003028:	e008      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800302a:	bf00      	nop
 800302c:	e006      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800302e:	bf00      	nop
 8003030:	e004      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;   
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <DMA_CheckFifoParam+0xe8>
      break;
 800303a:	bf00      	nop
    }
  } 
  
  return status; 
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	; 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e159      	b.n	800331c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 8148 	bne.w	8003316 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	2b02      	cmp	r3, #2
 800309c:	d130      	bne.n	8003100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a2 	beq.w	8003316 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b57      	ldr	r3, [pc, #348]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	4a56      	ldr	r2, [pc, #344]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	; 0x44
 80031e2:	4b54      	ldr	r3, [pc, #336]	; (8003334 <HAL_GPIO_Init+0x2e8>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a52      	ldr	r2, [pc, #328]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a49      	ldr	r2, [pc, #292]	; (800333c <HAL_GPIO_Init+0x2f0>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d019      	beq.n	800324e <HAL_GPIO_Init+0x202>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a48      	ldr	r2, [pc, #288]	; (8003340 <HAL_GPIO_Init+0x2f4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d013      	beq.n	800324a <HAL_GPIO_Init+0x1fe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x2f8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d00d      	beq.n	8003246 <HAL_GPIO_Init+0x1fa>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a46      	ldr	r2, [pc, #280]	; (8003348 <HAL_GPIO_Init+0x2fc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d007      	beq.n	8003242 <HAL_GPIO_Init+0x1f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a45      	ldr	r2, [pc, #276]	; (800334c <HAL_GPIO_Init+0x300>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d101      	bne.n	800323e <HAL_GPIO_Init+0x1f2>
 800323a:	2304      	movs	r3, #4
 800323c:	e008      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800323e:	2307      	movs	r3, #7
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003242:	2303      	movs	r3, #3
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x204>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x204>
 800324e:	2300      	movs	r3, #0
 8003250:	69fa      	ldr	r2, [r7, #28]
 8003252:	f002 0203 	and.w	r2, r2, #3
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	4093      	lsls	r3, r2
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4313      	orrs	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003260:	4935      	ldr	r1, [pc, #212]	; (8003338 <HAL_GPIO_Init+0x2ec>)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3302      	adds	r3, #2
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800326e:	4b38      	ldr	r3, [pc, #224]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	43db      	mvns	r3, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4013      	ands	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003292:	4a2f      	ldr	r2, [pc, #188]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003298:	4b2d      	ldr	r3, [pc, #180]	; (8003350 <HAL_GPIO_Init+0x304>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032e6:	4a1a      	ldr	r2, [pc, #104]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <HAL_GPIO_Init+0x304>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003310:	4a0f      	ldr	r2, [pc, #60]	; (8003350 <HAL_GPIO_Init+0x304>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	3301      	adds	r3, #1
 800331a:	61fb      	str	r3, [r7, #28]
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	2b0f      	cmp	r3, #15
 8003320:	f67f aea2 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003324:	bf00      	nop
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	40013800 	.word	0x40013800
 800333c:	40020000 	.word	0x40020000
 8003340:	40020400 	.word	0x40020400
 8003344:	40020800 	.word	0x40020800
 8003348:	40020c00 	.word	0x40020c00
 800334c:	40021000 	.word	0x40021000
 8003350:	40013c00 	.word	0x40013c00

08003354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	460b      	mov	r3, r1
 800335e:	807b      	strh	r3, [r7, #2]
 8003360:	4613      	mov	r3, r2
 8003362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003364:	787b      	ldrb	r3, [r7, #1]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003370:	e003      	b.n	800337a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003372:	887b      	ldrh	r3, [r7, #2]
 8003374:	041a      	lsls	r2, r3, #16
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	619a      	str	r2, [r3, #24]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003386:	b480      	push	{r7}
 8003388:	b085      	sub	sp, #20
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
 800338e:	460b      	mov	r3, r1
 8003390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003398:	887a      	ldrh	r2, [r7, #2]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4013      	ands	r3, r2
 800339e:	041a      	lsls	r2, r3, #16
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	43d9      	mvns	r1, r3
 80033a4:	887b      	ldrh	r3, [r7, #2]
 80033a6:	400b      	ands	r3, r1
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
}
 80033ae:	bf00      	nop
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033c6:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	88fb      	ldrh	r3, [r7, #6]
 80033cc:	4013      	ands	r3, r2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d006      	beq.n	80033e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033d2:	4a05      	ldr	r2, [pc, #20]	; (80033e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 f806 	bl	80033ec <HAL_GPIO_EXTI_Callback>
  }
}
 80033e0:	bf00      	nop
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4603      	mov	r3, r0
 80033f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
	...

08003404 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e267      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d075      	beq.n	800350e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003422:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
 800342a:	2b04      	cmp	r3, #4
 800342c:	d00c      	beq.n	8003448 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b85      	ldr	r3, [pc, #532]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003436:	2b08      	cmp	r3, #8
 8003438:	d112      	bne.n	8003460 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800343a:	4b82      	ldr	r3, [pc, #520]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003442:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003446:	d10b      	bne.n	8003460 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003448:	4b7e      	ldr	r3, [pc, #504]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003450:	2b00      	cmp	r3, #0
 8003452:	d05b      	beq.n	800350c <HAL_RCC_OscConfig+0x108>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d157      	bne.n	800350c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e242      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003468:	d106      	bne.n	8003478 <HAL_RCC_OscConfig+0x74>
 800346a:	4b76      	ldr	r3, [pc, #472]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a75      	ldr	r2, [pc, #468]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	e01d      	b.n	80034b4 <HAL_RCC_OscConfig+0xb0>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003480:	d10c      	bne.n	800349c <HAL_RCC_OscConfig+0x98>
 8003482:	4b70      	ldr	r3, [pc, #448]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a6f      	ldr	r2, [pc, #444]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003488:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	4b6d      	ldr	r3, [pc, #436]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a6c      	ldr	r2, [pc, #432]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	e00b      	b.n	80034b4 <HAL_RCC_OscConfig+0xb0>
 800349c:	4b69      	ldr	r3, [pc, #420]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a68      	ldr	r2, [pc, #416]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034a6:	6013      	str	r3, [r2, #0]
 80034a8:	4b66      	ldr	r3, [pc, #408]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a65      	ldr	r2, [pc, #404]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d013      	beq.n	80034e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034bc:	f7ff f820 	bl	8002500 <HAL_GetTick>
 80034c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034c4:	f7ff f81c 	bl	8002500 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b64      	cmp	r3, #100	; 0x64
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e207      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	4b5b      	ldr	r3, [pc, #364]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0xc0>
 80034e2:	e014      	b.n	800350e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e4:	f7ff f80c 	bl	8002500 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034ec:	f7ff f808 	bl	8002500 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b64      	cmp	r3, #100	; 0x64
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e1f3      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	4b51      	ldr	r3, [pc, #324]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0xe8>
 800350a:	e000      	b.n	800350e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800350c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d063      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800351a:	4b4a      	ldr	r3, [pc, #296]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00b      	beq.n	800353e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b47      	ldr	r3, [pc, #284]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352e:	2b08      	cmp	r3, #8
 8003530:	d11c      	bne.n	800356c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003532:	4b44      	ldr	r3, [pc, #272]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353e:	4b41      	ldr	r3, [pc, #260]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_RCC_OscConfig+0x152>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	68db      	ldr	r3, [r3, #12]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d001      	beq.n	8003556 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e1c7      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b3b      	ldr	r3, [pc, #236]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4937      	ldr	r1, [pc, #220]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	e03a      	b.n	80035e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d020      	beq.n	80035b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003574:	4b34      	ldr	r3, [pc, #208]	; (8003648 <HAL_RCC_OscConfig+0x244>)
 8003576:	2201      	movs	r2, #1
 8003578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357a:	f7fe ffc1 	bl	8002500 <HAL_GetTick>
 800357e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003580:	e008      	b.n	8003594 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003582:	f7fe ffbd 	bl	8002500 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e1a8      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	4b2b      	ldr	r3, [pc, #172]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d0f0      	beq.n	8003582 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a0:	4b28      	ldr	r3, [pc, #160]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4925      	ldr	r1, [pc, #148]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	600b      	str	r3, [r1, #0]
 80035b4:	e015      	b.n	80035e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b6:	4b24      	ldr	r3, [pc, #144]	; (8003648 <HAL_RCC_OscConfig+0x244>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035bc:	f7fe ffa0 	bl	8002500 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035c4:	f7fe ff9c 	bl	8002500 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e187      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f0      	bne.n	80035c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d036      	beq.n	800365c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d016      	beq.n	8003624 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f6:	4b15      	ldr	r3, [pc, #84]	; (800364c <HAL_RCC_OscConfig+0x248>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fc:	f7fe ff80 	bl	8002500 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003604:	f7fe ff7c 	bl	8002500 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e167      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_OscConfig+0x240>)
 8003618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d0f0      	beq.n	8003604 <HAL_RCC_OscConfig+0x200>
 8003622:	e01b      	b.n	800365c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003624:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_OscConfig+0x248>)
 8003626:	2200      	movs	r2, #0
 8003628:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362a:	f7fe ff69 	bl	8002500 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	e00e      	b.n	8003650 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003632:	f7fe ff65 	bl	8002500 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d907      	bls.n	8003650 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e150      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
 8003644:	40023800 	.word	0x40023800
 8003648:	42470000 	.word	0x42470000
 800364c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003650:	4b88      	ldr	r3, [pc, #544]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ea      	bne.n	8003632 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8097 	beq.w	8003798 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366e:	4b81      	ldr	r3, [pc, #516]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	4b7d      	ldr	r3, [pc, #500]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	4a7c      	ldr	r2, [pc, #496]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003688:	6413      	str	r3, [r2, #64]	; 0x40
 800368a:	4b7a      	ldr	r3, [pc, #488]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003692:	60bb      	str	r3, [r7, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003696:	2301      	movs	r3, #1
 8003698:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369a:	4b77      	ldr	r3, [pc, #476]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d118      	bne.n	80036d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a6:	4b74      	ldr	r3, [pc, #464]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a73      	ldr	r2, [pc, #460]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 80036ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b2:	f7fe ff25 	bl	8002500 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b8:	e008      	b.n	80036cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ba:	f7fe ff21 	bl	8002500 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d901      	bls.n	80036cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e10c      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x474>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d0f0      	beq.n	80036ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x2ea>
 80036e0:	4b64      	ldr	r3, [pc, #400]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e4:	4a63      	ldr	r2, [pc, #396]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036e6:	f043 0301 	orr.w	r3, r3, #1
 80036ea:	6713      	str	r3, [r2, #112]	; 0x70
 80036ec:	e01c      	b.n	8003728 <HAL_RCC_OscConfig+0x324>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b05      	cmp	r3, #5
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0x30c>
 80036f6:	4b5f      	ldr	r3, [pc, #380]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a5e      	ldr	r2, [pc, #376]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80036fc:	f043 0304 	orr.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	4b5c      	ldr	r3, [pc, #368]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	4a5b      	ldr	r2, [pc, #364]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	6713      	str	r3, [r2, #112]	; 0x70
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0x324>
 8003710:	4b58      	ldr	r3, [pc, #352]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a57      	ldr	r2, [pc, #348]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003716:	f023 0301 	bic.w	r3, r3, #1
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	4b55      	ldr	r3, [pc, #340]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a54      	ldr	r2, [pc, #336]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003722:	f023 0304 	bic.w	r3, r3, #4
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d015      	beq.n	800375c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fe fee6 	bl	8002500 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fe fee2 	bl	8002500 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e0cb      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0ee      	beq.n	8003738 <HAL_RCC_OscConfig+0x334>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800375c:	f7fe fed0 	bl	8002500 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fe fecc 	bl	8002500 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0b5      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377a:	4b3e      	ldr	r3, [pc, #248]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1ee      	bne.n	8003764 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d105      	bne.n	8003798 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800378c:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	4a38      	ldr	r2, [pc, #224]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003792:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003796:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80a1 	beq.w	80038e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037a2:	4b34      	ldr	r3, [pc, #208]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	d05c      	beq.n	8003868 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d141      	bne.n	800383a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b6:	4b31      	ldr	r3, [pc, #196]	; (800387c <HAL_RCC_OscConfig+0x478>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fea0 	bl	8002500 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fe9c 	bl	8002500 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e087      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b27      	ldr	r3, [pc, #156]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	3b01      	subs	r3, #1
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	491b      	ldr	r1, [pc, #108]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 8003808:	4313      	orrs	r3, r2
 800380a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800380c:	4b1b      	ldr	r3, [pc, #108]	; (800387c <HAL_RCC_OscConfig+0x478>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fe75 	bl	8002500 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800381a:	f7fe fe71 	bl	8002500 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e05c      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800382c:	4b11      	ldr	r3, [pc, #68]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x416>
 8003838:	e054      	b.n	80038e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <HAL_RCC_OscConfig+0x478>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003840:	f7fe fe5e 	bl	8002500 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003848:	f7fe fe5a 	bl	8002500 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e045      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	4b06      	ldr	r3, [pc, #24]	; (8003874 <HAL_RCC_OscConfig+0x470>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x444>
 8003866:	e03d      	b.n	80038e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d107      	bne.n	8003880 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	e038      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
 8003874:	40023800 	.word	0x40023800
 8003878:	40007000 	.word	0x40007000
 800387c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003880:	4b1b      	ldr	r3, [pc, #108]	; (80038f0 <HAL_RCC_OscConfig+0x4ec>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	699b      	ldr	r3, [r3, #24]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d028      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d121      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d11a      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038b0:	4013      	ands	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d111      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c6:	085b      	lsrs	r3, r3, #1
 80038c8:	3b01      	subs	r3, #1
 80038ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d107      	bne.n	80038e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038dc:	429a      	cmp	r2, r3
 80038de:	d001      	beq.n	80038e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e000      	b.n	80038e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40023800 	.word	0x40023800

080038f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0cc      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003908:	4b68      	ldr	r3, [pc, #416]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0307 	and.w	r3, r3, #7
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d90c      	bls.n	8003930 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003916:	4b65      	ldr	r3, [pc, #404]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800391e:	4b63      	ldr	r3, [pc, #396]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0307 	and.w	r3, r3, #7
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d001      	beq.n	8003930 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b8      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d020      	beq.n	800397e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	4a58      	ldr	r2, [pc, #352]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003952:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003960:	4b53      	ldr	r3, [pc, #332]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	4a52      	ldr	r2, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003966:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800396a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800396c:	4b50      	ldr	r3, [pc, #320]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	494d      	ldr	r1, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d044      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003992:	4b47      	ldr	r3, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d119      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e07f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b02      	cmp	r3, #2
 80039a8:	d003      	beq.n	80039b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ae:	2b03      	cmp	r3, #3
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b2:	4b3f      	ldr	r3, [pc, #252]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d109      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b3b      	ldr	r3, [pc, #236]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e067      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d2:	4b37      	ldr	r3, [pc, #220]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 0203 	bic.w	r2, r3, #3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4934      	ldr	r1, [pc, #208]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e4:	f7fe fd8c 	bl	8002500 <HAL_GetTick>
 80039e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039ec:	f7fe fd88 	bl	8002500 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e04f      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	4b2b      	ldr	r3, [pc, #172]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	f003 020c 	and.w	r2, r3, #12
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1eb      	bne.n	80039ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d20c      	bcs.n	8003a3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a22:	4b22      	ldr	r3, [pc, #136]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	b2d2      	uxtb	r2, r2
 8003a28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a2a:	4b20      	ldr	r3, [pc, #128]	; (8003aac <HAL_RCC_ClockConfig+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d001      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e032      	b.n	8003aa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0304 	and.w	r3, r3, #4
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d008      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a48:	4b19      	ldr	r3, [pc, #100]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4916      	ldr	r1, [pc, #88]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0308 	and.w	r3, r3, #8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a66:	4b12      	ldr	r3, [pc, #72]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	490e      	ldr	r1, [pc, #56]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a7a:	f000 f821 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a7e:	4602      	mov	r2, r0
 8003a80:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	091b      	lsrs	r3, r3, #4
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	490a      	ldr	r1, [pc, #40]	; (8003ab4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a8c:	5ccb      	ldrb	r3, [r1, r3]
 8003a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a92:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe fcec 	bl	8002478 <HAL_InitTick>

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023c00 	.word	0x40023c00
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800d4c4 	.word	0x0800d4c4
 8003ab8:	20000000 	.word	0x20000000
 8003abc:	20000014 	.word	0x20000014

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b090      	sub	sp, #64	; 0x40
 8003ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
 8003acc:	2300      	movs	r3, #0
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad8:	4b59      	ldr	r3, [pc, #356]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	f003 030c 	and.w	r3, r3, #12
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d00d      	beq.n	8003b00 <HAL_RCC_GetSysClockFreq+0x40>
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	f200 80a1 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x16c>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0x34>
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d003      	beq.n	8003afa <HAL_RCC_GetSysClockFreq+0x3a>
 8003af2:	e09b      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af4:	4b53      	ldr	r3, [pc, #332]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003af6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003af8:	e09b      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003afa:	4b53      	ldr	r3, [pc, #332]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003afc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003afe:	e098      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b00:	4b4f      	ldr	r3, [pc, #316]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d028      	beq.n	8003b68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b16:	4b4a      	ldr	r3, [pc, #296]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	099b      	lsrs	r3, r3, #6
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	623b      	str	r3, [r7, #32]
 8003b20:	627a      	str	r2, [r7, #36]	; 0x24
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4b47      	ldr	r3, [pc, #284]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b2c:	fb03 f201 	mul.w	r2, r3, r1
 8003b30:	2300      	movs	r3, #0
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	4a43      	ldr	r2, [pc, #268]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b3a:	fba0 1202 	umull	r1, r2, r0, r2
 8003b3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b40:	460a      	mov	r2, r1
 8003b42:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b46:	4413      	add	r3, r2
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	61fa      	str	r2, [r7, #28]
 8003b52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b5a:	f7fc fb91 	bl	8000280 <__aeabi_uldivmod>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4613      	mov	r3, r2
 8003b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b66:	e053      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b68:	4b35      	ldr	r3, [pc, #212]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	099b      	lsrs	r3, r3, #6
 8003b6e:	2200      	movs	r2, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	617a      	str	r2, [r7, #20]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b7a:	f04f 0b00 	mov.w	fp, #0
 8003b7e:	4652      	mov	r2, sl
 8003b80:	465b      	mov	r3, fp
 8003b82:	f04f 0000 	mov.w	r0, #0
 8003b86:	f04f 0100 	mov.w	r1, #0
 8003b8a:	0159      	lsls	r1, r3, #5
 8003b8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b90:	0150      	lsls	r0, r2, #5
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	ebb2 080a 	subs.w	r8, r2, sl
 8003b9a:	eb63 090b 	sbc.w	r9, r3, fp
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003baa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003bae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003bb2:	ebb2 0408 	subs.w	r4, r2, r8
 8003bb6:	eb63 0509 	sbc.w	r5, r3, r9
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	00eb      	lsls	r3, r5, #3
 8003bc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc8:	00e2      	lsls	r2, r4, #3
 8003bca:	4614      	mov	r4, r2
 8003bcc:	461d      	mov	r5, r3
 8003bce:	eb14 030a 	adds.w	r3, r4, sl
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	eb45 030b 	adc.w	r3, r5, fp
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	60fa      	str	r2, [r7, #12]
 8003c00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c04:	f7fc fb3c 	bl	8000280 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003c20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c2e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3740      	adds	r7, #64	; 0x40
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	017d7840 	.word	0x017d7840

08003c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000000 	.word	0x20000000

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800d4d4 	.word	0x0800d4d4

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffdc 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800d4d4 	.word	0x0800d4d4

08003cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e07b      	b.n	8003dbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd6:	d009      	beq.n	8003cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61da      	str	r2, [r3, #28]
 8003cde:	e005      	b.n	8003cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fc ffd4 	bl	8000cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d34:	431a      	orrs	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	431a      	orrs	r2, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d5c:	431a      	orrs	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a1b      	ldr	r3, [r3, #32]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	ea42 0103 	orr.w	r1, r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	0c1b      	lsrs	r3, r3, #16
 8003d8a:	f003 0104 	and.w	r1, r3, #4
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	f003 0210 	and.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69da      	ldr	r2, [r3, #28]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b088      	sub	sp, #32
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	60f8      	str	r0, [r7, #12]
 8003dce:	60b9      	str	r1, [r7, #8]
 8003dd0:	603b      	str	r3, [r7, #0]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_SPI_Transmit+0x22>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e126      	b.n	8004036 <HAL_SPI_Transmit+0x270>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df0:	f7fe fb86 	bl	8002500 <HAL_GetTick>
 8003df4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d002      	beq.n	8003e0c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e06:	2302      	movs	r3, #2
 8003e08:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e0a:	e10b      	b.n	8004024 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d002      	beq.n	8003e18 <HAL_SPI_Transmit+0x52>
 8003e12:	88fb      	ldrh	r3, [r7, #6]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d102      	bne.n	8003e1e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e1c:	e102      	b.n	8004024 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2203      	movs	r2, #3
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e64:	d10f      	bne.n	8003e86 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d007      	beq.n	8003ea4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ea2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eac:	d14b      	bne.n	8003f46 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Transmit+0xf6>
 8003eb6:	8afb      	ldrh	r3, [r7, #22]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d13e      	bne.n	8003f3a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	1c9a      	adds	r2, r3, #2
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	3b01      	subs	r3, #1
 8003eda:	b29a      	uxth	r2, r3
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ee0:	e02b      	b.n	8003f3a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d112      	bne.n	8003f16 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	881a      	ldrh	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	1c9a      	adds	r2, r3, #2
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f14:	e011      	b.n	8003f3a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f16:	f7fe faf3 	bl	8002500 <HAL_GetTick>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	429a      	cmp	r2, r3
 8003f24:	d803      	bhi.n	8003f2e <HAL_SPI_Transmit+0x168>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f2c:	d102      	bne.n	8003f34 <HAL_SPI_Transmit+0x16e>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d102      	bne.n	8003f3a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003f34:	2303      	movs	r3, #3
 8003f36:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f38:	e074      	b.n	8004024 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d1ce      	bne.n	8003ee2 <HAL_SPI_Transmit+0x11c>
 8003f44:	e04c      	b.n	8003fe0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d002      	beq.n	8003f54 <HAL_SPI_Transmit+0x18e>
 8003f4e:	8afb      	ldrh	r3, [r7, #22]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d140      	bne.n	8003fd6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	330c      	adds	r3, #12
 8003f5e:	7812      	ldrb	r2, [r2, #0]
 8003f60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f7a:	e02c      	b.n	8003fd6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d113      	bne.n	8003fb2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	330c      	adds	r3, #12
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fb0:	e011      	b.n	8003fd6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fb2:	f7fe faa5 	bl	8002500 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d803      	bhi.n	8003fca <HAL_SPI_Transmit+0x204>
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fc8:	d102      	bne.n	8003fd0 <HAL_SPI_Transmit+0x20a>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d102      	bne.n	8003fd6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fd4:	e026      	b.n	8004024 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1cd      	bne.n	8003f7c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	6839      	ldr	r1, [r7, #0]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 fa09 	bl	80043fc <SPI_EndRxTxTransaction>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10a      	bne.n	8004014 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ffe:	2300      	movs	r3, #0
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	613b      	str	r3, [r7, #16]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	613b      	str	r3, [r7, #16]
 8004012:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004018:	2b00      	cmp	r3, #0
 800401a:	d002      	beq.n	8004022 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	77fb      	strb	r3, [r7, #31]
 8004020:	e000      	b.n	8004024 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004022:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004034:	7ffb      	ldrb	r3, [r7, #31]
}
 8004036:	4618      	mov	r0, r3
 8004038:	3720      	adds	r7, #32
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b086      	sub	sp, #24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	4613      	mov	r3, r2
 800404c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_SPI_Transmit_DMA+0x20>
 800405c:	2302      	movs	r3, #2
 800405e:	e09b      	b.n	8004198 <HAL_SPI_Transmit_DMA+0x158>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d002      	beq.n	800407a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8004074:	2302      	movs	r3, #2
 8004076:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004078:	e089      	b.n	800418e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_SPI_Transmit_DMA+0x46>
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	75fb      	strb	r3, [r7, #23]
    goto error;
 800408a:	e080      	b.n	800418e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2203      	movs	r2, #3
 8004090:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	88fa      	ldrh	r2, [r7, #6]
 80040a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	88fa      	ldrh	r2, [r7, #6]
 80040aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040d2:	d10f      	bne.n	80040f4 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040f2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040f8:	4a29      	ldr	r2, [pc, #164]	; (80041a0 <HAL_SPI_Transmit_DMA+0x160>)
 80040fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004100:	4a28      	ldr	r2, [pc, #160]	; (80041a4 <HAL_SPI_Transmit_DMA+0x164>)
 8004102:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <HAL_SPI_Transmit_DMA+0x168>)
 800410a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	2200      	movs	r2, #0
 8004112:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411c:	4619      	mov	r1, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	330c      	adds	r3, #12
 8004124:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800412c:	f7fe fbd8 	bl	80028e0 <HAL_DMA_Start_IT>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00c      	beq.n	8004150 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800413a:	f043 0210 	orr.w	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800414e:	e01e      	b.n	800418e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	d007      	beq.n	800416e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800416c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0220 	orr.w	r2, r2, #32
 800417c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f042 0202 	orr.w	r2, r2, #2
 800418c:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004196:	7dfb      	ldrb	r3, [r7, #23]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	08004291 	.word	0x08004291
 80041a4:	080041e9 	.word	0x080041e9
 80041a8:	080042ad 	.word	0x080042ad

080041ac <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041f6:	f7fe f983 	bl	8002500 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	d03b      	beq.n	8004284 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0220 	bic.w	r2, r2, #32
 800421a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0202 	bic.w	r2, r2, #2
 800422a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800422c:	693a      	ldr	r2, [r7, #16]
 800422e:	2164      	movs	r1, #100	; 0x64
 8004230:	6978      	ldr	r0, [r7, #20]
 8004232:	f000 f8e3 	bl	80043fc <SPI_EndRxTxTransaction>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d005      	beq.n	8004248 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004240:	f043 0220 	orr.w	r2, r3, #32
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10a      	bne.n	8004266 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004250:	2300      	movs	r3, #0
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800427c:	6978      	ldr	r0, [r7, #20]
 800427e:	f7ff ffa9 	bl	80041d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004282:	e002      	b.n	800428a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004284:	6978      	ldr	r0, [r7, #20]
 8004286:	f7ff ff91 	bl	80041ac <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f7ff ff8e 	bl	80041c0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0203 	bic.w	r2, r2, #3
 80042c8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ce:	f043 0210 	orr.w	r2, r3, #16
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f7ff ff78 	bl	80041d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	4613      	mov	r3, r2
 80042fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042fc:	f7fe f900 	bl	8002500 <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	1a9b      	subs	r3, r3, r2
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	4413      	add	r3, r2
 800430a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800430c:	f7fe f8f8 	bl	8002500 <HAL_GetTick>
 8004310:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004312:	4b39      	ldr	r3, [pc, #228]	; (80043f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	015b      	lsls	r3, r3, #5
 8004318:	0d1b      	lsrs	r3, r3, #20
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004322:	e054      	b.n	80043ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800432a:	d050      	beq.n	80043ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800432c:	f7fe f8e8 	bl	8002500 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	429a      	cmp	r2, r3
 800433a:	d902      	bls.n	8004342 <SPI_WaitFlagStateUntilTimeout+0x56>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d13d      	bne.n	80043be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004350:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800435a:	d111      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x94>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d004      	beq.n	8004370 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d107      	bne.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004388:	d10f      	bne.n	80043aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e017      	b.n	80043ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689a      	ldr	r2, [r3, #8]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	4013      	ands	r3, r2
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	429a      	cmp	r2, r3
 80043dc:	bf0c      	ite	eq
 80043de:	2301      	moveq	r3, #1
 80043e0:	2300      	movne	r3, #0
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	461a      	mov	r2, r3
 80043e6:	79fb      	ldrb	r3, [r7, #7]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d19b      	bne.n	8004324 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000000 	.word	0x20000000

080043fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b088      	sub	sp, #32
 8004400:	af02      	add	r7, sp, #8
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004408:	4b1b      	ldr	r3, [pc, #108]	; (8004478 <SPI_EndRxTxTransaction+0x7c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a1b      	ldr	r2, [pc, #108]	; (800447c <SPI_EndRxTxTransaction+0x80>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	0d5b      	lsrs	r3, r3, #21
 8004414:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004418:	fb02 f303 	mul.w	r3, r2, r3
 800441c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004426:	d112      	bne.n	800444e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2200      	movs	r2, #0
 8004430:	2180      	movs	r1, #128	; 0x80
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f7ff ff5a 	bl	80042ec <SPI_WaitFlagStateUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d016      	beq.n	800446c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004442:	f043 0220 	orr.w	r2, r3, #32
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e00f      	b.n	800446e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	3b01      	subs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004464:	2b80      	cmp	r3, #128	; 0x80
 8004466:	d0f2      	beq.n	800444e <SPI_EndRxTxTransaction+0x52>
 8004468:	e000      	b.n	800446c <SPI_EndRxTxTransaction+0x70>
        break;
 800446a:	bf00      	nop
  }

  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3718      	adds	r7, #24
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000000 	.word	0x20000000
 800447c:	165e9f81 	.word	0x165e9f81

08004480 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d101      	bne.n	8004494 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e097      	b.n	80045c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7fc fc7d 	bl	8000da8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2202      	movs	r2, #2
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044c4:	f023 0307 	bic.w	r3, r3, #7
 80044c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	3304      	adds	r3, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4610      	mov	r0, r2
 80044d6:	f000 f879 	bl	80045cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004502:	f023 0303 	bic.w	r3, r3, #3
 8004506:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	699b      	ldr	r3, [r3, #24]
 8004510:	021b      	lsls	r3, r3, #8
 8004512:	4313      	orrs	r3, r2
 8004514:	693a      	ldr	r2, [r7, #16]
 8004516:	4313      	orrs	r3, r2
 8004518:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004520:	f023 030c 	bic.w	r3, r3, #12
 8004524:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800452c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	4313      	orrs	r3, r2
 800453e:	693a      	ldr	r2, [r7, #16]
 8004540:	4313      	orrs	r3, r2
 8004542:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	011a      	lsls	r2, r3, #4
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	031b      	lsls	r3, r3, #12
 8004550:	4313      	orrs	r3, r2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004566:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4313      	orrs	r3, r2
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3718      	adds	r7, #24
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00f      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d00b      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a31      	ldr	r2, [pc, #196]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d007      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <TIM_Base_SetConfig+0xf0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d108      	bne.n	8004616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01b      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d017      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a20      	ldr	r2, [pc, #128]	; (80046bc <TIM_Base_SetConfig+0xf0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <TIM_Base_SetConfig+0xf4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <TIM_Base_SetConfig+0xf8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <TIM_Base_SetConfig+0xfc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e050      	b.n	8004786 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800470a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4313      	orrs	r3, r2
 8004714:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004730:	d013      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a16      	ldr	r2, [pc, #88]	; (800479c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a13      	ldr	r2, [pc, #76]	; (80047a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d10c      	bne.n	8004774 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	4313      	orrs	r3, r2
 800476a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e03f      	b.n	800483a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fb32 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2224      	movs	r2, #36	; 0x24
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fc7b 	bl	80050e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004800:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695a      	ldr	r2, [r3, #20]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004810:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68da      	ldr	r2, [r3, #12]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004820:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2220      	movs	r2, #32
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b0ba      	sub	sp, #232	; 0xe8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004870:	2300      	movs	r3, #0
 8004872:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800488a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_UART_IRQHandler+0x66>
 8004896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489a:	f003 0320 	and.w	r3, r3, #32
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fb65 	bl	8004f72 <UART_Receive_IT>
      return;
 80048a8:	e256      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 80de 	beq.w	8004a70 <HAL_UART_IRQHandler+0x22c>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d106      	bne.n	80048ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f000 80d1 	beq.w	8004a70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <HAL_UART_IRQHandler+0xae>
 80048da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d005      	beq.n	80048f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	f043 0201 	orr.w	r2, r3, #1
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <HAL_UART_IRQHandler+0xd2>
 80048fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0202 	orr.w	r2, r3, #2
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0xf6>
 8004922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	f003 0308 	and.w	r3, r3, #8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d011      	beq.n	800496a <HAL_UART_IRQHandler+0x126>
 8004946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494a:	f003 0320 	and.w	r3, r3, #32
 800494e:	2b00      	cmp	r3, #0
 8004950:	d105      	bne.n	800495e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004956:	f003 0301 	and.w	r3, r3, #1
 800495a:	2b00      	cmp	r3, #0
 800495c:	d005      	beq.n	800496a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	f043 0208 	orr.w	r2, r3, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	2b00      	cmp	r3, #0
 8004970:	f000 81ed 	beq.w	8004d4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <HAL_UART_IRQHandler+0x14e>
 8004980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004984:	f003 0320 	and.w	r3, r3, #32
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 faf0 	bl	8004f72 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	695b      	ldr	r3, [r3, #20]
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b40      	cmp	r3, #64	; 0x40
 800499e:	bf0c      	ite	eq
 80049a0:	2301      	moveq	r3, #1
 80049a2:	2300      	movne	r3, #0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <HAL_UART_IRQHandler+0x17a>
 80049b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d04f      	beq.n	8004a5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9f8 	bl	8004db4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ce:	2b40      	cmp	r3, #64	; 0x40
 80049d0:	d141      	bne.n	8004a56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3314      	adds	r3, #20
 80049d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a0e:	e841 2300 	strex	r3, r2, [r1]
 8004a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d1d9      	bne.n	80049d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d013      	beq.n	8004a4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a2a:	4a7d      	ldr	r2, [pc, #500]	; (8004c20 <HAL_UART_IRQHandler+0x3dc>)
 8004a2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe f81c 	bl	8002a70 <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d016      	beq.n	8004a6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a48:	4610      	mov	r0, r2
 8004a4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4c:	e00e      	b.n	8004a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f99a 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	e00a      	b.n	8004a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f996 	bl	8004d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e006      	b.n	8004a6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f992 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a6a:	e170      	b.n	8004d4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	bf00      	nop
    return;
 8004a6e:	e16e      	b.n	8004d4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	f040 814a 	bne.w	8004d0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8143 	beq.w	8004d0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f003 0310 	and.w	r3, r3, #16
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 813c 	beq.w	8004d0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	60bb      	str	r3, [r7, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	f040 80b4 	bne.w	8004c24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8140 	beq.w	8004d52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ad6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ada:	429a      	cmp	r2, r3
 8004adc:	f080 8139 	bcs.w	8004d52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ae6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af2:	f000 8088 	beq.w	8004c06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	330c      	adds	r3, #12
 8004afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	330c      	adds	r3, #12
 8004b1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1d9      	bne.n	8004af6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3314      	adds	r3, #20
 8004b48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e1      	bne.n	8004b42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3314      	adds	r3, #20
 8004b84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	330c      	adds	r3, #12
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bce:	e853 3f00 	ldrex	r3, [r3]
 8004bd2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd6:	f023 0310 	bic.w	r3, r3, #16
 8004bda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	330c      	adds	r3, #12
 8004be4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004be8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bf0:	e841 2300 	strex	r3, r2, [r1]
 8004bf4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1e3      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fd fec5 	bl	8002990 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 f8c0 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c1c:	e099      	b.n	8004d52 <HAL_UART_IRQHandler+0x50e>
 8004c1e:	bf00      	nop
 8004c20:	08004e7b 	.word	0x08004e7b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	f000 808b 	beq.w	8004d56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8086 	beq.w	8004d56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	e853 3f00 	ldrex	r3, [r3]
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	330c      	adds	r3, #12
 8004c6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004c70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c76:	e841 2300 	strex	r3, r2, [r1]
 8004c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1e3      	bne.n	8004c4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3314      	adds	r3, #20
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	623b      	str	r3, [r7, #32]
   return(result);
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	f023 0301 	bic.w	r3, r3, #1
 8004c98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	3314      	adds	r3, #20
 8004ca2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ca6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004caa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cae:	e841 2300 	strex	r3, r2, [r1]
 8004cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d1e3      	bne.n	8004c82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	330c      	adds	r3, #12
 8004cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 0310 	bic.w	r3, r3, #16
 8004cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cec:	61fa      	str	r2, [r7, #28]
 8004cee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf0:	69b9      	ldr	r1, [r7, #24]
 8004cf2:	69fa      	ldr	r2, [r7, #28]
 8004cf4:	e841 2300 	strex	r3, r2, [r1]
 8004cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1e3      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d04:	4619      	mov	r1, r3
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f848 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d0c:	e023      	b.n	8004d56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d009      	beq.n	8004d2e <HAL_UART_IRQHandler+0x4ea>
 8004d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 f8bb 	bl	8004ea2 <UART_Transmit_IT>
    return;
 8004d2c:	e014      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00e      	beq.n	8004d58 <HAL_UART_IRQHandler+0x514>
 8004d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f8fb 	bl	8004f42 <UART_EndTransmit_IT>
    return;
 8004d4c:	e004      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
    return;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
      return;
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <HAL_UART_IRQHandler+0x514>
      return;
 8004d56:	bf00      	nop
  }
}
 8004d58:	37e8      	adds	r7, #232	; 0xe8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop

08004d60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b095      	sub	sp, #84	; 0x54
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	e853 3f00 	ldrex	r3, [r3]
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ddc:	643a      	str	r2, [r7, #64]	; 0x40
 8004dde:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004de2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de4:	e841 2300 	strex	r3, r2, [r1]
 8004de8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d1e5      	bne.n	8004dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	6a3b      	ldr	r3, [r7, #32]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	f023 0301 	bic.w	r3, r3, #1
 8004e06:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3314      	adds	r3, #20
 8004e0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e5      	bne.n	8004df0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d119      	bne.n	8004e60 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	e853 3f00 	ldrex	r3, [r3]
 8004e3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f023 0310 	bic.w	r3, r3, #16
 8004e42:	647b      	str	r3, [r7, #68]	; 0x44
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	330c      	adds	r3, #12
 8004e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e4c:	61ba      	str	r2, [r7, #24]
 8004e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e50:	6979      	ldr	r1, [r7, #20]
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	e841 2300 	strex	r3, r2, [r1]
 8004e58:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d1e5      	bne.n	8004e2c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2220      	movs	r2, #32
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e6e:	bf00      	nop
 8004e70:	3754      	adds	r7, #84	; 0x54
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff ff77 	bl	8004d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b21      	cmp	r3, #33	; 0x21
 8004eb4:	d13e      	bne.n	8004f34 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ebe:	d114      	bne.n	8004eea <UART_Transmit_IT+0x48>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d110      	bne.n	8004eea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a1b      	ldr	r3, [r3, #32]
 8004ecc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	881b      	ldrh	r3, [r3, #0]
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004edc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]
 8004ee8:	e008      	b.n	8004efc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	1c59      	adds	r1, r3, #1
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6211      	str	r1, [r2, #32]
 8004ef4:	781a      	ldrb	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	3b01      	subs	r3, #1
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	4619      	mov	r1, r3
 8004f0a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10f      	bne.n	8004f30 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68da      	ldr	r2, [r3, #12]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f1e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f2e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	e000      	b.n	8004f36 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f42:	b580      	push	{r7, lr}
 8004f44:	b082      	sub	sp, #8
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f58:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff fefc 	bl	8004d60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b08c      	sub	sp, #48	; 0x30
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b22      	cmp	r3, #34	; 0x22
 8004f84:	f040 80ab 	bne.w	80050de <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f90:	d117      	bne.n	8004fc2 <UART_Receive_IT+0x50>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	691b      	ldr	r3, [r3, #16]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d113      	bne.n	8004fc2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	1c9a      	adds	r2, r3, #2
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004fc0:	e026      	b.n	8005010 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	d007      	beq.n	8004fe6 <UART_Receive_IT+0x74>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d10a      	bne.n	8004ff4 <UART_Receive_IT+0x82>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	701a      	strb	r2, [r3, #0]
 8004ff2:	e008      	b.n	8005006 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005000:	b2da      	uxtb	r2, r3
 8005002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005004:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	1c5a      	adds	r2, r3, #1
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4619      	mov	r1, r3
 800501e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005020:	2b00      	cmp	r3, #0
 8005022:	d15a      	bne.n	80050da <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0220 	bic.w	r2, r2, #32
 8005032:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005042:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695a      	ldr	r2, [r3, #20]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f022 0201 	bic.w	r2, r2, #1
 8005052:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2220      	movs	r2, #32
 8005058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2b01      	cmp	r3, #1
 8005062:	d135      	bne.n	80050d0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	613b      	str	r3, [r7, #16]
   return(result);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f023 0310 	bic.w	r3, r3, #16
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	330c      	adds	r3, #12
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	623a      	str	r2, [r7, #32]
 800508c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508e:	69f9      	ldr	r1, [r7, #28]
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	e841 2300 	strex	r3, r2, [r1]
 8005096:	61bb      	str	r3, [r7, #24]
   return(result);
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d1e5      	bne.n	800506a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b10      	cmp	r3, #16
 80050aa:	d10a      	bne.n	80050c2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fe67 	bl	8004d9c <HAL_UARTEx_RxEventCallback>
 80050ce:	e002      	b.n	80050d6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff fe4f 	bl	8004d74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050d6:	2300      	movs	r3, #0
 80050d8:	e002      	b.n	80050e0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3730      	adds	r7, #48	; 0x30
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050ec:	b0c0      	sub	sp, #256	; 0x100
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005104:	68d9      	ldr	r1, [r3, #12]
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	ea40 0301 	orr.w	r3, r0, r1
 8005110:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	431a      	orrs	r2, r3
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	431a      	orrs	r2, r3
 8005128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800512c:	69db      	ldr	r3, [r3, #28]
 800512e:	4313      	orrs	r3, r2
 8005130:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005140:	f021 010c 	bic.w	r1, r1, #12
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800514e:	430b      	orrs	r3, r1
 8005150:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005152:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800515e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005162:	6999      	ldr	r1, [r3, #24]
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	ea40 0301 	orr.w	r3, r0, r1
 800516e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b8f      	ldr	r3, [pc, #572]	; (80053b4 <UART_SetConfig+0x2cc>)
 8005178:	429a      	cmp	r2, r3
 800517a:	d005      	beq.n	8005188 <UART_SetConfig+0xa0>
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	4b8d      	ldr	r3, [pc, #564]	; (80053b8 <UART_SetConfig+0x2d0>)
 8005184:	429a      	cmp	r2, r3
 8005186:	d104      	bne.n	8005192 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005188:	f7fe fd80 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 800518c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005190:	e003      	b.n	800519a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005192:	f7fe fd67 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8005196:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519e:	69db      	ldr	r3, [r3, #28]
 80051a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051a4:	f040 810c 	bne.w	80053c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ac:	2200      	movs	r2, #0
 80051ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051b2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051ba:	4622      	mov	r2, r4
 80051bc:	462b      	mov	r3, r5
 80051be:	1891      	adds	r1, r2, r2
 80051c0:	65b9      	str	r1, [r7, #88]	; 0x58
 80051c2:	415b      	adcs	r3, r3
 80051c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051ca:	4621      	mov	r1, r4
 80051cc:	eb12 0801 	adds.w	r8, r2, r1
 80051d0:	4629      	mov	r1, r5
 80051d2:	eb43 0901 	adc.w	r9, r3, r1
 80051d6:	f04f 0200 	mov.w	r2, #0
 80051da:	f04f 0300 	mov.w	r3, #0
 80051de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ea:	4690      	mov	r8, r2
 80051ec:	4699      	mov	r9, r3
 80051ee:	4623      	mov	r3, r4
 80051f0:	eb18 0303 	adds.w	r3, r8, r3
 80051f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051f8:	462b      	mov	r3, r5
 80051fa:	eb49 0303 	adc.w	r3, r9, r3
 80051fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800520e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005212:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005216:	460b      	mov	r3, r1
 8005218:	18db      	adds	r3, r3, r3
 800521a:	653b      	str	r3, [r7, #80]	; 0x50
 800521c:	4613      	mov	r3, r2
 800521e:	eb42 0303 	adc.w	r3, r2, r3
 8005222:	657b      	str	r3, [r7, #84]	; 0x54
 8005224:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005228:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800522c:	f7fb f828 	bl	8000280 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4b61      	ldr	r3, [pc, #388]	; (80053bc <UART_SetConfig+0x2d4>)
 8005236:	fba3 2302 	umull	r2, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	011c      	lsls	r4, r3, #4
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005248:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800524c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	1891      	adds	r1, r2, r2
 8005256:	64b9      	str	r1, [r7, #72]	; 0x48
 8005258:	415b      	adcs	r3, r3
 800525a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800525c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005260:	4641      	mov	r1, r8
 8005262:	eb12 0a01 	adds.w	sl, r2, r1
 8005266:	4649      	mov	r1, r9
 8005268:	eb43 0b01 	adc.w	fp, r3, r1
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005278:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800527c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005280:	4692      	mov	sl, r2
 8005282:	469b      	mov	fp, r3
 8005284:	4643      	mov	r3, r8
 8005286:	eb1a 0303 	adds.w	r3, sl, r3
 800528a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800528e:	464b      	mov	r3, r9
 8005290:	eb4b 0303 	adc.w	r3, fp, r3
 8005294:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052a4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052ac:	460b      	mov	r3, r1
 80052ae:	18db      	adds	r3, r3, r3
 80052b0:	643b      	str	r3, [r7, #64]	; 0x40
 80052b2:	4613      	mov	r3, r2
 80052b4:	eb42 0303 	adc.w	r3, r2, r3
 80052b8:	647b      	str	r3, [r7, #68]	; 0x44
 80052ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052c2:	f7fa ffdd 	bl	8000280 <__aeabi_uldivmod>
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <UART_SetConfig+0x2d4>)
 80052ce:	fba3 2301 	umull	r2, r3, r3, r1
 80052d2:	095b      	lsrs	r3, r3, #5
 80052d4:	2264      	movs	r2, #100	; 0x64
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	1acb      	subs	r3, r1, r3
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052e2:	4b36      	ldr	r3, [pc, #216]	; (80053bc <UART_SetConfig+0x2d4>)
 80052e4:	fba3 2302 	umull	r2, r3, r3, r2
 80052e8:	095b      	lsrs	r3, r3, #5
 80052ea:	005b      	lsls	r3, r3, #1
 80052ec:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052f0:	441c      	add	r4, r3
 80052f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f6:	2200      	movs	r2, #0
 80052f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052fc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005300:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005304:	4642      	mov	r2, r8
 8005306:	464b      	mov	r3, r9
 8005308:	1891      	adds	r1, r2, r2
 800530a:	63b9      	str	r1, [r7, #56]	; 0x38
 800530c:	415b      	adcs	r3, r3
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005310:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005314:	4641      	mov	r1, r8
 8005316:	1851      	adds	r1, r2, r1
 8005318:	6339      	str	r1, [r7, #48]	; 0x30
 800531a:	4649      	mov	r1, r9
 800531c:	414b      	adcs	r3, r1
 800531e:	637b      	str	r3, [r7, #52]	; 0x34
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800532c:	4659      	mov	r1, fp
 800532e:	00cb      	lsls	r3, r1, #3
 8005330:	4651      	mov	r1, sl
 8005332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005336:	4651      	mov	r1, sl
 8005338:	00ca      	lsls	r2, r1, #3
 800533a:	4610      	mov	r0, r2
 800533c:	4619      	mov	r1, r3
 800533e:	4603      	mov	r3, r0
 8005340:	4642      	mov	r2, r8
 8005342:	189b      	adds	r3, r3, r2
 8005344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005348:	464b      	mov	r3, r9
 800534a:	460a      	mov	r2, r1
 800534c:	eb42 0303 	adc.w	r3, r2, r3
 8005350:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005360:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005364:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005368:	460b      	mov	r3, r1
 800536a:	18db      	adds	r3, r3, r3
 800536c:	62bb      	str	r3, [r7, #40]	; 0x28
 800536e:	4613      	mov	r3, r2
 8005370:	eb42 0303 	adc.w	r3, r2, r3
 8005374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005376:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800537a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800537e:	f7fa ff7f 	bl	8000280 <__aeabi_uldivmod>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <UART_SetConfig+0x2d4>)
 8005388:	fba3 1302 	umull	r1, r3, r3, r2
 800538c:	095b      	lsrs	r3, r3, #5
 800538e:	2164      	movs	r1, #100	; 0x64
 8005390:	fb01 f303 	mul.w	r3, r1, r3
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	3332      	adds	r3, #50	; 0x32
 800539a:	4a08      	ldr	r2, [pc, #32]	; (80053bc <UART_SetConfig+0x2d4>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	f003 0207 	and.w	r2, r3, #7
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4422      	add	r2, r4
 80053ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053b0:	e105      	b.n	80055be <UART_SetConfig+0x4d6>
 80053b2:	bf00      	nop
 80053b4:	40011000 	.word	0x40011000
 80053b8:	40011400 	.word	0x40011400
 80053bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053ca:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053d2:	4642      	mov	r2, r8
 80053d4:	464b      	mov	r3, r9
 80053d6:	1891      	adds	r1, r2, r2
 80053d8:	6239      	str	r1, [r7, #32]
 80053da:	415b      	adcs	r3, r3
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053e2:	4641      	mov	r1, r8
 80053e4:	1854      	adds	r4, r2, r1
 80053e6:	4649      	mov	r1, r9
 80053e8:	eb43 0501 	adc.w	r5, r3, r1
 80053ec:	f04f 0200 	mov.w	r2, #0
 80053f0:	f04f 0300 	mov.w	r3, #0
 80053f4:	00eb      	lsls	r3, r5, #3
 80053f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fa:	00e2      	lsls	r2, r4, #3
 80053fc:	4614      	mov	r4, r2
 80053fe:	461d      	mov	r5, r3
 8005400:	4643      	mov	r3, r8
 8005402:	18e3      	adds	r3, r4, r3
 8005404:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005408:	464b      	mov	r3, r9
 800540a:	eb45 0303 	adc.w	r3, r5, r3
 800540e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800541e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005422:	f04f 0200 	mov.w	r2, #0
 8005426:	f04f 0300 	mov.w	r3, #0
 800542a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800542e:	4629      	mov	r1, r5
 8005430:	008b      	lsls	r3, r1, #2
 8005432:	4621      	mov	r1, r4
 8005434:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005438:	4621      	mov	r1, r4
 800543a:	008a      	lsls	r2, r1, #2
 800543c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005440:	f7fa ff1e 	bl	8000280 <__aeabi_uldivmod>
 8005444:	4602      	mov	r2, r0
 8005446:	460b      	mov	r3, r1
 8005448:	4b60      	ldr	r3, [pc, #384]	; (80055cc <UART_SetConfig+0x4e4>)
 800544a:	fba3 2302 	umull	r2, r3, r3, r2
 800544e:	095b      	lsrs	r3, r3, #5
 8005450:	011c      	lsls	r4, r3, #4
 8005452:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005456:	2200      	movs	r2, #0
 8005458:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800545c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005460:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	1891      	adds	r1, r2, r2
 800546a:	61b9      	str	r1, [r7, #24]
 800546c:	415b      	adcs	r3, r3
 800546e:	61fb      	str	r3, [r7, #28]
 8005470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005474:	4641      	mov	r1, r8
 8005476:	1851      	adds	r1, r2, r1
 8005478:	6139      	str	r1, [r7, #16]
 800547a:	4649      	mov	r1, r9
 800547c:	414b      	adcs	r3, r1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800548c:	4659      	mov	r1, fp
 800548e:	00cb      	lsls	r3, r1, #3
 8005490:	4651      	mov	r1, sl
 8005492:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005496:	4651      	mov	r1, sl
 8005498:	00ca      	lsls	r2, r1, #3
 800549a:	4610      	mov	r0, r2
 800549c:	4619      	mov	r1, r3
 800549e:	4603      	mov	r3, r0
 80054a0:	4642      	mov	r2, r8
 80054a2:	189b      	adds	r3, r3, r2
 80054a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054a8:	464b      	mov	r3, r9
 80054aa:	460a      	mov	r2, r1
 80054ac:	eb42 0303 	adc.w	r3, r2, r3
 80054b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80054be:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054cc:	4649      	mov	r1, r9
 80054ce:	008b      	lsls	r3, r1, #2
 80054d0:	4641      	mov	r1, r8
 80054d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054d6:	4641      	mov	r1, r8
 80054d8:	008a      	lsls	r2, r1, #2
 80054da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054de:	f7fa fecf 	bl	8000280 <__aeabi_uldivmod>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4b39      	ldr	r3, [pc, #228]	; (80055cc <UART_SetConfig+0x4e4>)
 80054e8:	fba3 1302 	umull	r1, r3, r3, r2
 80054ec:	095b      	lsrs	r3, r3, #5
 80054ee:	2164      	movs	r1, #100	; 0x64
 80054f0:	fb01 f303 	mul.w	r3, r1, r3
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	011b      	lsls	r3, r3, #4
 80054f8:	3332      	adds	r3, #50	; 0x32
 80054fa:	4a34      	ldr	r2, [pc, #208]	; (80055cc <UART_SetConfig+0x4e4>)
 80054fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005506:	441c      	add	r4, r3
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550c:	2200      	movs	r2, #0
 800550e:	673b      	str	r3, [r7, #112]	; 0x70
 8005510:	677a      	str	r2, [r7, #116]	; 0x74
 8005512:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005516:	4642      	mov	r2, r8
 8005518:	464b      	mov	r3, r9
 800551a:	1891      	adds	r1, r2, r2
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	415b      	adcs	r3, r3
 8005520:	60fb      	str	r3, [r7, #12]
 8005522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005526:	4641      	mov	r1, r8
 8005528:	1851      	adds	r1, r2, r1
 800552a:	6039      	str	r1, [r7, #0]
 800552c:	4649      	mov	r1, r9
 800552e:	414b      	adcs	r3, r1
 8005530:	607b      	str	r3, [r7, #4]
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800553e:	4659      	mov	r1, fp
 8005540:	00cb      	lsls	r3, r1, #3
 8005542:	4651      	mov	r1, sl
 8005544:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005548:	4651      	mov	r1, sl
 800554a:	00ca      	lsls	r2, r1, #3
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	4603      	mov	r3, r0
 8005552:	4642      	mov	r2, r8
 8005554:	189b      	adds	r3, r3, r2
 8005556:	66bb      	str	r3, [r7, #104]	; 0x68
 8005558:	464b      	mov	r3, r9
 800555a:	460a      	mov	r2, r1
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	663b      	str	r3, [r7, #96]	; 0x60
 800556c:	667a      	str	r2, [r7, #100]	; 0x64
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800557a:	4649      	mov	r1, r9
 800557c:	008b      	lsls	r3, r1, #2
 800557e:	4641      	mov	r1, r8
 8005580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005584:	4641      	mov	r1, r8
 8005586:	008a      	lsls	r2, r1, #2
 8005588:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800558c:	f7fa fe78 	bl	8000280 <__aeabi_uldivmod>
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <UART_SetConfig+0x4e4>)
 8005596:	fba3 1302 	umull	r1, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	; 0x64
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <UART_SetConfig+0x4e4>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4422      	add	r2, r4
 80055bc:	609a      	str	r2, [r3, #8]
}
 80055be:	bf00      	nop
 80055c0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	51eb851f 	.word	0x51eb851f

080055d0 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80055d0:	b480      	push	{r7}
 80055d2:	b085      	sub	sp, #20
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80055e2:	89fb      	ldrh	r3, [r7, #14]
 80055e4:	021b      	lsls	r3, r3, #8
 80055e6:	b21a      	sxth	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	b21b      	sxth	r3, r3
 80055ee:	4313      	orrs	r3, r2
 80055f0:	b21b      	sxth	r3, r3
 80055f2:	b29b      	uxth	r3, r3
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8005600:	b480      	push	{r7}
 8005602:	b085      	sub	sp, #20
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8005662:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2200      	movs	r2, #0
 800567c:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005684:	2300      	movs	r3, #0
 8005686:	73fb      	strb	r3, [r7, #15]
 8005688:	e010      	b.n	80056ac <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	3307      	adds	r3, #7
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	2200      	movs	r2, #0
 8005696:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	3307      	adds	r3, #7
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	2200      	movs	r2, #0
 80056a4:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
 80056a8:	3301      	adds	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b03      	cmp	r3, #3
 80056b0:	d9eb      	bls.n	800568a <UG_Init+0x8a>
   }

   gui = g;
 80056b2:	4a05      	ldr	r2, [pc, #20]	; (80056c8 <UG_Init+0xc8>)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6013      	str	r3, [r2, #0]
   return 1;
 80056b8:	2301      	movs	r3, #1
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
 80056c6:	bf00      	nop
 80056c8:	200004f4 	.word	0x200004f4

080056cc <UG_GetGUI>:
   gui = g;
   return 1;
}

UG_GUI* UG_GetGUI( void )
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
   return gui;
 80056d0:	4b03      	ldr	r3, [pc, #12]	; (80056e0 <UG_GetGUI+0x14>)
 80056d2:	681b      	ldr	r3, [r3, #0]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	200004f4 	.word	0x200004f4

080056e4 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b083      	sub	sp, #12
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80056ec:	4b04      	ldr	r3, [pc, #16]	; (8005700 <UG_FontSelect+0x1c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	611a      	str	r2, [r3, #16]
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	200004f4 	.word	0x200004f4

08005704 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af02      	add	r7, sp, #8
 800570a:	4603      	mov	r3, r0
 800570c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 800570e:	4b0e      	ldr	r3, [pc, #56]	; (8005748 <UG_FillScreen+0x44>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005718:	b29b      	uxth	r3, r3
 800571a:	3b01      	subs	r3, #1
 800571c:	b29b      	uxth	r3, r3
 800571e:	b21a      	sxth	r2, r3
 8005720:	4b09      	ldr	r3, [pc, #36]	; (8005748 <UG_FillScreen+0x44>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29b      	uxth	r3, r3
 8005730:	b219      	sxth	r1, r3
 8005732:	88fb      	ldrh	r3, [r7, #6]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	460b      	mov	r3, r1
 8005738:	2100      	movs	r1, #0
 800573a:	2000      	movs	r0, #0
 800573c:	f000 f806 	bl	800574c <UG_FillFrame>
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	200004f4 	.word	0x200004f4

0800574c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800574c:	b5b0      	push	{r4, r5, r7, lr}
 800574e:	b086      	sub	sp, #24
 8005750:	af02      	add	r7, sp, #8
 8005752:	4604      	mov	r4, r0
 8005754:	4608      	mov	r0, r1
 8005756:	4611      	mov	r1, r2
 8005758:	461a      	mov	r2, r3
 800575a:	4623      	mov	r3, r4
 800575c:	80fb      	strh	r3, [r7, #6]
 800575e:	4603      	mov	r3, r0
 8005760:	80bb      	strh	r3, [r7, #4]
 8005762:	460b      	mov	r3, r1
 8005764:	807b      	strh	r3, [r7, #2]
 8005766:	4613      	mov	r3, r2
 8005768:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800576a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800576e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005772:	429a      	cmp	r2, r3
 8005774:	da05      	bge.n	8005782 <UG_FillFrame+0x36>
     swap(x1,x2);
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	887b      	ldrh	r3, [r7, #2]
 800577c:	80fb      	strh	r3, [r7, #6]
 800577e:	897b      	ldrh	r3, [r7, #10]
 8005780:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005782:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005786:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	da05      	bge.n	800579a <UG_FillFrame+0x4e>
     swap(y1,y2);
 800578e:	88bb      	ldrh	r3, [r7, #4]
 8005790:	813b      	strh	r3, [r7, #8]
 8005792:	883b      	ldrh	r3, [r7, #0]
 8005794:	80bb      	strh	r3, [r7, #4]
 8005796:	893b      	ldrh	r3, [r7, #8]
 8005798:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800579a:	4b24      	ldr	r3, [pc, #144]	; (800582c <UG_FillFrame+0xe0>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d012      	beq.n	80057d0 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80057aa:	4b20      	ldr	r3, [pc, #128]	; (800582c <UG_FillFrame+0xe0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b0:	461d      	mov	r5, r3
 80057b2:	f9b7 4000 	ldrsh.w	r4, [r7]
 80057b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80057be:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80057c2:	8c3b      	ldrh	r3, [r7, #32]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4623      	mov	r3, r4
 80057c8:	47a8      	blx	r5
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d028      	beq.n	8005822 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80057d0:	88bb      	ldrh	r3, [r7, #4]
 80057d2:	81bb      	strh	r3, [r7, #12]
 80057d4:	e01e      	b.n	8005814 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80057d6:	88fb      	ldrh	r3, [r7, #6]
 80057d8:	81fb      	strh	r3, [r7, #14]
 80057da:	e00f      	b.n	80057fc <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80057dc:	4b13      	ldr	r3, [pc, #76]	; (800582c <UG_FillFrame+0xe0>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	8c3a      	ldrh	r2, [r7, #32]
 80057e6:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80057ea:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80057ee:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80057f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	3301      	adds	r3, #1
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	81fb      	strh	r3, [r7, #14]
 80057fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005800:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005804:	429a      	cmp	r2, r3
 8005806:	dde9      	ble.n	80057dc <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8005808:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800580c:	b29b      	uxth	r3, r3
 800580e:	3301      	adds	r3, #1
 8005810:	b29b      	uxth	r3, r3
 8005812:	81bb      	strh	r3, [r7, #12]
 8005814:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005818:	f9b7 3000 	ldrsh.w	r3, [r7]
 800581c:	429a      	cmp	r2, r3
 800581e:	ddda      	ble.n	80057d6 <UG_FillFrame+0x8a>
 8005820:	e000      	b.n	8005824 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005822:	bf00      	nop
      }
   }
}
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bdb0      	pop	{r4, r5, r7, pc}
 800582a:	bf00      	nop
 800582c:	200004f4 	.word	0x200004f4

08005830 <UG_DrawMesh>:
     x++;
   }
}

void UG_DrawMesh( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_U16 spacing, UG_COLOR c )
{
 8005830:	b590      	push	{r4, r7, lr}
 8005832:	b087      	sub	sp, #28
 8005834:	af02      	add	r7, sp, #8
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	4611      	mov	r1, r2
 800583c:	461a      	mov	r2, r3
 800583e:	4623      	mov	r3, r4
 8005840:	80fb      	strh	r3, [r7, #6]
 8005842:	4603      	mov	r3, r0
 8005844:	80bb      	strh	r3, [r7, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	807b      	strh	r3, [r7, #2]
 800584a:	4613      	mov	r3, r2
 800584c:	803b      	strh	r3, [r7, #0]
   UG_U16 p;

   if ( x2 < x1 )
 800584e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005856:	429a      	cmp	r2, r3
 8005858:	da05      	bge.n	8005866 <UG_DrawMesh+0x36>
     swap(x1,x2);
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	81bb      	strh	r3, [r7, #12]
 800585e:	887b      	ldrh	r3, [r7, #2]
 8005860:	80fb      	strh	r3, [r7, #6]
 8005862:	89bb      	ldrh	r3, [r7, #12]
 8005864:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005866:	f9b7 2000 	ldrsh.w	r2, [r7]
 800586a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	da05      	bge.n	800587e <UG_DrawMesh+0x4e>
     swap(y1,y2);
 8005872:	88bb      	ldrh	r3, [r7, #4]
 8005874:	817b      	strh	r3, [r7, #10]
 8005876:	883b      	ldrh	r3, [r7, #0]
 8005878:	80bb      	strh	r3, [r7, #4]
 800587a:	897b      	ldrh	r3, [r7, #10]
 800587c:	803b      	strh	r3, [r7, #0]

   for( p=y1; p<y2; p+=spacing )
 800587e:	88bb      	ldrh	r3, [r7, #4]
 8005880:	81fb      	strh	r3, [r7, #14]
 8005882:	e010      	b.n	80058a6 <UG_DrawMesh+0x76>
   {
     UG_DrawLine(x1, p, x2, p, c);
 8005884:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005888:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800588c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005890:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	4623      	mov	r3, r4
 800589a:	f000 fa61 	bl	8005d60 <UG_DrawLine>
   for( p=y1; p<y2; p+=spacing )
 800589e:	89fa      	ldrh	r2, [r7, #14]
 80058a0:	8c3b      	ldrh	r3, [r7, #32]
 80058a2:	4413      	add	r3, r2
 80058a4:	81fb      	strh	r3, [r7, #14]
 80058a6:	89fa      	ldrh	r2, [r7, #14]
 80058a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	dbe9      	blt.n	8005884 <UG_DrawMesh+0x54>
   }
   UG_DrawLine(x1, y2, x2, y2, c);
 80058b0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80058b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058b8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80058bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	4623      	mov	r3, r4
 80058c6:	f000 fa4b 	bl	8005d60 <UG_DrawLine>

   for( p=x1; p<x2; p+=spacing )
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	81fb      	strh	r3, [r7, #14]
 80058ce:	e010      	b.n	80058f2 <UG_DrawMesh+0xc2>
   {
     UG_DrawLine(p, y1, p, y2, c);
 80058d0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80058d4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80058d8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80058dc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	4623      	mov	r3, r4
 80058e6:	f000 fa3b 	bl	8005d60 <UG_DrawLine>
   for( p=x1; p<x2; p+=spacing )
 80058ea:	89fa      	ldrh	r2, [r7, #14]
 80058ec:	8c3b      	ldrh	r3, [r7, #32]
 80058ee:	4413      	add	r3, r2
 80058f0:	81fb      	strh	r3, [r7, #14]
 80058f2:	89fa      	ldrh	r2, [r7, #14]
 80058f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	dbe9      	blt.n	80058d0 <UG_DrawMesh+0xa0>
   }
   UG_DrawLine(x2, y1, x2, y2, c);
 80058fc:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005900:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005904:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005908:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800590c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	4623      	mov	r3, r4
 8005912:	f000 fa25 	bl	8005d60 <UG_DrawLine>
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	bd90      	pop	{r4, r7, pc}

0800591e <UG_DrawFrame>:

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800591e:	b590      	push	{r4, r7, lr}
 8005920:	b085      	sub	sp, #20
 8005922:	af02      	add	r7, sp, #8
 8005924:	4604      	mov	r4, r0
 8005926:	4608      	mov	r0, r1
 8005928:	4611      	mov	r1, r2
 800592a:	461a      	mov	r2, r3
 800592c:	4623      	mov	r3, r4
 800592e:	80fb      	strh	r3, [r7, #6]
 8005930:	4603      	mov	r3, r0
 8005932:	80bb      	strh	r3, [r7, #4]
 8005934:	460b      	mov	r3, r1
 8005936:	807b      	strh	r3, [r7, #2]
 8005938:	4613      	mov	r3, r2
 800593a:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 800593c:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005940:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005944:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005948:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800594c:	8b3b      	ldrh	r3, [r7, #24]
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4623      	mov	r3, r4
 8005952:	f000 fa05 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8005956:	f9b7 4000 	ldrsh.w	r4, [r7]
 800595a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800595e:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005962:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005966:	8b3b      	ldrh	r3, [r7, #24]
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	4623      	mov	r3, r4
 800596c:	f000 f9f8 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8005970:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005974:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005978:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800597c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005980:	8b3b      	ldrh	r3, [r7, #24]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	4623      	mov	r3, r4
 8005986:	f000 f9eb 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800598a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800598e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005992:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005996:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800599a:	8b3b      	ldrh	r3, [r7, #24]
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4623      	mov	r3, r4
 80059a0:	f000 f9de 	bl	8005d60 <UG_DrawLine>
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd90      	pop	{r4, r7, pc}

080059ac <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	4603      	mov	r3, r0
 80059b4:	80fb      	strh	r3, [r7, #6]
 80059b6:	460b      	mov	r3, r1
 80059b8:	80bb      	strh	r3, [r7, #4]
 80059ba:	4613      	mov	r3, r2
 80059bc:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 80059be:	4b07      	ldr	r3, [pc, #28]	; (80059dc <UG_DrawPixel+0x30>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	887a      	ldrh	r2, [r7, #2]
 80059c8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80059cc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80059d0:	4798      	blx	r3
}
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	200004f4 	.word	0x200004f4

080059e0 <UG_DrawCircle>:

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 80059e0:	b590      	push	{r4, r7, lr}
 80059e2:	b087      	sub	sp, #28
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4604      	mov	r4, r0
 80059e8:	4608      	mov	r0, r1
 80059ea:	4611      	mov	r1, r2
 80059ec:	461a      	mov	r2, r3
 80059ee:	4623      	mov	r3, r4
 80059f0:	80fb      	strh	r3, [r7, #6]
 80059f2:	4603      	mov	r3, r0
 80059f4:	80bb      	strh	r3, [r7, #4]
 80059f6:	460b      	mov	r3, r1
 80059f8:	807b      	strh	r3, [r7, #2]
 80059fa:	4613      	mov	r3, r2
 80059fc:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 80059fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f2c0 80c8 	blt.w	8005b98 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8005a08:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	f2c0 80c5 	blt.w	8005b9c <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8005a12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	f340 80c2 	ble.w	8005ba0 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8005a1c:	887b      	ldrh	r3, [r7, #2]
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f1c3 0301 	rsb	r3, r3, #1
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	823b      	strh	r3, [r7, #16]
   e = 0;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	81fb      	strh	r3, [r7, #14]
   x = r;
 8005a32:	887b      	ldrh	r3, [r7, #2]
 8005a34:	82fb      	strh	r3, [r7, #22]
   y = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8005a3a:	e0a5      	b.n	8005b88 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8005a3c:	4b5a      	ldr	r3, [pc, #360]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	88f9      	ldrh	r1, [r7, #6]
 8005a46:	8afa      	ldrh	r2, [r7, #22]
 8005a48:	1a8a      	subs	r2, r1, r2
 8005a4a:	b292      	uxth	r2, r2
 8005a4c:	b210      	sxth	r0, r2
 8005a4e:	88b9      	ldrh	r1, [r7, #4]
 8005a50:	8aba      	ldrh	r2, [r7, #20]
 8005a52:	440a      	add	r2, r1
 8005a54:	b292      	uxth	r2, r2
 8005a56:	b211      	sxth	r1, r2
 8005a58:	883a      	ldrh	r2, [r7, #0]
 8005a5a:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8005a5c:	4b52      	ldr	r3, [pc, #328]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	88f9      	ldrh	r1, [r7, #6]
 8005a66:	8afa      	ldrh	r2, [r7, #22]
 8005a68:	1a8a      	subs	r2, r1, r2
 8005a6a:	b292      	uxth	r2, r2
 8005a6c:	b210      	sxth	r0, r2
 8005a6e:	88b9      	ldrh	r1, [r7, #4]
 8005a70:	8aba      	ldrh	r2, [r7, #20]
 8005a72:	1a8a      	subs	r2, r1, r2
 8005a74:	b292      	uxth	r2, r2
 8005a76:	b211      	sxth	r1, r2
 8005a78:	883a      	ldrh	r2, [r7, #0]
 8005a7a:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8005a7c:	4b4a      	ldr	r3, [pc, #296]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	88f9      	ldrh	r1, [r7, #6]
 8005a86:	8afa      	ldrh	r2, [r7, #22]
 8005a88:	440a      	add	r2, r1
 8005a8a:	b292      	uxth	r2, r2
 8005a8c:	b210      	sxth	r0, r2
 8005a8e:	88b9      	ldrh	r1, [r7, #4]
 8005a90:	8aba      	ldrh	r2, [r7, #20]
 8005a92:	440a      	add	r2, r1
 8005a94:	b292      	uxth	r2, r2
 8005a96:	b211      	sxth	r1, r2
 8005a98:	883a      	ldrh	r2, [r7, #0]
 8005a9a:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8005a9c:	4b42      	ldr	r3, [pc, #264]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	88f9      	ldrh	r1, [r7, #6]
 8005aa6:	8afa      	ldrh	r2, [r7, #22]
 8005aa8:	440a      	add	r2, r1
 8005aaa:	b292      	uxth	r2, r2
 8005aac:	b210      	sxth	r0, r2
 8005aae:	88b9      	ldrh	r1, [r7, #4]
 8005ab0:	8aba      	ldrh	r2, [r7, #20]
 8005ab2:	1a8a      	subs	r2, r1, r2
 8005ab4:	b292      	uxth	r2, r2
 8005ab6:	b211      	sxth	r1, r2
 8005ab8:	883a      	ldrh	r2, [r7, #0]
 8005aba:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8005abc:	4b3a      	ldr	r3, [pc, #232]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	88f9      	ldrh	r1, [r7, #6]
 8005ac6:	8aba      	ldrh	r2, [r7, #20]
 8005ac8:	1a8a      	subs	r2, r1, r2
 8005aca:	b292      	uxth	r2, r2
 8005acc:	b210      	sxth	r0, r2
 8005ace:	88b9      	ldrh	r1, [r7, #4]
 8005ad0:	8afa      	ldrh	r2, [r7, #22]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	b292      	uxth	r2, r2
 8005ad6:	b211      	sxth	r1, r2
 8005ad8:	883a      	ldrh	r2, [r7, #0]
 8005ada:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8005adc:	4b32      	ldr	r3, [pc, #200]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	88f9      	ldrh	r1, [r7, #6]
 8005ae6:	8aba      	ldrh	r2, [r7, #20]
 8005ae8:	1a8a      	subs	r2, r1, r2
 8005aea:	b292      	uxth	r2, r2
 8005aec:	b210      	sxth	r0, r2
 8005aee:	88b9      	ldrh	r1, [r7, #4]
 8005af0:	8afa      	ldrh	r2, [r7, #22]
 8005af2:	1a8a      	subs	r2, r1, r2
 8005af4:	b292      	uxth	r2, r2
 8005af6:	b211      	sxth	r1, r2
 8005af8:	883a      	ldrh	r2, [r7, #0]
 8005afa:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8005afc:	4b2a      	ldr	r3, [pc, #168]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	88f9      	ldrh	r1, [r7, #6]
 8005b06:	8aba      	ldrh	r2, [r7, #20]
 8005b08:	440a      	add	r2, r1
 8005b0a:	b292      	uxth	r2, r2
 8005b0c:	b210      	sxth	r0, r2
 8005b0e:	88b9      	ldrh	r1, [r7, #4]
 8005b10:	8afa      	ldrh	r2, [r7, #22]
 8005b12:	440a      	add	r2, r1
 8005b14:	b292      	uxth	r2, r2
 8005b16:	b211      	sxth	r1, r2
 8005b18:	883a      	ldrh	r2, [r7, #0]
 8005b1a:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8005b1c:	4b22      	ldr	r3, [pc, #136]	; (8005ba8 <UG_DrawCircle+0x1c8>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	88f9      	ldrh	r1, [r7, #6]
 8005b26:	8aba      	ldrh	r2, [r7, #20]
 8005b28:	440a      	add	r2, r1
 8005b2a:	b292      	uxth	r2, r2
 8005b2c:	b210      	sxth	r0, r2
 8005b2e:	88b9      	ldrh	r1, [r7, #4]
 8005b30:	8afa      	ldrh	r2, [r7, #22]
 8005b32:	1a8a      	subs	r2, r1, r2
 8005b34:	b292      	uxth	r2, r2
 8005b36:	b211      	sxth	r1, r2
 8005b38:	883a      	ldrh	r2, [r7, #0]
 8005b3a:	4798      	blx	r3

      y++;
 8005b3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3301      	adds	r3, #1
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005b48:	89fa      	ldrh	r2, [r7, #14]
 8005b4a:	8a3b      	ldrh	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8005b52:	8a3b      	ldrh	r3, [r7, #16]
 8005b54:	3302      	adds	r3, #2
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005b5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b5e:	005a      	lsls	r2, r3, #1
 8005b60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b64:	4413      	add	r3, r2
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	dd0e      	ble.n	8005b88 <UG_DrawCircle+0x1a8>
      {
         x--;
 8005b6a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	3b01      	subs	r3, #1
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005b76:	89fa      	ldrh	r2, [r7, #14]
 8005b78:	8a7b      	ldrh	r3, [r7, #18]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8005b80:	8a7b      	ldrh	r3, [r7, #18]
 8005b82:	3302      	adds	r3, #2
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005b88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b8c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	f6bf af53 	bge.w	8005a3c <UG_DrawCircle+0x5c>
 8005b96:	e004      	b.n	8005ba2 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8005b98:	bf00      	nop
 8005b9a:	e002      	b.n	8005ba2 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8005b9c:	bf00      	nop
 8005b9e:	e000      	b.n	8005ba2 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8005ba0:	bf00      	nop
      }
   }
}
 8005ba2:	371c      	adds	r7, #28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd90      	pop	{r4, r7, pc}
 8005ba8:	200004f4 	.word	0x200004f4

08005bac <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	4608      	mov	r0, r1
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	461a      	mov	r2, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	80fb      	strh	r3, [r7, #6]
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	80bb      	strh	r3, [r7, #4]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	807b      	strh	r3, [r7, #2]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 8005bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	f2c0 80bd 	blt.w	8005d4e <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 8005bd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f2c0 80ba 	blt.w	8005d52 <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 8005bde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f340 80b7 	ble.w	8005d56 <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 8005be8:	887b      	ldrh	r3, [r7, #2]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f1c3 0303 	rsb	r3, r3, #3
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	817b      	strh	r3, [r7, #10]
   x = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	81fb      	strh	r3, [r7, #14]
   y = r;
 8005bfa:	887b      	ldrh	r3, [r7, #2]
 8005bfc:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 8005bfe:	e095      	b.n	8005d2c <UG_FillCircle+0x180>
   {
     if( y > 0 )
 8005c00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dd33      	ble.n	8005c70 <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	89fb      	ldrh	r3, [r7, #14]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	b29b      	uxth	r3, r3
 8005c10:	b218      	sxth	r0, r3
 8005c12:	88ba      	ldrh	r2, [r7, #4]
 8005c14:	89bb      	ldrh	r3, [r7, #12]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	b219      	sxth	r1, r3
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	89fb      	ldrh	r3, [r7, #14]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	b21c      	sxth	r4, r3
 8005c26:	88ba      	ldrh	r2, [r7, #4]
 8005c28:	89bb      	ldrh	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	b21a      	sxth	r2, r3
 8005c30:	883b      	ldrh	r3, [r7, #0]
 8005c32:	9300      	str	r3, [sp, #0]
 8005c34:	4613      	mov	r3, r2
 8005c36:	4622      	mov	r2, r4
 8005c38:	f000 f892 	bl	8005d60 <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005c3c:	88fa      	ldrh	r2, [r7, #6]
 8005c3e:	89fb      	ldrh	r3, [r7, #14]
 8005c40:	4413      	add	r3, r2
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	b218      	sxth	r0, r3
 8005c46:	88ba      	ldrh	r2, [r7, #4]
 8005c48:	89bb      	ldrh	r3, [r7, #12]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	b219      	sxth	r1, r3
 8005c50:	88fa      	ldrh	r2, [r7, #6]
 8005c52:	89fb      	ldrh	r3, [r7, #14]
 8005c54:	4413      	add	r3, r2
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	b21c      	sxth	r4, r3
 8005c5a:	88ba      	ldrh	r2, [r7, #4]
 8005c5c:	89bb      	ldrh	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b21a      	sxth	r2, r3
 8005c64:	883b      	ldrh	r3, [r7, #0]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	f000 f878 	bl	8005d60 <UG_DrawLine>
     }
     if( x > 0 )
 8005c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	dd33      	ble.n	8005ce0 <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	89bb      	ldrh	r3, [r7, #12]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	b218      	sxth	r0, r3
 8005c82:	88ba      	ldrh	r2, [r7, #4]
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	b219      	sxth	r1, r3
 8005c8c:	88fa      	ldrh	r2, [r7, #6]
 8005c8e:	89bb      	ldrh	r3, [r7, #12]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	b21c      	sxth	r4, r3
 8005c96:	88ba      	ldrh	r2, [r7, #4]
 8005c98:	89fb      	ldrh	r3, [r7, #14]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	b21a      	sxth	r2, r3
 8005ca0:	883b      	ldrh	r3, [r7, #0]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	4622      	mov	r2, r4
 8005ca8:	f000 f85a 	bl	8005d60 <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 8005cac:	88fa      	ldrh	r2, [r7, #6]
 8005cae:	89bb      	ldrh	r3, [r7, #12]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	b218      	sxth	r0, r3
 8005cb6:	88ba      	ldrh	r2, [r7, #4]
 8005cb8:	89fb      	ldrh	r3, [r7, #14]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	b219      	sxth	r1, r3
 8005cc0:	88fa      	ldrh	r2, [r7, #6]
 8005cc2:	89bb      	ldrh	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	b21c      	sxth	r4, r3
 8005cca:	88ba      	ldrh	r2, [r7, #4]
 8005ccc:	89fb      	ldrh	r3, [r7, #14]
 8005cce:	4413      	add	r3, r2
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	b21a      	sxth	r2, r3
 8005cd4:	883b      	ldrh	r3, [r7, #0]
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	4622      	mov	r2, r4
 8005cdc:	f000 f840 	bl	8005d60 <UG_DrawLine>
     }
     if ( xd < 0 )
 8005ce0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	da09      	bge.n	8005cfc <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 8005ce8:	89fb      	ldrh	r3, [r7, #14]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	897b      	ldrh	r3, [r7, #10]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3306      	adds	r3, #6
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	817b      	strh	r3, [r7, #10]
 8005cfa:	e011      	b.n	8005d20 <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 8005cfc:	89fa      	ldrh	r2, [r7, #14]
 8005cfe:	89bb      	ldrh	r3, [r7, #12]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	897b      	ldrh	r3, [r7, #10]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	330a      	adds	r3, #10
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	817b      	strh	r3, [r7, #10]
        y--;
 8005d14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 8005d20:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005d2c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005d30:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	f77f af63 	ble.w	8005c00 <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005d3a:	883b      	ldrh	r3, [r7, #0]
 8005d3c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d40:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d44:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d48:	f7ff fe4a 	bl	80059e0 <UG_DrawCircle>
 8005d4c:	e004      	b.n	8005d58 <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 8005d4e:	bf00      	nop
 8005d50:	e002      	b.n	8005d58 <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 8005d52:	bf00      	nop
 8005d54:	e000      	b.n	8005d58 <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005d56:	bf00      	nop
}
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd90      	pop	{r4, r7, pc}
	...

08005d60 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005d60:	b5b0      	push	{r4, r5, r7, lr}
 8005d62:	b08a      	sub	sp, #40	; 0x28
 8005d64:	af02      	add	r7, sp, #8
 8005d66:	4604      	mov	r4, r0
 8005d68:	4608      	mov	r0, r1
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4623      	mov	r3, r4
 8005d70:	80fb      	strh	r3, [r7, #6]
 8005d72:	4603      	mov	r3, r0
 8005d74:	80bb      	strh	r3, [r7, #4]
 8005d76:	460b      	mov	r3, r1
 8005d78:	807b      	strh	r3, [r7, #2]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005d7e:	4b67      	ldr	r3, [pc, #412]	; (8005f1c <UG_DrawLine+0x1bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d013      	beq.n	8005db6 <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005d8e:	4b63      	ldr	r3, [pc, #396]	; (8005f1c <UG_DrawLine+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d94:	461d      	mov	r5, r3
 8005d96:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005d9a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d9e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005da2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005da6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005da8:	9300      	str	r3, [sp, #0]
 8005daa:	4623      	mov	r3, r4
 8005dac:	47a8      	blx	r5
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 80ae 	beq.w	8005f12 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005db6:	887a      	ldrh	r2, [r7, #2]
 8005db8:	88fb      	ldrh	r3, [r7, #6]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005dc0:	883a      	ldrh	r2, [r7, #0]
 8005dc2:	88bb      	ldrh	r3, [r7, #4]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005dca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	bfb8      	it	lt
 8005dd2:	425b      	neglt	r3, r3
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005dd8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bfb8      	it	lt
 8005de0:	425b      	neglt	r3, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005de6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	dd01      	ble.n	8005df2 <UG_DrawLine+0x92>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e001      	b.n	8005df6 <UG_DrawLine+0x96>
 8005df2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005df6:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005df8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	dd01      	ble.n	8005e04 <UG_DrawLine+0xa4>
 8005e00:	2301      	movs	r3, #1
 8005e02:	e001      	b.n	8005e08 <UG_DrawLine+0xa8>
 8005e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e08:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005e0a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e0e:	105b      	asrs	r3, r3, #1
 8005e10:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005e12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e16:	105b      	asrs	r3, r3, #1
 8005e18:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005e1a:	88fb      	ldrh	r3, [r7, #6]
 8005e1c:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005e1e:	88bb      	ldrh	r3, [r7, #4]
 8005e20:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005e22:	4b3e      	ldr	r3, [pc, #248]	; (8005f1c <UG_DrawLine+0x1bc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005e2c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005e30:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e34:	4798      	blx	r3

   if( dxabs >= dyabs )
 8005e36:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005e3a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	db33      	blt.n	8005eaa <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8005e42:	2300      	movs	r3, #0
 8005e44:	83fb      	strh	r3, [r7, #30]
 8005e46:	e029      	b.n	8005e9c <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8005e48:	8b7a      	ldrh	r2, [r7, #26]
 8005e4a:	89fb      	ldrh	r3, [r7, #14]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005e52:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005e56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	db09      	blt.n	8005e72 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005e5e:	8b7a      	ldrh	r2, [r7, #26]
 8005e60:	8a3b      	ldrh	r3, [r7, #16]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8005e68:	8afa      	ldrh	r2, [r7, #22]
 8005e6a:	897b      	ldrh	r3, [r7, #10]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005e72:	8b3a      	ldrh	r2, [r7, #24]
 8005e74:	89bb      	ldrh	r3, [r7, #12]
 8005e76:	4413      	add	r3, r2
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005e7c:	4b27      	ldr	r3, [pc, #156]	; (8005f1c <UG_DrawLine+0x1bc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005e86:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005e8a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e8e:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005e90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3301      	adds	r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	83fb      	strh	r3, [r7, #30]
 8005e9c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005ea0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	dbcf      	blt.n	8005e48 <UG_DrawLine+0xe8>
 8005ea8:	e034      	b.n	8005f14 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8005eaa:	2300      	movs	r3, #0
 8005eac:	83fb      	strh	r3, [r7, #30]
 8005eae:	e029      	b.n	8005f04 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005eb0:	8bba      	ldrh	r2, [r7, #28]
 8005eb2:	8a3b      	ldrh	r3, [r7, #16]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005eba:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005ebe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	db09      	blt.n	8005eda <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8005ec6:	8bba      	ldrh	r2, [r7, #28]
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005ed0:	8b3a      	ldrh	r2, [r7, #24]
 8005ed2:	89bb      	ldrh	r3, [r7, #12]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005eda:	8afa      	ldrh	r2, [r7, #22]
 8005edc:	897b      	ldrh	r3, [r7, #10]
 8005ede:	4413      	add	r3, r2
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <UG_DrawLine+0x1bc>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685b      	ldr	r3, [r3, #4]
 8005eec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005eee:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005ef2:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005ef6:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8005ef8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	3301      	adds	r3, #1
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	83fb      	strh	r3, [r7, #30]
 8005f04:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	dbcf      	blt.n	8005eb0 <UG_DrawLine+0x150>
 8005f10:	e000      	b.n	8005f14 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005f12:	bf00      	nop
      }
   }  
}
 8005f14:	3720      	adds	r7, #32
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bdb0      	pop	{r4, r5, r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	200004f4 	.word	0x200004f4

08005f20 <UG_DrawTriangle>:


/* Draw a triangle */
void UG_DrawTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005f20:	b590      	push	{r4, r7, lr}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	4623      	mov	r3, r4
 8005f30:	80fb      	strh	r3, [r7, #6]
 8005f32:	4603      	mov	r3, r0
 8005f34:	80bb      	strh	r3, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	807b      	strh	r3, [r7, #2]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	803b      	strh	r3, [r7, #0]
  UG_DrawLine(x1, y1, x2, y2, c);
 8005f3e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005f42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005f4e:	8c3b      	ldrh	r3, [r7, #32]
 8005f50:	9300      	str	r3, [sp, #0]
 8005f52:	4623      	mov	r3, r4
 8005f54:	f7ff ff04 	bl	8005d60 <UG_DrawLine>
  UG_DrawLine(x2, y2, x3, y3, c);
 8005f58:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005f5c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f60:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005f64:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005f68:	8c3b      	ldrh	r3, [r7, #32]
 8005f6a:	9300      	str	r3, [sp, #0]
 8005f6c:	4623      	mov	r3, r4
 8005f6e:	f7ff fef7 	bl	8005d60 <UG_DrawLine>
  UG_DrawLine(x3, y3, x1, y1, c);
 8005f72:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005f76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f7a:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005f7e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005f82:	8c3b      	ldrh	r3, [r7, #32]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4623      	mov	r3, r4
 8005f88:	f7ff feea 	bl	8005d60 <UG_DrawLine>
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd90      	pop	{r4, r7, pc}

08005f94 <UG_FillTriangle>:

/* Fill a triangle */
void UG_FillTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b08f      	sub	sp, #60	; 0x3c
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4623      	mov	r3, r4
 8005fa4:	80fb      	strh	r3, [r7, #6]
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80bb      	strh	r3, [r7, #4]
 8005faa:	460b      	mov	r3, r1
 8005fac:	807b      	strh	r3, [r7, #2]
 8005fae:	4613      	mov	r3, r2
 8005fb0:	803b      	strh	r3, [r7, #0]

  UG_S16 a, b, y, last;

  /* Sort coordinates by Y order (y3 >= y2 >= y1) */
  if (y1 > y2) {
 8005fb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005fb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	dd0b      	ble.n	8005fd6 <UG_FillTriangle+0x42>
    swap(y1, y2); swap(x1, x2);
 8005fbe:	88bb      	ldrh	r3, [r7, #4]
 8005fc0:	847b      	strh	r3, [r7, #34]	; 0x22
 8005fc2:	883b      	ldrh	r3, [r7, #0]
 8005fc4:	80bb      	strh	r3, [r7, #4]
 8005fc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fc8:	803b      	strh	r3, [r7, #0]
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	843b      	strh	r3, [r7, #32]
 8005fce:	887b      	ldrh	r3, [r7, #2]
 8005fd0:	80fb      	strh	r3, [r7, #6]
 8005fd2:	8c3b      	ldrh	r3, [r7, #32]
 8005fd4:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 8005fd6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005fda:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	dd0f      	ble.n	8006002 <UG_FillTriangle+0x6e>
    swap(y3, y2); swap(x3, x2);
 8005fe2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005fe6:	83fb      	strh	r3, [r7, #30]
 8005fe8:	883b      	ldrh	r3, [r7, #0]
 8005fea:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005fee:	8bfb      	ldrh	r3, [r7, #30]
 8005ff0:	803b      	strh	r3, [r7, #0]
 8005ff2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ff6:	83bb      	strh	r3, [r7, #28]
 8005ff8:	887b      	ldrh	r3, [r7, #2]
 8005ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005ffe:	8bbb      	ldrh	r3, [r7, #28]
 8006000:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 8006002:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006006:	f9b7 3000 	ldrsh.w	r3, [r7]
 800600a:	429a      	cmp	r2, r3
 800600c:	dd0b      	ble.n	8006026 <UG_FillTriangle+0x92>
    swap(y1, y2); swap(x1, x2);
 800600e:	88bb      	ldrh	r3, [r7, #4]
 8006010:	837b      	strh	r3, [r7, #26]
 8006012:	883b      	ldrh	r3, [r7, #0]
 8006014:	80bb      	strh	r3, [r7, #4]
 8006016:	8b7b      	ldrh	r3, [r7, #26]
 8006018:	803b      	strh	r3, [r7, #0]
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	833b      	strh	r3, [r7, #24]
 800601e:	887b      	ldrh	r3, [r7, #2]
 8006020:	80fb      	strh	r3, [r7, #6]
 8006022:	8b3b      	ldrh	r3, [r7, #24]
 8006024:	807b      	strh	r3, [r7, #2]
  }

  /* Handle awkward all-on-same-line case as its own thing */
  if (y1 == y3) {
 8006026:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800602a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800602e:	429a      	cmp	r2, r3
 8006030:	d138      	bne.n	80060a4 <UG_FillTriangle+0x110>
    a = b = x1;
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006036:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006038:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x2 < a) {
 800603a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800603e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006042:	429a      	cmp	r2, r3
 8006044:	da02      	bge.n	800604c <UG_FillTriangle+0xb8>
      a = x2;
 8006046:	887b      	ldrh	r3, [r7, #2]
 8006048:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800604a:	e007      	b.n	800605c <UG_FillTriangle+0xc8>
    } else if (x2 > b) {
 800604c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006050:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006054:	429a      	cmp	r2, r3
 8006056:	dd01      	ble.n	800605c <UG_FillTriangle+0xc8>
      b = x2;
 8006058:	887b      	ldrh	r3, [r7, #2]
 800605a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if (x3 < a) {
 800605c:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8006060:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8006064:	429a      	cmp	r2, r3
 8006066:	da03      	bge.n	8006070 <UG_FillTriangle+0xdc>
      a = x3;
 8006068:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800606c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800606e:	e008      	b.n	8006082 <UG_FillTriangle+0xee>
    } else if (x3 > b) {
 8006070:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8006074:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006078:	429a      	cmp	r2, r3
 800607a:	dd02      	ble.n	8006082 <UG_FillTriangle+0xee>
      b = x3;
 800607c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006080:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y1, b + 1, y1, c);
 8006082:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006084:	3301      	adds	r3, #1
 8006086:	b29b      	uxth	r3, r3
 8006088:	b21a      	sxth	r2, r3
 800608a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 800608e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006092:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006096:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4623      	mov	r3, r4
 800609e:	f7ff fe5f 	bl	8005d60 <UG_DrawLine>
    return;
 80060a2:	e0dc      	b.n	800625e <UG_FillTriangle+0x2ca>
  }

  UG_S16
  dx01 = x2 - x1,
 80060a4:	887a      	ldrh	r2, [r7, #2]
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	1ad3      	subs	r3, r2, r3
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	82fb      	strh	r3, [r7, #22]
  dy01 = y2 - y1,
 80060ae:	883a      	ldrh	r2, [r7, #0]
 80060b0:	88bb      	ldrh	r3, [r7, #4]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	82bb      	strh	r3, [r7, #20]
  dx02 = x3 - x1,
 80060b8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80060bc:	88fb      	ldrh	r3, [r7, #6]
 80060be:	1ad3      	subs	r3, r2, r3
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	827b      	strh	r3, [r7, #18]
  dy02 = y3 - y1,
 80060c4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80060c8:	88bb      	ldrh	r3, [r7, #4]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	823b      	strh	r3, [r7, #16]
  dx12 = x3 - x2,
 80060d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	b29b      	uxth	r3, r3
 80060da:	81fb      	strh	r3, [r7, #14]
  dy12 = y3 - y2,
 80060dc:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80060e0:	883b      	ldrh	r3, [r7, #0]
 80060e2:	1ad3      	subs	r3, r2, r3
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 80060e8:	2300      	movs	r3, #0
 80060ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 80060ec:	2300      	movs	r3, #0
 80060ee:	84bb      	strh	r3, [r7, #36]	; 0x24
   * is included here (and second loop will be skipped, avoiding a /0
   * error there), otherwise scanline y2 is skipped here and handled
   * in the second loop...which also avoids a /0 error here if y1=y2
   * (flat-topped triangle).
   */
  if (y2 == y3) {
 80060f0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80060f4:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d102      	bne.n	8006102 <UG_FillTriangle+0x16e>
    last = y2;   /* Include y2 scanline */
 80060fc:	883b      	ldrh	r3, [r7, #0]
 80060fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8006100:	e003      	b.n	800610a <UG_FillTriangle+0x176>
  } else {
    last = y2 - 1; /* Skip it */
 8006102:	883b      	ldrh	r3, [r7, #0]
 8006104:	3b01      	subs	r3, #1
 8006106:	b29b      	uxth	r3, r3
 8006108:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  for (y = y1; y <= last; y++) {
 800610a:	88bb      	ldrh	r3, [r7, #4]
 800610c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800610e:	e041      	b.n	8006194 <UG_FillTriangle+0x200>
    a   = x1 + sa / dy01;
 8006110:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006114:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006118:	fb92 f3f3 	sdiv	r3, r2, r3
 800611c:	b29a      	uxth	r2, r3
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	4413      	add	r3, r2
 8006122:	b29b      	uxth	r3, r3
 8006124:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 8006126:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800612a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800612e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006132:	b29a      	uxth	r2, r3
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	4413      	add	r3, r2
 8006138:	b29b      	uxth	r3, r3
 800613a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 800613c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800613e:	8afb      	ldrh	r3, [r7, #22]
 8006140:	4413      	add	r3, r2
 8006142:	b29b      	uxth	r3, r3
 8006144:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8006146:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006148:	8a7b      	ldrh	r3, [r7, #18]
 800614a:	4413      	add	r3, r2
 800614c:	b29b      	uxth	r3, r3
 800614e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 8006150:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006154:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006158:	429a      	cmp	r2, r3
 800615a:	dd05      	ble.n	8006168 <UG_FillTriangle+0x1d4>
      swap(a, b);
 800615c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800615e:	813b      	strh	r3, [r7, #8]
 8006160:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006162:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006164:	893b      	ldrh	r3, [r7, #8]
 8006166:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 8006168:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800616a:	3301      	adds	r3, #1
 800616c:	b29b      	uxth	r3, r3
 800616e:	b21a      	sxth	r2, r3
 8006170:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8006174:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8006178:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800617c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006180:	9300      	str	r3, [sp, #0]
 8006182:	4623      	mov	r3, r4
 8006184:	f7ff fdec 	bl	8005d60 <UG_DrawLine>
  for (y = y1; y <= last; y++) {
 8006188:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800618c:	b29b      	uxth	r3, r3
 800618e:	3301      	adds	r3, #1
 8006190:	b29b      	uxth	r3, r3
 8006192:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006194:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006198:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800619c:	429a      	cmp	r2, r3
 800619e:	ddb7      	ble.n	8006110 <UG_FillTriangle+0x17c>
  }

  /* For lower part of triangle, find scanline crossings for segments
   * 0-2 and 1-2.  This loop is skipped if y2=y3.
   */
  sa = dx12 * (y - y2);
 80061a0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80061a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	89fb      	ldrh	r3, [r7, #14]
 80061ae:	fb12 f303 	smulbb	r3, r2, r3
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y1);
 80061b6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80061ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	b29a      	uxth	r2, r3
 80061c2:	8a7b      	ldrh	r3, [r7, #18]
 80061c4:	fb12 f303 	smulbb	r3, r2, r3
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y3; y++) {
 80061cc:	e041      	b.n	8006252 <UG_FillTriangle+0x2be>
    a   = x2 + sa / dy12;
 80061ce:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80061d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80061d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80061da:	b29a      	uxth	r2, r3
 80061dc:	887b      	ldrh	r3, [r7, #2]
 80061de:	4413      	add	r3, r2
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 80061e4:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80061e8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80061ec:	fb92 f3f3 	sdiv	r3, r2, r3
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	88fb      	ldrh	r3, [r7, #6]
 80061f4:	4413      	add	r3, r2
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 80061fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061fc:	89fb      	ldrh	r3, [r7, #14]
 80061fe:	4413      	add	r3, r2
 8006200:	b29b      	uxth	r3, r3
 8006202:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8006204:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006206:	8a7b      	ldrh	r3, [r7, #18]
 8006208:	4413      	add	r3, r2
 800620a:	b29b      	uxth	r3, r3
 800620c:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 800620e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006212:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006216:	429a      	cmp	r2, r3
 8006218:	dd05      	ble.n	8006226 <UG_FillTriangle+0x292>
      swap(a, b);
 800621a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800621c:	817b      	strh	r3, [r7, #10]
 800621e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006220:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 8006226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006228:	3301      	adds	r3, #1
 800622a:	b29b      	uxth	r3, r3
 800622c:	b21a      	sxth	r2, r3
 800622e:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8006232:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8006236:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800623a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	4623      	mov	r3, r4
 8006242:	f7ff fd8d 	bl	8005d60 <UG_DrawLine>
  for (; y <= y3; y++) {
 8006246:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800624a:	b29b      	uxth	r3, r3
 800624c:	3301      	adds	r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006252:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006256:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800625a:	429a      	cmp	r2, r3
 800625c:	ddb7      	ble.n	80061ce <UG_FillTriangle+0x23a>
  }
}
 800625e:	3734      	adds	r7, #52	; 0x34
 8006260:	46bd      	mov	sp, r7
 8006262:	bd90      	pop	{r4, r7, pc}

08006264 <UG_PutString>:

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8006264:	b590      	push	{r4, r7, lr}
 8006266:	b087      	sub	sp, #28
 8006268:	af02      	add	r7, sp, #8
 800626a:	4603      	mov	r3, r0
 800626c:	603a      	str	r2, [r7, #0]
 800626e:	80fb      	strh	r3, [r7, #6]
 8006270:	460b      	mov	r3, r1
 8006272:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8006278:	88bb      	ldrh	r3, [r7, #4]
 800627a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 800627c:	4b3c      	ldr	r3, [pc, #240]	; (8006370 <UG_PutString+0x10c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fa4e 	bl	8006724 <_UG_FontSelect>
   while ( *str != 0 )
 8006288:	e054      	b.n	8006334 <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	603a      	str	r2, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 8006294:	7afb      	ldrb	r3, [r7, #11]
 8006296:	2b0a      	cmp	r3, #10
 8006298:	d105      	bne.n	80062a6 <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 800629a:	4b35      	ldr	r3, [pc, #212]	; (8006370 <UG_PutString+0x10c>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	881b      	ldrh	r3, [r3, #0]
 80062a2:	81fb      	strh	r3, [r7, #14]
         continue;
 80062a4:	e046      	b.n	8006334 <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80062a6:	7afb      	ldrb	r3, [r7, #11]
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 f8ea 	bl	8006484 <_UG_GetCharData>
 80062b0:	4603      	mov	r3, r0
 80062b2:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80062b4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80062b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062bc:	d100      	bne.n	80062c0 <UG_PutString+0x5c>
 80062be:	e039      	b.n	8006334 <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80062c0:	4b2b      	ldr	r3, [pc, #172]	; (8006370 <UG_PutString+0x10c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062ca:	4619      	mov	r1, r3
 80062cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80062d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80062d4:	4413      	add	r3, r2
 80062d6:	4299      	cmp	r1, r3
 80062d8:	dc11      	bgt.n	80062fe <UG_PutString+0x9a>
      {
         xp = x;
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80062de:	4b24      	ldr	r3, [pc, #144]	; (8006370 <UG_PutString+0x10c>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	7ddb      	ldrb	r3, [r3, #23]
 80062e4:	b21a      	sxth	r2, r3
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <UG_PutString+0x10c>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	4413      	add	r3, r2
 80062f2:	b21b      	sxth	r3, r3
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	89bb      	ldrh	r3, [r7, #12]
 80062f8:	4413      	add	r3, r2
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80062fe:	4b1c      	ldr	r3, [pc, #112]	; (8006370 <UG_PutString+0x10c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <UG_PutString+0x10c>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800630a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800630e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8006312:	7af8      	ldrb	r0, [r7, #11]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	4623      	mov	r3, r4
 8006318:	f000 fa82 	bl	8006820 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <UG_PutString+0x10c>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8006324:	b29a      	uxth	r2, r3
 8006326:	893b      	ldrh	r3, [r7, #8]
 8006328:	4413      	add	r3, r2
 800632a:	b29a      	uxth	r2, r3
 800632c:	89fb      	ldrh	r3, [r7, #14]
 800632e:	4413      	add	r3, r2
 8006330:	b29b      	uxth	r3, r3
 8006332:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1a6      	bne.n	800628a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 800633c:	4b0c      	ldr	r3, [pc, #48]	; (8006370 <UG_PutString+0x10c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006344:	f003 0302 	and.w	r3, r3, #2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00c      	beq.n	8006366 <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <UG_PutString+0x10c>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006352:	461c      	mov	r4, r3
 8006354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800635c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006360:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006364:	47a0      	blx	r4
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	bd90      	pop	{r4, r7, pc}
 800636e:	bf00      	nop
 8006370:	200004f4 	.word	0x200004f4

08006374 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800637e:	4b05      	ldr	r3, [pc, #20]	; (8006394 <UG_SetForecolor+0x20>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	200004f4 	.word	0x200004f4

08006398 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8006398:	b480      	push	{r7}
 800639a:	b083      	sub	sp, #12
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80063a2:	4b05      	ldr	r3, [pc, #20]	; (80063b8 <UG_SetBackcolor+0x20>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	88fa      	ldrh	r2, [r7, #6]
 80063a8:	86da      	strh	r2, [r3, #54]	; 0x36
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	200004f4 	.word	0x200004f4

080063bc <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	af00      	add	r7, sp, #0
   return gui->device->x_dim;
 80063c0:	4b04      	ldr	r3, [pc, #16]	; (80063d4 <UG_GetXDim+0x18>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	200004f4 	.word	0x200004f4

080063d8 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 80063d8:	b480      	push	{r7}
 80063da:	af00      	add	r7, sp, #0
   return gui->device->y_dim;
 80063dc:	4b04      	ldr	r3, [pc, #16]	; (80063f0 <UG_GetYDim+0x18>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	200004f4 	.word	0x200004f4

080063f4 <UG_FontSetHSpace>:

void UG_FontSetHSpace( UG_U16 s )
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	4603      	mov	r3, r0
 80063fc:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <UG_FontSetHSpace+0x24>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	88fa      	ldrh	r2, [r7, #6]
 8006404:	b252      	sxtb	r2, r2
 8006406:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	200004f4 	.word	0x200004f4

0800641c <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <UG_FontSetVSpace+0x24>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	b252      	sxtb	r2, r2
 800642e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	200004f4 	.word	0x200004f4

08006444 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <UG_FontSetTransparency+0x20>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	79fa      	ldrb	r2, [r7, #7]
 8006454:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	200004f4 	.word	0x200004f4

08006468 <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 800646c:	4b04      	ldr	r3, [pc, #16]	; (8006480 <UG_FontGetTransparency+0x18>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8006474:	4618      	mov	r0, r3
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	200004f4 	.word	0x200004f4

08006484 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8006490:	2300      	movs	r3, #0
 8006492:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8006494:	2300      	movs	r3, #0
 8006496:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8006498:	2300      	movs	r3, #0
 800649a:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 800649c:	2300      	movs	r3, #0
 800649e:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80064a4:	4b9a      	ldr	r3, [pc, #616]	; (8006710 <_UG_GetCharData+0x28c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064aa:	4b9a      	ldr	r3, [pc, #616]	; (8006714 <_UG_GetCharData+0x290>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d10f      	bne.n	80064d2 <_UG_GetCharData+0x4e>
 80064b2:	4b99      	ldr	r3, [pc, #612]	; (8006718 <_UG_GetCharData+0x294>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	79fa      	ldrb	r2, [r7, #7]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d10a      	bne.n	80064d2 <_UG_GetCharData+0x4e>
    if(p){
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80064c2:	4b96      	ldr	r3, [pc, #600]	; (800671c <_UG_GetCharData+0x298>)
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80064ca:	4b95      	ldr	r3, [pc, #596]	; (8006720 <_UG_GetCharData+0x29c>)
 80064cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064d0:	e119      	b.n	8006706 <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80064d2:	4b8f      	ldr	r3, [pc, #572]	; (8006710 <_UG_GetCharData+0x28c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	7d5b      	ldrb	r3, [r3, #21]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d07d      	beq.n	80065d8 <_UG_GetCharData+0x154>
    switch ( encoding )
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	2bfc      	cmp	r3, #252	; 0xfc
 80064e0:	f300 80ce 	bgt.w	8006680 <_UG_GetCharData+0x1fc>
 80064e4:	2bd6      	cmp	r3, #214	; 0xd6
 80064e6:	da09      	bge.n	80064fc <_UG_GetCharData+0x78>
 80064e8:	2bc4      	cmp	r3, #196	; 0xc4
 80064ea:	d06c      	beq.n	80065c6 <_UG_GetCharData+0x142>
 80064ec:	2bc4      	cmp	r3, #196	; 0xc4
 80064ee:	f300 80c7 	bgt.w	8006680 <_UG_GetCharData+0x1fc>
 80064f2:	2bb0      	cmp	r3, #176	; 0xb0
 80064f4:	d06d      	beq.n	80065d2 <_UG_GetCharData+0x14e>
 80064f6:	2bb5      	cmp	r3, #181	; 0xb5
 80064f8:	d068      	beq.n	80065cc <_UG_GetCharData+0x148>
 80064fa:	e06e      	b.n	80065da <_UG_GetCharData+0x156>
 80064fc:	3bd6      	subs	r3, #214	; 0xd6
 80064fe:	2b26      	cmp	r3, #38	; 0x26
 8006500:	f200 80be 	bhi.w	8006680 <_UG_GetCharData+0x1fc>
 8006504:	a201      	add	r2, pc, #4	; (adr r2, 800650c <_UG_GetCharData+0x88>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	080065af 	.word	0x080065af
 8006510:	08006681 	.word	0x08006681
 8006514:	08006681 	.word	0x08006681
 8006518:	08006681 	.word	0x08006681
 800651c:	08006681 	.word	0x08006681
 8006520:	08006681 	.word	0x08006681
 8006524:	080065bb 	.word	0x080065bb
 8006528:	08006681 	.word	0x08006681
 800652c:	08006681 	.word	0x08006681
 8006530:	08006681 	.word	0x08006681
 8006534:	08006681 	.word	0x08006681
 8006538:	08006681 	.word	0x08006681
 800653c:	08006681 	.word	0x08006681
 8006540:	08006681 	.word	0x08006681
 8006544:	080065c1 	.word	0x080065c1
 8006548:	08006681 	.word	0x08006681
 800654c:	08006681 	.word	0x08006681
 8006550:	08006681 	.word	0x08006681
 8006554:	08006681 	.word	0x08006681
 8006558:	08006681 	.word	0x08006681
 800655c:	08006681 	.word	0x08006681
 8006560:	08006681 	.word	0x08006681
 8006564:	08006681 	.word	0x08006681
 8006568:	08006681 	.word	0x08006681
 800656c:	08006681 	.word	0x08006681
 8006570:	08006681 	.word	0x08006681
 8006574:	08006681 	.word	0x08006681
 8006578:	08006681 	.word	0x08006681
 800657c:	08006681 	.word	0x08006681
 8006580:	08006681 	.word	0x08006681
 8006584:	08006681 	.word	0x08006681
 8006588:	08006681 	.word	0x08006681
 800658c:	080065a9 	.word	0x080065a9
 8006590:	08006681 	.word	0x08006681
 8006594:	08006681 	.word	0x08006681
 8006598:	08006681 	.word	0x08006681
 800659c:	08006681 	.word	0x08006681
 80065a0:	08006681 	.word	0x08006681
 80065a4:	080065b5 	.word	0x080065b5
    {
       case 0xF6: encoding = 0x94; break; // ö
 80065a8:	2394      	movs	r3, #148	; 0x94
 80065aa:	71fb      	strb	r3, [r7, #7]
 80065ac:	e015      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 80065ae:	2399      	movs	r3, #153	; 0x99
 80065b0:	71fb      	strb	r3, [r7, #7]
 80065b2:	e012      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 80065b4:	2381      	movs	r3, #129	; 0x81
 80065b6:	71fb      	strb	r3, [r7, #7]
 80065b8:	e00f      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 80065ba:	239a      	movs	r3, #154	; 0x9a
 80065bc:	71fb      	strb	r3, [r7, #7]
 80065be:	e00c      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 80065c0:	2384      	movs	r3, #132	; 0x84
 80065c2:	71fb      	strb	r3, [r7, #7]
 80065c4:	e009      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 80065c6:	238e      	movs	r3, #142	; 0x8e
 80065c8:	71fb      	strb	r3, [r7, #7]
 80065ca:	e006      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 80065cc:	23e6      	movs	r3, #230	; 0xe6
 80065ce:	71fb      	strb	r3, [r7, #7]
 80065d0:	e003      	b.n	80065da <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 80065d2:	23f8      	movs	r3, #248	; 0xf8
 80065d4:	71fb      	strb	r3, [r7, #7]
 80065d6:	e000      	b.n	80065da <_UG_GetCharData+0x156>
    }
  }
 80065d8:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80065da:	e051      	b.n	8006680 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80065dc:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <_UG_GetCharData+0x28c>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	8a7a      	ldrh	r2, [r7, #18]
 80065e4:	0052      	lsls	r2, r2, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7fe fff1 	bl	80055d0 <ptr_8to16>
 80065ee:	4603      	mov	r3, r0
 80065f0:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80065f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	da06      	bge.n	8006608 <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80065fa:	89fb      	ldrh	r3, [r7, #14]
 80065fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006600:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8006602:	2301      	movs	r3, #1
 8006604:	747b      	strb	r3, [r7, #17]
 8006606:	e038      	b.n	800667a <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8006608:	7c7b      	ldrb	r3, [r7, #17]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d025      	beq.n	800665a <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 800660e:	79fb      	ldrb	r3, [r7, #7]
 8006610:	b29b      	uxth	r3, r3
 8006612:	8afa      	ldrh	r2, [r7, #22]
 8006614:	429a      	cmp	r2, r3
 8006616:	d80f      	bhi.n	8006638 <_UG_GetCharData+0x1b4>
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	b29b      	uxth	r3, r3
 800661c:	89fa      	ldrh	r2, [r7, #14]
 800661e:	429a      	cmp	r2, r3
 8006620:	d30a      	bcc.n	8006638 <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	b29a      	uxth	r2, r3
 8006626:	8afb      	ldrh	r3, [r7, #22]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	b29a      	uxth	r2, r3
 800662c:	8abb      	ldrh	r3, [r7, #20]
 800662e:	4413      	add	r3, r2
 8006630:	82bb      	strh	r3, [r7, #20]
        found=1;
 8006632:	2301      	movs	r3, #1
 8006634:	743b      	strb	r3, [r7, #16]
        break;
 8006636:	e02d      	b.n	8006694 <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8006638:	79fb      	ldrb	r3, [r7, #7]
 800663a:	b29b      	uxth	r3, r3
 800663c:	8afa      	ldrh	r2, [r7, #22]
 800663e:	429a      	cmp	r2, r3
 8006640:	d825      	bhi.n	800668e <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8006642:	89fa      	ldrh	r2, [r7, #14]
 8006644:	8afb      	ldrh	r3, [r7, #22]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	b29a      	uxth	r2, r3
 800664a:	8abb      	ldrh	r3, [r7, #20]
 800664c:	4413      	add	r3, r2
 800664e:	b29b      	uxth	r3, r3
 8006650:	3301      	adds	r3, #1
 8006652:	82bb      	strh	r3, [r7, #20]
      range=0;
 8006654:	2300      	movs	r3, #0
 8006656:	747b      	strb	r3, [r7, #17]
 8006658:	e00f      	b.n	800667a <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800665a:	79fb      	ldrb	r3, [r7, #7]
 800665c:	b29b      	uxth	r3, r3
 800665e:	89fa      	ldrh	r2, [r7, #14]
 8006660:	429a      	cmp	r2, r3
 8006662:	d102      	bne.n	800666a <_UG_GetCharData+0x1e6>
      {
        found=1;
 8006664:	2301      	movs	r3, #1
 8006666:	743b      	strb	r3, [r7, #16]
        break;
 8006668:	e014      	b.n	8006694 <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	b29b      	uxth	r3, r3
 800666e:	89fa      	ldrh	r2, [r7, #14]
 8006670:	429a      	cmp	r2, r3
 8006672:	d80e      	bhi.n	8006692 <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8006674:	8abb      	ldrh	r3, [r7, #20]
 8006676:	3301      	adds	r3, #1
 8006678:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800667a:	8a7b      	ldrh	r3, [r7, #18]
 800667c:	3301      	adds	r3, #1
 800667e:	827b      	strh	r3, [r7, #18]
 8006680:	4b23      	ldr	r3, [pc, #140]	; (8006710 <_UG_GetCharData+0x28c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	8b9b      	ldrh	r3, [r3, #28]
 8006686:	8a7a      	ldrh	r2, [r7, #18]
 8006688:	429a      	cmp	r2, r3
 800668a:	d3a7      	bcc.n	80065dc <_UG_GetCharData+0x158>
 800668c:	e002      	b.n	8006694 <_UG_GetCharData+0x210>
        break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <_UG_GetCharData+0x210>
        break;
 8006692:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8006694:	7c3b      	ldrb	r3, [r7, #16]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d033      	beq.n	8006702 <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800669a:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <_UG_GetCharData+0x28c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	4a1c      	ldr	r2, [pc, #112]	; (8006714 <_UG_GetCharData+0x290>)
 80066a2:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80066a4:	4a1c      	ldr	r2, [pc, #112]	; (8006718 <_UG_GetCharData+0x294>)
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <_UG_GetCharData+0x28c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b0:	8aba      	ldrh	r2, [r7, #20]
 80066b2:	4917      	ldr	r1, [pc, #92]	; (8006710 <_UG_GetCharData+0x28c>)
 80066b4:	6809      	ldr	r1, [r1, #0]
 80066b6:	8b09      	ldrh	r1, [r1, #24]
 80066b8:	fb01 f202 	mul.w	r2, r1, r2
 80066bc:	4413      	add	r3, r2
 80066be:	4a17      	ldr	r2, [pc, #92]	; (800671c <_UG_GetCharData+0x298>)
 80066c0:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80066c2:	4b13      	ldr	r3, [pc, #76]	; (8006710 <_UG_GetCharData+0x28c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d009      	beq.n	80066e0 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <_UG_GetCharData+0x28c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6a1a      	ldr	r2, [r3, #32]
 80066d2:	8abb      	ldrh	r3, [r7, #20]
 80066d4:	4413      	add	r3, r2
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	b21a      	sxth	r2, r3
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <_UG_GetCharData+0x29c>)
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e005      	b.n	80066ec <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <_UG_GetCharData+0x28c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	7d9b      	ldrb	r3, [r3, #22]
 80066e6:	b21a      	sxth	r2, r3
 80066e8:	4b0d      	ldr	r3, [pc, #52]	; (8006720 <_UG_GetCharData+0x29c>)
 80066ea:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <_UG_GetCharData+0x298>)
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <_UG_GetCharData+0x29c>)
 80066fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006700:	e001      	b.n	8006706 <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 8006702:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006706:	4618      	mov	r0, r3
 8006708:	3718      	adds	r7, #24
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	200004f4 	.word	0x200004f4
 8006714:	200004f8 	.word	0x200004f8
 8006718:	200004fc 	.word	0x200004fc
 800671c:	20000500 	.word	0x20000500
 8006720:	20000504 	.word	0x20000504

08006724 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8006724:	b590      	push	{r4, r7, lr}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 800672c:	4b3b      	ldr	r3, [pc, #236]	; (800681c <_UG_FontSelect+0xf8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d06c      	beq.n	8006812 <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8006738:	4b38      	ldr	r3, [pc, #224]	; (800681c <_UG_FontSelect+0xf8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	781a      	ldrb	r2, [r3, #0]
 8006744:	4b35      	ldr	r3, [pc, #212]	; (800681c <_UG_FontSelect+0xf8>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	607a      	str	r2, [r7, #4]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b25b      	sxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	da01      	bge.n	8006762 <_UG_FontSelect+0x3e>
 800675e:	2201      	movs	r2, #1
 8006760:	e000      	b.n	8006764 <_UG_FontSelect+0x40>
 8006762:	2200      	movs	r2, #0
 8006764:	4b2d      	ldr	r3, [pc, #180]	; (800681c <_UG_FontSelect+0xf8>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	4a2a      	ldr	r2, [pc, #168]	; (800681c <_UG_FontSelect+0xf8>)
 8006774:	6812      	ldr	r2, [r2, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	607a      	str	r2, [r7, #4]
 8006780:	4a26      	ldr	r2, [pc, #152]	; (800681c <_UG_FontSelect+0xf8>)
 8006782:	6812      	ldr	r2, [r2, #0]
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8006788:	4b24      	ldr	r3, [pc, #144]	; (800681c <_UG_FontSelect+0xf8>)
 800678a:	681c      	ldr	r4, [r3, #0]
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f7fe ff1f 	bl	80055d0 <ptr_8to16>
 8006792:	4603      	mov	r3, r0
 8006794:	8363      	strh	r3, [r4, #26]
  font+=2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3302      	adds	r3, #2
 800679a:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 800679c:	4b1f      	ldr	r3, [pc, #124]	; (800681c <_UG_FontSelect+0xf8>)
 800679e:	681c      	ldr	r4, [r3, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7fe ff15 	bl	80055d0 <ptr_8to16>
 80067a6:	4603      	mov	r3, r0
 80067a8:	83a3      	strh	r3, [r4, #28]
  font+=2;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3302      	adds	r3, #2
 80067ae:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80067b0:	4b1a      	ldr	r3, [pc, #104]	; (800681c <_UG_FontSelect+0xf8>)
 80067b2:	681c      	ldr	r4, [r3, #0]
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7fe ff0b 	bl	80055d0 <ptr_8to16>
 80067ba:	4603      	mov	r3, r0
 80067bc:	8323      	strh	r3, [r4, #24]
  font+=2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	3302      	adds	r3, #2
 80067c2:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	1c5a      	adds	r2, r3, #1
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00b      	beq.n	80067e8 <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80067d0:	4b12      	ldr	r3, [pc, #72]	; (800681c <_UG_FontSelect+0xf8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80067d8:	4b10      	ldr	r3, [pc, #64]	; (800681c <_UG_FontSelect+0xf8>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	8b5b      	ldrh	r3, [r3, #26]
 80067de:	461a      	mov	r2, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4413      	add	r3, r2
 80067e4:	607b      	str	r3, [r7, #4]
 80067e6:	e003      	b.n	80067f0 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80067e8:	4b0c      	ldr	r3, [pc, #48]	; (800681c <_UG_FontSelect+0xf8>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2200      	movs	r2, #0
 80067ee:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <_UG_FontSelect+0xf8>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80067f8:	4b08      	ldr	r3, [pc, #32]	; (800681c <_UG_FontSelect+0xf8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	8b9b      	ldrh	r3, [r3, #28]
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	461a      	mov	r2, r3
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4413      	add	r3, r2
 8006806:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8006808:	4b04      	ldr	r3, [pc, #16]	; (800681c <_UG_FontSelect+0xf8>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	629a      	str	r2, [r3, #40]	; 0x28
 8006810:	e000      	b.n	8006814 <_UG_FontSelect+0xf0>
    return;
 8006812:	bf00      	nop
}
 8006814:	370c      	adds	r7, #12
 8006816:	46bd      	mov	sp, r7
 8006818:	bd90      	pop	{r4, r7, pc}
 800681a:	bf00      	nop
 800681c:	200004f4 	.word	0x200004f4

08006820 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8006820:	b5b0      	push	{r4, r5, r7, lr}
 8006822:	b08c      	sub	sp, #48	; 0x30
 8006824:	af00      	add	r7, sp, #0
 8006826:	4604      	mov	r4, r0
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4623      	mov	r3, r4
 8006830:	71fb      	strb	r3, [r7, #7]
 8006832:	4603      	mov	r3, r0
 8006834:	80bb      	strh	r3, [r7, #4]
 8006836:	460b      	mov	r3, r1
 8006838:	807b      	strh	r3, [r7, #2]
 800683a:	4613      	mov	r3, r2
 800683c:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 800683e:	2300      	movs	r3, #0
 8006840:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006842:	2300      	movs	r3, #0
 8006844:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006846:	2300      	movs	r3, #0
 8006848:	847b      	strh	r3, [r7, #34]	; 0x22
 800684a:	2300      	movs	r3, #0
 800684c:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 800684e:	4b8a      	ldr	r3, [pc, #552]	; (8006a78 <_UG_PutChar+0x258>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006856:	75fb      	strb	r3, [r7, #23]
 8006858:	4b87      	ldr	r3, [pc, #540]	; (8006a78 <_UG_PutChar+0x258>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8006866:	2300      	movs	r3, #0
 8006868:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800686a:	f107 0208 	add.w	r2, r7, #8
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	4611      	mov	r1, r2
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fe06 	bl	8006484 <_UG_GetCharData>
 8006878:	4603      	mov	r3, r0
 800687a:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 800687c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006884:	d102      	bne.n	800688c <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8006886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800688a:	e21e      	b.n	8006cca <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 800688c:	4b7a      	ldr	r3, [pc, #488]	; (8006a78 <_UG_PutChar+0x258>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	7d9b      	ldrb	r3, [r3, #22]
 8006892:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8006894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <_UG_PutChar+0x7e>
     return 0;
 800689a:	2300      	movs	r3, #0
 800689c:	e215      	b.n	8006cca <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 800689e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068a0:	08db      	lsrs	r3, r3, #3
 80068a2:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80068a4:	4b74      	ldr	r3, [pc, #464]	; (8006a78 <_UG_PutChar+0x258>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	7d9b      	ldrb	r3, [r3, #22]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <_UG_PutChar+0x9a>
 80068b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068b6:	3301      	adds	r3, #1
 80068b8:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80068ba:	7dbb      	ldrb	r3, [r7, #22]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d01c      	beq.n	80068fa <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80068c0:	4b6d      	ldr	r3, [pc, #436]	; (8006a78 <_UG_PutChar+0x258>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c6:	461d      	mov	r5, r3
 80068c8:	88ba      	ldrh	r2, [r7, #4]
 80068ca:	8abb      	ldrh	r3, [r7, #20]
 80068cc:	4413      	add	r3, r2
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29b      	uxth	r3, r3
 80068d4:	b21c      	sxth	r4, r3
 80068d6:	4b68      	ldr	r3, [pc, #416]	; (8006a78 <_UG_PutChar+0x258>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	7ddb      	ldrb	r3, [r3, #23]
 80068dc:	b29a      	uxth	r2, r3
 80068de:	887b      	ldrh	r3, [r7, #2]
 80068e0:	4413      	add	r3, r2
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	b21b      	sxth	r3, r3
 80068ea:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80068ee:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80068f2:	4622      	mov	r2, r4
 80068f4:	47a8      	blx	r5
 80068f6:	4603      	mov	r3, r0
 80068f8:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80068fa:	4b5f      	ldr	r3, [pc, #380]	; (8006a78 <_UG_PutChar+0x258>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	7d1b      	ldrb	r3, [r3, #20]
 8006900:	2b00      	cmp	r3, #0
 8006902:	f040 8171 	bne.w	8006be8 <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006906:	2300      	movs	r3, #0
 8006908:	853b      	strh	r3, [r7, #40]	; 0x28
 800690a:	e0ec      	b.n	8006ae6 <_UG_PutChar+0x2c6>
     {
       c=0;
 800690c:	2300      	movs	r3, #0
 800690e:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8006910:	2300      	movs	r3, #0
 8006912:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006914:	e0df      	b.n	8006ad6 <_UG_PutChar+0x2b6>
       {
         b = *data++;
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	60ba      	str	r2, [r7, #8]
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006920:	2300      	movs	r3, #0
 8006922:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006924:	e0ca      	b.n	8006abc <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8006926:	7f7b      	ldrb	r3, [r7, #29]
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d033      	beq.n	8006998 <_UG_PutChar+0x178>
           {
             if(driver)
 8006930:	7dbb      	ldrb	r3, [r7, #22]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d01f      	beq.n	8006976 <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8006936:	8c3b      	ldrh	r3, [r7, #32]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <_UG_PutChar+0x132>
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d107      	bne.n	8006952 <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8006942:	8c3a      	ldrh	r2, [r7, #32]
 8006944:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	4610      	mov	r0, r2
 800694c:	4798      	blx	r3
                 bpixels=0;
 800694e:	2300      	movs	r3, #0
 8006950:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8006952:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <_UG_PutChar+0x14e>
 8006958:	7dfb      	ldrb	r3, [r7, #23]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d007      	beq.n	800696e <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 800695e:	88ba      	ldrh	r2, [r7, #4]
 8006960:	8bfb      	ldrh	r3, [r7, #30]
 8006962:	4413      	add	r3, r2
 8006964:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8006966:	887a      	ldrh	r2, [r7, #2]
 8006968:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800696a:	4413      	add	r3, r2
 800696c:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 800696e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006970:	3301      	adds	r3, #1
 8006972:	847b      	strh	r3, [r7, #34]	; 0x22
 8006974:	e096      	b.n	8006aa4 <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8006976:	4b40      	ldr	r3, [pc, #256]	; (8006a78 <_UG_PutChar+0x258>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	88b9      	ldrh	r1, [r7, #4]
 8006980:	8bfa      	ldrh	r2, [r7, #30]
 8006982:	440a      	add	r2, r1
 8006984:	b292      	uxth	r2, r2
 8006986:	b210      	sxth	r0, r2
 8006988:	8879      	ldrh	r1, [r7, #2]
 800698a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800698c:	440a      	add	r2, r1
 800698e:	b292      	uxth	r2, r2
 8006990:	b211      	sxth	r1, r2
 8006992:	883a      	ldrh	r2, [r7, #0]
 8006994:	4798      	blx	r3
 8006996:	e085      	b.n	8006aa4 <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8006998:	7dbb      	ldrb	r3, [r7, #22]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d06e      	beq.n	8006a7c <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 800699e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d064      	beq.n	8006a6e <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80069a4:	7dfb      	ldrb	r3, [r7, #23]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d15e      	bne.n	8006a68 <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 80069aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069ac:	8839      	ldrh	r1, [r7, #0]
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	4610      	mov	r0, r2
 80069b2:	4798      	blx	r3
                   fpixels=0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	847b      	strh	r3, [r7, #34]	; 0x22
 80069b8:	e059      	b.n	8006a6e <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80069ba:	88ba      	ldrh	r2, [r7, #4]
 80069bc:	8abb      	ldrh	r3, [r7, #20]
 80069be:	4413      	add	r3, r2
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80069c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	d003      	beq.n	80069da <_UG_PutChar+0x1ba>
 80069d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d224      	bcs.n	8006a24 <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80069da:	4b27      	ldr	r3, [pc, #156]	; (8006a78 <_UG_PutChar+0x258>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	461d      	mov	r5, r3
 80069e2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80069e6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80069ea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069ec:	89fb      	ldrh	r3, [r7, #14]
 80069ee:	4413      	add	r3, r2
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	b21c      	sxth	r4, r3
 80069f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80069fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8006a02:	b29a      	uxth	r2, r3
 8006a04:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a06:	4413      	add	r3, r2
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	b21b      	sxth	r3, r3
 8006a0c:	4622      	mov	r2, r4
 8006a0e:	47a8      	blx	r5
 8006a10:	4603      	mov	r3, r0
 8006a12:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006a14:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a16:	8839      	ldrh	r1, [r7, #0]
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	4798      	blx	r3
                       fpixels=0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a22:	e021      	b.n	8006a68 <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006a24:	4b14      	ldr	r3, [pc, #80]	; (8006a78 <_UG_PutChar+0x258>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a2a:	461c      	mov	r4, r3
 8006a2c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006a30:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006a34:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a36:	89fb      	ldrh	r3, [r7, #14]
 8006a38:	4413      	add	r3, r2
 8006a3a:	b29b      	uxth	r3, r3
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b29b      	uxth	r3, r3
 8006a40:	b21a      	sxth	r2, r3
 8006a42:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006a46:	47a0      	blx	r4
 8006a48:	4603      	mov	r3, r0
 8006a4a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006a4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a4e:	8839      	ldrh	r1, [r7, #0]
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	4610      	mov	r0, r2
 8006a54:	4798      	blx	r3
                       fpixels -= width;
 8006a56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a58:	89fb      	ldrh	r3, [r7, #14]
 8006a5a:	1ad3      	subs	r3, r2, r3
 8006a5c:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8006a5e:	88bb      	ldrh	r3, [r7, #4]
 8006a60:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8006a62:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a64:	3301      	adds	r3, #1
 8006a66:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8006a68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1a5      	bne.n	80069ba <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 8006a6e:	8c3b      	ldrh	r3, [r7, #32]
 8006a70:	3301      	adds	r3, #1
 8006a72:	843b      	strh	r3, [r7, #32]
 8006a74:	e016      	b.n	8006aa4 <_UG_PutChar+0x284>
 8006a76:	bf00      	nop
 8006a78:	200004f4 	.word	0x200004f4
             }
             else if(!trans)                           // Not accelerated output
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d110      	bne.n	8006aa4 <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 8006a82:	4b94      	ldr	r3, [pc, #592]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	88b9      	ldrh	r1, [r7, #4]
 8006a8c:	8bfa      	ldrh	r2, [r7, #30]
 8006a8e:	440a      	add	r2, r1
 8006a90:	b292      	uxth	r2, r2
 8006a92:	b210      	sxth	r0, r2
 8006a94:	8879      	ldrh	r1, [r7, #2]
 8006a96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a98:	440a      	add	r2, r1
 8006a9a:	b292      	uxth	r2, r2
 8006a9c:	b211      	sxth	r1, r2
 8006a9e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006aa2:	4798      	blx	r3
             }
           }
           b >>= 1;
 8006aa4:	7f7b      	ldrb	r3, [r7, #29]
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	777b      	strb	r3, [r7, #29]
           c++;
 8006aaa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006ab6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ab8:	3301      	adds	r3, #1
 8006aba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006abc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006abe:	2b07      	cmp	r3, #7
 8006ac0:	d806      	bhi.n	8006ad0 <_UG_PutChar+0x2b0>
 8006ac2:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006ac6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	f6ff af2b 	blt.w	8006926 <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 8006ad0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ad6:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ada:	429a      	cmp	r2, r3
 8006adc:	f4ff af1b 	bcc.w	8006916 <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006ae0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ae6:	4b7b      	ldr	r3, [pc, #492]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	7ddb      	ldrb	r3, [r3, #23]
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006af0:	429a      	cmp	r2, r3
 8006af2:	f4ff af0b 	bcc.w	800690c <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006af6:	7dbb      	ldrb	r3, [r7, #22]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 80e4 	beq.w	8006cc6 <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 8006afe:	8c3b      	ldrh	r3, [r7, #32]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d009      	beq.n	8006b18 <_UG_PutChar+0x2f8>
 8006b04:	7dfb      	ldrb	r3, [r7, #23]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d106      	bne.n	8006b18 <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 8006b0a:	8c3a      	ldrh	r2, [r7, #32]
 8006b0c:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	4610      	mov	r0, r2
 8006b14:	4798      	blx	r3
 8006b16:	e0d6      	b.n	8006cc6 <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 8006b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 80d3 	beq.w	8006cc6 <_UG_PutChar+0x4a6>
       {
         if(!trans)
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d15c      	bne.n	8006be0 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 8006b26:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b28:	8839      	ldrh	r1, [r7, #0]
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	4610      	mov	r0, r2
 8006b2e:	4798      	blx	r3
 8006b30:	e0c9      	b.n	8006cc6 <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006b32:	88ba      	ldrh	r2, [r7, #4]
 8006b34:	8abb      	ldrh	r3, [r7, #20]
 8006b36:	4413      	add	r3, r2
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8006b40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d003      	beq.n	8006b52 <_UG_PutChar+0x332>
 8006b4a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b4c:	8a3b      	ldrh	r3, [r7, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d224      	bcs.n	8006b9c <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006b52:	4b60      	ldr	r3, [pc, #384]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b58:	461d      	mov	r5, r3
 8006b5a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006b5e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006b62:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b64:	8a3b      	ldrh	r3, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	b21c      	sxth	r4, r3
 8006b70:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b7e:	4413      	add	r3, r2
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	b21b      	sxth	r3, r3
 8006b84:	4622      	mov	r2, r4
 8006b86:	47a8      	blx	r5
 8006b88:	4603      	mov	r3, r0
 8006b8a:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006b8c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b8e:	8839      	ldrh	r1, [r7, #0]
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	4610      	mov	r0, r2
 8006b94:	4798      	blx	r3
               fpixels=0;
 8006b96:	2300      	movs	r3, #0
 8006b98:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b9a:	e021      	b.n	8006be0 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006b9c:	4b4d      	ldr	r3, [pc, #308]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ba2:	461c      	mov	r4, r3
 8006ba4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006ba8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006bac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006bae:	8a3b      	ldrh	r3, [r7, #16]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	3b01      	subs	r3, #1
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	b21a      	sxth	r2, r3
 8006bba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006bbe:	47a0      	blx	r4
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006bc4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006bc6:	8839      	ldrh	r1, [r7, #0]
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	4610      	mov	r0, r2
 8006bcc:	4798      	blx	r3
               fpixels -= width;
 8006bce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006bd0:	8a3b      	ldrh	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8006bd6:	88bb      	ldrh	r3, [r7, #4]
 8006bd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8006bda:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006bdc:	3301      	adds	r3, #1
 8006bde:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8006be0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1a5      	bne.n	8006b32 <_UG_PutChar+0x312>
 8006be6:	e06e      	b.n	8006cc6 <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006be8:	4b3a      	ldr	r3, [pc, #232]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	7d1b      	ldrb	r3, [r3, #20]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d169      	bne.n	8006cc6 <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	853b      	strh	r3, [r7, #40]	; 0x28
 8006bf6:	e05f      	b.n	8006cb8 <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006bfc:	e04a      	b.n	8006c94 <_UG_PutChar+0x474>
       {
         b = *data++;
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	1c5a      	adds	r2, r3, #1
 8006c02:	60ba      	str	r2, [r7, #8]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006c08:	883b      	ldrh	r3, [r7, #0]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	7f7a      	ldrb	r2, [r7, #29]
 8006c0e:	fb03 f202 	mul.w	r2, r3, r2
 8006c12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	7f79      	ldrb	r1, [r7, #29]
 8006c1a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006c1e:	fb01 f303 	mul.w	r3, r1, r3
 8006c22:	4413      	add	r3, r2
 8006c24:	121b      	asrs	r3, r3, #8
 8006c26:	b21b      	sxth	r3, r3
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8006c2c:	883b      	ldrh	r3, [r7, #0]
 8006c2e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c32:	7f79      	ldrb	r1, [r7, #29]
 8006c34:	fb03 f101 	mul.w	r1, r3, r1
 8006c38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006c3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006c40:	7f78      	ldrb	r0, [r7, #29]
 8006c42:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006c46:	fb00 f303 	mul.w	r3, r0, r3
 8006c4a:	440b      	add	r3, r1
 8006c4c:	121b      	asrs	r3, r3, #8
 8006c4e:	b21b      	sxth	r3, r3
 8006c50:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006c54:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006c56:	4313      	orrs	r3, r2
 8006c58:	b21b      	sxth	r3, r3
 8006c5a:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006c5c:	7dbb      	ldrb	r3, [r7, #22]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006c62:	8a7a      	ldrh	r2, [r7, #18]
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	4611      	mov	r1, r2
 8006c68:	2001      	movs	r0, #1
 8006c6a:	4798      	blx	r3
 8006c6c:	e00f      	b.n	8006c8e <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006c6e:	4b19      	ldr	r3, [pc, #100]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	88b9      	ldrh	r1, [r7, #4]
 8006c78:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006c7a:	440a      	add	r2, r1
 8006c7c:	b292      	uxth	r2, r2
 8006c7e:	b210      	sxth	r0, r2
 8006c80:	8879      	ldrh	r1, [r7, #2]
 8006c82:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c84:	440a      	add	r2, r1
 8006c86:	b292      	uxth	r2, r2
 8006c88:	b211      	sxth	r1, r2
 8006c8a:	8a7a      	ldrh	r2, [r7, #18]
 8006c8c:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006c8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c90:	3301      	adds	r3, #1
 8006c92:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c94:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006c96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	dbaf      	blt.n	8006bfe <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a0c      	ldr	r2, [pc, #48]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006ca2:	6812      	ldr	r2, [r2, #0]
 8006ca4:	7d92      	ldrb	r2, [r2, #22]
 8006ca6:	4611      	mov	r1, r2
 8006ca8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006cac:	1a8a      	subs	r2, r1, r2
 8006cae:	4413      	add	r3, r2
 8006cb0:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006cb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	853b      	strh	r3, [r7, #40]	; 0x28
 8006cb8:	4b06      	ldr	r3, [pc, #24]	; (8006cd4 <_UG_PutChar+0x4b4>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	7ddb      	ldrb	r3, [r3, #23]
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d398      	bcc.n	8006bf8 <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8006cc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	3730      	adds	r7, #48	; 0x30
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bdb0      	pop	{r4, r5, r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200004f4 	.word	0x200004f4

08006cd8 <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b086      	sub	sp, #24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	781b      	ldrb	r3, [r3, #0]
 8006ce4:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	82fb      	strh	r3, [r7, #22]
 8006cea:	e01f      	b.n	8006d2c <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685a      	ldr	r2, [r3, #4]
 8006cf0:	8afb      	ldrh	r3, [r7, #22]
 8006cf2:	015b      	lsls	r3, r3, #5
 8006cf4:	4413      	add	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10e      	bne.n	8006d26 <_UG_UpdateObjects+0x4e>
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	f003 0302 	and.w	r3, r3, #2
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d009      	beq.n	8006d26 <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d004      	beq.n	8006d26 <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	6939      	ldr	r1, [r7, #16]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006d26:	8afb      	ldrh	r3, [r7, #22]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	82fb      	strh	r3, [r7, #22]
 8006d2c:	8afa      	ldrh	r2, [r7, #22]
 8006d2e:	8abb      	ldrh	r3, [r7, #20]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d3db      	bcc.n	8006cec <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006d48:	4b22      	ldr	r3, [pc, #136]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006d4e:	4b21      	ldr	r3, [pc, #132]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006d50:	2202      	movs	r2, #2
 8006d52:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	781b      	ldrb	r3, [r3, #0]
 8006d58:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	82fb      	strh	r3, [r7, #22]
 8006d5e:	e02f      	b.n	8006dc0 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	8afb      	ldrh	r3, [r7, #22]
 8006d66:	015b      	lsls	r3, r3, #5
 8006d68:	4413      	add	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d11e      	bne.n	8006dba <_UG_HandleEvents+0x7a>
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d019      	beq.n	8006dba <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	7e9b      	ldrb	r3, [r3, #26]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d015      	beq.n	8006dba <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8006d8e:	4a11      	ldr	r2, [pc, #68]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	7e1a      	ldrb	r2, [r3, #24]
 8006d98:	4b0e      	ldr	r3, [pc, #56]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006d9a:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	7e5a      	ldrb	r2, [r3, #25]
 8006da0:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006da2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	7e9a      	ldrb	r2, [r3, #26]
 8006da8:	4b0a      	ldr	r3, [pc, #40]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006daa:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006db0:	4808      	ldr	r0, [pc, #32]	; (8006dd4 <_UG_HandleEvents+0x94>)
 8006db2:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2200      	movs	r2, #0
 8006db8:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006dba:	8afb      	ldrh	r3, [r7, #22]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	82fb      	strh	r3, [r7, #22]
 8006dc0:	8afa      	ldrh	r2, [r7, #22]
 8006dc2:	8abb      	ldrh	r3, [r7, #20]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d3cb      	bcc.n	8006d60 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000508 	.word	0x20000508

08006dd8 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006dd8:	b590      	push	{r4, r7, lr}
 8006dda:	b08f      	sub	sp, #60	; 0x3c
 8006ddc:	af02      	add	r7, sp, #8
 8006dde:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 8102 	beq.w	8006fee <_UG_PutText+0x216>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f000 80fd 	beq.w	8006fee <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	89db      	ldrh	r3, [r3, #14]
 8006df8:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	895b      	ldrh	r3, [r3, #10]
 8006dfe:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	3302      	adds	r3, #2
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 8006e0a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006e0e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006e12:	1ad2      	subs	r2, r2, r3
 8006e14:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	f2c0 80ea 	blt.w	8006ff2 <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	891b      	ldrh	r3, [r3, #8]
 8006e22:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	899b      	ldrh	r3, [r3, #12]
 8006e28:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7d1b      	ldrb	r3, [r3, #20]
 8006e2e:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	8adb      	ldrh	r3, [r3, #22]
 8006e34:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8b1b      	ldrh	r3, [r3, #24]
 8006e3a:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	623b      	str	r3, [r7, #32]
   char* c = str;
 8006e42:	6a3b      	ldr	r3, [r7, #32]
 8006e44:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7ff fc6a 	bl	8006724 <_UG_FontSelect>

   rc=1;
 8006e50:	2301      	movs	r3, #1
 8006e52:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	61fa      	str	r2, [r7, #28]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 8006e62:	7afb      	ldrb	r3, [r7, #11]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d006      	beq.n	8006e76 <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8006e68:	7afb      	ldrb	r3, [r7, #11]
 8006e6a:	2b0a      	cmp	r3, #10
 8006e6c:	d1f4      	bne.n	8006e58 <_UG_PutText+0x80>
 8006e6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e70:	3301      	adds	r3, #1
 8006e72:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8006e74:	e7f0      	b.n	8006e58 <_UG_PutText+0x80>
     if(!chr) break;
 8006e76:	bf00      	nop
   }

   yp = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006e7c:	7c7b      	ldrb	r3, [r7, #17]
 8006e7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d01f      	beq.n	8006ec6 <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8006e86:	8b7a      	ldrh	r2, [r7, #26]
 8006e88:	8b3b      	ldrh	r3, [r7, #24]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	b29b      	uxth	r3, r3
 8006e8e:	3301      	adds	r3, #1
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8006e94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e96:	8afb      	ldrh	r3, [r7, #22]
 8006e98:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006e9a:	fb11 f303 	smulbb	r3, r1, r3
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8006ea6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006ea8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b299      	uxth	r1, r3
 8006eae:	89bb      	ldrh	r3, [r7, #12]
 8006eb0:	fb11 f303 	smulbb	r3, r1, r3
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8006ebc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f2c0 8098 	blt.w	8006ff6 <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006ec6:	7c7b      	ldrb	r3, [r7, #17]
 8006ec8:	f003 0310 	and.w	r3, r3, #16
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d003      	beq.n	8006ed8 <_UG_PutText+0x100>
 8006ed0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006ed4:	105b      	asrs	r3, r3, #1
 8006ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8006ed8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006eda:	8b3b      	ldrh	r3, [r7, #24]
 8006edc:	4413      	add	r3, r2
 8006ede:	b29b      	uxth	r3, r3
 8006ee0:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	61fa      	str	r2, [r7, #28]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 8006ef8:	7afb      	ldrb	r3, [r7, #11]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d01b      	beq.n	8006f36 <_UG_PutText+0x15e>
 8006efe:	7afb      	ldrb	r3, [r7, #11]
 8006f00:	2b0a      	cmp	r3, #10
 8006f02:	d018      	beq.n	8006f36 <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	2100      	movs	r1, #0
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fabb 	bl	8006484 <_UG_GetCharData>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 8006f12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f1a:	d00a      	beq.n	8006f32 <_UG_PutText+0x15a>
         sl++;
 8006f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006f1e:	3301      	adds	r3, #1
 8006f20:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8006f22:	893a      	ldrh	r2, [r7, #8]
 8006f24:	89fb      	ldrh	r3, [r7, #14]
 8006f26:	4413      	add	r3, r2
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f2c:	4413      	add	r3, r2
 8006f2e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006f30:	e7dd      	b.n	8006eee <_UG_PutText+0x116>
         if (w == -1){continue;}
 8006f32:	bf00      	nop
        chr = *c++;
 8006f34:	e7db      	b.n	8006eee <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8006f36:	89fb      	ldrh	r3, [r7, #14]
 8006f38:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8006f3e:	8a7a      	ldrh	r2, [r7, #18]
 8006f40:	8abb      	ldrh	r3, [r7, #20]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	3301      	adds	r3, #1
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8006f4c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8006f56:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db4d      	blt.n	8006ffa <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006f5e:	7c7b      	ldrb	r3, [r7, #17]
 8006f60:	f003 0301 	and.w	r3, r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <_UG_PutText+0x196>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f6c:	e008      	b.n	8006f80 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006f6e:	7c7b      	ldrb	r3, [r7, #17]
 8006f70:	f003 0302 	and.w	r3, r3, #2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <_UG_PutText+0x1a8>
 8006f78:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006f7c:	105b      	asrs	r3, r3, #1
 8006f7e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8006f80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f82:	8abb      	ldrh	r3, [r7, #20]
 8006f84:	4413      	add	r3, r2
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 8006f8a:	6a3b      	ldr	r3, [r7, #32]
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	623a      	str	r2, [r7, #32]
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8006f94:	7afb      	ldrb	r3, [r7, #11]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d031      	beq.n	8006ffe <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	2b0a      	cmp	r3, #10
 8006f9e:	d01c      	beq.n	8006fda <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	8a1c      	ldrh	r4, [r3, #16]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	8a5b      	ldrh	r3, [r3, #18]
 8006fa8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006fac:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8006fb0:	7af8      	ldrb	r0, [r7, #11]
 8006fb2:	9300      	str	r3, [sp, #0]
 8006fb4:	4623      	mov	r3, r4
 8006fb6:	f7ff fc33 	bl	8006820 <_UG_PutChar>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 8006fbe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fc6:	d0e0      	beq.n	8006f8a <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8006fc8:	893a      	ldrh	r2, [r7, #8]
 8006fca:	89fb      	ldrh	r3, [r7, #14]
 8006fcc:	4413      	add	r3, r2
 8006fce:	b29a      	uxth	r2, r3
 8006fd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006fd2:	4413      	add	r3, r2
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 8006fd8:	e7d7      	b.n	8006f8a <_UG_PutText+0x1b2>
           break;
 8006fda:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006fdc:	8afa      	ldrh	r2, [r7, #22]
 8006fde:	89bb      	ldrh	r3, [r7, #12]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	b29a      	uxth	r2, r3
 8006fe4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fe6:	4413      	add	r3, r2
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8006fec:	e779      	b.n	8006ee2 <_UG_PutText+0x10a>
     return;
 8006fee:	bf00      	nop
 8006ff0:	e006      	b.n	8007000 <_UG_PutText+0x228>
     return;
 8006ff2:	bf00      	nop
 8006ff4:	e004      	b.n	8007000 <_UG_PutText+0x228>
        return;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <_UG_PutText+0x228>
           return;
 8006ffe:	bf00      	nop
   }
}
 8007000:	3734      	adds	r7, #52	; 0x34
 8007002:	46bd      	mov	sp, r7
 8007004:	bd90      	pop	{r4, r7, pc}

08007006 <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 8007006:	b480      	push	{r7}
 8007008:	b085      	sub	sp, #20
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
 800700e:	460b      	mov	r3, r1
 8007010:	70fb      	strb	r3, [r7, #3]
 8007012:	4613      	mov	r3, r2
 8007014:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 800701c:	2300      	movs	r3, #0
 800701e:	73fb      	strb	r3, [r7, #15]
 8007020:	e020      	b.n	8007064 <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	015b      	lsls	r3, r3, #5
 800702a:	4413      	add	r3, r2
 800702c:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d111      	bne.n	800705e <_UG_SearchObject+0x58>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	f003 0302 	and.w	r3, r3, #2
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	7e1b      	ldrb	r3, [r3, #24]
 800704a:	78fa      	ldrb	r2, [r7, #3]
 800704c:	429a      	cmp	r2, r3
 800704e:	d106      	bne.n	800705e <_UG_SearchObject+0x58>
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	7e5b      	ldrb	r3, [r3, #25]
 8007054:	78ba      	ldrb	r2, [r7, #2]
 8007056:	429a      	cmp	r2, r3
 8007058:	d101      	bne.n	800705e <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	e008      	b.n	8007070 <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	3301      	adds	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	7bfa      	ldrb	r2, [r7, #15]
 800706a:	429a      	cmp	r2, r3
 800706c:	d3d9      	bcc.n	8007022 <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 800707c:	b5b0      	push	{r4, r5, r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af02      	add	r7, sp, #8
 8007082:	4604      	mov	r4, r0
 8007084:	4608      	mov	r0, r1
 8007086:	4611      	mov	r1, r2
 8007088:	461a      	mov	r2, r3
 800708a:	4623      	mov	r3, r4
 800708c:	80fb      	strh	r3, [r7, #6]
 800708e:	4603      	mov	r3, r0
 8007090:	80bb      	strh	r3, [r7, #4]
 8007092:	460b      	mov	r3, r1
 8007094:	807b      	strh	r3, [r7, #2]
 8007096:	4613      	mov	r3, r2
 8007098:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 800709a:	887b      	ldrh	r3, [r7, #2]
 800709c:	3b01      	subs	r3, #1
 800709e:	b29b      	uxth	r3, r3
 80070a0:	b21c      	sxth	r4, r3
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	1c9a      	adds	r2, r3, #2
 80070a6:	61ba      	str	r2, [r7, #24]
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80070ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	4613      	mov	r3, r2
 80070ba:	4622      	mov	r2, r4
 80070bc:	f7fe fe50 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80070c0:	88bb      	ldrh	r3, [r7, #4]
 80070c2:	3301      	adds	r3, #1
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	b219      	sxth	r1, r3
 80070c8:	883b      	ldrh	r3, [r7, #0]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	b21c      	sxth	r4, r3
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	1c9a      	adds	r2, r3, #2
 80070d4:	61ba      	str	r2, [r7, #24]
 80070d6:	881b      	ldrh	r3, [r3, #0]
 80070d8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	4623      	mov	r3, r4
 80070e4:	f7fe fe3c 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	1c9a      	adds	r2, r3, #2
 80070ec:	61ba      	str	r2, [r7, #24]
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	f9b7 4000 	ldrsh.w	r4, [r7]
 80070f4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80070f8:	f9b7 1000 	ldrsh.w	r1, [r7]
 80070fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	4623      	mov	r3, r4
 8007104:	f7fe fe2c 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8007108:	883b      	ldrh	r3, [r7, #0]
 800710a:	3b01      	subs	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	b21c      	sxth	r4, r3
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	1c9a      	adds	r2, r3, #2
 8007114:	61ba      	str	r2, [r7, #24]
 8007116:	881b      	ldrh	r3, [r3, #0]
 8007118:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800711c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007120:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	4623      	mov	r3, r4
 8007128:	f7fe fe1a 	bl	8005d60 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	3301      	adds	r3, #1
 8007130:	b29b      	uxth	r3, r3
 8007132:	b218      	sxth	r0, r3
 8007134:	88bb      	ldrh	r3, [r7, #4]
 8007136:	3301      	adds	r3, #1
 8007138:	b29b      	uxth	r3, r3
 800713a:	b219      	sxth	r1, r3
 800713c:	887b      	ldrh	r3, [r7, #2]
 800713e:	3b02      	subs	r3, #2
 8007140:	b29b      	uxth	r3, r3
 8007142:	b21c      	sxth	r4, r3
 8007144:	88bb      	ldrh	r3, [r7, #4]
 8007146:	3301      	adds	r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	b21d      	sxth	r5, r3
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	1c9a      	adds	r2, r3, #2
 8007150:	61ba      	str	r2, [r7, #24]
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	462b      	mov	r3, r5
 8007158:	4622      	mov	r2, r4
 800715a:	f7fe fe01 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	3301      	adds	r3, #1
 8007162:	b29b      	uxth	r3, r3
 8007164:	b218      	sxth	r0, r3
 8007166:	88bb      	ldrh	r3, [r7, #4]
 8007168:	3302      	adds	r3, #2
 800716a:	b29b      	uxth	r3, r3
 800716c:	b219      	sxth	r1, r3
 800716e:	88fb      	ldrh	r3, [r7, #6]
 8007170:	3301      	adds	r3, #1
 8007172:	b29b      	uxth	r3, r3
 8007174:	b21c      	sxth	r4, r3
 8007176:	883b      	ldrh	r3, [r7, #0]
 8007178:	3b02      	subs	r3, #2
 800717a:	b29b      	uxth	r3, r3
 800717c:	b21d      	sxth	r5, r3
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	1c9a      	adds	r2, r3, #2
 8007182:	61ba      	str	r2, [r7, #24]
 8007184:	881b      	ldrh	r3, [r3, #0]
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462b      	mov	r3, r5
 800718a:	4622      	mov	r2, r4
 800718c:	f7fe fde8 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	3301      	adds	r3, #1
 8007194:	b29b      	uxth	r3, r3
 8007196:	b218      	sxth	r0, r3
 8007198:	883b      	ldrh	r3, [r7, #0]
 800719a:	3b01      	subs	r3, #1
 800719c:	b29b      	uxth	r3, r3
 800719e:	b219      	sxth	r1, r3
 80071a0:	887b      	ldrh	r3, [r7, #2]
 80071a2:	3b01      	subs	r3, #1
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	b21c      	sxth	r4, r3
 80071a8:	883b      	ldrh	r3, [r7, #0]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	b21d      	sxth	r5, r3
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	1c9a      	adds	r2, r3, #2
 80071b4:	61ba      	str	r2, [r7, #24]
 80071b6:	881b      	ldrh	r3, [r3, #0]
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	462b      	mov	r3, r5
 80071bc:	4622      	mov	r2, r4
 80071be:	f7fe fdcf 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80071c2:	887b      	ldrh	r3, [r7, #2]
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	b218      	sxth	r0, r3
 80071ca:	88bb      	ldrh	r3, [r7, #4]
 80071cc:	3301      	adds	r3, #1
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b219      	sxth	r1, r3
 80071d2:	887b      	ldrh	r3, [r7, #2]
 80071d4:	3b01      	subs	r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	b21c      	sxth	r4, r3
 80071da:	883b      	ldrh	r3, [r7, #0]
 80071dc:	3b02      	subs	r3, #2
 80071de:	b29b      	uxth	r3, r3
 80071e0:	b21d      	sxth	r5, r3
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	1c9a      	adds	r2, r3, #2
 80071e6:	61ba      	str	r2, [r7, #24]
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	462b      	mov	r3, r5
 80071ee:	4622      	mov	r2, r4
 80071f0:	f7fe fdb6 	bl	8005d60 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	3302      	adds	r3, #2
 80071f8:	b29b      	uxth	r3, r3
 80071fa:	b218      	sxth	r0, r3
 80071fc:	88bb      	ldrh	r3, [r7, #4]
 80071fe:	3302      	adds	r3, #2
 8007200:	b29b      	uxth	r3, r3
 8007202:	b219      	sxth	r1, r3
 8007204:	887b      	ldrh	r3, [r7, #2]
 8007206:	3b03      	subs	r3, #3
 8007208:	b29b      	uxth	r3, r3
 800720a:	b21c      	sxth	r4, r3
 800720c:	88bb      	ldrh	r3, [r7, #4]
 800720e:	3302      	adds	r3, #2
 8007210:	b29b      	uxth	r3, r3
 8007212:	b21d      	sxth	r5, r3
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	1c9a      	adds	r2, r3, #2
 8007218:	61ba      	str	r2, [r7, #24]
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	462b      	mov	r3, r5
 8007220:	4622      	mov	r2, r4
 8007222:	f7fe fd9d 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	3302      	adds	r3, #2
 800722a:	b29b      	uxth	r3, r3
 800722c:	b218      	sxth	r0, r3
 800722e:	88bb      	ldrh	r3, [r7, #4]
 8007230:	3303      	adds	r3, #3
 8007232:	b29b      	uxth	r3, r3
 8007234:	b219      	sxth	r1, r3
 8007236:	88fb      	ldrh	r3, [r7, #6]
 8007238:	3302      	adds	r3, #2
 800723a:	b29b      	uxth	r3, r3
 800723c:	b21c      	sxth	r4, r3
 800723e:	883b      	ldrh	r3, [r7, #0]
 8007240:	3b03      	subs	r3, #3
 8007242:	b29b      	uxth	r3, r3
 8007244:	b21d      	sxth	r5, r3
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	1c9a      	adds	r2, r3, #2
 800724a:	61ba      	str	r2, [r7, #24]
 800724c:	881b      	ldrh	r3, [r3, #0]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	462b      	mov	r3, r5
 8007252:	4622      	mov	r2, r4
 8007254:	f7fe fd84 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	3302      	adds	r3, #2
 800725c:	b29b      	uxth	r3, r3
 800725e:	b218      	sxth	r0, r3
 8007260:	883b      	ldrh	r3, [r7, #0]
 8007262:	3b02      	subs	r3, #2
 8007264:	b29b      	uxth	r3, r3
 8007266:	b219      	sxth	r1, r3
 8007268:	887b      	ldrh	r3, [r7, #2]
 800726a:	3b02      	subs	r3, #2
 800726c:	b29b      	uxth	r3, r3
 800726e:	b21c      	sxth	r4, r3
 8007270:	883b      	ldrh	r3, [r7, #0]
 8007272:	3b02      	subs	r3, #2
 8007274:	b29b      	uxth	r3, r3
 8007276:	b21d      	sxth	r5, r3
 8007278:	69bb      	ldr	r3, [r7, #24]
 800727a:	1c9a      	adds	r2, r3, #2
 800727c:	61ba      	str	r2, [r7, #24]
 800727e:	881b      	ldrh	r3, [r3, #0]
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	462b      	mov	r3, r5
 8007284:	4622      	mov	r2, r4
 8007286:	f7fe fd6b 	bl	8005d60 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	3b02      	subs	r3, #2
 800728e:	b29b      	uxth	r3, r3
 8007290:	b218      	sxth	r0, r3
 8007292:	88bb      	ldrh	r3, [r7, #4]
 8007294:	3302      	adds	r3, #2
 8007296:	b29b      	uxth	r3, r3
 8007298:	b219      	sxth	r1, r3
 800729a:	887b      	ldrh	r3, [r7, #2]
 800729c:	3b02      	subs	r3, #2
 800729e:	b29b      	uxth	r3, r3
 80072a0:	b21a      	sxth	r2, r3
 80072a2:	883b      	ldrh	r3, [r7, #0]
 80072a4:	3b03      	subs	r3, #3
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	b21c      	sxth	r4, r3
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	881b      	ldrh	r3, [r3, #0]
 80072ae:	9300      	str	r3, [sp, #0]
 80072b0:	4623      	mov	r3, r4
 80072b2:	f7fe fd55 	bl	8005d60 <UG_DrawLine>
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bdb0      	pop	{r4, r5, r7, pc}

080072be <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 80072be:	b480      	push	{r7}
 80072c0:	b085      	sub	sp, #20
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]
 80072d0:	e016      	b.n	8007300 <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	015b      	lsls	r3, r3, #5
 80072da:	4413      	add	r3, r2
 80072dc:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d007      	beq.n	80072fa <_UG_GetFreeObject+0x3c>
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	e008      	b.n	800730c <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 80072fa:	7bfb      	ldrb	r3, [r7, #15]
 80072fc:	3301      	adds	r3, #1
 80072fe:	73fb      	strb	r3, [r7, #15]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	429a      	cmp	r2, r3
 8007308:	d3e3      	bcc.n	80072d2 <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	4603      	mov	r3, r0
 8007320:	6039      	str	r1, [r7, #0]
 8007322:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	2b03      	cmp	r3, #3
 8007328:	d810      	bhi.n	800734c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800732a:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <UG_DriverRegister+0x40>)
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	79fb      	ldrb	r3, [r7, #7]
 8007330:	3307      	adds	r3, #7
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	4413      	add	r3, r2
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <UG_DriverRegister+0x40>)
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	3307      	adds	r3, #7
 8007342:	00db      	lsls	r3, r3, #3
 8007344:	4413      	add	r3, r2
 8007346:	2203      	movs	r2, #3
 8007348:	721a      	strb	r2, [r3, #8]
 800734a:	e000      	b.n	800734e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800734c:	bf00      	nop
}
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	200004f4 	.word	0x200004f4

0800735c <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8007362:	4b5d      	ldr	r3, [pc, #372]	; (80074d8 <UG_Update+0x17c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00a      	beq.n	8007388 <UG_Update+0x2c>
 8007372:	4b59      	ldr	r3, [pc, #356]	; (80074d8 <UG_Update+0x17c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800737a:	4b57      	ldr	r3, [pc, #348]	; (80074d8 <UG_Update+0x17c>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	b2d2      	uxtb	r2, r2
 8007384:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8007388:	4b53      	ldr	r3, [pc, #332]	; (80074d8 <UG_Update+0x17c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	685a      	ldr	r2, [r3, #4]
 800738e:	4b52      	ldr	r3, [pc, #328]	; (80074d8 <UG_Update+0x17c>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	429a      	cmp	r2, r3
 8007396:	d071      	beq.n	800747c <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8007398:	4b4f      	ldr	r3, [pc, #316]	; (80074d8 <UG_Update+0x17c>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d06c      	beq.n	800747c <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80073a2:	4b4d      	ldr	r3, [pc, #308]	; (80074d8 <UG_Update+0x17c>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b4c      	ldr	r3, [pc, #304]	; (80074d8 <UG_Update+0x17c>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6892      	ldr	r2, [r2, #8]
 80073ac:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 80073ae:	4b4a      	ldr	r3, [pc, #296]	; (80074d8 <UG_Update+0x17c>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4b49      	ldr	r3, [pc, #292]	; (80074d8 <UG_Update+0x17c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6852      	ldr	r2, [r2, #4]
 80073b8:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80073ba:	4b47      	ldr	r3, [pc, #284]	; (80074d8 <UG_Update+0x17c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d045      	beq.n	8007450 <UG_Update+0xf4>
 80073c4:	4b44      	ldr	r3, [pc, #272]	; (80074d8 <UG_Update+0x17c>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	7d9b      	ldrb	r3, [r3, #22]
 80073cc:	f003 0302 	and.w	r3, r3, #2
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d03d      	beq.n	8007450 <UG_Update+0xf4>
 80073d4:	4b40      	ldr	r3, [pc, #256]	; (80074d8 <UG_Update+0x17c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	7a1b      	ldrb	r3, [r3, #8]
 80073dc:	f003 0308 	and.w	r3, r3, #8
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d035      	beq.n	8007450 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80073e4:	4b3c      	ldr	r3, [pc, #240]	; (80074d8 <UG_Update+0x17c>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80073ee:	4b3a      	ldr	r3, [pc, #232]	; (80074d8 <UG_Update+0x17c>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d123      	bne.n	8007444 <UG_Update+0xe8>
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <UG_Update+0x17c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007406:	4b34      	ldr	r3, [pc, #208]	; (80074d8 <UG_Update+0x17c>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007410:	429a      	cmp	r2, r3
 8007412:	d117      	bne.n	8007444 <UG_Update+0xe8>
 8007414:	4b30      	ldr	r3, [pc, #192]	; (80074d8 <UG_Update+0x17c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800741e:	4b2e      	ldr	r3, [pc, #184]	; (80074d8 <UG_Update+0x17c>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007428:	429a      	cmp	r2, r3
 800742a:	d10b      	bne.n	8007444 <UG_Update+0xe8>
 800742c:	4b2a      	ldr	r3, [pc, #168]	; (80074d8 <UG_Update+0x17c>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007436:	4b28      	ldr	r3, [pc, #160]	; (80074d8 <UG_Update+0x17c>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007440:	429a      	cmp	r2, r3
 8007442:	d005      	beq.n	8007450 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8007444:	4b24      	ldr	r3, [pc, #144]	; (80074d8 <UG_Update+0x17c>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	4618      	mov	r0, r3
 800744c:	f000 fd78 	bl	8007f40 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8007450:	4b21      	ldr	r3, [pc, #132]	; (80074d8 <UG_Update+0x17c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	7a1a      	ldrb	r2, [r3, #8]
 8007458:	4b1f      	ldr	r3, [pc, #124]	; (80074d8 <UG_Update+0x17c>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007462:	b2d2      	uxtb	r2, r2
 8007464:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8007466:	4b1c      	ldr	r3, [pc, #112]	; (80074d8 <UG_Update+0x17c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	7a1a      	ldrb	r2, [r3, #8]
 800746e:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <UG_Update+0x17c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8007478:	b2d2      	uxtb	r2, r2
 800747a:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 800747c:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <UG_Update+0x17c>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d018      	beq.n	80074b8 <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 8007486:	4b14      	ldr	r3, [pc, #80]	; (80074d8 <UG_Update+0x17c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	7a1b      	ldrb	r3, [r3, #8]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	d002      	beq.n	80074a0 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fdfa 	bl	8008094 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	7a1b      	ldrb	r3, [r3, #8]
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d005      	beq.n	80074b8 <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff fc13 	bl	8006cd8 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fc44 	bl	8006d40 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80074b8:	4b07      	ldr	r3, [pc, #28]	; (80074d8 <UG_Update+0x17c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d004      	beq.n	80074ce <UG_Update+0x172>
     gui->device->flush();
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <UG_Update+0x17c>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	4798      	blx	r3
   }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	200004f4 	.word	0x200004f4

080074dc <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 80074dc:	b5b0      	push	{r4, r5, r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	4603      	mov	r3, r0
 80074e4:	603a      	str	r2, [r7, #0]
 80074e6:	80fb      	strh	r3, [r7, #6]
 80074e8:	460b      	mov	r3, r1
 80074ea:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	f000 810c 	beq.w	800770e <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	7a1b      	ldrb	r3, [r3, #8]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d164      	bne.n	80075c8 <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 8007504:	2300      	movs	r3, #0
 8007506:	847b      	strh	r3, [r7, #34]	; 0x22
 8007508:	e057      	b.n	80075ba <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 800750a:	2300      	movs	r3, #0
 800750c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800750e:	e048      	b.n	80075a2 <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 8007510:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007514:	2b00      	cmp	r3, #0
 8007516:	da00      	bge.n	800751a <UG_DrawBMP+0x3e>
 8007518:	3307      	adds	r3, #7
 800751a:	10db      	asrs	r3, r3, #3
 800751c:	b21b      	sxth	r3, r3
 800751e:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 8007520:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007524:	425a      	negs	r2, r3
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	f002 0207 	and.w	r2, r2, #7
 800752e:	bf58      	it	pl
 8007530:	4253      	negpl	r3, r2
 8007532:	b21b      	sxth	r3, r3
 8007534:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 8007536:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800753a:	7bfb      	ldrb	r3, [r7, #15]
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	8889      	ldrh	r1, [r1, #4]
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	4413      	add	r3, r2
 8007546:	461a      	mov	r2, r3
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	4413      	add	r3, r2
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 8007550:	7bbb      	ldrb	r3, [r7, #14]
 8007552:	2201      	movs	r2, #1
 8007554:	fa02 f303 	lsl.w	r3, r2, r3
 8007558:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 800755a:	7bba      	ldrb	r2, [r7, #14]
 800755c:	7b7b      	ldrb	r3, [r7, #13]
 800755e:	4013      	ands	r3, r2
 8007560:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d004      	beq.n	8007572 <UG_DrawBMP+0x96>
 8007568:	4b6b      	ldr	r3, [pc, #428]	; (8007718 <UG_DrawBMP+0x23c>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800756e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007570:	e003      	b.n	800757a <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 8007572:	4b69      	ldr	r3, [pc, #420]	; (8007718 <UG_DrawBMP+0x23c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007578:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 800757a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800757c:	88fb      	ldrh	r3, [r7, #6]
 800757e:	4413      	add	r3, r2
 8007580:	b29b      	uxth	r3, r3
 8007582:	b218      	sxth	r0, r3
 8007584:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007586:	88bb      	ldrh	r3, [r7, #4]
 8007588:	4413      	add	r3, r2
 800758a:	b29b      	uxth	r3, r3
 800758c:	b21b      	sxth	r3, r3
 800758e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007590:	4619      	mov	r1, r3
 8007592:	f7fe fa0b 	bl	80059ac <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 8007596:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800759a:	b29b      	uxth	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	b29b      	uxth	r3, r3
 80075a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075a2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075a6:	683a      	ldr	r2, [r7, #0]
 80075a8:	8892      	ldrh	r2, [r2, #4]
 80075aa:	4293      	cmp	r3, r2
 80075ac:	dbb0      	blt.n	8007510 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 80075ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3301      	adds	r3, #1
 80075b6:	b29b      	uxth	r3, r3
 80075b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80075ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	88d2      	ldrh	r2, [r2, #6]
 80075c2:	4293      	cmp	r3, r2
 80075c4:	dba1      	blt.n	800750a <UG_DrawBMP+0x2e>
         }
      }
     return;
 80075c6:	e0a3      	b.n	8007710 <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	7a1b      	ldrb	r3, [r3, #8]
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	f040 809f 	bne.w	8007710 <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 80075d2:	4b51      	ldr	r3, [pc, #324]	; (8007718 <UG_DrawBMP+0x23c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80075da:	f003 0302 	and.w	r3, r3, #2
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 80075e2:	4b4d      	ldr	r3, [pc, #308]	; (8007718 <UG_DrawBMP+0x23c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075e8:	461c      	mov	r4, r3
 80075ea:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80075ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075f2:	683a      	ldr	r2, [r7, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	47a0      	blx	r4
        return;
 80075f8:	e08a      	b.n	8007710 <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 80075fa:	4b47      	ldr	r3, [pc, #284]	; (8007718 <UG_DrawBMP+0x23c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007602:	f003 0302 	and.w	r3, r3, #2
 8007606:	2b00      	cmp	r3, #0
 8007608:	d04b      	beq.n	80076a2 <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 800760a:	4b43      	ldr	r3, [pc, #268]	; (8007718 <UG_DrawBMP+0x23c>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007610:	461d      	mov	r5, r3
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	889a      	ldrh	r2, [r3, #4]
 8007616:	88fb      	ldrh	r3, [r7, #6]
 8007618:	4413      	add	r3, r2
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29b      	uxth	r3, r3
 8007620:	b21c      	sxth	r4, r3
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	88da      	ldrh	r2, [r3, #6]
 8007626:	88bb      	ldrh	r3, [r7, #4]
 8007628:	4413      	add	r3, r2
 800762a:	b29b      	uxth	r3, r3
 800762c:	3b01      	subs	r3, #1
 800762e:	b29b      	uxth	r3, r3
 8007630:	b21b      	sxth	r3, r3
 8007632:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007636:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800763a:	4622      	mov	r2, r4
 800763c:	47a8      	blx	r5
 800763e:	4603      	mov	r3, r0
 8007640:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 8007648:	2300      	movs	r3, #0
 800764a:	847b      	strh	r3, [r7, #34]	; 0x22
 800764c:	e022      	b.n	8007694 <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 800764e:	2300      	movs	r3, #0
 8007650:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007652:	e00d      	b.n	8007670 <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	1c9a      	adds	r2, r3, #2
 8007658:	61fa      	str	r2, [r7, #28]
 800765a:	881a      	ldrh	r2, [r3, #0]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	4611      	mov	r1, r2
 8007660:	2001      	movs	r0, #1
 8007662:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 8007664:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007668:	b29b      	uxth	r3, r3
 800766a:	3301      	adds	r3, #1
 800766c:	b29b      	uxth	r3, r3
 800766e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007670:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007674:	683a      	ldr	r2, [r7, #0]
 8007676:	8892      	ldrh	r2, [r2, #4]
 8007678:	4293      	cmp	r3, r2
 800767a:	dbeb      	blt.n	8007654 <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 800767c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007680:	b29b      	uxth	r3, r3
 8007682:	3301      	adds	r3, #1
 8007684:	b29b      	uxth	r3, r3
 8007686:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8007688:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800768c:	b29b      	uxth	r3, r3
 800768e:	3301      	adds	r3, #1
 8007690:	b29b      	uxth	r3, r3
 8007692:	847b      	strh	r3, [r7, #34]	; 0x22
 8007694:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	88d2      	ldrh	r2, [r2, #6]
 800769c:	4293      	cmp	r3, r2
 800769e:	dbd6      	blt.n	800764e <UG_DrawBMP+0x172>
         }
         return;
 80076a0:	e036      	b.n	8007710 <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 80076a8:	2300      	movs	r3, #0
 80076aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80076ac:	e028      	b.n	8007700 <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 80076ae:	2300      	movs	r3, #0
 80076b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076b2:	e013      	b.n	80076dc <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 80076b4:	88fa      	ldrh	r2, [r7, #6]
 80076b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80076b8:	4413      	add	r3, r2
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	b218      	sxth	r0, r3
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	1c9a      	adds	r2, r3, #2
 80076c2:	61ba      	str	r2, [r7, #24]
 80076c4:	881a      	ldrh	r2, [r3, #0]
 80076c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076ca:	4619      	mov	r1, r3
 80076cc:	f7fe f96e 	bl	80059ac <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 80076d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	3301      	adds	r3, #1
 80076d8:	b29b      	uxth	r3, r3
 80076da:	84bb      	strh	r3, [r7, #36]	; 0x24
 80076dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80076e0:	683a      	ldr	r2, [r7, #0]
 80076e2:	8892      	ldrh	r2, [r2, #4]
 80076e4:	4293      	cmp	r3, r2
 80076e6:	dbe5      	blt.n	80076b4 <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 80076e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	3301      	adds	r3, #1
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 80076f4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3301      	adds	r3, #1
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8007700:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	88d2      	ldrh	r2, [r2, #6]
 8007708:	4293      	cmp	r3, r2
 800770a:	dbd0      	blt.n	80076ae <UG_DrawBMP+0x1d2>
 800770c:	e000      	b.n	8007710 <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 800770e:	bf00      	nop
     }
   }
   #endif
}
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bdb0      	pop	{r4, r5, r7, pc}
 8007716:	bf00      	nop
 8007718:	200004f4 	.word	0x200004f4

0800771c <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b086      	sub	sp, #24
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d005      	beq.n	8007742 <UG_WindowCreate+0x26>
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d002      	beq.n	8007742 <UG_WindowCreate+0x26>
 800773c:	79fb      	ldrb	r3, [r7, #7]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <UG_WindowCreate+0x2c>
 8007742:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007746:	e072      	b.n	800782e <UG_WindowCreate+0x112>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 8007748:	2300      	movs	r3, #0
 800774a:	75fb      	strb	r3, [r7, #23]
 800774c:	e00d      	b.n	800776a <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	015b      	lsls	r3, r3, #5
 8007752:	68ba      	ldr	r2, [r7, #8]
 8007754:	4413      	add	r3, r2
 8007756:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	2203      	movs	r2, #3
 800775c:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2200      	movs	r2, #0
 8007762:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	3301      	adds	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
 800776a:	7dfa      	ldrb	r2, [r7, #23]
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	429a      	cmp	r2, r3
 8007770:	d3ed      	bcc.n	800774e <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	79fa      	ldrb	r2, [r7, #7]
 8007776:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2202      	movs	r2, #2
 8007782:	721a      	strb	r2, [r3, #8]
   wnd->fc = C_FORE_COLOR;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2200      	movs	r2, #0
 8007788:	815a      	strh	r2, [r3, #10]
   wnd->bc = C_BACK_COLOR;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	f64e 727d 	movw	r2, #61309	; 0xef7d
 8007790:	819a      	strh	r2, [r3, #12]
   wnd->xs = 0;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 800779e:	f7fe fe0d 	bl	80063bc <UG_GetXDim>
 80077a2:	4603      	mov	r3, r0
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	b21a      	sxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 80077b0:	f7fe fe12 	bl	80063d8 <UG_GetYDim>
 80077b4:	4603      	mov	r3, r0
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	3b01      	subs	r3, #1
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	b21a      	sxth	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2203      	movs	r2, #3
 80077cc:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = gui->font;
 80077d4:	4b18      	ldr	r3, [pc, #96]	; (8007838 <UG_WindowCreate+0x11c>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <UG_WindowCreate+0xcc>
 80077dc:	4b16      	ldr	r3, [pc, #88]	; (8007838 <UG_WindowCreate+0x11c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691a      	ldr	r2, [r3, #16]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	61da      	str	r2, [r3, #28]
 80077e6:	e002      	b.n	80077ee <UG_WindowCreate+0xd2>
   else wnd->title.font = NULL;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2202      	movs	r2, #2
 80077f2:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2202      	movs	r2, #2
 80077fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2211      	movs	r2, #17
 8007802:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_TITLE_FORE_COLOR;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800780c:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_TITLE_BACK_COLOR;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	221f      	movs	r2, #31
 8007812:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_INACTIVE_TITLE_FORE_COLOR;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800781a:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_INACTIVE_TITLE_BACK_COLOR;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f248 4210 	movw	r2, #33808	; 0x8410
 8007822:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	220f      	movs	r2, #15
 8007828:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
 8007836:	bf00      	nop
 8007838:	200004f4 	.word	0x200004f4

0800783c <UG_WindowDelete>:

UG_RESULT UG_WindowDelete( UG_WINDOW* wnd )
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
   if ( wnd == gui->active_window ) return UG_RESULT_FAIL;
 8007844:	4b1b      	ldr	r3, [pc, #108]	; (80078b4 <UG_WindowDelete+0x78>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d102      	bne.n	8007856 <UG_WindowDelete+0x1a>
 8007850:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007854:	e027      	b.n	80078a6 <UG_WindowDelete+0x6a>

   /* Only delete valid windows */
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d022      	beq.n	80078a2 <UG_WindowDelete+0x66>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	7a1b      	ldrb	r3, [r3, #8]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01c      	beq.n	80078a2 <UG_WindowDelete+0x66>
   {
      wnd->state = 0;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	721a      	strb	r2, [r3, #8]
      wnd->cb = NULL;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	631a      	str	r2, [r3, #48]	; 0x30
      wnd->objcnt = 0;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2200      	movs	r2, #0
 8007878:	701a      	strb	r2, [r3, #0]
      wnd->objlst = NULL;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	605a      	str	r2, [r3, #4]
      wnd->xs = 0;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	81da      	strh	r2, [r3, #14]
      wnd->ys = 0;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	821a      	strh	r2, [r3, #16]
      wnd->xe = 0;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	825a      	strh	r2, [r3, #18]
      wnd->ye = 0;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	829a      	strh	r2, [r3, #20]
      wnd->style = 0;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	759a      	strb	r2, [r3, #22]
      return UG_RESULT_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	e001      	b.n	80078a6 <UG_WindowDelete+0x6a>
   }
   return UG_RESULT_FAIL;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	370c      	adds	r7, #12
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	200004f4 	.word	0x200004f4

080078b8 <UG_WindowShow>:

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d013      	beq.n	80078ee <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7a1b      	ldrb	r3, [r3, #8]
 80078ca:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	7a1b      	ldrb	r3, [r3, #8]
 80078d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80078dc:	b2da      	uxtb	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 80078e2:	4b07      	ldr	r3, [pc, #28]	; (8007900 <UG_WindowShow+0x48>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
      return UG_RESULT_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e001      	b.n	80078f2 <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 80078ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	370c      	adds	r7, #12
 80078f6:	46bd      	mov	sp, r7
 80078f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop
 8007900:	200004f4 	.word	0x200004f4

08007904 <UG_WindowHide>:

UG_RESULT UG_WindowHide( UG_WINDOW* wnd )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d060      	beq.n	80079d4 <UG_WindowHide+0xd0>
   {
      if ( wnd == gui->active_window )
 8007912:	4b33      	ldr	r3, [pc, #204]	; (80079e0 <UG_WindowHide+0xdc>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	429a      	cmp	r2, r3
 800791c:	d155      	bne.n	80079ca <UG_WindowHide+0xc6>
      {
         /* Is there an old window which just lost the focus? */
         if ( (gui->last_window != NULL) && (gui->last_window->state & WND_STATE_VISIBLE) )
 800791e:	4b30      	ldr	r3, [pc, #192]	; (80079e0 <UG_WindowHide+0xdc>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d039      	beq.n	800799c <UG_WindowHide+0x98>
 8007928:	4b2d      	ldr	r3, [pc, #180]	; (80079e0 <UG_WindowHide+0xdc>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	7a1b      	ldrb	r3, [r3, #8]
 8007930:	f003 0308 	and.w	r3, r3, #8
 8007934:	2b00      	cmp	r3, #0
 8007936:	d031      	beq.n	800799c <UG_WindowHide+0x98>
         {
            if ( (gui->last_window->xs > wnd->xs) || (gui->last_window->ys > wnd->ys) || (gui->last_window->xe < wnd->xe) || (gui->last_window->ye < wnd->ye) )
 8007938:	4b29      	ldr	r3, [pc, #164]	; (80079e0 <UG_WindowHide+0xdc>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007948:	429a      	cmp	r2, r3
 800794a:	dc1d      	bgt.n	8007988 <UG_WindowHide+0x84>
 800794c:	4b24      	ldr	r3, [pc, #144]	; (80079e0 <UG_WindowHide+0xdc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800795c:	429a      	cmp	r2, r3
 800795e:	dc13      	bgt.n	8007988 <UG_WindowHide+0x84>
 8007960:	4b1f      	ldr	r3, [pc, #124]	; (80079e0 <UG_WindowHide+0xdc>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007970:	429a      	cmp	r2, r3
 8007972:	db09      	blt.n	8007988 <UG_WindowHide+0x84>
 8007974:	4b1a      	ldr	r3, [pc, #104]	; (80079e0 <UG_WindowHide+0xdc>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007984:	429a      	cmp	r2, r3
 8007986:	da02      	bge.n	800798e <UG_WindowHide+0x8a>
            {
               _UG_WindowClear( wnd );
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 fc3f 	bl	800820c <_UG_WindowClear>
            }
            gui->next_window = gui->last_window;
 800798e:	4b14      	ldr	r3, [pc, #80]	; (80079e0 <UG_WindowHide+0xdc>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b13      	ldr	r3, [pc, #76]	; (80079e0 <UG_WindowHide+0xdc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68d2      	ldr	r2, [r2, #12]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	e019      	b.n	80079d0 <UG_WindowHide+0xcc>
         }
         else
         {
            gui->active_window->state &= ~WND_STATE_VISIBLE;
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <UG_WindowHide+0xdc>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	7a1a      	ldrb	r2, [r3, #8]
 80079a4:	4b0e      	ldr	r3, [pc, #56]	; (80079e0 <UG_WindowHide+0xdc>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f022 0208 	bic.w	r2, r2, #8
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	721a      	strb	r2, [r3, #8]
            gui->active_window->state |= WND_STATE_UPDATE;
 80079b2:	4b0b      	ldr	r3, [pc, #44]	; (80079e0 <UG_WindowHide+0xdc>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	7a1a      	ldrb	r2, [r3, #8]
 80079ba:	4b09      	ldr	r3, [pc, #36]	; (80079e0 <UG_WindowHide+0xdc>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	f042 0220 	orr.w	r2, r2, #32
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	721a      	strb	r2, [r3, #8]
 80079c8:	e002      	b.n	80079d0 <UG_WindowHide+0xcc>
         }
      }
      else
      {
         /* If the old window is visible, clear it! */
         _UG_WindowClear( wnd );
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fc1e 	bl	800820c <_UG_WindowClear>
      }
      return UG_RESULT_OK;
 80079d0:	2300      	movs	r3, #0
 80079d2:	e001      	b.n	80079d8 <UG_WindowHide+0xd4>
   }
   return UG_RESULT_FAIL;
 80079d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3708      	adds	r7, #8
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	200004f4 	.word	0x200004f4

080079e4 <UG_WindowResize>:

UG_RESULT UG_WindowResize( UG_WINDOW* wnd, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80079e4:	b590      	push	{r4, r7, lr}
 80079e6:	b089      	sub	sp, #36	; 0x24
 80079e8:	af02      	add	r7, sp, #8
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	4608      	mov	r0, r1
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	4603      	mov	r3, r0
 80079f4:	817b      	strh	r3, [r7, #10]
 80079f6:	460b      	mov	r3, r1
 80079f8:	813b      	strh	r3, [r7, #8]
 80079fa:	4613      	mov	r3, r2
 80079fc:	80fb      	strh	r3, [r7, #6]
   UG_S16 pos;
   UG_S16 xmax,ymax;

   xmax = UG_GetXDim()-1;
 80079fe:	f7fe fcdd 	bl	80063bc <UG_GetXDim>
 8007a02:	4603      	mov	r3, r0
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	3b01      	subs	r3, #1
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	82fb      	strh	r3, [r7, #22]
   ymax = UG_GetYDim()-1;
 8007a0c:	f7fe fce4 	bl	80063d8 <UG_GetYDim>
 8007a10:	4603      	mov	r3, r0
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	3b01      	subs	r3, #1
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	82bb      	strh	r3, [r7, #20]

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	f000 80cb 	beq.w	8007bb8 <UG_WindowResize+0x1d4>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	7a1b      	ldrb	r3, [r3, #8]
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80c4 	beq.w	8007bb8 <UG_WindowResize+0x1d4>
   {
      /* Do some checks... */
      if ( (xs < 0) || (ys < 0) ) return UG_RESULT_FAIL;
 8007a30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	db03      	blt.n	8007a40 <UG_WindowResize+0x5c>
 8007a38:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	da02      	bge.n	8007a46 <UG_WindowResize+0x62>
 8007a40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a44:	e0ba      	b.n	8007bbc <UG_WindowResize+0x1d8>
      if ( (xe > xmax) || (ye > ymax) ) return UG_RESULT_FAIL;
 8007a46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007a4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	dc05      	bgt.n	8007a5e <UG_WindowResize+0x7a>
 8007a52:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8007a56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	dd02      	ble.n	8007a64 <UG_WindowResize+0x80>
 8007a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a62:	e0ab      	b.n	8007bbc <UG_WindowResize+0x1d8>
      pos = xe-xs;
 8007a64:	88fa      	ldrh	r2, [r7, #6]
 8007a66:	897b      	ldrh	r3, [r7, #10]
 8007a68:	1ad3      	subs	r3, r2, r3
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007a6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a72:	2b09      	cmp	r3, #9
 8007a74:	dc02      	bgt.n	8007a7c <UG_WindowResize+0x98>
 8007a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a7a:	e09f      	b.n	8007bbc <UG_WindowResize+0x1d8>
      pos = ye-ys;
 8007a7c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a7e:	893b      	ldrh	r3, [r7, #8]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007a86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a8a:	2b09      	cmp	r3, #9
 8007a8c:	dc02      	bgt.n	8007a94 <UG_WindowResize+0xb0>
 8007a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a92:	e093      	b.n	8007bbc <UG_WindowResize+0x1d8>

      /* ... and if everything is OK move the window! */
      wnd->xs = xs;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	897a      	ldrh	r2, [r7, #10]
 8007a98:	81da      	strh	r2, [r3, #14]
      wnd->ys = ys;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	893a      	ldrh	r2, [r7, #8]
 8007a9e:	821a      	strh	r2, [r3, #16]
      wnd->xe = xe;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	88fa      	ldrh	r2, [r7, #6]
 8007aa4:	825a      	strh	r2, [r3, #18]
      wnd->ye = ye;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007aaa:	829a      	strh	r2, [r3, #20]

      if ( (wnd->state & WND_STATE_VISIBLE) && (gui->active_window == wnd) )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	7a1b      	ldrb	r3, [r3, #8]
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d07d      	beq.n	8007bb4 <UG_WindowResize+0x1d0>
 8007ab8:	4b42      	ldr	r3, [pc, #264]	; (8007bc4 <UG_WindowResize+0x1e0>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	68fa      	ldr	r2, [r7, #12]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d177      	bne.n	8007bb4 <UG_WindowResize+0x1d0>
      {
         if ( wnd->ys ) UG_FillFrame(0, 0, xmax,wnd->ys-1,gui->desktop_color);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d011      	beq.n	8007af2 <UG_WindowResize+0x10e>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	b219      	sxth	r1, r3
 8007adc:	4b39      	ldr	r3, [pc, #228]	; (8007bc4 <UG_WindowResize+0x1e0>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007ae2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ae6:	9300      	str	r3, [sp, #0]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	2100      	movs	r1, #0
 8007aec:	2000      	movs	r0, #0
 8007aee:	f7fd fe2d 	bl	800574c <UG_FillFrame>
         pos = wnd->ye+1;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3301      	adds	r3, #1
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	827b      	strh	r3, [r7, #18]
         if ( !(pos > ymax) ) UG_FillFrame(0, pos, xmax,ymax,gui->desktop_color);
 8007b00:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007b04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	dc0d      	bgt.n	8007b28 <UG_WindowResize+0x144>
 8007b0c:	4b2d      	ldr	r3, [pc, #180]	; (8007bc4 <UG_WindowResize+0x1e0>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007b12:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007b16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007b1a:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007b1e:	9300      	str	r3, [sp, #0]
 8007b20:	4603      	mov	r3, r0
 8007b22:	2000      	movs	r0, #0
 8007b24:	f7fd fe12 	bl	800574c <UG_FillFrame>
         if ( wnd->xs ) UG_FillFrame(0, wnd->ys, wnd->xs-1,wnd->ye,gui->desktop_color);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d014      	beq.n	8007b5c <UG_WindowResize+0x178>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	b21a      	sxth	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007b4c:	4b1d      	ldr	r3, [pc, #116]	; (8007bc4 <UG_WindowResize+0x1e0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	4603      	mov	r3, r0
 8007b56:	2000      	movs	r0, #0
 8007b58:	f7fd fdf8 	bl	800574c <UG_FillFrame>
         pos = wnd->xe+1;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3301      	adds	r3, #1
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	827b      	strh	r3, [r7, #18]
         if ( !(pos > xmax) ) UG_FillFrame(pos, wnd->ys,xmax,wnd->ye,gui->desktop_color);
 8007b6a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007b6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	dc10      	bgt.n	8007b98 <UG_WindowResize+0x1b4>
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007b82:	4b10      	ldr	r3, [pc, #64]	; (8007bc4 <UG_WindowResize+0x1e0>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007b88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007b8c:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	4623      	mov	r3, r4
 8007b94:	f7fd fdda 	bl	800574c <UG_FillFrame>

         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	7a1b      	ldrb	r3, [r3, #8]
 8007b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba0:	b2da      	uxtb	r2, r3
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	721a      	strb	r2, [r3, #8]
         wnd->state |= WND_STATE_UPDATE;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	7a1b      	ldrb	r3, [r3, #8]
 8007baa:	f043 0320 	orr.w	r3, r3, #32
 8007bae:	b2da      	uxtb	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e001      	b.n	8007bbc <UG_WindowResize+0x1d8>
   }
   return UG_RESULT_FAIL;
 8007bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd90      	pop	{r4, r7, pc}
 8007bc4:	200004f4 	.word	0x200004f4

08007bc8 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d011      	beq.n	8007bfc <UG_WindowSetTitleText+0x34>
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7a1b      	ldrb	r3, [r3, #8]
 8007bdc:	f003 0302 	and.w	r3, r3, #2
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00b      	beq.n	8007bfc <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	7a1b      	ldrb	r3, [r3, #8]
 8007bee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	e001      	b.n	8007c00 <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007bfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, UG_FONT* font )
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d02a      	beq.n	8007c72 <UG_WindowSetTitleTextFont+0x66>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	7a1b      	ldrb	r3, [r3, #8]
 8007c20:	f003 0302 	and.w	r3, r3, #2
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d024      	beq.n	8007c72 <UG_WindowSetTitleTextFont+0x66>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7a1b      	ldrb	r3, [r3, #8]
 8007c2c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (UG_GetFontHeight(font) + 1) )
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c42:	461a      	mov	r2, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	3302      	adds	r3, #2
 8007c48:	781b      	ldrb	r3, [r3, #0]
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	dc0e      	bgt.n	8007c6e <UG_WindowSetTitleTextFont+0x62>
      {
         wnd->title.height = UG_GetFontWidth(font) + 2;
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	3301      	adds	r3, #1
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	3302      	adds	r3, #2
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7a1b      	ldrb	r3, [r3, #8]
 8007c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	e001      	b.n	8007c76 <UG_WindowSetTitleTextFont+0x6a>
   }
   return UG_RESULT_FAIL;
 8007c72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <UG_WindowSetTitleHeight>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleHeight( UG_WINDOW* wnd, UG_U8 height )
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d019      	beq.n	8007cc8 <UG_WindowSetTitleHeight+0x46>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	7a1b      	ldrb	r3, [r3, #8]
 8007c98:	f003 0302 	and.w	r3, r3, #2
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d013      	beq.n	8007cc8 <UG_WindowSetTitleHeight+0x46>
   {
      wnd->title.height = height;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	7a1b      	ldrb	r3, [r3, #8]
 8007cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cb0:	b2da      	uxtb	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	721a      	strb	r2, [r3, #8]
      wnd->state |= WND_STATE_UPDATE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7a1b      	ldrb	r3, [r3, #8]
 8007cba:	f043 0320 	orr.w	r3, r3, #32
 8007cbe:	b2da      	uxtb	r2, r3
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e001      	b.n	8007ccc <UG_WindowSetTitleHeight+0x4a>
   }
   return UG_RESULT_FAIL;
 8007cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <UG_WindowSetXStart>:

UG_RESULT UG_WindowSetXStart( UG_WINDOW* wnd, UG_S16 xs )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af02      	add	r7, sp, #8
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d022      	beq.n	8007d30 <UG_WindowSetXStart+0x58>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	7a1b      	ldrb	r3, [r3, #8]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01c      	beq.n	8007d30 <UG_WindowSetXStart+0x58>
   {
      wnd->xs = xs;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	887a      	ldrh	r2, [r7, #2]
 8007cfa:	81da      	strh	r2, [r3, #14]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d14:	9300      	str	r3, [sp, #0]
 8007d16:	4603      	mov	r3, r0
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7ff fe63 	bl	80079e4 <UG_WindowResize>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d24:	d102      	bne.n	8007d2c <UG_WindowSetXStart+0x54>
 8007d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d2a:	e003      	b.n	8007d34 <UG_WindowSetXStart+0x5c>
      return UG_RESULT_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	e001      	b.n	8007d34 <UG_WindowSetXStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <UG_WindowSetYStart>:

UG_RESULT UG_WindowSetYStart( UG_WINDOW* wnd, UG_S16 ys )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af02      	add	r7, sp, #8
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d022      	beq.n	8007d94 <UG_WindowSetYStart+0x58>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	7a1b      	ldrb	r3, [r3, #8]
 8007d52:	f003 0302 	and.w	r3, r3, #2
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d01c      	beq.n	8007d94 <UG_WindowSetYStart+0x58>
   {
      wnd->ys = ys;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	887a      	ldrh	r2, [r7, #2]
 8007d5e:	821a      	strh	r2, [r3, #16]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7ff fe31 	bl	80079e4 <UG_WindowResize>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d88:	d102      	bne.n	8007d90 <UG_WindowSetYStart+0x54>
 8007d8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d8e:	e003      	b.n	8007d98 <UG_WindowSetYStart+0x5c>
      return UG_RESULT_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	e001      	b.n	8007d98 <UG_WindowSetYStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <UG_WindowSetXEnd>:

UG_RESULT UG_WindowSetXEnd( UG_WINDOW* wnd, UG_S16 xe )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af02      	add	r7, sp, #8
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d022      	beq.n	8007df8 <UG_WindowSetXEnd+0x58>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	7a1b      	ldrb	r3, [r3, #8]
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d01c      	beq.n	8007df8 <UG_WindowSetXEnd+0x58>
   {
      wnd->xe = xe;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	887a      	ldrh	r2, [r7, #2]
 8007dc2:	825a      	strh	r2, [r3, #18]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007ddc:	9300      	str	r3, [sp, #0]
 8007dde:	4603      	mov	r3, r0
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7ff fdff 	bl	80079e4 <UG_WindowResize>
 8007de6:	4603      	mov	r3, r0
 8007de8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dec:	d102      	bne.n	8007df4 <UG_WindowSetXEnd+0x54>
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007df2:	e003      	b.n	8007dfc <UG_WindowSetXEnd+0x5c>
      return UG_RESULT_OK;
 8007df4:	2300      	movs	r3, #0
 8007df6:	e001      	b.n	8007dfc <UG_WindowSetXEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <UG_WindowSetYEnd>:

UG_RESULT UG_WindowSetYEnd( UG_WINDOW* wnd, UG_S16 ye )
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b084      	sub	sp, #16
 8007e08:	af02      	add	r7, sp, #8
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	460b      	mov	r3, r1
 8007e0e:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d022      	beq.n	8007e5c <UG_WindowSetYEnd+0x58>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7a1b      	ldrb	r3, [r3, #8]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01c      	beq.n	8007e5c <UG_WindowSetYEnd+0x58>
   {
      wnd->ye = ye;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	887a      	ldrh	r2, [r7, #2]
 8007e26:	829a      	strh	r2, [r3, #20]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007e40:	9300      	str	r3, [sp, #0]
 8007e42:	4603      	mov	r3, r0
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff fdcd 	bl	80079e4 <UG_WindowResize>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e50:	d102      	bne.n	8007e58 <UG_WindowSetYEnd+0x54>
 8007e52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007e56:	e003      	b.n	8007e60 <UG_WindowSetYEnd+0x5c>
      return UG_RESULT_OK;
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e001      	b.n	8007e60 <UG_WindowSetYEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007e5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d05a      	beq.n	8007f2e <UG_WindowGetArea+0xc6>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7a1b      	ldrb	r3, [r3, #8]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d054      	beq.n	8007f2e <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	7d9b      	ldrb	r3, [r3, #22]
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d023      	beq.n	8007f00 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	3303      	adds	r3, #3
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	b21a      	sxth	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3303      	adds	r3, #3
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	b21a      	sxth	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	3b03      	subs	r3, #3
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	b21a      	sxth	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	3b03      	subs	r3, #3
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	b21a      	sxth	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7d9b      	ldrb	r3, [r3, #22]
 8007f04:	f003 0302 	and.w	r3, r3, #2
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00e      	beq.n	8007f2a <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007f12:	b29a      	uxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3301      	adds	r3, #1
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	b21a      	sxth	r2, r3
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	e001      	b.n	8007f32 <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 8007f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	370c      	adds	r7, #12
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
	...

08007f40 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b08f      	sub	sp, #60	; 0x3c
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 809a 	beq.w	8008084 <_UG_WindowDrawTitle+0x144>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	7a1b      	ldrb	r3, [r3, #8]
 8007f54:	f003 0302 	and.w	r3, r3, #2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 8093 	beq.w	8008084 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	89db      	ldrh	r3, [r3, #14]
 8007f62:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8a1b      	ldrh	r3, [r3, #16]
 8007f68:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8a5b      	ldrh	r3, [r3, #18]
 8007f6e:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	8a9b      	ldrh	r3, [r3, #20]
 8007f74:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	7d9b      	ldrb	r3, [r3, #22]
 8007f7a:	f003 0301 	and.w	r3, r3, #1
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00f      	beq.n	8007fa2 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8007f82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f84:	3303      	adds	r3, #3
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8007f8a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f8c:	3303      	adds	r3, #3
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8007f92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f94:	3b03      	subs	r3, #3
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8007f9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f9c:	3b03      	subs	r3, #3
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8007fa2:	4b3b      	ldr	r3, [pc, #236]	; (8008090 <_UG_WindowDrawTitle+0x150>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d106      	bne.n	8007fbc <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007fb2:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007fb8:	83bb      	strh	r3, [r7, #28]
 8007fba:	e005      	b.n	8007fc8 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc0:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fc6:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fd2:	4413      	add	r3, r2
 8007fd4:	b29b      	uxth	r3, r3
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	b21c      	sxth	r4, r3
 8007fdc:	8bfb      	ldrh	r3, [r7, #30]
 8007fde:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007fe2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8007fe6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007fea:	9300      	str	r3, [sp, #0]
 8007fec:	4623      	mov	r3, r4
 8007fee:	f7fd fbad 	bl	800574c <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	69db      	ldr	r3, [r3, #28]
 8007ffc:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8007ffe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008000:	3303      	adds	r3, #3
 8008002:	b29b      	uxth	r3, r3
 8008004:	b21b      	sxth	r3, r3
 8008006:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8008008:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800800a:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 800800c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800800e:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008016:	b29a      	uxth	r2, r3
 8008018:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800801a:	4413      	add	r3, r2
 800801c:	b29b      	uxth	r3, r3
 800801e:	3b01      	subs	r3, #1
 8008020:	b29b      	uxth	r3, r3
 8008022:	b21b      	sxth	r3, r3
 8008024:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800802c:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8008036:	b21b      	sxth	r3, r3
 8008038:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8008040:	b21b      	sxth	r3, r3
 8008042:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8008044:	f107 030c 	add.w	r3, r7, #12
 8008048:	4618      	mov	r0, r3
 800804a:	f7fe fec5 	bl	8006dd8 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008054:	b29a      	uxth	r2, r3
 8008056:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008058:	4413      	add	r3, r2
 800805a:	b29b      	uxth	r3, r3
 800805c:	b219      	sxth	r1, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008064:	b29a      	uxth	r2, r3
 8008066:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008068:	4413      	add	r3, r2
 800806a:	b29b      	uxth	r3, r3
 800806c:	b21b      	sxth	r3, r3
 800806e:	f649 5413 	movw	r4, #40211	; 0x9d13
 8008072:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8008076:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800807a:	9400      	str	r4, [sp, #0]
 800807c:	f7fd fe70 	bl	8005d60 <UG_DrawLine>
      return UG_RESULT_OK;
 8008080:	2300      	movs	r3, #0
 8008082:	e001      	b.n	8008088 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8008084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008088:	4618      	mov	r0, r3
 800808a:	3734      	adds	r7, #52	; 0x34
 800808c:	46bd      	mov	sp, r7
 800808e:	bd90      	pop	{r4, r7, pc}
 8008090:	200004f4 	.word	0x200004f4

08008094 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8008094:	b590      	push	{r4, r7, lr}
 8008096:	b089      	sub	sp, #36	; 0x24
 8008098:	af02      	add	r7, sp, #8
 800809a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	89db      	ldrh	r3, [r3, #14]
 80080a0:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8a1b      	ldrh	r3, [r3, #16]
 80080a6:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8a5b      	ldrh	r3, [r3, #18]
 80080ac:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	8a9b      	ldrh	r3, [r3, #20]
 80080b2:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	7a1b      	ldrb	r3, [r3, #8]
 80080b8:	f023 0320 	bic.w	r3, r3, #32
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	7a1b      	ldrb	r3, [r3, #8]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8084 	beq.w	80081d8 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	7d9b      	ldrb	r3, [r3, #22]
 80080d4:	f003 0301 	and.w	r3, r3, #1
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d021      	beq.n	8008120 <_UG_WindowUpdate+0x8c>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7a1b      	ldrb	r3, [r3, #8]
 80080e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d11b      	bne.n	8008120 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 80080e8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80080ec:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80080f0:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80080f4:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80080f8:	4c42      	ldr	r4, [pc, #264]	; (8008204 <_UG_WindowUpdate+0x170>)
 80080fa:	9400      	str	r4, [sp, #0]
 80080fc:	f7fe ffbe 	bl	800707c <_UG_DrawObjectFrame>
         xs+=3;
 8008100:	8abb      	ldrh	r3, [r7, #20]
 8008102:	3303      	adds	r3, #3
 8008104:	b29b      	uxth	r3, r3
 8008106:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8008108:	8a7b      	ldrh	r3, [r7, #18]
 800810a:	3303      	adds	r3, #3
 800810c:	b29b      	uxth	r3, r3
 800810e:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8008110:	8a3b      	ldrh	r3, [r7, #16]
 8008112:	3b03      	subs	r3, #3
 8008114:	b29b      	uxth	r3, r3
 8008116:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8008118:	89fb      	ldrh	r3, [r7, #14]
 800811a:	3b03      	subs	r3, #3
 800811c:	b29b      	uxth	r3, r3
 800811e:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	7d9b      	ldrb	r3, [r3, #22]
 8008124:	f003 0302 	and.w	r3, r3, #2
 8008128:	2b00      	cmp	r3, #0
 800812a:	d01a      	beq.n	8008162 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff ff07 	bl	8007f40 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008138:	b29a      	uxth	r2, r3
 800813a:	8a7b      	ldrh	r3, [r7, #18]
 800813c:	4413      	add	r3, r2
 800813e:	b29b      	uxth	r3, r3
 8008140:	3301      	adds	r3, #1
 8008142:	b29b      	uxth	r3, r3
 8008144:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	7a1b      	ldrb	r3, [r3, #8]
 800814a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d007      	beq.n	8008162 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	7a1b      	ldrb	r3, [r3, #8]
 8008156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800815a:	b2da      	uxtb	r2, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	721a      	strb	r2, [r3, #8]
            return;
 8008160:	e04d      	b.n	80081fe <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	899b      	ldrh	r3, [r3, #12]
 8008166:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800816a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800816e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8008172:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	4623      	mov	r3, r4
 800817a:	f7fd fae7 	bl	800574c <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8008184:	2300      	movs	r3, #0
 8008186:	82fb      	strh	r3, [r7, #22]
 8008188:	e021      	b.n	80081ce <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685a      	ldr	r2, [r3, #4]
 800818e:	8afb      	ldrh	r3, [r7, #22]
 8008190:	015b      	lsls	r3, r3, #5
 8008192:	4413      	add	r3, r2
 8008194:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d112      	bne.n	80081c8 <_UG_WindowUpdate+0x134>
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00c      	beq.n	80081c8 <_UG_WindowUpdate+0x134>
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	f003 0308 	and.w	r3, r3, #8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d006      	beq.n	80081c8 <_UG_WindowUpdate+0x134>
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80081c2:	b2da      	uxtb	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80081c8:	8afb      	ldrh	r3, [r7, #22]
 80081ca:	3301      	adds	r3, #1
 80081cc:	82fb      	strh	r3, [r7, #22]
 80081ce:	8afa      	ldrh	r2, [r7, #22]
 80081d0:	89bb      	ldrh	r3, [r7, #12]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d3d9      	bcc.n	800818a <_UG_WindowUpdate+0xf6>
 80081d6:	e012      	b.n	80081fe <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80081f0:	4b05      	ldr	r3, [pc, #20]	; (8008208 <_UG_WindowUpdate+0x174>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4623      	mov	r3, r4
 80081fa:	f7fd faa7 	bl	800574c <UG_FillFrame>
   }
}
 80081fe:	371c      	adds	r7, #28
 8008200:	46bd      	mov	sp, r7
 8008202:	bd90      	pop	{r4, r7, pc}
 8008204:	08020634 	.word	0x08020634
 8008208:	200004f4 	.word	0x200004f4

0800820c <_UG_WindowClear>:

static UG_RESULT _UG_WindowClear( UG_WINDOW* wnd )
{
 800820c:	b590      	push	{r4, r7, lr}
 800820e:	b085      	sub	sp, #20
 8008210:	af02      	add	r7, sp, #8
 8008212:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d045      	beq.n	80082a6 <_UG_WindowClear+0x9a>
   {
      if (wnd->state & WND_STATE_VISIBLE)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	7a1b      	ldrb	r3, [r3, #8]
 800821e:	f003 0308 	and.w	r3, r3, #8
 8008222:	2b00      	cmp	r3, #0
 8008224:	d03d      	beq.n	80082a2 <_UG_WindowClear+0x96>
      {
         wnd->state &= ~WND_STATE_VISIBLE;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	7a1b      	ldrb	r3, [r3, #8]
 800822a:	f023 0308 	bic.w	r3, r3, #8
 800822e:	b2da      	uxtb	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	721a      	strb	r2, [r3, #8]
         UG_FillFrame( wnd->xs, wnd->ys, wnd->xe, wnd->ye, gui->desktop_color );
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 800824c:	4b19      	ldr	r3, [pc, #100]	; (80082b4 <_UG_WindowClear+0xa8>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008252:	9300      	str	r3, [sp, #0]
 8008254:	4623      	mov	r3, r4
 8008256:	f7fd fa79 	bl	800574c <UG_FillFrame>

         if ( wnd != gui->active_window )
 800825a:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <_UG_WindowClear+0xa8>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	689b      	ldr	r3, [r3, #8]
 8008260:	687a      	ldr	r2, [r7, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d01d      	beq.n	80082a2 <_UG_WindowClear+0x96>
         {
            /* If the current window is visible, update it! */
            if ( gui->active_window->state & WND_STATE_VISIBLE )
 8008266:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <_UG_WindowClear+0xa8>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	7a1b      	ldrb	r3, [r3, #8]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d015      	beq.n	80082a2 <_UG_WindowClear+0x96>
            {
               gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8008276:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <_UG_WindowClear+0xa8>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	7a1a      	ldrb	r2, [r3, #8]
 800827e:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <_UG_WindowClear+0xa8>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008288:	b2d2      	uxtb	r2, r2
 800828a:	721a      	strb	r2, [r3, #8]
               gui->active_window->state |= WND_STATE_UPDATE;
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <_UG_WindowClear+0xa8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	7a1a      	ldrb	r2, [r3, #8]
 8008294:	4b07      	ldr	r3, [pc, #28]	; (80082b4 <_UG_WindowClear+0xa8>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f042 0220 	orr.w	r2, r2, #32
 800829e:	b2d2      	uxtb	r2, r2
 80082a0:	721a      	strb	r2, [r3, #8]
            }
         }
      }
      return UG_RESULT_OK;
 80082a2:	2300      	movs	r3, #0
 80082a4:	e001      	b.n	80082aa <_UG_WindowClear+0x9e>
   }
   return UG_RESULT_FAIL;
 80082a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	370c      	adds	r7, #12
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd90      	pop	{r4, r7, pc}
 80082b2:	bf00      	nop
 80082b4:	200004f4 	.word	0x200004f4

080082b8 <UG_ButtonCreate>:
const UG_COLOR pal_button_released[] = {
    C_PAL_BUTTON_RELEASED
};

UG_RESULT UG_ButtonCreate( UG_WINDOW* wnd, UG_BUTTON* btn, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	4611      	mov	r1, r2
 80082c4:	461a      	mov	r2, r3
 80082c6:	460b      	mov	r3, r1
 80082c8:	71fb      	strb	r3, [r7, #7]
 80082ca:	4613      	mov	r3, r2
 80082cc:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7fe fff5 	bl	80072be <_UG_GetFreeObject>
 80082d4:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d102      	bne.n	80082e2 <UG_ButtonCreate+0x2a>
 80082dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082e0:	e062      	b.n	80083a8 <UG_ButtonCreate+0xf0>

   /* Initialize object-specific parameters */
   btn->state = BTN_STATE_RELEASED;
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	2200      	movs	r2, #0
 80082e6:	701a      	strb	r2, [r3, #0]
   btn->bc = wnd->bc;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	899a      	ldrh	r2, [r3, #12]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	809a      	strh	r2, [r3, #4]
   btn->fc = wnd->fc;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	895a      	ldrh	r2, [r3, #10]
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	805a      	strh	r2, [r3, #2]
   btn->abc = wnd->bc;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	899a      	ldrh	r2, [r3, #12]
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	811a      	strh	r2, [r3, #8]
   btn->afc = wnd->fc;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	895a      	ldrh	r2, [r3, #10]
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	80da      	strh	r2, [r3, #6]
   btn->style = BTN_STYLE_3D;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2201      	movs	r2, #1
 800830c:	705a      	strb	r2, [r3, #1]
   btn->align = ALIGN_CENTER;
 800830e:	68bb      	ldr	r3, [r7, #8]
 8008310:	2212      	movs	r2, #18
 8008312:	741a      	strb	r2, [r3, #16]
   btn->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8008314:	f7fd f9da 	bl	80056cc <UG_GetGUI>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <UG_ButtonCreate+0x70>
 800831e:	f7fd f9d5 	bl	80056cc <UG_GetGUI>
 8008322:	4603      	mov	r3, r0
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	e000      	b.n	800832a <UG_ButtonCreate+0x72>
 8008328:	2300      	movs	r3, #0
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	60d3      	str	r3, [r2, #12]
   btn->str = "-";
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	4a1f      	ldr	r2, [pc, #124]	; (80083b0 <UG_ButtonCreate+0xf8>)
 8008332:	615a      	str	r2, [r3, #20]

   /* Initialize standard object parameters */
   obj->update = _UG_ButtonUpdate;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	4a1f      	ldr	r2, [pc, #124]	; (80083b4 <UG_ButtonCreate+0xfc>)
 8008338:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_BUTTON;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2201      	movs	r2, #1
 800833e:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	2200      	movs	r2, #0
 8008344:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	88ba      	ldrh	r2, [r7, #4]
 800834a:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 800834c:	697b      	ldr	r3, [r7, #20]
 800834e:	8c3a      	ldrh	r2, [r7, #32]
 8008350:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008356:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800835c:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008364:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800836c:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008374:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800837c:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	79fa      	ldrb	r2, [r7, #7]
 8008382:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 800838c:	b2da      	uxtb	r2, r3
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	701a      	strb	r2, [r3, #0]
   #ifdef UGUI_USE_TOUCH
   obj->state |= OBJ_STATE_TOUCH_ENABLE;
   #endif
   obj->data = (void*)btn;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	68ba      	ldr	r2, [r7, #8]
 8008396:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	b2da      	uxtb	r2, r3
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}
 80083b0:	0800d408 	.word	0x0800d408
 80083b4:	08008615 	.word	0x08008615

080083b8 <UG_ButtonSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
 80083c4:	4613      	mov	r3, r2
 80083c6:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80083d0:	78fb      	ldrb	r3, [r7, #3]
 80083d2:	461a      	mov	r2, r3
 80083d4:	2101      	movs	r1, #1
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f7fe fe15 	bl	8007006 <_UG_SearchObject>
 80083dc:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d102      	bne.n	80083ea <UG_ButtonSetForeColor+0x32>
 80083e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e8:	e00d      	b.n	8008406 <UG_ButtonSetForeColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	69db      	ldr	r3, [r3, #28]
 80083ee:	60bb      	str	r3, [r7, #8]
   btn->fc = fc;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	883a      	ldrh	r2, [r7, #0]
 80083f4:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <UG_ButtonSetBackColor>:

UG_RESULT UG_ButtonSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
 8008416:	460b      	mov	r3, r1
 8008418:	70fb      	strb	r3, [r7, #3]
 800841a:	4613      	mov	r3, r2
 800841c:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008426:	78fb      	ldrb	r3, [r7, #3]
 8008428:	461a      	mov	r2, r3
 800842a:	2101      	movs	r1, #1
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7fe fdea 	bl	8007006 <_UG_SearchObject>
 8008432:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d102      	bne.n	8008440 <UG_ButtonSetBackColor+0x32>
 800843a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800843e:	e00d      	b.n	800845c <UG_ButtonSetBackColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	60bb      	str	r3, [r7, #8]
   btn->bc = bc;
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	883a      	ldrh	r2, [r7, #0]
 800844a:	809a      	strh	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008454:	b2da      	uxtb	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <UG_ButtonSetText>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b086      	sub	sp, #24
 8008468:	af00      	add	r7, sp, #0
 800846a:	60f8      	str	r0, [r7, #12]
 800846c:	460b      	mov	r3, r1
 800846e:	607a      	str	r2, [r7, #4]
 8008470:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 8008476:	2300      	movs	r3, #0
 8008478:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800847a:	7afb      	ldrb	r3, [r7, #11]
 800847c:	461a      	mov	r2, r3
 800847e:	2101      	movs	r1, #1
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7fe fdc0 	bl	8007006 <_UG_SearchObject>
 8008486:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d102      	bne.n	8008494 <UG_ButtonSetText+0x30>
 800848e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008492:	e00d      	b.n	80084b0 <UG_ButtonSetText+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	69db      	ldr	r3, [r3, #28]
 8008498:	613b      	str	r3, [r7, #16]
   btn->str = str;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	687a      	ldr	r2, [r7, #4]
 800849e:	615a      	str	r2, [r3, #20]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	781b      	ldrb	r3, [r3, #0]
 80084a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <UG_ButtonSetFont>:

UG_RESULT UG_ButtonSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	460b      	mov	r3, r1
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 80084c6:	2300      	movs	r3, #0
 80084c8:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80084ce:	7afb      	ldrb	r3, [r7, #11]
 80084d0:	461a      	mov	r2, r3
 80084d2:	2101      	movs	r1, #1
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7fe fd96 	bl	8007006 <_UG_SearchObject>
 80084da:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d102      	bne.n	80084e8 <UG_ButtonSetFont+0x30>
 80084e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084e6:	e00d      	b.n	8008504 <UG_ButtonSetFont+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	69db      	ldr	r3, [r3, #28]
 80084ec:	613b      	str	r3, [r7, #16]
   btn->font = font;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	60da      	str	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}

0800850c <UG_ButtonSetStyle>:

UG_RESULT UG_ButtonSetStyle( UG_WINDOW* wnd, UG_U8 id, UG_U8 style )
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	460b      	mov	r3, r1
 8008516:	70fb      	strb	r3, [r7, #3]
 8008518:	4613      	mov	r3, r2
 800851a:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 800851c:	2300      	movs	r3, #0
 800851e:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008520:	2300      	movs	r3, #0
 8008522:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008524:	78fb      	ldrb	r3, [r7, #3]
 8008526:	461a      	mov	r2, r3
 8008528:	2101      	movs	r1, #1
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f7fe fd6b 	bl	8007006 <_UG_SearchObject>
 8008530:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <UG_ButtonSetStyle+0x32>
 8008538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800853c:	e065      	b.n	800860a <UG_ButtonSetStyle+0xfe>

   btn = (UG_BUTTON*)(obj->data);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	69db      	ldr	r3, [r3, #28]
 8008542:	60bb      	str	r3, [r7, #8]

   /* Select color scheme */
   btn->style &= ~(BTN_STYLE_USE_ALTERNATE_COLORS | BTN_STYLE_TOGGLE_COLORS | BTN_STYLE_NO_BORDERS | BTN_STYLE_NO_FILL);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	785b      	ldrb	r3, [r3, #1]
 8008548:	f023 031e 	bic.w	r3, r3, #30
 800854c:	b2da      	uxtb	r2, r3
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	705a      	strb	r2, [r3, #1]
   btn->state |= BTN_STATE_ALWAYS_REDRAW;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	f043 0302 	orr.w	r3, r3, #2
 800855a:	b2da      	uxtb	r2, r3
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	701a      	strb	r2, [r3, #0]
   if ( style & BTN_STYLE_NO_BORDERS )
 8008560:	78bb      	ldrb	r3, [r7, #2]
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d006      	beq.n	8008578 <UG_ButtonSetStyle+0x6c>
   {
      btn->style |= BTN_STYLE_NO_BORDERS;
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	785b      	ldrb	r3, [r3, #1]
 800856e:	f043 0308 	orr.w	r3, r3, #8
 8008572:	b2da      	uxtb	r2, r3
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_NO_FILL )
 8008578:	78bb      	ldrb	r3, [r7, #2]
 800857a:	f003 0310 	and.w	r3, r3, #16
 800857e:	2b00      	cmp	r3, #0
 8008580:	d006      	beq.n	8008590 <UG_ButtonSetStyle+0x84>
   {
      btn->style |= BTN_STYLE_NO_FILL;
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	f043 0310 	orr.w	r3, r3, #16
 800858a:	b2da      	uxtb	r2, r3
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_TOGGLE_COLORS )
 8008590:	78bb      	ldrb	r3, [r7, #2]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d007      	beq.n	80085aa <UG_ButtonSetStyle+0x9e>
   {
      btn->style |= BTN_STYLE_TOGGLE_COLORS;
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	f043 0302 	orr.w	r3, r3, #2
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	705a      	strb	r2, [r3, #1]
 80085a8:	e013      	b.n	80085d2 <UG_ButtonSetStyle+0xc6>
   }
   else if ( style & BTN_STYLE_USE_ALTERNATE_COLORS )
 80085aa:	78bb      	ldrb	r3, [r7, #2]
 80085ac:	f003 0304 	and.w	r3, r3, #4
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d007      	beq.n	80085c4 <UG_ButtonSetStyle+0xb8>
   {
      btn->style |= BTN_STYLE_USE_ALTERNATE_COLORS;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	785b      	ldrb	r3, [r3, #1]
 80085b8:	f043 0304 	orr.w	r3, r3, #4
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	705a      	strb	r2, [r3, #1]
 80085c2:	e006      	b.n	80085d2 <UG_ButtonSetStyle+0xc6>
   }
   else
   {
      btn->state &= ~BTN_STATE_ALWAYS_REDRAW;
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	f023 0302 	bic.w	r3, r3, #2
 80085cc:	b2da      	uxtb	r2, r3
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	701a      	strb	r2, [r3, #0]
   }

   /* 3D or 2D */
   if ( style & BTN_STYLE_3D )
 80085d2:	78bb      	ldrb	r3, [r7, #2]
 80085d4:	f003 0301 	and.w	r3, r3, #1
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d007      	beq.n	80085ec <UG_ButtonSetStyle+0xe0>
   {
      btn->style |= BTN_STYLE_3D;
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	785b      	ldrb	r3, [r3, #1]
 80085e0:	f043 0301 	orr.w	r3, r3, #1
 80085e4:	b2da      	uxtb	r2, r3
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	705a      	strb	r2, [r3, #1]
 80085ea:	e006      	b.n	80085fa <UG_ButtonSetStyle+0xee>
   }
   else
   {
      btn->style &= ~BTN_STYLE_3D;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	785b      	ldrb	r3, [r3, #1]
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	b2da      	uxtb	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	705a      	strb	r2, [r3, #1]
   }   
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008602:	b2da      	uxtb	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008608:	2300      	movs	r3, #0
}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <_UG_ButtonUpdate>:
   return align;
}


static void _UG_ButtonUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008614:	b590      	push	{r4, r7, lr}
 8008616:	b091      	sub	sp, #68	; 0x44
 8008618:	af02      	add	r7, sp, #8
 800861a:	6078      	str	r0, [r7, #4]
 800861c:	6039      	str	r1, [r7, #0]
   UG_BUTTON* btn;
   UG_AREA a;
   UG_TEXT txt;
   UG_U8 d,o=0;
 800861e:	2300      	movs	r3, #0
 8008620:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   /* Get object-specific data */
   btn = (UG_BUTTON*)(obj->data);
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	69db      	ldr	r3, [r3, #28]
 8008628:	633b      	str	r3, [r7, #48]	; 0x30
   #endif

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	f003 0320 	and.w	r3, r3, #32
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 8181 	beq.w	800893a <_UG_ButtonUpdate+0x326>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	781b      	ldrb	r3, [r3, #0]
 800863c:	f003 0308 	and.w	r3, r3, #8
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8157 	beq.w	80088f4 <_UG_ButtonUpdate+0x2e0>
      {
         /* Full redraw necessary? */
         if ( (obj->state & OBJ_STATE_REDRAW) || (btn->state & BTN_STATE_ALWAYS_REDRAW) )
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <_UG_ButtonUpdate+0x4c>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 8108 	beq.w	8008870 <_UG_ButtonUpdate+0x25c>
         {
            UG_WindowGetArea(wnd,&a);
 8008660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f7ff fbfe 	bl	8007e68 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008672:	b29a      	uxth	r2, r3
 8008674:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008678:	b29b      	uxth	r3, r3
 800867a:	4413      	add	r3, r2
 800867c:	b29b      	uxth	r3, r3
 800867e:	b21a      	sxth	r2, r3
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800868a:	b29a      	uxth	r2, r3
 800868c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008690:	b29b      	uxth	r3, r3
 8008692:	4413      	add	r3, r2
 8008694:	b29b      	uxth	r3, r3
 8008696:	b21a      	sxth	r2, r3
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80086a2:	b29a      	uxth	r2, r3
 80086a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80086a8:	b29b      	uxth	r3, r3
 80086aa:	4413      	add	r3, r2
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	b21a      	sxth	r2, r3
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	4413      	add	r3, r2
 80086c4:	b29b      	uxth	r3, r3
 80086c6:	b21a      	sxth	r2, r3
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80086d8:	429a      	cmp	r2, r3
 80086da:	f300 812b 	bgt.w	8008934 <_UG_ButtonUpdate+0x320>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	f300 8124 	bgt.w	8008938 <_UG_ButtonUpdate+0x324>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            /* 3D or 2D style? */
            d = ( btn->style & BTN_STYLE_3D )? 3:1;
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	785b      	ldrb	r3, [r3, #1]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <_UG_ButtonUpdate+0xec>
 80086fc:	2303      	movs	r3, #3
 80086fe:	e000      	b.n	8008702 <_UG_ButtonUpdate+0xee>
 8008700:	2301      	movs	r3, #1
 8008702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            txt.bc = btn->bc;
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	889b      	ldrh	r3, [r3, #4]
 800870a:	837b      	strh	r3, [r7, #26]
            txt.fc = btn->fc;
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	885b      	ldrh	r3, [r3, #2]
 8008710:	833b      	strh	r3, [r7, #24]

            if( btn->state & BTN_STATE_PRESSED )
 8008712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d01b      	beq.n	8008756 <_UG_ButtonUpdate+0x142>
            {
              /* o is the text offset, to provide a visual effect when pressed */
              o=1;
 800871e:	2301      	movs	r3, #1
 8008720:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
               /* "toggle" style? */
               if( btn->style & BTN_STYLE_TOGGLE_COLORS )
 8008724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008726:	785b      	ldrb	r3, [r3, #1]
 8008728:	f003 0302 	and.w	r3, r3, #2
 800872c:	2b00      	cmp	r3, #0
 800872e:	d006      	beq.n	800873e <_UG_ButtonUpdate+0x12a>
               {
                  /* Swap colors */
                  txt.bc = btn->fc;
 8008730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008732:	885b      	ldrh	r3, [r3, #2]
 8008734:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->bc;
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	889b      	ldrh	r3, [r3, #4]
 800873a:	833b      	strh	r3, [r7, #24]
 800873c:	e00b      	b.n	8008756 <_UG_ButtonUpdate+0x142>
               }
               /* Use alternate colors? */
               else if ( btn->style & BTN_STYLE_USE_ALTERNATE_COLORS )
 800873e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008740:	785b      	ldrb	r3, [r3, #1]
 8008742:	f003 0304 	and.w	r3, r3, #4
 8008746:	2b00      	cmp	r3, #0
 8008748:	d005      	beq.n	8008756 <_UG_ButtonUpdate+0x142>
               {
                  txt.bc = btn->abc;
 800874a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874c:	891b      	ldrh	r3, [r3, #8]
 800874e:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->afc;
 8008750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008752:	88db      	ldrh	r3, [r3, #6]
 8008754:	833b      	strh	r3, [r7, #24]
               }
            }
            if ( !(btn->style & BTN_STYLE_NO_FILL) )
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	785b      	ldrb	r3, [r3, #1]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b00      	cmp	r3, #0
 8008760:	d12d      	bne.n	80087be <_UG_ButtonUpdate+0x1aa>
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, txt.bc);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008768:	b29a      	uxth	r2, r3
 800876a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800876e:	b29b      	uxth	r3, r3
 8008770:	4413      	add	r3, r2
 8008772:	b29b      	uxth	r3, r3
 8008774:	b218      	sxth	r0, r3
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800877c:	b29a      	uxth	r2, r3
 800877e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008782:	b29b      	uxth	r3, r3
 8008784:	4413      	add	r3, r2
 8008786:	b29b      	uxth	r3, r3
 8008788:	b219      	sxth	r1, r3
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008790:	b29a      	uxth	r2, r3
 8008792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008796:	b29b      	uxth	r3, r3
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	b29b      	uxth	r3, r3
 800879c:	b21c      	sxth	r4, r3
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	b29b      	uxth	r3, r3
 80087b0:	b21a      	sxth	r2, r3
 80087b2:	8b7b      	ldrh	r3, [r7, #26]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	4613      	mov	r3, r2
 80087b8:	4622      	mov	r2, r4
 80087ba:	f7fc ffc7 	bl	800574c <UG_FillFrame>

            /* Draw button text */
            txt.a.xs = obj->a_abs.xs+d+o;
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	4413      	add	r3, r2
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	4413      	add	r3, r2
 80087d8:	b29b      	uxth	r3, r3
 80087da:	b21b      	sxth	r3, r3
 80087dc:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys+d+o;
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	4413      	add	r3, r2
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	4413      	add	r3, r2
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	b21b      	sxth	r3, r3
 80087fc:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe-d+o;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008804:	b29a      	uxth	r2, r3
 8008806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800880a:	b29b      	uxth	r3, r3
 800880c:	1ad3      	subs	r3, r2, r3
 800880e:	b29a      	uxth	r2, r3
 8008810:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008814:	b29b      	uxth	r3, r3
 8008816:	4413      	add	r3, r2
 8008818:	b29b      	uxth	r3, r3
 800881a:	b21b      	sxth	r3, r3
 800881c:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye-d+o;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008824:	b29a      	uxth	r2, r3
 8008826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800882a:	b29b      	uxth	r3, r3
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	b29a      	uxth	r2, r3
 8008830:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008834:	b29b      	uxth	r3, r3
 8008836:	4413      	add	r3, r2
 8008838:	b29b      	uxth	r3, r3
 800883a:	b21b      	sxth	r3, r3
 800883c:	82fb      	strh	r3, [r7, #22]
            txt.align = btn->align;
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	7c1b      	ldrb	r3, [r3, #16]
 8008842:	773b      	strb	r3, [r7, #28]
            txt.font = btn->font;
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	60fb      	str	r3, [r7, #12]
            txt.h_space = 2;
 800884a:	2302      	movs	r3, #2
 800884c:	83fb      	strh	r3, [r7, #30]
            txt.v_space = 2;
 800884e:	2302      	movs	r3, #2
 8008850:	843b      	strh	r3, [r7, #32]
            txt.str = btn->str;
 8008852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8008858:	f107 0308 	add.w	r3, r7, #8
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fabb 	bl	8006dd8 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800886a:	b2da      	uxtb	r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	701a      	strb	r2, [r3, #0]
#ifdef UGUI_USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
#endif
         }
         /* Draw button frame */
         if ( !(btn->style & BTN_STYLE_NO_BORDERS) )
 8008870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008872:	785b      	ldrb	r3, [r3, #1]
 8008874:	f003 0308 	and.w	r3, r3, #8
 8008878:	2b00      	cmp	r3, #0
 800887a:	d153      	bne.n	8008924 <_UG_ButtonUpdate+0x310>
         {
             if ( btn->style & BTN_STYLE_3D )
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d019      	beq.n	80088bc <_UG_ButtonUpdate+0x2a8>
             {  /* 3D */
                _UG_DrawObjectFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye, (btn->state&BTN_STATE_PRESSED)?(UG_COLOR*)pal_button_pressed:(UG_COLOR*)pal_button_released);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80088a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d001      	beq.n	80088b0 <_UG_ButtonUpdate+0x29c>
 80088ac:	4b24      	ldr	r3, [pc, #144]	; (8008940 <_UG_ButtonUpdate+0x32c>)
 80088ae:	e000      	b.n	80088b2 <_UG_ButtonUpdate+0x29e>
 80088b0:	4b24      	ldr	r3, [pc, #144]	; (8008944 <_UG_ButtonUpdate+0x330>)
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	4623      	mov	r3, r4
 80088b6:	f7fe fbe1 	bl	800707c <_UG_DrawObjectFrame>
 80088ba:	e033      	b.n	8008924 <_UG_ButtonUpdate+0x310>
             }
             else
             {  /* 2D */
                 UG_DrawFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye,(btn->state&BTN_STATE_PRESSED)?btn->abc:btn->afc);
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80088ce:	683b      	ldr	r3, [r7, #0]
 80088d0:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80088d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	f003 0301 	and.w	r3, r3, #1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d002      	beq.n	80088e6 <_UG_ButtonUpdate+0x2d2>
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	891b      	ldrh	r3, [r3, #8]
 80088e4:	e001      	b.n	80088ea <_UG_ButtonUpdate+0x2d6>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	88db      	ldrh	r3, [r3, #6]
 80088ea:	9300      	str	r3, [sp, #0]
 80088ec:	4623      	mov	r3, r4
 80088ee:	f7fd f816 	bl	800591e <UG_DrawFrame>
 80088f2:	e017      	b.n	8008924 <_UG_ButtonUpdate+0x310>
             }
         }
      }
      else
      {
          if ( !(btn->style & BTN_STYLE_NO_FILL) )
 80088f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088f6:	785b      	ldrb	r3, [r3, #1]
 80088f8:	f003 0310 	and.w	r3, r3, #16
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d111      	bne.n	8008924 <_UG_ButtonUpdate+0x310>
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	899b      	ldrh	r3, [r3, #12]
 800891c:	9300      	str	r3, [sp, #0]
 800891e:	4623      	mov	r3, r4
 8008920:	f7fc ff14 	bl	800574c <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	f023 0320 	bic.w	r3, r3, #32
 800892c:	b2da      	uxtb	r2, r3
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	701a      	strb	r2, [r3, #0]
 8008932:	e002      	b.n	800893a <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008934:	bf00      	nop
 8008936:	e000      	b.n	800893a <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008938:	bf00      	nop
   }
}
 800893a:	373c      	adds	r7, #60	; 0x3c
 800893c:	46bd      	mov	sp, r7
 800893e:	bd90      	pop	{r4, r7, pc}
 8008940:	0802064c 	.word	0x0802064c
 8008944:	08020664 	.word	0x08020664

08008948 <UG_ProgressCreate>:
const UG_COLOR pal_progress[] = {
    C_PAL_PROGRESS
};

UG_RESULT UG_ProgressCreate( UG_WINDOW* wnd, UG_PROGRESS* pgb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4611      	mov	r1, r2
 8008954:	461a      	mov	r2, r3
 8008956:	460b      	mov	r3, r1
 8008958:	71fb      	strb	r3, [r7, #7]
 800895a:	4613      	mov	r3, r2
 800895c:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7fe fcad 	bl	80072be <_UG_GetFreeObject>
 8008964:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d102      	bne.n	8008972 <UG_ProgressCreate+0x2a>
 800896c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008970:	e047      	b.n	8008a02 <UG_ProgressCreate+0xba>

   /* Initialize object-specific parameters */
   pgb->style = PGB_STYLE_3D;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2201      	movs	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
   pgb->fc = wnd->fc;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	895a      	ldrh	r2, [r3, #10]
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	805a      	strh	r2, [r3, #2]
   pgb->bc = wnd->bc;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	899a      	ldrh	r2, [r3, #12]
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	809a      	strh	r2, [r3, #4]
   pgb->progress = 0;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2200      	movs	r2, #0
 800898c:	719a      	strb	r2, [r3, #6]

   /* Initialize standard object parameters */
   obj->update = _UG_ProgressUpdate;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	4a1e      	ldr	r2, [pc, #120]	; (8008a0c <UG_ProgressCreate+0xc4>)
 8008992:	605a      	str	r2, [r3, #4]
   obj->type = OBJ_TYPE_PROGRESS;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2205      	movs	r2, #5
 8008998:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	2200      	movs	r2, #0
 800899e:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	88ba      	ldrh	r2, [r7, #4]
 80089a4:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	8c3a      	ldrh	r2, [r7, #32]
 80089aa:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80089b0:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80089b6:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089be:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 80089c0:	697b      	ldr	r3, [r7, #20]
 80089c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089c6:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089ce:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80089d6:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	79fa      	ldrb	r2, [r7, #7]
 80089dc:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)pgb;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	68ba      	ldr	r2, [r7, #8]
 80089f0:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	b2da      	uxtb	r2, r3
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3718      	adds	r7, #24
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	08008ae5 	.word	0x08008ae5

08008a10 <UG_ProgressSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008a20:	2300      	movs	r3, #0
 8008a22:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008a28:	78fb      	ldrb	r3, [r7, #3]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	2105      	movs	r1, #5
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f7fe fae9 	bl	8007006 <_UG_SearchObject>
 8008a34:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d102      	bne.n	8008a42 <UG_ProgressSetForeColor+0x32>
 8008a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a40:	e00d      	b.n	8008a5e <UG_ProgressSetForeColor+0x4e>

   pgb = (UG_PROGRESS*)(obj->data);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	69db      	ldr	r3, [r3, #28]
 8008a46:	60bb      	str	r3, [r7, #8]
   pgb->fc = fc;
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	883a      	ldrh	r2, [r7, #0]
 8008a4c:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a56:	b2da      	uxtb	r2, r3
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}

08008a66 <UG_ProgressSetProgress>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetProgress( UG_WINDOW* wnd, UG_U8 id, UG_U8 progress )
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b084      	sub	sp, #16
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	70fb      	strb	r3, [r7, #3]
 8008a72:	4613      	mov	r3, r2
 8008a74:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008a7e:	78fb      	ldrb	r3, [r7, #3]
 8008a80:	461a      	mov	r2, r3
 8008a82:	2105      	movs	r1, #5
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f7fe fabe 	bl	8007006 <_UG_SearchObject>
 8008a8a:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d102      	bne.n	8008a98 <UG_ProgressSetProgress+0x32>
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a96:	e020      	b.n	8008ada <UG_ProgressSetProgress+0x74>

   progress = progress > 100 ? 100 : progress;
 8008a98:	78bb      	ldrb	r3, [r7, #2]
 8008a9a:	2b64      	cmp	r3, #100	; 0x64
 8008a9c:	bf28      	it	cs
 8008a9e:	2364      	movcs	r3, #100	; 0x64
 8008aa0:	70bb      	strb	r3, [r7, #2]

   pgb = (UG_PROGRESS*)(obj->data);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	60bb      	str	r3, [r7, #8]

   // Only update if different
   if(progress != pgb->progress)
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	799b      	ldrb	r3, [r3, #6]
 8008aac:	78ba      	ldrb	r2, [r7, #2]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d012      	beq.n	8008ad8 <UG_ProgressSetProgress+0x72>
   {
      // Only redraw if new progress is less then actual(Need to redraw the background)
      obj->state |= OBJ_STATE_UPDATE | ((progress < pgb->progress) ? OBJ_STATE_REDRAW : 0);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	b25b      	sxtb	r3, r3
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	7992      	ldrb	r2, [r2, #6]
 8008abc:	78b9      	ldrb	r1, [r7, #2]
 8008abe:	4291      	cmp	r1, r2
 8008ac0:	d201      	bcs.n	8008ac6 <UG_ProgressSetProgress+0x60>
 8008ac2:	2260      	movs	r2, #96	; 0x60
 8008ac4:	e000      	b.n	8008ac8 <UG_ProgressSetProgress+0x62>
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	b25b      	sxtb	r3, r3
 8008acc:	b2da      	uxtb	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	701a      	strb	r2, [r3, #0]
      pgb->progress = progress;
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	78ba      	ldrb	r2, [r7, #2]
 8008ad6:	719a      	strb	r2, [r3, #6]
   }

   return UG_RESULT_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3710      	adds	r7, #16
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <_UG_ProgressUpdate>:
   }
   return c;
}

static void _UG_ProgressUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008ae4:	b590      	push	{r4, r7, lr}
 8008ae6:	b08b      	sub	sp, #44	; 0x2c
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	6078      	str	r0, [r7, #4]
 8008aec:	6039      	str	r1, [r7, #0]
   UG_PROGRESS* pgb;
   UG_AREA a;
   UG_U8 d=0;
 8008aee:	2300      	movs	r3, #0
 8008af0:	77fb      	strb	r3, [r7, #31]
   UG_S16 w, wps, wpe;

   /* Get object-specific data */
   pgb = (UG_PROGRESS*)(obj->data);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	61bb      	str	r3, [r7, #24]

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	f003 0320 	and.w	r3, r3, #32
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f000 81a5 	beq.w	8008e50 <_UG_ProgressUpdate+0x36c>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	f003 0308 	and.w	r3, r3, #8
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f000 8162 	beq.w	8008dd8 <_UG_ProgressUpdate+0x2f4>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	f000 818c 	beq.w	8008e3a <_UG_ProgressUpdate+0x356>
         {
            UG_WindowGetArea(wnd,&a);
 8008b22:	f107 0308 	add.w	r3, r7, #8
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7ff f99d 	bl	8007e68 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	b21a      	sxth	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008b4c:	b29a      	uxth	r2, r3
 8008b4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	4413      	add	r3, r2
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	b21a      	sxth	r2, r3
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008b64:	b29a      	uxth	r2, r3
 8008b66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	4413      	add	r3, r2
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	b21a      	sxth	r2, r3
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008b7c:	b29a      	uxth	r2, r3
 8008b7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	4413      	add	r3, r2
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	b21a      	sxth	r2, r3
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	81da      	strh	r2, [r3, #14]

            if ( obj->a_abs.ye > wnd->ye ) return;
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	f300 8155 	bgt.w	8008e4a <_UG_ProgressUpdate+0x366>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	f300 814e 	bgt.w	8008e4e <_UG_ProgressUpdate+0x36a>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            d = 1;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	77fb      	strb	r3, [r7, #31]
            /* 3D or 2D style? */
            if ( !(pgb->style & PGB_STYLE_NO_BORDERS) )
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	781b      	ldrb	r3, [r3, #0]
 8008bba:	f003 0302 	and.w	r3, r3, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d12e      	bne.n	8008c20 <_UG_ProgressUpdate+0x13c>
            {
               if ( pgb->style & PGB_STYLE_3D )
 8008bc2:	69bb      	ldr	r3, [r7, #24]
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d013      	beq.n	8008bf6 <_UG_ProgressUpdate+0x112>
               {  /* 3D */
                  _UG_DrawObjectFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, (UG_COLOR*)pal_progress);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008be6:	4c9c      	ldr	r4, [pc, #624]	; (8008e58 <_UG_ProgressUpdate+0x374>)
 8008be8:	9400      	str	r4, [sp, #0]
 8008bea:	f7fe fa47 	bl	800707c <_UG_DrawObjectFrame>
                  d += 3;
 8008bee:	7ffb      	ldrb	r3, [r7, #31]
 8008bf0:	3303      	adds	r3, #3
 8008bf2:	77fb      	strb	r3, [r7, #31]
 8008bf4:	e014      	b.n	8008c20 <_UG_ProgressUpdate+0x13c>
               }
               else
               {  /* 2D */
                  UG_DrawFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, pgb->fc);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	885b      	ldrh	r3, [r3, #2]
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	4623      	mov	r3, r4
 8008c16:	f7fc fe82 	bl	800591e <UG_DrawFrame>
                  d += 1;
 8008c1a:	7ffb      	ldrb	r3, [r7, #31]
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	77fb      	strb	r3, [r7, #31]
               }
            }
            
            w   = ((obj->a_abs.xe-d)-(obj->a_abs.xs+d));
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008c26:	b29a      	uxth	r2, r3
 8008c28:	7ffb      	ldrb	r3, [r7, #31]
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	1ad3      	subs	r3, r2, r3
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c36:	b299      	uxth	r1, r3
 8008c38:	7ffb      	ldrb	r3, [r7, #31]
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	440b      	add	r3, r1
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	82fb      	strh	r3, [r7, #22]
            wps = w * pgb->progress / 100;
 8008c46:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	7992      	ldrb	r2, [r2, #6]
 8008c4e:	fb02 f303 	mul.w	r3, r2, r3
 8008c52:	4a82      	ldr	r2, [pc, #520]	; (8008e5c <_UG_ProgressUpdate+0x378>)
 8008c54:	fb82 1203 	smull	r1, r2, r2, r3
 8008c58:	1152      	asrs	r2, r2, #5
 8008c5a:	17db      	asrs	r3, r3, #31
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	82bb      	strh	r3, [r7, #20]
            wpe = w - wps;
 8008c60:	8afa      	ldrh	r2, [r7, #22]
 8008c62:	8abb      	ldrh	r3, [r7, #20]
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	827b      	strh	r3, [r7, #18]

            if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008c6a:	69bb      	ldr	r3, [r7, #24]
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	f003 0308 	and.w	r3, r3, #8
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d17d      	bne.n	8008d72 <_UG_ProgressUpdate+0x28e>
                /* What's this for? Drawing a frame before drawing the remaining frames on top on it? Seems to do nothing, waste power? */
               //UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);

            // Draw remaining frame first
            if(wpe > 0)
 8008c76:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dd79      	ble.n	8008d72 <_UG_ProgressUpdate+0x28e>
            {
               UG_S16 xs = obj->a_abs.xs + d + wps;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	7ffb      	ldrb	r3, [r7, #31]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	8abb      	ldrh	r3, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	83bb      	strh	r3, [r7, #28]
               UG_S16 xe = obj->a_abs.xe - d;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	7ffb      	ldrb	r3, [r7, #31]
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	1ad3      	subs	r3, r2, r3
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	823b      	strh	r3, [r7, #16]
               
               if ( pgb->style & PGB_STYLE_FORE_COLOR_MESH )
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	781b      	ldrb	r3, [r3, #0]
 8008cac:	f003 0304 	and.w	r3, r3, #4
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d042      	beq.n	8008d3a <_UG_ProgressUpdate+0x256>
               {
                  // FIXME: Need fix, if start at 0, it is shifted 1 pixel right.
                  // Needed to match mesh pattern, otherwise it would "scroll right" 
                  if((((obj->a_abs.xs+d) & 1) && (wps & 1)) || (!((obj->a_abs.xs+d) & 1) && !(wps & 1)))
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	7ffb      	ldrb	r3, [r7, #31]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	f003 0301 	and.w	r3, r3, #1
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d004      	beq.n	8008cd2 <_UG_ProgressUpdate+0x1ee>
 8008cc8:	8abb      	ldrh	r3, [r7, #20]
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10e      	bne.n	8008cf0 <_UG_ProgressUpdate+0x20c>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cd8:	461a      	mov	r2, r3
 8008cda:	7ffb      	ldrb	r3, [r7, #31]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d10a      	bne.n	8008cfc <_UG_ProgressUpdate+0x218>
 8008ce6:	8abb      	ldrh	r3, [r7, #20]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d105      	bne.n	8008cfc <_UG_ProgressUpdate+0x218>
                     xs++;
 8008cf0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	3301      	adds	r3, #1
 8008cf8:	b29b      	uxth	r3, r3
 8008cfa:	83bb      	strh	r3, [r7, #28]
                  UG_DrawMesh (xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, 2, pgb->fc);
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	7ffb      	ldrb	r3, [r7, #31]
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	4413      	add	r3, r2
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	b219      	sxth	r1, r3
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	7ffb      	ldrb	r3, [r7, #31]
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	b21c      	sxth	r4, r3
 8008d20:	69bb      	ldr	r3, [r7, #24]
 8008d22:	885b      	ldrh	r3, [r3, #2]
 8008d24:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008d28:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008d2c:	9301      	str	r3, [sp, #4]
 8008d2e:	2302      	movs	r3, #2
 8008d30:	9300      	str	r3, [sp, #0]
 8008d32:	4623      	mov	r3, r4
 8008d34:	f7fc fd7c 	bl	8005830 <UG_DrawMesh>
 8008d38:	e01b      	b.n	8008d72 <_UG_ProgressUpdate+0x28e>
               }
               else
               {
                  UG_FillFrame(xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, pgb->bc);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	7ffb      	ldrb	r3, [r7, #31]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	4413      	add	r3, r2
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	b219      	sxth	r1, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d52:	b29a      	uxth	r2, r3
 8008d54:	7ffb      	ldrb	r3, [r7, #31]
 8008d56:	b29b      	uxth	r3, r3
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	b21c      	sxth	r4, r3
 8008d5e:	69bb      	ldr	r3, [r7, #24]
 8008d60:	889b      	ldrh	r3, [r3, #4]
 8008d62:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008d66:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	4623      	mov	r3, r4
 8008d6e:	f7fc fced 	bl	800574c <UG_FillFrame>
               }
            }

            // Draw elapsed frame
            if(pgb->progress > 0)
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	799b      	ldrb	r3, [r3, #6]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d05f      	beq.n	8008e3a <_UG_ProgressUpdate+0x356>
            {
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xs+d+wps, obj->a_abs.ye-d, pgb->fc);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	7ffb      	ldrb	r3, [r7, #31]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4413      	add	r3, r2
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	b218      	sxth	r0, r3
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	7ffb      	ldrb	r3, [r7, #31]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	b219      	sxth	r1, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	7ffb      	ldrb	r3, [r7, #31]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	b29a      	uxth	r2, r3
 8008dae:	8abb      	ldrh	r3, [r7, #20]
 8008db0:	4413      	add	r3, r2
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	b21c      	sxth	r4, r3
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	7ffb      	ldrb	r3, [r7, #31]
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	1ad3      	subs	r3, r2, r3
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	b21a      	sxth	r2, r3
 8008dc8:	69bb      	ldr	r3, [r7, #24]
 8008dca:	885b      	ldrh	r3, [r3, #2]
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	4622      	mov	r2, r4
 8008dd2:	f7fc fcbb 	bl	800574c <UG_FillFrame>
 8008dd6:	e030      	b.n	8008e3a <_UG_ProgressUpdate+0x356>
#endif
         }
      }
      else
      {
         if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	f003 0308 	and.w	r3, r3, #8
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d12a      	bne.n	8008e3a <_UG_ProgressUpdate+0x356>
            UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	7ffb      	ldrb	r3, [r7, #31]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	4413      	add	r3, r2
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	b218      	sxth	r0, r3
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	7ffb      	ldrb	r3, [r7, #31]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	4413      	add	r3, r2
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	b219      	sxth	r1, r3
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008e0e:	b29a      	uxth	r2, r3
 8008e10:	7ffb      	ldrb	r3, [r7, #31]
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	b21c      	sxth	r4, r3
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008e20:	b29a      	uxth	r2, r3
 8008e22:	7ffb      	ldrb	r3, [r7, #31]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	b21a      	sxth	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	899b      	ldrh	r3, [r3, #12]
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4613      	mov	r3, r2
 8008e34:	4622      	mov	r2, r4
 8008e36:	f7fc fc89 	bl	800574c <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f023 0320 	bic.w	r3, r3, #32
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	701a      	strb	r2, [r3, #0]
 8008e48:	e002      	b.n	8008e50 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008e4a:	bf00      	nop
 8008e4c:	e000      	b.n	8008e50 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008e4e:	bf00      	nop
   }
}
 8008e50:	3724      	adds	r7, #36	; 0x24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd90      	pop	{r4, r7, pc}
 8008e56:	bf00      	nop
 8008e58:	0802067c 	.word	0x0802067c
 8008e5c:	51eb851f 	.word	0x51eb851f

08008e60 <UG_TextboxCreate>:

/* Static functions */
static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj);

UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4611      	mov	r1, r2
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	460b      	mov	r3, r1
 8008e70:	71fb      	strb	r3, [r7, #7]
 8008e72:	4613      	mov	r3, r2
 8008e74:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008e76:	68f8      	ldr	r0, [r7, #12]
 8008e78:	f7fe fa21 	bl	80072be <_UG_GetFreeObject>
 8008e7c:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <UG_TextboxCreate+0x2a>
 8008e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e88:	e05d      	b.n	8008f46 <UG_TextboxCreate+0xe6>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	601a      	str	r2, [r3, #0]
   txb->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8008e90:	f7fc fc1c 	bl	80056cc <UG_GetGUI>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d004      	beq.n	8008ea4 <UG_TextboxCreate+0x44>
 8008e9a:	f7fc fc17 	bl	80056cc <UG_GetGUI>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	e000      	b.n	8008ea6 <UG_TextboxCreate+0x46>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	68ba      	ldr	r2, [r7, #8]
 8008ea8:	6053      	str	r3, [r2, #4]
   txb->style = 0; /* reserved */
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	2200      	movs	r2, #0
 8008eae:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	895a      	ldrh	r2, [r3, #10]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	899a      	ldrh	r2, [r3, #12]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2212      	movs	r2, #18
 8008ec4:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	4a1e      	ldr	r2, [pc, #120]	; (8008f50 <UG_TextboxCreate+0xf0>)
 8008ed6:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_TEXTBOX;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	2202      	movs	r2, #2
 8008edc:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	88ba      	ldrh	r2, [r7, #4]
 8008ee8:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	8c3a      	ldrh	r2, [r7, #32]
 8008eee:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ef4:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008efa:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f02:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f0a:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f12:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f1a:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	79fa      	ldrb	r2, [r7, #7]
 8008f20:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008f2a:	b2da      	uxtb	r2, r3
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	f023 0301 	bic.w	r3, r3, #1
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3718      	adds	r7, #24
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	080090ff 	.word	0x080090ff

08008f54 <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	70fb      	strb	r3, [r7, #3]
 8008f60:	4613      	mov	r3, r2
 8008f62:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008f68:	2300      	movs	r3, #0
 8008f6a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2102      	movs	r1, #2
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f7fe f847 	bl	8007006 <_UG_SearchObject>
 8008f78:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d102      	bne.n	8008f86 <UG_TextboxSetForeColor+0x32>
 8008f80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f84:	e00d      	b.n	8008fa2 <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	883a      	ldrh	r2, [r7, #0]
 8008f90:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	460b      	mov	r3, r1
 8008fb4:	70fb      	strb	r3, [r7, #3]
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008fc2:	78fb      	ldrb	r3, [r7, #3]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f7fe f81c 	bl	8007006 <_UG_SearchObject>
 8008fce:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d102      	bne.n	8008fdc <UG_TextboxSetBackColor+0x32>
 8008fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fda:	e00d      	b.n	8008ff8 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	69db      	ldr	r3, [r3, #28]
 8008fe0:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	883a      	ldrh	r2, [r7, #0]
 8008fe6:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ff0:	b2da      	uxtb	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3710      	adds	r7, #16
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af00      	add	r7, sp, #0
 8009006:	60f8      	str	r0, [r7, #12]
 8009008:	460b      	mov	r3, r1
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009016:	7afb      	ldrb	r3, [r7, #11]
 8009018:	461a      	mov	r2, r3
 800901a:	2102      	movs	r1, #2
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f7fd fff2 	bl	8007006 <_UG_SearchObject>
 8009022:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d102      	bne.n	8009030 <UG_TextboxSetText+0x30>
 800902a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800902e:	e00d      	b.n	800904c <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	69db      	ldr	r3, [r3, #28]
 8009034:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009044:	b2da      	uxtb	r2, r3
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	60f8      	str	r0, [r7, #12]
 800905c:	460b      	mov	r3, r1
 800905e:	607a      	str	r2, [r7, #4]
 8009060:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8009062:	2300      	movs	r3, #0
 8009064:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 800906a:	7afb      	ldrb	r3, [r7, #11]
 800906c:	461a      	mov	r2, r3
 800906e:	2102      	movs	r1, #2
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f7fd ffc8 	bl	8007006 <_UG_SearchObject>
 8009076:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d102      	bne.n	8009084 <UG_TextboxSetFont+0x30>
 800907e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009082:	e00d      	b.n	80090a0 <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	613b      	str	r3, [r7, #16]
   txb->font = font;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	781b      	ldrb	r3, [r3, #0]
 8009094:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009098:	b2da      	uxtb	r2, r3
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3718      	adds	r7, #24
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	460b      	mov	r3, r1
 80090b2:	70fb      	strb	r3, [r7, #3]
 80090b4:	4613      	mov	r3, r2
 80090b6:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 80090c0:	78fb      	ldrb	r3, [r7, #3]
 80090c2:	461a      	mov	r2, r3
 80090c4:	2102      	movs	r1, #2
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f7fd ff9d 	bl	8007006 <_UG_SearchObject>
 80090cc:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d102      	bne.n	80090da <UG_TextboxSetAlignment+0x32>
 80090d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80090d8:	e00d      	b.n	80090f6 <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	69db      	ldr	r3, [r3, #28]
 80090de:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	78ba      	ldrb	r2, [r7, #2]
 80090e4:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	781b      	ldrb	r3, [r3, #0]
 80090ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80090ee:	b2da      	uxtb	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <_UG_TextboxUpdate>:
   }
   return align;
}

static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80090fe:	b590      	push	{r4, r7, lr}
 8009100:	b08f      	sub	sp, #60	; 0x3c
 8009102:	af02      	add	r7, sp, #8
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	781b      	ldrb	r3, [r3, #0]
 8009112:	f003 0320 	and.w	r3, r3, #32
 8009116:	2b00      	cmp	r3, #0
 8009118:	f000 80b8 	beq.w	800928c <_UG_TextboxUpdate+0x18e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	f003 0308 	and.w	r3, r3, #8
 8009124:	2b00      	cmp	r3, #0
 8009126:	f000 8094 	beq.w	8009252 <_UG_TextboxUpdate+0x154>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 809f 	beq.w	8009276 <_UG_TextboxUpdate+0x178>
         {
            UG_WindowGetArea(wnd,&a);
 8009138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fe fe92 	bl	8007e68 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800914a:	b29a      	uxth	r2, r3
 800914c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009150:	b29b      	uxth	r3, r3
 8009152:	4413      	add	r3, r2
 8009154:	b29b      	uxth	r3, r3
 8009156:	b21a      	sxth	r2, r3
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009162:	b29a      	uxth	r2, r3
 8009164:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009168:	b29b      	uxth	r3, r3
 800916a:	4413      	add	r3, r2
 800916c:	b29b      	uxth	r3, r3
 800916e:	b21a      	sxth	r2, r3
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800917a:	b29a      	uxth	r2, r3
 800917c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009180:	b29b      	uxth	r3, r3
 8009182:	4413      	add	r3, r2
 8009184:	b29b      	uxth	r3, r3
 8009186:	b21a      	sxth	r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009192:	b29a      	uxth	r2, r3
 8009194:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009198:	b29b      	uxth	r3, r3
 800919a:	4413      	add	r3, r2
 800919c:	b29b      	uxth	r3, r3
 800919e:	b21a      	sxth	r2, r3
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	dc68      	bgt.n	8009286 <_UG_TextboxUpdate+0x188>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	dc62      	bgt.n	800928a <_UG_TextboxUpdate+0x18c>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            txt.bc = txb->bc;
 80091c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c6:	899b      	ldrh	r3, [r3, #12]
 80091c8:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091cc:	895b      	ldrh	r3, [r3, #10]
 80091ce:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80091e8:	8b7b      	ldrh	r3, [r7, #26]
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	4623      	mov	r3, r4
 80091ee:	f7fc faad 	bl	800574c <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80091f8:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009200:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009208:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009210:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	7b9b      	ldrb	r3, [r3, #14]
 8009216:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 8009218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8009224:	b21b      	sxth	r3, r3
 8009226:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 8009228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800922a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800922e:	b21b      	sxth	r3, r3
 8009230:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 8009232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8009238:	f107 0308 	add.w	r3, r7, #8
 800923c:	4618      	mov	r0, r3
 800923e:	f7fd fdcb 	bl	8006dd8 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800924a:	b2da      	uxtb	r2, r3
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	701a      	strb	r2, [r3, #0]
 8009250:	e011      	b.n	8009276 <_UG_TextboxUpdate+0x178>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	899b      	ldrh	r3, [r3, #12]
 800926e:	9300      	str	r3, [sp, #0]
 8009270:	4623      	mov	r3, r4
 8009272:	f7fc fa6b 	bl	800574c <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	f023 0320 	bic.w	r3, r3, #32
 800927e:	b2da      	uxtb	r2, r3
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	701a      	strb	r2, [r3, #0]
 8009284:	e002      	b.n	800928c <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8009286:	bf00      	nop
 8009288:	e000      	b.n	800928c <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800928a:	bf00      	nop
   }
}
 800928c:	3734      	adds	r7, #52	; 0x34
 800928e:	46bd      	mov	sp, r7
 8009290:	bd90      	pop	{r4, r7, pc}
	...

08009294 <__NVIC_SetPriority>:
{
 8009294:	b480      	push	{r7}
 8009296:	b083      	sub	sp, #12
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80092a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	db0a      	blt.n	80092be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	490c      	ldr	r1, [pc, #48]	; (80092e0 <__NVIC_SetPriority+0x4c>)
 80092ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80092b2:	0112      	lsls	r2, r2, #4
 80092b4:	b2d2      	uxtb	r2, r2
 80092b6:	440b      	add	r3, r1
 80092b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092bc:	e00a      	b.n	80092d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	b2da      	uxtb	r2, r3
 80092c2:	4908      	ldr	r1, [pc, #32]	; (80092e4 <__NVIC_SetPriority+0x50>)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	f003 030f 	and.w	r3, r3, #15
 80092ca:	3b04      	subs	r3, #4
 80092cc:	0112      	lsls	r2, r2, #4
 80092ce:	b2d2      	uxtb	r2, r2
 80092d0:	440b      	add	r3, r1
 80092d2:	761a      	strb	r2, [r3, #24]
}
 80092d4:	bf00      	nop
 80092d6:	370c      	adds	r7, #12
 80092d8:	46bd      	mov	sp, r7
 80092da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092de:	4770      	bx	lr
 80092e0:	e000e100 	.word	0xe000e100
 80092e4:	e000ed00 	.word	0xe000ed00

080092e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80092ec:	2100      	movs	r1, #0
 80092ee:	f06f 0004 	mvn.w	r0, #4
 80092f2:	f7ff ffcf 	bl	8009294 <__NVIC_SetPriority>
#endif
}
 80092f6:	bf00      	nop
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009302:	f3ef 8305 	mrs	r3, IPSR
 8009306:	603b      	str	r3, [r7, #0]
  return(result);
 8009308:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800930e:	f06f 0305 	mvn.w	r3, #5
 8009312:	607b      	str	r3, [r7, #4]
 8009314:	e00c      	b.n	8009330 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009316:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <osKernelInitialize+0x44>)
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d105      	bne.n	800932a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <osKernelInitialize+0x44>)
 8009320:	2201      	movs	r2, #1
 8009322:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009324:	2300      	movs	r3, #0
 8009326:	607b      	str	r3, [r7, #4]
 8009328:	e002      	b.n	8009330 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800932a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800932e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009330:	687b      	ldr	r3, [r7, #4]
}
 8009332:	4618      	mov	r0, r3
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	20000510 	.word	0x20000510

08009344 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800934a:	f3ef 8305 	mrs	r3, IPSR
 800934e:	603b      	str	r3, [r7, #0]
  return(result);
 8009350:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009352:	2b00      	cmp	r3, #0
 8009354:	d003      	beq.n	800935e <osKernelStart+0x1a>
    stat = osErrorISR;
 8009356:	f06f 0305 	mvn.w	r3, #5
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	e010      	b.n	8009380 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800935e:	4b0b      	ldr	r3, [pc, #44]	; (800938c <osKernelStart+0x48>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	2b01      	cmp	r3, #1
 8009364:	d109      	bne.n	800937a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009366:	f7ff ffbf 	bl	80092e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800936a:	4b08      	ldr	r3, [pc, #32]	; (800938c <osKernelStart+0x48>)
 800936c:	2202      	movs	r2, #2
 800936e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009370:	f001 fcbc 	bl	800acec <vTaskStartScheduler>
      stat = osOK;
 8009374:	2300      	movs	r3, #0
 8009376:	607b      	str	r3, [r7, #4]
 8009378:	e002      	b.n	8009380 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800937a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800937e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009380:	687b      	ldr	r3, [r7, #4]
}
 8009382:	4618      	mov	r0, r3
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	20000510 	.word	0x20000510

08009390 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009390:	b580      	push	{r7, lr}
 8009392:	b08e      	sub	sp, #56	; 0x38
 8009394:	af04      	add	r7, sp, #16
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800939c:	2300      	movs	r3, #0
 800939e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093a0:	f3ef 8305 	mrs	r3, IPSR
 80093a4:	617b      	str	r3, [r7, #20]
  return(result);
 80093a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d17e      	bne.n	80094aa <osThreadNew+0x11a>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d07b      	beq.n	80094aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80093b2:	2380      	movs	r3, #128	; 0x80
 80093b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80093b6:	2318      	movs	r3, #24
 80093b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80093be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d045      	beq.n	8009456 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d002      	beq.n	80093d8 <osThreadNew+0x48>
        name = attr->name;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	699b      	ldr	r3, [r3, #24]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d002      	beq.n	80093e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	699b      	ldr	r3, [r3, #24]
 80093e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093e6:	69fb      	ldr	r3, [r7, #28]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d008      	beq.n	80093fe <osThreadNew+0x6e>
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	2b38      	cmp	r3, #56	; 0x38
 80093f0:	d805      	bhi.n	80093fe <osThreadNew+0x6e>
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f003 0301 	and.w	r3, r3, #1
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <osThreadNew+0x72>
        return (NULL);
 80093fe:	2300      	movs	r3, #0
 8009400:	e054      	b.n	80094ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	695b      	ldr	r3, [r3, #20]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d003      	beq.n	8009412 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	089b      	lsrs	r3, r3, #2
 8009410:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00e      	beq.n	8009438 <osThreadNew+0xa8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	68db      	ldr	r3, [r3, #12]
 800941e:	2bbb      	cmp	r3, #187	; 0xbb
 8009420:	d90a      	bls.n	8009438 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009426:	2b00      	cmp	r3, #0
 8009428:	d006      	beq.n	8009438 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d002      	beq.n	8009438 <osThreadNew+0xa8>
        mem = 1;
 8009432:	2301      	movs	r3, #1
 8009434:	61bb      	str	r3, [r7, #24]
 8009436:	e010      	b.n	800945a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d10c      	bne.n	800945a <osThreadNew+0xca>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d108      	bne.n	800945a <osThreadNew+0xca>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	691b      	ldr	r3, [r3, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d104      	bne.n	800945a <osThreadNew+0xca>
          mem = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	61bb      	str	r3, [r7, #24]
 8009454:	e001      	b.n	800945a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d110      	bne.n	8009482 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009468:	9202      	str	r2, [sp, #8]
 800946a:	9301      	str	r3, [sp, #4]
 800946c:	69fb      	ldr	r3, [r7, #28]
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	6a3a      	ldr	r2, [r7, #32]
 8009474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f001 fa4c 	bl	800a914 <xTaskCreateStatic>
 800947c:	4603      	mov	r3, r0
 800947e:	613b      	str	r3, [r7, #16]
 8009480:	e013      	b.n	80094aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009482:	69bb      	ldr	r3, [r7, #24]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d110      	bne.n	80094aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009488:	6a3b      	ldr	r3, [r7, #32]
 800948a:	b29a      	uxth	r2, r3
 800948c:	f107 0310 	add.w	r3, r7, #16
 8009490:	9301      	str	r3, [sp, #4]
 8009492:	69fb      	ldr	r3, [r7, #28]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800949a:	68f8      	ldr	r0, [r7, #12]
 800949c:	f001 fa97 	bl	800a9ce <xTaskCreate>
 80094a0:	4603      	mov	r3, r0
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d001      	beq.n	80094aa <osThreadNew+0x11a>
            hTask = NULL;
 80094a6:	2300      	movs	r3, #0
 80094a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80094aa:	693b      	ldr	r3, [r7, #16]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3728      	adds	r7, #40	; 0x28
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094bc:	f3ef 8305 	mrs	r3, IPSR
 80094c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80094c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d003      	beq.n	80094d0 <osDelay+0x1c>
    stat = osErrorISR;
 80094c8:	f06f 0305 	mvn.w	r3, #5
 80094cc:	60fb      	str	r3, [r7, #12]
 80094ce:	e007      	b.n	80094e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 fbd2 	bl	800ac84 <vTaskDelay>
    }
  }

  return (stat);
 80094e0:	68fb      	ldr	r3, [r7, #12]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}

080094ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80094ea:	b580      	push	{r7, lr}
 80094ec:	b08a      	sub	sp, #40	; 0x28
 80094ee:	af02      	add	r7, sp, #8
 80094f0:	60f8      	str	r0, [r7, #12]
 80094f2:	60b9      	str	r1, [r7, #8]
 80094f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80094f6:	2300      	movs	r3, #0
 80094f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094fa:	f3ef 8305 	mrs	r3, IPSR
 80094fe:	613b      	str	r3, [r7, #16]
  return(result);
 8009500:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009502:	2b00      	cmp	r3, #0
 8009504:	d175      	bne.n	80095f2 <osSemaphoreNew+0x108>
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d072      	beq.n	80095f2 <osSemaphoreNew+0x108>
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	429a      	cmp	r2, r3
 8009512:	d86e      	bhi.n	80095f2 <osSemaphoreNew+0x108>
    mem = -1;
 8009514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009518:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d015      	beq.n	800954c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d006      	beq.n	8009536 <osSemaphoreNew+0x4c>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	2b4f      	cmp	r3, #79	; 0x4f
 800952e:	d902      	bls.n	8009536 <osSemaphoreNew+0x4c>
        mem = 1;
 8009530:	2301      	movs	r3, #1
 8009532:	61bb      	str	r3, [r7, #24]
 8009534:	e00c      	b.n	8009550 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d108      	bne.n	8009550 <osSemaphoreNew+0x66>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <osSemaphoreNew+0x66>
          mem = 0;
 8009546:	2300      	movs	r3, #0
 8009548:	61bb      	str	r3, [r7, #24]
 800954a:	e001      	b.n	8009550 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800954c:	2300      	movs	r3, #0
 800954e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009556:	d04c      	beq.n	80095f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d128      	bne.n	80095b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b01      	cmp	r3, #1
 8009562:	d10a      	bne.n	800957a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	689b      	ldr	r3, [r3, #8]
 8009568:	2203      	movs	r2, #3
 800956a:	9200      	str	r2, [sp, #0]
 800956c:	2200      	movs	r2, #0
 800956e:	2100      	movs	r1, #0
 8009570:	2001      	movs	r0, #1
 8009572:	f000 fa29 	bl	80099c8 <xQueueGenericCreateStatic>
 8009576:	61f8      	str	r0, [r7, #28]
 8009578:	e005      	b.n	8009586 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800957a:	2203      	movs	r2, #3
 800957c:	2100      	movs	r1, #0
 800957e:	2001      	movs	r0, #1
 8009580:	f000 fa9a 	bl	8009ab8 <xQueueGenericCreate>
 8009584:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d022      	beq.n	80095d2 <osSemaphoreNew+0xe8>
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d01f      	beq.n	80095d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009592:	2300      	movs	r3, #0
 8009594:	2200      	movs	r2, #0
 8009596:	2100      	movs	r1, #0
 8009598:	69f8      	ldr	r0, [r7, #28]
 800959a:	f000 fb55 	bl	8009c48 <xQueueGenericSend>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d016      	beq.n	80095d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80095a4:	69f8      	ldr	r0, [r7, #28]
 80095a6:	f000 ffe1 	bl	800a56c <vQueueDelete>
            hSemaphore = NULL;
 80095aa:	2300      	movs	r3, #0
 80095ac:	61fb      	str	r3, [r7, #28]
 80095ae:	e010      	b.n	80095d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d108      	bne.n	80095c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	689b      	ldr	r3, [r3, #8]
 80095ba:	461a      	mov	r2, r3
 80095bc:	68b9      	ldr	r1, [r7, #8]
 80095be:	68f8      	ldr	r0, [r7, #12]
 80095c0:	f000 fad7 	bl	8009b72 <xQueueCreateCountingSemaphoreStatic>
 80095c4:	61f8      	str	r0, [r7, #28]
 80095c6:	e004      	b.n	80095d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	68f8      	ldr	r0, [r7, #12]
 80095cc:	f000 fb08 	bl	8009be0 <xQueueCreateCountingSemaphore>
 80095d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80095d2:	69fb      	ldr	r3, [r7, #28]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d00c      	beq.n	80095f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d003      	beq.n	80095e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	617b      	str	r3, [r7, #20]
 80095e4:	e001      	b.n	80095ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80095ea:	6979      	ldr	r1, [r7, #20]
 80095ec:	69f8      	ldr	r0, [r7, #28]
 80095ee:	f001 f909 	bl	800a804 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80095f2:	69fb      	ldr	r3, [r7, #28]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3720      	adds	r7, #32
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b086      	sub	sp, #24
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800960a:	2300      	movs	r3, #0
 800960c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d103      	bne.n	800961c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009614:	f06f 0303 	mvn.w	r3, #3
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	e039      	b.n	8009690 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800961c:	f3ef 8305 	mrs	r3, IPSR
 8009620:	60fb      	str	r3, [r7, #12]
  return(result);
 8009622:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009624:	2b00      	cmp	r3, #0
 8009626:	d022      	beq.n	800966e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800962e:	f06f 0303 	mvn.w	r3, #3
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e02c      	b.n	8009690 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8009636:	2300      	movs	r3, #0
 8009638:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800963a:	f107 0308 	add.w	r3, r7, #8
 800963e:	461a      	mov	r2, r3
 8009640:	2100      	movs	r1, #0
 8009642:	6938      	ldr	r0, [r7, #16]
 8009644:	f000 ff12 	bl	800a46c <xQueueReceiveFromISR>
 8009648:	4603      	mov	r3, r0
 800964a:	2b01      	cmp	r3, #1
 800964c:	d003      	beq.n	8009656 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800964e:	f06f 0302 	mvn.w	r3, #2
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	e01c      	b.n	8009690 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d019      	beq.n	8009690 <osSemaphoreAcquire+0x94>
 800965c:	4b0f      	ldr	r3, [pc, #60]	; (800969c <osSemaphoreAcquire+0xa0>)
 800965e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	f3bf 8f4f 	dsb	sy
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	e010      	b.n	8009690 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800966e:	6839      	ldr	r1, [r7, #0]
 8009670:	6938      	ldr	r0, [r7, #16]
 8009672:	f000 fdef 	bl	800a254 <xQueueSemaphoreTake>
 8009676:	4603      	mov	r3, r0
 8009678:	2b01      	cmp	r3, #1
 800967a:	d009      	beq.n	8009690 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009682:	f06f 0301 	mvn.w	r3, #1
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e002      	b.n	8009690 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800968a:	f06f 0302 	mvn.w	r3, #2
 800968e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009690:	697b      	ldr	r3, [r7, #20]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b086      	sub	sp, #24
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80096ac:	2300      	movs	r3, #0
 80096ae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d103      	bne.n	80096be <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80096b6:	f06f 0303 	mvn.w	r3, #3
 80096ba:	617b      	str	r3, [r7, #20]
 80096bc:	e02c      	b.n	8009718 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096be:	f3ef 8305 	mrs	r3, IPSR
 80096c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80096c4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d01a      	beq.n	8009700 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80096ca:	2300      	movs	r3, #0
 80096cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80096ce:	f107 0308 	add.w	r3, r7, #8
 80096d2:	4619      	mov	r1, r3
 80096d4:	6938      	ldr	r0, [r7, #16]
 80096d6:	f000 fc50 	bl	8009f7a <xQueueGiveFromISR>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b01      	cmp	r3, #1
 80096de:	d003      	beq.n	80096e8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80096e0:	f06f 0302 	mvn.w	r3, #2
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	e017      	b.n	8009718 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80096e8:	68bb      	ldr	r3, [r7, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d014      	beq.n	8009718 <osSemaphoreRelease+0x78>
 80096ee:	4b0d      	ldr	r3, [pc, #52]	; (8009724 <osSemaphoreRelease+0x84>)
 80096f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	e00b      	b.n	8009718 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009700:	2300      	movs	r3, #0
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	6938      	ldr	r0, [r7, #16]
 8009708:	f000 fa9e 	bl	8009c48 <xQueueGenericSend>
 800970c:	4603      	mov	r3, r0
 800970e:	2b01      	cmp	r3, #1
 8009710:	d002      	beq.n	8009718 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8009712:	f06f 0302 	mvn.w	r3, #2
 8009716:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009718:	697b      	ldr	r3, [r7, #20]
}
 800971a:	4618      	mov	r0, r3
 800971c:	3718      	adds	r7, #24
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	e000ed04 	.word	0xe000ed04

08009728 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009728:	b480      	push	{r7}
 800972a:	b085      	sub	sp, #20
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4a07      	ldr	r2, [pc, #28]	; (8009754 <vApplicationGetIdleTaskMemory+0x2c>)
 8009738:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	4a06      	ldr	r2, [pc, #24]	; (8009758 <vApplicationGetIdleTaskMemory+0x30>)
 800973e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2280      	movs	r2, #128	; 0x80
 8009744:	601a      	str	r2, [r3, #0]
}
 8009746:	bf00      	nop
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	20000514 	.word	0x20000514
 8009758:	200005d0 	.word	0x200005d0

0800975c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	60f8      	str	r0, [r7, #12]
 8009764:	60b9      	str	r1, [r7, #8]
 8009766:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4a07      	ldr	r2, [pc, #28]	; (8009788 <vApplicationGetTimerTaskMemory+0x2c>)
 800976c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	4a06      	ldr	r2, [pc, #24]	; (800978c <vApplicationGetTimerTaskMemory+0x30>)
 8009772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f44f 7280 	mov.w	r2, #256	; 0x100
 800977a:	601a      	str	r2, [r3, #0]
}
 800977c:	bf00      	nop
 800977e:	3714      	adds	r7, #20
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr
 8009788:	200007d0 	.word	0x200007d0
 800978c:	2000088c 	.word	0x2000088c

08009790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f103 0208 	add.w	r2, r3, #8
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f103 0208 	add.w	r2, r3, #8
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f103 0208 	add.w	r2, r3, #8
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2200      	movs	r2, #0
 80097c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097ea:	b480      	push	{r7}
 80097ec:	b085      	sub	sp, #20
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685b      	ldr	r3, [r3, #4]
 80097f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	68fa      	ldr	r2, [r7, #12]
 80097fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	689a      	ldr	r2, [r3, #8]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	683a      	ldr	r2, [r7, #0]
 8009814:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	1c5a      	adds	r2, r3, #1
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	601a      	str	r2, [r3, #0]
}
 8009826:	bf00      	nop
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009848:	d103      	bne.n	8009852 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	691b      	ldr	r3, [r3, #16]
 800984e:	60fb      	str	r3, [r7, #12]
 8009850:	e00c      	b.n	800986c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	3308      	adds	r3, #8
 8009856:	60fb      	str	r3, [r7, #12]
 8009858:	e002      	b.n	8009860 <vListInsert+0x2e>
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	60fb      	str	r3, [r7, #12]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	429a      	cmp	r2, r3
 800986a:	d2f6      	bcs.n	800985a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	685a      	ldr	r2, [r3, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	683a      	ldr	r2, [r7, #0]
 800987a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	601a      	str	r2, [r3, #0]
}
 8009898:	bf00      	nop
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	6892      	ldr	r2, [r2, #8]
 80098ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	687a      	ldr	r2, [r7, #4]
 80098c2:	6852      	ldr	r2, [r2, #4]
 80098c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d103      	bne.n	80098d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689a      	ldr	r2, [r3, #8]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2200      	movs	r2, #0
 80098dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	1e5a      	subs	r2, r3, #1
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b084      	sub	sp, #16
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d10a      	bne.n	8009922 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800990c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009910:	f383 8811 	msr	BASEPRI, r3
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	f3bf 8f4f 	dsb	sy
 800991c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800991e:	bf00      	nop
 8009920:	e7fe      	b.n	8009920 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009922:	f002 fc97 	bl	800c254 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009932:	fb01 f303 	mul.w	r3, r1, r3
 8009936:	441a      	add	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	681a      	ldr	r2, [r3, #0]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009952:	3b01      	subs	r3, #1
 8009954:	68f9      	ldr	r1, [r7, #12]
 8009956:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009958:	fb01 f303 	mul.w	r3, r1, r3
 800995c:	441a      	add	r2, r3
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	22ff      	movs	r2, #255	; 0xff
 8009966:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	22ff      	movs	r2, #255	; 0xff
 800996e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d114      	bne.n	80099a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01a      	beq.n	80099b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	3310      	adds	r3, #16
 8009984:	4618      	mov	r0, r3
 8009986:	f001 fc4b 	bl	800b220 <xTaskRemoveFromEventList>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d012      	beq.n	80099b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009990:	4b0c      	ldr	r3, [pc, #48]	; (80099c4 <xQueueGenericReset+0xcc>)
 8009992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009996:	601a      	str	r2, [r3, #0]
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	f3bf 8f6f 	isb	sy
 80099a0:	e009      	b.n	80099b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	3310      	adds	r3, #16
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff fef2 	bl	8009790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3324      	adds	r3, #36	; 0x24
 80099b0:	4618      	mov	r0, r3
 80099b2:	f7ff feed 	bl	8009790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099b6:	f002 fc7d 	bl	800c2b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099ba:	2301      	movs	r3, #1
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	e000ed04 	.word	0xe000ed04

080099c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b08e      	sub	sp, #56	; 0x38
 80099cc:	af02      	add	r7, sp, #8
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10a      	bne.n	8009a0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80099f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fc:	f383 8811 	msr	BASEPRI, r3
 8009a00:	f3bf 8f6f 	isb	sy
 8009a04:	f3bf 8f4f 	dsb	sy
 8009a08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a0a:	bf00      	nop
 8009a0c:	e7fe      	b.n	8009a0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <xQueueGenericCreateStatic+0x52>
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <xQueueGenericCreateStatic+0x56>
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <xQueueGenericCreateStatic+0x58>
 8009a1e:	2300      	movs	r3, #0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	623b      	str	r3, [r7, #32]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d102      	bne.n	8009a46 <xQueueGenericCreateStatic+0x7e>
 8009a40:	68bb      	ldr	r3, [r7, #8]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <xQueueGenericCreateStatic+0x82>
 8009a46:	2301      	movs	r3, #1
 8009a48:	e000      	b.n	8009a4c <xQueueGenericCreateStatic+0x84>
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a54:	f383 8811 	msr	BASEPRI, r3
 8009a58:	f3bf 8f6f 	isb	sy
 8009a5c:	f3bf 8f4f 	dsb	sy
 8009a60:	61fb      	str	r3, [r7, #28]
}
 8009a62:	bf00      	nop
 8009a64:	e7fe      	b.n	8009a64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a66:	2350      	movs	r3, #80	; 0x50
 8009a68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b50      	cmp	r3, #80	; 0x50
 8009a6e:	d00a      	beq.n	8009a86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a74:	f383 8811 	msr	BASEPRI, r3
 8009a78:	f3bf 8f6f 	isb	sy
 8009a7c:	f3bf 8f4f 	dsb	sy
 8009a80:	61bb      	str	r3, [r7, #24]
}
 8009a82:	bf00      	nop
 8009a84:	e7fe      	b.n	8009a84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009a86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00d      	beq.n	8009aae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	2201      	movs	r2, #1
 8009a96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	9300      	str	r3, [sp, #0]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	687a      	ldr	r2, [r7, #4]
 8009aa6:	68b9      	ldr	r1, [r7, #8]
 8009aa8:	68f8      	ldr	r0, [r7, #12]
 8009aaa:	f000 f83f 	bl	8009b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3730      	adds	r7, #48	; 0x30
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}

08009ab8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d10a      	bne.n	8009ae2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	613b      	str	r3, [r7, #16]
}
 8009ade:	bf00      	nop
 8009ae0:	e7fe      	b.n	8009ae0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	68ba      	ldr	r2, [r7, #8]
 8009ae6:	fb02 f303 	mul.w	r3, r2, r3
 8009aea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	3350      	adds	r3, #80	; 0x50
 8009af0:	4618      	mov	r0, r3
 8009af2:	f002 fcd1 	bl	800c498 <pvPortMalloc>
 8009af6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d011      	beq.n	8009b22 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009afe:	69bb      	ldr	r3, [r7, #24]
 8009b00:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	3350      	adds	r3, #80	; 0x50
 8009b06:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b08:	69bb      	ldr	r3, [r7, #24]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b10:	79fa      	ldrb	r2, [r7, #7]
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	4613      	mov	r3, r2
 8009b18:	697a      	ldr	r2, [r7, #20]
 8009b1a:	68b9      	ldr	r1, [r7, #8]
 8009b1c:	68f8      	ldr	r0, [r7, #12]
 8009b1e:	f000 f805 	bl	8009b2c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b22:	69bb      	ldr	r3, [r7, #24]
	}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d103      	bne.n	8009b48 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	69ba      	ldr	r2, [r7, #24]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	687a      	ldr	r2, [r7, #4]
 8009b4c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b4e:	69bb      	ldr	r3, [r7, #24]
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b54:	69bb      	ldr	r3, [r7, #24]
 8009b56:	68ba      	ldr	r2, [r7, #8]
 8009b58:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b5a:	2101      	movs	r1, #1
 8009b5c:	69b8      	ldr	r0, [r7, #24]
 8009b5e:	f7ff fecb 	bl	80098f8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b62:	69bb      	ldr	r3, [r7, #24]
 8009b64:	78fa      	ldrb	r2, [r7, #3]
 8009b66:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b08a      	sub	sp, #40	; 0x28
 8009b76:	af02      	add	r7, sp, #8
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	60b9      	str	r1, [r7, #8]
 8009b7c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d10a      	bne.n	8009b9a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b88:	f383 8811 	msr	BASEPRI, r3
 8009b8c:	f3bf 8f6f 	isb	sy
 8009b90:	f3bf 8f4f 	dsb	sy
 8009b94:	61bb      	str	r3, [r7, #24]
}
 8009b96:	bf00      	nop
 8009b98:	e7fe      	b.n	8009b98 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	429a      	cmp	r2, r3
 8009ba0:	d90a      	bls.n	8009bb8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	617b      	str	r3, [r7, #20]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009bb8:	2302      	movs	r3, #2
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	68f8      	ldr	r0, [r7, #12]
 8009bc4:	f7ff ff00 	bl	80099c8 <xQueueGenericCreateStatic>
 8009bc8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d002      	beq.n	8009bd6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bd0:	69fb      	ldr	r3, [r7, #28]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
	}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10a      	bne.n	8009c06 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bf4:	f383 8811 	msr	BASEPRI, r3
 8009bf8:	f3bf 8f6f 	isb	sy
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	613b      	str	r3, [r7, #16]
}
 8009c02:	bf00      	nop
 8009c04:	e7fe      	b.n	8009c04 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d90a      	bls.n	8009c24 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c12:	f383 8811 	msr	BASEPRI, r3
 8009c16:	f3bf 8f6f 	isb	sy
 8009c1a:	f3bf 8f4f 	dsb	sy
 8009c1e:	60fb      	str	r3, [r7, #12]
}
 8009c20:	bf00      	nop
 8009c22:	e7fe      	b.n	8009c22 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c24:	2202      	movs	r2, #2
 8009c26:	2100      	movs	r1, #0
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f7ff ff45 	bl	8009ab8 <xQueueGenericCreate>
 8009c2e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d002      	beq.n	8009c3c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009c3c:	697b      	ldr	r3, [r7, #20]
	}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
	...

08009c48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b08e      	sub	sp, #56	; 0x38
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	60f8      	str	r0, [r7, #12]
 8009c50:	60b9      	str	r1, [r7, #8]
 8009c52:	607a      	str	r2, [r7, #4]
 8009c54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009c56:	2300      	movs	r3, #0
 8009c58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d10a      	bne.n	8009c7a <xQueueGenericSend+0x32>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <xQueueGenericSend+0x40>
 8009c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d101      	bne.n	8009c8c <xQueueGenericSend+0x44>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e000      	b.n	8009c8e <xQueueGenericSend+0x46>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d10a      	bne.n	8009ca8 <xQueueGenericSend+0x60>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d103      	bne.n	8009cb6 <xQueueGenericSend+0x6e>
 8009cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cb2:	2b01      	cmp	r3, #1
 8009cb4:	d101      	bne.n	8009cba <xQueueGenericSend+0x72>
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e000      	b.n	8009cbc <xQueueGenericSend+0x74>
 8009cba:	2300      	movs	r3, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d10a      	bne.n	8009cd6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc4:	f383 8811 	msr	BASEPRI, r3
 8009cc8:	f3bf 8f6f 	isb	sy
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	623b      	str	r3, [r7, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	e7fe      	b.n	8009cd4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009cd6:	f001 fc65 	bl	800b5a4 <xTaskGetSchedulerState>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d102      	bne.n	8009ce6 <xQueueGenericSend+0x9e>
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d101      	bne.n	8009cea <xQueueGenericSend+0xa2>
 8009ce6:	2301      	movs	r3, #1
 8009ce8:	e000      	b.n	8009cec <xQueueGenericSend+0xa4>
 8009cea:	2300      	movs	r3, #0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d10a      	bne.n	8009d06 <xQueueGenericSend+0xbe>
	__asm volatile
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	61fb      	str	r3, [r7, #28]
}
 8009d02:	bf00      	nop
 8009d04:	e7fe      	b.n	8009d04 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d06:	f002 faa5 	bl	800c254 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d302      	bcc.n	8009d1c <xQueueGenericSend+0xd4>
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d129      	bne.n	8009d70 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009d1c:	683a      	ldr	r2, [r7, #0]
 8009d1e:	68b9      	ldr	r1, [r7, #8]
 8009d20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d22:	f000 fc5e 	bl	800a5e2 <prvCopyDataToQueue>
 8009d26:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d010      	beq.n	8009d52 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d32:	3324      	adds	r3, #36	; 0x24
 8009d34:	4618      	mov	r0, r3
 8009d36:	f001 fa73 	bl	800b220 <xTaskRemoveFromEventList>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d013      	beq.n	8009d68 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009d40:	4b3f      	ldr	r3, [pc, #252]	; (8009e40 <xQueueGenericSend+0x1f8>)
 8009d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d46:	601a      	str	r2, [r3, #0]
 8009d48:	f3bf 8f4f 	dsb	sy
 8009d4c:	f3bf 8f6f 	isb	sy
 8009d50:	e00a      	b.n	8009d68 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d007      	beq.n	8009d68 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009d58:	4b39      	ldr	r3, [pc, #228]	; (8009e40 <xQueueGenericSend+0x1f8>)
 8009d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009d68:	f002 faa4 	bl	800c2b4 <vPortExitCritical>
				return pdPASS;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e063      	b.n	8009e38 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d103      	bne.n	8009d7e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009d76:	f002 fa9d 	bl	800c2b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	e05c      	b.n	8009e38 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d84:	f107 0314 	add.w	r3, r7, #20
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f001 faad 	bl	800b2e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d92:	f002 fa8f 	bl	800c2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d96:	f001 f819 	bl	800adcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d9a:	f002 fa5b 	bl	800c254 <vPortEnterCritical>
 8009d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009da4:	b25b      	sxtb	r3, r3
 8009da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009daa:	d103      	bne.n	8009db4 <xQueueGenericSend+0x16c>
 8009dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dba:	b25b      	sxtb	r3, r3
 8009dbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009dc0:	d103      	bne.n	8009dca <xQueueGenericSend+0x182>
 8009dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009dca:	f002 fa73 	bl	800c2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009dce:	1d3a      	adds	r2, r7, #4
 8009dd0:	f107 0314 	add.w	r3, r7, #20
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f001 fa9c 	bl	800b314 <xTaskCheckForTimeOut>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d124      	bne.n	8009e2c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009de2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009de4:	f000 fcf5 	bl	800a7d2 <prvIsQueueFull>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d018      	beq.n	8009e20 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009df0:	3310      	adds	r3, #16
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	4611      	mov	r1, r2
 8009df6:	4618      	mov	r0, r3
 8009df8:	f001 f9c2 	bl	800b180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009dfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009dfe:	f000 fc80 	bl	800a702 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009e02:	f000 fff1 	bl	800ade8 <xTaskResumeAll>
 8009e06:	4603      	mov	r3, r0
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f47f af7c 	bne.w	8009d06 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009e0e:	4b0c      	ldr	r3, [pc, #48]	; (8009e40 <xQueueGenericSend+0x1f8>)
 8009e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e14:	601a      	str	r2, [r3, #0]
 8009e16:	f3bf 8f4f 	dsb	sy
 8009e1a:	f3bf 8f6f 	isb	sy
 8009e1e:	e772      	b.n	8009d06 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009e20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e22:	f000 fc6e 	bl	800a702 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e26:	f000 ffdf 	bl	800ade8 <xTaskResumeAll>
 8009e2a:	e76c      	b.n	8009d06 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009e2e:	f000 fc68 	bl	800a702 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e32:	f000 ffd9 	bl	800ade8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009e36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	3738      	adds	r7, #56	; 0x38
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	e000ed04 	.word	0xe000ed04

08009e44 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b090      	sub	sp, #64	; 0x40
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009e56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d103      	bne.n	8009e80 <xQueueGenericSendFromISR+0x3c>
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d101      	bne.n	8009e84 <xQueueGenericSendFromISR+0x40>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e000      	b.n	8009e86 <xQueueGenericSendFromISR+0x42>
 8009e84:	2300      	movs	r3, #0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d10a      	bne.n	8009ea0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d103      	bne.n	8009eae <xQueueGenericSendFromISR+0x6a>
 8009ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d101      	bne.n	8009eb2 <xQueueGenericSendFromISR+0x6e>
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e000      	b.n	8009eb4 <xQueueGenericSendFromISR+0x70>
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10a      	bne.n	8009ece <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	623b      	str	r3, [r7, #32]
}
 8009eca:	bf00      	nop
 8009ecc:	e7fe      	b.n	8009ecc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ece:	f002 faa3 	bl	800c418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009ed2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eda:	f383 8811 	msr	BASEPRI, r3
 8009ede:	f3bf 8f6f 	isb	sy
 8009ee2:	f3bf 8f4f 	dsb	sy
 8009ee6:	61fa      	str	r2, [r7, #28]
 8009ee8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009eea:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009eec:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d302      	bcc.n	8009f00 <xQueueGenericSendFromISR+0xbc>
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	2b02      	cmp	r3, #2
 8009efe:	d12f      	bne.n	8009f60 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f10:	683a      	ldr	r2, [r7, #0]
 8009f12:	68b9      	ldr	r1, [r7, #8]
 8009f14:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f16:	f000 fb64 	bl	800a5e2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009f1a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f22:	d112      	bne.n	8009f4a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d016      	beq.n	8009f5a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	3324      	adds	r3, #36	; 0x24
 8009f30:	4618      	mov	r0, r3
 8009f32:	f001 f975 	bl	800b220 <xTaskRemoveFromEventList>
 8009f36:	4603      	mov	r3, r0
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d00e      	beq.n	8009f5a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2201      	movs	r2, #1
 8009f46:	601a      	str	r2, [r3, #0]
 8009f48:	e007      	b.n	8009f5a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009f4a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009f4e:	3301      	adds	r3, #1
 8009f50:	b2db      	uxtb	r3, r3
 8009f52:	b25a      	sxtb	r2, r3
 8009f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009f5e:	e001      	b.n	8009f64 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009f60:	2300      	movs	r3, #0
 8009f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f66:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009f6e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3740      	adds	r7, #64	; 0x40
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b08e      	sub	sp, #56	; 0x38
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
 8009f82:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d10a      	bne.n	8009fa4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	623b      	str	r3, [r7, #32]
}
 8009fa0:	bf00      	nop
 8009fa2:	e7fe      	b.n	8009fa2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00a      	beq.n	8009fc2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	61fb      	str	r3, [r7, #28]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d103      	bne.n	8009fd2 <xQueueGiveFromISR+0x58>
 8009fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d101      	bne.n	8009fd6 <xQueueGiveFromISR+0x5c>
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e000      	b.n	8009fd8 <xQueueGiveFromISR+0x5e>
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10a      	bne.n	8009ff2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8009fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe0:	f383 8811 	msr	BASEPRI, r3
 8009fe4:	f3bf 8f6f 	isb	sy
 8009fe8:	f3bf 8f4f 	dsb	sy
 8009fec:	61bb      	str	r3, [r7, #24]
}
 8009fee:	bf00      	nop
 8009ff0:	e7fe      	b.n	8009ff0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ff2:	f002 fa11 	bl	800c418 <vPortValidateInterruptPriority>
	__asm volatile
 8009ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8009ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	617a      	str	r2, [r7, #20]
 800a00c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a00e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a01c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a01e:	429a      	cmp	r2, r3
 800a020:	d22b      	bcs.n	800a07a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a024:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a02e:	1c5a      	adds	r2, r3, #1
 800a030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a032:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a034:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a03c:	d112      	bne.n	800a064 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a042:	2b00      	cmp	r3, #0
 800a044:	d016      	beq.n	800a074 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a048:	3324      	adds	r3, #36	; 0x24
 800a04a:	4618      	mov	r0, r3
 800a04c:	f001 f8e8 	bl	800b220 <xTaskRemoveFromEventList>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d00e      	beq.n	800a074 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d00b      	beq.n	800a074 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	2201      	movs	r2, #1
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	e007      	b.n	800a074 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a068:	3301      	adds	r3, #1
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	b25a      	sxtb	r2, r3
 800a06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a070:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a074:	2301      	movs	r3, #1
 800a076:	637b      	str	r3, [r7, #52]	; 0x34
 800a078:	e001      	b.n	800a07e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a07a:	2300      	movs	r3, #0
 800a07c:	637b      	str	r3, [r7, #52]	; 0x34
 800a07e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a080:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f383 8811 	msr	BASEPRI, r3
}
 800a088:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a08a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3738      	adds	r7, #56	; 0x38
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}

0800a094 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b08c      	sub	sp, #48	; 0x30
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xQueueReceive+0x30>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	623b      	str	r3, [r7, #32]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d103      	bne.n	800a0d2 <xQueueReceive+0x3e>
 800a0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d101      	bne.n	800a0d6 <xQueueReceive+0x42>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <xQueueReceive+0x44>
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueReceive+0x5e>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	61fb      	str	r3, [r7, #28]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a0f2:	f001 fa57 	bl	800b5a4 <xTaskGetSchedulerState>
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d102      	bne.n	800a102 <xQueueReceive+0x6e>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d101      	bne.n	800a106 <xQueueReceive+0x72>
 800a102:	2301      	movs	r3, #1
 800a104:	e000      	b.n	800a108 <xQueueReceive+0x74>
 800a106:	2300      	movs	r3, #0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d10a      	bne.n	800a122 <xQueueReceive+0x8e>
	__asm volatile
 800a10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a110:	f383 8811 	msr	BASEPRI, r3
 800a114:	f3bf 8f6f 	isb	sy
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	61bb      	str	r3, [r7, #24]
}
 800a11e:	bf00      	nop
 800a120:	e7fe      	b.n	800a120 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a122:	f002 f897 	bl	800c254 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d01f      	beq.n	800a172 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a136:	f000 fabe 	bl	800a6b6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	1e5a      	subs	r2, r3, #1
 800a13e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a140:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00f      	beq.n	800a16a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	3310      	adds	r3, #16
 800a14e:	4618      	mov	r0, r3
 800a150:	f001 f866 	bl	800b220 <xTaskRemoveFromEventList>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d007      	beq.n	800a16a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a15a:	4b3d      	ldr	r3, [pc, #244]	; (800a250 <xQueueReceive+0x1bc>)
 800a15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a16a:	f002 f8a3 	bl	800c2b4 <vPortExitCritical>
				return pdPASS;
 800a16e:	2301      	movs	r3, #1
 800a170:	e069      	b.n	800a246 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a178:	f002 f89c 	bl	800c2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a17c:	2300      	movs	r3, #0
 800a17e:	e062      	b.n	800a246 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d106      	bne.n	800a194 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a186:	f107 0310 	add.w	r3, r7, #16
 800a18a:	4618      	mov	r0, r3
 800a18c:	f001 f8ac 	bl	800b2e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a194:	f002 f88e 	bl	800c2b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a198:	f000 fe18 	bl	800adcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a19c:	f002 f85a 	bl	800c254 <vPortEnterCritical>
 800a1a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1a6:	b25b      	sxtb	r3, r3
 800a1a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1ac:	d103      	bne.n	800a1b6 <xQueueReceive+0x122>
 800a1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1bc:	b25b      	sxtb	r3, r3
 800a1be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1c2:	d103      	bne.n	800a1cc <xQueueReceive+0x138>
 800a1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1cc:	f002 f872 	bl	800c2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a1d0:	1d3a      	adds	r2, r7, #4
 800a1d2:	f107 0310 	add.w	r3, r7, #16
 800a1d6:	4611      	mov	r1, r2
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f001 f89b 	bl	800b314 <xTaskCheckForTimeOut>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d123      	bne.n	800a22c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1e6:	f000 fade 	bl	800a7a6 <prvIsQueueEmpty>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d017      	beq.n	800a220 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f2:	3324      	adds	r3, #36	; 0x24
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f000 ffc1 	bl	800b180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a1fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a200:	f000 fa7f 	bl	800a702 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a204:	f000 fdf0 	bl	800ade8 <xTaskResumeAll>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d189      	bne.n	800a122 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a20e:	4b10      	ldr	r3, [pc, #64]	; (800a250 <xQueueReceive+0x1bc>)
 800a210:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a214:	601a      	str	r2, [r3, #0]
 800a216:	f3bf 8f4f 	dsb	sy
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	e780      	b.n	800a122 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a222:	f000 fa6e 	bl	800a702 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a226:	f000 fddf 	bl	800ade8 <xTaskResumeAll>
 800a22a:	e77a      	b.n	800a122 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a22c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a22e:	f000 fa68 	bl	800a702 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a232:	f000 fdd9 	bl	800ade8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a238:	f000 fab5 	bl	800a7a6 <prvIsQueueEmpty>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	f43f af6f 	beq.w	800a122 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a244:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a246:	4618      	mov	r0, r3
 800a248:	3730      	adds	r7, #48	; 0x30
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}
 800a24e:	bf00      	nop
 800a250:	e000ed04 	.word	0xe000ed04

0800a254 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a254:	b580      	push	{r7, lr}
 800a256:	b08e      	sub	sp, #56	; 0x38
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a25e:	2300      	movs	r3, #0
 800a260:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a266:	2300      	movs	r3, #0
 800a268:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10a      	bne.n	800a286 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	623b      	str	r3, [r7, #32]
}
 800a282:	bf00      	nop
 800a284:	e7fe      	b.n	800a284 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00a      	beq.n	800a2a4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a28e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a292:	f383 8811 	msr	BASEPRI, r3
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	f3bf 8f4f 	dsb	sy
 800a29e:	61fb      	str	r3, [r7, #28]
}
 800a2a0:	bf00      	nop
 800a2a2:	e7fe      	b.n	800a2a2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2a4:	f001 f97e 	bl	800b5a4 <xTaskGetSchedulerState>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d102      	bne.n	800a2b4 <xQueueSemaphoreTake+0x60>
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d101      	bne.n	800a2b8 <xQueueSemaphoreTake+0x64>
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e000      	b.n	800a2ba <xQueueSemaphoreTake+0x66>
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10a      	bne.n	800a2d4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	61bb      	str	r3, [r7, #24]
}
 800a2d0:	bf00      	nop
 800a2d2:	e7fe      	b.n	800a2d2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a2d4:	f001 ffbe 	bl	800c254 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2dc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a2de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d024      	beq.n	800a32e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e6:	1e5a      	subs	r2, r3, #1
 800a2e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ea:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a2f4:	f001 facc 	bl	800b890 <pvTaskIncrementMutexHeldCount>
 800a2f8:	4602      	mov	r2, r0
 800a2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2fc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d00f      	beq.n	800a326 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	3310      	adds	r3, #16
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 ff88 	bl	800b220 <xTaskRemoveFromEventList>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d007      	beq.n	800a326 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a316:	4b54      	ldr	r3, [pc, #336]	; (800a468 <xQueueSemaphoreTake+0x214>)
 800a318:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a31c:	601a      	str	r2, [r3, #0]
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a326:	f001 ffc5 	bl	800c2b4 <vPortExitCritical>
				return pdPASS;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e097      	b.n	800a45e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d111      	bne.n	800a358 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00a      	beq.n	800a350 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	617b      	str	r3, [r7, #20]
}
 800a34c:	bf00      	nop
 800a34e:	e7fe      	b.n	800a34e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a350:	f001 ffb0 	bl	800c2b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a354:	2300      	movs	r3, #0
 800a356:	e082      	b.n	800a45e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d106      	bne.n	800a36c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a35e:	f107 030c 	add.w	r3, r7, #12
 800a362:	4618      	mov	r0, r3
 800a364:	f000 ffc0 	bl	800b2e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a368:	2301      	movs	r3, #1
 800a36a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a36c:	f001 ffa2 	bl	800c2b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a370:	f000 fd2c 	bl	800adcc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a374:	f001 ff6e 	bl	800c254 <vPortEnterCritical>
 800a378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a37a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a37e:	b25b      	sxtb	r3, r3
 800a380:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a384:	d103      	bne.n	800a38e <xQueueSemaphoreTake+0x13a>
 800a386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a394:	b25b      	sxtb	r3, r3
 800a396:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a39a:	d103      	bne.n	800a3a4 <xQueueSemaphoreTake+0x150>
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	2200      	movs	r2, #0
 800a3a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a3a4:	f001 ff86 	bl	800c2b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3a8:	463a      	mov	r2, r7
 800a3aa:	f107 030c 	add.w	r3, r7, #12
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f000 ffaf 	bl	800b314 <xTaskCheckForTimeOut>
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d132      	bne.n	800a422 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3be:	f000 f9f2 	bl	800a7a6 <prvIsQueueEmpty>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d026      	beq.n	800a416 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d109      	bne.n	800a3e4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a3d0:	f001 ff40 	bl	800c254 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	689b      	ldr	r3, [r3, #8]
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f001 f901 	bl	800b5e0 <xTaskPriorityInherit>
 800a3de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a3e0:	f001 ff68 	bl	800c2b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	3324      	adds	r3, #36	; 0x24
 800a3e8:	683a      	ldr	r2, [r7, #0]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f000 fec7 	bl	800b180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3f4:	f000 f985 	bl	800a702 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a3f8:	f000 fcf6 	bl	800ade8 <xTaskResumeAll>
 800a3fc:	4603      	mov	r3, r0
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	f47f af68 	bne.w	800a2d4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a404:	4b18      	ldr	r3, [pc, #96]	; (800a468 <xQueueSemaphoreTake+0x214>)
 800a406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a40a:	601a      	str	r2, [r3, #0]
 800a40c:	f3bf 8f4f 	dsb	sy
 800a410:	f3bf 8f6f 	isb	sy
 800a414:	e75e      	b.n	800a2d4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a418:	f000 f973 	bl	800a702 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a41c:	f000 fce4 	bl	800ade8 <xTaskResumeAll>
 800a420:	e758      	b.n	800a2d4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a422:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a424:	f000 f96d 	bl	800a702 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a428:	f000 fcde 	bl	800ade8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a42c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a42e:	f000 f9ba 	bl	800a7a6 <prvIsQueueEmpty>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	f43f af4d 	beq.w	800a2d4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00d      	beq.n	800a45c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a440:	f001 ff08 	bl	800c254 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a446:	f000 f8b4 	bl	800a5b2 <prvGetDisinheritPriorityAfterTimeout>
 800a44a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a452:	4618      	mov	r0, r3
 800a454:	f001 f99a 	bl	800b78c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a458:	f001 ff2c 	bl	800c2b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a45c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3738      	adds	r7, #56	; 0x38
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}
 800a466:	bf00      	nop
 800a468:	e000ed04 	.word	0xe000ed04

0800a46c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08e      	sub	sp, #56	; 0x38
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	623b      	str	r3, [r7, #32]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <xQueueReceiveFromISR+0x3a>
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <xQueueReceiveFromISR+0x3e>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e000      	b.n	800a4ac <xQueueReceiveFromISR+0x40>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10a      	bne.n	800a4c6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	61fb      	str	r3, [r7, #28]
}
 800a4c2:	bf00      	nop
 800a4c4:	e7fe      	b.n	800a4c4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4c6:	f001 ffa7 	bl	800c418 <vPortValidateInterruptPriority>
	__asm volatile
 800a4ca:	f3ef 8211 	mrs	r2, BASEPRI
 800a4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d2:	f383 8811 	msr	BASEPRI, r3
 800a4d6:	f3bf 8f6f 	isb	sy
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	61ba      	str	r2, [r7, #24]
 800a4e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a4e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d02f      	beq.n	800a552 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4fc:	68b9      	ldr	r1, [r7, #8]
 800a4fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a500:	f000 f8d9 	bl	800a6b6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a506:	1e5a      	subs	r2, r3, #1
 800a508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a50c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a514:	d112      	bne.n	800a53c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d016      	beq.n	800a54c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a520:	3310      	adds	r3, #16
 800a522:	4618      	mov	r0, r3
 800a524:	f000 fe7c 	bl	800b220 <xTaskRemoveFromEventList>
 800a528:	4603      	mov	r3, r0
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d00e      	beq.n	800a54c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2201      	movs	r2, #1
 800a538:	601a      	str	r2, [r3, #0]
 800a53a:	e007      	b.n	800a54c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a540:	3301      	adds	r3, #1
 800a542:	b2db      	uxtb	r3, r3
 800a544:	b25a      	sxtb	r2, r3
 800a546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a54c:	2301      	movs	r3, #1
 800a54e:	637b      	str	r3, [r7, #52]	; 0x34
 800a550:	e001      	b.n	800a556 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a552:	2300      	movs	r3, #0
 800a554:	637b      	str	r3, [r7, #52]	; 0x34
 800a556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a558:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f383 8811 	msr	BASEPRI, r3
}
 800a560:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a564:	4618      	mov	r0, r3
 800a566:	3738      	adds	r7, #56	; 0x38
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}

0800a56c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b084      	sub	sp, #16
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d10a      	bne.n	800a594 <vQueueDelete+0x28>
	__asm volatile
 800a57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a582:	f383 8811 	msr	BASEPRI, r3
 800a586:	f3bf 8f6f 	isb	sy
 800a58a:	f3bf 8f4f 	dsb	sy
 800a58e:	60bb      	str	r3, [r7, #8]
}
 800a590:	bf00      	nop
 800a592:	e7fe      	b.n	800a592 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f000 f95f 	bl	800a858 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d102      	bne.n	800a5aa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f002 f843 	bl	800c630 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d006      	beq.n	800a5d0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a5cc:	60fb      	str	r3, [r7, #12]
 800a5ce:	e001      	b.n	800a5d4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
	}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3714      	adds	r7, #20
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e0:	4770      	bx	lr

0800a5e2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60f8      	str	r0, [r7, #12]
 800a5ea:	60b9      	str	r1, [r7, #8]
 800a5ec:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5f6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10d      	bne.n	800a61c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d14d      	bne.n	800a6a4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f001 f84f 	bl	800b6b0 <xTaskPriorityDisinherit>
 800a612:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	609a      	str	r2, [r3, #8]
 800a61a:	e043      	b.n	800a6a4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d119      	bne.n	800a656 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	6858      	ldr	r0, [r3, #4]
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	461a      	mov	r2, r3
 800a62c:	68b9      	ldr	r1, [r7, #8]
 800a62e:	f002 f959 	bl	800c8e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63a:	441a      	add	r2, r3
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	685a      	ldr	r2, [r3, #4]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d32b      	bcc.n	800a6a4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681a      	ldr	r2, [r3, #0]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	605a      	str	r2, [r3, #4]
 800a654:	e026      	b.n	800a6a4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	68d8      	ldr	r0, [r3, #12]
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65e:	461a      	mov	r2, r3
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	f002 f93f 	bl	800c8e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	68da      	ldr	r2, [r3, #12]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66e:	425b      	negs	r3, r3
 800a670:	441a      	add	r2, r3
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	68da      	ldr	r2, [r3, #12]
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	429a      	cmp	r2, r3
 800a680:	d207      	bcs.n	800a692 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	689a      	ldr	r2, [r3, #8]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68a:	425b      	negs	r3, r3
 800a68c:	441a      	add	r2, r3
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2b02      	cmp	r3, #2
 800a696:	d105      	bne.n	800a6a4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d002      	beq.n	800a6a4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	1c5a      	adds	r2, r3, #1
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6ac:	697b      	ldr	r3, [r7, #20]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3718      	adds	r7, #24
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
 800a6be:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d018      	beq.n	800a6fa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	68da      	ldr	r2, [r3, #12]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d0:	441a      	add	r2, r3
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	429a      	cmp	r2, r3
 800a6e0:	d303      	bcc.n	800a6ea <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	68d9      	ldr	r1, [r3, #12]
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	6838      	ldr	r0, [r7, #0]
 800a6f6:	f002 f8f5 	bl	800c8e4 <memcpy>
	}
}
 800a6fa:	bf00      	nop
 800a6fc:	3708      	adds	r7, #8
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b084      	sub	sp, #16
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a70a:	f001 fda3 	bl	800c254 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a714:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a716:	e011      	b.n	800a73c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d012      	beq.n	800a746 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3324      	adds	r3, #36	; 0x24
 800a724:	4618      	mov	r0, r3
 800a726:	f000 fd7b 	bl	800b220 <xTaskRemoveFromEventList>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d001      	beq.n	800a734 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a730:	f000 fe52 	bl	800b3d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a734:	7bfb      	ldrb	r3, [r7, #15]
 800a736:	3b01      	subs	r3, #1
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a73c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a740:	2b00      	cmp	r3, #0
 800a742:	dce9      	bgt.n	800a718 <prvUnlockQueue+0x16>
 800a744:	e000      	b.n	800a748 <prvUnlockQueue+0x46>
					break;
 800a746:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	22ff      	movs	r2, #255	; 0xff
 800a74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a750:	f001 fdb0 	bl	800c2b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a754:	f001 fd7e 	bl	800c254 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a75e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a760:	e011      	b.n	800a786 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d012      	beq.n	800a790 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	3310      	adds	r3, #16
 800a76e:	4618      	mov	r0, r3
 800a770:	f000 fd56 	bl	800b220 <xTaskRemoveFromEventList>
 800a774:	4603      	mov	r3, r0
 800a776:	2b00      	cmp	r3, #0
 800a778:	d001      	beq.n	800a77e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a77a:	f000 fe2d 	bl	800b3d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a77e:	7bbb      	ldrb	r3, [r7, #14]
 800a780:	3b01      	subs	r3, #1
 800a782:	b2db      	uxtb	r3, r3
 800a784:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a786:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	dce9      	bgt.n	800a762 <prvUnlockQueue+0x60>
 800a78e:	e000      	b.n	800a792 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a790:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	22ff      	movs	r2, #255	; 0xff
 800a796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a79a:	f001 fd8b 	bl	800c2b4 <vPortExitCritical>
}
 800a79e:	bf00      	nop
 800a7a0:	3710      	adds	r7, #16
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b084      	sub	sp, #16
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7ae:	f001 fd51 	bl	800c254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	60fb      	str	r3, [r7, #12]
 800a7be:	e001      	b.n	800a7c4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7c4:	f001 fd76 	bl	800c2b4 <vPortExitCritical>

	return xReturn;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7da:	f001 fd3b 	bl	800c254 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d102      	bne.n	800a7f0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	60fb      	str	r3, [r7, #12]
 800a7ee:	e001      	b.n	800a7f4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7f4:	f001 fd5e 	bl	800c2b4 <vPortExitCritical>

	return xReturn;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
	...

0800a804 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a804:	b480      	push	{r7}
 800a806:	b085      	sub	sp, #20
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
 800a812:	e014      	b.n	800a83e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a814:	4a0f      	ldr	r2, [pc, #60]	; (800a854 <vQueueAddToRegistry+0x50>)
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10b      	bne.n	800a838 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a820:	490c      	ldr	r1, [pc, #48]	; (800a854 <vQueueAddToRegistry+0x50>)
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a82a:	4a0a      	ldr	r2, [pc, #40]	; (800a854 <vQueueAddToRegistry+0x50>)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	00db      	lsls	r3, r3, #3
 800a830:	4413      	add	r3, r2
 800a832:	687a      	ldr	r2, [r7, #4]
 800a834:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a836:	e006      	b.n	800a846 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	3301      	adds	r3, #1
 800a83c:	60fb      	str	r3, [r7, #12]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b07      	cmp	r3, #7
 800a842:	d9e7      	bls.n	800a814 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a844:	bf00      	nop
 800a846:	bf00      	nop
 800a848:	3714      	adds	r7, #20
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
 800a852:	bf00      	nop
 800a854:	20000c8c 	.word	0x20000c8c

0800a858 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a860:	2300      	movs	r3, #0
 800a862:	60fb      	str	r3, [r7, #12]
 800a864:	e016      	b.n	800a894 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a866:	4a10      	ldr	r2, [pc, #64]	; (800a8a8 <vQueueUnregisterQueue+0x50>)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	4413      	add	r3, r2
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	429a      	cmp	r2, r3
 800a874:	d10b      	bne.n	800a88e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a876:	4a0c      	ldr	r2, [pc, #48]	; (800a8a8 <vQueueUnregisterQueue+0x50>)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2100      	movs	r1, #0
 800a87c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a880:	4a09      	ldr	r2, [pc, #36]	; (800a8a8 <vQueueUnregisterQueue+0x50>)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	00db      	lsls	r3, r3, #3
 800a886:	4413      	add	r3, r2
 800a888:	2200      	movs	r2, #0
 800a88a:	605a      	str	r2, [r3, #4]
				break;
 800a88c:	e006      	b.n	800a89c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b07      	cmp	r3, #7
 800a898:	d9e5      	bls.n	800a866 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a89a:	bf00      	nop
 800a89c:	bf00      	nop
 800a89e:	3714      	adds	r7, #20
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	20000c8c 	.word	0x20000c8c

0800a8ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b086      	sub	sp, #24
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8bc:	f001 fcca 	bl	800c254 <vPortEnterCritical>
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8cc:	d103      	bne.n	800a8d6 <vQueueWaitForMessageRestricted+0x2a>
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8dc:	b25b      	sxtb	r3, r3
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e2:	d103      	bne.n	800a8ec <vQueueWaitForMessageRestricted+0x40>
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8ec:	f001 fce2 	bl	800c2b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	3324      	adds	r3, #36	; 0x24
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	68b9      	ldr	r1, [r7, #8]
 800a900:	4618      	mov	r0, r3
 800a902:	f000 fc61 	bl	800b1c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a906:	6978      	ldr	r0, [r7, #20]
 800a908:	f7ff fefb 	bl	800a702 <prvUnlockQueue>
	}
 800a90c:	bf00      	nop
 800a90e:	3718      	adds	r7, #24
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a914:	b580      	push	{r7, lr}
 800a916:	b08e      	sub	sp, #56	; 0x38
 800a918:	af04      	add	r7, sp, #16
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10a      	bne.n	800a93e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	623b      	str	r3, [r7, #32]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10a      	bne.n	800a95a <xTaskCreateStatic+0x46>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	61fb      	str	r3, [r7, #28]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a95a:	23bc      	movs	r3, #188	; 0xbc
 800a95c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	2bbc      	cmp	r3, #188	; 0xbc
 800a962:	d00a      	beq.n	800a97a <xTaskCreateStatic+0x66>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	61bb      	str	r3, [r7, #24]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a97a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d01e      	beq.n	800a9c0 <xTaskCreateStatic+0xac>
 800a982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a984:	2b00      	cmp	r3, #0
 800a986:	d01b      	beq.n	800a9c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a98a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a98e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a990:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a994:	2202      	movs	r2, #2
 800a996:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a99a:	2300      	movs	r3, #0
 800a99c:	9303      	str	r3, [sp, #12]
 800a99e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a0:	9302      	str	r3, [sp, #8]
 800a9a2:	f107 0314 	add.w	r3, r7, #20
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	68b9      	ldr	r1, [r7, #8]
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 f850 	bl	800aa58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ba:	f000 f8f3 	bl	800aba4 <prvAddNewTaskToReadyList>
 800a9be:	e001      	b.n	800a9c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9c4:	697b      	ldr	r3, [r7, #20]
	}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3728      	adds	r7, #40	; 0x28
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b08c      	sub	sp, #48	; 0x30
 800a9d2:	af04      	add	r7, sp, #16
 800a9d4:	60f8      	str	r0, [r7, #12]
 800a9d6:	60b9      	str	r1, [r7, #8]
 800a9d8:	603b      	str	r3, [r7, #0]
 800a9da:	4613      	mov	r3, r2
 800a9dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9de:	88fb      	ldrh	r3, [r7, #6]
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f001 fd58 	bl	800c498 <pvPortMalloc>
 800a9e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9ea:	697b      	ldr	r3, [r7, #20]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00e      	beq.n	800aa0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9f0:	20bc      	movs	r0, #188	; 0xbc
 800a9f2:	f001 fd51 	bl	800c498 <pvPortMalloc>
 800a9f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	631a      	str	r2, [r3, #48]	; 0x30
 800aa04:	e005      	b.n	800aa12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa06:	6978      	ldr	r0, [r7, #20]
 800aa08:	f001 fe12 	bl	800c630 <vPortFree>
 800aa0c:	e001      	b.n	800aa12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d017      	beq.n	800aa48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa20:	88fa      	ldrh	r2, [r7, #6]
 800aa22:	2300      	movs	r3, #0
 800aa24:	9303      	str	r3, [sp, #12]
 800aa26:	69fb      	ldr	r3, [r7, #28]
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa2c:	9301      	str	r3, [sp, #4]
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	9300      	str	r3, [sp, #0]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f000 f80e 	bl	800aa58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa3c:	69f8      	ldr	r0, [r7, #28]
 800aa3e:	f000 f8b1 	bl	800aba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa42:	2301      	movs	r3, #1
 800aa44:	61bb      	str	r3, [r7, #24]
 800aa46:	e002      	b.n	800aa4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800aa4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa4e:	69bb      	ldr	r3, [r7, #24]
	}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3720      	adds	r7, #32
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa68:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	009b      	lsls	r3, r3, #2
 800aa6e:	461a      	mov	r2, r3
 800aa70:	21a5      	movs	r1, #165	; 0xa5
 800aa72:	f001 ff45 	bl	800c900 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa80:	3b01      	subs	r3, #1
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	4413      	add	r3, r2
 800aa86:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	f023 0307 	bic.w	r3, r3, #7
 800aa8e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa90:	69bb      	ldr	r3, [r7, #24]
 800aa92:	f003 0307 	and.w	r3, r3, #7
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d00a      	beq.n	800aab0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	617b      	str	r3, [r7, #20]
}
 800aaac:	bf00      	nop
 800aaae:	e7fe      	b.n	800aaae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d01f      	beq.n	800aaf6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aab6:	2300      	movs	r3, #0
 800aab8:	61fb      	str	r3, [r7, #28]
 800aaba:	e012      	b.n	800aae2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	69fb      	ldr	r3, [r7, #28]
 800aac0:	4413      	add	r3, r2
 800aac2:	7819      	ldrb	r1, [r3, #0]
 800aac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aac6:	69fb      	ldr	r3, [r7, #28]
 800aac8:	4413      	add	r3, r2
 800aaca:	3334      	adds	r3, #52	; 0x34
 800aacc:	460a      	mov	r2, r1
 800aace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	69fb      	ldr	r3, [r7, #28]
 800aad4:	4413      	add	r3, r2
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d006      	beq.n	800aaea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	3301      	adds	r3, #1
 800aae0:	61fb      	str	r3, [r7, #28]
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	2b0f      	cmp	r3, #15
 800aae6:	d9e9      	bls.n	800aabc <prvInitialiseNewTask+0x64>
 800aae8:	e000      	b.n	800aaec <prvInitialiseNewTask+0x94>
			{
				break;
 800aaea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aaf4:	e003      	b.n	800aafe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf8:	2200      	movs	r2, #0
 800aafa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	2b37      	cmp	r3, #55	; 0x37
 800ab02:	d901      	bls.n	800ab08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab04:	2337      	movs	r3, #55	; 0x37
 800ab06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab16:	2200      	movs	r2, #0
 800ab18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	3304      	adds	r3, #4
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fe56 	bl	80097d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab26:	3318      	adds	r3, #24
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe fe51 	bl	80097d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab46:	2200      	movs	r2, #0
 800ab48:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab56:	3354      	adds	r3, #84	; 0x54
 800ab58:	2260      	movs	r2, #96	; 0x60
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f001 fecf 	bl	800c900 <memset>
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	4a0c      	ldr	r2, [pc, #48]	; (800ab98 <prvInitialiseNewTask+0x140>)
 800ab66:	659a      	str	r2, [r3, #88]	; 0x58
 800ab68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6a:	4a0c      	ldr	r2, [pc, #48]	; (800ab9c <prvInitialiseNewTask+0x144>)
 800ab6c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ab6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab70:	4a0b      	ldr	r2, [pc, #44]	; (800aba0 <prvInitialiseNewTask+0x148>)
 800ab72:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	68f9      	ldr	r1, [r7, #12]
 800ab78:	69b8      	ldr	r0, [r7, #24]
 800ab7a:	f001 fa3f 	bl	800bffc <pxPortInitialiseStack>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab8e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab90:	bf00      	nop
 800ab92:	3720      	adds	r7, #32
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	0802c728 	.word	0x0802c728
 800ab9c:	0802c748 	.word	0x0802c748
 800aba0:	0802c708 	.word	0x0802c708

0800aba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abac:	f001 fb52 	bl	800c254 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abb0:	4b2d      	ldr	r3, [pc, #180]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3301      	adds	r3, #1
 800abb6:	4a2c      	ldr	r2, [pc, #176]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abba:	4b2c      	ldr	r3, [pc, #176]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d109      	bne.n	800abd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abc2:	4a2a      	ldr	r2, [pc, #168]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abc8:	4b27      	ldr	r3, [pc, #156]	; (800ac68 <prvAddNewTaskToReadyList+0xc4>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d110      	bne.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abd0:	f000 fc26 	bl	800b420 <prvInitialiseTaskLists>
 800abd4:	e00d      	b.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800abd6:	4b26      	ldr	r3, [pc, #152]	; (800ac70 <prvAddNewTaskToReadyList+0xcc>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d109      	bne.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800abde:	4b23      	ldr	r3, [pc, #140]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	429a      	cmp	r2, r3
 800abea:	d802      	bhi.n	800abf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800abec:	4a1f      	ldr	r2, [pc, #124]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800abf2:	4b20      	ldr	r3, [pc, #128]	; (800ac74 <prvAddNewTaskToReadyList+0xd0>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	3301      	adds	r3, #1
 800abf8:	4a1e      	ldr	r2, [pc, #120]	; (800ac74 <prvAddNewTaskToReadyList+0xd0>)
 800abfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800abfc:	4b1d      	ldr	r3, [pc, #116]	; (800ac74 <prvAddNewTaskToReadyList+0xd0>)
 800abfe:	681a      	ldr	r2, [r3, #0]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac08:	4b1b      	ldr	r3, [pc, #108]	; (800ac78 <prvAddNewTaskToReadyList+0xd4>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d903      	bls.n	800ac18 <prvAddNewTaskToReadyList+0x74>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	4a18      	ldr	r2, [pc, #96]	; (800ac78 <prvAddNewTaskToReadyList+0xd4>)
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac1c:	4613      	mov	r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	4413      	add	r3, r2
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	4a15      	ldr	r2, [pc, #84]	; (800ac7c <prvAddNewTaskToReadyList+0xd8>)
 800ac26:	441a      	add	r2, r3
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	4610      	mov	r0, r2
 800ac30:	f7fe fddb 	bl	80097ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac34:	f001 fb3e 	bl	800c2b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac38:	4b0d      	ldr	r3, [pc, #52]	; (800ac70 <prvAddNewTaskToReadyList+0xcc>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00e      	beq.n	800ac5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac40:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <prvAddNewTaskToReadyList+0xc8>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	429a      	cmp	r2, r3
 800ac4c:	d207      	bcs.n	800ac5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac4e:	4b0c      	ldr	r3, [pc, #48]	; (800ac80 <prvAddNewTaskToReadyList+0xdc>)
 800ac50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac54:	601a      	str	r2, [r3, #0]
 800ac56:	f3bf 8f4f 	dsb	sy
 800ac5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac5e:	bf00      	nop
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	200011a0 	.word	0x200011a0
 800ac6c:	20000ccc 	.word	0x20000ccc
 800ac70:	200011ac 	.word	0x200011ac
 800ac74:	200011bc 	.word	0x200011bc
 800ac78:	200011a8 	.word	0x200011a8
 800ac7c:	20000cd0 	.word	0x20000cd0
 800ac80:	e000ed04 	.word	0xe000ed04

0800ac84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d017      	beq.n	800acc6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac96:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <vTaskDelay+0x60>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00a      	beq.n	800acb4 <vTaskDelay+0x30>
	__asm volatile
 800ac9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	60bb      	str	r3, [r7, #8]
}
 800acb0:	bf00      	nop
 800acb2:	e7fe      	b.n	800acb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800acb4:	f000 f88a 	bl	800adcc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800acb8:	2100      	movs	r1, #0
 800acba:	6878      	ldr	r0, [r7, #4]
 800acbc:	f000 fdfc 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acc0:	f000 f892 	bl	800ade8 <xTaskResumeAll>
 800acc4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d107      	bne.n	800acdc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800accc:	4b06      	ldr	r3, [pc, #24]	; (800ace8 <vTaskDelay+0x64>)
 800acce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd2:	601a      	str	r2, [r3, #0]
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd80      	pop	{r7, pc}
 800ace4:	200011c8 	.word	0x200011c8
 800ace8:	e000ed04 	.word	0xe000ed04

0800acec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b08a      	sub	sp, #40	; 0x28
 800acf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800acf2:	2300      	movs	r3, #0
 800acf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800acf6:	2300      	movs	r3, #0
 800acf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800acfa:	463a      	mov	r2, r7
 800acfc:	1d39      	adds	r1, r7, #4
 800acfe:	f107 0308 	add.w	r3, r7, #8
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fd10 	bl	8009728 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	9202      	str	r2, [sp, #8]
 800ad10:	9301      	str	r3, [sp, #4]
 800ad12:	2300      	movs	r3, #0
 800ad14:	9300      	str	r3, [sp, #0]
 800ad16:	2300      	movs	r3, #0
 800ad18:	460a      	mov	r2, r1
 800ad1a:	4924      	ldr	r1, [pc, #144]	; (800adac <vTaskStartScheduler+0xc0>)
 800ad1c:	4824      	ldr	r0, [pc, #144]	; (800adb0 <vTaskStartScheduler+0xc4>)
 800ad1e:	f7ff fdf9 	bl	800a914 <xTaskCreateStatic>
 800ad22:	4603      	mov	r3, r0
 800ad24:	4a23      	ldr	r2, [pc, #140]	; (800adb4 <vTaskStartScheduler+0xc8>)
 800ad26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad28:	4b22      	ldr	r3, [pc, #136]	; (800adb4 <vTaskStartScheduler+0xc8>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d002      	beq.n	800ad36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ad30:	2301      	movs	r3, #1
 800ad32:	617b      	str	r3, [r7, #20]
 800ad34:	e001      	b.n	800ad3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b01      	cmp	r3, #1
 800ad3e:	d102      	bne.n	800ad46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ad40:	f000 fe0e 	bl	800b960 <xTimerCreateTimerTask>
 800ad44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d11b      	bne.n	800ad84 <vTaskStartScheduler+0x98>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	613b      	str	r3, [r7, #16]
}
 800ad5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ad60:	4b15      	ldr	r3, [pc, #84]	; (800adb8 <vTaskStartScheduler+0xcc>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3354      	adds	r3, #84	; 0x54
 800ad66:	4a15      	ldr	r2, [pc, #84]	; (800adbc <vTaskStartScheduler+0xd0>)
 800ad68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ad6a:	4b15      	ldr	r3, [pc, #84]	; (800adc0 <vTaskStartScheduler+0xd4>)
 800ad6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ad72:	4b14      	ldr	r3, [pc, #80]	; (800adc4 <vTaskStartScheduler+0xd8>)
 800ad74:	2201      	movs	r2, #1
 800ad76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ad78:	4b13      	ldr	r3, [pc, #76]	; (800adc8 <vTaskStartScheduler+0xdc>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ad7e:	f001 f9c7 	bl	800c110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ad82:	e00e      	b.n	800ada2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad8a:	d10a      	bne.n	800ada2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad90:	f383 8811 	msr	BASEPRI, r3
 800ad94:	f3bf 8f6f 	isb	sy
 800ad98:	f3bf 8f4f 	dsb	sy
 800ad9c:	60fb      	str	r3, [r7, #12]
}
 800ad9e:	bf00      	nop
 800ada0:	e7fe      	b.n	800ada0 <vTaskStartScheduler+0xb4>
}
 800ada2:	bf00      	nop
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	0800d40c 	.word	0x0800d40c
 800adb0:	0800b3f1 	.word	0x0800b3f1
 800adb4:	200011c4 	.word	0x200011c4
 800adb8:	20000ccc 	.word	0x20000ccc
 800adbc:	2000002c 	.word	0x2000002c
 800adc0:	200011c0 	.word	0x200011c0
 800adc4:	200011ac 	.word	0x200011ac
 800adc8:	200011a4 	.word	0x200011a4

0800adcc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800adcc:	b480      	push	{r7}
 800adce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800add0:	4b04      	ldr	r3, [pc, #16]	; (800ade4 <vTaskSuspendAll+0x18>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3301      	adds	r3, #1
 800add6:	4a03      	ldr	r2, [pc, #12]	; (800ade4 <vTaskSuspendAll+0x18>)
 800add8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800adda:	bf00      	nop
 800addc:	46bd      	mov	sp, r7
 800adde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade2:	4770      	bx	lr
 800ade4:	200011c8 	.word	0x200011c8

0800ade8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800adee:	2300      	movs	r3, #0
 800adf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800adf2:	2300      	movs	r3, #0
 800adf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800adf6:	4b42      	ldr	r3, [pc, #264]	; (800af00 <xTaskResumeAll+0x118>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d10a      	bne.n	800ae14 <xTaskResumeAll+0x2c>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	603b      	str	r3, [r7, #0]
}
 800ae10:	bf00      	nop
 800ae12:	e7fe      	b.n	800ae12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae14:	f001 fa1e 	bl	800c254 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae18:	4b39      	ldr	r3, [pc, #228]	; (800af00 <xTaskResumeAll+0x118>)
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	4a38      	ldr	r2, [pc, #224]	; (800af00 <xTaskResumeAll+0x118>)
 800ae20:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae22:	4b37      	ldr	r3, [pc, #220]	; (800af00 <xTaskResumeAll+0x118>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d162      	bne.n	800aef0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae2a:	4b36      	ldr	r3, [pc, #216]	; (800af04 <xTaskResumeAll+0x11c>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d05e      	beq.n	800aef0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae32:	e02f      	b.n	800ae94 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae34:	4b34      	ldr	r3, [pc, #208]	; (800af08 <xTaskResumeAll+0x120>)
 800ae36:	68db      	ldr	r3, [r3, #12]
 800ae38:	68db      	ldr	r3, [r3, #12]
 800ae3a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	3318      	adds	r3, #24
 800ae40:	4618      	mov	r0, r3
 800ae42:	f7fe fd2f 	bl	80098a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	3304      	adds	r3, #4
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	f7fe fd2a 	bl	80098a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae54:	4b2d      	ldr	r3, [pc, #180]	; (800af0c <xTaskResumeAll+0x124>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d903      	bls.n	800ae64 <xTaskResumeAll+0x7c>
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae60:	4a2a      	ldr	r2, [pc, #168]	; (800af0c <xTaskResumeAll+0x124>)
 800ae62:	6013      	str	r3, [r2, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae68:	4613      	mov	r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	4413      	add	r3, r2
 800ae6e:	009b      	lsls	r3, r3, #2
 800ae70:	4a27      	ldr	r2, [pc, #156]	; (800af10 <xTaskResumeAll+0x128>)
 800ae72:	441a      	add	r2, r3
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3304      	adds	r3, #4
 800ae78:	4619      	mov	r1, r3
 800ae7a:	4610      	mov	r0, r2
 800ae7c:	f7fe fcb5 	bl	80097ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae84:	4b23      	ldr	r3, [pc, #140]	; (800af14 <xTaskResumeAll+0x12c>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae8a:	429a      	cmp	r2, r3
 800ae8c:	d302      	bcc.n	800ae94 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae8e:	4b22      	ldr	r3, [pc, #136]	; (800af18 <xTaskResumeAll+0x130>)
 800ae90:	2201      	movs	r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae94:	4b1c      	ldr	r3, [pc, #112]	; (800af08 <xTaskResumeAll+0x120>)
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1cb      	bne.n	800ae34 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d001      	beq.n	800aea6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aea2:	f000 fb5f 	bl	800b564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800aea6:	4b1d      	ldr	r3, [pc, #116]	; (800af1c <xTaskResumeAll+0x134>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d010      	beq.n	800aed4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aeb2:	f000 f847 	bl	800af44 <xTaskIncrementTick>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d002      	beq.n	800aec2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800aebc:	4b16      	ldr	r3, [pc, #88]	; (800af18 <xTaskResumeAll+0x130>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1f1      	bne.n	800aeb2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800aece:	4b13      	ldr	r3, [pc, #76]	; (800af1c <xTaskResumeAll+0x134>)
 800aed0:	2200      	movs	r2, #0
 800aed2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aed4:	4b10      	ldr	r3, [pc, #64]	; (800af18 <xTaskResumeAll+0x130>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d009      	beq.n	800aef0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aedc:	2301      	movs	r3, #1
 800aede:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aee0:	4b0f      	ldr	r3, [pc, #60]	; (800af20 <xTaskResumeAll+0x138>)
 800aee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aee6:	601a      	str	r2, [r3, #0]
 800aee8:	f3bf 8f4f 	dsb	sy
 800aeec:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aef0:	f001 f9e0 	bl	800c2b4 <vPortExitCritical>

	return xAlreadyYielded;
 800aef4:	68bb      	ldr	r3, [r7, #8]
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	200011c8 	.word	0x200011c8
 800af04:	200011a0 	.word	0x200011a0
 800af08:	20001160 	.word	0x20001160
 800af0c:	200011a8 	.word	0x200011a8
 800af10:	20000cd0 	.word	0x20000cd0
 800af14:	20000ccc 	.word	0x20000ccc
 800af18:	200011b4 	.word	0x200011b4
 800af1c:	200011b0 	.word	0x200011b0
 800af20:	e000ed04 	.word	0xe000ed04

0800af24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af2a:	4b05      	ldr	r3, [pc, #20]	; (800af40 <xTaskGetTickCount+0x1c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af30:	687b      	ldr	r3, [r7, #4]
}
 800af32:	4618      	mov	r0, r3
 800af34:	370c      	adds	r7, #12
 800af36:	46bd      	mov	sp, r7
 800af38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3c:	4770      	bx	lr
 800af3e:	bf00      	nop
 800af40:	200011a4 	.word	0x200011a4

0800af44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b086      	sub	sp, #24
 800af48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af4e:	4b4f      	ldr	r3, [pc, #316]	; (800b08c <xTaskIncrementTick+0x148>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	f040 808f 	bne.w	800b076 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800af58:	4b4d      	ldr	r3, [pc, #308]	; (800b090 <xTaskIncrementTick+0x14c>)
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	3301      	adds	r3, #1
 800af5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800af60:	4a4b      	ldr	r2, [pc, #300]	; (800b090 <xTaskIncrementTick+0x14c>)
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d120      	bne.n	800afae <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800af6c:	4b49      	ldr	r3, [pc, #292]	; (800b094 <xTaskIncrementTick+0x150>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d00a      	beq.n	800af8c <xTaskIncrementTick+0x48>
	__asm volatile
 800af76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af7a:	f383 8811 	msr	BASEPRI, r3
 800af7e:	f3bf 8f6f 	isb	sy
 800af82:	f3bf 8f4f 	dsb	sy
 800af86:	603b      	str	r3, [r7, #0]
}
 800af88:	bf00      	nop
 800af8a:	e7fe      	b.n	800af8a <xTaskIncrementTick+0x46>
 800af8c:	4b41      	ldr	r3, [pc, #260]	; (800b094 <xTaskIncrementTick+0x150>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	60fb      	str	r3, [r7, #12]
 800af92:	4b41      	ldr	r3, [pc, #260]	; (800b098 <xTaskIncrementTick+0x154>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4a3f      	ldr	r2, [pc, #252]	; (800b094 <xTaskIncrementTick+0x150>)
 800af98:	6013      	str	r3, [r2, #0]
 800af9a:	4a3f      	ldr	r2, [pc, #252]	; (800b098 <xTaskIncrementTick+0x154>)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6013      	str	r3, [r2, #0]
 800afa0:	4b3e      	ldr	r3, [pc, #248]	; (800b09c <xTaskIncrementTick+0x158>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3301      	adds	r3, #1
 800afa6:	4a3d      	ldr	r2, [pc, #244]	; (800b09c <xTaskIncrementTick+0x158>)
 800afa8:	6013      	str	r3, [r2, #0]
 800afaa:	f000 fadb 	bl	800b564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800afae:	4b3c      	ldr	r3, [pc, #240]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	693a      	ldr	r2, [r7, #16]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d349      	bcc.n	800b04c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afb8:	4b36      	ldr	r3, [pc, #216]	; (800b094 <xTaskIncrementTick+0x150>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d104      	bne.n	800afcc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc2:	4b37      	ldr	r3, [pc, #220]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800afc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afc8:	601a      	str	r2, [r3, #0]
					break;
 800afca:	e03f      	b.n	800b04c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afcc:	4b31      	ldr	r3, [pc, #196]	; (800b094 <xTaskIncrementTick+0x150>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	68db      	ldr	r3, [r3, #12]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800afdc:	693a      	ldr	r2, [r7, #16]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d203      	bcs.n	800afec <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800afe4:	4a2e      	ldr	r2, [pc, #184]	; (800b0a0 <xTaskIncrementTick+0x15c>)
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800afea:	e02f      	b.n	800b04c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	3304      	adds	r3, #4
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7fe fc57 	bl	80098a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800affa:	2b00      	cmp	r3, #0
 800affc:	d004      	beq.n	800b008 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	3318      	adds	r3, #24
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fc4e 	bl	80098a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00c:	4b25      	ldr	r3, [pc, #148]	; (800b0a4 <xTaskIncrementTick+0x160>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d903      	bls.n	800b01c <xTaskIncrementTick+0xd8>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a22      	ldr	r2, [pc, #136]	; (800b0a4 <xTaskIncrementTick+0x160>)
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4613      	mov	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4a1f      	ldr	r2, [pc, #124]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800b02a:	441a      	add	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3304      	adds	r3, #4
 800b030:	4619      	mov	r1, r3
 800b032:	4610      	mov	r0, r2
 800b034:	f7fe fbd9 	bl	80097ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b03c:	4b1b      	ldr	r3, [pc, #108]	; (800b0ac <xTaskIncrementTick+0x168>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b042:	429a      	cmp	r2, r3
 800b044:	d3b8      	bcc.n	800afb8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b046:	2301      	movs	r3, #1
 800b048:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b04a:	e7b5      	b.n	800afb8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b04c:	4b17      	ldr	r3, [pc, #92]	; (800b0ac <xTaskIncrementTick+0x168>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b052:	4915      	ldr	r1, [pc, #84]	; (800b0a8 <xTaskIncrementTick+0x164>)
 800b054:	4613      	mov	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	4413      	add	r3, r2
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	440b      	add	r3, r1
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d901      	bls.n	800b068 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b064:	2301      	movs	r3, #1
 800b066:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b068:	4b11      	ldr	r3, [pc, #68]	; (800b0b0 <xTaskIncrementTick+0x16c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d007      	beq.n	800b080 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b070:	2301      	movs	r3, #1
 800b072:	617b      	str	r3, [r7, #20]
 800b074:	e004      	b.n	800b080 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b076:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <xTaskIncrementTick+0x170>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3301      	adds	r3, #1
 800b07c:	4a0d      	ldr	r2, [pc, #52]	; (800b0b4 <xTaskIncrementTick+0x170>)
 800b07e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b080:	697b      	ldr	r3, [r7, #20]
}
 800b082:	4618      	mov	r0, r3
 800b084:	3718      	adds	r7, #24
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	200011c8 	.word	0x200011c8
 800b090:	200011a4 	.word	0x200011a4
 800b094:	20001158 	.word	0x20001158
 800b098:	2000115c 	.word	0x2000115c
 800b09c:	200011b8 	.word	0x200011b8
 800b0a0:	200011c0 	.word	0x200011c0
 800b0a4:	200011a8 	.word	0x200011a8
 800b0a8:	20000cd0 	.word	0x20000cd0
 800b0ac:	20000ccc 	.word	0x20000ccc
 800b0b0:	200011b4 	.word	0x200011b4
 800b0b4:	200011b0 	.word	0x200011b0

0800b0b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b0be:	4b2a      	ldr	r3, [pc, #168]	; (800b168 <vTaskSwitchContext+0xb0>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d003      	beq.n	800b0ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b0c6:	4b29      	ldr	r3, [pc, #164]	; (800b16c <vTaskSwitchContext+0xb4>)
 800b0c8:	2201      	movs	r2, #1
 800b0ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b0cc:	e046      	b.n	800b15c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b0ce:	4b27      	ldr	r3, [pc, #156]	; (800b16c <vTaskSwitchContext+0xb4>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0d4:	4b26      	ldr	r3, [pc, #152]	; (800b170 <vTaskSwitchContext+0xb8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	e010      	b.n	800b0fe <vTaskSwitchContext+0x46>
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10a      	bne.n	800b0f8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	607b      	str	r3, [r7, #4]
}
 800b0f4:	bf00      	nop
 800b0f6:	e7fe      	b.n	800b0f6 <vTaskSwitchContext+0x3e>
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	3b01      	subs	r3, #1
 800b0fc:	60fb      	str	r3, [r7, #12]
 800b0fe:	491d      	ldr	r1, [pc, #116]	; (800b174 <vTaskSwitchContext+0xbc>)
 800b100:	68fa      	ldr	r2, [r7, #12]
 800b102:	4613      	mov	r3, r2
 800b104:	009b      	lsls	r3, r3, #2
 800b106:	4413      	add	r3, r2
 800b108:	009b      	lsls	r3, r3, #2
 800b10a:	440b      	add	r3, r1
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d0e4      	beq.n	800b0dc <vTaskSwitchContext+0x24>
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4613      	mov	r3, r2
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	4413      	add	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4a15      	ldr	r2, [pc, #84]	; (800b174 <vTaskSwitchContext+0xbc>)
 800b11e:	4413      	add	r3, r2
 800b120:	60bb      	str	r3, [r7, #8]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	685a      	ldr	r2, [r3, #4]
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	605a      	str	r2, [r3, #4]
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	685a      	ldr	r2, [r3, #4]
 800b130:	68bb      	ldr	r3, [r7, #8]
 800b132:	3308      	adds	r3, #8
 800b134:	429a      	cmp	r2, r3
 800b136:	d104      	bne.n	800b142 <vTaskSwitchContext+0x8a>
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	685a      	ldr	r2, [r3, #4]
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	605a      	str	r2, [r3, #4]
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	4a0b      	ldr	r2, [pc, #44]	; (800b178 <vTaskSwitchContext+0xc0>)
 800b14a:	6013      	str	r3, [r2, #0]
 800b14c:	4a08      	ldr	r2, [pc, #32]	; (800b170 <vTaskSwitchContext+0xb8>)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b152:	4b09      	ldr	r3, [pc, #36]	; (800b178 <vTaskSwitchContext+0xc0>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	3354      	adds	r3, #84	; 0x54
 800b158:	4a08      	ldr	r2, [pc, #32]	; (800b17c <vTaskSwitchContext+0xc4>)
 800b15a:	6013      	str	r3, [r2, #0]
}
 800b15c:	bf00      	nop
 800b15e:	3714      	adds	r7, #20
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	200011c8 	.word	0x200011c8
 800b16c:	200011b4 	.word	0x200011b4
 800b170:	200011a8 	.word	0x200011a8
 800b174:	20000cd0 	.word	0x20000cd0
 800b178:	20000ccc 	.word	0x20000ccc
 800b17c:	2000002c 	.word	0x2000002c

0800b180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b084      	sub	sp, #16
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
 800b188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d10a      	bne.n	800b1a6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b194:	f383 8811 	msr	BASEPRI, r3
 800b198:	f3bf 8f6f 	isb	sy
 800b19c:	f3bf 8f4f 	dsb	sy
 800b1a0:	60fb      	str	r3, [r7, #12]
}
 800b1a2:	bf00      	nop
 800b1a4:	e7fe      	b.n	800b1a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1a6:	4b07      	ldr	r3, [pc, #28]	; (800b1c4 <vTaskPlaceOnEventList+0x44>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	3318      	adds	r3, #24
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f7fe fb3f 	bl	8009832 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	6838      	ldr	r0, [r7, #0]
 800b1b8:	f000 fb7e 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
}
 800b1bc:	bf00      	nop
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	20000ccc 	.word	0x20000ccc

0800b1c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10a      	bne.n	800b1f0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	617b      	str	r3, [r7, #20]
}
 800b1ec:	bf00      	nop
 800b1ee:	e7fe      	b.n	800b1ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b1f0:	4b0a      	ldr	r3, [pc, #40]	; (800b21c <vTaskPlaceOnEventListRestricted+0x54>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3318      	adds	r3, #24
 800b1f6:	4619      	mov	r1, r3
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f7fe faf6 	bl	80097ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b208:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b20a:	6879      	ldr	r1, [r7, #4]
 800b20c:	68b8      	ldr	r0, [r7, #8]
 800b20e:	f000 fb53 	bl	800b8b8 <prvAddCurrentTaskToDelayedList>
	}
 800b212:	bf00      	nop
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
 800b21a:	bf00      	nop
 800b21c:	20000ccc 	.word	0x20000ccc

0800b220 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b086      	sub	sp, #24
 800b224:	af00      	add	r7, sp, #0
 800b226:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	68db      	ldr	r3, [r3, #12]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10a      	bne.n	800b24c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	60fb      	str	r3, [r7, #12]
}
 800b248:	bf00      	nop
 800b24a:	e7fe      	b.n	800b24a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	3318      	adds	r3, #24
 800b250:	4618      	mov	r0, r3
 800b252:	f7fe fb27 	bl	80098a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b256:	4b1e      	ldr	r3, [pc, #120]	; (800b2d0 <xTaskRemoveFromEventList+0xb0>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d11d      	bne.n	800b29a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	3304      	adds	r3, #4
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fb1e 	bl	80098a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b26c:	4b19      	ldr	r3, [pc, #100]	; (800b2d4 <xTaskRemoveFromEventList+0xb4>)
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	429a      	cmp	r2, r3
 800b272:	d903      	bls.n	800b27c <xTaskRemoveFromEventList+0x5c>
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b278:	4a16      	ldr	r2, [pc, #88]	; (800b2d4 <xTaskRemoveFromEventList+0xb4>)
 800b27a:	6013      	str	r3, [r2, #0]
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b280:	4613      	mov	r3, r2
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	4413      	add	r3, r2
 800b286:	009b      	lsls	r3, r3, #2
 800b288:	4a13      	ldr	r2, [pc, #76]	; (800b2d8 <xTaskRemoveFromEventList+0xb8>)
 800b28a:	441a      	add	r2, r3
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	3304      	adds	r3, #4
 800b290:	4619      	mov	r1, r3
 800b292:	4610      	mov	r0, r2
 800b294:	f7fe faa9 	bl	80097ea <vListInsertEnd>
 800b298:	e005      	b.n	800b2a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	3318      	adds	r3, #24
 800b29e:	4619      	mov	r1, r3
 800b2a0:	480e      	ldr	r0, [pc, #56]	; (800b2dc <xTaskRemoveFromEventList+0xbc>)
 800b2a2:	f7fe faa2 	bl	80097ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2aa:	4b0d      	ldr	r3, [pc, #52]	; (800b2e0 <xTaskRemoveFromEventList+0xc0>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d905      	bls.n	800b2c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <xTaskRemoveFromEventList+0xc4>)
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	601a      	str	r2, [r3, #0]
 800b2be:	e001      	b.n	800b2c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b2c4:	697b      	ldr	r3, [r7, #20]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3718      	adds	r7, #24
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200011c8 	.word	0x200011c8
 800b2d4:	200011a8 	.word	0x200011a8
 800b2d8:	20000cd0 	.word	0x20000cd0
 800b2dc:	20001160 	.word	0x20001160
 800b2e0:	20000ccc 	.word	0x20000ccc
 800b2e4:	200011b4 	.word	0x200011b4

0800b2e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b2f0:	4b06      	ldr	r3, [pc, #24]	; (800b30c <vTaskInternalSetTimeOutState+0x24>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b2f8:	4b05      	ldr	r3, [pc, #20]	; (800b310 <vTaskInternalSetTimeOutState+0x28>)
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	605a      	str	r2, [r3, #4]
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	200011b8 	.word	0x200011b8
 800b310:	200011a4 	.word	0x200011a4

0800b314 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b088      	sub	sp, #32
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b328:	f383 8811 	msr	BASEPRI, r3
 800b32c:	f3bf 8f6f 	isb	sy
 800b330:	f3bf 8f4f 	dsb	sy
 800b334:	613b      	str	r3, [r7, #16]
}
 800b336:	bf00      	nop
 800b338:	e7fe      	b.n	800b338 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b356:	f000 ff7d 	bl	800c254 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b35a:	4b1d      	ldr	r3, [pc, #116]	; (800b3d0 <xTaskCheckForTimeOut+0xbc>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	1ad3      	subs	r3, r2, r3
 800b368:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b372:	d102      	bne.n	800b37a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b374:	2300      	movs	r3, #0
 800b376:	61fb      	str	r3, [r7, #28]
 800b378:	e023      	b.n	800b3c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	4b15      	ldr	r3, [pc, #84]	; (800b3d4 <xTaskCheckForTimeOut+0xc0>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d007      	beq.n	800b396 <xTaskCheckForTimeOut+0x82>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	69ba      	ldr	r2, [r7, #24]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d302      	bcc.n	800b396 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b390:	2301      	movs	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
 800b394:	e015      	b.n	800b3c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d20b      	bcs.n	800b3b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	1ad2      	subs	r2, r2, r3
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f7ff ff9b 	bl	800b2e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61fb      	str	r3, [r7, #28]
 800b3b6:	e004      	b.n	800b3c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b3c2:	f000 ff77 	bl	800c2b4 <vPortExitCritical>

	return xReturn;
 800b3c6:	69fb      	ldr	r3, [r7, #28]
}
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	3720      	adds	r7, #32
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}
 800b3d0:	200011a4 	.word	0x200011a4
 800b3d4:	200011b8 	.word	0x200011b8

0800b3d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b3d8:	b480      	push	{r7}
 800b3da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b3dc:	4b03      	ldr	r3, [pc, #12]	; (800b3ec <vTaskMissedYield+0x14>)
 800b3de:	2201      	movs	r2, #1
 800b3e0:	601a      	str	r2, [r3, #0]
}
 800b3e2:	bf00      	nop
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr
 800b3ec:	200011b4 	.word	0x200011b4

0800b3f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b3f8:	f000 f852 	bl	800b4a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b3fc:	4b06      	ldr	r3, [pc, #24]	; (800b418 <prvIdleTask+0x28>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b01      	cmp	r3, #1
 800b402:	d9f9      	bls.n	800b3f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b404:	4b05      	ldr	r3, [pc, #20]	; (800b41c <prvIdleTask+0x2c>)
 800b406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b40a:	601a      	str	r2, [r3, #0]
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b414:	e7f0      	b.n	800b3f8 <prvIdleTask+0x8>
 800b416:	bf00      	nop
 800b418:	20000cd0 	.word	0x20000cd0
 800b41c:	e000ed04 	.word	0xe000ed04

0800b420 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b426:	2300      	movs	r3, #0
 800b428:	607b      	str	r3, [r7, #4]
 800b42a:	e00c      	b.n	800b446 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b42c:	687a      	ldr	r2, [r7, #4]
 800b42e:	4613      	mov	r3, r2
 800b430:	009b      	lsls	r3, r3, #2
 800b432:	4413      	add	r3, r2
 800b434:	009b      	lsls	r3, r3, #2
 800b436:	4a12      	ldr	r2, [pc, #72]	; (800b480 <prvInitialiseTaskLists+0x60>)
 800b438:	4413      	add	r3, r2
 800b43a:	4618      	mov	r0, r3
 800b43c:	f7fe f9a8 	bl	8009790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3301      	adds	r3, #1
 800b444:	607b      	str	r3, [r7, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2b37      	cmp	r3, #55	; 0x37
 800b44a:	d9ef      	bls.n	800b42c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b44c:	480d      	ldr	r0, [pc, #52]	; (800b484 <prvInitialiseTaskLists+0x64>)
 800b44e:	f7fe f99f 	bl	8009790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b452:	480d      	ldr	r0, [pc, #52]	; (800b488 <prvInitialiseTaskLists+0x68>)
 800b454:	f7fe f99c 	bl	8009790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b458:	480c      	ldr	r0, [pc, #48]	; (800b48c <prvInitialiseTaskLists+0x6c>)
 800b45a:	f7fe f999 	bl	8009790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b45e:	480c      	ldr	r0, [pc, #48]	; (800b490 <prvInitialiseTaskLists+0x70>)
 800b460:	f7fe f996 	bl	8009790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b464:	480b      	ldr	r0, [pc, #44]	; (800b494 <prvInitialiseTaskLists+0x74>)
 800b466:	f7fe f993 	bl	8009790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b46a:	4b0b      	ldr	r3, [pc, #44]	; (800b498 <prvInitialiseTaskLists+0x78>)
 800b46c:	4a05      	ldr	r2, [pc, #20]	; (800b484 <prvInitialiseTaskLists+0x64>)
 800b46e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b470:	4b0a      	ldr	r3, [pc, #40]	; (800b49c <prvInitialiseTaskLists+0x7c>)
 800b472:	4a05      	ldr	r2, [pc, #20]	; (800b488 <prvInitialiseTaskLists+0x68>)
 800b474:	601a      	str	r2, [r3, #0]
}
 800b476:	bf00      	nop
 800b478:	3708      	adds	r7, #8
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
 800b47e:	bf00      	nop
 800b480:	20000cd0 	.word	0x20000cd0
 800b484:	20001130 	.word	0x20001130
 800b488:	20001144 	.word	0x20001144
 800b48c:	20001160 	.word	0x20001160
 800b490:	20001174 	.word	0x20001174
 800b494:	2000118c 	.word	0x2000118c
 800b498:	20001158 	.word	0x20001158
 800b49c:	2000115c 	.word	0x2000115c

0800b4a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4a6:	e019      	b.n	800b4dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b4a8:	f000 fed4 	bl	800c254 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <prvCheckTasksWaitingTermination+0x50>)
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f7fe f9f3 	bl	80098a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b4be:	4b0d      	ldr	r3, [pc, #52]	; (800b4f4 <prvCheckTasksWaitingTermination+0x54>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	3b01      	subs	r3, #1
 800b4c4:	4a0b      	ldr	r2, [pc, #44]	; (800b4f4 <prvCheckTasksWaitingTermination+0x54>)
 800b4c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <prvCheckTasksWaitingTermination+0x58>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	4a0a      	ldr	r2, [pc, #40]	; (800b4f8 <prvCheckTasksWaitingTermination+0x58>)
 800b4d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b4d2:	f000 feef 	bl	800c2b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 f810 	bl	800b4fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b4dc:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <prvCheckTasksWaitingTermination+0x58>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d1e1      	bne.n	800b4a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b4e4:	bf00      	nop
 800b4e6:	bf00      	nop
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	20001174 	.word	0x20001174
 800b4f4:	200011a0 	.word	0x200011a0
 800b4f8:	20001188 	.word	0x20001188

0800b4fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	3354      	adds	r3, #84	; 0x54
 800b508:	4618      	mov	r0, r3
 800b50a:	f001 fb05 	bl	800cb18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b514:	2b00      	cmp	r3, #0
 800b516:	d108      	bne.n	800b52a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51c:	4618      	mov	r0, r3
 800b51e:	f001 f887 	bl	800c630 <vPortFree>
				vPortFree( pxTCB );
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f001 f884 	bl	800c630 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b528:	e018      	b.n	800b55c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b530:	2b01      	cmp	r3, #1
 800b532:	d103      	bne.n	800b53c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 f87b 	bl	800c630 <vPortFree>
	}
 800b53a:	e00f      	b.n	800b55c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b542:	2b02      	cmp	r3, #2
 800b544:	d00a      	beq.n	800b55c <prvDeleteTCB+0x60>
	__asm volatile
 800b546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54a:	f383 8811 	msr	BASEPRI, r3
 800b54e:	f3bf 8f6f 	isb	sy
 800b552:	f3bf 8f4f 	dsb	sy
 800b556:	60fb      	str	r3, [r7, #12]
}
 800b558:	bf00      	nop
 800b55a:	e7fe      	b.n	800b55a <prvDeleteTCB+0x5e>
	}
 800b55c:	bf00      	nop
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b564:	b480      	push	{r7}
 800b566:	b083      	sub	sp, #12
 800b568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b56a:	4b0c      	ldr	r3, [pc, #48]	; (800b59c <prvResetNextTaskUnblockTime+0x38>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	2b00      	cmp	r3, #0
 800b572:	d104      	bne.n	800b57e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b574:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b576:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b57a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b57c:	e008      	b.n	800b590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b57e:	4b07      	ldr	r3, [pc, #28]	; (800b59c <prvResetNextTaskUnblockTime+0x38>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68db      	ldr	r3, [r3, #12]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	4a04      	ldr	r2, [pc, #16]	; (800b5a0 <prvResetNextTaskUnblockTime+0x3c>)
 800b58e:	6013      	str	r3, [r2, #0]
}
 800b590:	bf00      	nop
 800b592:	370c      	adds	r7, #12
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr
 800b59c:	20001158 	.word	0x20001158
 800b5a0:	200011c0 	.word	0x200011c0

0800b5a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5a4:	b480      	push	{r7}
 800b5a6:	b083      	sub	sp, #12
 800b5a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b5aa:	4b0b      	ldr	r3, [pc, #44]	; (800b5d8 <xTaskGetSchedulerState+0x34>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d102      	bne.n	800b5b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	607b      	str	r3, [r7, #4]
 800b5b6:	e008      	b.n	800b5ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5b8:	4b08      	ldr	r3, [pc, #32]	; (800b5dc <xTaskGetSchedulerState+0x38>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d102      	bne.n	800b5c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	e001      	b.n	800b5ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5ca:	687b      	ldr	r3, [r7, #4]
	}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr
 800b5d8:	200011ac 	.word	0x200011ac
 800b5dc:	200011c8 	.word	0x200011c8

0800b5e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b084      	sub	sp, #16
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d051      	beq.n	800b69a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5fa:	4b2a      	ldr	r3, [pc, #168]	; (800b6a4 <xTaskPriorityInherit+0xc4>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b600:	429a      	cmp	r2, r3
 800b602:	d241      	bcs.n	800b688 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	db06      	blt.n	800b61a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b60c:	4b25      	ldr	r3, [pc, #148]	; (800b6a4 <xTaskPriorityInherit+0xc4>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b612:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	6959      	ldr	r1, [r3, #20]
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	4613      	mov	r3, r2
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	4a1f      	ldr	r2, [pc, #124]	; (800b6a8 <xTaskPriorityInherit+0xc8>)
 800b62c:	4413      	add	r3, r2
 800b62e:	4299      	cmp	r1, r3
 800b630:	d122      	bne.n	800b678 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	3304      	adds	r3, #4
 800b636:	4618      	mov	r0, r3
 800b638:	f7fe f934 	bl	80098a4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b63c:	4b19      	ldr	r3, [pc, #100]	; (800b6a4 <xTaskPriorityInherit+0xc4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b64a:	4b18      	ldr	r3, [pc, #96]	; (800b6ac <xTaskPriorityInherit+0xcc>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	429a      	cmp	r2, r3
 800b650:	d903      	bls.n	800b65a <xTaskPriorityInherit+0x7a>
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b656:	4a15      	ldr	r2, [pc, #84]	; (800b6ac <xTaskPriorityInherit+0xcc>)
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65e:	4613      	mov	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	4413      	add	r3, r2
 800b664:	009b      	lsls	r3, r3, #2
 800b666:	4a10      	ldr	r2, [pc, #64]	; (800b6a8 <xTaskPriorityInherit+0xc8>)
 800b668:	441a      	add	r2, r3
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	3304      	adds	r3, #4
 800b66e:	4619      	mov	r1, r3
 800b670:	4610      	mov	r0, r2
 800b672:	f7fe f8ba 	bl	80097ea <vListInsertEnd>
 800b676:	e004      	b.n	800b682 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b678:	4b0a      	ldr	r3, [pc, #40]	; (800b6a4 <xTaskPriorityInherit+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b682:	2301      	movs	r3, #1
 800b684:	60fb      	str	r3, [r7, #12]
 800b686:	e008      	b.n	800b69a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b68c:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <xTaskPriorityInherit+0xc4>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b692:	429a      	cmp	r2, r3
 800b694:	d201      	bcs.n	800b69a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b696:	2301      	movs	r3, #1
 800b698:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b69a:	68fb      	ldr	r3, [r7, #12]
	}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000ccc 	.word	0x20000ccc
 800b6a8:	20000cd0 	.word	0x20000cd0
 800b6ac:	200011a8 	.word	0x200011a8

0800b6b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d056      	beq.n	800b774 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b6c6:	4b2e      	ldr	r3, [pc, #184]	; (800b780 <xTaskPriorityDisinherit+0xd0>)
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	693a      	ldr	r2, [r7, #16]
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d00a      	beq.n	800b6e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d4:	f383 8811 	msr	BASEPRI, r3
 800b6d8:	f3bf 8f6f 	isb	sy
 800b6dc:	f3bf 8f4f 	dsb	sy
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10a      	bne.n	800b704 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	60bb      	str	r3, [r7, #8]
}
 800b700:	bf00      	nop
 800b702:	e7fe      	b.n	800b702 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b704:	693b      	ldr	r3, [r7, #16]
 800b706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b708:	1e5a      	subs	r2, r3, #1
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b716:	429a      	cmp	r2, r3
 800b718:	d02c      	beq.n	800b774 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d128      	bne.n	800b774 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	3304      	adds	r3, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe f8bc 	bl	80098a4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b72c:	693b      	ldr	r3, [r7, #16]
 800b72e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b738:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b740:	693b      	ldr	r3, [r7, #16]
 800b742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b744:	4b0f      	ldr	r3, [pc, #60]	; (800b784 <xTaskPriorityDisinherit+0xd4>)
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d903      	bls.n	800b754 <xTaskPriorityDisinherit+0xa4>
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b750:	4a0c      	ldr	r2, [pc, #48]	; (800b784 <xTaskPriorityDisinherit+0xd4>)
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	009b      	lsls	r3, r3, #2
 800b760:	4a09      	ldr	r2, [pc, #36]	; (800b788 <xTaskPriorityDisinherit+0xd8>)
 800b762:	441a      	add	r2, r3
 800b764:	693b      	ldr	r3, [r7, #16]
 800b766:	3304      	adds	r3, #4
 800b768:	4619      	mov	r1, r3
 800b76a:	4610      	mov	r0, r2
 800b76c:	f7fe f83d 	bl	80097ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b770:	2301      	movs	r3, #1
 800b772:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b774:	697b      	ldr	r3, [r7, #20]
	}
 800b776:	4618      	mov	r0, r3
 800b778:	3718      	adds	r7, #24
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop
 800b780:	20000ccc 	.word	0x20000ccc
 800b784:	200011a8 	.word	0x200011a8
 800b788:	20000cd0 	.word	0x20000cd0

0800b78c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b088      	sub	sp, #32
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b79a:	2301      	movs	r3, #1
 800b79c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d06a      	beq.n	800b87a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b0:	f383 8811 	msr	BASEPRI, r3
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	f3bf 8f4f 	dsb	sy
 800b7bc:	60fb      	str	r3, [r7, #12]
}
 800b7be:	bf00      	nop
 800b7c0:	e7fe      	b.n	800b7c0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d902      	bls.n	800b7d2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e002      	b.n	800b7d8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b7d2:	69bb      	ldr	r3, [r7, #24]
 800b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7d6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b7d8:	69bb      	ldr	r3, [r7, #24]
 800b7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7dc:	69fa      	ldr	r2, [r7, #28]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d04b      	beq.n	800b87a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b7e2:	69bb      	ldr	r3, [r7, #24]
 800b7e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7e6:	697a      	ldr	r2, [r7, #20]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d146      	bne.n	800b87a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b7ec:	4b25      	ldr	r3, [pc, #148]	; (800b884 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	69ba      	ldr	r2, [r7, #24]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d10a      	bne.n	800b80c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b7f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7fa:	f383 8811 	msr	BASEPRI, r3
 800b7fe:	f3bf 8f6f 	isb	sy
 800b802:	f3bf 8f4f 	dsb	sy
 800b806:	60bb      	str	r3, [r7, #8]
}
 800b808:	bf00      	nop
 800b80a:	e7fe      	b.n	800b80a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b810:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b812:	69bb      	ldr	r3, [r7, #24]
 800b814:	69fa      	ldr	r2, [r7, #28]
 800b816:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b818:	69bb      	ldr	r3, [r7, #24]
 800b81a:	699b      	ldr	r3, [r3, #24]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	db04      	blt.n	800b82a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b820:	69fb      	ldr	r3, [r7, #28]
 800b822:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b826:	69bb      	ldr	r3, [r7, #24]
 800b828:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	6959      	ldr	r1, [r3, #20]
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	4613      	mov	r3, r2
 800b832:	009b      	lsls	r3, r3, #2
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	4a13      	ldr	r2, [pc, #76]	; (800b888 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b83a:	4413      	add	r3, r2
 800b83c:	4299      	cmp	r1, r3
 800b83e:	d11c      	bne.n	800b87a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	3304      	adds	r3, #4
 800b844:	4618      	mov	r0, r3
 800b846:	f7fe f82d 	bl	80098a4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b84a:	69bb      	ldr	r3, [r7, #24]
 800b84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b84e:	4b0f      	ldr	r3, [pc, #60]	; (800b88c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	429a      	cmp	r2, r3
 800b854:	d903      	bls.n	800b85e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b85a:	4a0c      	ldr	r2, [pc, #48]	; (800b88c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b85c:	6013      	str	r3, [r2, #0]
 800b85e:	69bb      	ldr	r3, [r7, #24]
 800b860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b862:	4613      	mov	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	4a07      	ldr	r2, [pc, #28]	; (800b888 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b86c:	441a      	add	r2, r3
 800b86e:	69bb      	ldr	r3, [r7, #24]
 800b870:	3304      	adds	r3, #4
 800b872:	4619      	mov	r1, r3
 800b874:	4610      	mov	r0, r2
 800b876:	f7fd ffb8 	bl	80097ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b87a:	bf00      	nop
 800b87c:	3720      	adds	r7, #32
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	20000ccc 	.word	0x20000ccc
 800b888:	20000cd0 	.word	0x20000cd0
 800b88c:	200011a8 	.word	0x200011a8

0800b890 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b890:	b480      	push	{r7}
 800b892:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b894:	4b07      	ldr	r3, [pc, #28]	; (800b8b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d004      	beq.n	800b8a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b89c:	4b05      	ldr	r3, [pc, #20]	; (800b8b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8a2:	3201      	adds	r2, #1
 800b8a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b8a6:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
	}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b2:	4770      	bx	lr
 800b8b4:	20000ccc 	.word	0x20000ccc

0800b8b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b084      	sub	sp, #16
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b8c2:	4b21      	ldr	r3, [pc, #132]	; (800b948 <prvAddCurrentTaskToDelayedList+0x90>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8c8:	4b20      	ldr	r3, [pc, #128]	; (800b94c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	3304      	adds	r3, #4
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7fd ffe8 	bl	80098a4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8da:	d10a      	bne.n	800b8f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d007      	beq.n	800b8f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b8e2:	4b1a      	ldr	r3, [pc, #104]	; (800b94c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	4819      	ldr	r0, [pc, #100]	; (800b950 <prvAddCurrentTaskToDelayedList+0x98>)
 800b8ec:	f7fd ff7d 	bl	80097ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b8f0:	e026      	b.n	800b940 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b8fa:	4b14      	ldr	r3, [pc, #80]	; (800b94c <prvAddCurrentTaskToDelayedList+0x94>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68ba      	ldr	r2, [r7, #8]
 800b900:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b902:	68ba      	ldr	r2, [r7, #8]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	429a      	cmp	r2, r3
 800b908:	d209      	bcs.n	800b91e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b90a:	4b12      	ldr	r3, [pc, #72]	; (800b954 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	4b0f      	ldr	r3, [pc, #60]	; (800b94c <prvAddCurrentTaskToDelayedList+0x94>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3304      	adds	r3, #4
 800b914:	4619      	mov	r1, r3
 800b916:	4610      	mov	r0, r2
 800b918:	f7fd ff8b 	bl	8009832 <vListInsert>
}
 800b91c:	e010      	b.n	800b940 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b91e:	4b0e      	ldr	r3, [pc, #56]	; (800b958 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b0a      	ldr	r3, [pc, #40]	; (800b94c <prvAddCurrentTaskToDelayedList+0x94>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	3304      	adds	r3, #4
 800b928:	4619      	mov	r1, r3
 800b92a:	4610      	mov	r0, r2
 800b92c:	f7fd ff81 	bl	8009832 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b930:	4b0a      	ldr	r3, [pc, #40]	; (800b95c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	68ba      	ldr	r2, [r7, #8]
 800b936:	429a      	cmp	r2, r3
 800b938:	d202      	bcs.n	800b940 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b93a:	4a08      	ldr	r2, [pc, #32]	; (800b95c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	6013      	str	r3, [r2, #0]
}
 800b940:	bf00      	nop
 800b942:	3710      	adds	r7, #16
 800b944:	46bd      	mov	sp, r7
 800b946:	bd80      	pop	{r7, pc}
 800b948:	200011a4 	.word	0x200011a4
 800b94c:	20000ccc 	.word	0x20000ccc
 800b950:	2000118c 	.word	0x2000118c
 800b954:	2000115c 	.word	0x2000115c
 800b958:	20001158 	.word	0x20001158
 800b95c:	200011c0 	.word	0x200011c0

0800b960 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b966:	2300      	movs	r3, #0
 800b968:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b96a:	f000 fb07 	bl	800bf7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b96e:	4b1c      	ldr	r3, [pc, #112]	; (800b9e0 <xTimerCreateTimerTask+0x80>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d021      	beq.n	800b9ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b976:	2300      	movs	r3, #0
 800b978:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b97e:	1d3a      	adds	r2, r7, #4
 800b980:	f107 0108 	add.w	r1, r7, #8
 800b984:	f107 030c 	add.w	r3, r7, #12
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fd fee7 	bl	800975c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b98e:	6879      	ldr	r1, [r7, #4]
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	68fa      	ldr	r2, [r7, #12]
 800b994:	9202      	str	r2, [sp, #8]
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	2302      	movs	r3, #2
 800b99a:	9300      	str	r3, [sp, #0]
 800b99c:	2300      	movs	r3, #0
 800b99e:	460a      	mov	r2, r1
 800b9a0:	4910      	ldr	r1, [pc, #64]	; (800b9e4 <xTimerCreateTimerTask+0x84>)
 800b9a2:	4811      	ldr	r0, [pc, #68]	; (800b9e8 <xTimerCreateTimerTask+0x88>)
 800b9a4:	f7fe ffb6 	bl	800a914 <xTaskCreateStatic>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	4a10      	ldr	r2, [pc, #64]	; (800b9ec <xTimerCreateTimerTask+0x8c>)
 800b9ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b9ae:	4b0f      	ldr	r3, [pc, #60]	; (800b9ec <xTimerCreateTimerTask+0x8c>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d001      	beq.n	800b9ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10a      	bne.n	800b9d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c4:	f383 8811 	msr	BASEPRI, r3
 800b9c8:	f3bf 8f6f 	isb	sy
 800b9cc:	f3bf 8f4f 	dsb	sy
 800b9d0:	613b      	str	r3, [r7, #16]
}
 800b9d2:	bf00      	nop
 800b9d4:	e7fe      	b.n	800b9d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b9d6:	697b      	ldr	r3, [r7, #20]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	200011fc 	.word	0x200011fc
 800b9e4:	0800d414 	.word	0x0800d414
 800b9e8:	0800bb25 	.word	0x0800bb25
 800b9ec:	20001200 	.word	0x20001200

0800b9f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b08a      	sub	sp, #40	; 0x28
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	60b9      	str	r1, [r7, #8]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d10a      	bne.n	800ba1e <xTimerGenericCommand+0x2e>
	__asm volatile
 800ba08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0c:	f383 8811 	msr	BASEPRI, r3
 800ba10:	f3bf 8f6f 	isb	sy
 800ba14:	f3bf 8f4f 	dsb	sy
 800ba18:	623b      	str	r3, [r7, #32]
}
 800ba1a:	bf00      	nop
 800ba1c:	e7fe      	b.n	800ba1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ba1e:	4b1a      	ldr	r3, [pc, #104]	; (800ba88 <xTimerGenericCommand+0x98>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d02a      	beq.n	800ba7c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	2b05      	cmp	r3, #5
 800ba36:	dc18      	bgt.n	800ba6a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ba38:	f7ff fdb4 	bl	800b5a4 <xTaskGetSchedulerState>
 800ba3c:	4603      	mov	r3, r0
 800ba3e:	2b02      	cmp	r3, #2
 800ba40:	d109      	bne.n	800ba56 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ba42:	4b11      	ldr	r3, [pc, #68]	; (800ba88 <xTimerGenericCommand+0x98>)
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	f107 0110 	add.w	r1, r7, #16
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba4e:	f7fe f8fb 	bl	8009c48 <xQueueGenericSend>
 800ba52:	6278      	str	r0, [r7, #36]	; 0x24
 800ba54:	e012      	b.n	800ba7c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ba56:	4b0c      	ldr	r3, [pc, #48]	; (800ba88 <xTimerGenericCommand+0x98>)
 800ba58:	6818      	ldr	r0, [r3, #0]
 800ba5a:	f107 0110 	add.w	r1, r7, #16
 800ba5e:	2300      	movs	r3, #0
 800ba60:	2200      	movs	r2, #0
 800ba62:	f7fe f8f1 	bl	8009c48 <xQueueGenericSend>
 800ba66:	6278      	str	r0, [r7, #36]	; 0x24
 800ba68:	e008      	b.n	800ba7c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ba6a:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <xTimerGenericCommand+0x98>)
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f107 0110 	add.w	r1, r7, #16
 800ba72:	2300      	movs	r3, #0
 800ba74:	683a      	ldr	r2, [r7, #0]
 800ba76:	f7fe f9e5 	bl	8009e44 <xQueueGenericSendFromISR>
 800ba7a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3728      	adds	r7, #40	; 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
 800ba86:	bf00      	nop
 800ba88:	200011fc 	.word	0x200011fc

0800ba8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b088      	sub	sp, #32
 800ba90:	af02      	add	r7, sp, #8
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba96:	4b22      	ldr	r3, [pc, #136]	; (800bb20 <prvProcessExpiredTimer+0x94>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	3304      	adds	r3, #4
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fd fefd 	bl	80098a4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bab0:	f003 0304 	and.w	r3, r3, #4
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d022      	beq.n	800bafe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	699a      	ldr	r2, [r3, #24]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	18d1      	adds	r1, r2, r3
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	683a      	ldr	r2, [r7, #0]
 800bac4:	6978      	ldr	r0, [r7, #20]
 800bac6:	f000 f8d1 	bl	800bc6c <prvInsertTimerInActiveList>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01f      	beq.n	800bb10 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bad0:	2300      	movs	r3, #0
 800bad2:	9300      	str	r3, [sp, #0]
 800bad4:	2300      	movs	r3, #0
 800bad6:	687a      	ldr	r2, [r7, #4]
 800bad8:	2100      	movs	r1, #0
 800bada:	6978      	ldr	r0, [r7, #20]
 800badc:	f7ff ff88 	bl	800b9f0 <xTimerGenericCommand>
 800bae0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d113      	bne.n	800bb10 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	f383 8811 	msr	BASEPRI, r3
 800baf0:	f3bf 8f6f 	isb	sy
 800baf4:	f3bf 8f4f 	dsb	sy
 800baf8:	60fb      	str	r3, [r7, #12]
}
 800bafa:	bf00      	nop
 800bafc:	e7fe      	b.n	800bafc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb04:	f023 0301 	bic.w	r3, r3, #1
 800bb08:	b2da      	uxtb	r2, r3
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	6978      	ldr	r0, [r7, #20]
 800bb16:	4798      	blx	r3
}
 800bb18:	bf00      	nop
 800bb1a:	3718      	adds	r7, #24
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	200011f4 	.word	0x200011f4

0800bb24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb2c:	f107 0308 	add.w	r3, r7, #8
 800bb30:	4618      	mov	r0, r3
 800bb32:	f000 f857 	bl	800bbe4 <prvGetNextExpireTime>
 800bb36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f000 f803 	bl	800bb48 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bb42:	f000 f8d5 	bl	800bcf0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bb46:	e7f1      	b.n	800bb2c <prvTimerTask+0x8>

0800bb48 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bb52:	f7ff f93b 	bl	800adcc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bb56:	f107 0308 	add.w	r3, r7, #8
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f000 f866 	bl	800bc2c <prvSampleTimeNow>
 800bb60:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d130      	bne.n	800bbca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <prvProcessTimerOrBlockTask+0x3c>
 800bb6e:	687a      	ldr	r2, [r7, #4]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	429a      	cmp	r2, r3
 800bb74:	d806      	bhi.n	800bb84 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bb76:	f7ff f937 	bl	800ade8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bb7a:	68f9      	ldr	r1, [r7, #12]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff ff85 	bl	800ba8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bb82:	e024      	b.n	800bbce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d008      	beq.n	800bb9c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb8a:	4b13      	ldr	r3, [pc, #76]	; (800bbd8 <prvProcessTimerOrBlockTask+0x90>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <prvProcessTimerOrBlockTask+0x50>
 800bb94:	2301      	movs	r3, #1
 800bb96:	e000      	b.n	800bb9a <prvProcessTimerOrBlockTask+0x52>
 800bb98:	2300      	movs	r3, #0
 800bb9a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <prvProcessTimerOrBlockTask+0x94>)
 800bb9e:	6818      	ldr	r0, [r3, #0]
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1ad3      	subs	r3, r2, r3
 800bba6:	683a      	ldr	r2, [r7, #0]
 800bba8:	4619      	mov	r1, r3
 800bbaa:	f7fe fe7f 	bl	800a8ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bbae:	f7ff f91b 	bl	800ade8 <xTaskResumeAll>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10a      	bne.n	800bbce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bbb8:	4b09      	ldr	r3, [pc, #36]	; (800bbe0 <prvProcessTimerOrBlockTask+0x98>)
 800bbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	f3bf 8f6f 	isb	sy
}
 800bbc8:	e001      	b.n	800bbce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bbca:	f7ff f90d 	bl	800ade8 <xTaskResumeAll>
}
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}
 800bbd6:	bf00      	nop
 800bbd8:	200011f8 	.word	0x200011f8
 800bbdc:	200011fc 	.word	0x200011fc
 800bbe0:	e000ed04 	.word	0xe000ed04

0800bbe4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bbec:	4b0e      	ldr	r3, [pc, #56]	; (800bc28 <prvGetNextExpireTime+0x44>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d101      	bne.n	800bbfa <prvGetNextExpireTime+0x16>
 800bbf6:	2201      	movs	r2, #1
 800bbf8:	e000      	b.n	800bbfc <prvGetNextExpireTime+0x18>
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d105      	bne.n	800bc14 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bc08:	4b07      	ldr	r3, [pc, #28]	; (800bc28 <prvGetNextExpireTime+0x44>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68db      	ldr	r3, [r3, #12]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e001      	b.n	800bc18 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bc14:	2300      	movs	r3, #0
 800bc16:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bc18:	68fb      	ldr	r3, [r7, #12]
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3714      	adds	r7, #20
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc24:	4770      	bx	lr
 800bc26:	bf00      	nop
 800bc28:	200011f4 	.word	0x200011f4

0800bc2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bc2c:	b580      	push	{r7, lr}
 800bc2e:	b084      	sub	sp, #16
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bc34:	f7ff f976 	bl	800af24 <xTaskGetTickCount>
 800bc38:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bc3a:	4b0b      	ldr	r3, [pc, #44]	; (800bc68 <prvSampleTimeNow+0x3c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68fa      	ldr	r2, [r7, #12]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d205      	bcs.n	800bc50 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bc44:	f000 f936 	bl	800beb4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]
 800bc4e:	e002      	b.n	800bc56 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bc56:	4a04      	ldr	r2, [pc, #16]	; (800bc68 <prvSampleTimeNow+0x3c>)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20001204 	.word	0x20001204

0800bc6c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	607a      	str	r2, [r7, #4]
 800bc78:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d812      	bhi.n	800bcb8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	1ad2      	subs	r2, r2, r3
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d302      	bcc.n	800bca6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bca0:	2301      	movs	r3, #1
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	e01b      	b.n	800bcde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bca6:	4b10      	ldr	r3, [pc, #64]	; (800bce8 <prvInsertTimerInActiveList+0x7c>)
 800bca8:	681a      	ldr	r2, [r3, #0]
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4619      	mov	r1, r3
 800bcb0:	4610      	mov	r0, r2
 800bcb2:	f7fd fdbe 	bl	8009832 <vListInsert>
 800bcb6:	e012      	b.n	800bcde <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d206      	bcs.n	800bcce <prvInsertTimerInActiveList+0x62>
 800bcc0:	68ba      	ldr	r2, [r7, #8]
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d302      	bcc.n	800bcce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bcc8:	2301      	movs	r3, #1
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	e007      	b.n	800bcde <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bcce:	4b07      	ldr	r3, [pc, #28]	; (800bcec <prvInsertTimerInActiveList+0x80>)
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3304      	adds	r3, #4
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	4610      	mov	r0, r2
 800bcda:	f7fd fdaa 	bl	8009832 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bcde:	697b      	ldr	r3, [r7, #20]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}
 800bce8:	200011f8 	.word	0x200011f8
 800bcec:	200011f4 	.word	0x200011f4

0800bcf0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b08e      	sub	sp, #56	; 0x38
 800bcf4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcf6:	e0ca      	b.n	800be8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	da18      	bge.n	800bd30 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bcfe:	1d3b      	adds	r3, r7, #4
 800bd00:	3304      	adds	r3, #4
 800bd02:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bd04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d10a      	bne.n	800bd20 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bd0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd0e:	f383 8811 	msr	BASEPRI, r3
 800bd12:	f3bf 8f6f 	isb	sy
 800bd16:	f3bf 8f4f 	dsb	sy
 800bd1a:	61fb      	str	r3, [r7, #28]
}
 800bd1c:	bf00      	nop
 800bd1e:	e7fe      	b.n	800bd1e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bd20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd26:	6850      	ldr	r0, [r2, #4]
 800bd28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd2a:	6892      	ldr	r2, [r2, #8]
 800bd2c:	4611      	mov	r1, r2
 800bd2e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	f2c0 80aa 	blt.w	800be8c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3e:	695b      	ldr	r3, [r3, #20]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d004      	beq.n	800bd4e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd46:	3304      	adds	r3, #4
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fd fdab 	bl	80098a4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bd4e:	463b      	mov	r3, r7
 800bd50:	4618      	mov	r0, r3
 800bd52:	f7ff ff6b 	bl	800bc2c <prvSampleTimeNow>
 800bd56:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2b09      	cmp	r3, #9
 800bd5c:	f200 8097 	bhi.w	800be8e <prvProcessReceivedCommands+0x19e>
 800bd60:	a201      	add	r2, pc, #4	; (adr r2, 800bd68 <prvProcessReceivedCommands+0x78>)
 800bd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd66:	bf00      	nop
 800bd68:	0800bd91 	.word	0x0800bd91
 800bd6c:	0800bd91 	.word	0x0800bd91
 800bd70:	0800bd91 	.word	0x0800bd91
 800bd74:	0800be05 	.word	0x0800be05
 800bd78:	0800be19 	.word	0x0800be19
 800bd7c:	0800be63 	.word	0x0800be63
 800bd80:	0800bd91 	.word	0x0800bd91
 800bd84:	0800bd91 	.word	0x0800bd91
 800bd88:	0800be05 	.word	0x0800be05
 800bd8c:	0800be19 	.word	0x0800be19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd96:	f043 0301 	orr.w	r3, r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	699b      	ldr	r3, [r3, #24]
 800bda8:	18d1      	adds	r1, r2, r3
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdb0:	f7ff ff5c 	bl	800bc6c <prvInsertTimerInActiveList>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d069      	beq.n	800be8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdbc:	6a1b      	ldr	r3, [r3, #32]
 800bdbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdc0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdc8:	f003 0304 	and.w	r3, r3, #4
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d05e      	beq.n	800be8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	699b      	ldr	r3, [r3, #24]
 800bdd6:	441a      	add	r2, r3
 800bdd8:	2300      	movs	r3, #0
 800bdda:	9300      	str	r3, [sp, #0]
 800bddc:	2300      	movs	r3, #0
 800bdde:	2100      	movs	r1, #0
 800bde0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bde2:	f7ff fe05 	bl	800b9f0 <xTimerGenericCommand>
 800bde6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bde8:	6a3b      	ldr	r3, [r7, #32]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d14f      	bne.n	800be8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	61bb      	str	r3, [r7, #24]
}
 800be00:	bf00      	nop
 800be02:	e7fe      	b.n	800be02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be0a:	f023 0301 	bic.w	r3, r3, #1
 800be0e:	b2da      	uxtb	r2, r3
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800be16:	e03a      	b.n	800be8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be1e:	f043 0301 	orr.w	r3, r3, #1
 800be22:	b2da      	uxtb	r2, r3
 800be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	699b      	ldr	r3, [r3, #24]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d10a      	bne.n	800be4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800be38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3c:	f383 8811 	msr	BASEPRI, r3
 800be40:	f3bf 8f6f 	isb	sy
 800be44:	f3bf 8f4f 	dsb	sy
 800be48:	617b      	str	r3, [r7, #20]
}
 800be4a:	bf00      	nop
 800be4c:	e7fe      	b.n	800be4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	699a      	ldr	r2, [r3, #24]
 800be52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be54:	18d1      	adds	r1, r2, r3
 800be56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be5c:	f7ff ff06 	bl	800bc6c <prvInsertTimerInActiveList>
					break;
 800be60:	e015      	b.n	800be8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800be62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be68:	f003 0302 	and.w	r3, r3, #2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d103      	bne.n	800be78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800be70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be72:	f000 fbdd 	bl	800c630 <vPortFree>
 800be76:	e00a      	b.n	800be8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be7e:	f023 0301 	bic.w	r3, r3, #1
 800be82:	b2da      	uxtb	r2, r3
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be8a:	e000      	b.n	800be8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be8e:	4b08      	ldr	r3, [pc, #32]	; (800beb0 <prvProcessReceivedCommands+0x1c0>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	1d39      	adds	r1, r7, #4
 800be94:	2200      	movs	r2, #0
 800be96:	4618      	mov	r0, r3
 800be98:	f7fe f8fc 	bl	800a094 <xQueueReceive>
 800be9c:	4603      	mov	r3, r0
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	f47f af2a 	bne.w	800bcf8 <prvProcessReceivedCommands+0x8>
	}
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	3730      	adds	r7, #48	; 0x30
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop
 800beb0:	200011fc 	.word	0x200011fc

0800beb4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800beb4:	b580      	push	{r7, lr}
 800beb6:	b088      	sub	sp, #32
 800beb8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800beba:	e048      	b.n	800bf4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bebc:	4b2d      	ldr	r3, [pc, #180]	; (800bf74 <prvSwitchTimerLists+0xc0>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec6:	4b2b      	ldr	r3, [pc, #172]	; (800bf74 <prvSwitchTimerLists+0xc0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3304      	adds	r3, #4
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7fd fce5 	bl	80098a4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6a1b      	ldr	r3, [r3, #32]
 800bede:	68f8      	ldr	r0, [r7, #12]
 800bee0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bee8:	f003 0304 	and.w	r3, r3, #4
 800beec:	2b00      	cmp	r3, #0
 800beee:	d02e      	beq.n	800bf4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	699b      	ldr	r3, [r3, #24]
 800bef4:	693a      	ldr	r2, [r7, #16]
 800bef6:	4413      	add	r3, r2
 800bef8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d90e      	bls.n	800bf20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	68ba      	ldr	r2, [r7, #8]
 800bf06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	68fa      	ldr	r2, [r7, #12]
 800bf0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bf0e:	4b19      	ldr	r3, [pc, #100]	; (800bf74 <prvSwitchTimerLists+0xc0>)
 800bf10:	681a      	ldr	r2, [r3, #0]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	3304      	adds	r3, #4
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7fd fc8a 	bl	8009832 <vListInsert>
 800bf1e:	e016      	b.n	800bf4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf20:	2300      	movs	r3, #0
 800bf22:	9300      	str	r3, [sp, #0]
 800bf24:	2300      	movs	r3, #0
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	2100      	movs	r1, #0
 800bf2a:	68f8      	ldr	r0, [r7, #12]
 800bf2c:	f7ff fd60 	bl	800b9f0 <xTimerGenericCommand>
 800bf30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bf38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf3c:	f383 8811 	msr	BASEPRI, r3
 800bf40:	f3bf 8f6f 	isb	sy
 800bf44:	f3bf 8f4f 	dsb	sy
 800bf48:	603b      	str	r3, [r7, #0]
}
 800bf4a:	bf00      	nop
 800bf4c:	e7fe      	b.n	800bf4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf4e:	4b09      	ldr	r3, [pc, #36]	; (800bf74 <prvSwitchTimerLists+0xc0>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d1b1      	bne.n	800bebc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bf58:	4b06      	ldr	r3, [pc, #24]	; (800bf74 <prvSwitchTimerLists+0xc0>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bf5e:	4b06      	ldr	r3, [pc, #24]	; (800bf78 <prvSwitchTimerLists+0xc4>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a04      	ldr	r2, [pc, #16]	; (800bf74 <prvSwitchTimerLists+0xc0>)
 800bf64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bf66:	4a04      	ldr	r2, [pc, #16]	; (800bf78 <prvSwitchTimerLists+0xc4>)
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	6013      	str	r3, [r2, #0]
}
 800bf6c:	bf00      	nop
 800bf6e:	3718      	adds	r7, #24
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	200011f4 	.word	0x200011f4
 800bf78:	200011f8 	.word	0x200011f8

0800bf7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bf82:	f000 f967 	bl	800c254 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bf86:	4b15      	ldr	r3, [pc, #84]	; (800bfdc <prvCheckForValidListAndQueue+0x60>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d120      	bne.n	800bfd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf8e:	4814      	ldr	r0, [pc, #80]	; (800bfe0 <prvCheckForValidListAndQueue+0x64>)
 800bf90:	f7fd fbfe 	bl	8009790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf94:	4813      	ldr	r0, [pc, #76]	; (800bfe4 <prvCheckForValidListAndQueue+0x68>)
 800bf96:	f7fd fbfb 	bl	8009790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf9a:	4b13      	ldr	r3, [pc, #76]	; (800bfe8 <prvCheckForValidListAndQueue+0x6c>)
 800bf9c:	4a10      	ldr	r2, [pc, #64]	; (800bfe0 <prvCheckForValidListAndQueue+0x64>)
 800bf9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bfa0:	4b12      	ldr	r3, [pc, #72]	; (800bfec <prvCheckForValidListAndQueue+0x70>)
 800bfa2:	4a10      	ldr	r2, [pc, #64]	; (800bfe4 <prvCheckForValidListAndQueue+0x68>)
 800bfa4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bfa6:	2300      	movs	r3, #0
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	4b11      	ldr	r3, [pc, #68]	; (800bff0 <prvCheckForValidListAndQueue+0x74>)
 800bfac:	4a11      	ldr	r2, [pc, #68]	; (800bff4 <prvCheckForValidListAndQueue+0x78>)
 800bfae:	2110      	movs	r1, #16
 800bfb0:	200a      	movs	r0, #10
 800bfb2:	f7fd fd09 	bl	80099c8 <xQueueGenericCreateStatic>
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4a08      	ldr	r2, [pc, #32]	; (800bfdc <prvCheckForValidListAndQueue+0x60>)
 800bfba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bfbc:	4b07      	ldr	r3, [pc, #28]	; (800bfdc <prvCheckForValidListAndQueue+0x60>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d005      	beq.n	800bfd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bfc4:	4b05      	ldr	r3, [pc, #20]	; (800bfdc <prvCheckForValidListAndQueue+0x60>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	490b      	ldr	r1, [pc, #44]	; (800bff8 <prvCheckForValidListAndQueue+0x7c>)
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fe fc1a 	bl	800a804 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bfd0:	f000 f970 	bl	800c2b4 <vPortExitCritical>
}
 800bfd4:	bf00      	nop
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	200011fc 	.word	0x200011fc
 800bfe0:	200011cc 	.word	0x200011cc
 800bfe4:	200011e0 	.word	0x200011e0
 800bfe8:	200011f4 	.word	0x200011f4
 800bfec:	200011f8 	.word	0x200011f8
 800bff0:	200012a8 	.word	0x200012a8
 800bff4:	20001208 	.word	0x20001208
 800bff8:	0800d41c 	.word	0x0800d41c

0800bffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bffc:	b480      	push	{r7}
 800bffe:	b085      	sub	sp, #20
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	3b04      	subs	r3, #4
 800c00c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	3b04      	subs	r3, #4
 800c01a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	f023 0201 	bic.w	r2, r3, #1
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	3b04      	subs	r3, #4
 800c02a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c02c:	4a0c      	ldr	r2, [pc, #48]	; (800c060 <pxPortInitialiseStack+0x64>)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	3b14      	subs	r3, #20
 800c036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3b04      	subs	r3, #4
 800c042:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f06f 0202 	mvn.w	r2, #2
 800c04a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	3b20      	subs	r3, #32
 800c050:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c052:	68fb      	ldr	r3, [r7, #12]
}
 800c054:	4618      	mov	r0, r3
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	0800c065 	.word	0x0800c065

0800c064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c06e:	4b12      	ldr	r3, [pc, #72]	; (800c0b8 <prvTaskExitError+0x54>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c076:	d00a      	beq.n	800c08e <prvTaskExitError+0x2a>
	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	60fb      	str	r3, [r7, #12]
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <prvTaskExitError+0x28>
	__asm volatile
 800c08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c092:	f383 8811 	msr	BASEPRI, r3
 800c096:	f3bf 8f6f 	isb	sy
 800c09a:	f3bf 8f4f 	dsb	sy
 800c09e:	60bb      	str	r3, [r7, #8]
}
 800c0a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c0a2:	bf00      	nop
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d0fc      	beq.n	800c0a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c0aa:	bf00      	nop
 800c0ac:	bf00      	nop
 800c0ae:	3714      	adds	r7, #20
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b6:	4770      	bx	lr
 800c0b8:	20000028 	.word	0x20000028
 800c0bc:	00000000 	.word	0x00000000

0800c0c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c0c0:	4b07      	ldr	r3, [pc, #28]	; (800c0e0 <pxCurrentTCBConst2>)
 800c0c2:	6819      	ldr	r1, [r3, #0]
 800c0c4:	6808      	ldr	r0, [r1, #0]
 800c0c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ca:	f380 8809 	msr	PSP, r0
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f04f 0000 	mov.w	r0, #0
 800c0d6:	f380 8811 	msr	BASEPRI, r0
 800c0da:	4770      	bx	lr
 800c0dc:	f3af 8000 	nop.w

0800c0e0 <pxCurrentTCBConst2>:
 800c0e0:	20000ccc 	.word	0x20000ccc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c0e4:	bf00      	nop
 800c0e6:	bf00      	nop

0800c0e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c0e8:	4808      	ldr	r0, [pc, #32]	; (800c10c <prvPortStartFirstTask+0x24>)
 800c0ea:	6800      	ldr	r0, [r0, #0]
 800c0ec:	6800      	ldr	r0, [r0, #0]
 800c0ee:	f380 8808 	msr	MSP, r0
 800c0f2:	f04f 0000 	mov.w	r0, #0
 800c0f6:	f380 8814 	msr	CONTROL, r0
 800c0fa:	b662      	cpsie	i
 800c0fc:	b661      	cpsie	f
 800c0fe:	f3bf 8f4f 	dsb	sy
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	df00      	svc	0
 800c108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c10a:	bf00      	nop
 800c10c:	e000ed08 	.word	0xe000ed08

0800c110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b086      	sub	sp, #24
 800c114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c116:	4b46      	ldr	r3, [pc, #280]	; (800c230 <xPortStartScheduler+0x120>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a46      	ldr	r2, [pc, #280]	; (800c234 <xPortStartScheduler+0x124>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d10a      	bne.n	800c136 <xPortStartScheduler+0x26>
	__asm volatile
 800c120:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c124:	f383 8811 	msr	BASEPRI, r3
 800c128:	f3bf 8f6f 	isb	sy
 800c12c:	f3bf 8f4f 	dsb	sy
 800c130:	613b      	str	r3, [r7, #16]
}
 800c132:	bf00      	nop
 800c134:	e7fe      	b.n	800c134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c136:	4b3e      	ldr	r3, [pc, #248]	; (800c230 <xPortStartScheduler+0x120>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a3f      	ldr	r2, [pc, #252]	; (800c238 <xPortStartScheduler+0x128>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d10a      	bne.n	800c156 <xPortStartScheduler+0x46>
	__asm volatile
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	60fb      	str	r3, [r7, #12]
}
 800c152:	bf00      	nop
 800c154:	e7fe      	b.n	800c154 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c156:	4b39      	ldr	r3, [pc, #228]	; (800c23c <xPortStartScheduler+0x12c>)
 800c158:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	781b      	ldrb	r3, [r3, #0]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	22ff      	movs	r2, #255	; 0xff
 800c166:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	b2db      	uxtb	r3, r3
 800c16e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c170:	78fb      	ldrb	r3, [r7, #3]
 800c172:	b2db      	uxtb	r3, r3
 800c174:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c178:	b2da      	uxtb	r2, r3
 800c17a:	4b31      	ldr	r3, [pc, #196]	; (800c240 <xPortStartScheduler+0x130>)
 800c17c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c17e:	4b31      	ldr	r3, [pc, #196]	; (800c244 <xPortStartScheduler+0x134>)
 800c180:	2207      	movs	r2, #7
 800c182:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c184:	e009      	b.n	800c19a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c186:	4b2f      	ldr	r3, [pc, #188]	; (800c244 <xPortStartScheduler+0x134>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	3b01      	subs	r3, #1
 800c18c:	4a2d      	ldr	r2, [pc, #180]	; (800c244 <xPortStartScheduler+0x134>)
 800c18e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	005b      	lsls	r3, r3, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a2:	2b80      	cmp	r3, #128	; 0x80
 800c1a4:	d0ef      	beq.n	800c186 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c1a6:	4b27      	ldr	r3, [pc, #156]	; (800c244 <xPortStartScheduler+0x134>)
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	f1c3 0307 	rsb	r3, r3, #7
 800c1ae:	2b04      	cmp	r3, #4
 800c1b0:	d00a      	beq.n	800c1c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b6:	f383 8811 	msr	BASEPRI, r3
 800c1ba:	f3bf 8f6f 	isb	sy
 800c1be:	f3bf 8f4f 	dsb	sy
 800c1c2:	60bb      	str	r3, [r7, #8]
}
 800c1c4:	bf00      	nop
 800c1c6:	e7fe      	b.n	800c1c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c1c8:	4b1e      	ldr	r3, [pc, #120]	; (800c244 <xPortStartScheduler+0x134>)
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	021b      	lsls	r3, r3, #8
 800c1ce:	4a1d      	ldr	r2, [pc, #116]	; (800c244 <xPortStartScheduler+0x134>)
 800c1d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c1d2:	4b1c      	ldr	r3, [pc, #112]	; (800c244 <xPortStartScheduler+0x134>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c1da:	4a1a      	ldr	r2, [pc, #104]	; (800c244 <xPortStartScheduler+0x134>)
 800c1dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	b2da      	uxtb	r2, r3
 800c1e2:	697b      	ldr	r3, [r7, #20]
 800c1e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c1e6:	4b18      	ldr	r3, [pc, #96]	; (800c248 <xPortStartScheduler+0x138>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a17      	ldr	r2, [pc, #92]	; (800c248 <xPortStartScheduler+0x138>)
 800c1ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c1f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c1f2:	4b15      	ldr	r3, [pc, #84]	; (800c248 <xPortStartScheduler+0x138>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	4a14      	ldr	r2, [pc, #80]	; (800c248 <xPortStartScheduler+0x138>)
 800c1f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c1fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c1fe:	f000 f8dd 	bl	800c3bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c202:	4b12      	ldr	r3, [pc, #72]	; (800c24c <xPortStartScheduler+0x13c>)
 800c204:	2200      	movs	r2, #0
 800c206:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c208:	f000 f8fc 	bl	800c404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c20c:	4b10      	ldr	r3, [pc, #64]	; (800c250 <xPortStartScheduler+0x140>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	4a0f      	ldr	r2, [pc, #60]	; (800c250 <xPortStartScheduler+0x140>)
 800c212:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c216:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c218:	f7ff ff66 	bl	800c0e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c21c:	f7fe ff4c 	bl	800b0b8 <vTaskSwitchContext>
	prvTaskExitError();
 800c220:	f7ff ff20 	bl	800c064 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	3718      	adds	r7, #24
 800c22a:	46bd      	mov	sp, r7
 800c22c:	bd80      	pop	{r7, pc}
 800c22e:	bf00      	nop
 800c230:	e000ed00 	.word	0xe000ed00
 800c234:	410fc271 	.word	0x410fc271
 800c238:	410fc270 	.word	0x410fc270
 800c23c:	e000e400 	.word	0xe000e400
 800c240:	200012f8 	.word	0x200012f8
 800c244:	200012fc 	.word	0x200012fc
 800c248:	e000ed20 	.word	0xe000ed20
 800c24c:	20000028 	.word	0x20000028
 800c250:	e000ef34 	.word	0xe000ef34

0800c254 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c254:	b480      	push	{r7}
 800c256:	b083      	sub	sp, #12
 800c258:	af00      	add	r7, sp, #0
	__asm volatile
 800c25a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c25e:	f383 8811 	msr	BASEPRI, r3
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	f3bf 8f4f 	dsb	sy
 800c26a:	607b      	str	r3, [r7, #4]
}
 800c26c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c26e:	4b0f      	ldr	r3, [pc, #60]	; (800c2ac <vPortEnterCritical+0x58>)
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	4a0d      	ldr	r2, [pc, #52]	; (800c2ac <vPortEnterCritical+0x58>)
 800c276:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c278:	4b0c      	ldr	r3, [pc, #48]	; (800c2ac <vPortEnterCritical+0x58>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d10f      	bne.n	800c2a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c280:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <vPortEnterCritical+0x5c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	b2db      	uxtb	r3, r3
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00a      	beq.n	800c2a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	603b      	str	r3, [r7, #0]
}
 800c29c:	bf00      	nop
 800c29e:	e7fe      	b.n	800c29e <vPortEnterCritical+0x4a>
	}
}
 800c2a0:	bf00      	nop
 800c2a2:	370c      	adds	r7, #12
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2aa:	4770      	bx	lr
 800c2ac:	20000028 	.word	0x20000028
 800c2b0:	e000ed04 	.word	0xe000ed04

0800c2b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c2b4:	b480      	push	{r7}
 800c2b6:	b083      	sub	sp, #12
 800c2b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c2ba:	4b12      	ldr	r3, [pc, #72]	; (800c304 <vPortExitCritical+0x50>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d10a      	bne.n	800c2d8 <vPortExitCritical+0x24>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	607b      	str	r3, [r7, #4]
}
 800c2d4:	bf00      	nop
 800c2d6:	e7fe      	b.n	800c2d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c2d8:	4b0a      	ldr	r3, [pc, #40]	; (800c304 <vPortExitCritical+0x50>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	4a09      	ldr	r2, [pc, #36]	; (800c304 <vPortExitCritical+0x50>)
 800c2e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c2e2:	4b08      	ldr	r3, [pc, #32]	; (800c304 <vPortExitCritical+0x50>)
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d105      	bne.n	800c2f6 <vPortExitCritical+0x42>
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	f383 8811 	msr	BASEPRI, r3
}
 800c2f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c2f6:	bf00      	nop
 800c2f8:	370c      	adds	r7, #12
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20000028 	.word	0x20000028
	...

0800c310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c310:	f3ef 8009 	mrs	r0, PSP
 800c314:	f3bf 8f6f 	isb	sy
 800c318:	4b15      	ldr	r3, [pc, #84]	; (800c370 <pxCurrentTCBConst>)
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	f01e 0f10 	tst.w	lr, #16
 800c320:	bf08      	it	eq
 800c322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c32a:	6010      	str	r0, [r2, #0]
 800c32c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c330:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c334:	f380 8811 	msr	BASEPRI, r0
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	f3bf 8f6f 	isb	sy
 800c340:	f7fe feba 	bl	800b0b8 <vTaskSwitchContext>
 800c344:	f04f 0000 	mov.w	r0, #0
 800c348:	f380 8811 	msr	BASEPRI, r0
 800c34c:	bc09      	pop	{r0, r3}
 800c34e:	6819      	ldr	r1, [r3, #0]
 800c350:	6808      	ldr	r0, [r1, #0]
 800c352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c356:	f01e 0f10 	tst.w	lr, #16
 800c35a:	bf08      	it	eq
 800c35c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c360:	f380 8809 	msr	PSP, r0
 800c364:	f3bf 8f6f 	isb	sy
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	f3af 8000 	nop.w

0800c370 <pxCurrentTCBConst>:
 800c370:	20000ccc 	.word	0x20000ccc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c374:	bf00      	nop
 800c376:	bf00      	nop

0800c378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b082      	sub	sp, #8
 800c37c:	af00      	add	r7, sp, #0
	__asm volatile
 800c37e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	607b      	str	r3, [r7, #4]
}
 800c390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c392:	f7fe fdd7 	bl	800af44 <xTaskIncrementTick>
 800c396:	4603      	mov	r3, r0
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d003      	beq.n	800c3a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c39c:	4b06      	ldr	r3, [pc, #24]	; (800c3b8 <xPortSysTickHandler+0x40>)
 800c39e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3a2:	601a      	str	r2, [r3, #0]
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	f383 8811 	msr	BASEPRI, r3
}
 800c3ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	e000ed04 	.word	0xe000ed04

0800c3bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c3c0:	4b0b      	ldr	r3, [pc, #44]	; (800c3f0 <vPortSetupTimerInterrupt+0x34>)
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c3c6:	4b0b      	ldr	r3, [pc, #44]	; (800c3f4 <vPortSetupTimerInterrupt+0x38>)
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c3cc:	4b0a      	ldr	r3, [pc, #40]	; (800c3f8 <vPortSetupTimerInterrupt+0x3c>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a0a      	ldr	r2, [pc, #40]	; (800c3fc <vPortSetupTimerInterrupt+0x40>)
 800c3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800c3d6:	099b      	lsrs	r3, r3, #6
 800c3d8:	4a09      	ldr	r2, [pc, #36]	; (800c400 <vPortSetupTimerInterrupt+0x44>)
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c3de:	4b04      	ldr	r3, [pc, #16]	; (800c3f0 <vPortSetupTimerInterrupt+0x34>)
 800c3e0:	2207      	movs	r2, #7
 800c3e2:	601a      	str	r2, [r3, #0]
}
 800c3e4:	bf00      	nop
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr
 800c3ee:	bf00      	nop
 800c3f0:	e000e010 	.word	0xe000e010
 800c3f4:	e000e018 	.word	0xe000e018
 800c3f8:	20000000 	.word	0x20000000
 800c3fc:	10624dd3 	.word	0x10624dd3
 800c400:	e000e014 	.word	0xe000e014

0800c404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c404:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c414 <vPortEnableVFP+0x10>
 800c408:	6801      	ldr	r1, [r0, #0]
 800c40a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c40e:	6001      	str	r1, [r0, #0]
 800c410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c412:	bf00      	nop
 800c414:	e000ed88 	.word	0xe000ed88

0800c418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c41e:	f3ef 8305 	mrs	r3, IPSR
 800c422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2b0f      	cmp	r3, #15
 800c428:	d914      	bls.n	800c454 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c42a:	4a17      	ldr	r2, [pc, #92]	; (800c488 <vPortValidateInterruptPriority+0x70>)
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	781b      	ldrb	r3, [r3, #0]
 800c432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c434:	4b15      	ldr	r3, [pc, #84]	; (800c48c <vPortValidateInterruptPriority+0x74>)
 800c436:	781b      	ldrb	r3, [r3, #0]
 800c438:	7afa      	ldrb	r2, [r7, #11]
 800c43a:	429a      	cmp	r2, r3
 800c43c:	d20a      	bcs.n	800c454 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c442:	f383 8811 	msr	BASEPRI, r3
 800c446:	f3bf 8f6f 	isb	sy
 800c44a:	f3bf 8f4f 	dsb	sy
 800c44e:	607b      	str	r3, [r7, #4]
}
 800c450:	bf00      	nop
 800c452:	e7fe      	b.n	800c452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c454:	4b0e      	ldr	r3, [pc, #56]	; (800c490 <vPortValidateInterruptPriority+0x78>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c45c:	4b0d      	ldr	r3, [pc, #52]	; (800c494 <vPortValidateInterruptPriority+0x7c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	429a      	cmp	r2, r3
 800c462:	d90a      	bls.n	800c47a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c464:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c468:	f383 8811 	msr	BASEPRI, r3
 800c46c:	f3bf 8f6f 	isb	sy
 800c470:	f3bf 8f4f 	dsb	sy
 800c474:	603b      	str	r3, [r7, #0]
}
 800c476:	bf00      	nop
 800c478:	e7fe      	b.n	800c478 <vPortValidateInterruptPriority+0x60>
	}
 800c47a:	bf00      	nop
 800c47c:	3714      	adds	r7, #20
 800c47e:	46bd      	mov	sp, r7
 800c480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c484:	4770      	bx	lr
 800c486:	bf00      	nop
 800c488:	e000e3f0 	.word	0xe000e3f0
 800c48c:	200012f8 	.word	0x200012f8
 800c490:	e000ed0c 	.word	0xe000ed0c
 800c494:	200012fc 	.word	0x200012fc

0800c498 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	; 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c4a4:	f7fe fc92 	bl	800adcc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c4a8:	4b5b      	ldr	r3, [pc, #364]	; (800c618 <pvPortMalloc+0x180>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d101      	bne.n	800c4b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c4b0:	f000 f920 	bl	800c6f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c4b4:	4b59      	ldr	r3, [pc, #356]	; (800c61c <pvPortMalloc+0x184>)
 800c4b6:	681a      	ldr	r2, [r3, #0]
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4013      	ands	r3, r2
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f040 8093 	bne.w	800c5e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d01d      	beq.n	800c504 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c4c8:	2208      	movs	r2, #8
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f003 0307 	and.w	r3, r3, #7
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d014      	beq.n	800c504 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	f023 0307 	bic.w	r3, r3, #7
 800c4e0:	3308      	adds	r3, #8
 800c4e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f003 0307 	and.w	r3, r3, #7
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d00a      	beq.n	800c504 <pvPortMalloc+0x6c>
	__asm volatile
 800c4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f2:	f383 8811 	msr	BASEPRI, r3
 800c4f6:	f3bf 8f6f 	isb	sy
 800c4fa:	f3bf 8f4f 	dsb	sy
 800c4fe:	617b      	str	r3, [r7, #20]
}
 800c500:	bf00      	nop
 800c502:	e7fe      	b.n	800c502 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d06e      	beq.n	800c5e8 <pvPortMalloc+0x150>
 800c50a:	4b45      	ldr	r3, [pc, #276]	; (800c620 <pvPortMalloc+0x188>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	687a      	ldr	r2, [r7, #4]
 800c510:	429a      	cmp	r2, r3
 800c512:	d869      	bhi.n	800c5e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c514:	4b43      	ldr	r3, [pc, #268]	; (800c624 <pvPortMalloc+0x18c>)
 800c516:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c518:	4b42      	ldr	r3, [pc, #264]	; (800c624 <pvPortMalloc+0x18c>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c51e:	e004      	b.n	800c52a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c522:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52c:	685b      	ldr	r3, [r3, #4]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	429a      	cmp	r2, r3
 800c532:	d903      	bls.n	800c53c <pvPortMalloc+0xa4>
 800c534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d1f1      	bne.n	800c520 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c53c:	4b36      	ldr	r3, [pc, #216]	; (800c618 <pvPortMalloc+0x180>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c542:	429a      	cmp	r2, r3
 800c544:	d050      	beq.n	800c5e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2208      	movs	r2, #8
 800c54c:	4413      	add	r3, r2
 800c54e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c552:	681a      	ldr	r2, [r3, #0]
 800c554:	6a3b      	ldr	r3, [r7, #32]
 800c556:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	685a      	ldr	r2, [r3, #4]
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	1ad2      	subs	r2, r2, r3
 800c560:	2308      	movs	r3, #8
 800c562:	005b      	lsls	r3, r3, #1
 800c564:	429a      	cmp	r2, r3
 800c566:	d91f      	bls.n	800c5a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4413      	add	r3, r2
 800c56e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	f003 0307 	and.w	r3, r3, #7
 800c576:	2b00      	cmp	r3, #0
 800c578:	d00a      	beq.n	800c590 <pvPortMalloc+0xf8>
	__asm volatile
 800c57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57e:	f383 8811 	msr	BASEPRI, r3
 800c582:	f3bf 8f6f 	isb	sy
 800c586:	f3bf 8f4f 	dsb	sy
 800c58a:	613b      	str	r3, [r7, #16]
}
 800c58c:	bf00      	nop
 800c58e:	e7fe      	b.n	800c58e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c592:	685a      	ldr	r2, [r3, #4]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	1ad2      	subs	r2, r2, r3
 800c598:	69bb      	ldr	r3, [r7, #24]
 800c59a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c5a2:	69b8      	ldr	r0, [r7, #24]
 800c5a4:	f000 f908 	bl	800c7b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c5a8:	4b1d      	ldr	r3, [pc, #116]	; (800c620 <pvPortMalloc+0x188>)
 800c5aa:	681a      	ldr	r2, [r3, #0]
 800c5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	1ad3      	subs	r3, r2, r3
 800c5b2:	4a1b      	ldr	r2, [pc, #108]	; (800c620 <pvPortMalloc+0x188>)
 800c5b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c5b6:	4b1a      	ldr	r3, [pc, #104]	; (800c620 <pvPortMalloc+0x188>)
 800c5b8:	681a      	ldr	r2, [r3, #0]
 800c5ba:	4b1b      	ldr	r3, [pc, #108]	; (800c628 <pvPortMalloc+0x190>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d203      	bcs.n	800c5ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c5c2:	4b17      	ldr	r3, [pc, #92]	; (800c620 <pvPortMalloc+0x188>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4a18      	ldr	r2, [pc, #96]	; (800c628 <pvPortMalloc+0x190>)
 800c5c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5cc:	685a      	ldr	r2, [r3, #4]
 800c5ce:	4b13      	ldr	r3, [pc, #76]	; (800c61c <pvPortMalloc+0x184>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5da:	2200      	movs	r2, #0
 800c5dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c5de:	4b13      	ldr	r3, [pc, #76]	; (800c62c <pvPortMalloc+0x194>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	4a11      	ldr	r2, [pc, #68]	; (800c62c <pvPortMalloc+0x194>)
 800c5e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c5e8:	f7fe fbfe 	bl	800ade8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	f003 0307 	and.w	r3, r3, #7
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d00a      	beq.n	800c60c <pvPortMalloc+0x174>
	__asm volatile
 800c5f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5fa:	f383 8811 	msr	BASEPRI, r3
 800c5fe:	f3bf 8f6f 	isb	sy
 800c602:	f3bf 8f4f 	dsb	sy
 800c606:	60fb      	str	r3, [r7, #12]
}
 800c608:	bf00      	nop
 800c60a:	e7fe      	b.n	800c60a <pvPortMalloc+0x172>
	return pvReturn;
 800c60c:	69fb      	ldr	r3, [r7, #28]
}
 800c60e:	4618      	mov	r0, r3
 800c610:	3728      	adds	r7, #40	; 0x28
 800c612:	46bd      	mov	sp, r7
 800c614:	bd80      	pop	{r7, pc}
 800c616:	bf00      	nop
 800c618:	20004f08 	.word	0x20004f08
 800c61c:	20004f1c 	.word	0x20004f1c
 800c620:	20004f0c 	.word	0x20004f0c
 800c624:	20004f00 	.word	0x20004f00
 800c628:	20004f10 	.word	0x20004f10
 800c62c:	20004f14 	.word	0x20004f14

0800c630 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b086      	sub	sp, #24
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d04d      	beq.n	800c6de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c642:	2308      	movs	r3, #8
 800c644:	425b      	negs	r3, r3
 800c646:	697a      	ldr	r2, [r7, #20]
 800c648:	4413      	add	r3, r2
 800c64a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	685a      	ldr	r2, [r3, #4]
 800c654:	4b24      	ldr	r3, [pc, #144]	; (800c6e8 <vPortFree+0xb8>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4013      	ands	r3, r2
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10a      	bne.n	800c674 <vPortFree+0x44>
	__asm volatile
 800c65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c662:	f383 8811 	msr	BASEPRI, r3
 800c666:	f3bf 8f6f 	isb	sy
 800c66a:	f3bf 8f4f 	dsb	sy
 800c66e:	60fb      	str	r3, [r7, #12]
}
 800c670:	bf00      	nop
 800c672:	e7fe      	b.n	800c672 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <vPortFree+0x62>
	__asm volatile
 800c67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	60bb      	str	r3, [r7, #8]
}
 800c68e:	bf00      	nop
 800c690:	e7fe      	b.n	800c690 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	685a      	ldr	r2, [r3, #4]
 800c696:	4b14      	ldr	r3, [pc, #80]	; (800c6e8 <vPortFree+0xb8>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4013      	ands	r3, r2
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01e      	beq.n	800c6de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d11a      	bne.n	800c6de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	685a      	ldr	r2, [r3, #4]
 800c6ac:	4b0e      	ldr	r3, [pc, #56]	; (800c6e8 <vPortFree+0xb8>)
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	43db      	mvns	r3, r3
 800c6b2:	401a      	ands	r2, r3
 800c6b4:	693b      	ldr	r3, [r7, #16]
 800c6b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c6b8:	f7fe fb88 	bl	800adcc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	685a      	ldr	r2, [r3, #4]
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <vPortFree+0xbc>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4413      	add	r3, r2
 800c6c6:	4a09      	ldr	r2, [pc, #36]	; (800c6ec <vPortFree+0xbc>)
 800c6c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c6ca:	6938      	ldr	r0, [r7, #16]
 800c6cc:	f000 f874 	bl	800c7b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c6d0:	4b07      	ldr	r3, [pc, #28]	; (800c6f0 <vPortFree+0xc0>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	4a06      	ldr	r2, [pc, #24]	; (800c6f0 <vPortFree+0xc0>)
 800c6d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c6da:	f7fe fb85 	bl	800ade8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c6de:	bf00      	nop
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20004f1c 	.word	0x20004f1c
 800c6ec:	20004f0c 	.word	0x20004f0c
 800c6f0:	20004f18 	.word	0x20004f18

0800c6f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c6f4:	b480      	push	{r7}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c6fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c6fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c700:	4b27      	ldr	r3, [pc, #156]	; (800c7a0 <prvHeapInit+0xac>)
 800c702:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f003 0307 	and.w	r3, r3, #7
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d00c      	beq.n	800c728 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	3307      	adds	r3, #7
 800c712:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f023 0307 	bic.w	r3, r3, #7
 800c71a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	1ad3      	subs	r3, r2, r3
 800c722:	4a1f      	ldr	r2, [pc, #124]	; (800c7a0 <prvHeapInit+0xac>)
 800c724:	4413      	add	r3, r2
 800c726:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c72c:	4a1d      	ldr	r2, [pc, #116]	; (800c7a4 <prvHeapInit+0xb0>)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c732:	4b1c      	ldr	r3, [pc, #112]	; (800c7a4 <prvHeapInit+0xb0>)
 800c734:	2200      	movs	r2, #0
 800c736:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	4413      	add	r3, r2
 800c73e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c740:	2208      	movs	r2, #8
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	1a9b      	subs	r3, r3, r2
 800c746:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f023 0307 	bic.w	r3, r3, #7
 800c74e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <prvHeapInit+0xb4>)
 800c754:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c756:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <prvHeapInit+0xb4>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2200      	movs	r2, #0
 800c75c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c75e:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <prvHeapInit+0xb4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	68fa      	ldr	r2, [r7, #12]
 800c76e:	1ad2      	subs	r2, r2, r3
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c774:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <prvHeapInit+0xb4>)
 800c776:	681a      	ldr	r2, [r3, #0]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	685b      	ldr	r3, [r3, #4]
 800c780:	4a0a      	ldr	r2, [pc, #40]	; (800c7ac <prvHeapInit+0xb8>)
 800c782:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	685b      	ldr	r3, [r3, #4]
 800c788:	4a09      	ldr	r2, [pc, #36]	; (800c7b0 <prvHeapInit+0xbc>)
 800c78a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c78c:	4b09      	ldr	r3, [pc, #36]	; (800c7b4 <prvHeapInit+0xc0>)
 800c78e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c792:	601a      	str	r2, [r3, #0]
}
 800c794:	bf00      	nop
 800c796:	3714      	adds	r7, #20
 800c798:	46bd      	mov	sp, r7
 800c79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79e:	4770      	bx	lr
 800c7a0:	20001300 	.word	0x20001300
 800c7a4:	20004f00 	.word	0x20004f00
 800c7a8:	20004f08 	.word	0x20004f08
 800c7ac:	20004f10 	.word	0x20004f10
 800c7b0:	20004f0c 	.word	0x20004f0c
 800c7b4:	20004f1c 	.word	0x20004f1c

0800c7b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c7c0:	4b28      	ldr	r3, [pc, #160]	; (800c864 <prvInsertBlockIntoFreeList+0xac>)
 800c7c2:	60fb      	str	r3, [r7, #12]
 800c7c4:	e002      	b.n	800c7cc <prvInsertBlockIntoFreeList+0x14>
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60fb      	str	r3, [r7, #12]
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d8f7      	bhi.n	800c7c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	685b      	ldr	r3, [r3, #4]
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	4413      	add	r3, r2
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d108      	bne.n	800c7fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	685a      	ldr	r2, [r3, #4]
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	685b      	ldr	r3, [r3, #4]
 800c7f0:	441a      	add	r2, r3
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	441a      	add	r2, r3
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	429a      	cmp	r2, r3
 800c80c:	d118      	bne.n	800c840 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	4b15      	ldr	r3, [pc, #84]	; (800c868 <prvInsertBlockIntoFreeList+0xb0>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	429a      	cmp	r2, r3
 800c818:	d00d      	beq.n	800c836 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	685a      	ldr	r2, [r3, #4]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	441a      	add	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	681a      	ldr	r2, [r3, #0]
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	e008      	b.n	800c848 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c836:	4b0c      	ldr	r3, [pc, #48]	; (800c868 <prvInsertBlockIntoFreeList+0xb0>)
 800c838:	681a      	ldr	r2, [r3, #0]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	601a      	str	r2, [r3, #0]
 800c83e:	e003      	b.n	800c848 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c848:	68fa      	ldr	r2, [r7, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d002      	beq.n	800c856 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c856:	bf00      	nop
 800c858:	3714      	adds	r7, #20
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
 800c862:	bf00      	nop
 800c864:	20004f00 	.word	0x20004f00
 800c868:	20004f08 	.word	0x20004f08

0800c86c <calloc>:
 800c86c:	4b02      	ldr	r3, [pc, #8]	; (800c878 <calloc+0xc>)
 800c86e:	460a      	mov	r2, r1
 800c870:	4601      	mov	r1, r0
 800c872:	6818      	ldr	r0, [r3, #0]
 800c874:	f000 b84c 	b.w	800c910 <_calloc_r>
 800c878:	2000002c 	.word	0x2000002c

0800c87c <__errno>:
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <__errno+0x8>)
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	4770      	bx	lr
 800c882:	bf00      	nop
 800c884:	2000002c 	.word	0x2000002c

0800c888 <__libc_init_array>:
 800c888:	b570      	push	{r4, r5, r6, lr}
 800c88a:	4d0d      	ldr	r5, [pc, #52]	; (800c8c0 <__libc_init_array+0x38>)
 800c88c:	4c0d      	ldr	r4, [pc, #52]	; (800c8c4 <__libc_init_array+0x3c>)
 800c88e:	1b64      	subs	r4, r4, r5
 800c890:	10a4      	asrs	r4, r4, #2
 800c892:	2600      	movs	r6, #0
 800c894:	42a6      	cmp	r6, r4
 800c896:	d109      	bne.n	800c8ac <__libc_init_array+0x24>
 800c898:	4d0b      	ldr	r5, [pc, #44]	; (800c8c8 <__libc_init_array+0x40>)
 800c89a:	4c0c      	ldr	r4, [pc, #48]	; (800c8cc <__libc_init_array+0x44>)
 800c89c:	f000 fd16 	bl	800d2cc <_init>
 800c8a0:	1b64      	subs	r4, r4, r5
 800c8a2:	10a4      	asrs	r4, r4, #2
 800c8a4:	2600      	movs	r6, #0
 800c8a6:	42a6      	cmp	r6, r4
 800c8a8:	d105      	bne.n	800c8b6 <__libc_init_array+0x2e>
 800c8aa:	bd70      	pop	{r4, r5, r6, pc}
 800c8ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8b0:	4798      	blx	r3
 800c8b2:	3601      	adds	r6, #1
 800c8b4:	e7ee      	b.n	800c894 <__libc_init_array+0xc>
 800c8b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c8ba:	4798      	blx	r3
 800c8bc:	3601      	adds	r6, #1
 800c8be:	e7f2      	b.n	800c8a6 <__libc_init_array+0x1e>
 800c8c0:	0802c7a4 	.word	0x0802c7a4
 800c8c4:	0802c7a4 	.word	0x0802c7a4
 800c8c8:	0802c7a4 	.word	0x0802c7a4
 800c8cc:	0802c7a8 	.word	0x0802c7a8

0800c8d0 <__retarget_lock_acquire_recursive>:
 800c8d0:	4770      	bx	lr

0800c8d2 <__retarget_lock_release_recursive>:
 800c8d2:	4770      	bx	lr

0800c8d4 <free>:
 800c8d4:	4b02      	ldr	r3, [pc, #8]	; (800c8e0 <free+0xc>)
 800c8d6:	4601      	mov	r1, r0
 800c8d8:	6818      	ldr	r0, [r3, #0]
 800c8da:	f000 b82f 	b.w	800c93c <_free_r>
 800c8de:	bf00      	nop
 800c8e0:	2000002c 	.word	0x2000002c

0800c8e4 <memcpy>:
 800c8e4:	440a      	add	r2, r1
 800c8e6:	4291      	cmp	r1, r2
 800c8e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800c8ec:	d100      	bne.n	800c8f0 <memcpy+0xc>
 800c8ee:	4770      	bx	lr
 800c8f0:	b510      	push	{r4, lr}
 800c8f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8fa:	4291      	cmp	r1, r2
 800c8fc:	d1f9      	bne.n	800c8f2 <memcpy+0xe>
 800c8fe:	bd10      	pop	{r4, pc}

0800c900 <memset>:
 800c900:	4402      	add	r2, r0
 800c902:	4603      	mov	r3, r0
 800c904:	4293      	cmp	r3, r2
 800c906:	d100      	bne.n	800c90a <memset+0xa>
 800c908:	4770      	bx	lr
 800c90a:	f803 1b01 	strb.w	r1, [r3], #1
 800c90e:	e7f9      	b.n	800c904 <memset+0x4>

0800c910 <_calloc_r>:
 800c910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c912:	fba1 2402 	umull	r2, r4, r1, r2
 800c916:	b94c      	cbnz	r4, 800c92c <_calloc_r+0x1c>
 800c918:	4611      	mov	r1, r2
 800c91a:	9201      	str	r2, [sp, #4]
 800c91c:	f000 f87a 	bl	800ca14 <_malloc_r>
 800c920:	9a01      	ldr	r2, [sp, #4]
 800c922:	4605      	mov	r5, r0
 800c924:	b930      	cbnz	r0, 800c934 <_calloc_r+0x24>
 800c926:	4628      	mov	r0, r5
 800c928:	b003      	add	sp, #12
 800c92a:	bd30      	pop	{r4, r5, pc}
 800c92c:	220c      	movs	r2, #12
 800c92e:	6002      	str	r2, [r0, #0]
 800c930:	2500      	movs	r5, #0
 800c932:	e7f8      	b.n	800c926 <_calloc_r+0x16>
 800c934:	4621      	mov	r1, r4
 800c936:	f7ff ffe3 	bl	800c900 <memset>
 800c93a:	e7f4      	b.n	800c926 <_calloc_r+0x16>

0800c93c <_free_r>:
 800c93c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c93e:	2900      	cmp	r1, #0
 800c940:	d044      	beq.n	800c9cc <_free_r+0x90>
 800c942:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c946:	9001      	str	r0, [sp, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f1a1 0404 	sub.w	r4, r1, #4
 800c94e:	bfb8      	it	lt
 800c950:	18e4      	addlt	r4, r4, r3
 800c952:	f000 f96d 	bl	800cc30 <__malloc_lock>
 800c956:	4a1e      	ldr	r2, [pc, #120]	; (800c9d0 <_free_r+0x94>)
 800c958:	9801      	ldr	r0, [sp, #4]
 800c95a:	6813      	ldr	r3, [r2, #0]
 800c95c:	b933      	cbnz	r3, 800c96c <_free_r+0x30>
 800c95e:	6063      	str	r3, [r4, #4]
 800c960:	6014      	str	r4, [r2, #0]
 800c962:	b003      	add	sp, #12
 800c964:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c968:	f000 b968 	b.w	800cc3c <__malloc_unlock>
 800c96c:	42a3      	cmp	r3, r4
 800c96e:	d908      	bls.n	800c982 <_free_r+0x46>
 800c970:	6825      	ldr	r5, [r4, #0]
 800c972:	1961      	adds	r1, r4, r5
 800c974:	428b      	cmp	r3, r1
 800c976:	bf01      	itttt	eq
 800c978:	6819      	ldreq	r1, [r3, #0]
 800c97a:	685b      	ldreq	r3, [r3, #4]
 800c97c:	1949      	addeq	r1, r1, r5
 800c97e:	6021      	streq	r1, [r4, #0]
 800c980:	e7ed      	b.n	800c95e <_free_r+0x22>
 800c982:	461a      	mov	r2, r3
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	b10b      	cbz	r3, 800c98c <_free_r+0x50>
 800c988:	42a3      	cmp	r3, r4
 800c98a:	d9fa      	bls.n	800c982 <_free_r+0x46>
 800c98c:	6811      	ldr	r1, [r2, #0]
 800c98e:	1855      	adds	r5, r2, r1
 800c990:	42a5      	cmp	r5, r4
 800c992:	d10b      	bne.n	800c9ac <_free_r+0x70>
 800c994:	6824      	ldr	r4, [r4, #0]
 800c996:	4421      	add	r1, r4
 800c998:	1854      	adds	r4, r2, r1
 800c99a:	42a3      	cmp	r3, r4
 800c99c:	6011      	str	r1, [r2, #0]
 800c99e:	d1e0      	bne.n	800c962 <_free_r+0x26>
 800c9a0:	681c      	ldr	r4, [r3, #0]
 800c9a2:	685b      	ldr	r3, [r3, #4]
 800c9a4:	6053      	str	r3, [r2, #4]
 800c9a6:	4421      	add	r1, r4
 800c9a8:	6011      	str	r1, [r2, #0]
 800c9aa:	e7da      	b.n	800c962 <_free_r+0x26>
 800c9ac:	d902      	bls.n	800c9b4 <_free_r+0x78>
 800c9ae:	230c      	movs	r3, #12
 800c9b0:	6003      	str	r3, [r0, #0]
 800c9b2:	e7d6      	b.n	800c962 <_free_r+0x26>
 800c9b4:	6825      	ldr	r5, [r4, #0]
 800c9b6:	1961      	adds	r1, r4, r5
 800c9b8:	428b      	cmp	r3, r1
 800c9ba:	bf04      	itt	eq
 800c9bc:	6819      	ldreq	r1, [r3, #0]
 800c9be:	685b      	ldreq	r3, [r3, #4]
 800c9c0:	6063      	str	r3, [r4, #4]
 800c9c2:	bf04      	itt	eq
 800c9c4:	1949      	addeq	r1, r1, r5
 800c9c6:	6021      	streq	r1, [r4, #0]
 800c9c8:	6054      	str	r4, [r2, #4]
 800c9ca:	e7ca      	b.n	800c962 <_free_r+0x26>
 800c9cc:	b003      	add	sp, #12
 800c9ce:	bd30      	pop	{r4, r5, pc}
 800c9d0:	20004f24 	.word	0x20004f24

0800c9d4 <sbrk_aligned>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4e0e      	ldr	r6, [pc, #56]	; (800ca10 <sbrk_aligned+0x3c>)
 800c9d8:	460c      	mov	r4, r1
 800c9da:	6831      	ldr	r1, [r6, #0]
 800c9dc:	4605      	mov	r5, r0
 800c9de:	b911      	cbnz	r1, 800c9e6 <sbrk_aligned+0x12>
 800c9e0:	f000 f8f6 	bl	800cbd0 <_sbrk_r>
 800c9e4:	6030      	str	r0, [r6, #0]
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f000 f8f1 	bl	800cbd0 <_sbrk_r>
 800c9ee:	1c43      	adds	r3, r0, #1
 800c9f0:	d00a      	beq.n	800ca08 <sbrk_aligned+0x34>
 800c9f2:	1cc4      	adds	r4, r0, #3
 800c9f4:	f024 0403 	bic.w	r4, r4, #3
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d007      	beq.n	800ca0c <sbrk_aligned+0x38>
 800c9fc:	1a21      	subs	r1, r4, r0
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f000 f8e6 	bl	800cbd0 <_sbrk_r>
 800ca04:	3001      	adds	r0, #1
 800ca06:	d101      	bne.n	800ca0c <sbrk_aligned+0x38>
 800ca08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	20004f28 	.word	0x20004f28

0800ca14 <_malloc_r>:
 800ca14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca18:	1ccd      	adds	r5, r1, #3
 800ca1a:	f025 0503 	bic.w	r5, r5, #3
 800ca1e:	3508      	adds	r5, #8
 800ca20:	2d0c      	cmp	r5, #12
 800ca22:	bf38      	it	cc
 800ca24:	250c      	movcc	r5, #12
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	4607      	mov	r7, r0
 800ca2a:	db01      	blt.n	800ca30 <_malloc_r+0x1c>
 800ca2c:	42a9      	cmp	r1, r5
 800ca2e:	d905      	bls.n	800ca3c <_malloc_r+0x28>
 800ca30:	230c      	movs	r3, #12
 800ca32:	603b      	str	r3, [r7, #0]
 800ca34:	2600      	movs	r6, #0
 800ca36:	4630      	mov	r0, r6
 800ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca3c:	4e2e      	ldr	r6, [pc, #184]	; (800caf8 <_malloc_r+0xe4>)
 800ca3e:	f000 f8f7 	bl	800cc30 <__malloc_lock>
 800ca42:	6833      	ldr	r3, [r6, #0]
 800ca44:	461c      	mov	r4, r3
 800ca46:	bb34      	cbnz	r4, 800ca96 <_malloc_r+0x82>
 800ca48:	4629      	mov	r1, r5
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	f7ff ffc2 	bl	800c9d4 <sbrk_aligned>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	4604      	mov	r4, r0
 800ca54:	d14d      	bne.n	800caf2 <_malloc_r+0xde>
 800ca56:	6834      	ldr	r4, [r6, #0]
 800ca58:	4626      	mov	r6, r4
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	d140      	bne.n	800cae0 <_malloc_r+0xcc>
 800ca5e:	6823      	ldr	r3, [r4, #0]
 800ca60:	4631      	mov	r1, r6
 800ca62:	4638      	mov	r0, r7
 800ca64:	eb04 0803 	add.w	r8, r4, r3
 800ca68:	f000 f8b2 	bl	800cbd0 <_sbrk_r>
 800ca6c:	4580      	cmp	r8, r0
 800ca6e:	d13a      	bne.n	800cae6 <_malloc_r+0xd2>
 800ca70:	6821      	ldr	r1, [r4, #0]
 800ca72:	3503      	adds	r5, #3
 800ca74:	1a6d      	subs	r5, r5, r1
 800ca76:	f025 0503 	bic.w	r5, r5, #3
 800ca7a:	3508      	adds	r5, #8
 800ca7c:	2d0c      	cmp	r5, #12
 800ca7e:	bf38      	it	cc
 800ca80:	250c      	movcc	r5, #12
 800ca82:	4629      	mov	r1, r5
 800ca84:	4638      	mov	r0, r7
 800ca86:	f7ff ffa5 	bl	800c9d4 <sbrk_aligned>
 800ca8a:	3001      	adds	r0, #1
 800ca8c:	d02b      	beq.n	800cae6 <_malloc_r+0xd2>
 800ca8e:	6823      	ldr	r3, [r4, #0]
 800ca90:	442b      	add	r3, r5
 800ca92:	6023      	str	r3, [r4, #0]
 800ca94:	e00e      	b.n	800cab4 <_malloc_r+0xa0>
 800ca96:	6822      	ldr	r2, [r4, #0]
 800ca98:	1b52      	subs	r2, r2, r5
 800ca9a:	d41e      	bmi.n	800cada <_malloc_r+0xc6>
 800ca9c:	2a0b      	cmp	r2, #11
 800ca9e:	d916      	bls.n	800cace <_malloc_r+0xba>
 800caa0:	1961      	adds	r1, r4, r5
 800caa2:	42a3      	cmp	r3, r4
 800caa4:	6025      	str	r5, [r4, #0]
 800caa6:	bf18      	it	ne
 800caa8:	6059      	strne	r1, [r3, #4]
 800caaa:	6863      	ldr	r3, [r4, #4]
 800caac:	bf08      	it	eq
 800caae:	6031      	streq	r1, [r6, #0]
 800cab0:	5162      	str	r2, [r4, r5]
 800cab2:	604b      	str	r3, [r1, #4]
 800cab4:	4638      	mov	r0, r7
 800cab6:	f104 060b 	add.w	r6, r4, #11
 800caba:	f000 f8bf 	bl	800cc3c <__malloc_unlock>
 800cabe:	f026 0607 	bic.w	r6, r6, #7
 800cac2:	1d23      	adds	r3, r4, #4
 800cac4:	1af2      	subs	r2, r6, r3
 800cac6:	d0b6      	beq.n	800ca36 <_malloc_r+0x22>
 800cac8:	1b9b      	subs	r3, r3, r6
 800caca:	50a3      	str	r3, [r4, r2]
 800cacc:	e7b3      	b.n	800ca36 <_malloc_r+0x22>
 800cace:	6862      	ldr	r2, [r4, #4]
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	bf0c      	ite	eq
 800cad4:	6032      	streq	r2, [r6, #0]
 800cad6:	605a      	strne	r2, [r3, #4]
 800cad8:	e7ec      	b.n	800cab4 <_malloc_r+0xa0>
 800cada:	4623      	mov	r3, r4
 800cadc:	6864      	ldr	r4, [r4, #4]
 800cade:	e7b2      	b.n	800ca46 <_malloc_r+0x32>
 800cae0:	4634      	mov	r4, r6
 800cae2:	6876      	ldr	r6, [r6, #4]
 800cae4:	e7b9      	b.n	800ca5a <_malloc_r+0x46>
 800cae6:	230c      	movs	r3, #12
 800cae8:	603b      	str	r3, [r7, #0]
 800caea:	4638      	mov	r0, r7
 800caec:	f000 f8a6 	bl	800cc3c <__malloc_unlock>
 800caf0:	e7a1      	b.n	800ca36 <_malloc_r+0x22>
 800caf2:	6025      	str	r5, [r4, #0]
 800caf4:	e7de      	b.n	800cab4 <_malloc_r+0xa0>
 800caf6:	bf00      	nop
 800caf8:	20004f24 	.word	0x20004f24

0800cafc <cleanup_glue>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	460c      	mov	r4, r1
 800cb00:	6809      	ldr	r1, [r1, #0]
 800cb02:	4605      	mov	r5, r0
 800cb04:	b109      	cbz	r1, 800cb0a <cleanup_glue+0xe>
 800cb06:	f7ff fff9 	bl	800cafc <cleanup_glue>
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb12:	f7ff bf13 	b.w	800c93c <_free_r>
	...

0800cb18 <_reclaim_reent>:
 800cb18:	4b2c      	ldr	r3, [pc, #176]	; (800cbcc <_reclaim_reent+0xb4>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	4283      	cmp	r3, r0
 800cb1e:	b570      	push	{r4, r5, r6, lr}
 800cb20:	4604      	mov	r4, r0
 800cb22:	d051      	beq.n	800cbc8 <_reclaim_reent+0xb0>
 800cb24:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb26:	b143      	cbz	r3, 800cb3a <_reclaim_reent+0x22>
 800cb28:	68db      	ldr	r3, [r3, #12]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d14a      	bne.n	800cbc4 <_reclaim_reent+0xac>
 800cb2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb30:	6819      	ldr	r1, [r3, #0]
 800cb32:	b111      	cbz	r1, 800cb3a <_reclaim_reent+0x22>
 800cb34:	4620      	mov	r0, r4
 800cb36:	f7ff ff01 	bl	800c93c <_free_r>
 800cb3a:	6961      	ldr	r1, [r4, #20]
 800cb3c:	b111      	cbz	r1, 800cb44 <_reclaim_reent+0x2c>
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f7ff fefc 	bl	800c93c <_free_r>
 800cb44:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb46:	b111      	cbz	r1, 800cb4e <_reclaim_reent+0x36>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f7ff fef7 	bl	800c93c <_free_r>
 800cb4e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb50:	b111      	cbz	r1, 800cb58 <_reclaim_reent+0x40>
 800cb52:	4620      	mov	r0, r4
 800cb54:	f7ff fef2 	bl	800c93c <_free_r>
 800cb58:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb5a:	b111      	cbz	r1, 800cb62 <_reclaim_reent+0x4a>
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f7ff feed 	bl	800c93c <_free_r>
 800cb62:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb64:	b111      	cbz	r1, 800cb6c <_reclaim_reent+0x54>
 800cb66:	4620      	mov	r0, r4
 800cb68:	f7ff fee8 	bl	800c93c <_free_r>
 800cb6c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb6e:	b111      	cbz	r1, 800cb76 <_reclaim_reent+0x5e>
 800cb70:	4620      	mov	r0, r4
 800cb72:	f7ff fee3 	bl	800c93c <_free_r>
 800cb76:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb78:	b111      	cbz	r1, 800cb80 <_reclaim_reent+0x68>
 800cb7a:	4620      	mov	r0, r4
 800cb7c:	f7ff fede 	bl	800c93c <_free_r>
 800cb80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb82:	b111      	cbz	r1, 800cb8a <_reclaim_reent+0x72>
 800cb84:	4620      	mov	r0, r4
 800cb86:	f7ff fed9 	bl	800c93c <_free_r>
 800cb8a:	69a3      	ldr	r3, [r4, #24]
 800cb8c:	b1e3      	cbz	r3, 800cbc8 <_reclaim_reent+0xb0>
 800cb8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb90:	4620      	mov	r0, r4
 800cb92:	4798      	blx	r3
 800cb94:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb96:	b1b9      	cbz	r1, 800cbc8 <_reclaim_reent+0xb0>
 800cb98:	4620      	mov	r0, r4
 800cb9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb9e:	f7ff bfad 	b.w	800cafc <cleanup_glue>
 800cba2:	5949      	ldr	r1, [r1, r5]
 800cba4:	b941      	cbnz	r1, 800cbb8 <_reclaim_reent+0xa0>
 800cba6:	3504      	adds	r5, #4
 800cba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbaa:	2d80      	cmp	r5, #128	; 0x80
 800cbac:	68d9      	ldr	r1, [r3, #12]
 800cbae:	d1f8      	bne.n	800cba2 <_reclaim_reent+0x8a>
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f7ff fec3 	bl	800c93c <_free_r>
 800cbb6:	e7ba      	b.n	800cb2e <_reclaim_reent+0x16>
 800cbb8:	680e      	ldr	r6, [r1, #0]
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f7ff febe 	bl	800c93c <_free_r>
 800cbc0:	4631      	mov	r1, r6
 800cbc2:	e7ef      	b.n	800cba4 <_reclaim_reent+0x8c>
 800cbc4:	2500      	movs	r5, #0
 800cbc6:	e7ef      	b.n	800cba8 <_reclaim_reent+0x90>
 800cbc8:	bd70      	pop	{r4, r5, r6, pc}
 800cbca:	bf00      	nop
 800cbcc:	2000002c 	.word	0x2000002c

0800cbd0 <_sbrk_r>:
 800cbd0:	b538      	push	{r3, r4, r5, lr}
 800cbd2:	4d06      	ldr	r5, [pc, #24]	; (800cbec <_sbrk_r+0x1c>)
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	4604      	mov	r4, r0
 800cbd8:	4608      	mov	r0, r1
 800cbda:	602b      	str	r3, [r5, #0]
 800cbdc:	f7f4 fa44 	bl	8001068 <_sbrk>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_sbrk_r+0x1a>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_sbrk_r+0x1a>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	20004f2c 	.word	0x20004f2c

0800cbf0 <siprintf>:
 800cbf0:	b40e      	push	{r1, r2, r3}
 800cbf2:	b500      	push	{lr}
 800cbf4:	b09c      	sub	sp, #112	; 0x70
 800cbf6:	ab1d      	add	r3, sp, #116	; 0x74
 800cbf8:	9002      	str	r0, [sp, #8]
 800cbfa:	9006      	str	r0, [sp, #24]
 800cbfc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cc00:	4809      	ldr	r0, [pc, #36]	; (800cc28 <siprintf+0x38>)
 800cc02:	9107      	str	r1, [sp, #28]
 800cc04:	9104      	str	r1, [sp, #16]
 800cc06:	4909      	ldr	r1, [pc, #36]	; (800cc2c <siprintf+0x3c>)
 800cc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc0c:	9105      	str	r1, [sp, #20]
 800cc0e:	6800      	ldr	r0, [r0, #0]
 800cc10:	9301      	str	r3, [sp, #4]
 800cc12:	a902      	add	r1, sp, #8
 800cc14:	f000 f874 	bl	800cd00 <_svfiprintf_r>
 800cc18:	9b02      	ldr	r3, [sp, #8]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	701a      	strb	r2, [r3, #0]
 800cc1e:	b01c      	add	sp, #112	; 0x70
 800cc20:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc24:	b003      	add	sp, #12
 800cc26:	4770      	bx	lr
 800cc28:	2000002c 	.word	0x2000002c
 800cc2c:	ffff0208 	.word	0xffff0208

0800cc30 <__malloc_lock>:
 800cc30:	4801      	ldr	r0, [pc, #4]	; (800cc38 <__malloc_lock+0x8>)
 800cc32:	f7ff be4d 	b.w	800c8d0 <__retarget_lock_acquire_recursive>
 800cc36:	bf00      	nop
 800cc38:	20004f20 	.word	0x20004f20

0800cc3c <__malloc_unlock>:
 800cc3c:	4801      	ldr	r0, [pc, #4]	; (800cc44 <__malloc_unlock+0x8>)
 800cc3e:	f7ff be48 	b.w	800c8d2 <__retarget_lock_release_recursive>
 800cc42:	bf00      	nop
 800cc44:	20004f20 	.word	0x20004f20

0800cc48 <__ssputs_r>:
 800cc48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc4c:	688e      	ldr	r6, [r1, #8]
 800cc4e:	429e      	cmp	r6, r3
 800cc50:	4682      	mov	sl, r0
 800cc52:	460c      	mov	r4, r1
 800cc54:	4690      	mov	r8, r2
 800cc56:	461f      	mov	r7, r3
 800cc58:	d838      	bhi.n	800cccc <__ssputs_r+0x84>
 800cc5a:	898a      	ldrh	r2, [r1, #12]
 800cc5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cc60:	d032      	beq.n	800ccc8 <__ssputs_r+0x80>
 800cc62:	6825      	ldr	r5, [r4, #0]
 800cc64:	6909      	ldr	r1, [r1, #16]
 800cc66:	eba5 0901 	sub.w	r9, r5, r1
 800cc6a:	6965      	ldr	r5, [r4, #20]
 800cc6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc74:	3301      	adds	r3, #1
 800cc76:	444b      	add	r3, r9
 800cc78:	106d      	asrs	r5, r5, #1
 800cc7a:	429d      	cmp	r5, r3
 800cc7c:	bf38      	it	cc
 800cc7e:	461d      	movcc	r5, r3
 800cc80:	0553      	lsls	r3, r2, #21
 800cc82:	d531      	bpl.n	800cce8 <__ssputs_r+0xa0>
 800cc84:	4629      	mov	r1, r5
 800cc86:	f7ff fec5 	bl	800ca14 <_malloc_r>
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	b950      	cbnz	r0, 800cca4 <__ssputs_r+0x5c>
 800cc8e:	230c      	movs	r3, #12
 800cc90:	f8ca 3000 	str.w	r3, [sl]
 800cc94:	89a3      	ldrh	r3, [r4, #12]
 800cc96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc9a:	81a3      	strh	r3, [r4, #12]
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cca4:	6921      	ldr	r1, [r4, #16]
 800cca6:	464a      	mov	r2, r9
 800cca8:	f7ff fe1c 	bl	800c8e4 <memcpy>
 800ccac:	89a3      	ldrh	r3, [r4, #12]
 800ccae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ccb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	6126      	str	r6, [r4, #16]
 800ccba:	6165      	str	r5, [r4, #20]
 800ccbc:	444e      	add	r6, r9
 800ccbe:	eba5 0509 	sub.w	r5, r5, r9
 800ccc2:	6026      	str	r6, [r4, #0]
 800ccc4:	60a5      	str	r5, [r4, #8]
 800ccc6:	463e      	mov	r6, r7
 800ccc8:	42be      	cmp	r6, r7
 800ccca:	d900      	bls.n	800ccce <__ssputs_r+0x86>
 800cccc:	463e      	mov	r6, r7
 800ccce:	6820      	ldr	r0, [r4, #0]
 800ccd0:	4632      	mov	r2, r6
 800ccd2:	4641      	mov	r1, r8
 800ccd4:	f000 faa8 	bl	800d228 <memmove>
 800ccd8:	68a3      	ldr	r3, [r4, #8]
 800ccda:	1b9b      	subs	r3, r3, r6
 800ccdc:	60a3      	str	r3, [r4, #8]
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	4433      	add	r3, r6
 800cce2:	6023      	str	r3, [r4, #0]
 800cce4:	2000      	movs	r0, #0
 800cce6:	e7db      	b.n	800cca0 <__ssputs_r+0x58>
 800cce8:	462a      	mov	r2, r5
 800ccea:	f000 fab7 	bl	800d25c <_realloc_r>
 800ccee:	4606      	mov	r6, r0
 800ccf0:	2800      	cmp	r0, #0
 800ccf2:	d1e1      	bne.n	800ccb8 <__ssputs_r+0x70>
 800ccf4:	6921      	ldr	r1, [r4, #16]
 800ccf6:	4650      	mov	r0, sl
 800ccf8:	f7ff fe20 	bl	800c93c <_free_r>
 800ccfc:	e7c7      	b.n	800cc8e <__ssputs_r+0x46>
	...

0800cd00 <_svfiprintf_r>:
 800cd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd04:	4698      	mov	r8, r3
 800cd06:	898b      	ldrh	r3, [r1, #12]
 800cd08:	061b      	lsls	r3, r3, #24
 800cd0a:	b09d      	sub	sp, #116	; 0x74
 800cd0c:	4607      	mov	r7, r0
 800cd0e:	460d      	mov	r5, r1
 800cd10:	4614      	mov	r4, r2
 800cd12:	d50e      	bpl.n	800cd32 <_svfiprintf_r+0x32>
 800cd14:	690b      	ldr	r3, [r1, #16]
 800cd16:	b963      	cbnz	r3, 800cd32 <_svfiprintf_r+0x32>
 800cd18:	2140      	movs	r1, #64	; 0x40
 800cd1a:	f7ff fe7b 	bl	800ca14 <_malloc_r>
 800cd1e:	6028      	str	r0, [r5, #0]
 800cd20:	6128      	str	r0, [r5, #16]
 800cd22:	b920      	cbnz	r0, 800cd2e <_svfiprintf_r+0x2e>
 800cd24:	230c      	movs	r3, #12
 800cd26:	603b      	str	r3, [r7, #0]
 800cd28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd2c:	e0d1      	b.n	800ced2 <_svfiprintf_r+0x1d2>
 800cd2e:	2340      	movs	r3, #64	; 0x40
 800cd30:	616b      	str	r3, [r5, #20]
 800cd32:	2300      	movs	r3, #0
 800cd34:	9309      	str	r3, [sp, #36]	; 0x24
 800cd36:	2320      	movs	r3, #32
 800cd38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cd40:	2330      	movs	r3, #48	; 0x30
 800cd42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ceec <_svfiprintf_r+0x1ec>
 800cd46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cd4a:	f04f 0901 	mov.w	r9, #1
 800cd4e:	4623      	mov	r3, r4
 800cd50:	469a      	mov	sl, r3
 800cd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd56:	b10a      	cbz	r2, 800cd5c <_svfiprintf_r+0x5c>
 800cd58:	2a25      	cmp	r2, #37	; 0x25
 800cd5a:	d1f9      	bne.n	800cd50 <_svfiprintf_r+0x50>
 800cd5c:	ebba 0b04 	subs.w	fp, sl, r4
 800cd60:	d00b      	beq.n	800cd7a <_svfiprintf_r+0x7a>
 800cd62:	465b      	mov	r3, fp
 800cd64:	4622      	mov	r2, r4
 800cd66:	4629      	mov	r1, r5
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f7ff ff6d 	bl	800cc48 <__ssputs_r>
 800cd6e:	3001      	adds	r0, #1
 800cd70:	f000 80aa 	beq.w	800cec8 <_svfiprintf_r+0x1c8>
 800cd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd76:	445a      	add	r2, fp
 800cd78:	9209      	str	r2, [sp, #36]	; 0x24
 800cd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	f000 80a2 	beq.w	800cec8 <_svfiprintf_r+0x1c8>
 800cd84:	2300      	movs	r3, #0
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd8e:	f10a 0a01 	add.w	sl, sl, #1
 800cd92:	9304      	str	r3, [sp, #16]
 800cd94:	9307      	str	r3, [sp, #28]
 800cd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd9a:	931a      	str	r3, [sp, #104]	; 0x68
 800cd9c:	4654      	mov	r4, sl
 800cd9e:	2205      	movs	r2, #5
 800cda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cda4:	4851      	ldr	r0, [pc, #324]	; (800ceec <_svfiprintf_r+0x1ec>)
 800cda6:	f7f3 fa1b 	bl	80001e0 <memchr>
 800cdaa:	9a04      	ldr	r2, [sp, #16]
 800cdac:	b9d8      	cbnz	r0, 800cde6 <_svfiprintf_r+0xe6>
 800cdae:	06d0      	lsls	r0, r2, #27
 800cdb0:	bf44      	itt	mi
 800cdb2:	2320      	movmi	r3, #32
 800cdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdb8:	0711      	lsls	r1, r2, #28
 800cdba:	bf44      	itt	mi
 800cdbc:	232b      	movmi	r3, #43	; 0x2b
 800cdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800cdc6:	2b2a      	cmp	r3, #42	; 0x2a
 800cdc8:	d015      	beq.n	800cdf6 <_svfiprintf_r+0xf6>
 800cdca:	9a07      	ldr	r2, [sp, #28]
 800cdcc:	4654      	mov	r4, sl
 800cdce:	2000      	movs	r0, #0
 800cdd0:	f04f 0c0a 	mov.w	ip, #10
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cdda:	3b30      	subs	r3, #48	; 0x30
 800cddc:	2b09      	cmp	r3, #9
 800cdde:	d94e      	bls.n	800ce7e <_svfiprintf_r+0x17e>
 800cde0:	b1b0      	cbz	r0, 800ce10 <_svfiprintf_r+0x110>
 800cde2:	9207      	str	r2, [sp, #28]
 800cde4:	e014      	b.n	800ce10 <_svfiprintf_r+0x110>
 800cde6:	eba0 0308 	sub.w	r3, r0, r8
 800cdea:	fa09 f303 	lsl.w	r3, r9, r3
 800cdee:	4313      	orrs	r3, r2
 800cdf0:	9304      	str	r3, [sp, #16]
 800cdf2:	46a2      	mov	sl, r4
 800cdf4:	e7d2      	b.n	800cd9c <_svfiprintf_r+0x9c>
 800cdf6:	9b03      	ldr	r3, [sp, #12]
 800cdf8:	1d19      	adds	r1, r3, #4
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	9103      	str	r1, [sp, #12]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	bfbb      	ittet	lt
 800ce02:	425b      	neglt	r3, r3
 800ce04:	f042 0202 	orrlt.w	r2, r2, #2
 800ce08:	9307      	strge	r3, [sp, #28]
 800ce0a:	9307      	strlt	r3, [sp, #28]
 800ce0c:	bfb8      	it	lt
 800ce0e:	9204      	strlt	r2, [sp, #16]
 800ce10:	7823      	ldrb	r3, [r4, #0]
 800ce12:	2b2e      	cmp	r3, #46	; 0x2e
 800ce14:	d10c      	bne.n	800ce30 <_svfiprintf_r+0x130>
 800ce16:	7863      	ldrb	r3, [r4, #1]
 800ce18:	2b2a      	cmp	r3, #42	; 0x2a
 800ce1a:	d135      	bne.n	800ce88 <_svfiprintf_r+0x188>
 800ce1c:	9b03      	ldr	r3, [sp, #12]
 800ce1e:	1d1a      	adds	r2, r3, #4
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	9203      	str	r2, [sp, #12]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	bfb8      	it	lt
 800ce28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ce2c:	3402      	adds	r4, #2
 800ce2e:	9305      	str	r3, [sp, #20]
 800ce30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cefc <_svfiprintf_r+0x1fc>
 800ce34:	7821      	ldrb	r1, [r4, #0]
 800ce36:	2203      	movs	r2, #3
 800ce38:	4650      	mov	r0, sl
 800ce3a:	f7f3 f9d1 	bl	80001e0 <memchr>
 800ce3e:	b140      	cbz	r0, 800ce52 <_svfiprintf_r+0x152>
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	eba0 000a 	sub.w	r0, r0, sl
 800ce46:	fa03 f000 	lsl.w	r0, r3, r0
 800ce4a:	9b04      	ldr	r3, [sp, #16]
 800ce4c:	4303      	orrs	r3, r0
 800ce4e:	3401      	adds	r4, #1
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce56:	4826      	ldr	r0, [pc, #152]	; (800cef0 <_svfiprintf_r+0x1f0>)
 800ce58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ce5c:	2206      	movs	r2, #6
 800ce5e:	f7f3 f9bf 	bl	80001e0 <memchr>
 800ce62:	2800      	cmp	r0, #0
 800ce64:	d038      	beq.n	800ced8 <_svfiprintf_r+0x1d8>
 800ce66:	4b23      	ldr	r3, [pc, #140]	; (800cef4 <_svfiprintf_r+0x1f4>)
 800ce68:	bb1b      	cbnz	r3, 800ceb2 <_svfiprintf_r+0x1b2>
 800ce6a:	9b03      	ldr	r3, [sp, #12]
 800ce6c:	3307      	adds	r3, #7
 800ce6e:	f023 0307 	bic.w	r3, r3, #7
 800ce72:	3308      	adds	r3, #8
 800ce74:	9303      	str	r3, [sp, #12]
 800ce76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce78:	4433      	add	r3, r6
 800ce7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ce7c:	e767      	b.n	800cd4e <_svfiprintf_r+0x4e>
 800ce7e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce82:	460c      	mov	r4, r1
 800ce84:	2001      	movs	r0, #1
 800ce86:	e7a5      	b.n	800cdd4 <_svfiprintf_r+0xd4>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	3401      	adds	r4, #1
 800ce8c:	9305      	str	r3, [sp, #20]
 800ce8e:	4619      	mov	r1, r3
 800ce90:	f04f 0c0a 	mov.w	ip, #10
 800ce94:	4620      	mov	r0, r4
 800ce96:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce9a:	3a30      	subs	r2, #48	; 0x30
 800ce9c:	2a09      	cmp	r2, #9
 800ce9e:	d903      	bls.n	800cea8 <_svfiprintf_r+0x1a8>
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d0c5      	beq.n	800ce30 <_svfiprintf_r+0x130>
 800cea4:	9105      	str	r1, [sp, #20]
 800cea6:	e7c3      	b.n	800ce30 <_svfiprintf_r+0x130>
 800cea8:	fb0c 2101 	mla	r1, ip, r1, r2
 800ceac:	4604      	mov	r4, r0
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e7f0      	b.n	800ce94 <_svfiprintf_r+0x194>
 800ceb2:	ab03      	add	r3, sp, #12
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	462a      	mov	r2, r5
 800ceb8:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <_svfiprintf_r+0x1f8>)
 800ceba:	a904      	add	r1, sp, #16
 800cebc:	4638      	mov	r0, r7
 800cebe:	f3af 8000 	nop.w
 800cec2:	1c42      	adds	r2, r0, #1
 800cec4:	4606      	mov	r6, r0
 800cec6:	d1d6      	bne.n	800ce76 <_svfiprintf_r+0x176>
 800cec8:	89ab      	ldrh	r3, [r5, #12]
 800ceca:	065b      	lsls	r3, r3, #25
 800cecc:	f53f af2c 	bmi.w	800cd28 <_svfiprintf_r+0x28>
 800ced0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ced2:	b01d      	add	sp, #116	; 0x74
 800ced4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ced8:	ab03      	add	r3, sp, #12
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	462a      	mov	r2, r5
 800cede:	4b06      	ldr	r3, [pc, #24]	; (800cef8 <_svfiprintf_r+0x1f8>)
 800cee0:	a904      	add	r1, sp, #16
 800cee2:	4638      	mov	r0, r7
 800cee4:	f000 f87a 	bl	800cfdc <_printf_i>
 800cee8:	e7eb      	b.n	800cec2 <_svfiprintf_r+0x1c2>
 800ceea:	bf00      	nop
 800ceec:	0802c768 	.word	0x0802c768
 800cef0:	0802c772 	.word	0x0802c772
 800cef4:	00000000 	.word	0x00000000
 800cef8:	0800cc49 	.word	0x0800cc49
 800cefc:	0802c76e 	.word	0x0802c76e

0800cf00 <_printf_common>:
 800cf00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf04:	4616      	mov	r6, r2
 800cf06:	4699      	mov	r9, r3
 800cf08:	688a      	ldr	r2, [r1, #8]
 800cf0a:	690b      	ldr	r3, [r1, #16]
 800cf0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf10:	4293      	cmp	r3, r2
 800cf12:	bfb8      	it	lt
 800cf14:	4613      	movlt	r3, r2
 800cf16:	6033      	str	r3, [r6, #0]
 800cf18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cf1c:	4607      	mov	r7, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	b10a      	cbz	r2, 800cf26 <_printf_common+0x26>
 800cf22:	3301      	adds	r3, #1
 800cf24:	6033      	str	r3, [r6, #0]
 800cf26:	6823      	ldr	r3, [r4, #0]
 800cf28:	0699      	lsls	r1, r3, #26
 800cf2a:	bf42      	ittt	mi
 800cf2c:	6833      	ldrmi	r3, [r6, #0]
 800cf2e:	3302      	addmi	r3, #2
 800cf30:	6033      	strmi	r3, [r6, #0]
 800cf32:	6825      	ldr	r5, [r4, #0]
 800cf34:	f015 0506 	ands.w	r5, r5, #6
 800cf38:	d106      	bne.n	800cf48 <_printf_common+0x48>
 800cf3a:	f104 0a19 	add.w	sl, r4, #25
 800cf3e:	68e3      	ldr	r3, [r4, #12]
 800cf40:	6832      	ldr	r2, [r6, #0]
 800cf42:	1a9b      	subs	r3, r3, r2
 800cf44:	42ab      	cmp	r3, r5
 800cf46:	dc26      	bgt.n	800cf96 <_printf_common+0x96>
 800cf48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cf4c:	1e13      	subs	r3, r2, #0
 800cf4e:	6822      	ldr	r2, [r4, #0]
 800cf50:	bf18      	it	ne
 800cf52:	2301      	movne	r3, #1
 800cf54:	0692      	lsls	r2, r2, #26
 800cf56:	d42b      	bmi.n	800cfb0 <_printf_common+0xb0>
 800cf58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cf5c:	4649      	mov	r1, r9
 800cf5e:	4638      	mov	r0, r7
 800cf60:	47c0      	blx	r8
 800cf62:	3001      	adds	r0, #1
 800cf64:	d01e      	beq.n	800cfa4 <_printf_common+0xa4>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	68e5      	ldr	r5, [r4, #12]
 800cf6a:	6832      	ldr	r2, [r6, #0]
 800cf6c:	f003 0306 	and.w	r3, r3, #6
 800cf70:	2b04      	cmp	r3, #4
 800cf72:	bf08      	it	eq
 800cf74:	1aad      	subeq	r5, r5, r2
 800cf76:	68a3      	ldr	r3, [r4, #8]
 800cf78:	6922      	ldr	r2, [r4, #16]
 800cf7a:	bf0c      	ite	eq
 800cf7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cf80:	2500      	movne	r5, #0
 800cf82:	4293      	cmp	r3, r2
 800cf84:	bfc4      	itt	gt
 800cf86:	1a9b      	subgt	r3, r3, r2
 800cf88:	18ed      	addgt	r5, r5, r3
 800cf8a:	2600      	movs	r6, #0
 800cf8c:	341a      	adds	r4, #26
 800cf8e:	42b5      	cmp	r5, r6
 800cf90:	d11a      	bne.n	800cfc8 <_printf_common+0xc8>
 800cf92:	2000      	movs	r0, #0
 800cf94:	e008      	b.n	800cfa8 <_printf_common+0xa8>
 800cf96:	2301      	movs	r3, #1
 800cf98:	4652      	mov	r2, sl
 800cf9a:	4649      	mov	r1, r9
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	47c0      	blx	r8
 800cfa0:	3001      	adds	r0, #1
 800cfa2:	d103      	bne.n	800cfac <_printf_common+0xac>
 800cfa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfac:	3501      	adds	r5, #1
 800cfae:	e7c6      	b.n	800cf3e <_printf_common+0x3e>
 800cfb0:	18e1      	adds	r1, r4, r3
 800cfb2:	1c5a      	adds	r2, r3, #1
 800cfb4:	2030      	movs	r0, #48	; 0x30
 800cfb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cfba:	4422      	add	r2, r4
 800cfbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cfc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cfc4:	3302      	adds	r3, #2
 800cfc6:	e7c7      	b.n	800cf58 <_printf_common+0x58>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	4622      	mov	r2, r4
 800cfcc:	4649      	mov	r1, r9
 800cfce:	4638      	mov	r0, r7
 800cfd0:	47c0      	blx	r8
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	d0e6      	beq.n	800cfa4 <_printf_common+0xa4>
 800cfd6:	3601      	adds	r6, #1
 800cfd8:	e7d9      	b.n	800cf8e <_printf_common+0x8e>
	...

0800cfdc <_printf_i>:
 800cfdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe0:	7e0f      	ldrb	r7, [r1, #24]
 800cfe2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cfe4:	2f78      	cmp	r7, #120	; 0x78
 800cfe6:	4691      	mov	r9, r2
 800cfe8:	4680      	mov	r8, r0
 800cfea:	460c      	mov	r4, r1
 800cfec:	469a      	mov	sl, r3
 800cfee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cff2:	d807      	bhi.n	800d004 <_printf_i+0x28>
 800cff4:	2f62      	cmp	r7, #98	; 0x62
 800cff6:	d80a      	bhi.n	800d00e <_printf_i+0x32>
 800cff8:	2f00      	cmp	r7, #0
 800cffa:	f000 80d8 	beq.w	800d1ae <_printf_i+0x1d2>
 800cffe:	2f58      	cmp	r7, #88	; 0x58
 800d000:	f000 80a3 	beq.w	800d14a <_printf_i+0x16e>
 800d004:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d008:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d00c:	e03a      	b.n	800d084 <_printf_i+0xa8>
 800d00e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d012:	2b15      	cmp	r3, #21
 800d014:	d8f6      	bhi.n	800d004 <_printf_i+0x28>
 800d016:	a101      	add	r1, pc, #4	; (adr r1, 800d01c <_printf_i+0x40>)
 800d018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d01c:	0800d075 	.word	0x0800d075
 800d020:	0800d089 	.word	0x0800d089
 800d024:	0800d005 	.word	0x0800d005
 800d028:	0800d005 	.word	0x0800d005
 800d02c:	0800d005 	.word	0x0800d005
 800d030:	0800d005 	.word	0x0800d005
 800d034:	0800d089 	.word	0x0800d089
 800d038:	0800d005 	.word	0x0800d005
 800d03c:	0800d005 	.word	0x0800d005
 800d040:	0800d005 	.word	0x0800d005
 800d044:	0800d005 	.word	0x0800d005
 800d048:	0800d195 	.word	0x0800d195
 800d04c:	0800d0b9 	.word	0x0800d0b9
 800d050:	0800d177 	.word	0x0800d177
 800d054:	0800d005 	.word	0x0800d005
 800d058:	0800d005 	.word	0x0800d005
 800d05c:	0800d1b7 	.word	0x0800d1b7
 800d060:	0800d005 	.word	0x0800d005
 800d064:	0800d0b9 	.word	0x0800d0b9
 800d068:	0800d005 	.word	0x0800d005
 800d06c:	0800d005 	.word	0x0800d005
 800d070:	0800d17f 	.word	0x0800d17f
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	1d1a      	adds	r2, r3, #4
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	602a      	str	r2, [r5, #0]
 800d07c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d084:	2301      	movs	r3, #1
 800d086:	e0a3      	b.n	800d1d0 <_printf_i+0x1f4>
 800d088:	6820      	ldr	r0, [r4, #0]
 800d08a:	6829      	ldr	r1, [r5, #0]
 800d08c:	0606      	lsls	r6, r0, #24
 800d08e:	f101 0304 	add.w	r3, r1, #4
 800d092:	d50a      	bpl.n	800d0aa <_printf_i+0xce>
 800d094:	680e      	ldr	r6, [r1, #0]
 800d096:	602b      	str	r3, [r5, #0]
 800d098:	2e00      	cmp	r6, #0
 800d09a:	da03      	bge.n	800d0a4 <_printf_i+0xc8>
 800d09c:	232d      	movs	r3, #45	; 0x2d
 800d09e:	4276      	negs	r6, r6
 800d0a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0a4:	485e      	ldr	r0, [pc, #376]	; (800d220 <_printf_i+0x244>)
 800d0a6:	230a      	movs	r3, #10
 800d0a8:	e019      	b.n	800d0de <_printf_i+0x102>
 800d0aa:	680e      	ldr	r6, [r1, #0]
 800d0ac:	602b      	str	r3, [r5, #0]
 800d0ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d0b2:	bf18      	it	ne
 800d0b4:	b236      	sxthne	r6, r6
 800d0b6:	e7ef      	b.n	800d098 <_printf_i+0xbc>
 800d0b8:	682b      	ldr	r3, [r5, #0]
 800d0ba:	6820      	ldr	r0, [r4, #0]
 800d0bc:	1d19      	adds	r1, r3, #4
 800d0be:	6029      	str	r1, [r5, #0]
 800d0c0:	0601      	lsls	r1, r0, #24
 800d0c2:	d501      	bpl.n	800d0c8 <_printf_i+0xec>
 800d0c4:	681e      	ldr	r6, [r3, #0]
 800d0c6:	e002      	b.n	800d0ce <_printf_i+0xf2>
 800d0c8:	0646      	lsls	r6, r0, #25
 800d0ca:	d5fb      	bpl.n	800d0c4 <_printf_i+0xe8>
 800d0cc:	881e      	ldrh	r6, [r3, #0]
 800d0ce:	4854      	ldr	r0, [pc, #336]	; (800d220 <_printf_i+0x244>)
 800d0d0:	2f6f      	cmp	r7, #111	; 0x6f
 800d0d2:	bf0c      	ite	eq
 800d0d4:	2308      	moveq	r3, #8
 800d0d6:	230a      	movne	r3, #10
 800d0d8:	2100      	movs	r1, #0
 800d0da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d0de:	6865      	ldr	r5, [r4, #4]
 800d0e0:	60a5      	str	r5, [r4, #8]
 800d0e2:	2d00      	cmp	r5, #0
 800d0e4:	bfa2      	ittt	ge
 800d0e6:	6821      	ldrge	r1, [r4, #0]
 800d0e8:	f021 0104 	bicge.w	r1, r1, #4
 800d0ec:	6021      	strge	r1, [r4, #0]
 800d0ee:	b90e      	cbnz	r6, 800d0f4 <_printf_i+0x118>
 800d0f0:	2d00      	cmp	r5, #0
 800d0f2:	d04d      	beq.n	800d190 <_printf_i+0x1b4>
 800d0f4:	4615      	mov	r5, r2
 800d0f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d0fa:	fb03 6711 	mls	r7, r3, r1, r6
 800d0fe:	5dc7      	ldrb	r7, [r0, r7]
 800d100:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d104:	4637      	mov	r7, r6
 800d106:	42bb      	cmp	r3, r7
 800d108:	460e      	mov	r6, r1
 800d10a:	d9f4      	bls.n	800d0f6 <_printf_i+0x11a>
 800d10c:	2b08      	cmp	r3, #8
 800d10e:	d10b      	bne.n	800d128 <_printf_i+0x14c>
 800d110:	6823      	ldr	r3, [r4, #0]
 800d112:	07de      	lsls	r6, r3, #31
 800d114:	d508      	bpl.n	800d128 <_printf_i+0x14c>
 800d116:	6923      	ldr	r3, [r4, #16]
 800d118:	6861      	ldr	r1, [r4, #4]
 800d11a:	4299      	cmp	r1, r3
 800d11c:	bfde      	ittt	le
 800d11e:	2330      	movle	r3, #48	; 0x30
 800d120:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d124:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d128:	1b52      	subs	r2, r2, r5
 800d12a:	6122      	str	r2, [r4, #16]
 800d12c:	f8cd a000 	str.w	sl, [sp]
 800d130:	464b      	mov	r3, r9
 800d132:	aa03      	add	r2, sp, #12
 800d134:	4621      	mov	r1, r4
 800d136:	4640      	mov	r0, r8
 800d138:	f7ff fee2 	bl	800cf00 <_printf_common>
 800d13c:	3001      	adds	r0, #1
 800d13e:	d14c      	bne.n	800d1da <_printf_i+0x1fe>
 800d140:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d144:	b004      	add	sp, #16
 800d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14a:	4835      	ldr	r0, [pc, #212]	; (800d220 <_printf_i+0x244>)
 800d14c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d150:	6829      	ldr	r1, [r5, #0]
 800d152:	6823      	ldr	r3, [r4, #0]
 800d154:	f851 6b04 	ldr.w	r6, [r1], #4
 800d158:	6029      	str	r1, [r5, #0]
 800d15a:	061d      	lsls	r5, r3, #24
 800d15c:	d514      	bpl.n	800d188 <_printf_i+0x1ac>
 800d15e:	07df      	lsls	r7, r3, #31
 800d160:	bf44      	itt	mi
 800d162:	f043 0320 	orrmi.w	r3, r3, #32
 800d166:	6023      	strmi	r3, [r4, #0]
 800d168:	b91e      	cbnz	r6, 800d172 <_printf_i+0x196>
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	f023 0320 	bic.w	r3, r3, #32
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	2310      	movs	r3, #16
 800d174:	e7b0      	b.n	800d0d8 <_printf_i+0xfc>
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	f043 0320 	orr.w	r3, r3, #32
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	2378      	movs	r3, #120	; 0x78
 800d180:	4828      	ldr	r0, [pc, #160]	; (800d224 <_printf_i+0x248>)
 800d182:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d186:	e7e3      	b.n	800d150 <_printf_i+0x174>
 800d188:	0659      	lsls	r1, r3, #25
 800d18a:	bf48      	it	mi
 800d18c:	b2b6      	uxthmi	r6, r6
 800d18e:	e7e6      	b.n	800d15e <_printf_i+0x182>
 800d190:	4615      	mov	r5, r2
 800d192:	e7bb      	b.n	800d10c <_printf_i+0x130>
 800d194:	682b      	ldr	r3, [r5, #0]
 800d196:	6826      	ldr	r6, [r4, #0]
 800d198:	6961      	ldr	r1, [r4, #20]
 800d19a:	1d18      	adds	r0, r3, #4
 800d19c:	6028      	str	r0, [r5, #0]
 800d19e:	0635      	lsls	r5, r6, #24
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	d501      	bpl.n	800d1a8 <_printf_i+0x1cc>
 800d1a4:	6019      	str	r1, [r3, #0]
 800d1a6:	e002      	b.n	800d1ae <_printf_i+0x1d2>
 800d1a8:	0670      	lsls	r0, r6, #25
 800d1aa:	d5fb      	bpl.n	800d1a4 <_printf_i+0x1c8>
 800d1ac:	8019      	strh	r1, [r3, #0]
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	6123      	str	r3, [r4, #16]
 800d1b2:	4615      	mov	r5, r2
 800d1b4:	e7ba      	b.n	800d12c <_printf_i+0x150>
 800d1b6:	682b      	ldr	r3, [r5, #0]
 800d1b8:	1d1a      	adds	r2, r3, #4
 800d1ba:	602a      	str	r2, [r5, #0]
 800d1bc:	681d      	ldr	r5, [r3, #0]
 800d1be:	6862      	ldr	r2, [r4, #4]
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	f7f3 f80c 	bl	80001e0 <memchr>
 800d1c8:	b108      	cbz	r0, 800d1ce <_printf_i+0x1f2>
 800d1ca:	1b40      	subs	r0, r0, r5
 800d1cc:	6060      	str	r0, [r4, #4]
 800d1ce:	6863      	ldr	r3, [r4, #4]
 800d1d0:	6123      	str	r3, [r4, #16]
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d1d8:	e7a8      	b.n	800d12c <_printf_i+0x150>
 800d1da:	6923      	ldr	r3, [r4, #16]
 800d1dc:	462a      	mov	r2, r5
 800d1de:	4649      	mov	r1, r9
 800d1e0:	4640      	mov	r0, r8
 800d1e2:	47d0      	blx	sl
 800d1e4:	3001      	adds	r0, #1
 800d1e6:	d0ab      	beq.n	800d140 <_printf_i+0x164>
 800d1e8:	6823      	ldr	r3, [r4, #0]
 800d1ea:	079b      	lsls	r3, r3, #30
 800d1ec:	d413      	bmi.n	800d216 <_printf_i+0x23a>
 800d1ee:	68e0      	ldr	r0, [r4, #12]
 800d1f0:	9b03      	ldr	r3, [sp, #12]
 800d1f2:	4298      	cmp	r0, r3
 800d1f4:	bfb8      	it	lt
 800d1f6:	4618      	movlt	r0, r3
 800d1f8:	e7a4      	b.n	800d144 <_printf_i+0x168>
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	4632      	mov	r2, r6
 800d1fe:	4649      	mov	r1, r9
 800d200:	4640      	mov	r0, r8
 800d202:	47d0      	blx	sl
 800d204:	3001      	adds	r0, #1
 800d206:	d09b      	beq.n	800d140 <_printf_i+0x164>
 800d208:	3501      	adds	r5, #1
 800d20a:	68e3      	ldr	r3, [r4, #12]
 800d20c:	9903      	ldr	r1, [sp, #12]
 800d20e:	1a5b      	subs	r3, r3, r1
 800d210:	42ab      	cmp	r3, r5
 800d212:	dcf2      	bgt.n	800d1fa <_printf_i+0x21e>
 800d214:	e7eb      	b.n	800d1ee <_printf_i+0x212>
 800d216:	2500      	movs	r5, #0
 800d218:	f104 0619 	add.w	r6, r4, #25
 800d21c:	e7f5      	b.n	800d20a <_printf_i+0x22e>
 800d21e:	bf00      	nop
 800d220:	0802c779 	.word	0x0802c779
 800d224:	0802c78a 	.word	0x0802c78a

0800d228 <memmove>:
 800d228:	4288      	cmp	r0, r1
 800d22a:	b510      	push	{r4, lr}
 800d22c:	eb01 0402 	add.w	r4, r1, r2
 800d230:	d902      	bls.n	800d238 <memmove+0x10>
 800d232:	4284      	cmp	r4, r0
 800d234:	4623      	mov	r3, r4
 800d236:	d807      	bhi.n	800d248 <memmove+0x20>
 800d238:	1e43      	subs	r3, r0, #1
 800d23a:	42a1      	cmp	r1, r4
 800d23c:	d008      	beq.n	800d250 <memmove+0x28>
 800d23e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d242:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d246:	e7f8      	b.n	800d23a <memmove+0x12>
 800d248:	4402      	add	r2, r0
 800d24a:	4601      	mov	r1, r0
 800d24c:	428a      	cmp	r2, r1
 800d24e:	d100      	bne.n	800d252 <memmove+0x2a>
 800d250:	bd10      	pop	{r4, pc}
 800d252:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d256:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d25a:	e7f7      	b.n	800d24c <memmove+0x24>

0800d25c <_realloc_r>:
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	4680      	mov	r8, r0
 800d262:	4614      	mov	r4, r2
 800d264:	460e      	mov	r6, r1
 800d266:	b921      	cbnz	r1, 800d272 <_realloc_r+0x16>
 800d268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d26c:	4611      	mov	r1, r2
 800d26e:	f7ff bbd1 	b.w	800ca14 <_malloc_r>
 800d272:	b92a      	cbnz	r2, 800d280 <_realloc_r+0x24>
 800d274:	f7ff fb62 	bl	800c93c <_free_r>
 800d278:	4625      	mov	r5, r4
 800d27a:	4628      	mov	r0, r5
 800d27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d280:	f000 f81b 	bl	800d2ba <_malloc_usable_size_r>
 800d284:	4284      	cmp	r4, r0
 800d286:	4607      	mov	r7, r0
 800d288:	d802      	bhi.n	800d290 <_realloc_r+0x34>
 800d28a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d28e:	d812      	bhi.n	800d2b6 <_realloc_r+0x5a>
 800d290:	4621      	mov	r1, r4
 800d292:	4640      	mov	r0, r8
 800d294:	f7ff fbbe 	bl	800ca14 <_malloc_r>
 800d298:	4605      	mov	r5, r0
 800d29a:	2800      	cmp	r0, #0
 800d29c:	d0ed      	beq.n	800d27a <_realloc_r+0x1e>
 800d29e:	42bc      	cmp	r4, r7
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	4631      	mov	r1, r6
 800d2a4:	bf28      	it	cs
 800d2a6:	463a      	movcs	r2, r7
 800d2a8:	f7ff fb1c 	bl	800c8e4 <memcpy>
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4640      	mov	r0, r8
 800d2b0:	f7ff fb44 	bl	800c93c <_free_r>
 800d2b4:	e7e1      	b.n	800d27a <_realloc_r+0x1e>
 800d2b6:	4635      	mov	r5, r6
 800d2b8:	e7df      	b.n	800d27a <_realloc_r+0x1e>

0800d2ba <_malloc_usable_size_r>:
 800d2ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2be:	1f18      	subs	r0, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	bfbc      	itt	lt
 800d2c4:	580b      	ldrlt	r3, [r1, r0]
 800d2c6:	18c0      	addlt	r0, r0, r3
 800d2c8:	4770      	bx	lr
	...

0800d2cc <_init>:
 800d2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ce:	bf00      	nop
 800d2d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2d2:	bc08      	pop	{r3}
 800d2d4:	469e      	mov	lr, r3
 800d2d6:	4770      	bx	lr

0800d2d8 <_fini>:
 800d2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2da:	bf00      	nop
 800d2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2de:	bc08      	pop	{r3}
 800d2e0:	469e      	mov	lr, r3
 800d2e2:	4770      	bx	lr
