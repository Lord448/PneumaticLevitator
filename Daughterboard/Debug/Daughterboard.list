
Daughterboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f5a8  0800dd44  0800dd44  0001dd44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d2ec  0802d2ec  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802d2ec  0802d2ec  0003d2ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d2f4  0802d2f4  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d2f4  0802d2f4  0003d2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d2f8  0802d2f8  0003d2f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802d2fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb0  20000090  0802d38c  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f40  0802d38c  00044f40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d21  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a3d  00000000  00000000  00063de1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001db0  00000000  00000000  00068820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bc8  00000000  00000000  0006a5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000676e  00000000  00000000  0006c198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021753  00000000  00000000  00072906  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f051  00000000  00000000  00094059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001330aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000828c  00000000  00000000  001330fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dd2c 	.word	0x0800dd2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800dd2c 	.word	0x0800dd2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 ff28 	bl	80023dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f888 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 fa0e 	bl	80009b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f9a6 	bl	80008e4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000598:	f000 f8ea 	bl	8000770 <MX_SPI1_Init>
  MX_TIM1_Init();
 800059c:	f000 f91e 	bl	80007dc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f974 	bl	800088c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f008 fe7e 	bl	80092a4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreDMAComplete */
  xSemaphoreDMACompleteHandle = osSemaphoreNew(1, 1, &xSemaphoreDMAComplete_attributes);
 80005a8:	4a24      	ldr	r2, [pc, #144]	; (800063c <main+0xb8>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	2001      	movs	r0, #1
 80005ae:	f009 f859 	bl	8009664 <osSemaphoreNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a22      	ldr	r2, [pc, #136]	; (8000640 <main+0xbc>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskIdle */
  TaskIdleHandle = osThreadNew(vTaskIdle, NULL, &TaskIdle_attributes);
 80005b8:	4a22      	ldr	r2, [pc, #136]	; (8000644 <main+0xc0>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4822      	ldr	r0, [pc, #136]	; (8000648 <main+0xc4>)
 80005be:	f008 febb 	bl	8009338 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <main+0xc8>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of TaskUI */
  TaskUIHandle = osThreadNew(vTaskUI, NULL, &TaskUI_attributes);
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <main+0xcc>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4821      	ldr	r0, [pc, #132]	; (8000654 <main+0xd0>)
 80005ce:	f008 feb3 	bl	8009338 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <main+0xd4>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlink */
  TaskBlinkHandle = osThreadNew(vTaskBlink, NULL, &TaskBlink_attributes);
 80005d8:	4a20      	ldr	r2, [pc, #128]	; (800065c <main+0xd8>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4820      	ldr	r0, [pc, #128]	; (8000660 <main+0xdc>)
 80005de:	f008 feab 	bl	8009338 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <main+0xe0>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLeds */
  TaskLedsHandle = osThreadNew(vTaskLeds, NULL, &TaskLeds_attributes);
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <main+0xe4>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	481f      	ldr	r0, [pc, #124]	; (800066c <main+0xe8>)
 80005ee:	f008 fea3 	bl	8009338 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a1e      	ldr	r2, [pc, #120]	; (8000670 <main+0xec>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of TaskWdgM */
  TaskWdgMHandle = osThreadNew(vTaskWdgM, NULL, &TaskWdgM_attributes);
 80005f8:	4a1e      	ldr	r2, [pc, #120]	; (8000674 <main+0xf0>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	481e      	ldr	r0, [pc, #120]	; (8000678 <main+0xf4>)
 80005fe:	f008 fe9b 	bl	8009338 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a1d      	ldr	r2, [pc, #116]	; (800067c <main+0xf8>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of TaskCOM */
  TaskCOMHandle = osThreadNew(vTaskCOM, NULL, &TaskCOM_attributes);
 8000608:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <main+0xfc>)
 800060a:	2100      	movs	r1, #0
 800060c:	481d      	ldr	r0, [pc, #116]	; (8000684 <main+0x100>)
 800060e:	f008 fe93 	bl	8009338 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <main+0x104>)
 8000616:	6013      	str	r3, [r2, #0]

  /* creation of TaskDiagAppl */
  TaskDiagApplHandle = osThreadNew(vTaskDiagAppl, NULL, &TaskDiagAppl_attributes);
 8000618:	4a1c      	ldr	r2, [pc, #112]	; (800068c <main+0x108>)
 800061a:	2100      	movs	r1, #0
 800061c:	481c      	ldr	r0, [pc, #112]	; (8000690 <main+0x10c>)
 800061e:	f008 fe8b 	bl	8009338 <osThreadNew>
 8000622:	4603      	mov	r3, r0
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <main+0x110>)
 8000626:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of xEventFinishedInit */
  xEventFinishedInitHandle = osEventFlagsNew(&xEventFinishedInit_attributes);
 8000628:	481b      	ldr	r0, [pc, #108]	; (8000698 <main+0x114>)
 800062a:	f008 ff32 	bl	8009492 <osEventFlagsNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a1a      	ldr	r2, [pc, #104]	; (800069c <main+0x118>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f008 fe5a 	bl	80092ec <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0xb4>
 800063a:	bf00      	nop
 800063c:	0800dff4 	.word	0x0800dff4
 8000640:	200002cc 	.word	0x200002cc
 8000644:	0800def8 	.word	0x0800def8
 8000648:	08000b79 	.word	0x08000b79
 800064c:	200002b0 	.word	0x200002b0
 8000650:	0800df1c 	.word	0x0800df1c
 8000654:	0800cfa1 	.word	0x0800cfa1
 8000658:	200002b4 	.word	0x200002b4
 800065c:	0800df40 	.word	0x0800df40
 8000660:	08000b89 	.word	0x08000b89
 8000664:	200002b8 	.word	0x200002b8
 8000668:	0800df64 	.word	0x0800df64
 800066c:	08000ba9 	.word	0x08000ba9
 8000670:	200002bc 	.word	0x200002bc
 8000674:	0800df88 	.word	0x0800df88
 8000678:	08000be9 	.word	0x08000be9
 800067c:	200002c0 	.word	0x200002c0
 8000680:	0800dfac 	.word	0x0800dfac
 8000684:	0800cf6d 	.word	0x0800cf6d
 8000688:	200002c4 	.word	0x200002c4
 800068c:	0800dfd0 	.word	0x0800dfd0
 8000690:	0800cf91 	.word	0x0800cf91
 8000694:	200002c8 	.word	0x200002c8
 8000698:	0800e004 	.word	0x0800e004
 800069c:	200002d0 	.word	0x200002d0

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0320 	add.w	r3, r7, #32
 80006aa:	2230      	movs	r2, #48	; 0x30
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f00c fe50 	bl	800d354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xc8>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a26      	ldr	r2, [pc, #152]	; (8000768 <SystemClock_Config+0xc8>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b24      	ldr	r3, [pc, #144]	; (8000768 <SystemClock_Config+0xc8>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006e0:	2300      	movs	r3, #0
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xcc>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a20      	ldr	r2, [pc, #128]	; (800076c <SystemClock_Config+0xcc>)
 80006ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <SystemClock_Config+0xcc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000706:	2302      	movs	r3, #2
 8000708:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000710:	230c      	movs	r3, #12
 8000712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000714:	2360      	movs	r3, #96	; 0x60
 8000716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800071c:	2304      	movs	r3, #4
 800071e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0320 	add.w	r3, r7, #32
 8000724:	4618      	mov	r0, r3
 8000726:	f002 fe41 	bl	80033ac <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000730:	f000 fa62 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000738:	2302      	movs	r3, #2
 800073a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000740:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000744:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074a:	f107 030c 	add.w	r3, r7, #12
 800074e:	2103      	movs	r1, #3
 8000750:	4618      	mov	r0, r3
 8000752:	f003 f8a3 	bl	800389c <HAL_RCC_ClockConfig>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800075c:	f000 fa4c 	bl	8000bf8 <Error_Handler>
  }
}
 8000760:	bf00      	nop
 8000762:	3750      	adds	r7, #80	; 0x50
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000774:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_SPI1_Init+0x68>)
 8000778:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077a:	4b16      	ldr	r3, [pc, #88]	; (80007d4 <MX_SPI1_Init+0x64>)
 800077c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000780:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_SPI1_Init+0x64>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000790:	2202      	movs	r2, #2
 8000792:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_SPI1_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_SPI1_Init+0x64>)
 800079c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a2:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007bc:	220a      	movs	r2, #10
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_SPI1_Init+0x64>)
 80007c2:	f003 fa4b 	bl	8003c5c <HAL_SPI_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007cc:	f000 fa14 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000ac 	.word	0x200000ac
 80007d8:	40013000 	.word	0x40013000

080007dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	; 0x30
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2224      	movs	r2, #36	; 0x24
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f00c fdb2 	bl	800d354 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_TIM1_Init+0xa8>)
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <MX_TIM1_Init+0xac>)
 80007fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM1_Init+0xa8>)
 8000800:	2200      	movs	r2, #0
 8000802:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM1_Init+0xa8>)
 8000806:	2200      	movs	r2, #0
 8000808:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_TIM1_Init+0xa8>)
 800080c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000810:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM1_Init+0xa8>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM1_Init+0xa8>)
 800081a:	2200      	movs	r2, #0
 800081c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_TIM1_Init+0xa8>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000824:	2301      	movs	r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000828:	2300      	movs	r3, #0
 800082a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800082c:	2301      	movs	r3, #1
 800082e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000838:	2300      	movs	r3, #0
 800083a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800083c:	2301      	movs	r3, #1
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000848:	f107 030c 	add.w	r3, r7, #12
 800084c:	4619      	mov	r1, r3
 800084e:	480d      	ldr	r0, [pc, #52]	; (8000884 <MX_TIM1_Init+0xa8>)
 8000850:	f003 fdea 	bl	8004428 <HAL_TIM_Encoder_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800085a:	f000 f9cd 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM1_Init+0xa8>)
 800086c:	f003 ff02 	bl	8004674 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000876:	f000 f9bf 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3730      	adds	r7, #48	; 0x30
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000164 	.word	0x20000164
 8000888:	40010000 	.word	0x40010000

0800088c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000890:	4b12      	ldr	r3, [pc, #72]	; (80008dc <MX_USART1_UART_Init+0x50>)
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_USART1_UART_Init+0x54>)
 8000894:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART1_UART_Init+0x50>)
 8000898:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800089c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80008a4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008a6:	4b0d      	ldr	r3, [pc, #52]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80008ac:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART1_UART_Init+0x50>)
 80008c8:	f003 ff42 	bl	8004750 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80008d2:	f000 f991 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200001ac 	.word	0x200001ac
 80008e0:	40011000 	.word	0x40011000

080008e4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_DMA_Init+0xc0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <MX_DMA_Init+0xc0>)
 80008f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_DMA_Init+0xc0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000908:	4a28      	ldr	r2, [pc, #160]	; (80009ac <MX_DMA_Init+0xc8>)
 800090a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 800090c:	4b26      	ldr	r3, [pc, #152]	; (80009a8 <MX_DMA_Init+0xc4>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000918:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <MX_DMA_Init+0xc4>)
 800091a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8000920:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000922:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000926:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <MX_DMA_Init+0xc4>)
 800092a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000930:	4b1d      	ldr	r3, [pc, #116]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000936:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_DMA_Init+0xc4>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000946:	2204      	movs	r2, #4
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_DMA_Init+0xc4>)
 800094c:	2203      	movs	r2, #3
 800094e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000952:	2200      	movs	r2, #0
 8000954:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_DMA_Init+0xc4>)
 8000958:	2200      	movs	r2, #0
 800095a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 800095c:	4812      	ldr	r0, [pc, #72]	; (80009a8 <MX_DMA_Init+0xc4>)
 800095e:	f001 fee5 	bl	800272c <HAL_DMA_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000968:	f000 f946 	bl	8000bf8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2105      	movs	r1, #5
 8000970:	2039      	movs	r0, #57	; 0x39
 8000972:	f001 fea4 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000976:	2039      	movs	r0, #57	; 0x39
 8000978:	f001 febd 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2105      	movs	r1, #5
 8000980:	203a      	movs	r0, #58	; 0x3a
 8000982:	f001 fe9c 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000986:	203a      	movs	r0, #58	; 0x3a
 8000988:	f001 feb5 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2105      	movs	r1, #5
 8000990:	2046      	movs	r0, #70	; 0x46
 8000992:	f001 fe94 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000996:	2046      	movs	r0, #70	; 0x46
 8000998:	f001 fead 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800
 80009a8:	20000250 	.word	0x20000250
 80009ac:	40026428 	.word	0x40026428

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b67      	ldr	r3, [pc, #412]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a66      	ldr	r2, [pc, #408]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b64      	ldr	r3, [pc, #400]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b60      	ldr	r3, [pc, #384]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a5f      	ldr	r2, [pc, #380]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b5d      	ldr	r3, [pc, #372]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b59      	ldr	r3, [pc, #356]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a58      	ldr	r2, [pc, #352]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b56      	ldr	r3, [pc, #344]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b52      	ldr	r3, [pc, #328]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a51      	ldr	r2, [pc, #324]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b4f      	ldr	r3, [pc, #316]	; (8000b68 <MX_GPIO_Init+0x1b8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GP_GPIO_Port, LED_GP_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a3c:	484b      	ldr	r0, [pc, #300]	; (8000b6c <MX_GPIO_Init+0x1bc>)
 8000a3e:	f002 fc5d 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2150      	movs	r1, #80	; 0x50
 8000a46:	484a      	ldr	r0, [pc, #296]	; (8000b70 <MX_GPIO_Init+0x1c0>)
 8000a48:	f002 fc58 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2103      	movs	r1, #3
 8000a50:	4848      	ldr	r0, [pc, #288]	; (8000b74 <MX_GPIO_Init+0x1c4>)
 8000a52:	f002 fc53 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin, GPIO_PIN_RESET);
 8000a56:	2200      	movs	r2, #0
 8000a58:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a5c:	4845      	ldr	r0, [pc, #276]	; (8000b74 <MX_GPIO_Init+0x1c4>)
 8000a5e:	f002 fc4d 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GP_Pin */
  GPIO_InitStruct.Pin = LED_GP_Pin;
 8000a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GP_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	483c      	ldr	r0, [pc, #240]	; (8000b6c <MX_GPIO_Init+0x1bc>)
 8000a7c:	f002 faba 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 8000a80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	4619      	mov	r1, r3
 8000a96:	4835      	ldr	r0, [pc, #212]	; (8000b6c <MX_GPIO_Init+0x1bc>)
 8000a98:	f002 faac 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000a9c:	f240 430f 	movw	r3, #1039	; 0x40f
 8000aa0:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000aa2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0314 	add.w	r3, r7, #20
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	482f      	ldr	r0, [pc, #188]	; (8000b70 <MX_GPIO_Init+0x1c0>)
 8000ab4:	f002 fa9e 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000ab8:	2350      	movs	r3, #80	; 0x50
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac8:	f107 0314 	add.w	r3, r7, #20
 8000acc:	4619      	mov	r1, r3
 8000ace:	4828      	ldr	r0, [pc, #160]	; (8000b70 <MX_GPIO_Init+0x1c0>)
 8000ad0:	f002 fa90 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000ad4:	2303      	movs	r3, #3
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4822      	ldr	r0, [pc, #136]	; (8000b74 <MX_GPIO_Init+0x1c4>)
 8000aec:	f002 fa82 	bl	8002ff4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_COMM_Pin LED_USB_Pin LED_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin;
 8000af0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000af4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b02:	f107 0314 	add.w	r3, r7, #20
 8000b06:	4619      	mov	r1, r3
 8000b08:	481a      	ldr	r0, [pc, #104]	; (8000b74 <MX_GPIO_Init+0x1c4>)
 8000b0a:	f002 fa73 	bl	8002ff4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2105      	movs	r1, #5
 8000b12:	2006      	movs	r0, #6
 8000b14:	f001 fdd3 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f001 fdec 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2105      	movs	r1, #5
 8000b22:	2007      	movs	r0, #7
 8000b24:	f001 fdcb 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000b28:	2007      	movs	r0, #7
 8000b2a:	f001 fde4 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2105      	movs	r1, #5
 8000b32:	2008      	movs	r0, #8
 8000b34:	f001 fdc3 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b38:	2008      	movs	r0, #8
 8000b3a:	f001 fddc 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	2105      	movs	r1, #5
 8000b42:	2009      	movs	r0, #9
 8000b44:	f001 fdbb 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b48:	2009      	movs	r0, #9
 8000b4a:	f001 fdd4 	bl	80026f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2105      	movs	r1, #5
 8000b52:	2028      	movs	r0, #40	; 0x28
 8000b54:	f001 fdb3 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b58:	2028      	movs	r0, #40	; 0x28
 8000b5a:	f001 fdcc 	bl	80026f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b5e:	bf00      	nop
 8000b60:	3728      	adds	r7, #40	; 0x28
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400

08000b78 <vTaskIdle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskIdle */
void vTaskIdle(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b80:	2001      	movs	r0, #1
 8000b82:	f008 fc6b 	bl	800945c <osDelay>
 8000b86:	e7fb      	b.n	8000b80 <vTaskIdle+0x8>

08000b88 <vTaskBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskBlink */
void vTaskBlink(void *argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskBlink */

  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000b90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <vTaskBlink+0x1c>)
 8000b96:	f002 fbca 	bl	800332e <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(250));
 8000b9a:	20fa      	movs	r0, #250	; 0xfa
 8000b9c:	f008 fc5e 	bl	800945c <osDelay>
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000ba0:	e7f6      	b.n	8000b90 <vTaskBlink+0x8>
 8000ba2:	bf00      	nop
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <vTaskLeds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLeds */
void vTaskLeds(void *argument)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLeds */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000bb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb4:	480b      	ldr	r0, [pc, #44]	; (8000be4 <vTaskLeds+0x3c>)
 8000bb6:	f002 fbba 	bl	800332e <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000bba:	2064      	movs	r0, #100	; 0x64
 8000bbc:	f008 fc4e 	bl	800945c <osDelay>
    HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8000bc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bc4:	4807      	ldr	r0, [pc, #28]	; (8000be4 <vTaskLeds+0x3c>)
 8000bc6:	f002 fbb2 	bl	800332e <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000bca:	2064      	movs	r0, #100	; 0x64
 8000bcc:	f008 fc46 	bl	800945c <osDelay>
    HAL_GPIO_TogglePin(LED_CONTROL_GPIO_Port, LED_CONTROL_Pin);
 8000bd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd4:	4803      	ldr	r0, [pc, #12]	; (8000be4 <vTaskLeds+0x3c>)
 8000bd6:	f002 fbaa 	bl	800332e <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000bda:	2064      	movs	r0, #100	; 0x64
 8000bdc:	f008 fc3e 	bl	800945c <osDelay>
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000be0:	e7e6      	b.n	8000bb0 <vTaskLeds+0x8>
 8000be2:	bf00      	nop
 8000be4:	40020400 	.word	0x40020400

08000be8 <vTaskWdgM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskWdgM */
void vTaskWdgM(void *argument)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskWdgM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	f008 fc33 	bl	800945c <osDelay>
 8000bf6:	e7fb      	b.n	8000bf0 <vTaskWdgM+0x8>

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_MspInit+0x54>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a11      	ldr	r2, [pc, #68]	; (8000c58 <HAL_MspInit+0x54>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <HAL_MspInit+0x54>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_MspInit+0x54>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_MspInit+0x54>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_MspInit+0x54>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210f      	movs	r1, #15
 8000c46:	f06f 0001 	mvn.w	r0, #1
 8000c4a:	f001 fd38 	bl	80026be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800

08000c5c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a30      	ldr	r2, [pc, #192]	; (8000d3c <HAL_SPI_MspInit+0xe0>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d15a      	bne.n	8000d34 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b2f      	ldr	r3, [pc, #188]	; (8000d40 <HAL_SPI_MspInit+0xe4>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a2e      	ldr	r2, [pc, #184]	; (8000d40 <HAL_SPI_MspInit+0xe4>)
 8000c88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b2c      	ldr	r3, [pc, #176]	; (8000d40 <HAL_SPI_MspInit+0xe4>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b28      	ldr	r3, [pc, #160]	; (8000d40 <HAL_SPI_MspInit+0xe4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <HAL_SPI_MspInit+0xe4>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <HAL_SPI_MspInit+0xe4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000cb6:	23a0      	movs	r3, #160	; 0xa0
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc6:	2305      	movs	r3, #5
 8000cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	481c      	ldr	r0, [pc, #112]	; (8000d44 <HAL_SPI_MspInit+0xe8>)
 8000cd2:	f002 f98f 	bl	8002ff4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000cd6:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000cd8:	4a1c      	ldr	r2, [pc, #112]	; (8000d4c <HAL_SPI_MspInit+0xf0>)
 8000cda:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000cdc:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000cde:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ce2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ce4:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cea:	4b17      	ldr	r3, [pc, #92]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cf0:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cf6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf8:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cfe:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000d04:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d0c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d10:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d12:	4b0d      	ldr	r3, [pc, #52]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000d18:	480b      	ldr	r0, [pc, #44]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d1a:	f001 fd07 	bl	800272c <HAL_DMA_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000d24:	f7ff ff68 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d2c:	649a      	str	r2, [r3, #72]	; 0x48
 8000d2e:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_SPI_MspInit+0xec>)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40013000 	.word	0x40013000
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000
 8000d48:	20000104 	.word	0x20000104
 8000d4c:	40026440 	.word	0x40026440

08000d50 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a19      	ldr	r2, [pc, #100]	; (8000dd4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d12c      	bne.n	8000dcc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b18      	ldr	r3, [pc, #96]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7a:	4a17      	ldr	r2, [pc, #92]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6453      	str	r3, [r2, #68]	; 0x44
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a10      	ldr	r2, [pc, #64]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000daa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <HAL_TIM_Encoder_MspInit+0x8c>)
 8000dc8:	f002 f914 	bl	8002ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000dcc:	bf00      	nop
 8000dce:	3728      	adds	r7, #40	; 0x28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	40010000 	.word	0x40010000
 8000dd8:	40023800 	.word	0x40023800
 8000ddc:	40020000 	.word	0x40020000

08000de0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	; 0x28
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_UART_MspInit+0x130>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	f040 8081 	bne.w	8000f06 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	4b42      	ldr	r3, [pc, #264]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	4a41      	ldr	r2, [pc, #260]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6453      	str	r3, [r2, #68]	; 0x44
 8000e14:	4b3f      	ldr	r3, [pc, #252]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e18:	f003 0310 	and.w	r3, r3, #16
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
 8000e24:	4b3b      	ldr	r3, [pc, #236]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a3a      	ldr	r2, [pc, #232]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e2a:	f043 0301 	orr.w	r3, r3, #1
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e30:	4b38      	ldr	r3, [pc, #224]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e44:	4a33      	ldr	r2, [pc, #204]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e46:	f043 0302 	orr.w	r3, r3, #2
 8000e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <HAL_UART_MspInit+0x134>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e50:	f003 0302 	and.w	r3, r3, #2
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6a:	2307      	movs	r3, #7
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4828      	ldr	r0, [pc, #160]	; (8000f18 <HAL_UART_MspInit+0x138>)
 8000e76:	f002 f8bd 	bl	8002ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4821      	ldr	r0, [pc, #132]	; (8000f1c <HAL_UART_MspInit+0x13c>)
 8000e96:	f002 f8ad 	bl	8002ff4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e9a:	4b21      	ldr	r3, [pc, #132]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000e9c:	4a21      	ldr	r2, [pc, #132]	; (8000f24 <HAL_UART_MspInit+0x144>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ea0:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000ea2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000eaa:	2240      	movs	r2, #64	; 0x40
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ed4:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000eda:	4811      	ldr	r0, [pc, #68]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000edc:	f001 fc26 	bl	800272c <HAL_DMA_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000ee6:	f7ff fe87 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a0c      	ldr	r2, [pc, #48]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000eee:	635a      	str	r2, [r3, #52]	; 0x34
 8000ef0:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <HAL_UART_MspInit+0x140>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2105      	movs	r1, #5
 8000efa:	2025      	movs	r0, #37	; 0x25
 8000efc:	f001 fbdf 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f00:	2025      	movs	r0, #37	; 0x25
 8000f02:	f001 fbf8 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40011000 	.word	0x40011000
 8000f14:	40023800 	.word	0x40023800
 8000f18:	40020000 	.word	0x40020000
 8000f1c:	40020400 	.word	0x40020400
 8000f20:	200001f0 	.word	0x200001f0
 8000f24:	400264b8 	.word	0x400264b8

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f58:	f001 fa92 	bl	8002480 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f5c:	f00a fe6c 	bl	800bc38 <xTaskGetSchedulerState>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d001      	beq.n	8000f6a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f66:	f00b fd87 	bl	800ca78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f002 f9f6 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f002 f9ef 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 8000f8e:	2004      	movs	r0, #4
 8000f90:	f002 f9e8 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 8000f9c:	2008      	movs	r0, #8
 8000f9e:	f002 f9e1 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <USART1_IRQHandler+0x10>)
 8000fae:	f003 fc1d 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	200001ac 	.word	0x200001ac

08000fbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 8000fc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fc4:	f002 f9ce 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 8000fc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000fcc:	f002 f9ca 	bl	8003364 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <DMA2_Stream1_IRQHandler+0x10>)
 8000fda:	f001 fd3f 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000250 	.word	0x20000250

08000fe8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000fec:	4802      	ldr	r0, [pc, #8]	; (8000ff8 <DMA2_Stream2_IRQHandler+0x10>)
 8000fee:	f001 fd35 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000104 	.word	0x20000104

08000ffc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001000:	4802      	ldr	r0, [pc, #8]	; (800100c <DMA2_Stream7_IRQHandler+0x10>)
 8001002:	f001 fd2b 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200001f0 	.word	0x200001f0

08001010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <_sbrk+0x5c>)
 800101a:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_sbrk+0x60>)
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d102      	bne.n	8001032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <_sbrk+0x64>)
 800102e:	4a12      	ldr	r2, [pc, #72]	; (8001078 <_sbrk+0x68>)
 8001030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001032:	4b10      	ldr	r3, [pc, #64]	; (8001074 <_sbrk+0x64>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	4413      	add	r3, r2
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	429a      	cmp	r2, r3
 800103e:	d207      	bcs.n	8001050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001040:	f00c f936 	bl	800d2b0 <__errno>
 8001044:	4603      	mov	r3, r0
 8001046:	220c      	movs	r2, #12
 8001048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800104e:	e009      	b.n	8001064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001050:	4b08      	ldr	r3, [pc, #32]	; (8001074 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001056:	4b07      	ldr	r3, [pc, #28]	; (8001074 <_sbrk+0x64>)
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4413      	add	r3, r2
 800105e:	4a05      	ldr	r2, [pc, #20]	; (8001074 <_sbrk+0x64>)
 8001060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001062:	68fb      	ldr	r3, [r7, #12]
}
 8001064:	4618      	mov	r0, r3
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20020000 	.word	0x20020000
 8001070:	00000400 	.word	0x00000400
 8001074:	200002d4 	.word	0x200002d4
 8001078:	20004f40 	.word	0x20004f40

0800107c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	; (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010a4:	480d      	ldr	r0, [pc, #52]	; (80010dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010a6:	490e      	ldr	r1, [pc, #56]	; (80010e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010bc:	4c0b      	ldr	r4, [pc, #44]	; (80010ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ca:	f7ff ffd7 	bl	800107c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ce:	f00c f8f5 	bl	800d2bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010d2:	f7ff fa57 	bl	8000584 <main>
  bx  lr    
 80010d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010e4:	0802d2fc 	.word	0x0802d2fc
  ldr r2, =_sbss
 80010e8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010ec:	20004f40 	.word	0x20004f40

080010f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f0:	e7fe      	b.n	80010f0 <ADC_IRQHandler>
	...

080010f4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80010fe:	4b1e      	ldr	r3, [pc, #120]	; (8001178 <setSPI_Size+0x84>)
 8001100:	f993 3000 	ldrsb.w	r3, [r3]
 8001104:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001108:	429a      	cmp	r2, r3
 800110a:	d02e      	beq.n	800116a <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <setSPI_Size+0x88>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <setSPI_Size+0x88>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800111a:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 800111c:	4a16      	ldr	r2, [pc, #88]	; (8001178 <setSPI_Size+0x84>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10c      	bne.n	8001144 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <setSPI_Size+0x88>)
 800112c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001130:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8001132:	4b12      	ldr	r3, [pc, #72]	; (800117c <setSPI_Size+0x88>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <setSPI_Size+0x88>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	e00a      	b.n	800115a <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <setSPI_Size+0x88>)
 8001146:	2200      	movs	r2, #0
 8001148:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <setSPI_Size+0x88>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b0a      	ldr	r3, [pc, #40]	; (800117c <setSPI_Size+0x88>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001158:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <setSPI_Size+0x88>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <setSPI_Size+0x88>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001168:	601a      	str	r2, [r3, #0]
  }
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000004 	.word	0x20000004
 800117c:	200000ac 	.word	0x200000ac

08001180 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	460a      	mov	r2, r1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	4613      	mov	r3, r2
 800118e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8001190:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffad 	bl	80010f4 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800119a:	4b41      	ldr	r3, [pc, #260]	; (80012a0 <setDMAMemMode+0x120>)
 800119c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80011a0:	461a      	mov	r2, r3
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d106      	bne.n	80011b6 <setDMAMemMode+0x36>
 80011a8:	4b3d      	ldr	r3, [pc, #244]	; (80012a0 <setDMAMemMode+0x120>)
 80011aa:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80011ae:	461a      	mov	r2, r3
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d06f      	beq.n	8001296 <setDMAMemMode+0x116>
    config.dma_sz =size;
 80011b6:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80011ba:	4b39      	ldr	r3, [pc, #228]	; (80012a0 <setDMAMemMode+0x120>)
 80011bc:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 80011be:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80011c2:	4b37      	ldr	r3, [pc, #220]	; (80012a0 <setDMAMemMode+0x120>)
 80011c4:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 80011c6:	4b37      	ldr	r3, [pc, #220]	; (80012a4 <setDMAMemMode+0x124>)
 80011c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	4b35      	ldr	r3, [pc, #212]	; (80012a4 <setDMAMemMode+0x124>)
 80011d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 0201 	bic.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 80011da:	bf00      	nop
 80011dc:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <setDMAMemMode+0x124>)
 80011de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d1f7      	bne.n	80011dc <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d10f      	bne.n	8001212 <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80011f2:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <setDMAMemMode+0x124>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011fa:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 80011fc:	4b29      	ldr	r3, [pc, #164]	; (80012a4 <setDMAMemMode+0x124>)
 80011fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <setDMAMemMode+0x124>)
 8001206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	e00d      	b.n	800122e <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 8001212:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <setDMAMemMode+0x124>)
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 800121a:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <setDMAMemMode+0x124>)
 800121c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	4b20      	ldr	r3, [pc, #128]	; (80012a4 <setDMAMemMode+0x124>)
 8001224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800122c:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 800122e:	79bb      	ldrb	r3, [r7, #6]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d116      	bne.n	8001262 <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001234:	4b1b      	ldr	r3, [pc, #108]	; (80012a4 <setDMAMemMode+0x124>)
 8001236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800123c:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <setDMAMemMode+0x124>)
 8001240:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001246:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <setDMAMemMode+0x124>)
 800124a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001254:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <setDMAMemMode+0x124>)
 8001256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	e011      	b.n	8001286 <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001262:	4b10      	ldr	r3, [pc, #64]	; (80012a4 <setDMAMemMode+0x124>)
 8001264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <setDMAMemMode+0x124>)
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <setDMAMemMode+0x124>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <setDMAMemMode+0x124>)
 800127c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001284:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001286:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <setDMAMemMode+0x124>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <setDMAMemMode+0x124>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001294:	601a      	str	r2, [r3, #0]
  }
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000004 	.word	0x20000004
 80012a4:	200000ac 	.word	0x200000ac

080012a8 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 80012b4:	2000      	movs	r0, #0
 80012b6:	f7ff ff1d 	bl	80010f4 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <LCD_WriteCommand+0x5c>)
 80012bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80012c0:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <LCD_WriteCommand+0x60>)
 80012c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012c8:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	480e      	ldr	r0, [pc, #56]	; (800130c <LCD_WriteCommand+0x64>)
 80012d4:	f002 fd4b 	bl	8003d6e <HAL_SPI_Transmit>
  if(argc){
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <LCD_WriteCommand+0x5c>)
 80012e0:	2210      	movs	r2, #16
 80012e2:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	1c59      	adds	r1, r3, #1
 80012e8:	78fb      	ldrb	r3, [r7, #3]
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f0:	4806      	ldr	r0, [pc, #24]	; (800130c <LCD_WriteCommand+0x64>)
 80012f2:	f002 fd3c 	bl	8003d6e <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <LCD_WriteCommand+0x60>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	619a      	str	r2, [r3, #24]
#endif
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40020000 	.word	0x40020000
 8001308:	40020400 	.word	0x40020400
 800130c:	200000ac 	.word	0x200000ac

08001310 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 800131a:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <LCD_WriteData+0xc4>)
 800131c:	2210      	movs	r2, #16
 800131e:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001320:	4b2d      	ldr	r3, [pc, #180]	; (80013d8 <LCD_WriteData+0xc8>)
 8001322:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001326:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 8001328:	e049      	b.n	80013be <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001330:	4293      	cmp	r3, r2
 8001332:	bf28      	it	cs
 8001334:	4613      	movcs	r3, r2
 8001336:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d924      	bls.n	8001388 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	461a      	mov	r2, r3
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4825      	ldr	r0, [pc, #148]	; (80013dc <LCD_WriteData+0xcc>)
 8001346:	f002 fe4f 	bl	8003fe8 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 800134a:	bf00      	nop
 800134c:	4b23      	ldr	r3, [pc, #140]	; (80013dc <LCD_WriteData+0xcc>)
 800134e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fd61 	bl	8002e18 <HAL_DMA_GetState>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	d1f7      	bne.n	800134c <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 800135c:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <LCD_WriteData+0xd0>)
 800135e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d127      	bne.n	80013b6 <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 8001366:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <LCD_WriteData+0xd0>)
 8001368:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d104      	bne.n	800137a <LCD_WriteData+0x6a>
          buff += chunk_size;
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	e01d      	b.n	80013b6 <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	607b      	str	r3, [r7, #4]
 8001386:	e016      	b.n	80013b6 <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001388:	89fa      	ldrh	r2, [r7, #14]
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4812      	ldr	r0, [pc, #72]	; (80013dc <LCD_WriteData+0xcc>)
 8001392:	f002 fcec 	bl	8003d6e <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <LCD_WriteData+0xd0>)
 8001398:	f993 3000 	ldrsb.w	r3, [r3]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d104      	bne.n	80013aa <LCD_WriteData+0x9a>
        buff += chunk_size;
 80013a0:	89fb      	ldrh	r3, [r7, #14]
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	607b      	str	r3, [r7, #4]
 80013a8:	e005      	b.n	80013b6 <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 80013aa:	89fb      	ldrh	r3, [r7, #14]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	461a      	mov	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4413      	add	r3, r2
 80013b4:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1b2      	bne.n	800132a <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <LCD_WriteData+0xc8>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	619a      	str	r2, [r3, #24]
#endif
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020000 	.word	0x40020000
 80013d8:	40020400 	.word	0x40020400
 80013dc:	200000ac 	.word	0x200000ac
 80013e0:	20000004 	.word	0x20000004

080013e4 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4604      	mov	r4, r0
 80013ec:	4608      	mov	r0, r1
 80013ee:	4611      	mov	r1, r2
 80013f0:	461a      	mov	r2, r3
 80013f2:	4623      	mov	r3, r4
 80013f4:	80fb      	strh	r3, [r7, #6]
 80013f6:	4603      	mov	r3, r0
 80013f8:	80bb      	strh	r3, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]
 80013fe:	4613      	mov	r3, r2
 8001400:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001406:	887b      	ldrh	r3, [r7, #2]
 8001408:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	847b      	strh	r3, [r7, #34]	; 0x22
 800140e:	883b      	ldrh	r3, [r7, #0]
 8001410:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 8001412:	232a      	movs	r3, #42	; 0x2a
 8001414:	763b      	strb	r3, [r7, #24]
 8001416:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800141a:	121b      	asrs	r3, r3, #8
 800141c:	b21b      	sxth	r3, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	767b      	strb	r3, [r7, #25]
 8001422:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001424:	b2db      	uxtb	r3, r3
 8001426:	76bb      	strb	r3, [r7, #26]
 8001428:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800142c:	121b      	asrs	r3, r3, #8
 800142e:	b21b      	sxth	r3, r3
 8001430:	b2db      	uxtb	r3, r3
 8001432:	76fb      	strb	r3, [r7, #27]
 8001434:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001436:	b2db      	uxtb	r3, r3
 8001438:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2104      	movs	r1, #4
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff31 	bl	80012a8 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001446:	232b      	movs	r3, #43	; 0x2b
 8001448:	743b      	strb	r3, [r7, #16]
 800144a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800144e:	121b      	asrs	r3, r3, #8
 8001450:	b21b      	sxth	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	747b      	strb	r3, [r7, #17]
 8001456:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001458:	b2db      	uxtb	r3, r3
 800145a:	74bb      	strb	r3, [r7, #18]
 800145c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001460:	121b      	asrs	r3, r3, #8
 8001462:	b21b      	sxth	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	74fb      	strb	r3, [r7, #19]
 8001468:	8c3b      	ldrh	r3, [r7, #32]
 800146a:	b2db      	uxtb	r3, r3
 800146c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800146e:	f107 0310 	add.w	r3, r7, #16
 8001472:	2104      	movs	r1, #4
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff17 	bl	80012a8 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800147a:	232c      	movs	r3, #44	; 0x2c
 800147c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800147e:	f107 030c 	add.w	r3, r7, #12
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff0f 	bl	80012a8 <LCD_WriteCommand>
  }
}
 800148a:	bf00      	nop
 800148c:	372c      	adds	r7, #44	; 0x2c
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}
	...

08001494 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
 800149e:	460b      	mov	r3, r1
 80014a0:	80bb      	strh	r3, [r7, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db30      	blt.n	8001510 <LCD_DrawPixel+0x7c>
 80014ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b2:	2bef      	cmp	r3, #239	; 0xef
 80014b4:	dc2c      	bgt.n	8001510 <LCD_DrawPixel+0x7c>
 80014b6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	db28      	blt.n	8001510 <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 80014be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c2:	2bef      	cmp	r3, #239	; 0xef
 80014c4:	dc24      	bgt.n	8001510 <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	733b      	strb	r3, [r7, #12]
 80014d0:	887b      	ldrh	r3, [r7, #2]
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80014d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014de:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014e2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014e6:	f7ff ff7d 	bl	80013e4 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 80014ea:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <LCD_DrawPixel+0x84>)
 80014ec:	2210      	movs	r2, #16
 80014ee:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80014f0:	4b0a      	ldr	r3, [pc, #40]	; (800151c <LCD_DrawPixel+0x88>)
 80014f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014f6:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80014f8:	f107 010c 	add.w	r1, r7, #12
 80014fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001500:	2202      	movs	r2, #2
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <LCD_DrawPixel+0x8c>)
 8001504:	f002 fc33 	bl	8003d6e <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <LCD_DrawPixel+0x88>)
 800150a:	2201      	movs	r2, #1
 800150c:	619a      	str	r2, [r3, #24]
 800150e:	e000      	b.n	8001512 <LCD_DrawPixel+0x7e>
    return;
 8001510:	bf00      	nop
#endif
}
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40020000 	.word	0x40020000
 800151c:	40020400 	.word	0x40020400
 8001520:	200000ac 	.word	0x200000ac

08001524 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 8001524:	b580      	push	{r7, lr}
 8001526:	b0a4      	sub	sp, #144	; 0x90
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d905      	bls.n	8001542 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8001536:	1cbb      	adds	r3, r7, #2
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fee8 	bl	8001310 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8001540:	e02f      	b.n	80015a2 <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001542:	2300      	movs	r3, #0
 8001544:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001548:	e00c      	b.n	8001564 <LCD_FillPixels+0x40>
      fill[t]=color;
 800154a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	3390      	adds	r3, #144	; 0x90
 8001554:	443b      	add	r3, r7
 8001556:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 800155a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800155e:	3301      	adds	r3, #1
 8001560:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001564:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b40      	cmp	r3, #64	; 0x40
 800156c:	bf28      	it	cs
 800156e:	2340      	movcs	r3, #64	; 0x40
 8001570:	429a      	cmp	r2, r3
 8001572:	d3ea      	bcc.n	800154a <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001574:	e012      	b.n	800159c <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b40      	cmp	r3, #64	; 0x40
 800157a:	bf28      	it	cs
 800157c:	2340      	movcs	r3, #64	; 0x40
 800157e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 8001582:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4611      	mov	r1, r2
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff febf 	bl	8001310 <LCD_WriteData>
      pixels-=sz;
 8001592:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1e9      	bne.n	8001576 <LCD_FillPixels+0x52>
}
 80015a2:	bf00      	nop
 80015a4:	3790      	adds	r7, #144	; 0x90
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
	...

080015ac <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 80015ac:	b590      	push	{r4, r7, lr}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4604      	mov	r4, r0
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4623      	mov	r3, r4
 80015bc:	80fb      	strh	r3, [r7, #6]
 80015be:	4603      	mov	r3, r0
 80015c0:	80bb      	strh	r3, [r7, #4]
 80015c2:	460b      	mov	r3, r1
 80015c4:	807b      	strh	r3, [r7, #2]
 80015c6:	4613      	mov	r3, r2
 80015c8:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015d2:	d105      	bne.n	80015e0 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80015d4:	2100      	movs	r1, #0
 80015d6:	2001      	movs	r0, #1
 80015d8:	f7ff fdd2 	bl	8001180 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	e011      	b.n	8001604 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80015e0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015e4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015e8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015ec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015f0:	f7ff fef8 	bl	80013e4 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 80015f4:	2101      	movs	r1, #1
 80015f6:	2000      	movs	r0, #0
 80015f8:	f7ff fdc2 	bl	8001180 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 80015fc:	4b03      	ldr	r3, [pc, #12]	; (800160c <LCD_FillArea+0x60>)
 80015fe:	2210      	movs	r2, #16
 8001600:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 8001602:	4b03      	ldr	r3, [pc, #12]	; (8001610 <LCD_FillArea+0x64>)
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	40020000 	.word	0x40020000
 8001610:	08001525 	.word	0x08001525

08001614 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 8001614:	b590      	push	{r4, r7, lr}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	4604      	mov	r4, r0
 800161c:	4608      	mov	r0, r1
 800161e:	4611      	mov	r1, r2
 8001620:	461a      	mov	r2, r3
 8001622:	4623      	mov	r3, r4
 8001624:	80fb      	strh	r3, [r7, #6]
 8001626:	4603      	mov	r3, r0
 8001628:	80bb      	strh	r3, [r7, #4]
 800162a:	460b      	mov	r3, r1
 800162c:	807b      	strh	r3, [r7, #2]
 800162e:	4613      	mov	r3, r2
 8001630:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001632:	887a      	ldrh	r2, [r7, #2]
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	3301      	adds	r3, #1
 800163a:	4619      	mov	r1, r3
 800163c:	883a      	ldrh	r2, [r7, #0]
 800163e:	88bb      	ldrh	r3, [r7, #4]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	3301      	adds	r3, #1
 8001644:	fb01 f303 	mul.w	r3, r1, r3
 8001648:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800164a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800164e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001652:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001656:	f9b7 3000 	ldrsh.w	r3, [r7]
 800165a:	f7ff fec3 	bl	80013e4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800165e:	2101      	movs	r1, #1
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fd8d 	bl	8001180 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8001666:	8c3b      	ldrh	r3, [r7, #32]
 8001668:	4619      	mov	r1, r3
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff ff5a 	bl	8001524 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 8001670:	2100      	movs	r1, #0
 8001672:	2001      	movs	r0, #1
 8001674:	f7ff fd84 	bl	8001180 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	bd90      	pop	{r4, r7, pc}

08001682 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001682:	b590      	push	{r4, r7, lr}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	603a      	str	r2, [r7, #0]
 800168c:	80fb      	strh	r3, [r7, #6]
 800168e:	460b      	mov	r3, r1
 8001690:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	889b      	ldrh	r3, [r3, #4]
 8001696:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	88db      	ldrh	r3, [r3, #6]
 800169c:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	2bef      	cmp	r3, #239	; 0xef
 80016a2:	d837      	bhi.n	8001714 <LCD_DrawImage+0x92>
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	2bef      	cmp	r3, #239	; 0xef
 80016a8:	d834      	bhi.n	8001714 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 80016aa:	88fa      	ldrh	r2, [r7, #6]
 80016ac:	89fb      	ldrh	r3, [r7, #14]
 80016ae:	4413      	add	r3, r2
 80016b0:	2bf0      	cmp	r3, #240	; 0xf0
 80016b2:	dc31      	bgt.n	8001718 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 80016b4:	88ba      	ldrh	r2, [r7, #4]
 80016b6:	89bb      	ldrh	r3, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	2bf0      	cmp	r3, #240	; 0xf0
 80016bc:	dc2e      	bgt.n	800171c <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	7a1b      	ldrb	r3, [r3, #8]
 80016c2:	2b10      	cmp	r3, #16
 80016c4:	d12c      	bne.n	8001720 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 80016c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80016ca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80016ce:	88fa      	ldrh	r2, [r7, #6]
 80016d0:	89fb      	ldrh	r3, [r7, #14]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	3b01      	subs	r3, #1
 80016d8:	b29b      	uxth	r3, r3
 80016da:	b21c      	sxth	r4, r3
 80016dc:	88ba      	ldrh	r2, [r7, #4]
 80016de:	89bb      	ldrh	r3, [r7, #12]
 80016e0:	4413      	add	r3, r2
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	3b01      	subs	r3, #1
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	4622      	mov	r2, r4
 80016ec:	f7ff fe7a 	bl	80013e4 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 80016f0:	2101      	movs	r1, #1
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff fd44 	bl	8001180 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	89fb      	ldrh	r3, [r7, #14]
 80016fe:	89ba      	ldrh	r2, [r7, #12]
 8001700:	fb02 f303 	mul.w	r3, r2, r3
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff fe03 	bl	8001310 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 800170a:	2100      	movs	r1, #0
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fd37 	bl	8001180 <setDMAMemMode>
 8001712:	e006      	b.n	8001722 <LCD_DrawImage+0xa0>
    return;
 8001714:	bf00      	nop
 8001716:	e004      	b.n	8001722 <LCD_DrawImage+0xa0>
    return;
 8001718:	bf00      	nop
 800171a:	e002      	b.n	8001722 <LCD_DrawImage+0xa0>
    return;
 800171c:	bf00      	nop
 800171e:	e000      	b.n	8001722 <LCD_DrawImage+0xa0>
    return;
 8001720:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bd90      	pop	{r4, r7, pc}

08001728 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b087      	sub	sp, #28
 800172c:	af02      	add	r7, sp, #8
 800172e:	4604      	mov	r4, r0
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4623      	mov	r3, r4
 8001738:	80fb      	strh	r3, [r7, #6]
 800173a:	4603      	mov	r3, r0
 800173c:	80bb      	strh	r3, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001746:	88fa      	ldrh	r2, [r7, #6]
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	429a      	cmp	r2, r3
 800174c:	d10a      	bne.n	8001764 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	883b      	ldrh	r3, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d918      	bls.n	8001788 <LCD_DrawLine+0x60>
 8001756:	88bb      	ldrh	r3, [r7, #4]
 8001758:	81bb      	strh	r3, [r7, #12]
 800175a:	883b      	ldrh	r3, [r7, #0]
 800175c:	80bb      	strh	r3, [r7, #4]
 800175e:	89bb      	ldrh	r3, [r7, #12]
 8001760:	803b      	strh	r3, [r7, #0]
 8001762:	e011      	b.n	8001788 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001764:	88ba      	ldrh	r2, [r7, #4]
 8001766:	883b      	ldrh	r3, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d10a      	bne.n	8001782 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 800176c:	88fa      	ldrh	r2, [r7, #6]
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	429a      	cmp	r2, r3
 8001772:	d909      	bls.n	8001788 <LCD_DrawLine+0x60>
 8001774:	88fb      	ldrh	r3, [r7, #6]
 8001776:	81fb      	strh	r3, [r7, #14]
 8001778:	887b      	ldrh	r3, [r7, #2]
 800177a:	80fb      	strh	r3, [r7, #6]
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	807b      	strh	r3, [r7, #2]
 8001780:	e002      	b.n	8001788 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001786:	e009      	b.n	800179c <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001788:	883c      	ldrh	r4, [r7, #0]
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	88b9      	ldrh	r1, [r7, #4]
 800178e:	88f8      	ldrh	r0, [r7, #6]
 8001790:	8c3b      	ldrh	r3, [r7, #32]
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	4623      	mov	r3, r4
 8001796:	f7ff ff3d 	bl	8001614 <LCD_Fill>
  return UG_RESULT_OK;
 800179a:	2300      	movs	r3, #0
}
 800179c:	4618      	mov	r0, r3
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd90      	pop	{r4, r7, pc}

080017a4 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60ba      	str	r2, [r7, #8]
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4603      	mov	r3, r0
 80017b0:	81fb      	strh	r3, [r7, #14]
 80017b2:	460b      	mov	r3, r1
 80017b4:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f003 ff68 	bl	800568c <UG_FontSelect>
  UG_SetForecolor(color);
 80017bc:	8b3b      	ldrh	r3, [r7, #24]
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fdac 	bl	800631c <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 80017c4:	8bbb      	ldrh	r3, [r7, #28]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f004 fdba 	bl	8006340 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 80017cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017d0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80017d4:	68ba      	ldr	r2, [r7, #8]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fd18 	bl	800620c <UG_PutString>
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b084      	sub	sp, #16
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <LCD_setPower+0x14>
 80017f4:	2329      	movs	r3, #41	; 0x29
 80017f6:	e000      	b.n	80017fa <LCD_setPower+0x16>
 80017f8:	2328      	movs	r3, #40	; 0x28
 80017fa:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f7ff fd50 	bl	80012a8 <LCD_WriteCommand>
}
 8001808:	bf00      	nop
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}

08001810 <LCD_Update>:

static void LCD_Update(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001814:	2100      	movs	r1, #0
 8001816:	2001      	movs	r0, #1
 8001818:	f7ff fcb2 	bl	8001180 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 800181c:	bf00      	nop
 800181e:	bd80      	pop	{r7, pc}

08001820 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001826:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <LCD_init+0xa8>)
 8001828:	2201      	movs	r2, #1
 800182a:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <LCD_init+0xac>)
 800182e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001832:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 8001834:	2019      	movs	r0, #25
 8001836:	f000 fe43 	bl	80024c0 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <LCD_init+0xac>)
 800183c:	2240      	movs	r2, #64	; 0x40
 800183e:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001840:	20c8      	movs	r0, #200	; 0xc8
 8001842:	f000 fe3d 	bl	80024c0 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001846:	4922      	ldr	r1, [pc, #136]	; (80018d0 <LCD_init+0xb0>)
 8001848:	4822      	ldr	r0, [pc, #136]	; (80018d4 <LCD_init+0xb4>)
 800184a:	f003 fead 	bl	80055a8 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800184e:	4922      	ldr	r1, [pc, #136]	; (80018d8 <LCD_init+0xb8>)
 8001850:	2000      	movs	r0, #0
 8001852:	f005 fd35 	bl	80072c0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001856:	4921      	ldr	r1, [pc, #132]	; (80018dc <LCD_init+0xbc>)
 8001858:	2001      	movs	r0, #1
 800185a:	f005 fd31 	bl	80072c0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800185e:	4920      	ldr	r1, [pc, #128]	; (80018e0 <LCD_init+0xc0>)
 8001860:	2002      	movs	r0, #2
 8001862:	f005 fd2d 	bl	80072c0 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001866:	491f      	ldr	r1, [pc, #124]	; (80018e4 <LCD_init+0xc4>)
 8001868:	2003      	movs	r0, #3
 800186a:	f005 fd29 	bl	80072c0 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800186e:	2000      	movs	r0, #0
 8001870:	f004 fd94 	bl	800639c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001874:	2000      	movs	r0, #0
 8001876:	f004 fda5 	bl	80063c4 <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 800187a:	2300      	movs	r3, #0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	e013      	b.n	80018a8 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001880:	88fb      	ldrh	r3, [r7, #6]
 8001882:	3301      	adds	r3, #1
 8001884:	4a18      	ldr	r2, [pc, #96]	; (80018e8 <LCD_init+0xc8>)
 8001886:	441a      	add	r2, r3
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4917      	ldr	r1, [pc, #92]	; (80018e8 <LCD_init+0xc8>)
 800188c:	5ccb      	ldrb	r3, [r1, r3]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff fd09 	bl	80012a8 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	4a13      	ldr	r2, [pc, #76]	; (80018e8 <LCD_init+0xc8>)
 800189a:	5cd3      	ldrb	r3, [r2, r3]
 800189c:	b29a      	uxth	r2, r3
 800189e:	88fb      	ldrh	r3, [r7, #6]
 80018a0:	4413      	add	r3, r2
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	3302      	adds	r3, #2
 80018a6:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 80018a8:	88fb      	ldrh	r3, [r7, #6]
 80018aa:	2b4b      	cmp	r3, #75	; 0x4b
 80018ac:	d9e8      	bls.n	8001880 <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 80018ae:	2000      	movs	r0, #0
 80018b0:	f003 fefc 	bl	80056ac <UG_FillScreen>
  LCD_setPower(ENABLE);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f7ff ff95 	bl	80017e4 <LCD_setPower>
  UG_Update();
 80018ba:	f005 fd23 	bl	8007304 <UG_Update>
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40020000 	.word	0x40020000
 80018d0:	20000008 	.word	0x20000008
 80018d4:	200002f8 	.word	0x200002f8
 80018d8:	08001729 	.word	0x08001729
 80018dc:	08001615 	.word	0x08001615
 80018e0:	080015ad 	.word	0x080015ad
 80018e4:	08001683 	.word	0x08001683
 80018e8:	0800e02c 	.word	0x0800e02c

080018ec <clearTime>:


#define DEFAULT_FONT FONT_6X8

static uint32_t draw_time=0;
static void clearTime(void){
 80018ec:	b580      	push	{r7, lr}
 80018ee:	af00      	add	r7, sp, #0
  draw_time=HAL_GetTick();
 80018f0:	f000 fdda 	bl	80024a8 <HAL_GetTick>
 80018f4:	4603      	mov	r3, r0
 80018f6:	4a02      	ldr	r2, [pc, #8]	; (8001900 <clearTime+0x14>)
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000354 	.word	0x20000354

08001904 <printTime>:
static void printTime(void){
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
  char str[8];
  uint8_t t = UG_FontGetTransparency();
 800190a:	f004 fd81 	bl	8006410 <UG_FontGetTransparency>
 800190e:	4603      	mov	r3, r0
 8001910:	73fb      	strb	r3, [r7, #15]
  sprintf(str,"%lums",HAL_GetTick()-draw_time);
 8001912:	f000 fdc9 	bl	80024a8 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <printTime+0x60>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	1ad2      	subs	r2, r2, r3
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	4911      	ldr	r1, [pc, #68]	; (8001968 <printTime+0x64>)
 8001922:	4618      	mov	r0, r3
 8001924:	f00b fe96 	bl	800d654 <siprintf>
  UG_FontSelect(DEFAULT_FONT);
 8001928:	4810      	ldr	r0, [pc, #64]	; (800196c <printTime+0x68>)
 800192a:	f003 feaf 	bl	800568c <UG_FontSelect>
  UG_SetForecolor(C_YELLOW);
 800192e:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001932:	f004 fcf3 	bl	800631c <UG_SetForecolor>
  UG_SetBackcolor(C_BLACK);
 8001936:	2000      	movs	r0, #0
 8001938:	f004 fd02 	bl	8006340 <UG_SetBackcolor>
  UG_FontSetTransparency(0);
 800193c:	2000      	movs	r0, #0
 800193e:	f004 fd55 	bl	80063ec <UG_FontSetTransparency>
  UG_PutString(10, 15, str);
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	461a      	mov	r2, r3
 8001946:	210f      	movs	r1, #15
 8001948:	200a      	movs	r0, #10
 800194a:	f004 fc5f 	bl	800620c <UG_PutString>
  UG_FontSetTransparency(t);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	4618      	mov	r0, r3
 8001952:	f004 fd4b 	bl	80063ec <UG_FontSetTransparency>
  UG_Update();
 8001956:	f005 fcd5 	bl	8007304 <UG_Update>
}
 800195a:	bf00      	nop
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000354 	.word	0x20000354
 8001968:	0800ddc0 	.word	0x0800ddc0
 800196c:	08020974 	.word	0x08020974

08001970 <LCD_Test>:
static UG_BUTTON button_1;
static UG_TEXTBOX textbox_1;
static UG_OBJECT obj_buff_wnd_1[MAX_OBJECTS];
static UG_PROGRESS pgb;
void LCD_Test(void)
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b091      	sub	sp, #68	; 0x44
 8001974:	af04      	add	r7, sp, #16

  int16_t x=40,y=40,rad=20,count=0;
 8001976:	2328      	movs	r3, #40	; 0x28
 8001978:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800197a:	2328      	movs	r3, #40	; 0x28
 800197c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800197e:	2314      	movs	r3, #20
 8001980:	827b      	strh	r3, [r7, #18]
 8001982:	2300      	movs	r3, #0
 8001984:	857b      	strh	r3, [r7, #42]	; 0x2a
  int8_t xadd=2,yadd=2,dstep=2;
 8001986:	2302      	movs	r3, #2
 8001988:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800198c:	2302      	movs	r3, #2
 800198e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001992:	2302      	movs	r3, #2
 8001994:	747b      	strb	r3, [r7, #17]
  uint8_t r=0,g=0,b=0, t;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80019a2:	2300      	movs	r3, #0
 80019a4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t start, show;

  UG_FontSetTransparency(1);
 80019a8:	2001      	movs	r0, #1
 80019aa:	f004 fd1f 	bl	80063ec <UG_FontSetTransparency>

  UG_FillScreen(C_BLACK);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f003 fe7c 	bl	80056ac <UG_FillScreen>

  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
 80019b4:	2300      	movs	r3, #0
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019bc:	9300      	str	r3, [sp, #0]
 80019be:	4bc0      	ldr	r3, [pc, #768]	; (8001cc0 <LCD_Test+0x350>)
 80019c0:	4ac0      	ldr	r2, [pc, #768]	; (8001cc4 <LCD_Test+0x354>)
 80019c2:	2138      	movs	r1, #56	; 0x38
 80019c4:	2032      	movs	r0, #50	; 0x32
 80019c6:	f7ff feed 	bl	80017a4 <LCD_PutStr>
  HAL_Delay(500);
 80019ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019ce:	f000 fd77 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 80019d2:	2000      	movs	r0, #0
 80019d4:	f003 fe6a 	bl	80056ac <UG_FillScreen>
  show=start=HAL_GetTick();
 80019d8:	f000 fd66 	bl	80024a8 <HAL_GetTick>
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	623b      	str	r3, [r7, #32]
  t = UG_FontGetTransparency();
 80019e2:	f004 fd15 	bl	8006410 <UG_FontGetTransparency>
 80019e6:	4603      	mov	r3, r0
 80019e8:	72fb      	strb	r3, [r7, #11]
  while(HAL_GetTick()-start<4000){
 80019ea:	e0a8      	b.n	8001b3e <LCD_Test+0x1ce>
    UG_FillFrame(x-rad, y-rad, x+rad, y+rad, C_BLACK);
 80019ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80019ee:	8a7b      	ldrh	r3, [r7, #18]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	b218      	sxth	r0, r3
 80019f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019f8:	8a7b      	ldrh	r3, [r7, #18]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	b219      	sxth	r1, r3
 8001a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001a02:	8a7b      	ldrh	r3, [r7, #18]
 8001a04:	4413      	add	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	b21c      	sxth	r4, r3
 8001a0a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001a0c:	8a7b      	ldrh	r3, [r7, #18]
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	2200      	movs	r2, #0
 8001a16:	9200      	str	r2, [sp, #0]
 8001a18:	4622      	mov	r2, r4
 8001a1a:	f003 fe6b 	bl	80056f4 <UG_FillFrame>
    x+=xadd;
 8001a1e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y+=yadd;
 8001a2c:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a34:	4413      	add	r3, r2
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x-rad<1){
 8001a3a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a3e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	dc0a      	bgt.n	8001a5e <LCD_Test+0xee>
      xadd=dstep;
 8001a48:	7c7b      	ldrb	r3, [r7, #17]
 8001a4a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001a4e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a52:	b29a      	uxth	r2, r3
 8001a54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a56:	4413      	add	r3, r2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a5c:	e012      	b.n	8001a84 <LCD_Test+0x114>
    }
    else if(x+rad>(LCD_WIDTH-1)){
 8001a5e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a62:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a66:	4413      	add	r3, r2
 8001a68:	2bef      	cmp	r3, #239	; 0xef
 8001a6a:	dd0b      	ble.n	8001a84 <LCD_Test+0x114>
      xadd=-dstep;
 8001a6c:	7c7b      	ldrb	r3, [r7, #17]
 8001a6e:	425b      	negs	r3, r3
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001a76:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if(y-rad<1){
 8001a84:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001a88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	dc0a      	bgt.n	8001aa8 <LCD_Test+0x138>
      yadd=dstep;
 8001a92:	7c7b      	ldrb	r3, [r7, #17]
 8001a94:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001a98:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001aa6:	e012      	b.n	8001ace <LCD_Test+0x15e>
    }
    else if(y+rad>(LCD_HEIGHT-1)){
 8001aa8:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001aac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	2bef      	cmp	r3, #239	; 0xef
 8001ab4:	dd0b      	ble.n	8001ace <LCD_Test+0x15e>
      yadd=-dstep;
 8001ab6:	7c7b      	ldrb	r3, [r7, #17]
 8001ab8:	425b      	negs	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001ac0:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    UG_FillCircle(x, y, rad, C_WHITE);
 8001ace:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001ad2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001ad6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ade:	f004 f839 	bl	8005b54 <UG_FillCircle>
    UG_FontSetTransparency(0);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f004 fc82 	bl	80063ec <UG_FontSetTransparency>
    LCD_PutStr(0, 0, str, DEFAULT_FONT, C_RED, C_BLACK);
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	4b73      	ldr	r3, [pc, #460]	; (8001cc0 <LCD_Test+0x350>)
 8001af4:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <LCD_Test+0x358>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff fe53 	bl	80017a4 <LCD_PutStr>
    UG_FontSetTransparency(t);
 8001afe:	7afb      	ldrb	r3, [r7, #11]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f004 fc73 	bl	80063ec <UG_FontSetTransparency>
    UG_Update();
 8001b06:	f005 fbfd 	bl	8007304 <UG_Update>
    count++;
 8001b0a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(HAL_GetTick()-show>999){
 8001b16:	f000 fcc7 	bl	80024a8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	6a3b      	ldr	r3, [r7, #32]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b24:	d30b      	bcc.n	8001b3e <LCD_Test+0x1ce>
      show=HAL_GetTick();
 8001b26:	f000 fcbf 	bl	80024a8 <HAL_GetTick>
 8001b2a:	6238      	str	r0, [r7, #32]
      sprintf(str,"%dFPS",count);
 8001b2c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b30:	461a      	mov	r2, r3
 8001b32:	4966      	ldr	r1, [pc, #408]	; (8001ccc <LCD_Test+0x35c>)
 8001b34:	4864      	ldr	r0, [pc, #400]	; (8001cc8 <LCD_Test+0x358>)
 8001b36:	f00b fd8d 	bl	800d654 <siprintf>
      count=0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	857b      	strh	r3, [r7, #42]	; 0x2a
  while(HAL_GetTick()-start<4000){
 8001b3e:	f000 fcb3 	bl	80024a8 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b4c:	f4ff af4e 	bcc.w	80019ec <LCD_Test+0x7c>
    }
  }

  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b56:	e019      	b.n	8001b8c <LCD_Test+0x21c>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001b58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b5c:	02db      	lsls	r3, r3, #11
 8001b5e:	b21a      	sxth	r2, r3
 8001b60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b21a      	sxth	r2, r3
 8001b6c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b70:	b21b      	sxth	r3, r3
 8001b72:	4313      	orrs	r3, r2
 8001b74:	b21b      	sxth	r3, r3
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 fd97 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001b7e:	f005 fbc1 	bl	8007304 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b86:	3301      	adds	r3, #1
 8001b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b90:	2b1f      	cmp	r3, #31
 8001b92:	d9e1      	bls.n	8001b58 <LCD_Test+0x1e8>
  }
  r=31;
 8001b94:	231f      	movs	r3, #31
 8001b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ba0:	e019      	b.n	8001bd6 <LCD_Test+0x266>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba6:	02db      	lsls	r3, r3, #11
 8001ba8:	b21a      	sxth	r2, r3
 8001baa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bae:	015b      	lsls	r3, r3, #5
 8001bb0:	b21b      	sxth	r3, r3
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b21a      	sxth	r2, r3
 8001bb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bba:	b21b      	sxth	r3, r3
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	b21b      	sxth	r3, r3
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fd72 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001bc8:	f005 fb9c 	bl	8007304 <UG_Update>
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bd6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bda:	2b3f      	cmp	r3, #63	; 0x3f
 8001bdc:	d9e1      	bls.n	8001ba2 <LCD_Test+0x232>
  }
  g=63;
 8001bde:	233f      	movs	r3, #63	; 0x3f
 8001be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001be4:	231c      	movs	r3, #28
 8001be6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bea:	e019      	b.n	8001c20 <LCD_Test+0x2b0>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf0:	02db      	lsls	r3, r3, #11
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bf8:	015b      	lsls	r3, r3, #5
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21b      	sxth	r3, r3
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f003 fd4d 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001c12:	f005 fb77 	bl	8007304 <UG_Update>
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001c16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e1      	bne.n	8001bec <LCD_Test+0x27c>
  }
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c2e:	e019      	b.n	8001c64 <LCD_Test+0x2f4>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c34:	02db      	lsls	r3, r3, #11
 8001c36:	b21a      	sxth	r2, r3
 8001c38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	b21b      	sxth	r3, r3
 8001c40:	4313      	orrs	r3, r2
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	b21b      	sxth	r3, r3
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	4618      	mov	r0, r3
 8001c52:	f003 fd2b 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001c56:	f005 fb55 	bl	8007304 <UG_Update>
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001c5a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c5e:	3301      	adds	r3, #1
 8001c60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c64:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c68:	2b1f      	cmp	r3, #31
 8001c6a:	d9e1      	bls.n	8001c30 <LCD_Test+0x2c0>
  }
  b=31;
 8001c6c:	231f      	movs	r3, #31
 8001c6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001c72:	2338      	movs	r3, #56	; 0x38
 8001c74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c78:	e019      	b.n	8001cae <LCD_Test+0x33e>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c7e:	02db      	lsls	r3, r3, #11
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	b21b      	sxth	r3, r3
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	b21a      	sxth	r2, r3
 8001c8e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f003 fd06 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001ca0:	f005 fb30 	bl	8007304 <UG_Update>
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001ca4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ca8:	3b02      	subs	r3, #2
 8001caa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1e1      	bne.n	8001c7a <LCD_Test+0x30a>
  }
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cbc:	e022      	b.n	8001d04 <LCD_Test+0x394>
 8001cbe:	bf00      	nop
 8001cc0:	08020974 	.word	0x08020974
 8001cc4:	0800ddc8 	.word	0x0800ddc8
 8001cc8:	200002d8 	.word	0x200002d8
 8001ccc:	0800ddd8 	.word	0x0800ddd8
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd4:	02db      	lsls	r3, r3, #11
 8001cd6:	b21a      	sxth	r2, r3
 8001cd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	b21b      	sxth	r3, r3
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	b21a      	sxth	r2, r3
 8001ce4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001ce8:	b21b      	sxth	r3, r3
 8001cea:	4313      	orrs	r3, r2
 8001cec:	b21b      	sxth	r3, r3
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fcdb 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001cf6:	f005 fb05 	bl	8007304 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001cfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cfe:	3301      	adds	r3, #1
 8001d00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001d04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d08:	2b1f      	cmp	r3, #31
 8001d0a:	d9e1      	bls.n	8001cd0 <LCD_Test+0x360>
  }
  r=31;
 8001d0c:	231f      	movs	r3, #31
 8001d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d18:	e019      	b.n	8001d4e <LCD_Test+0x3de>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1e:	02db      	lsls	r3, r3, #11
 8001d20:	b21a      	sxth	r2, r3
 8001d22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d26:	015b      	lsls	r3, r3, #5
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4313      	orrs	r3, r2
 8001d36:	b21b      	sxth	r3, r3
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fcb6 	bl	80056ac <UG_FillScreen>
    UG_Update();
 8001d40:	f005 fae0 	bl	8007304 <UG_Update>
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001d44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d48:	3302      	adds	r3, #2
 8001d4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d4e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d52:	2b3f      	cmp	r3, #63	; 0x3f
 8001d54:	d9e1      	bls.n	8001d1a <LCD_Test+0x3aa>
  }


  UG_FillScreen(C_RED);
 8001d56:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d5a:	f003 fca7 	bl	80056ac <UG_FillScreen>
  UG_Update();
 8001d5e:	f005 fad1 	bl	8007304 <UG_Update>
  HAL_Delay(500);
 8001d62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d66:	f000 fbab 	bl	80024c0 <HAL_Delay>
  UG_FillScreen(C_GREEN);
 8001d6a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d6e:	f003 fc9d 	bl	80056ac <UG_FillScreen>
  UG_Update();
 8001d72:	f005 fac7 	bl	8007304 <UG_Update>
  HAL_Delay(500);
 8001d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d7a:	f000 fba1 	bl	80024c0 <HAL_Delay>
  UG_FillScreen(C_BLUE);
 8001d7e:	201f      	movs	r0, #31
 8001d80:	f003 fc94 	bl	80056ac <UG_FillScreen>
  UG_Update();
 8001d84:	f005 fabe 	bl	8007304 <UG_Update>
  HAL_Delay(500);
 8001d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d8c:	f000 fb98 	bl	80024c0 <HAL_Delay>
  UG_FillScreen(C_BLACK);
 8001d90:	2000      	movs	r0, #0
 8001d92:	f003 fc8b 	bl	80056ac <UG_FillScreen>
  UG_Update();
 8001d96:	f005 fab5 	bl	8007304 <UG_Update>
  HAL_Delay(500);
 8001d9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d9e:	f000 fb8f 	bl	80024c0 <HAL_Delay>

  clearTime();
 8001da2:	f7ff fda3 	bl	80018ec <clearTime>
  UG_FillScreen(C_WHITE);
 8001da6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001daa:	f003 fc7f 	bl	80056ac <UG_FillScreen>
  printTime();
 8001dae:	f7ff fda9 	bl	8001904 <printTime>
  LCD_PutStr(10, 5, "Fill", DEFAULT_FONT, C_RED, C_WHITE);
 8001db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	4bd6      	ldr	r3, [pc, #856]	; (8002118 <LCD_Test+0x7a8>)
 8001dc0:	4ad6      	ldr	r2, [pc, #856]	; (800211c <LCD_Test+0x7ac>)
 8001dc2:	2105      	movs	r1, #5
 8001dc4:	200a      	movs	r0, #10
 8001dc6:	f7ff fced 	bl	80017a4 <LCD_PutStr>
  UG_Update();
 8001dca:	f005 fa9b 	bl	8007304 <UG_Update>
  HAL_Delay(1000);
 8001dce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd2:	f000 fb75 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f003 fc68 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Font", DEFAULT_FONT, C_RED, C_BLACK);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4bcc      	ldr	r3, [pc, #816]	; (8002118 <LCD_Test+0x7a8>)
 8001de8:	4acd      	ldr	r2, [pc, #820]	; (8002120 <LCD_Test+0x7b0>)
 8001dea:	2105      	movs	r1, #5
 8001dec:	200a      	movs	r0, #10
 8001dee:	f7ff fcd9 	bl	80017a4 <LCD_PutStr>
  clearTime();
 8001df2:	f7ff fd7b 	bl	80018ec <clearTime>
  LCD_PutStr(10, 35, "Hello Steve!", DEFAULT_FONT, C_CYAN, C_BLACK);
 8001df6:	2300      	movs	r3, #0
 8001df8:	9301      	str	r3, [sp, #4]
 8001dfa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	4bc5      	ldr	r3, [pc, #788]	; (8002118 <LCD_Test+0x7a8>)
 8001e02:	4ac8      	ldr	r2, [pc, #800]	; (8002124 <LCD_Test+0x7b4>)
 8001e04:	2123      	movs	r1, #35	; 0x23
 8001e06:	200a      	movs	r0, #10
 8001e08:	f7ff fccc 	bl	80017a4 <LCD_PutStr>
  LCD_PutStr(10, 55, "Hello Steve!", DEFAULT_FONT, C_ORANGE_RED, C_BLACK);
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	9301      	str	r3, [sp, #4]
 8001e10:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4bc0      	ldr	r3, [pc, #768]	; (8002118 <LCD_Test+0x7a8>)
 8001e18:	4ac2      	ldr	r2, [pc, #776]	; (8002124 <LCD_Test+0x7b4>)
 8001e1a:	2137      	movs	r1, #55	; 0x37
 8001e1c:	200a      	movs	r0, #10
 8001e1e:	f7ff fcc1 	bl	80017a4 <LCD_PutStr>
  LCD_PutStr(10, 75, "Hello Steve!", DEFAULT_FONT, C_LIME_GREEN, C_BLACK);
 8001e22:	2300      	movs	r3, #0
 8001e24:	9301      	str	r3, [sp, #4]
 8001e26:	f243 6366 	movw	r3, #13926	; 0x3666
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	4bba      	ldr	r3, [pc, #744]	; (8002118 <LCD_Test+0x7a8>)
 8001e2e:	4abd      	ldr	r2, [pc, #756]	; (8002124 <LCD_Test+0x7b4>)
 8001e30:	214b      	movs	r1, #75	; 0x4b
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff fcb6 	bl	80017a4 <LCD_PutStr>
  LCD_PutStr(10, 95, "Hello Steve!", DEFAULT_FONT, C_HOT_PINK, C_BLACK);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9301      	str	r3, [sp, #4]
 8001e3c:	f64f 3356 	movw	r3, #64342	; 0xfb56
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	4bb5      	ldr	r3, [pc, #724]	; (8002118 <LCD_Test+0x7a8>)
 8001e44:	4ab7      	ldr	r2, [pc, #732]	; (8002124 <LCD_Test+0x7b4>)
 8001e46:	215f      	movs	r1, #95	; 0x5f
 8001e48:	200a      	movs	r0, #10
 8001e4a:	f7ff fcab 	bl	80017a4 <LCD_PutStr>
  UG_Update();
 8001e4e:	f005 fa59 	bl	8007304 <UG_Update>
  printTime();
 8001e52:	f7ff fd57 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8001e56:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e5a:	f000 fb31 	bl	80024c0 <HAL_Delay>

#if DEMO_FLASH_KB >=128
  UG_FillScreen(C_BLACK);
 8001e5e:	2000      	movs	r0, #0
 8001e60:	f003 fc24 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Big font", DEFAULT_FONT, C_RED, C_BLACK);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4baa      	ldr	r3, [pc, #680]	; (8002118 <LCD_Test+0x7a8>)
 8001e70:	4aad      	ldr	r2, [pc, #692]	; (8002128 <LCD_Test+0x7b8>)
 8001e72:	2105      	movs	r1, #5
 8001e74:	200a      	movs	r0, #10
 8001e76:	f7ff fc95 	bl	80017a4 <LCD_PutStr>
  clearTime();
 8001e7a:	f7ff fd37 	bl	80018ec <clearTime>
  LCD_PutStr(10, 35, "Hello", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001e7e:	2300      	movs	r3, #0
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	4ba8      	ldr	r3, [pc, #672]	; (800212c <LCD_Test+0x7bc>)
 8001e8a:	4aa9      	ldr	r2, [pc, #676]	; (8002130 <LCD_Test+0x7c0>)
 8001e8c:	2123      	movs	r1, #35	; 0x23
 8001e8e:	200a      	movs	r0, #10
 8001e90:	f7ff fc88 	bl	80017a4 <LCD_PutStr>
  LCD_PutStr(10, 80, "Steve!", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001e94:	2300      	movs	r3, #0
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4ba3      	ldr	r3, [pc, #652]	; (800212c <LCD_Test+0x7bc>)
 8001ea0:	4aa4      	ldr	r2, [pc, #656]	; (8002134 <LCD_Test+0x7c4>)
 8001ea2:	2150      	movs	r1, #80	; 0x50
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f7ff fc7d 	bl	80017a4 <LCD_PutStr>
  UG_Update();
 8001eaa:	f005 fa2b 	bl	8007304 <UG_Update>
  printTime();
 8001eae:	f7ff fd29 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8001eb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb6:	f000 fb03 	bl	80024c0 <HAL_Delay>
#endif

  UG_FillScreen(C_RED);
 8001eba:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ebe:	f003 fbf5 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Line", DEFAULT_FONT, C_YELLOW, C_RED);
 8001ec2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ec6:	9301      	str	r3, [sp, #4]
 8001ec8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	4b92      	ldr	r3, [pc, #584]	; (8002118 <LCD_Test+0x7a8>)
 8001ed0:	4a99      	ldr	r2, [pc, #612]	; (8002138 <LCD_Test+0x7c8>)
 8001ed2:	2105      	movs	r1, #5
 8001ed4:	200a      	movs	r0, #10
 8001ed6:	f7ff fc65 	bl	80017a4 <LCD_PutStr>
  clearTime();
 8001eda:	f7ff fd07 	bl	80018ec <clearTime>
  UG_DrawLine(10, 30, 10, 100, C_WHITE);
 8001ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	2364      	movs	r3, #100	; 0x64
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	211e      	movs	r1, #30
 8001eea:	200a      	movs	r0, #10
 8001eec:	f003 ff0c 	bl	8005d08 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 30, C_WHITE);
 8001ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	231e      	movs	r3, #30
 8001ef8:	2264      	movs	r2, #100	; 0x64
 8001efa:	211e      	movs	r1, #30
 8001efc:	200a      	movs	r0, #10
 8001efe:	f003 ff03 	bl	8005d08 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 100, C_WHITE);
 8001f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	2364      	movs	r3, #100	; 0x64
 8001f0a:	2264      	movs	r2, #100	; 0x64
 8001f0c:	211e      	movs	r1, #30
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f003 fefa 	bl	8005d08 <UG_DrawLine>
  UG_Update();
 8001f14:	f005 f9f6 	bl	8007304 <UG_Update>
  printTime();
 8001f18:	f7ff fcf4 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8001f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f20:	f000 face 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f24:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f28:	f003 fbc0 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f2c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	4b77      	ldr	r3, [pc, #476]	; (8002118 <LCD_Test+0x7a8>)
 8001f3a:	4a80      	ldr	r2, [pc, #512]	; (800213c <LCD_Test+0x7cc>)
 8001f3c:	2105      	movs	r1, #5
 8001f3e:	200a      	movs	r0, #10
 8001f40:	f7ff fc30 	bl	80017a4 <LCD_PutStr>
  clearTime();
 8001f44:	f7ff fcd2 	bl	80018ec <clearTime>
  UG_DrawFrame(10, 30, 100, 100, C_WHITE);
 8001f48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2364      	movs	r3, #100	; 0x64
 8001f50:	2264      	movs	r2, #100	; 0x64
 8001f52:	211e      	movs	r1, #30
 8001f54:	200a      	movs	r0, #10
 8001f56:	f003 fcb6 	bl	80058c6 <UG_DrawFrame>
  UG_Update();
 8001f5a:	f005 f9d3 	bl	8007304 <UG_Update>
  printTime();
 8001f5e:	f7ff fcd1 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8001f62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f66:	f000 faab 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f6a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f6e:	f003 fb9d 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f76:	9301      	str	r3, [sp, #4]
 8001f78:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f7c:	9300      	str	r3, [sp, #0]
 8001f7e:	4b66      	ldr	r3, [pc, #408]	; (8002118 <LCD_Test+0x7a8>)
 8001f80:	4a6f      	ldr	r2, [pc, #444]	; (8002140 <LCD_Test+0x7d0>)
 8001f82:	2105      	movs	r1, #5
 8001f84:	200a      	movs	r0, #10
 8001f86:	f7ff fc0d 	bl	80017a4 <LCD_PutStr>
  clearTime();
 8001f8a:	f7ff fcaf 	bl	80018ec <clearTime>
  UG_FillFrame(10, 30, 100, 100, C_WHITE);
 8001f8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	2364      	movs	r3, #100	; 0x64
 8001f96:	2264      	movs	r2, #100	; 0x64
 8001f98:	211e      	movs	r1, #30
 8001f9a:	200a      	movs	r0, #10
 8001f9c:	f003 fbaa 	bl	80056f4 <UG_FillFrame>
  UG_Update();
 8001fa0:	f005 f9b0 	bl	8007304 <UG_Update>
  printTime();
 8001fa4:	f7ff fcae 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8001fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fac:	f000 fa88 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001fb0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001fb4:	f003 fb7a 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Mesh.", DEFAULT_FONT, C_YELLOW, C_RED);
 8001fb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	4b54      	ldr	r3, [pc, #336]	; (8002118 <LCD_Test+0x7a8>)
 8001fc6:	4a5f      	ldr	r2, [pc, #380]	; (8002144 <LCD_Test+0x7d4>)
 8001fc8:	2105      	movs	r1, #5
 8001fca:	200a      	movs	r0, #10
 8001fcc:	f7ff fbea 	bl	80017a4 <LCD_PutStr>
  clearTime();
 8001fd0:	f7ff fc8c 	bl	80018ec <clearTime>
  UG_DrawMesh(10, 30, 100, 100, 5, C_WHITE);
 8001fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2305      	movs	r3, #5
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2364      	movs	r3, #100	; 0x64
 8001fe0:	2264      	movs	r2, #100	; 0x64
 8001fe2:	211e      	movs	r1, #30
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f003 fbf7 	bl	80057d8 <UG_DrawMesh>
  UG_Update();
 8001fea:	f005 f98b 	bl	8007304 <UG_Update>
  printTime();
 8001fee:	f7ff fc89 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8001ff2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff6:	f000 fa63 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001ffa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ffe:	f003 fb55 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002002:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	4b42      	ldr	r3, [pc, #264]	; (8002118 <LCD_Test+0x7a8>)
 8002010:	4a4d      	ldr	r2, [pc, #308]	; (8002148 <LCD_Test+0x7d8>)
 8002012:	2105      	movs	r1, #5
 8002014:	200a      	movs	r0, #10
 8002016:	f7ff fbc5 	bl	80017a4 <LCD_PutStr>
  clearTime();
 800201a:	f7ff fc67 	bl	80018ec <clearTime>
  UG_DrawCircle(45, 65, 30, C_WHITE);
 800201e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002022:	221e      	movs	r2, #30
 8002024:	2141      	movs	r1, #65	; 0x41
 8002026:	202d      	movs	r0, #45	; 0x2d
 8002028:	f003 fcae 	bl	8005988 <UG_DrawCircle>
  UG_Update();
 800202c:	f005 f96a 	bl	8007304 <UG_Update>
  printTime();
 8002030:	f7ff fc68 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8002034:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002038:	f000 fa42 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 800203c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002040:	f003 fb34 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002044:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <LCD_Test+0x7a8>)
 8002052:	4a3e      	ldr	r2, [pc, #248]	; (800214c <LCD_Test+0x7dc>)
 8002054:	2105      	movs	r1, #5
 8002056:	200a      	movs	r0, #10
 8002058:	f7ff fba4 	bl	80017a4 <LCD_PutStr>
  UG_Update();
 800205c:	f005 f952 	bl	8007304 <UG_Update>
  clearTime();
 8002060:	f7ff fc44 	bl	80018ec <clearTime>
  UG_FillCircle(45, 65, 30, C_WHITE);
 8002064:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002068:	221e      	movs	r2, #30
 800206a:	2141      	movs	r1, #65	; 0x41
 800206c:	202d      	movs	r0, #45	; 0x2d
 800206e:	f003 fd71 	bl	8005b54 <UG_FillCircle>
  UG_Update();
 8002072:	f005 f947 	bl	8007304 <UG_Update>
  printTime();
 8002076:	f7ff fc45 	bl	8001904 <printTime>
  HAL_Delay(1000);
 800207a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800207e:	f000 fa1f 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002082:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002086:	f003 fb11 	bl	80056ac <UG_FillScreen>
  LCD_PutStr(10, 5, "Triangle", DEFAULT_FONT, C_YELLOW, C_RED);
 800208a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	4b20      	ldr	r3, [pc, #128]	; (8002118 <LCD_Test+0x7a8>)
 8002098:	4a2d      	ldr	r2, [pc, #180]	; (8002150 <LCD_Test+0x7e0>)
 800209a:	2105      	movs	r1, #5
 800209c:	200a      	movs	r0, #10
 800209e:	f7ff fb81 	bl	80017a4 <LCD_PutStr>
  clearTime();
 80020a2:	f7ff fc23 	bl	80018ec <clearTime>
  UG_DrawTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 80020a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020aa:	9302      	str	r3, [sp, #8]
 80020ac:	2364      	movs	r3, #100	; 0x64
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2332      	movs	r3, #50	; 0x32
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	231e      	movs	r3, #30
 80020b6:	2264      	movs	r2, #100	; 0x64
 80020b8:	211e      	movs	r1, #30
 80020ba:	200a      	movs	r0, #10
 80020bc:	f003 ff04 	bl	8005ec8 <UG_DrawTriangle>
  UG_Update();
 80020c0:	f005 f920 	bl	8007304 <UG_Update>
  printTime();
 80020c4:	f7ff fc1e 	bl	8001904 <printTime>
  HAL_Delay(1000);
 80020c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020cc:	f000 f9f8 	bl	80024c0 <HAL_Delay>

  UG_FillScreen(C_RED);
 80020d0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020d4:	f003 faea 	bl	80056ac <UG_FillScreen>
  clearTime();
 80020d8:	f7ff fc08 	bl	80018ec <clearTime>
  LCD_PutStr(10, 5, "Filled Tri.", DEFAULT_FONT, C_YELLOW, C_RED);
 80020dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4b0b      	ldr	r3, [pc, #44]	; (8002118 <LCD_Test+0x7a8>)
 80020ea:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <LCD_Test+0x7e4>)
 80020ec:	2105      	movs	r1, #5
 80020ee:	200a      	movs	r0, #10
 80020f0:	f7ff fb58 	bl	80017a4 <LCD_PutStr>
  UG_FillTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 80020f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2364      	movs	r3, #100	; 0x64
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	2332      	movs	r3, #50	; 0x32
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	231e      	movs	r3, #30
 8002104:	2264      	movs	r2, #100	; 0x64
 8002106:	211e      	movs	r1, #30
 8002108:	200a      	movs	r0, #10
 800210a:	f003 ff17 	bl	8005f3c <UG_FillTriangle>
  UG_Update();
 800210e:	f005 f8f9 	bl	8007304 <UG_Update>
  printTime();
 8002112:	f7ff fbf7 	bl	8001904 <printTime>
 8002116:	e01f      	b.n	8002158 <LCD_Test+0x7e8>
 8002118:	08020974 	.word	0x08020974
 800211c:	0800dde0 	.word	0x0800dde0
 8002120:	0800dde8 	.word	0x0800dde8
 8002124:	0800ddf0 	.word	0x0800ddf0
 8002128:	0800de00 	.word	0x0800de00
 800212c:	0800e080 	.word	0x0800e080
 8002130:	0800de0c 	.word	0x0800de0c
 8002134:	0800de14 	.word	0x0800de14
 8002138:	0800de1c 	.word	0x0800de1c
 800213c:	0800de24 	.word	0x0800de24
 8002140:	0800de2c 	.word	0x0800de2c
 8002144:	0800de38 	.word	0x0800de38
 8002148:	0800de40 	.word	0x0800de40
 800214c:	0800de48 	.word	0x0800de48
 8002150:	0800de58 	.word	0x0800de58
 8002154:	0800de64 	.word	0x0800de64
  HAL_Delay(1000);
 8002158:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800215c:	f000 f9b0 	bl	80024c0 <HAL_Delay>

  clearTime();
 8002160:	f7ff fbc4 	bl	80018ec <clearTime>
  // Create the window
  UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);
 8002164:	4b8b      	ldr	r3, [pc, #556]	; (8002394 <LCD_Test+0xa24>)
 8002166:	220a      	movs	r2, #10
 8002168:	498b      	ldr	r1, [pc, #556]	; (8002398 <LCD_Test+0xa28>)
 800216a:	488c      	ldr	r0, [pc, #560]	; (800239c <LCD_Test+0xa2c>)
 800216c:	f005 faaa 	bl	80076c4 <UG_WindowCreate>
  // Window Title
  UG_WindowSetTitleText(&window_1, "Test Window");
 8002170:	498b      	ldr	r1, [pc, #556]	; (80023a0 <LCD_Test+0xa30>)
 8002172:	488a      	ldr	r0, [pc, #552]	; (800239c <LCD_Test+0xa2c>)
 8002174:	f005 fcfc 	bl	8007b70 <UG_WindowSetTitleText>
  UG_WindowSetTitleTextFont(&window_1, DEFAULT_FONT);
 8002178:	498a      	ldr	r1, [pc, #552]	; (80023a4 <LCD_Test+0xa34>)
 800217a:	4888      	ldr	r0, [pc, #544]	; (800239c <LCD_Test+0xa2c>)
 800217c:	f005 fd1a 	bl	8007bb4 <UG_WindowSetTitleTextFont>
  UG_WindowSetTitleHeight(&window_1, 15);
 8002180:	210f      	movs	r1, #15
 8002182:	4886      	ldr	r0, [pc, #536]	; (800239c <LCD_Test+0xa2c>)
 8002184:	f005 fd51 	bl	8007c2a <UG_WindowSetTitleHeight>
  UG_WindowSetXStart(&window_1, 0);
 8002188:	2100      	movs	r1, #0
 800218a:	4884      	ldr	r0, [pc, #528]	; (800239c <LCD_Test+0xa2c>)
 800218c:	f005 fd78 	bl	8007c80 <UG_WindowSetXStart>
  UG_WindowSetYStart(&window_1, 0);
 8002190:	2100      	movs	r1, #0
 8002192:	4882      	ldr	r0, [pc, #520]	; (800239c <LCD_Test+0xa2c>)
 8002194:	f005 fda6 	bl	8007ce4 <UG_WindowSetYStart>
  UG_WindowSetXEnd(&window_1, LCD_WIDTH-1);
 8002198:	21ef      	movs	r1, #239	; 0xef
 800219a:	4880      	ldr	r0, [pc, #512]	; (800239c <LCD_Test+0xa2c>)
 800219c:	f005 fdd4 	bl	8007d48 <UG_WindowSetXEnd>
  UG_WindowSetYEnd(&window_1, LCD_HEIGHT-1);
 80021a0:	21ef      	movs	r1, #239	; 0xef
 80021a2:	487e      	ldr	r0, [pc, #504]	; (800239c <LCD_Test+0xa2c>)
 80021a4:	f005 fe02 	bl	8007dac <UG_WindowSetYEnd>

  // Create Buttons
  UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 5, 5, 70, 35);
 80021a8:	2323      	movs	r3, #35	; 0x23
 80021aa:	9302      	str	r3, [sp, #8]
 80021ac:	2346      	movs	r3, #70	; 0x46
 80021ae:	9301      	str	r3, [sp, #4]
 80021b0:	2305      	movs	r3, #5
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2305      	movs	r3, #5
 80021b6:	2200      	movs	r2, #0
 80021b8:	497b      	ldr	r1, [pc, #492]	; (80023a8 <LCD_Test+0xa38>)
 80021ba:	4878      	ldr	r0, [pc, #480]	; (800239c <LCD_Test+0xa2c>)
 80021bc:	f006 f850 	bl	8008260 <UG_ButtonCreate>
  //Label Buttons
  UG_ButtonSetFont(&window_1,BTN_ID_0,DEFAULT_FONT);
 80021c0:	4a78      	ldr	r2, [pc, #480]	; (80023a4 <LCD_Test+0xa34>)
 80021c2:	2100      	movs	r1, #0
 80021c4:	4875      	ldr	r0, [pc, #468]	; (800239c <LCD_Test+0xa2c>)
 80021c6:	f006 f94b 	bl	8008460 <UG_ButtonSetFont>
  UG_ButtonSetForeColor(&window_1,BTN_ID_0, C_BLACK);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	4873      	ldr	r0, [pc, #460]	; (800239c <LCD_Test+0xa2c>)
 80021d0:	f006 f8c6 	bl	8008360 <UG_ButtonSetForeColor>
  UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_LIGHT_GRAY);
 80021d4:	f24d 629a 	movw	r2, #54938	; 0xd69a
 80021d8:	2100      	movs	r1, #0
 80021da:	4870      	ldr	r0, [pc, #448]	; (800239c <LCD_Test+0xa2c>)
 80021dc:	f006 f8eb 	bl	80083b6 <UG_ButtonSetBackColor>
  UG_ButtonSetText(&window_1,BTN_ID_0,"3D Btn");
 80021e0:	4a72      	ldr	r2, [pc, #456]	; (80023ac <LCD_Test+0xa3c>)
 80021e2:	2100      	movs	r1, #0
 80021e4:	486d      	ldr	r0, [pc, #436]	; (800239c <LCD_Test+0xa2c>)
 80021e6:	f006 f911 	bl	800840c <UG_ButtonSetText>

  // Create Textbox
  UG_TextboxCreate(&window_1, &textbox_1, TXB_ID_0, 10, 40, LCD_WIDTH-20, 65);
 80021ea:	2341      	movs	r3, #65	; 0x41
 80021ec:	9302      	str	r3, [sp, #8]
 80021ee:	23dc      	movs	r3, #220	; 0xdc
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	2328      	movs	r3, #40	; 0x28
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	230a      	movs	r3, #10
 80021f8:	2200      	movs	r2, #0
 80021fa:	496d      	ldr	r1, [pc, #436]	; (80023b0 <LCD_Test+0xa40>)
 80021fc:	4867      	ldr	r0, [pc, #412]	; (800239c <LCD_Test+0xa2c>)
 80021fe:	f006 fe03 	bl	8008e08 <UG_TextboxCreate>
  UG_TextboxSetFont(&window_1, TXB_ID_0, DEFAULT_FONT);
 8002202:	4a68      	ldr	r2, [pc, #416]	; (80023a4 <LCD_Test+0xa34>)
 8002204:	2100      	movs	r1, #0
 8002206:	4865      	ldr	r0, [pc, #404]	; (800239c <LCD_Test+0xa2c>)
 8002208:	f006 fef8 	bl	8008ffc <UG_TextboxSetFont>
  UG_TextboxSetText(&window_1, TXB_ID_0, "Some Text");
 800220c:	4a69      	ldr	r2, [pc, #420]	; (80023b4 <LCD_Test+0xa44>)
 800220e:	2100      	movs	r1, #0
 8002210:	4862      	ldr	r0, [pc, #392]	; (800239c <LCD_Test+0xa2c>)
 8002212:	f006 fec9 	bl	8008fa8 <UG_TextboxSetText>
  UG_TextboxSetBackColor(&window_1, TXB_ID_0, C_LIGHT_YELLOW);
 8002216:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 800221a:	2100      	movs	r1, #0
 800221c:	485f      	ldr	r0, [pc, #380]	; (800239c <LCD_Test+0xa2c>)
 800221e:	f006 fe98 	bl	8008f52 <UG_TextboxSetBackColor>
  UG_TextboxSetForeColor(&window_1, TXB_ID_0, C_BLACK);
 8002222:	2200      	movs	r2, #0
 8002224:	2100      	movs	r1, #0
 8002226:	485d      	ldr	r0, [pc, #372]	; (800239c <LCD_Test+0xa2c>)
 8002228:	f006 fe68 	bl	8008efc <UG_TextboxSetForeColor>
  UG_TextboxSetAlignment(&window_1, TXB_ID_0, ALIGN_CENTER);
 800222c:	2212      	movs	r2, #18
 800222e:	2100      	movs	r1, #0
 8002230:	485a      	ldr	r0, [pc, #360]	; (800239c <LCD_Test+0xa2c>)
 8002232:	f006 ff0d 	bl	8009050 <UG_TextboxSetAlignment>

  // Create progress bar
  UG_ProgressCreate(&window_1, &pgb, PGB_ID_0, 10, 72, LCD_WIDTH-20, 85);
 8002236:	2355      	movs	r3, #85	; 0x55
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	23dc      	movs	r3, #220	; 0xdc
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2348      	movs	r3, #72	; 0x48
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	230a      	movs	r3, #10
 8002244:	2200      	movs	r2, #0
 8002246:	495c      	ldr	r1, [pc, #368]	; (80023b8 <LCD_Test+0xa48>)
 8002248:	4854      	ldr	r0, [pc, #336]	; (800239c <LCD_Test+0xa2c>)
 800224a:	f006 fb51 	bl	80088f0 <UG_ProgressCreate>
  UG_ProgressSetForeColor(&window_1, PGB_ID_0, C_ROYAL_BLUE);
 800224e:	f244 325b 	movw	r2, #17243	; 0x435b
 8002252:	2100      	movs	r1, #0
 8002254:	4851      	ldr	r0, [pc, #324]	; (800239c <LCD_Test+0xa2c>)
 8002256:	f006 fbaf 	bl	80089b8 <UG_ProgressSetForeColor>

  UG_WindowShow(&window_1);
 800225a:	4850      	ldr	r0, [pc, #320]	; (800239c <LCD_Test+0xa2c>)
 800225c:	f005 fb00 	bl	8007860 <UG_WindowShow>
  UG_Update();
 8002260:	f005 f850 	bl	8007304 <UG_Update>
  printTime();
 8002264:	f7ff fb4e 	bl	8001904 <printTime>
  HAL_Delay(1000);
 8002268:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800226c:	f000 f928 	bl	80024c0 <HAL_Delay>
  uint32_t btn_time,progress_time,now;
  uint8_t i=0, j=0,u=0;
 8002270:	2300      	movs	r3, #0
 8002272:	75fb      	strb	r3, [r7, #23]
 8002274:	2300      	movs	r3, #0
 8002276:	75bb      	strb	r3, [r7, #22]
 8002278:	2300      	movs	r3, #0
 800227a:	757b      	strb	r3, [r7, #21]
  btn_time = progress_time = HAL_GetTick();
 800227c:	f000 f914 	bl	80024a8 <HAL_GetTick>
 8002280:	61b8      	str	r0, [r7, #24]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	61fb      	str	r3, [r7, #28]
  while(1){
    now=HAL_GetTick();
 8002286:	f000 f90f 	bl	80024a8 <HAL_GetTick>
 800228a:	6078      	str	r0, [r7, #4]
    if(now-btn_time>199){
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	2bc7      	cmp	r3, #199	; 0xc7
 8002294:	d916      	bls.n	80022c4 <LCD_Test+0x954>
      btn_time=now;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	61fb      	str	r3, [r7, #28]
      u=1;
 800229a:	2301      	movs	r3, #1
 800229c:	757b      	strb	r3, [r7, #21]
      i++;
 800229e:	7dfb      	ldrb	r3, [r7, #23]
 80022a0:	3301      	adds	r3, #1
 80022a2:	75fb      	strb	r3, [r7, #23]
      //UG_TouchUpdate((i&1 ? 10 : -1), (i&1 ? 31 : -1), OBJ_TOUCH_STATE_CHANGED | (i&1 ? OBJ_TOUCH_STATE_IS_PRESSED : 0));
      if(i==9){
 80022a4:	7dfb      	ldrb	r3, [r7, #23]
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	d109      	bne.n	80022be <LCD_Test+0x94e>
        UG_ButtonSetText(&window_1,BTN_ID_0,"2D Btn");
 80022aa:	4a44      	ldr	r2, [pc, #272]	; (80023bc <LCD_Test+0xa4c>)
 80022ac:	2100      	movs	r1, #0
 80022ae:	483b      	ldr	r0, [pc, #236]	; (800239c <LCD_Test+0xa2c>)
 80022b0:	f006 f8ac 	bl	800840c <UG_ButtonSetText>
        UG_ButtonSetStyle(&window_1, BTN_ID_0, BTN_STYLE_2D);
 80022b4:	2200      	movs	r2, #0
 80022b6:	2100      	movs	r1, #0
 80022b8:	4838      	ldr	r0, [pc, #224]	; (800239c <LCD_Test+0xa2c>)
 80022ba:	f006 f8fb 	bl	80084b4 <UG_ButtonSetStyle>
      }
      if(i>19){
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b13      	cmp	r3, #19
 80022c2:	d81e      	bhi.n	8002302 <LCD_Test+0x992>
        break;
      }
    }
    if(now-progress_time>19){
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b13      	cmp	r3, #19
 80022cc:	d911      	bls.n	80022f2 <LCD_Test+0x982>
      progress_time=now;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	61bb      	str	r3, [r7, #24]
      u=1;
 80022d2:	2301      	movs	r3, #1
 80022d4:	757b      	strb	r3, [r7, #21]
      if(++j>100)
 80022d6:	7dbb      	ldrb	r3, [r7, #22]
 80022d8:	3301      	adds	r3, #1
 80022da:	75bb      	strb	r3, [r7, #22]
 80022dc:	7dbb      	ldrb	r3, [r7, #22]
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <LCD_Test+0x976>
        j=0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	75bb      	strb	r3, [r7, #22]
      UG_ProgressSetProgress(&window_1, PGB_ID_0, j);
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	461a      	mov	r2, r3
 80022ea:	2100      	movs	r1, #0
 80022ec:	482b      	ldr	r0, [pc, #172]	; (800239c <LCD_Test+0xa2c>)
 80022ee:	f006 fb8e 	bl	8008a0e <UG_ProgressSetProgress>
    }
    if(u){
 80022f2:	7d7b      	ldrb	r3, [r7, #21]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0c6      	beq.n	8002286 <LCD_Test+0x916>
      u=0;
 80022f8:	2300      	movs	r3, #0
 80022fa:	757b      	strb	r3, [r7, #21]
      UG_Update();
 80022fc:	f005 f802 	bl	8007304 <UG_Update>
    now=HAL_GetTick();
 8002300:	e7c1      	b.n	8002286 <LCD_Test+0x916>
        break;
 8002302:	bf00      	nop
    }
  }
  UG_WindowHide(&window_1);
 8002304:	4825      	ldr	r0, [pc, #148]	; (800239c <LCD_Test+0xa2c>)
 8002306:	f005 fad1 	bl	80078ac <UG_WindowHide>
  UG_WindowDelete(&window_1);
 800230a:	4824      	ldr	r0, [pc, #144]	; (800239c <LCD_Test+0xa2c>)
 800230c:	f005 fa6a 	bl	80077e4 <UG_WindowDelete>
  UG_Update();
 8002310:	f004 fff8 	bl	8007304 <UG_Update>
  t = UG_FontGetTransparency();
 8002314:	f004 f87c 	bl	8006410 <UG_FontGetTransparency>
 8002318:	4603      	mov	r3, r0
 800231a:	72fb      	strb	r3, [r7, #11]
#if DEMO_FLASH_KB >=64
  UG_FillScreen(0x4b10);
 800231c:	f644 3010 	movw	r0, #19216	; 0x4b10
 8002320:	f003 f9c4 	bl	80056ac <UG_FillScreen>
  clearTime();
 8002324:	f7ff fae2 	bl	80018ec <clearTime>
  UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogo);
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <LCD_Test+0xa50>)
 800232a:	889b      	ldrh	r3, [r3, #4]
 800232c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002330:	0fda      	lsrs	r2, r3, #31
 8002332:	4413      	add	r3, r2
 8002334:	105b      	asrs	r3, r3, #1
 8002336:	b218      	sxth	r0, r3
 8002338:	4b21      	ldr	r3, [pc, #132]	; (80023c0 <LCD_Test+0xa50>)
 800233a:	88db      	ldrh	r3, [r3, #6]
 800233c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002340:	0fda      	lsrs	r2, r3, #31
 8002342:	4413      	add	r3, r2
 8002344:	105b      	asrs	r3, r3, #1
 8002346:	b21b      	sxth	r3, r3
 8002348:	4a1d      	ldr	r2, [pc, #116]	; (80023c0 <LCD_Test+0xa50>)
 800234a:	4619      	mov	r1, r3
 800234c:	f005 f89a 	bl	8007484 <UG_DrawBMP>
  UG_Update();
 8002350:	f004 ffd8 	bl	8007304 <UG_Update>
  printTime();
 8002354:	f7ff fad6 	bl	8001904 <printTime>
  UG_FontSetTransparency(0);
 8002358:	2000      	movs	r0, #0
 800235a:	f004 f847 	bl	80063ec <UG_FontSetTransparency>
  LCD_PutStr(10, 5, "Image", DEFAULT_FONT, C_YELLOW, C_RED);
 800235e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002362:	9301      	str	r3, [sp, #4]
 8002364:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <LCD_Test+0xa34>)
 800236c:	4a15      	ldr	r2, [pc, #84]	; (80023c4 <LCD_Test+0xa54>)
 800236e:	2105      	movs	r1, #5
 8002370:	200a      	movs	r0, #10
 8002372:	f7ff fa17 	bl	80017a4 <LCD_PutStr>
  UG_Update();
 8002376:	f004 ffc5 	bl	8007304 <UG_Update>
  UG_FontSetTransparency(t);
 800237a:	7afb      	ldrb	r3, [r7, #11]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f835 	bl	80063ec <UG_FontSetTransparency>
#endif
  HAL_Delay(1000);
 8002382:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002386:	f000 f89b 	bl	80024c0 <HAL_Delay>
}
 800238a:	bf00      	nop
 800238c:	3734      	adds	r7, #52	; 0x34
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	bf00      	nop
 8002394:	080023c9 	.word	0x080023c9
 8002398:	200003b8 	.word	0x200003b8
 800239c:	20000358 	.word	0x20000358
 80023a0:	0800de70 	.word	0x0800de70
 80023a4:	08020974 	.word	0x08020974
 80023a8:	2000038c 	.word	0x2000038c
 80023ac:	0800de7c 	.word	0x0800de7c
 80023b0:	200003a4 	.word	0x200003a4
 80023b4:	0800de84 	.word	0x0800de84
 80023b8:	200004f8 	.word	0x200004f8
 80023bc:	0800de90 	.word	0x0800de90
 80023c0:	20000020 	.word	0x20000020
 80023c4:	0800de98 	.word	0x0800de98

080023c8 <window_1_callback>:


static void window_1_callback(UG_MESSAGE *msg)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }
*/
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_Init+0x40>)
 80023e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_Init+0x40>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_Init+0x40>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 f94f 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240a:	200f      	movs	r0, #15
 800240c:	f000 f808 	bl	8002420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002410:	f7fe fbf8 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x54>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_InitTick+0x58>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002436:	fbb3 f3f1 	udiv	r3, r3, r1
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f967 	bl	8002712 <HAL_SYSTICK_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00e      	b.n	800246c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d80a      	bhi.n	800246a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002454:	2200      	movs	r2, #0
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800245c:	f000 f92f 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <HAL_InitTick+0x5c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000000 	.word	0x20000000
 8002478:	20000018 	.word	0x20000018
 800247c:	20000014 	.word	0x20000014

08002480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x20>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_IncTick+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_IncTick+0x24>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000018 	.word	0x20000018
 80024a4:	20000500 	.word	0x20000500

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000500 	.word	0x20000500

080024c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff ffee 	bl	80024a8 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024d8:	d005      	beq.n	80024e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_Delay+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e6:	bf00      	nop
 80024e8:	f7ff ffde 	bl	80024a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8f7      	bhi.n	80024e8 <HAL_Delay+0x28>
  {
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000018 	.word	0x20000018

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b086      	sub	sp, #24
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff feb6 	bl	80024a8 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e099      	b.n	800287c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 0201 	bic.w	r2, r2, #1
 8002766:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002768:	e00f      	b.n	800278a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800276a:	f7ff fe9d 	bl	80024a8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b05      	cmp	r3, #5
 8002776:	d908      	bls.n	800278a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2220      	movs	r2, #32
 800277c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2203      	movs	r2, #3
 8002782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e078      	b.n	800287c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1e8      	bne.n	800276a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027a0:	697a      	ldr	r2, [r7, #20]
 80027a2:	4b38      	ldr	r3, [pc, #224]	; (8002884 <HAL_DMA_Init+0x158>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a1b      	ldr	r3, [r3, #32]
 80027d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ec:	4313      	orrs	r3, r2
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	f023 0307 	bic.w	r3, r3, #7
 800280a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	697a      	ldr	r2, [r7, #20]
 8002812:	4313      	orrs	r3, r2
 8002814:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2b04      	cmp	r3, #4
 800281c:	d117      	bne.n	800284e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00e      	beq.n	800284e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f000 fb63 	bl	8002efc <DMA_CheckFifoParam>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800284a:	2301      	movs	r3, #1
 800284c:	e016      	b.n	800287c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	697a      	ldr	r2, [r7, #20]
 8002854:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fb1a 	bl	8002e90 <DMA_CalcBaseAndBitshift>
 800285c:	4603      	mov	r3, r0
 800285e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	f010803f 	.word	0xf010803f

08002888 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002896:	2300      	movs	r3, #0
 8002898:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d101      	bne.n	80028ae <HAL_DMA_Start_IT+0x26>
 80028aa:	2302      	movs	r3, #2
 80028ac:	e040      	b.n	8002930 <HAL_DMA_Start_IT+0xa8>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d12f      	bne.n	8002922 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2202      	movs	r2, #2
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2200      	movs	r2, #0
 80028ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	68b9      	ldr	r1, [r7, #8]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 faac 	bl	8002e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e0:	223f      	movs	r2, #63	; 0x3f
 80028e2:	409a      	lsls	r2, r3
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0216 	orr.w	r2, r2, #22
 80028f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0208 	orr.w	r2, r2, #8
 800290e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e005      	b.n	800292e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292a:	2302      	movs	r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800292e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002944:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002946:	f7ff fdaf 	bl	80024a8 <HAL_GetTick>
 800294a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d008      	beq.n	800296a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e052      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0216 	bic.w	r2, r2, #22
 8002978:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695a      	ldr	r2, [r3, #20]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002988:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d103      	bne.n	800299a <HAL_DMA_Abort+0x62>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002996:	2b00      	cmp	r3, #0
 8002998:	d007      	beq.n	80029aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f022 0208 	bic.w	r2, r2, #8
 80029a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029ba:	e013      	b.n	80029e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029bc:	f7ff fd74 	bl	80024a8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b05      	cmp	r3, #5
 80029c8:	d90c      	bls.n	80029e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2220      	movs	r2, #32
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2203      	movs	r2, #3
 80029d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e0:	2303      	movs	r3, #3
 80029e2:	e015      	b.n	8002a10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1e4      	bne.n	80029bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f6:	223f      	movs	r2, #63	; 0x3f
 80029f8:	409a      	lsls	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a0e:	2300      	movs	r3, #0
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2280      	movs	r2, #128	; 0x80
 8002a30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e00c      	b.n	8002a50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2205      	movs	r2, #5
 8002a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a68:	4b8e      	ldr	r3, [pc, #568]	; (8002ca4 <HAL_DMA_IRQHandler+0x248>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a8e      	ldr	r2, [pc, #568]	; (8002ca8 <HAL_DMA_IRQHandler+0x24c>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a7c:	693b      	ldr	r3, [r7, #16]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	2208      	movs	r2, #8
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d01a      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d013      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0204 	bic.w	r2, r2, #4
 8002aae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	409a      	lsls	r2, r3
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac0:	f043 0201 	orr.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002acc:	2201      	movs	r2, #1
 8002ace:	409a      	lsls	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d012      	beq.n	8002afe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aea:	2201      	movs	r2, #1
 8002aec:	409a      	lsls	r2, r3
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b02:	2204      	movs	r2, #4
 8002b04:	409a      	lsls	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d012      	beq.n	8002b34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00b      	beq.n	8002b34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b20:	2204      	movs	r2, #4
 8002b22:	409a      	lsls	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b2c:	f043 0204 	orr.w	r2, r3, #4
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2210      	movs	r2, #16
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d043      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d03c      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	2210      	movs	r2, #16
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d018      	beq.n	8002b9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d108      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d024      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
 8002b8a:	e01f      	b.n	8002bcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01b      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
 8002b9c:	e016      	b.n	8002bcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f022 0208 	bic.w	r2, r2, #8
 8002bba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 808f 	beq.w	8002cfc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f000 8087 	beq.w	8002cfc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	409a      	lsls	r2, r3
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b05      	cmp	r3, #5
 8002c04:	d136      	bne.n	8002c74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0216 	bic.w	r2, r2, #22
 8002c14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695a      	ldr	r2, [r3, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <HAL_DMA_IRQHandler+0x1da>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d007      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 0208 	bic.w	r2, r2, #8
 8002c44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	223f      	movs	r2, #63	; 0x3f
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2201      	movs	r2, #1
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d07e      	beq.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	4798      	blx	r3
        }
        return;
 8002c72:	e079      	b.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01d      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d10d      	bne.n	8002cac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d031      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	4798      	blx	r3
 8002ca0:	e02c      	b.n	8002cfc <HAL_DMA_IRQHandler+0x2a0>
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d023      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	4798      	blx	r3
 8002cbc:	e01e      	b.n	8002cfc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d10f      	bne.n	8002cec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0210 	bic.w	r2, r2, #16
 8002cda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d032      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d022      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2205      	movs	r2, #5
 8002d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0201 	bic.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d307      	bcc.n	8002d44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f2      	bne.n	8002d28 <HAL_DMA_IRQHandler+0x2cc>
 8002d42:	e000      	b.n	8002d46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d005      	beq.n	8002d6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	4798      	blx	r3
 8002d66:	e000      	b.n	8002d6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d68:	bf00      	nop
    }
  }
}
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	460b      	mov	r3, r1
 8002d7a:	607a      	str	r2, [r7, #4]
 8002d7c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_DMA_RegisterCallback+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e03d      	b.n	8002e0c <HAL_DMA_RegisterCallback+0x9c>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d12c      	bne.n	8002dfe <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002da4:	7afb      	ldrb	r3, [r7, #11]
 8002da6:	2b05      	cmp	r3, #5
 8002da8:	d826      	bhi.n	8002df8 <HAL_DMA_RegisterCallback+0x88>
 8002daa:	a201      	add	r2, pc, #4	; (adr r2, 8002db0 <HAL_DMA_RegisterCallback+0x40>)
 8002dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db0:	08002dc9 	.word	0x08002dc9
 8002db4:	08002dd1 	.word	0x08002dd1
 8002db8:	08002dd9 	.word	0x08002dd9
 8002dbc:	08002de1 	.word	0x08002de1
 8002dc0:	08002de9 	.word	0x08002de9
 8002dc4:	08002df1 	.word	0x08002df1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002dce:	e018      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002dd6:	e014      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002dde:	e010      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002de6:	e00c      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002dee:	e008      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002df6:	e004      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002dfc:	e001      	b.n	8002e02 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	371c      	adds	r7, #28
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e26:	b2db      	uxtb	r3, r3
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d108      	bne.n	8002e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e72:	e007      	b.n	8002e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	60da      	str	r2, [r3, #12]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	3b10      	subs	r3, #16
 8002ea0:	4a14      	ldr	r2, [pc, #80]	; (8002ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8002ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eaa:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b03      	cmp	r3, #3
 8002ebc:	d909      	bls.n	8002ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ec6:	f023 0303 	bic.w	r3, r3, #3
 8002eca:	1d1a      	adds	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed0:	e007      	b.n	8002ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	aaaaaaab 	.word	0xaaaaaaab
 8002ef8:	0800e078 	.word	0x0800e078

08002efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d11f      	bne.n	8002f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b03      	cmp	r3, #3
 8002f1a:	d856      	bhi.n	8002fca <DMA_CheckFifoParam+0xce>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <DMA_CheckFifoParam+0x28>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f35 	.word	0x08002f35
 8002f28:	08002f47 	.word	0x08002f47
 8002f2c:	08002f35 	.word	0x08002f35
 8002f30:	08002fcb 	.word	0x08002fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d046      	beq.n	8002fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f44:	e043      	b.n	8002fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f4e:	d140      	bne.n	8002fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f54:	e03d      	b.n	8002fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	d121      	bne.n	8002fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d837      	bhi.n	8002fd6 <DMA_CheckFifoParam+0xda>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <DMA_CheckFifoParam+0x70>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f83 	.word	0x08002f83
 8002f74:	08002f7d 	.word	0x08002f7d
 8002f78:	08002f95 	.word	0x08002f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f80:	e030      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d025      	beq.n	8002fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f92:	e022      	b.n	8002fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f9c:	d11f      	bne.n	8002fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002fa2:	e01c      	b.n	8002fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d903      	bls.n	8002fb2 <DMA_CheckFifoParam+0xb6>
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b03      	cmp	r3, #3
 8002fae:	d003      	beq.n	8002fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb0:	e018      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb6:	e015      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00e      	beq.n	8002fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fc8:	e00b      	b.n	8002fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8002fca:	bf00      	nop
 8002fcc:	e00a      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fce:	bf00      	nop
 8002fd0:	e008      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e006      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e004      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e002      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fde:	bf00      	nop
 8002fe0:	e000      	b.n	8002fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3714      	adds	r7, #20
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b089      	sub	sp, #36	; 0x24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ffe:	2300      	movs	r3, #0
 8003000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	e159      	b.n	80032c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003010:	2201      	movs	r2, #1
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	f040 8148 	bne.w	80032be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b01      	cmp	r3, #1
 8003038:	d005      	beq.n	8003046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003042:	2b02      	cmp	r3, #2
 8003044:	d130      	bne.n	80030a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	005b      	lsls	r3, r3, #1
 8003050:	2203      	movs	r2, #3
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68da      	ldr	r2, [r3, #12]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800307c:	2201      	movs	r2, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	091b      	lsrs	r3, r3, #4
 8003092:	f003 0201 	and.w	r2, r3, #1
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b03      	cmp	r3, #3
 80030b2:	d017      	beq.n	80030e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	4013      	ands	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d123      	bne.n	8003138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	08da      	lsrs	r2, r3, #3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3208      	adds	r2, #8
 80030f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220f      	movs	r2, #15
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	43db      	mvns	r3, r3
 800310e:	69ba      	ldr	r2, [r7, #24]
 8003110:	4013      	ands	r3, r2
 8003112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	691a      	ldr	r2, [r3, #16]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4313      	orrs	r3, r2
 8003128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	69b9      	ldr	r1, [r7, #24]
 8003134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	2203      	movs	r2, #3
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f003 0203 	and.w	r2, r3, #3
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	005b      	lsls	r3, r3, #1
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80a2 	beq.w	80032be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800317a:	2300      	movs	r3, #0
 800317c:	60fb      	str	r3, [r7, #12]
 800317e:	4b57      	ldr	r3, [pc, #348]	; (80032dc <HAL_GPIO_Init+0x2e8>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003182:	4a56      	ldr	r2, [pc, #344]	; (80032dc <HAL_GPIO_Init+0x2e8>)
 8003184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003188:	6453      	str	r3, [r2, #68]	; 0x44
 800318a:	4b54      	ldr	r3, [pc, #336]	; (80032dc <HAL_GPIO_Init+0x2e8>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003196:	4a52      	ldr	r2, [pc, #328]	; (80032e0 <HAL_GPIO_Init+0x2ec>)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	089b      	lsrs	r3, r3, #2
 800319c:	3302      	adds	r3, #2
 800319e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	220f      	movs	r2, #15
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43db      	mvns	r3, r3
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	4013      	ands	r3, r2
 80031b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a49      	ldr	r2, [pc, #292]	; (80032e4 <HAL_GPIO_Init+0x2f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_Init+0x202>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a48      	ldr	r2, [pc, #288]	; (80032e8 <HAL_GPIO_Init+0x2f4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0x1fe>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a47      	ldr	r2, [pc, #284]	; (80032ec <HAL_GPIO_Init+0x2f8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_Init+0x1fa>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a46      	ldr	r2, [pc, #280]	; (80032f0 <HAL_GPIO_Init+0x2fc>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x1f6>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a45      	ldr	r2, [pc, #276]	; (80032f4 <HAL_GPIO_Init+0x300>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_Init+0x1f2>
 80031e2:	2304      	movs	r3, #4
 80031e4:	e008      	b.n	80031f8 <HAL_GPIO_Init+0x204>
 80031e6:	2307      	movs	r3, #7
 80031e8:	e006      	b.n	80031f8 <HAL_GPIO_Init+0x204>
 80031ea:	2303      	movs	r3, #3
 80031ec:	e004      	b.n	80031f8 <HAL_GPIO_Init+0x204>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e002      	b.n	80031f8 <HAL_GPIO_Init+0x204>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e000      	b.n	80031f8 <HAL_GPIO_Init+0x204>
 80031f6:	2300      	movs	r3, #0
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	f002 0203 	and.w	r2, r2, #3
 80031fe:	0092      	lsls	r2, r2, #2
 8003200:	4093      	lsls	r3, r2
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4313      	orrs	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003208:	4935      	ldr	r1, [pc, #212]	; (80032e0 <HAL_GPIO_Init+0x2ec>)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	3302      	adds	r3, #2
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003216:	4b38      	ldr	r3, [pc, #224]	; (80032f8 <HAL_GPIO_Init+0x304>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	43db      	mvns	r3, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4013      	ands	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800323a:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <HAL_GPIO_Init+0x304>)
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003240:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <HAL_GPIO_Init+0x304>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <HAL_GPIO_Init+0x304>)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800326a:	4b23      	ldr	r3, [pc, #140]	; (80032f8 <HAL_GPIO_Init+0x304>)
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800328e:	4a1a      	ldr	r2, [pc, #104]	; (80032f8 <HAL_GPIO_Init+0x304>)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003294:	4b18      	ldr	r3, [pc, #96]	; (80032f8 <HAL_GPIO_Init+0x304>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	43db      	mvns	r3, r3
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032b8:	4a0f      	ldr	r2, [pc, #60]	; (80032f8 <HAL_GPIO_Init+0x304>)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3301      	adds	r3, #1
 80032c2:	61fb      	str	r3, [r7, #28]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	2b0f      	cmp	r3, #15
 80032c8:	f67f aea2 	bls.w	8003010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3724      	adds	r7, #36	; 0x24
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	40023800 	.word	0x40023800
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40020000 	.word	0x40020000
 80032e8:	40020400 	.word	0x40020400
 80032ec:	40020800 	.word	0x40020800
 80032f0:	40020c00 	.word	0x40020c00
 80032f4:	40021000 	.word	0x40021000
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	619a      	str	r2, [r3, #24]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800332e:	b480      	push	{r7}
 8003330:	b085      	sub	sp, #20
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4013      	ands	r3, r2
 8003346:	041a      	lsls	r2, r3, #16
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	43d9      	mvns	r1, r3
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	400b      	ands	r3, r1
 8003350:	431a      	orrs	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	619a      	str	r2, [r3, #24]
}
 8003356:	bf00      	nop
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003370:	695a      	ldr	r2, [r3, #20]
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	4013      	ands	r3, r2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d006      	beq.n	8003388 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800337a:	4a05      	ldr	r2, [pc, #20]	; (8003390 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003380:	88fb      	ldrh	r3, [r7, #6]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f806 	bl	8003394 <HAL_GPIO_EXTI_Callback>
  }
}
 8003388:	bf00      	nop
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40013c00 	.word	0x40013c00

08003394 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e267      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d075      	beq.n	80034b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ca:	4b88      	ldr	r3, [pc, #544]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 030c 	and.w	r3, r3, #12
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033d6:	4b85      	ldr	r3, [pc, #532]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033de:	2b08      	cmp	r3, #8
 80033e0:	d112      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033e2:	4b82      	ldr	r3, [pc, #520]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ee:	d10b      	bne.n	8003408 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f0:	4b7e      	ldr	r3, [pc, #504]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d05b      	beq.n	80034b4 <HAL_RCC_OscConfig+0x108>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d157      	bne.n	80034b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e242      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003410:	d106      	bne.n	8003420 <HAL_RCC_OscConfig+0x74>
 8003412:	4b76      	ldr	r3, [pc, #472]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a75      	ldr	r2, [pc, #468]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0x98>
 800342a:	4b70      	ldr	r3, [pc, #448]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a6f      	ldr	r2, [pc, #444]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b6d      	ldr	r3, [pc, #436]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a6c      	ldr	r2, [pc, #432]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xb0>
 8003444:	4b69      	ldr	r3, [pc, #420]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a68      	ldr	r2, [pc, #416]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b66      	ldr	r3, [pc, #408]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a65      	ldr	r2, [pc, #404]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003464:	f7ff f820 	bl	80024a8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800346c:	f7ff f81c 	bl	80024a8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e207      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xc0>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7ff f80c 	bl	80024a8 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003494:	f7ff f808 	bl	80024a8 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e1f3      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b51      	ldr	r3, [pc, #324]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0xe8>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d063      	beq.n	800358a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034c2:	4b4a      	ldr	r3, [pc, #296]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b47      	ldr	r3, [pc, #284]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1c7      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b3b      	ldr	r3, [pc, #236]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4937      	ldr	r1, [pc, #220]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e03a      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d020      	beq.n	800355e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <HAL_RCC_OscConfig+0x244>)
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003522:	f7fe ffc1 	bl	80024a8 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800352a:	f7fe ffbd 	bl	80024a8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e1a8      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800353c:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	4925      	ldr	r1, [pc, #148]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003558:	4313      	orrs	r3, r2
 800355a:	600b      	str	r3, [r1, #0]
 800355c:	e015      	b.n	800358a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCC_OscConfig+0x244>)
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003564:	f7fe ffa0 	bl	80024a8 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356c:	f7fe ff9c 	bl	80024a8 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e187      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f0      	bne.n	800356c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d036      	beq.n	8003604 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d016      	beq.n	80035cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800359e:	4b15      	ldr	r3, [pc, #84]	; (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a4:	f7fe ff80 	bl	80024a8 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe ff7c 	bl	80024a8 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e167      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCC_OscConfig+0x240>)
 80035c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0x200>
 80035ca:	e01b      	b.n	8003604 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035cc:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_OscConfig+0x248>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035d2:	f7fe ff69 	bl	80024a8 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	e00e      	b.n	80035f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035da:	f7fe ff65 	bl	80024a8 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d907      	bls.n	80035f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e150      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 80035ec:	40023800 	.word	0x40023800
 80035f0:	42470000 	.word	0x42470000
 80035f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	4b88      	ldr	r3, [pc, #544]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1ea      	bne.n	80035da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 8097 	beq.w	8003740 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003612:	2300      	movs	r3, #0
 8003614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003616:	4b81      	ldr	r3, [pc, #516]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10f      	bne.n	8003642 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003622:	2300      	movs	r3, #0
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	4b7d      	ldr	r3, [pc, #500]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	4a7c      	ldr	r2, [pc, #496]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800362c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003630:	6413      	str	r3, [r2, #64]	; 0x40
 8003632:	4b7a      	ldr	r3, [pc, #488]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363e:	2301      	movs	r3, #1
 8003640:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003642:	4b77      	ldr	r3, [pc, #476]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	2b00      	cmp	r3, #0
 800364c:	d118      	bne.n	8003680 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364e:	4b74      	ldr	r3, [pc, #464]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a73      	ldr	r2, [pc, #460]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003654:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003658:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365a:	f7fe ff25 	bl	80024a8 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003662:	f7fe ff21 	bl	80024a8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e10c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_OscConfig+0x474>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d106      	bne.n	8003696 <HAL_RCC_OscConfig+0x2ea>
 8003688:	4b64      	ldr	r3, [pc, #400]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a63      	ldr	r2, [pc, #396]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	e01c      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b05      	cmp	r3, #5
 800369c:	d10c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x30c>
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036a4:	f043 0304 	orr.w	r3, r3, #4
 80036a8:	6713      	str	r3, [r2, #112]	; 0x70
 80036aa:	4b5c      	ldr	r3, [pc, #368]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ae:	4a5b      	ldr	r2, [pc, #364]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6713      	str	r3, [r2, #112]	; 0x70
 80036b6:	e00b      	b.n	80036d0 <HAL_RCC_OscConfig+0x324>
 80036b8:	4b58      	ldr	r3, [pc, #352]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036bc:	4a57      	ldr	r2, [pc, #348]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036be:	f023 0301 	bic.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	; 0x70
 80036c4:	4b55      	ldr	r3, [pc, #340]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c8:	4a54      	ldr	r2, [pc, #336]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036ca:	f023 0304 	bic.w	r3, r3, #4
 80036ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d015      	beq.n	8003704 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fe fee6 	bl	80024a8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036de:	e00a      	b.n	80036f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036e0:	f7fe fee2 	bl	80024a8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e0cb      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036f6:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0ee      	beq.n	80036e0 <HAL_RCC_OscConfig+0x334>
 8003702:	e014      	b.n	800372e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003704:	f7fe fed0 	bl	80024a8 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800370a:	e00a      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370c:	f7fe fecc 	bl	80024a8 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	f241 3288 	movw	r2, #5000	; 0x1388
 800371a:	4293      	cmp	r3, r2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e0b5      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003722:	4b3e      	ldr	r3, [pc, #248]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1ee      	bne.n	800370c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800372e:	7dfb      	ldrb	r3, [r7, #23]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003734:	4b39      	ldr	r3, [pc, #228]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	4a38      	ldr	r2, [pc, #224]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800373a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800373e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b00      	cmp	r3, #0
 8003746:	f000 80a1 	beq.w	800388c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800374a:	4b34      	ldr	r3, [pc, #208]	; (800381c <HAL_RCC_OscConfig+0x470>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b08      	cmp	r3, #8
 8003754:	d05c      	beq.n	8003810 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d141      	bne.n	80037e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003764:	f7fe fea0 	bl	80024a8 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376c:	f7fe fe9c 	bl	80024a8 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e087      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377e:	4b27      	ldr	r3, [pc, #156]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	431a      	orrs	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a0:	085b      	lsrs	r3, r3, #1
 80037a2:	3b01      	subs	r3, #1
 80037a4:	041b      	lsls	r3, r3, #16
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	061b      	lsls	r3, r3, #24
 80037ae:	491b      	ldr	r1, [pc, #108]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b4:	4b1b      	ldr	r3, [pc, #108]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 80037b6:	2201      	movs	r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ba:	f7fe fe75 	bl	80024a8 <HAL_GetTick>
 80037be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037c0:	e008      	b.n	80037d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c2:	f7fe fe71 	bl	80024a8 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e05c      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d4:	4b11      	ldr	r3, [pc, #68]	; (800381c <HAL_RCC_OscConfig+0x470>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0f0      	beq.n	80037c2 <HAL_RCC_OscConfig+0x416>
 80037e0:	e054      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fe5e 	bl	80024a8 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fe5a 	bl	80024a8 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e045      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b06      	ldr	r3, [pc, #24]	; (800381c <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x444>
 800380e:	e03d      	b.n	800388c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	699b      	ldr	r3, [r3, #24]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d107      	bne.n	8003828 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e038      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
 800381c:	40023800 	.word	0x40023800
 8003820:	40007000 	.word	0x40007000
 8003824:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003828:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4ec>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d028      	beq.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d121      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800384e:	429a      	cmp	r2, r3
 8003850:	d11a      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003858:	4013      	ands	r3, r2
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003860:	4293      	cmp	r3, r2
 8003862:	d111      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386e:	085b      	lsrs	r3, r3, #1
 8003870:	3b01      	subs	r3, #1
 8003872:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d107      	bne.n	8003888 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003882:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e000      	b.n	800388e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800

0800389c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0cc      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038b0:	4b68      	ldr	r3, [pc, #416]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d90c      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b65      	ldr	r3, [pc, #404]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0b8      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d020      	beq.n	8003926 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038f0:	4b59      	ldr	r3, [pc, #356]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80038f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003908:	4b53      	ldr	r3, [pc, #332]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	4a52      	ldr	r2, [pc, #328]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800390e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003912:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003914:	4b50      	ldr	r3, [pc, #320]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	494d      	ldr	r1, [pc, #308]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	4313      	orrs	r3, r2
 8003924:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d044      	beq.n	80039bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800393a:	4b47      	ldr	r3, [pc, #284]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d119      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e07f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d003      	beq.n	800395a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003956:	2b03      	cmp	r3, #3
 8003958:	d107      	bne.n	800396a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800395a:	4b3f      	ldr	r3, [pc, #252]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800396a:	4b3b      	ldr	r3, [pc, #236]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e067      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800397a:	4b37      	ldr	r3, [pc, #220]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f023 0203 	bic.w	r2, r3, #3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4934      	ldr	r1, [pc, #208]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003988:	4313      	orrs	r3, r2
 800398a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800398c:	f7fe fd8c 	bl	80024a8 <HAL_GetTick>
 8003990:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe fd88 	bl	80024a8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e04f      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039aa:	4b2b      	ldr	r3, [pc, #172]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 020c 	and.w	r2, r3, #12
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d1eb      	bne.n	8003994 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039bc:	4b25      	ldr	r3, [pc, #148]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0307 	and.w	r3, r3, #7
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d20c      	bcs.n	80039e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b22      	ldr	r3, [pc, #136]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0307 	and.w	r3, r3, #7
 80039da:	683a      	ldr	r2, [r7, #0]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d001      	beq.n	80039e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e032      	b.n	8003a4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039f0:	4b19      	ldr	r3, [pc, #100]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	4916      	ldr	r1, [pc, #88]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	490e      	ldr	r1, [pc, #56]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a22:	f000 f821 	bl	8003a68 <HAL_RCC_GetSysClockFreq>
 8003a26:	4602      	mov	r2, r0
 8003a28:	4b0b      	ldr	r3, [pc, #44]	; (8003a58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	091b      	lsrs	r3, r3, #4
 8003a2e:	f003 030f 	and.w	r3, r3, #15
 8003a32:	490a      	ldr	r1, [pc, #40]	; (8003a5c <HAL_RCC_ClockConfig+0x1c0>)
 8003a34:	5ccb      	ldrb	r3, [r1, r3]
 8003a36:	fa22 f303 	lsr.w	r3, r2, r3
 8003a3a:	4a09      	ldr	r2, [pc, #36]	; (8003a60 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a3e:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fcec 	bl	8002420 <HAL_InitTick>

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023c00 	.word	0x40023c00
 8003a58:	40023800 	.word	0x40023800
 8003a5c:	0800e014 	.word	0x0800e014
 8003a60:	20000000 	.word	0x20000000
 8003a64:	20000014 	.word	0x20000014

08003a68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a6c:	b090      	sub	sp, #64	; 0x40
 8003a6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	637b      	str	r3, [r7, #52]	; 0x34
 8003a74:	2300      	movs	r3, #0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a78:	2300      	movs	r3, #0
 8003a7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a80:	4b59      	ldr	r3, [pc, #356]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 030c 	and.w	r3, r3, #12
 8003a88:	2b08      	cmp	r3, #8
 8003a8a:	d00d      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x40>
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	f200 80a1 	bhi.w	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x34>
 8003a96:	2b04      	cmp	r3, #4
 8003a98:	d003      	beq.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a9a:	e09b      	b.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003aa0:	e09b      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003aa2:	4b53      	ldr	r3, [pc, #332]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aa6:	e098      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aa8:	4b4f      	ldr	r3, [pc, #316]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ab2:	4b4d      	ldr	r3, [pc, #308]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d028      	beq.n	8003b10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003abe:	4b4a      	ldr	r3, [pc, #296]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	099b      	lsrs	r3, r3, #6
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	623b      	str	r3, [r7, #32]
 8003ac8:	627a      	str	r2, [r7, #36]	; 0x24
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad4:	fb03 f201 	mul.w	r2, r3, r1
 8003ad8:	2300      	movs	r3, #0
 8003ada:	fb00 f303 	mul.w	r3, r0, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	4a43      	ldr	r2, [pc, #268]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ae6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ae8:	460a      	mov	r2, r1
 8003aea:	62ba      	str	r2, [r7, #40]	; 0x28
 8003aec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aee:	4413      	add	r3, r2
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	2200      	movs	r2, #0
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	61fa      	str	r2, [r7, #28]
 8003afa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003afe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b02:	f7fc fbbd 	bl	8000280 <__aeabi_uldivmod>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0e:	e053      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	099b      	lsrs	r3, r3, #6
 8003b16:	2200      	movs	r2, #0
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	617a      	str	r2, [r7, #20]
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b22:	f04f 0b00 	mov.w	fp, #0
 8003b26:	4652      	mov	r2, sl
 8003b28:	465b      	mov	r3, fp
 8003b2a:	f04f 0000 	mov.w	r0, #0
 8003b2e:	f04f 0100 	mov.w	r1, #0
 8003b32:	0159      	lsls	r1, r3, #5
 8003b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b38:	0150      	lsls	r0, r2, #5
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b42:	eb63 090b 	sbc.w	r9, r3, fp
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b5a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b5e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b62:	f04f 0200 	mov.w	r2, #0
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	00eb      	lsls	r3, r5, #3
 8003b6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b70:	00e2      	lsls	r2, r4, #3
 8003b72:	4614      	mov	r4, r2
 8003b74:	461d      	mov	r5, r3
 8003b76:	eb14 030a 	adds.w	r3, r4, sl
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	eb45 030b 	adc.w	r3, r5, fp
 8003b80:	607b      	str	r3, [r7, #4]
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b8e:	4629      	mov	r1, r5
 8003b90:	028b      	lsls	r3, r1, #10
 8003b92:	4621      	mov	r1, r4
 8003b94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b98:	4621      	mov	r1, r4
 8003b9a:	028a      	lsls	r2, r1, #10
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	60fa      	str	r2, [r7, #12]
 8003ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bac:	f7fc fb68 	bl	8000280 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bb8:	4b0b      	ldr	r3, [pc, #44]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd2:	e002      	b.n	8003bda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_RCC_GetSysClockFreq+0x184>)
 8003bd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3740      	adds	r7, #64	; 0x40
 8003be0:	46bd      	mov	sp, r7
 8003be2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	017d7840 	.word	0x017d7840

08003bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000000 	.word	0x20000000

08003c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c10:	f7ff fff0 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b05      	ldr	r3, [pc, #20]	; (8003c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	0a9b      	lsrs	r3, r3, #10
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	0800e024 	.word	0x0800e024

08003c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c38:	f7ff ffdc 	bl	8003bf4 <HAL_RCC_GetHCLKFreq>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	0b5b      	lsrs	r3, r3, #13
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	4903      	ldr	r1, [pc, #12]	; (8003c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4a:	5ccb      	ldrb	r3, [r1, r3]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40023800 	.word	0x40023800
 8003c58:	0800e024 	.word	0x0800e024

08003c5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e07b      	b.n	8003d66 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d108      	bne.n	8003c88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c7e:	d009      	beq.n	8003c94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	61da      	str	r2, [r3, #28]
 8003c86:	e005      	b.n	8003c94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7fc ffd4 	bl	8000c5c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0302 	and.w	r3, r3, #2
 8003cf0:	431a      	orrs	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d18:	ea42 0103 	orr.w	r1, r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d20:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	0c1b      	lsrs	r3, r3, #16
 8003d32:	f003 0104 	and.w	r1, r3, #4
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0210 	and.w	r2, r3, #16
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	430a      	orrs	r2, r1
 8003d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3708      	adds	r7, #8
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b088      	sub	sp, #32
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	60b9      	str	r1, [r7, #8]
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_SPI_Transmit+0x22>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e126      	b.n	8003fde <HAL_SPI_Transmit+0x270>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d98:	f7fe fb86 	bl	80024a8 <HAL_GetTick>
 8003d9c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d002      	beq.n	8003db4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003dae:	2302      	movs	r3, #2
 8003db0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003db2:	e10b      	b.n	8003fcc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Transmit+0x52>
 8003dba:	88fb      	ldrh	r3, [r7, #6]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d102      	bne.n	8003dc6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dc4:	e102      	b.n	8003fcc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2203      	movs	r2, #3
 8003dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0c:	d10f      	bne.n	8003e2e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d007      	beq.n	8003e4c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e54:	d14b      	bne.n	8003eee <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0xf6>
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d13e      	bne.n	8003ee2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e68:	881a      	ldrh	r2, [r3, #0]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	1c9a      	adds	r2, r3, #2
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e88:	e02b      	b.n	8003ee2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d112      	bne.n	8003ebe <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9c:	881a      	ldrh	r2, [r3, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea8:	1c9a      	adds	r2, r3, #2
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ebc:	e011      	b.n	8003ee2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ebe:	f7fe faf3 	bl	80024a8 <HAL_GetTick>
 8003ec2:	4602      	mov	r2, r0
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d803      	bhi.n	8003ed6 <HAL_SPI_Transmit+0x168>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed4:	d102      	bne.n	8003edc <HAL_SPI_Transmit+0x16e>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d102      	bne.n	8003ee2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ee0:	e074      	b.n	8003fcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1ce      	bne.n	8003e8a <HAL_SPI_Transmit+0x11c>
 8003eec:	e04c      	b.n	8003f88 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_SPI_Transmit+0x18e>
 8003ef6:	8afb      	ldrh	r3, [r7, #22]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d140      	bne.n	8003f7e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	330c      	adds	r3, #12
 8003f06:	7812      	ldrb	r2, [r2, #0]
 8003f08:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f22:	e02c      	b.n	8003f7e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d113      	bne.n	8003f5a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	330c      	adds	r3, #12
 8003f3c:	7812      	ldrb	r2, [r2, #0]
 8003f3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f58:	e011      	b.n	8003f7e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f5a:	f7fe faa5 	bl	80024a8 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d803      	bhi.n	8003f72 <HAL_SPI_Transmit+0x204>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f70:	d102      	bne.n	8003f78 <HAL_SPI_Transmit+0x20a>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d102      	bne.n	8003f7e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f7c:	e026      	b.n	8003fcc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1cd      	bne.n	8003f24 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa09 	bl	80043a4 <SPI_EndRxTxTransaction>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10a      	bne.n	8003fbc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	77fb      	strb	r3, [r7, #31]
 8003fc8:	e000      	b.n	8003fcc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003fca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3720      	adds	r7, #32
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
	...

08003fe8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_SPI_Transmit_DMA+0x20>
 8004004:	2302      	movs	r3, #2
 8004006:	e09b      	b.n	8004140 <HAL_SPI_Transmit_DMA+0x158>
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d002      	beq.n	8004022 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800401c:	2302      	movs	r3, #2
 800401e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004020:	e089      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_SPI_Transmit_DMA+0x46>
 8004028:	88fb      	ldrh	r3, [r7, #6]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d102      	bne.n	8004034 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004032:	e080      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2203      	movs	r2, #3
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	88fa      	ldrh	r2, [r7, #6]
 800404c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2200      	movs	r2, #0
 8004058:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407a:	d10f      	bne.n	800409c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800408a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800409a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a0:	4a29      	ldr	r2, [pc, #164]	; (8004148 <HAL_SPI_Transmit_DMA+0x160>)
 80040a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a8:	4a28      	ldr	r2, [pc, #160]	; (800414c <HAL_SPI_Transmit_DMA+0x164>)
 80040aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b0:	4a27      	ldr	r2, [pc, #156]	; (8004150 <HAL_SPI_Transmit_DMA+0x168>)
 80040b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b8:	2200      	movs	r2, #0
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c4:	4619      	mov	r1, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	330c      	adds	r3, #12
 80040cc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040d4:	f7fe fbd8 	bl	8002888 <HAL_DMA_Start_IT>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e2:	f043 0210 	orr.w	r2, r3, #16
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040f6:	e01e      	b.n	8004136 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d007      	beq.n	8004116 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004114:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f042 0220 	orr.w	r2, r2, #32
 8004124:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f042 0202 	orr.w	r2, r2, #2
 8004134:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	08004239 	.word	0x08004239
 800414c:	08004191 	.word	0x08004191
 8004150:	08004255 	.word	0x08004255

08004154 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800419e:	f7fe f983 	bl	80024a8 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041b2:	d03b      	beq.n	800422c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685a      	ldr	r2, [r3, #4]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0220 	bic.w	r2, r2, #32
 80041c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f022 0202 	bic.w	r2, r2, #2
 80041d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	2164      	movs	r1, #100	; 0x64
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f000 f8e3 	bl	80043a4 <SPI_EndRxTxTransaction>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d005      	beq.n	80041f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e8:	f043 0220 	orr.w	r2, r3, #32
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	60fb      	str	r3, [r7, #12]
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2200      	movs	r2, #0
 8004212:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004224:	6978      	ldr	r0, [r7, #20]
 8004226:	f7ff ffa9 	bl	800417c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800422a:	e002      	b.n	8004232 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800422c:	6978      	ldr	r0, [r7, #20]
 800422e:	f7ff ff91 	bl	8004154 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f7ff ff8e 	bl	8004168 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800424c:	bf00      	nop
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0203 	bic.w	r2, r2, #3
 8004270:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004276:	f043 0210 	orr.w	r2, r3, #16
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2201      	movs	r2, #1
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff ff78 	bl	800417c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800428c:	bf00      	nop
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042a4:	f7fe f900 	bl	80024a8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ac:	1a9b      	subs	r3, r3, r2
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	4413      	add	r3, r2
 80042b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042b4:	f7fe f8f8 	bl	80024a8 <HAL_GetTick>
 80042b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042ba:	4b39      	ldr	r3, [pc, #228]	; (80043a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	0d1b      	lsrs	r3, r3, #20
 80042c2:	69fa      	ldr	r2, [r7, #28]
 80042c4:	fb02 f303 	mul.w	r3, r2, r3
 80042c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042ca:	e054      	b.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d2:	d050      	beq.n	8004376 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042d4:	f7fe f8e8 	bl	80024a8 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d13d      	bne.n	8004366 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004302:	d111      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800430c:	d004      	beq.n	8004318 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d107      	bne.n	8004328 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004326:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004330:	d10f      	bne.n	8004352 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004350:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e017      	b.n	8004396 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	3b01      	subs	r3, #1
 8004374:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4013      	ands	r3, r2
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	bf0c      	ite	eq
 8004386:	2301      	moveq	r3, #1
 8004388:	2300      	movne	r3, #0
 800438a:	b2db      	uxtb	r3, r3
 800438c:	461a      	mov	r2, r3
 800438e:	79fb      	ldrb	r3, [r7, #7]
 8004390:	429a      	cmp	r2, r3
 8004392:	d19b      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000000 	.word	0x20000000

080043a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b088      	sub	sp, #32
 80043a8:	af02      	add	r7, sp, #8
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043b0:	4b1b      	ldr	r3, [pc, #108]	; (8004420 <SPI_EndRxTxTransaction+0x7c>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a1b      	ldr	r2, [pc, #108]	; (8004424 <SPI_EndRxTxTransaction+0x80>)
 80043b6:	fba2 2303 	umull	r2, r3, r2, r3
 80043ba:	0d5b      	lsrs	r3, r3, #21
 80043bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ce:	d112      	bne.n	80043f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	2180      	movs	r1, #128	; 0x80
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f7ff ff5a 	bl	8004294 <SPI_WaitFlagStateUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d016      	beq.n	8004414 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	f043 0220 	orr.w	r2, r3, #32
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e00f      	b.n	8004416 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	3b01      	subs	r3, #1
 8004400:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d0f2      	beq.n	80043f6 <SPI_EndRxTxTransaction+0x52>
 8004410:	e000      	b.n	8004414 <SPI_EndRxTxTransaction+0x70>
        break;
 8004412:	bf00      	nop
  }

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000000 	.word	0x20000000
 8004424:	165e9f81 	.word	0x165e9f81

08004428 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e097      	b.n	800456c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f7fc fc7d 	bl	8000d50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800446c:	f023 0307 	bic.w	r3, r3, #7
 8004470:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f000 f879 	bl	8004574 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	f023 0303 	bic.w	r3, r3, #3
 80044ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	021b      	lsls	r3, r3, #8
 80044ba:	4313      	orrs	r3, r2
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80044c8:	f023 030c 	bic.w	r3, r3, #12
 80044cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	4313      	orrs	r3, r2
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	011a      	lsls	r2, r3, #4
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	031b      	lsls	r3, r3, #12
 80044f8:	4313      	orrs	r3, r2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800450e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	4313      	orrs	r3, r2
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2201      	movs	r2, #1
 800454e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2201      	movs	r2, #1
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004574:	b480      	push	{r7}
 8004576:	b085      	sub	sp, #20
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a34      	ldr	r2, [pc, #208]	; (8004658 <TIM_Base_SetConfig+0xe4>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d00f      	beq.n	80045ac <TIM_Base_SetConfig+0x38>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004592:	d00b      	beq.n	80045ac <TIM_Base_SetConfig+0x38>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a31      	ldr	r2, [pc, #196]	; (800465c <TIM_Base_SetConfig+0xe8>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d007      	beq.n	80045ac <TIM_Base_SetConfig+0x38>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a30      	ldr	r2, [pc, #192]	; (8004660 <TIM_Base_SetConfig+0xec>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_Base_SetConfig+0x38>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a2f      	ldr	r2, [pc, #188]	; (8004664 <TIM_Base_SetConfig+0xf0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d108      	bne.n	80045be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a25      	ldr	r2, [pc, #148]	; (8004658 <TIM_Base_SetConfig+0xe4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d01b      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045cc:	d017      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	4a22      	ldr	r2, [pc, #136]	; (800465c <TIM_Base_SetConfig+0xe8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a21      	ldr	r2, [pc, #132]	; (8004660 <TIM_Base_SetConfig+0xec>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00f      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a20      	ldr	r2, [pc, #128]	; (8004664 <TIM_Base_SetConfig+0xf0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00b      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a1f      	ldr	r2, [pc, #124]	; (8004668 <TIM_Base_SetConfig+0xf4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d007      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a1e      	ldr	r2, [pc, #120]	; (800466c <TIM_Base_SetConfig+0xf8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d003      	beq.n	80045fe <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a1d      	ldr	r2, [pc, #116]	; (8004670 <TIM_Base_SetConfig+0xfc>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d108      	bne.n	8004610 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	4313      	orrs	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <TIM_Base_SetConfig+0xe4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d103      	bne.n	8004644 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	615a      	str	r2, [r3, #20]
}
 800464a:	bf00      	nop
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000
 800466c:	40014400 	.word	0x40014400
 8004670:	40014800 	.word	0x40014800

08004674 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004684:	2b01      	cmp	r3, #1
 8004686:	d101      	bne.n	800468c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004688:	2302      	movs	r3, #2
 800468a:	e050      	b.n	800472e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a1c      	ldr	r2, [pc, #112]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d018      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d013      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a18      	ldr	r2, [pc, #96]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d00e      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a16      	ldr	r2, [pc, #88]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d009      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a15      	ldr	r2, [pc, #84]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d004      	beq.n	8004702 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a13      	ldr	r2, [pc, #76]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10c      	bne.n	800471c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004708:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	68ba      	ldr	r2, [r7, #8]
 8004710:	4313      	orrs	r3, r2
 8004712:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68ba      	ldr	r2, [r7, #8]
 800471a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40010000 	.word	0x40010000
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40000c00 	.word	0x40000c00
 800474c:	40014000 	.word	0x40014000

08004750 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e03f      	b.n	80047e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f7fc fb32 	bl	8000de0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004792:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fc7b 	bl	8005090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	691a      	ldr	r2, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3708      	adds	r7, #8
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0ba      	sub	sp, #232	; 0xe8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0x66>
 800483e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fb65 	bl	8004f1a <UART_Receive_IT>
      return;
 8004850:	e256      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80de 	beq.w	8004a18 <HAL_UART_IRQHandler+0x22c>
 800485c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800486c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80d1 	beq.w	8004a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xae>
 8004882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_UART_IRQHandler+0xd2>
 80048a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	f043 0202 	orr.w	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_UART_IRQHandler+0xf6>
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f043 0204 	orr.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d011      	beq.n	8004912 <HAL_UART_IRQHandler+0x126>
 80048ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d105      	bne.n	8004906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 81ed 	beq.w	8004cf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_UART_IRQHandler+0x14e>
 8004928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 faf0 	bl	8004f1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b40      	cmp	r3, #64	; 0x40
 8004946:	bf0c      	ite	eq
 8004948:	2301      	moveq	r3, #1
 800494a:	2300      	movne	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_UART_IRQHandler+0x17a>
 800495e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d04f      	beq.n	8004a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f9f8 	bl	8004d5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d141      	bne.n	80049fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	4a7d      	ldr	r2, [pc, #500]	; (8004bc8 <HAL_UART_IRQHandler+0x3dc>)
 80049d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe f81c 	bl	8002a18 <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e00e      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f99a 	bl	8004d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00a      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f996 	bl	8004d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e006      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f992 	bl	8004d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a12:	e170      	b.n	8004cf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	bf00      	nop
    return;
 8004a16:	e16e      	b.n	8004cf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 814a 	bne.w	8004cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8143 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 813c 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5e:	2b40      	cmp	r3, #64	; 0x40
 8004a60:	f040 80b4 	bne.w	8004bcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8140 	beq.w	8004cfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f080 8139 	bcs.w	8004cfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9a:	f000 8088 	beq.w	8004bae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	330c      	adds	r3, #12
 8004aa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004aac:	e853 3f00 	ldrex	r3, [r3]
 8004ab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	330c      	adds	r3, #12
 8004ac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004aca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1d9      	bne.n	8004a9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	3314      	adds	r3, #20
 8004af0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004af4:	e853 3f00 	ldrex	r3, [r3]
 8004af8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3314      	adds	r3, #20
 8004b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e1      	bne.n	8004aea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	3314      	adds	r3, #20
 8004b2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3314      	adds	r3, #20
 8004b46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e3      	bne.n	8004b26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	330c      	adds	r3, #12
 8004b72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b7e:	f023 0310 	bic.w	r3, r3, #16
 8004b82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	330c      	adds	r3, #12
 8004b8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b90:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e3      	bne.n	8004b6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fd fec5 	bl	8002938 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8c0 	bl	8004d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc4:	e099      	b.n	8004cfa <HAL_UART_IRQHandler+0x50e>
 8004bc6:	bf00      	nop
 8004bc8:	08004e23 	.word	0x08004e23
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 808b 	beq.w	8004cfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 8086 	beq.w	8004cfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	330c      	adds	r3, #12
 8004c12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c16:	647a      	str	r2, [r7, #68]	; 0x44
 8004c18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e3      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	3314      	adds	r3, #20
 8004c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c34:	e853 3f00 	ldrex	r3, [r3]
 8004c38:	623b      	str	r3, [r7, #32]
   return(result);
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	f023 0301 	bic.w	r3, r3, #1
 8004c40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3314      	adds	r3, #20
 8004c4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c4e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c56:	e841 2300 	strex	r3, r2, [r1]
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e3      	bne.n	8004c2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2220      	movs	r2, #32
 8004c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	330c      	adds	r3, #12
 8004c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0310 	bic.w	r3, r3, #16
 8004c86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	330c      	adds	r3, #12
 8004c90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c94:	61fa      	str	r2, [r7, #28]
 8004c96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	69b9      	ldr	r1, [r7, #24]
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e3      	bne.n	8004c70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f848 	bl	8004d44 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cb4:	e023      	b.n	8004cfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x4ea>
 8004cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8bb 	bl	8004e4a <UART_Transmit_IT>
    return;
 8004cd4:	e014      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00e      	beq.n	8004d00 <HAL_UART_IRQHandler+0x514>
 8004ce2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d008      	beq.n	8004d00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 f8fb 	bl	8004eea <UART_EndTransmit_IT>
    return;
 8004cf4:	e004      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
    return;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
      return;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
      return;
 8004cfe:	bf00      	nop
  }
}
 8004d00:	37e8      	adds	r7, #232	; 0xe8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop

08004d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b083      	sub	sp, #12
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b095      	sub	sp, #84	; 0x54
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	330c      	adds	r3, #12
 8004d82:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d84:	643a      	str	r2, [r7, #64]	; 0x40
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e5      	bne.n	8004d64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	3314      	adds	r3, #20
 8004d9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f023 0301 	bic.w	r3, r3, #1
 8004dae:	64bb      	str	r3, [r7, #72]	; 0x48
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004db8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e5      	bne.n	8004d98 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d119      	bne.n	8004e08 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	330c      	adds	r3, #12
 8004dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	f023 0310 	bic.w	r3, r3, #16
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	330c      	adds	r3, #12
 8004df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df4:	61ba      	str	r2, [r7, #24]
 8004df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6979      	ldr	r1, [r7, #20]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	613b      	str	r3, [r7, #16]
   return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e5      	bne.n	8004dd4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e16:	bf00      	nop
 8004e18:	3754      	adds	r7, #84	; 0x54
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr

08004e22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f7ff ff77 	bl	8004d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e42:	bf00      	nop
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e4a:	b480      	push	{r7}
 8004e4c:	b085      	sub	sp, #20
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b21      	cmp	r3, #33	; 0x21
 8004e5c:	d13e      	bne.n	8004edc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e66:	d114      	bne.n	8004e92 <UART_Transmit_IT+0x48>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d110      	bne.n	8004e92 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	881b      	ldrh	r3, [r3, #0]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	1c9a      	adds	r2, r3, #2
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	621a      	str	r2, [r3, #32]
 8004e90:	e008      	b.n	8004ea4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	1c59      	adds	r1, r3, #1
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6211      	str	r1, [r2, #32]
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10f      	bne.n	8004ed8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ec6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68da      	ldr	r2, [r3, #12]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2220      	movs	r2, #32
 8004f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7ff fefc 	bl	8004d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f1a:	b580      	push	{r7, lr}
 8004f1c:	b08c      	sub	sp, #48	; 0x30
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b22      	cmp	r3, #34	; 0x22
 8004f2c:	f040 80ab 	bne.w	8005086 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f38:	d117      	bne.n	8004f6a <UART_Receive_IT+0x50>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d113      	bne.n	8004f6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f58:	b29a      	uxth	r2, r3
 8004f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	1c9a      	adds	r2, r3, #2
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	629a      	str	r2, [r3, #40]	; 0x28
 8004f68:	e026      	b.n	8004fb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7c:	d007      	beq.n	8004f8e <UART_Receive_IT+0x74>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10a      	bne.n	8004f9c <UART_Receive_IT+0x82>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d106      	bne.n	8004f9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	e008      	b.n	8004fae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa8:	b2da      	uxtb	r2, r3
 8004faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d15a      	bne.n	8005082 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68da      	ldr	r2, [r3, #12]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 0220 	bic.w	r2, r2, #32
 8004fda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0201 	bic.w	r2, r2, #1
 8004ffa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005008:	2b01      	cmp	r3, #1
 800500a:	d135      	bne.n	8005078 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	330c      	adds	r3, #12
 8005018:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	613b      	str	r3, [r7, #16]
   return(result);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	627b      	str	r3, [r7, #36]	; 0x24
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	330c      	adds	r3, #12
 8005030:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005032:	623a      	str	r2, [r7, #32]
 8005034:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	69f9      	ldr	r1, [r7, #28]
 8005038:	6a3a      	ldr	r2, [r7, #32]
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e5      	bne.n	8005012 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0310 	and.w	r3, r3, #16
 8005050:	2b10      	cmp	r3, #16
 8005052:	d10a      	bne.n	800506a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	60fb      	str	r3, [r7, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800506e:	4619      	mov	r1, r3
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7ff fe67 	bl	8004d44 <HAL_UARTEx_RxEventCallback>
 8005076:	e002      	b.n	800507e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f7ff fe4f 	bl	8004d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e002      	b.n	8005088 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	e000      	b.n	8005088 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005086:	2302      	movs	r3, #2
  }
}
 8005088:	4618      	mov	r0, r3
 800508a:	3730      	adds	r7, #48	; 0x30
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005094:	b0c0      	sub	sp, #256	; 0x100
 8005096:	af00      	add	r7, sp, #0
 8005098:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800509c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ac:	68d9      	ldr	r1, [r3, #12]
 80050ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	ea40 0301 	orr.w	r3, r0, r1
 80050b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	431a      	orrs	r2, r3
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050e8:	f021 010c 	bic.w	r1, r1, #12
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050f6:	430b      	orrs	r3, r1
 80050f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	6999      	ldr	r1, [r3, #24]
 800510c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	ea40 0301 	orr.w	r3, r0, r1
 8005116:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	4b8f      	ldr	r3, [pc, #572]	; (800535c <UART_SetConfig+0x2cc>)
 8005120:	429a      	cmp	r2, r3
 8005122:	d005      	beq.n	8005130 <UART_SetConfig+0xa0>
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	4b8d      	ldr	r3, [pc, #564]	; (8005360 <UART_SetConfig+0x2d0>)
 800512c:	429a      	cmp	r2, r3
 800512e:	d104      	bne.n	800513a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005130:	f7fe fd80 	bl	8003c34 <HAL_RCC_GetPCLK2Freq>
 8005134:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005138:	e003      	b.n	8005142 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800513a:	f7fe fd67 	bl	8003c0c <HAL_RCC_GetPCLK1Freq>
 800513e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514c:	f040 810c 	bne.w	8005368 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005154:	2200      	movs	r2, #0
 8005156:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800515a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800515e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	1891      	adds	r1, r2, r2
 8005168:	65b9      	str	r1, [r7, #88]	; 0x58
 800516a:	415b      	adcs	r3, r3
 800516c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800516e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005172:	4621      	mov	r1, r4
 8005174:	eb12 0801 	adds.w	r8, r2, r1
 8005178:	4629      	mov	r1, r5
 800517a:	eb43 0901 	adc.w	r9, r3, r1
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800518a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800518e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005192:	4690      	mov	r8, r2
 8005194:	4699      	mov	r9, r3
 8005196:	4623      	mov	r3, r4
 8005198:	eb18 0303 	adds.w	r3, r8, r3
 800519c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051a0:	462b      	mov	r3, r5
 80051a2:	eb49 0303 	adc.w	r3, r9, r3
 80051a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80051b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80051ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80051be:	460b      	mov	r3, r1
 80051c0:	18db      	adds	r3, r3, r3
 80051c2:	653b      	str	r3, [r7, #80]	; 0x50
 80051c4:	4613      	mov	r3, r2
 80051c6:	eb42 0303 	adc.w	r3, r2, r3
 80051ca:	657b      	str	r3, [r7, #84]	; 0x54
 80051cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051d4:	f7fb f854 	bl	8000280 <__aeabi_uldivmod>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4b61      	ldr	r3, [pc, #388]	; (8005364 <UART_SetConfig+0x2d4>)
 80051de:	fba3 2302 	umull	r2, r3, r3, r2
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	011c      	lsls	r4, r3, #4
 80051e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051f8:	4642      	mov	r2, r8
 80051fa:	464b      	mov	r3, r9
 80051fc:	1891      	adds	r1, r2, r2
 80051fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8005200:	415b      	adcs	r3, r3
 8005202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005204:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005208:	4641      	mov	r1, r8
 800520a:	eb12 0a01 	adds.w	sl, r2, r1
 800520e:	4649      	mov	r1, r9
 8005210:	eb43 0b01 	adc.w	fp, r3, r1
 8005214:	f04f 0200 	mov.w	r2, #0
 8005218:	f04f 0300 	mov.w	r3, #0
 800521c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005220:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005228:	4692      	mov	sl, r2
 800522a:	469b      	mov	fp, r3
 800522c:	4643      	mov	r3, r8
 800522e:	eb1a 0303 	adds.w	r3, sl, r3
 8005232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005236:	464b      	mov	r3, r9
 8005238:	eb4b 0303 	adc.w	r3, fp, r3
 800523c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800524c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005250:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005254:	460b      	mov	r3, r1
 8005256:	18db      	adds	r3, r3, r3
 8005258:	643b      	str	r3, [r7, #64]	; 0x40
 800525a:	4613      	mov	r3, r2
 800525c:	eb42 0303 	adc.w	r3, r2, r3
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005266:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800526a:	f7fb f809 	bl	8000280 <__aeabi_uldivmod>
 800526e:	4602      	mov	r2, r0
 8005270:	460b      	mov	r3, r1
 8005272:	4611      	mov	r1, r2
 8005274:	4b3b      	ldr	r3, [pc, #236]	; (8005364 <UART_SetConfig+0x2d4>)
 8005276:	fba3 2301 	umull	r2, r3, r3, r1
 800527a:	095b      	lsrs	r3, r3, #5
 800527c:	2264      	movs	r2, #100	; 0x64
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	1acb      	subs	r3, r1, r3
 8005284:	00db      	lsls	r3, r3, #3
 8005286:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800528a:	4b36      	ldr	r3, [pc, #216]	; (8005364 <UART_SetConfig+0x2d4>)
 800528c:	fba3 2302 	umull	r2, r3, r3, r2
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	005b      	lsls	r3, r3, #1
 8005294:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005298:	441c      	add	r4, r3
 800529a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800529e:	2200      	movs	r2, #0
 80052a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052ac:	4642      	mov	r2, r8
 80052ae:	464b      	mov	r3, r9
 80052b0:	1891      	adds	r1, r2, r2
 80052b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80052b4:	415b      	adcs	r3, r3
 80052b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052bc:	4641      	mov	r1, r8
 80052be:	1851      	adds	r1, r2, r1
 80052c0:	6339      	str	r1, [r7, #48]	; 0x30
 80052c2:	4649      	mov	r1, r9
 80052c4:	414b      	adcs	r3, r1
 80052c6:	637b      	str	r3, [r7, #52]	; 0x34
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052d4:	4659      	mov	r1, fp
 80052d6:	00cb      	lsls	r3, r1, #3
 80052d8:	4651      	mov	r1, sl
 80052da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052de:	4651      	mov	r1, sl
 80052e0:	00ca      	lsls	r2, r1, #3
 80052e2:	4610      	mov	r0, r2
 80052e4:	4619      	mov	r1, r3
 80052e6:	4603      	mov	r3, r0
 80052e8:	4642      	mov	r2, r8
 80052ea:	189b      	adds	r3, r3, r2
 80052ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052f0:	464b      	mov	r3, r9
 80052f2:	460a      	mov	r2, r1
 80052f4:	eb42 0303 	adc.w	r3, r2, r3
 80052f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005308:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800530c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005310:	460b      	mov	r3, r1
 8005312:	18db      	adds	r3, r3, r3
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
 8005316:	4613      	mov	r3, r2
 8005318:	eb42 0303 	adc.w	r3, r2, r3
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800531e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005322:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005326:	f7fa ffab 	bl	8000280 <__aeabi_uldivmod>
 800532a:	4602      	mov	r2, r0
 800532c:	460b      	mov	r3, r1
 800532e:	4b0d      	ldr	r3, [pc, #52]	; (8005364 <UART_SetConfig+0x2d4>)
 8005330:	fba3 1302 	umull	r1, r3, r3, r2
 8005334:	095b      	lsrs	r3, r3, #5
 8005336:	2164      	movs	r1, #100	; 0x64
 8005338:	fb01 f303 	mul.w	r3, r1, r3
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	3332      	adds	r3, #50	; 0x32
 8005342:	4a08      	ldr	r2, [pc, #32]	; (8005364 <UART_SetConfig+0x2d4>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	f003 0207 	and.w	r2, r3, #7
 800534e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4422      	add	r2, r4
 8005356:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005358:	e105      	b.n	8005566 <UART_SetConfig+0x4d6>
 800535a:	bf00      	nop
 800535c:	40011000 	.word	0x40011000
 8005360:	40011400 	.word	0x40011400
 8005364:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800536c:	2200      	movs	r2, #0
 800536e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005372:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005376:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800537a:	4642      	mov	r2, r8
 800537c:	464b      	mov	r3, r9
 800537e:	1891      	adds	r1, r2, r2
 8005380:	6239      	str	r1, [r7, #32]
 8005382:	415b      	adcs	r3, r3
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
 8005386:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800538a:	4641      	mov	r1, r8
 800538c:	1854      	adds	r4, r2, r1
 800538e:	4649      	mov	r1, r9
 8005390:	eb43 0501 	adc.w	r5, r3, r1
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	00eb      	lsls	r3, r5, #3
 800539e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053a2:	00e2      	lsls	r2, r4, #3
 80053a4:	4614      	mov	r4, r2
 80053a6:	461d      	mov	r5, r3
 80053a8:	4643      	mov	r3, r8
 80053aa:	18e3      	adds	r3, r4, r3
 80053ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80053b0:	464b      	mov	r3, r9
 80053b2:	eb45 0303 	adc.w	r3, r5, r3
 80053b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80053ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	f04f 0300 	mov.w	r3, #0
 80053d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053d6:	4629      	mov	r1, r5
 80053d8:	008b      	lsls	r3, r1, #2
 80053da:	4621      	mov	r1, r4
 80053dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053e0:	4621      	mov	r1, r4
 80053e2:	008a      	lsls	r2, r1, #2
 80053e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053e8:	f7fa ff4a 	bl	8000280 <__aeabi_uldivmod>
 80053ec:	4602      	mov	r2, r0
 80053ee:	460b      	mov	r3, r1
 80053f0:	4b60      	ldr	r3, [pc, #384]	; (8005574 <UART_SetConfig+0x4e4>)
 80053f2:	fba3 2302 	umull	r2, r3, r3, r2
 80053f6:	095b      	lsrs	r3, r3, #5
 80053f8:	011c      	lsls	r4, r3, #4
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005404:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005408:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800540c:	4642      	mov	r2, r8
 800540e:	464b      	mov	r3, r9
 8005410:	1891      	adds	r1, r2, r2
 8005412:	61b9      	str	r1, [r7, #24]
 8005414:	415b      	adcs	r3, r3
 8005416:	61fb      	str	r3, [r7, #28]
 8005418:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800541c:	4641      	mov	r1, r8
 800541e:	1851      	adds	r1, r2, r1
 8005420:	6139      	str	r1, [r7, #16]
 8005422:	4649      	mov	r1, r9
 8005424:	414b      	adcs	r3, r1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	f04f 0200 	mov.w	r2, #0
 800542c:	f04f 0300 	mov.w	r3, #0
 8005430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005434:	4659      	mov	r1, fp
 8005436:	00cb      	lsls	r3, r1, #3
 8005438:	4651      	mov	r1, sl
 800543a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543e:	4651      	mov	r1, sl
 8005440:	00ca      	lsls	r2, r1, #3
 8005442:	4610      	mov	r0, r2
 8005444:	4619      	mov	r1, r3
 8005446:	4603      	mov	r3, r0
 8005448:	4642      	mov	r2, r8
 800544a:	189b      	adds	r3, r3, r2
 800544c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005450:	464b      	mov	r3, r9
 8005452:	460a      	mov	r2, r1
 8005454:	eb42 0303 	adc.w	r3, r2, r3
 8005458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	67bb      	str	r3, [r7, #120]	; 0x78
 8005466:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005474:	4649      	mov	r1, r9
 8005476:	008b      	lsls	r3, r1, #2
 8005478:	4641      	mov	r1, r8
 800547a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800547e:	4641      	mov	r1, r8
 8005480:	008a      	lsls	r2, r1, #2
 8005482:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005486:	f7fa fefb 	bl	8000280 <__aeabi_uldivmod>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	4b39      	ldr	r3, [pc, #228]	; (8005574 <UART_SetConfig+0x4e4>)
 8005490:	fba3 1302 	umull	r1, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	2164      	movs	r1, #100	; 0x64
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	011b      	lsls	r3, r3, #4
 80054a0:	3332      	adds	r3, #50	; 0x32
 80054a2:	4a34      	ldr	r2, [pc, #208]	; (8005574 <UART_SetConfig+0x4e4>)
 80054a4:	fba2 2303 	umull	r2, r3, r2, r3
 80054a8:	095b      	lsrs	r3, r3, #5
 80054aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ae:	441c      	add	r4, r3
 80054b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054b4:	2200      	movs	r2, #0
 80054b6:	673b      	str	r3, [r7, #112]	; 0x70
 80054b8:	677a      	str	r2, [r7, #116]	; 0x74
 80054ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80054be:	4642      	mov	r2, r8
 80054c0:	464b      	mov	r3, r9
 80054c2:	1891      	adds	r1, r2, r2
 80054c4:	60b9      	str	r1, [r7, #8]
 80054c6:	415b      	adcs	r3, r3
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80054ce:	4641      	mov	r1, r8
 80054d0:	1851      	adds	r1, r2, r1
 80054d2:	6039      	str	r1, [r7, #0]
 80054d4:	4649      	mov	r1, r9
 80054d6:	414b      	adcs	r3, r1
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	f04f 0200 	mov.w	r2, #0
 80054de:	f04f 0300 	mov.w	r3, #0
 80054e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054e6:	4659      	mov	r1, fp
 80054e8:	00cb      	lsls	r3, r1, #3
 80054ea:	4651      	mov	r1, sl
 80054ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054f0:	4651      	mov	r1, sl
 80054f2:	00ca      	lsls	r2, r1, #3
 80054f4:	4610      	mov	r0, r2
 80054f6:	4619      	mov	r1, r3
 80054f8:	4603      	mov	r3, r0
 80054fa:	4642      	mov	r2, r8
 80054fc:	189b      	adds	r3, r3, r2
 80054fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005500:	464b      	mov	r3, r9
 8005502:	460a      	mov	r2, r1
 8005504:	eb42 0303 	adc.w	r3, r2, r3
 8005508:	66fb      	str	r3, [r7, #108]	; 0x6c
 800550a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	663b      	str	r3, [r7, #96]	; 0x60
 8005514:	667a      	str	r2, [r7, #100]	; 0x64
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005522:	4649      	mov	r1, r9
 8005524:	008b      	lsls	r3, r1, #2
 8005526:	4641      	mov	r1, r8
 8005528:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552c:	4641      	mov	r1, r8
 800552e:	008a      	lsls	r2, r1, #2
 8005530:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005534:	f7fa fea4 	bl	8000280 <__aeabi_uldivmod>
 8005538:	4602      	mov	r2, r0
 800553a:	460b      	mov	r3, r1
 800553c:	4b0d      	ldr	r3, [pc, #52]	; (8005574 <UART_SetConfig+0x4e4>)
 800553e:	fba3 1302 	umull	r1, r3, r3, r2
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2164      	movs	r1, #100	; 0x64
 8005546:	fb01 f303 	mul.w	r3, r1, r3
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	3332      	adds	r3, #50	; 0x32
 8005550:	4a08      	ldr	r2, [pc, #32]	; (8005574 <UART_SetConfig+0x4e4>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f003 020f 	and.w	r2, r3, #15
 800555c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4422      	add	r2, r4
 8005564:	609a      	str	r2, [r3, #8]
}
 8005566:	bf00      	nop
 8005568:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800556c:	46bd      	mov	sp, r7
 800556e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005572:	bf00      	nop
 8005574:	51eb851f 	.word	0x51eb851f

08005578 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	1c5a      	adds	r2, r3, #1
 8005584:	607a      	str	r2, [r7, #4]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800558a:	89fb      	ldrh	r3, [r7, #14]
 800558c:	021b      	lsls	r3, r3, #8
 800558e:	b21a      	sxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	781b      	ldrb	r3, [r3, #0]
 8005594:	b21b      	sxth	r3, r3
 8005596:	4313      	orrs	r3, r2
 8005598:	b21b      	sxth	r3, r3
 800559a:	b29b      	uxth	r3, r3
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2201      	movs	r2, #1
 80055bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800560a:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005612:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e010      	b.n	8005654 <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	3307      	adds	r3, #7
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	3307      	adds	r3, #7
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	2200      	movs	r2, #0
 800564c:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	3301      	adds	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	2b03      	cmp	r3, #3
 8005658:	d9eb      	bls.n	8005632 <UG_Init+0x8a>
   }

   gui = g;
 800565a:	4a05      	ldr	r2, [pc, #20]	; (8005670 <UG_Init+0xc8>)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6013      	str	r3, [r2, #0]
   return 1;
 8005660:	2301      	movs	r3, #1
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20000504 	.word	0x20000504

08005674 <UG_GetGUI>:
   gui = g;
   return 1;
}

UG_GUI* UG_GetGUI( void )
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
   return gui;
 8005678:	4b03      	ldr	r3, [pc, #12]	; (8005688 <UG_GetGUI+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000504 	.word	0x20000504

0800568c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <UG_FontSelect+0x1c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	611a      	str	r2, [r3, #16]
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	20000504 	.word	0x20000504

080056ac <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af02      	add	r7, sp, #8
 80056b2:	4603      	mov	r3, r0
 80056b4:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 80056b6:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <UG_FillScreen+0x44>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	3b01      	subs	r3, #1
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	b21a      	sxth	r2, r3
 80056c8:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <UG_FillScreen+0x44>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	b219      	sxth	r1, r3
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	9300      	str	r3, [sp, #0]
 80056de:	460b      	mov	r3, r1
 80056e0:	2100      	movs	r1, #0
 80056e2:	2000      	movs	r0, #0
 80056e4:	f000 f806 	bl	80056f4 <UG_FillFrame>
}
 80056e8:	bf00      	nop
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	20000504 	.word	0x20000504

080056f4 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80056f4:	b5b0      	push	{r4, r5, r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	4604      	mov	r4, r0
 80056fc:	4608      	mov	r0, r1
 80056fe:	4611      	mov	r1, r2
 8005700:	461a      	mov	r2, r3
 8005702:	4623      	mov	r3, r4
 8005704:	80fb      	strh	r3, [r7, #6]
 8005706:	4603      	mov	r3, r0
 8005708:	80bb      	strh	r3, [r7, #4]
 800570a:	460b      	mov	r3, r1
 800570c:	807b      	strh	r3, [r7, #2]
 800570e:	4613      	mov	r3, r2
 8005710:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8005712:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005716:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800571a:	429a      	cmp	r2, r3
 800571c:	da05      	bge.n	800572a <UG_FillFrame+0x36>
     swap(x1,x2);
 800571e:	88fb      	ldrh	r3, [r7, #6]
 8005720:	817b      	strh	r3, [r7, #10]
 8005722:	887b      	ldrh	r3, [r7, #2]
 8005724:	80fb      	strh	r3, [r7, #6]
 8005726:	897b      	ldrh	r3, [r7, #10]
 8005728:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800572a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800572e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005732:	429a      	cmp	r2, r3
 8005734:	da05      	bge.n	8005742 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8005736:	88bb      	ldrh	r3, [r7, #4]
 8005738:	813b      	strh	r3, [r7, #8]
 800573a:	883b      	ldrh	r3, [r7, #0]
 800573c:	80bb      	strh	r3, [r7, #4]
 800573e:	893b      	ldrh	r3, [r7, #8]
 8005740:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8005742:	4b24      	ldr	r3, [pc, #144]	; (80057d4 <UG_FillFrame+0xe0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800574a:	f003 0302 	and.w	r3, r3, #2
 800574e:	2b00      	cmp	r3, #0
 8005750:	d012      	beq.n	8005778 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005752:	4b20      	ldr	r3, [pc, #128]	; (80057d4 <UG_FillFrame+0xe0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005758:	461d      	mov	r5, r3
 800575a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800575e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005762:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005766:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800576a:	8c3b      	ldrh	r3, [r7, #32]
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	4623      	mov	r3, r4
 8005770:	47a8      	blx	r5
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d028      	beq.n	80057ca <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8005778:	88bb      	ldrh	r3, [r7, #4]
 800577a:	81bb      	strh	r3, [r7, #12]
 800577c:	e01e      	b.n	80057bc <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	81fb      	strh	r3, [r7, #14]
 8005782:	e00f      	b.n	80057a4 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8005784:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <UG_FillFrame+0xe0>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	8c3a      	ldrh	r2, [r7, #32]
 800578e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005792:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005796:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8005798:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800579c:	b29b      	uxth	r3, r3
 800579e:	3301      	adds	r3, #1
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	81fb      	strh	r3, [r7, #14]
 80057a4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80057a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	dde9      	ble.n	8005784 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80057b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3301      	adds	r3, #1
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	81bb      	strh	r3, [r7, #12]
 80057bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80057c0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	ddda      	ble.n	800577e <UG_FillFrame+0x8a>
 80057c8:	e000      	b.n	80057cc <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80057ca:	bf00      	nop
      }
   }
}
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bdb0      	pop	{r4, r5, r7, pc}
 80057d2:	bf00      	nop
 80057d4:	20000504 	.word	0x20000504

080057d8 <UG_DrawMesh>:
     x++;
   }
}

void UG_DrawMesh( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_U16 spacing, UG_COLOR c )
{
 80057d8:	b590      	push	{r4, r7, lr}
 80057da:	b087      	sub	sp, #28
 80057dc:	af02      	add	r7, sp, #8
 80057de:	4604      	mov	r4, r0
 80057e0:	4608      	mov	r0, r1
 80057e2:	4611      	mov	r1, r2
 80057e4:	461a      	mov	r2, r3
 80057e6:	4623      	mov	r3, r4
 80057e8:	80fb      	strh	r3, [r7, #6]
 80057ea:	4603      	mov	r3, r0
 80057ec:	80bb      	strh	r3, [r7, #4]
 80057ee:	460b      	mov	r3, r1
 80057f0:	807b      	strh	r3, [r7, #2]
 80057f2:	4613      	mov	r3, r2
 80057f4:	803b      	strh	r3, [r7, #0]
   UG_U16 p;

   if ( x2 < x1 )
 80057f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057fe:	429a      	cmp	r2, r3
 8005800:	da05      	bge.n	800580e <UG_DrawMesh+0x36>
     swap(x1,x2);
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	81bb      	strh	r3, [r7, #12]
 8005806:	887b      	ldrh	r3, [r7, #2]
 8005808:	80fb      	strh	r3, [r7, #6]
 800580a:	89bb      	ldrh	r3, [r7, #12]
 800580c:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800580e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005812:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005816:	429a      	cmp	r2, r3
 8005818:	da05      	bge.n	8005826 <UG_DrawMesh+0x4e>
     swap(y1,y2);
 800581a:	88bb      	ldrh	r3, [r7, #4]
 800581c:	817b      	strh	r3, [r7, #10]
 800581e:	883b      	ldrh	r3, [r7, #0]
 8005820:	80bb      	strh	r3, [r7, #4]
 8005822:	897b      	ldrh	r3, [r7, #10]
 8005824:	803b      	strh	r3, [r7, #0]

   for( p=y1; p<y2; p+=spacing )
 8005826:	88bb      	ldrh	r3, [r7, #4]
 8005828:	81fb      	strh	r3, [r7, #14]
 800582a:	e010      	b.n	800584e <UG_DrawMesh+0x76>
   {
     UG_DrawLine(x1, p, x2, p, c);
 800582c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005830:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005834:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005838:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800583c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	4623      	mov	r3, r4
 8005842:	f000 fa61 	bl	8005d08 <UG_DrawLine>
   for( p=y1; p<y2; p+=spacing )
 8005846:	89fa      	ldrh	r2, [r7, #14]
 8005848:	8c3b      	ldrh	r3, [r7, #32]
 800584a:	4413      	add	r3, r2
 800584c:	81fb      	strh	r3, [r7, #14]
 800584e:	89fa      	ldrh	r2, [r7, #14]
 8005850:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005854:	429a      	cmp	r2, r3
 8005856:	dbe9      	blt.n	800582c <UG_DrawMesh+0x54>
   }
   UG_DrawLine(x1, y2, x2, y2, c);
 8005858:	f9b7 4000 	ldrsh.w	r4, [r7]
 800585c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005860:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005864:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4623      	mov	r3, r4
 800586e:	f000 fa4b 	bl	8005d08 <UG_DrawLine>

   for( p=x1; p<x2; p+=spacing )
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	81fb      	strh	r3, [r7, #14]
 8005876:	e010      	b.n	800589a <UG_DrawMesh+0xc2>
   {
     UG_DrawLine(p, y1, p, y2, c);
 8005878:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800587c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005880:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005884:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005888:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800588a:	9300      	str	r3, [sp, #0]
 800588c:	4623      	mov	r3, r4
 800588e:	f000 fa3b 	bl	8005d08 <UG_DrawLine>
   for( p=x1; p<x2; p+=spacing )
 8005892:	89fa      	ldrh	r2, [r7, #14]
 8005894:	8c3b      	ldrh	r3, [r7, #32]
 8005896:	4413      	add	r3, r2
 8005898:	81fb      	strh	r3, [r7, #14]
 800589a:	89fa      	ldrh	r2, [r7, #14]
 800589c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	dbe9      	blt.n	8005878 <UG_DrawMesh+0xa0>
   }
   UG_DrawLine(x2, y1, x2, y2, c);
 80058a4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80058a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058b0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80058b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4623      	mov	r3, r4
 80058ba:	f000 fa25 	bl	8005d08 <UG_DrawLine>
}
 80058be:	bf00      	nop
 80058c0:	3714      	adds	r7, #20
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd90      	pop	{r4, r7, pc}

080058c6 <UG_DrawFrame>:

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80058c6:	b590      	push	{r4, r7, lr}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af02      	add	r7, sp, #8
 80058cc:	4604      	mov	r4, r0
 80058ce:	4608      	mov	r0, r1
 80058d0:	4611      	mov	r1, r2
 80058d2:	461a      	mov	r2, r3
 80058d4:	4623      	mov	r3, r4
 80058d6:	80fb      	strh	r3, [r7, #6]
 80058d8:	4603      	mov	r3, r0
 80058da:	80bb      	strh	r3, [r7, #4]
 80058dc:	460b      	mov	r3, r1
 80058de:	807b      	strh	r3, [r7, #2]
 80058e0:	4613      	mov	r3, r2
 80058e2:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 80058e4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80058e8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058ec:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058f4:	8b3b      	ldrh	r3, [r7, #24]
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	4623      	mov	r3, r4
 80058fa:	f000 fa05 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 80058fe:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005902:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005906:	f9b7 1000 	ldrsh.w	r1, [r7]
 800590a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800590e:	8b3b      	ldrh	r3, [r7, #24]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	4623      	mov	r3, r4
 8005914:	f000 f9f8 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8005918:	f9b7 4000 	ldrsh.w	r4, [r7]
 800591c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005920:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005924:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005928:	8b3b      	ldrh	r3, [r7, #24]
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	4623      	mov	r3, r4
 800592e:	f000 f9eb 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8005932:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005936:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800593a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800593e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005942:	8b3b      	ldrh	r3, [r7, #24]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	4623      	mov	r3, r4
 8005948:	f000 f9de 	bl	8005d08 <UG_DrawLine>
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	bd90      	pop	{r4, r7, pc}

08005954 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	4603      	mov	r3, r0
 800595c:	80fb      	strh	r3, [r7, #6]
 800595e:	460b      	mov	r3, r1
 8005960:	80bb      	strh	r3, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 8005966:	4b07      	ldr	r3, [pc, #28]	; (8005984 <UG_DrawPixel+0x30>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	887a      	ldrh	r2, [r7, #2]
 8005970:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005974:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005978:	4798      	blx	r3
}
 800597a:	bf00      	nop
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	20000504 	.word	0x20000504

08005988 <UG_DrawCircle>:

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005988:	b590      	push	{r4, r7, lr}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	4604      	mov	r4, r0
 8005990:	4608      	mov	r0, r1
 8005992:	4611      	mov	r1, r2
 8005994:	461a      	mov	r2, r3
 8005996:	4623      	mov	r3, r4
 8005998:	80fb      	strh	r3, [r7, #6]
 800599a:	4603      	mov	r3, r0
 800599c:	80bb      	strh	r3, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	807b      	strh	r3, [r7, #2]
 80059a2:	4613      	mov	r3, r2
 80059a4:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 80059a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f2c0 80c8 	blt.w	8005b40 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 80059b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f2c0 80c5 	blt.w	8005b44 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 80059ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f340 80c2 	ble.w	8005b48 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 80059c4:	887b      	ldrh	r3, [r7, #2]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f1c3 0301 	rsb	r3, r3, #1
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	827b      	strh	r3, [r7, #18]
   yd = 0;
 80059d2:	2300      	movs	r3, #0
 80059d4:	823b      	strh	r3, [r7, #16]
   e = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	81fb      	strh	r3, [r7, #14]
   x = r;
 80059da:	887b      	ldrh	r3, [r7, #2]
 80059dc:	82fb      	strh	r3, [r7, #22]
   y = 0;
 80059de:	2300      	movs	r3, #0
 80059e0:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 80059e2:	e0a5      	b.n	8005b30 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 80059e4:	4b5a      	ldr	r3, [pc, #360]	; (8005b50 <UG_DrawCircle+0x1c8>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	88f9      	ldrh	r1, [r7, #6]
 80059ee:	8afa      	ldrh	r2, [r7, #22]
 80059f0:	1a8a      	subs	r2, r1, r2
 80059f2:	b292      	uxth	r2, r2
 80059f4:	b210      	sxth	r0, r2
 80059f6:	88b9      	ldrh	r1, [r7, #4]
 80059f8:	8aba      	ldrh	r2, [r7, #20]
 80059fa:	440a      	add	r2, r1
 80059fc:	b292      	uxth	r2, r2
 80059fe:	b211      	sxth	r1, r2
 8005a00:	883a      	ldrh	r2, [r7, #0]
 8005a02:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8005a04:	4b52      	ldr	r3, [pc, #328]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	88f9      	ldrh	r1, [r7, #6]
 8005a0e:	8afa      	ldrh	r2, [r7, #22]
 8005a10:	1a8a      	subs	r2, r1, r2
 8005a12:	b292      	uxth	r2, r2
 8005a14:	b210      	sxth	r0, r2
 8005a16:	88b9      	ldrh	r1, [r7, #4]
 8005a18:	8aba      	ldrh	r2, [r7, #20]
 8005a1a:	1a8a      	subs	r2, r1, r2
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	b211      	sxth	r1, r2
 8005a20:	883a      	ldrh	r2, [r7, #0]
 8005a22:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8005a24:	4b4a      	ldr	r3, [pc, #296]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	88f9      	ldrh	r1, [r7, #6]
 8005a2e:	8afa      	ldrh	r2, [r7, #22]
 8005a30:	440a      	add	r2, r1
 8005a32:	b292      	uxth	r2, r2
 8005a34:	b210      	sxth	r0, r2
 8005a36:	88b9      	ldrh	r1, [r7, #4]
 8005a38:	8aba      	ldrh	r2, [r7, #20]
 8005a3a:	440a      	add	r2, r1
 8005a3c:	b292      	uxth	r2, r2
 8005a3e:	b211      	sxth	r1, r2
 8005a40:	883a      	ldrh	r2, [r7, #0]
 8005a42:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8005a44:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	88f9      	ldrh	r1, [r7, #6]
 8005a4e:	8afa      	ldrh	r2, [r7, #22]
 8005a50:	440a      	add	r2, r1
 8005a52:	b292      	uxth	r2, r2
 8005a54:	b210      	sxth	r0, r2
 8005a56:	88b9      	ldrh	r1, [r7, #4]
 8005a58:	8aba      	ldrh	r2, [r7, #20]
 8005a5a:	1a8a      	subs	r2, r1, r2
 8005a5c:	b292      	uxth	r2, r2
 8005a5e:	b211      	sxth	r1, r2
 8005a60:	883a      	ldrh	r2, [r7, #0]
 8005a62:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8005a64:	4b3a      	ldr	r3, [pc, #232]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	88f9      	ldrh	r1, [r7, #6]
 8005a6e:	8aba      	ldrh	r2, [r7, #20]
 8005a70:	1a8a      	subs	r2, r1, r2
 8005a72:	b292      	uxth	r2, r2
 8005a74:	b210      	sxth	r0, r2
 8005a76:	88b9      	ldrh	r1, [r7, #4]
 8005a78:	8afa      	ldrh	r2, [r7, #22]
 8005a7a:	440a      	add	r2, r1
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	b211      	sxth	r1, r2
 8005a80:	883a      	ldrh	r2, [r7, #0]
 8005a82:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8005a84:	4b32      	ldr	r3, [pc, #200]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	88f9      	ldrh	r1, [r7, #6]
 8005a8e:	8aba      	ldrh	r2, [r7, #20]
 8005a90:	1a8a      	subs	r2, r1, r2
 8005a92:	b292      	uxth	r2, r2
 8005a94:	b210      	sxth	r0, r2
 8005a96:	88b9      	ldrh	r1, [r7, #4]
 8005a98:	8afa      	ldrh	r2, [r7, #22]
 8005a9a:	1a8a      	subs	r2, r1, r2
 8005a9c:	b292      	uxth	r2, r2
 8005a9e:	b211      	sxth	r1, r2
 8005aa0:	883a      	ldrh	r2, [r7, #0]
 8005aa2:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8005aa4:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	88f9      	ldrh	r1, [r7, #6]
 8005aae:	8aba      	ldrh	r2, [r7, #20]
 8005ab0:	440a      	add	r2, r1
 8005ab2:	b292      	uxth	r2, r2
 8005ab4:	b210      	sxth	r0, r2
 8005ab6:	88b9      	ldrh	r1, [r7, #4]
 8005ab8:	8afa      	ldrh	r2, [r7, #22]
 8005aba:	440a      	add	r2, r1
 8005abc:	b292      	uxth	r2, r2
 8005abe:	b211      	sxth	r1, r2
 8005ac0:	883a      	ldrh	r2, [r7, #0]
 8005ac2:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8005ac4:	4b22      	ldr	r3, [pc, #136]	; (8005b50 <UG_DrawCircle+0x1c8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	88f9      	ldrh	r1, [r7, #6]
 8005ace:	8aba      	ldrh	r2, [r7, #20]
 8005ad0:	440a      	add	r2, r1
 8005ad2:	b292      	uxth	r2, r2
 8005ad4:	b210      	sxth	r0, r2
 8005ad6:	88b9      	ldrh	r1, [r7, #4]
 8005ad8:	8afa      	ldrh	r2, [r7, #22]
 8005ada:	1a8a      	subs	r2, r1, r2
 8005adc:	b292      	uxth	r2, r2
 8005ade:	b211      	sxth	r1, r2
 8005ae0:	883a      	ldrh	r2, [r7, #0]
 8005ae2:	4798      	blx	r3

      y++;
 8005ae4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3301      	adds	r3, #1
 8005aec:	b29b      	uxth	r3, r3
 8005aee:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005af0:	89fa      	ldrh	r2, [r7, #14]
 8005af2:	8a3b      	ldrh	r3, [r7, #16]
 8005af4:	4413      	add	r3, r2
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8005afa:	8a3b      	ldrh	r3, [r7, #16]
 8005afc:	3302      	adds	r3, #2
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005b02:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b06:	005a      	lsls	r2, r3, #1
 8005b08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	dd0e      	ble.n	8005b30 <UG_DrawCircle+0x1a8>
      {
         x--;
 8005b12:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005b1e:	89fa      	ldrh	r2, [r7, #14]
 8005b20:	8a7b      	ldrh	r3, [r7, #18]
 8005b22:	4413      	add	r3, r2
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8005b28:	8a7b      	ldrh	r3, [r7, #18]
 8005b2a:	3302      	adds	r3, #2
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005b30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b34:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	f6bf af53 	bge.w	80059e4 <UG_DrawCircle+0x5c>
 8005b3e:	e004      	b.n	8005b4a <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8005b40:	bf00      	nop
 8005b42:	e002      	b.n	8005b4a <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8005b44:	bf00      	nop
 8005b46:	e000      	b.n	8005b4a <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8005b48:	bf00      	nop
      }
   }
}
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd90      	pop	{r4, r7, pc}
 8005b50:	20000504 	.word	0x20000504

08005b54 <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af02      	add	r7, sp, #8
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	4608      	mov	r0, r1
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	4623      	mov	r3, r4
 8005b64:	80fb      	strh	r3, [r7, #6]
 8005b66:	4603      	mov	r3, r0
 8005b68:	80bb      	strh	r3, [r7, #4]
 8005b6a:	460b      	mov	r3, r1
 8005b6c:	807b      	strh	r3, [r7, #2]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 8005b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f2c0 80bd 	blt.w	8005cf6 <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 8005b7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f2c0 80ba 	blt.w	8005cfa <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 8005b86:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f340 80b7 	ble.w	8005cfe <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	f1c3 0303 	rsb	r3, r3, #3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	817b      	strh	r3, [r7, #10]
   x = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	81fb      	strh	r3, [r7, #14]
   y = r;
 8005ba2:	887b      	ldrh	r3, [r7, #2]
 8005ba4:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 8005ba6:	e095      	b.n	8005cd4 <UG_FillCircle+0x180>
   {
     if( y > 0 )
 8005ba8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	dd33      	ble.n	8005c18 <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	89fb      	ldrh	r3, [r7, #14]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	b218      	sxth	r0, r3
 8005bba:	88ba      	ldrh	r2, [r7, #4]
 8005bbc:	89bb      	ldrh	r3, [r7, #12]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b219      	sxth	r1, r3
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	89fb      	ldrh	r3, [r7, #14]
 8005bc8:	1ad3      	subs	r3, r2, r3
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b21c      	sxth	r4, r3
 8005bce:	88ba      	ldrh	r2, [r7, #4]
 8005bd0:	89bb      	ldrh	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	883b      	ldrh	r3, [r7, #0]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	4622      	mov	r2, r4
 8005be0:	f000 f892 	bl	8005d08 <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	89fb      	ldrh	r3, [r7, #14]
 8005be8:	4413      	add	r3, r2
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	b218      	sxth	r0, r3
 8005bee:	88ba      	ldrh	r2, [r7, #4]
 8005bf0:	89bb      	ldrh	r3, [r7, #12]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	b219      	sxth	r1, r3
 8005bf8:	88fa      	ldrh	r2, [r7, #6]
 8005bfa:	89fb      	ldrh	r3, [r7, #14]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	b29b      	uxth	r3, r3
 8005c00:	b21c      	sxth	r4, r3
 8005c02:	88ba      	ldrh	r2, [r7, #4]
 8005c04:	89bb      	ldrh	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	b21a      	sxth	r2, r3
 8005c0c:	883b      	ldrh	r3, [r7, #0]
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	4613      	mov	r3, r2
 8005c12:	4622      	mov	r2, r4
 8005c14:	f000 f878 	bl	8005d08 <UG_DrawLine>
     }
     if( x > 0 )
 8005c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	dd33      	ble.n	8005c88 <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005c20:	88fa      	ldrh	r2, [r7, #6]
 8005c22:	89bb      	ldrh	r3, [r7, #12]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	b218      	sxth	r0, r3
 8005c2a:	88ba      	ldrh	r2, [r7, #4]
 8005c2c:	89fb      	ldrh	r3, [r7, #14]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	b219      	sxth	r1, r3
 8005c34:	88fa      	ldrh	r2, [r7, #6]
 8005c36:	89bb      	ldrh	r3, [r7, #12]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	b21c      	sxth	r4, r3
 8005c3e:	88ba      	ldrh	r2, [r7, #4]
 8005c40:	89fb      	ldrh	r3, [r7, #14]
 8005c42:	4413      	add	r3, r2
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	b21a      	sxth	r2, r3
 8005c48:	883b      	ldrh	r3, [r7, #0]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	4622      	mov	r2, r4
 8005c50:	f000 f85a 	bl	8005d08 <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 8005c54:	88fa      	ldrh	r2, [r7, #6]
 8005c56:	89bb      	ldrh	r3, [r7, #12]
 8005c58:	4413      	add	r3, r2
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	b218      	sxth	r0, r3
 8005c5e:	88ba      	ldrh	r2, [r7, #4]
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	b219      	sxth	r1, r3
 8005c68:	88fa      	ldrh	r2, [r7, #6]
 8005c6a:	89bb      	ldrh	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	b21c      	sxth	r4, r3
 8005c72:	88ba      	ldrh	r2, [r7, #4]
 8005c74:	89fb      	ldrh	r3, [r7, #14]
 8005c76:	4413      	add	r3, r2
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	b21a      	sxth	r2, r3
 8005c7c:	883b      	ldrh	r3, [r7, #0]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	4613      	mov	r3, r2
 8005c82:	4622      	mov	r2, r4
 8005c84:	f000 f840 	bl	8005d08 <UG_DrawLine>
     }
     if ( xd < 0 )
 8005c88:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	da09      	bge.n	8005ca4 <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 8005c90:	89fb      	ldrh	r3, [r7, #14]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	b29a      	uxth	r2, r3
 8005c96:	897b      	ldrh	r3, [r7, #10]
 8005c98:	4413      	add	r3, r2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3306      	adds	r3, #6
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	817b      	strh	r3, [r7, #10]
 8005ca2:	e011      	b.n	8005cc8 <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 8005ca4:	89fa      	ldrh	r2, [r7, #14]
 8005ca6:	89bb      	ldrh	r3, [r7, #12]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	897b      	ldrh	r3, [r7, #10]
 8005cb2:	4413      	add	r3, r2
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	330a      	adds	r3, #10
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	817b      	strh	r3, [r7, #10]
        y--;
 8005cbc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 8005cc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005cd4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005cd8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	f77f af63 	ble.w	8005ba8 <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005ce2:	883b      	ldrh	r3, [r7, #0]
 8005ce4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ce8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005cec:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005cf0:	f7ff fe4a 	bl	8005988 <UG_DrawCircle>
 8005cf4:	e004      	b.n	8005d00 <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 8005cf6:	bf00      	nop
 8005cf8:	e002      	b.n	8005d00 <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 8005cfa:	bf00      	nop
 8005cfc:	e000      	b.n	8005d00 <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005cfe:	bf00      	nop
}
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd90      	pop	{r4, r7, pc}
	...

08005d08 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005d08:	b5b0      	push	{r4, r5, r7, lr}
 8005d0a:	b08a      	sub	sp, #40	; 0x28
 8005d0c:	af02      	add	r7, sp, #8
 8005d0e:	4604      	mov	r4, r0
 8005d10:	4608      	mov	r0, r1
 8005d12:	4611      	mov	r1, r2
 8005d14:	461a      	mov	r2, r3
 8005d16:	4623      	mov	r3, r4
 8005d18:	80fb      	strh	r3, [r7, #6]
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	80bb      	strh	r3, [r7, #4]
 8005d1e:	460b      	mov	r3, r1
 8005d20:	807b      	strh	r3, [r7, #2]
 8005d22:	4613      	mov	r3, r2
 8005d24:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005d26:	4b67      	ldr	r3, [pc, #412]	; (8005ec4 <UG_DrawLine+0x1bc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d013      	beq.n	8005d5e <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005d36:	4b63      	ldr	r3, [pc, #396]	; (8005ec4 <UG_DrawLine+0x1bc>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3c:	461d      	mov	r5, r3
 8005d3e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005d42:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d46:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d4a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d4e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4623      	mov	r3, r4
 8005d54:	47a8      	blx	r5
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80ae 	beq.w	8005eba <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005d5e:	887a      	ldrh	r2, [r7, #2]
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005d68:	883a      	ldrh	r2, [r7, #0]
 8005d6a:	88bb      	ldrh	r3, [r7, #4]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005d72:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	bfb8      	it	lt
 8005d7a:	425b      	neglt	r3, r3
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005d80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfb8      	it	lt
 8005d88:	425b      	neglt	r3, r3
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005d8e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	dd01      	ble.n	8005d9a <UG_DrawLine+0x92>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e001      	b.n	8005d9e <UG_DrawLine+0x96>
 8005d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d9e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005da0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	dd01      	ble.n	8005dac <UG_DrawLine+0xa4>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e001      	b.n	8005db0 <UG_DrawLine+0xa8>
 8005dac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005db0:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005db6:	105b      	asrs	r3, r3, #1
 8005db8:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005dba:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005dbe:	105b      	asrs	r3, r3, #1
 8005dc0:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005dc2:	88fb      	ldrh	r3, [r7, #6]
 8005dc4:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005dc6:	88bb      	ldrh	r3, [r7, #4]
 8005dc8:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005dca:	4b3e      	ldr	r3, [pc, #248]	; (8005ec4 <UG_DrawLine+0x1bc>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005dd4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005dd8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005ddc:	4798      	blx	r3

   if( dxabs >= dyabs )
 8005dde:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005de2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	db33      	blt.n	8005e52 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8005dea:	2300      	movs	r3, #0
 8005dec:	83fb      	strh	r3, [r7, #30]
 8005dee:	e029      	b.n	8005e44 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8005df0:	8b7a      	ldrh	r2, [r7, #26]
 8005df2:	89fb      	ldrh	r3, [r7, #14]
 8005df4:	4413      	add	r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005dfa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005dfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e02:	429a      	cmp	r2, r3
 8005e04:	db09      	blt.n	8005e1a <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005e06:	8b7a      	ldrh	r2, [r7, #26]
 8005e08:	8a3b      	ldrh	r3, [r7, #16]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8005e10:	8afa      	ldrh	r2, [r7, #22]
 8005e12:	897b      	ldrh	r3, [r7, #10]
 8005e14:	4413      	add	r3, r2
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005e1a:	8b3a      	ldrh	r2, [r7, #24]
 8005e1c:	89bb      	ldrh	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005e24:	4b27      	ldr	r3, [pc, #156]	; (8005ec4 <UG_DrawLine+0x1bc>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005e2e:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005e32:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e36:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005e38:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	3301      	adds	r3, #1
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	83fb      	strh	r3, [r7, #30]
 8005e44:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005e48:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	dbcf      	blt.n	8005df0 <UG_DrawLine+0xe8>
 8005e50:	e034      	b.n	8005ebc <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8005e52:	2300      	movs	r3, #0
 8005e54:	83fb      	strh	r3, [r7, #30]
 8005e56:	e029      	b.n	8005eac <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005e58:	8bba      	ldrh	r2, [r7, #28]
 8005e5a:	8a3b      	ldrh	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005e62:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005e66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	db09      	blt.n	8005e82 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8005e6e:	8bba      	ldrh	r2, [r7, #28]
 8005e70:	89fb      	ldrh	r3, [r7, #14]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005e78:	8b3a      	ldrh	r2, [r7, #24]
 8005e7a:	89bb      	ldrh	r3, [r7, #12]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	b29b      	uxth	r3, r3
 8005e80:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005e82:	8afa      	ldrh	r2, [r7, #22]
 8005e84:	897b      	ldrh	r3, [r7, #10]
 8005e86:	4413      	add	r3, r2
 8005e88:	b29b      	uxth	r3, r3
 8005e8a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005e8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <UG_DrawLine+0x1bc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005e96:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005e9a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e9e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8005ea0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	83fb      	strh	r3, [r7, #30]
 8005eac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005eb0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	dbcf      	blt.n	8005e58 <UG_DrawLine+0x150>
 8005eb8:	e000      	b.n	8005ebc <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005eba:	bf00      	nop
      }
   }  
}
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bdb0      	pop	{r4, r5, r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	20000504 	.word	0x20000504

08005ec8 <UG_DrawTriangle>:


/* Draw a triangle */
void UG_DrawTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005ec8:	b590      	push	{r4, r7, lr}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	4604      	mov	r4, r0
 8005ed0:	4608      	mov	r0, r1
 8005ed2:	4611      	mov	r1, r2
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	4623      	mov	r3, r4
 8005ed8:	80fb      	strh	r3, [r7, #6]
 8005eda:	4603      	mov	r3, r0
 8005edc:	80bb      	strh	r3, [r7, #4]
 8005ede:	460b      	mov	r3, r1
 8005ee0:	807b      	strh	r3, [r7, #2]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	803b      	strh	r3, [r7, #0]
  UG_DrawLine(x1, y1, x2, y2, c);
 8005ee6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005eea:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005eee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ef2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ef6:	8c3b      	ldrh	r3, [r7, #32]
 8005ef8:	9300      	str	r3, [sp, #0]
 8005efa:	4623      	mov	r3, r4
 8005efc:	f7ff ff04 	bl	8005d08 <UG_DrawLine>
  UG_DrawLine(x2, y2, x3, y3, c);
 8005f00:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005f04:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005f08:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005f0c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005f10:	8c3b      	ldrh	r3, [r7, #32]
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	4623      	mov	r3, r4
 8005f16:	f7ff fef7 	bl	8005d08 <UG_DrawLine>
  UG_DrawLine(x3, y3, x1, y1, c);
 8005f1a:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005f1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005f22:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005f26:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005f2a:	8c3b      	ldrh	r3, [r7, #32]
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	4623      	mov	r3, r4
 8005f30:	f7ff feea 	bl	8005d08 <UG_DrawLine>
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd90      	pop	{r4, r7, pc}

08005f3c <UG_FillTriangle>:

/* Fill a triangle */
void UG_FillTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005f3c:	b590      	push	{r4, r7, lr}
 8005f3e:	b08f      	sub	sp, #60	; 0x3c
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4623      	mov	r3, r4
 8005f4c:	80fb      	strh	r3, [r7, #6]
 8005f4e:	4603      	mov	r3, r0
 8005f50:	80bb      	strh	r3, [r7, #4]
 8005f52:	460b      	mov	r3, r1
 8005f54:	807b      	strh	r3, [r7, #2]
 8005f56:	4613      	mov	r3, r2
 8005f58:	803b      	strh	r3, [r7, #0]

  UG_S16 a, b, y, last;

  /* Sort coordinates by Y order (y3 >= y2 >= y1) */
  if (y1 > y2) {
 8005f5a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f5e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	dd0b      	ble.n	8005f7e <UG_FillTriangle+0x42>
    swap(y1, y2); swap(x1, x2);
 8005f66:	88bb      	ldrh	r3, [r7, #4]
 8005f68:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f6a:	883b      	ldrh	r3, [r7, #0]
 8005f6c:	80bb      	strh	r3, [r7, #4]
 8005f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f70:	803b      	strh	r3, [r7, #0]
 8005f72:	88fb      	ldrh	r3, [r7, #6]
 8005f74:	843b      	strh	r3, [r7, #32]
 8005f76:	887b      	ldrh	r3, [r7, #2]
 8005f78:	80fb      	strh	r3, [r7, #6]
 8005f7a:	8c3b      	ldrh	r3, [r7, #32]
 8005f7c:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 8005f7e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f82:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005f86:	429a      	cmp	r2, r3
 8005f88:	dd0f      	ble.n	8005faa <UG_FillTriangle+0x6e>
    swap(y3, y2); swap(x3, x2);
 8005f8a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f8e:	83fb      	strh	r3, [r7, #30]
 8005f90:	883b      	ldrh	r3, [r7, #0]
 8005f92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f96:	8bfb      	ldrh	r3, [r7, #30]
 8005f98:	803b      	strh	r3, [r7, #0]
 8005f9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f9e:	83bb      	strh	r3, [r7, #28]
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fa6:	8bbb      	ldrh	r3, [r7, #28]
 8005fa8:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 8005faa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005fae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	dd0b      	ble.n	8005fce <UG_FillTriangle+0x92>
    swap(y1, y2); swap(x1, x2);
 8005fb6:	88bb      	ldrh	r3, [r7, #4]
 8005fb8:	837b      	strh	r3, [r7, #26]
 8005fba:	883b      	ldrh	r3, [r7, #0]
 8005fbc:	80bb      	strh	r3, [r7, #4]
 8005fbe:	8b7b      	ldrh	r3, [r7, #26]
 8005fc0:	803b      	strh	r3, [r7, #0]
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	833b      	strh	r3, [r7, #24]
 8005fc6:	887b      	ldrh	r3, [r7, #2]
 8005fc8:	80fb      	strh	r3, [r7, #6]
 8005fca:	8b3b      	ldrh	r3, [r7, #24]
 8005fcc:	807b      	strh	r3, [r7, #2]
  }

  /* Handle awkward all-on-same-line case as its own thing */
  if (y1 == y3) {
 8005fce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005fd2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d138      	bne.n	800604c <UG_FillTriangle+0x110>
    a = b = x1;
 8005fda:	88fb      	ldrh	r3, [r7, #6]
 8005fdc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fe0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x2 < a) {
 8005fe2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fe6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005fea:	429a      	cmp	r2, r3
 8005fec:	da02      	bge.n	8005ff4 <UG_FillTriangle+0xb8>
      a = x2;
 8005fee:	887b      	ldrh	r3, [r7, #2]
 8005ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ff2:	e007      	b.n	8006004 <UG_FillTriangle+0xc8>
    } else if (x2 > b) {
 8005ff4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ff8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	dd01      	ble.n	8006004 <UG_FillTriangle+0xc8>
      b = x2;
 8006000:	887b      	ldrh	r3, [r7, #2]
 8006002:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if (x3 < a) {
 8006004:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8006008:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800600c:	429a      	cmp	r2, r3
 800600e:	da03      	bge.n	8006018 <UG_FillTriangle+0xdc>
      a = x3;
 8006010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006014:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006016:	e008      	b.n	800602a <UG_FillTriangle+0xee>
    } else if (x3 > b) {
 8006018:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 800601c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006020:	429a      	cmp	r2, r3
 8006022:	dd02      	ble.n	800602a <UG_FillTriangle+0xee>
      b = x3;
 8006024:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006028:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y1, b + 1, y1, c);
 800602a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800602c:	3301      	adds	r3, #1
 800602e:	b29b      	uxth	r3, r3
 8006030:	b21a      	sxth	r2, r3
 8006032:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006036:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800603a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800603e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4623      	mov	r3, r4
 8006046:	f7ff fe5f 	bl	8005d08 <UG_DrawLine>
    return;
 800604a:	e0dc      	b.n	8006206 <UG_FillTriangle+0x2ca>
  }

  UG_S16
  dx01 = x2 - x1,
 800604c:	887a      	ldrh	r2, [r7, #2]
 800604e:	88fb      	ldrh	r3, [r7, #6]
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	b29b      	uxth	r3, r3
 8006054:	82fb      	strh	r3, [r7, #22]
  dy01 = y2 - y1,
 8006056:	883a      	ldrh	r2, [r7, #0]
 8006058:	88bb      	ldrh	r3, [r7, #4]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	82bb      	strh	r3, [r7, #20]
  dx02 = x3 - x1,
 8006060:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006064:	88fb      	ldrh	r3, [r7, #6]
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	b29b      	uxth	r3, r3
 800606a:	827b      	strh	r3, [r7, #18]
  dy02 = y3 - y1,
 800606c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006070:	88bb      	ldrh	r3, [r7, #4]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	b29b      	uxth	r3, r3
 8006076:	823b      	strh	r3, [r7, #16]
  dx12 = x3 - x2,
 8006078:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800607c:	887b      	ldrh	r3, [r7, #2]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	b29b      	uxth	r3, r3
 8006082:	81fb      	strh	r3, [r7, #14]
  dy12 = y3 - y2,
 8006084:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006088:	883b      	ldrh	r3, [r7, #0]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	b29b      	uxth	r3, r3
 800608e:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8006090:	2300      	movs	r3, #0
 8006092:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8006094:	2300      	movs	r3, #0
 8006096:	84bb      	strh	r3, [r7, #36]	; 0x24
   * is included here (and second loop will be skipped, avoiding a /0
   * error there), otherwise scanline y2 is skipped here and handled
   * in the second loop...which also avoids a /0 error here if y1=y2
   * (flat-topped triangle).
   */
  if (y2 == y3) {
 8006098:	f9b7 2000 	ldrsh.w	r2, [r7]
 800609c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d102      	bne.n	80060aa <UG_FillTriangle+0x16e>
    last = y2;   /* Include y2 scanline */
 80060a4:	883b      	ldrh	r3, [r7, #0]
 80060a6:	853b      	strh	r3, [r7, #40]	; 0x28
 80060a8:	e003      	b.n	80060b2 <UG_FillTriangle+0x176>
  } else {
    last = y2 - 1; /* Skip it */
 80060aa:	883b      	ldrh	r3, [r7, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  for (y = y1; y <= last; y++) {
 80060b2:	88bb      	ldrh	r3, [r7, #4]
 80060b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80060b6:	e041      	b.n	800613c <UG_FillTriangle+0x200>
    a   = x1 + sa / dy01;
 80060b8:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80060bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80060c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	4413      	add	r3, r2
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 80060ce:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80060d2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80060da:	b29a      	uxth	r2, r3
 80060dc:	88fb      	ldrh	r3, [r7, #6]
 80060de:	4413      	add	r3, r2
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 80060e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060e6:	8afb      	ldrh	r3, [r7, #22]
 80060e8:	4413      	add	r3, r2
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80060ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060f0:	8a7b      	ldrh	r3, [r7, #18]
 80060f2:	4413      	add	r3, r2
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 80060f8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80060fc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	dd05      	ble.n	8006110 <UG_FillTriangle+0x1d4>
      swap(a, b);
 8006104:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006106:	813b      	strh	r3, [r7, #8]
 8006108:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800610a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800610c:	893b      	ldrh	r3, [r7, #8]
 800610e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 8006110:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006112:	3301      	adds	r3, #1
 8006114:	b29b      	uxth	r3, r3
 8006116:	b21a      	sxth	r2, r3
 8006118:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 800611c:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 8006120:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006124:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006128:	9300      	str	r3, [sp, #0]
 800612a:	4623      	mov	r3, r4
 800612c:	f7ff fdec 	bl	8005d08 <UG_DrawLine>
  for (y = y1; y <= last; y++) {
 8006130:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3301      	adds	r3, #1
 8006138:	b29b      	uxth	r3, r3
 800613a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800613c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006140:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006144:	429a      	cmp	r2, r3
 8006146:	ddb7      	ble.n	80060b8 <UG_FillTriangle+0x17c>
  }

  /* For lower part of triangle, find scanline crossings for segments
   * 0-2 and 1-2.  This loop is skipped if y2=y3.
   */
  sa = dx12 * (y - y2);
 8006148:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800614c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	b29a      	uxth	r2, r3
 8006154:	89fb      	ldrh	r3, [r7, #14]
 8006156:	fb12 f303 	smulbb	r3, r2, r3
 800615a:	b29b      	uxth	r3, r3
 800615c:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y1);
 800615e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006162:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	b29a      	uxth	r2, r3
 800616a:	8a7b      	ldrh	r3, [r7, #18]
 800616c:	fb12 f303 	smulbb	r3, r2, r3
 8006170:	b29b      	uxth	r3, r3
 8006172:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y3; y++) {
 8006174:	e041      	b.n	80061fa <UG_FillTriangle+0x2be>
    a   = x2 + sa / dy12;
 8006176:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800617a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800617e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006182:	b29a      	uxth	r2, r3
 8006184:	887b      	ldrh	r3, [r7, #2]
 8006186:	4413      	add	r3, r2
 8006188:	b29b      	uxth	r3, r3
 800618a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 800618c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006190:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006194:	fb92 f3f3 	sdiv	r3, r2, r3
 8006198:	b29a      	uxth	r2, r3
 800619a:	88fb      	ldrh	r3, [r7, #6]
 800619c:	4413      	add	r3, r2
 800619e:	b29b      	uxth	r3, r3
 80061a0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 80061a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80061a4:	89fb      	ldrh	r3, [r7, #14]
 80061a6:	4413      	add	r3, r2
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80061ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80061ae:	8a7b      	ldrh	r3, [r7, #18]
 80061b0:	4413      	add	r3, r2
 80061b2:	b29b      	uxth	r3, r3
 80061b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 80061b6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80061ba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80061be:	429a      	cmp	r2, r3
 80061c0:	dd05      	ble.n	80061ce <UG_FillTriangle+0x292>
      swap(a, b);
 80061c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061c4:	817b      	strh	r3, [r7, #10]
 80061c6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80061ca:	897b      	ldrh	r3, [r7, #10]
 80061cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 80061ce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061d0:	3301      	adds	r3, #1
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	b21a      	sxth	r2, r3
 80061d6:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 80061da:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80061de:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80061e2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	4623      	mov	r3, r4
 80061ea:	f7ff fd8d 	bl	8005d08 <UG_DrawLine>
  for (; y <= y3; y++) {
 80061ee:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3301      	adds	r3, #1
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061fa:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80061fe:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006202:	429a      	cmp	r2, r3
 8006204:	ddb7      	ble.n	8006176 <UG_FillTriangle+0x23a>
  }
}
 8006206:	3734      	adds	r7, #52	; 0x34
 8006208:	46bd      	mov	sp, r7
 800620a:	bd90      	pop	{r4, r7, pc}

0800620c <UG_PutString>:

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800620c:	b590      	push	{r4, r7, lr}
 800620e:	b087      	sub	sp, #28
 8006210:	af02      	add	r7, sp, #8
 8006212:	4603      	mov	r3, r0
 8006214:	603a      	str	r2, [r7, #0]
 8006216:	80fb      	strh	r3, [r7, #6]
 8006218:	460b      	mov	r3, r1
 800621a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 800621c:	88fb      	ldrh	r3, [r7, #6]
 800621e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8006220:	88bb      	ldrh	r3, [r7, #4]
 8006222:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8006224:	4b3c      	ldr	r3, [pc, #240]	; (8006318 <UG_PutString+0x10c>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	4618      	mov	r0, r3
 800622c:	f000 fa4e 	bl	80066cc <_UG_FontSelect>
   while ( *str != 0 )
 8006230:	e054      	b.n	80062dc <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	603a      	str	r2, [r7, #0]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	2b0a      	cmp	r3, #10
 8006240:	d105      	bne.n	800624e <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 8006242:	4b35      	ldr	r3, [pc, #212]	; (8006318 <UG_PutString+0x10c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	81fb      	strh	r3, [r7, #14]
         continue;
 800624c:	e046      	b.n	80062dc <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800624e:	7afb      	ldrb	r3, [r7, #11]
 8006250:	2100      	movs	r1, #0
 8006252:	4618      	mov	r0, r3
 8006254:	f000 f8ea 	bl	800642c <_UG_GetCharData>
 8006258:	4603      	mov	r3, r0
 800625a:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800625c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006264:	d100      	bne.n	8006268 <UG_PutString+0x5c>
 8006266:	e039      	b.n	80062dc <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8006268:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <UG_PutString+0x10c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006272:	4619      	mov	r1, r3
 8006274:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006278:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	4299      	cmp	r1, r3
 8006280:	dc11      	bgt.n	80062a6 <UG_PutString+0x9a>
      {
         xp = x;
 8006282:	88fb      	ldrh	r3, [r7, #6]
 8006284:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8006286:	4b24      	ldr	r3, [pc, #144]	; (8006318 <UG_PutString+0x10c>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	7ddb      	ldrb	r3, [r3, #23]
 800628c:	b21a      	sxth	r2, r3
 800628e:	4b22      	ldr	r3, [pc, #136]	; (8006318 <UG_PutString+0x10c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8006296:	b21b      	sxth	r3, r3
 8006298:	4413      	add	r3, r2
 800629a:	b21b      	sxth	r3, r3
 800629c:	b29a      	uxth	r2, r3
 800629e:	89bb      	ldrh	r3, [r7, #12]
 80062a0:	4413      	add	r3, r2
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80062a6:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <UG_PutString+0x10c>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <UG_PutString+0x10c>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80062b6:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80062ba:	7af8      	ldrb	r0, [r7, #11]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	4623      	mov	r3, r4
 80062c0:	f000 fa82 	bl	80067c8 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 80062c4:	4b14      	ldr	r3, [pc, #80]	; (8006318 <UG_PutString+0x10c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 80062cc:	b29a      	uxth	r2, r3
 80062ce:	893b      	ldrh	r3, [r7, #8]
 80062d0:	4413      	add	r3, r2
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	89fb      	ldrh	r3, [r7, #14]
 80062d6:	4413      	add	r3, r2
 80062d8:	b29b      	uxth	r3, r3
 80062da:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1a6      	bne.n	8006232 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <UG_PutString+0x10c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062ec:	f003 0302 	and.w	r3, r3, #2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00c      	beq.n	800630e <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80062f4:	4b08      	ldr	r3, [pc, #32]	; (8006318 <UG_PutString+0x10c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fa:	461c      	mov	r4, r3
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006304:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630c:	47a0      	blx	r4
}
 800630e:	bf00      	nop
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	bf00      	nop
 8006318:	20000504 	.word	0x20000504

0800631c <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 800631c:	b480      	push	{r7}
 800631e:	b083      	sub	sp, #12
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8006326:	4b05      	ldr	r3, [pc, #20]	; (800633c <UG_SetForecolor+0x20>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	88fa      	ldrh	r2, [r7, #6]
 800632c:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	20000504 	.word	0x20000504

08006340 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
 8006346:	4603      	mov	r3, r0
 8006348:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <UG_SetBackcolor+0x20>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	88fa      	ldrh	r2, [r7, #6]
 8006350:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	20000504 	.word	0x20000504

08006364 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
   return gui->device->x_dim;
 8006368:	4b04      	ldr	r3, [pc, #16]	; (800637c <UG_GetXDim+0x18>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8006372:	4618      	mov	r0, r3
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr
 800637c:	20000504 	.word	0x20000504

08006380 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
   return gui->device->y_dim;
 8006384:	4b04      	ldr	r3, [pc, #16]	; (8006398 <UG_GetYDim+0x18>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800638e:	4618      	mov	r0, r3
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	20000504 	.word	0x20000504

0800639c <UG_FontSetHSpace>:

void UG_FontSetHSpace( UG_U16 s )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	4603      	mov	r3, r0
 80063a4:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80063a6:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <UG_FontSetHSpace+0x24>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	88fa      	ldrh	r2, [r7, #6]
 80063ac:	b252      	sxtb	r2, r2
 80063ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000504 	.word	0x20000504

080063c4 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b083      	sub	sp, #12
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80063ce:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <UG_FontSetVSpace+0x24>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	88fa      	ldrh	r2, [r7, #6]
 80063d4:	b252      	sxtb	r2, r2
 80063d6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	20000504 	.word	0x20000504

080063ec <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	4603      	mov	r3, r0
 80063f4:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <UG_FontSetTransparency+0x20>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	79fa      	ldrb	r2, [r7, #7]
 80063fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	20000504 	.word	0x20000504

08006410 <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 8006414:	4b04      	ldr	r3, [pc, #16]	; (8006428 <UG_FontGetTransparency+0x18>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800641c:	4618      	mov	r0, r3
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000504 	.word	0x20000504

0800642c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 800642c:	b580      	push	{r7, lr}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	4603      	mov	r3, r0
 8006434:	6039      	str	r1, [r7, #0]
 8006436:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8006438:	2300      	movs	r3, #0
 800643a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800643c:	2300      	movs	r3, #0
 800643e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8006440:	2300      	movs	r3, #0
 8006442:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8006444:	2300      	movs	r3, #0
 8006446:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8006448:	2300      	movs	r3, #0
 800644a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800644c:	4b9a      	ldr	r3, [pc, #616]	; (80066b8 <_UG_GetCharData+0x28c>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006452:	4b9a      	ldr	r3, [pc, #616]	; (80066bc <_UG_GetCharData+0x290>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d10f      	bne.n	800647a <_UG_GetCharData+0x4e>
 800645a:	4b99      	ldr	r3, [pc, #612]	; (80066c0 <_UG_GetCharData+0x294>)
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	79fa      	ldrb	r2, [r7, #7]
 8006460:	429a      	cmp	r2, r3
 8006462:	d10a      	bne.n	800647a <_UG_GetCharData+0x4e>
    if(p){
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800646a:	4b96      	ldr	r3, [pc, #600]	; (80066c4 <_UG_GetCharData+0x298>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8006472:	4b95      	ldr	r3, [pc, #596]	; (80066c8 <_UG_GetCharData+0x29c>)
 8006474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006478:	e119      	b.n	80066ae <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800647a:	4b8f      	ldr	r3, [pc, #572]	; (80066b8 <_UG_GetCharData+0x28c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	7d5b      	ldrb	r3, [r3, #21]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d07d      	beq.n	8006580 <_UG_GetCharData+0x154>
    switch ( encoding )
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	2bfc      	cmp	r3, #252	; 0xfc
 8006488:	f300 80ce 	bgt.w	8006628 <_UG_GetCharData+0x1fc>
 800648c:	2bd6      	cmp	r3, #214	; 0xd6
 800648e:	da09      	bge.n	80064a4 <_UG_GetCharData+0x78>
 8006490:	2bc4      	cmp	r3, #196	; 0xc4
 8006492:	d06c      	beq.n	800656e <_UG_GetCharData+0x142>
 8006494:	2bc4      	cmp	r3, #196	; 0xc4
 8006496:	f300 80c7 	bgt.w	8006628 <_UG_GetCharData+0x1fc>
 800649a:	2bb0      	cmp	r3, #176	; 0xb0
 800649c:	d06d      	beq.n	800657a <_UG_GetCharData+0x14e>
 800649e:	2bb5      	cmp	r3, #181	; 0xb5
 80064a0:	d068      	beq.n	8006574 <_UG_GetCharData+0x148>
 80064a2:	e06e      	b.n	8006582 <_UG_GetCharData+0x156>
 80064a4:	3bd6      	subs	r3, #214	; 0xd6
 80064a6:	2b26      	cmp	r3, #38	; 0x26
 80064a8:	f200 80be 	bhi.w	8006628 <_UG_GetCharData+0x1fc>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <_UG_GetCharData+0x88>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	08006557 	.word	0x08006557
 80064b8:	08006629 	.word	0x08006629
 80064bc:	08006629 	.word	0x08006629
 80064c0:	08006629 	.word	0x08006629
 80064c4:	08006629 	.word	0x08006629
 80064c8:	08006629 	.word	0x08006629
 80064cc:	08006563 	.word	0x08006563
 80064d0:	08006629 	.word	0x08006629
 80064d4:	08006629 	.word	0x08006629
 80064d8:	08006629 	.word	0x08006629
 80064dc:	08006629 	.word	0x08006629
 80064e0:	08006629 	.word	0x08006629
 80064e4:	08006629 	.word	0x08006629
 80064e8:	08006629 	.word	0x08006629
 80064ec:	08006569 	.word	0x08006569
 80064f0:	08006629 	.word	0x08006629
 80064f4:	08006629 	.word	0x08006629
 80064f8:	08006629 	.word	0x08006629
 80064fc:	08006629 	.word	0x08006629
 8006500:	08006629 	.word	0x08006629
 8006504:	08006629 	.word	0x08006629
 8006508:	08006629 	.word	0x08006629
 800650c:	08006629 	.word	0x08006629
 8006510:	08006629 	.word	0x08006629
 8006514:	08006629 	.word	0x08006629
 8006518:	08006629 	.word	0x08006629
 800651c:	08006629 	.word	0x08006629
 8006520:	08006629 	.word	0x08006629
 8006524:	08006629 	.word	0x08006629
 8006528:	08006629 	.word	0x08006629
 800652c:	08006629 	.word	0x08006629
 8006530:	08006629 	.word	0x08006629
 8006534:	08006551 	.word	0x08006551
 8006538:	08006629 	.word	0x08006629
 800653c:	08006629 	.word	0x08006629
 8006540:	08006629 	.word	0x08006629
 8006544:	08006629 	.word	0x08006629
 8006548:	08006629 	.word	0x08006629
 800654c:	0800655d 	.word	0x0800655d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8006550:	2394      	movs	r3, #148	; 0x94
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	e015      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 8006556:	2399      	movs	r3, #153	; 0x99
 8006558:	71fb      	strb	r3, [r7, #7]
 800655a:	e012      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 800655c:	2381      	movs	r3, #129	; 0x81
 800655e:	71fb      	strb	r3, [r7, #7]
 8006560:	e00f      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 8006562:	239a      	movs	r3, #154	; 0x9a
 8006564:	71fb      	strb	r3, [r7, #7]
 8006566:	e00c      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 8006568:	2384      	movs	r3, #132	; 0x84
 800656a:	71fb      	strb	r3, [r7, #7]
 800656c:	e009      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 800656e:	238e      	movs	r3, #142	; 0x8e
 8006570:	71fb      	strb	r3, [r7, #7]
 8006572:	e006      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 8006574:	23e6      	movs	r3, #230	; 0xe6
 8006576:	71fb      	strb	r3, [r7, #7]
 8006578:	e003      	b.n	8006582 <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 800657a:	23f8      	movs	r3, #248	; 0xf8
 800657c:	71fb      	strb	r3, [r7, #7]
 800657e:	e000      	b.n	8006582 <_UG_GetCharData+0x156>
    }
  }
 8006580:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8006582:	e051      	b.n	8006628 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8006584:	4b4c      	ldr	r3, [pc, #304]	; (80066b8 <_UG_GetCharData+0x28c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	8a7a      	ldrh	r2, [r7, #18]
 800658c:	0052      	lsls	r2, r2, #1
 800658e:	4413      	add	r3, r2
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe fff1 	bl	8005578 <ptr_8to16>
 8006596:	4603      	mov	r3, r0
 8006598:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800659a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	da06      	bge.n	80065b0 <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80065a2:	89fb      	ldrh	r3, [r7, #14]
 80065a4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80065a8:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 80065aa:	2301      	movs	r3, #1
 80065ac:	747b      	strb	r3, [r7, #17]
 80065ae:	e038      	b.n	8006622 <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 80065b0:	7c7b      	ldrb	r3, [r7, #17]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d025      	beq.n	8006602 <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	8afa      	ldrh	r2, [r7, #22]
 80065bc:	429a      	cmp	r2, r3
 80065be:	d80f      	bhi.n	80065e0 <_UG_GetCharData+0x1b4>
 80065c0:	79fb      	ldrb	r3, [r7, #7]
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	89fa      	ldrh	r2, [r7, #14]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d30a      	bcc.n	80065e0 <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 80065ca:	79fb      	ldrb	r3, [r7, #7]
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	8afb      	ldrh	r3, [r7, #22]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	8abb      	ldrh	r3, [r7, #20]
 80065d6:	4413      	add	r3, r2
 80065d8:	82bb      	strh	r3, [r7, #20]
        found=1;
 80065da:	2301      	movs	r3, #1
 80065dc:	743b      	strb	r3, [r7, #16]
        break;
 80065de:	e02d      	b.n	800663c <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	8afa      	ldrh	r2, [r7, #22]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d825      	bhi.n	8006636 <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80065ea:	89fa      	ldrh	r2, [r7, #14]
 80065ec:	8afb      	ldrh	r3, [r7, #22]
 80065ee:	1ad3      	subs	r3, r2, r3
 80065f0:	b29a      	uxth	r2, r3
 80065f2:	8abb      	ldrh	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	3301      	adds	r3, #1
 80065fa:	82bb      	strh	r3, [r7, #20]
      range=0;
 80065fc:	2300      	movs	r3, #0
 80065fe:	747b      	strb	r3, [r7, #17]
 8006600:	e00f      	b.n	8006622 <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	b29b      	uxth	r3, r3
 8006606:	89fa      	ldrh	r2, [r7, #14]
 8006608:	429a      	cmp	r2, r3
 800660a:	d102      	bne.n	8006612 <_UG_GetCharData+0x1e6>
      {
        found=1;
 800660c:	2301      	movs	r3, #1
 800660e:	743b      	strb	r3, [r7, #16]
        break;
 8006610:	e014      	b.n	800663c <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8006612:	79fb      	ldrb	r3, [r7, #7]
 8006614:	b29b      	uxth	r3, r3
 8006616:	89fa      	ldrh	r2, [r7, #14]
 8006618:	429a      	cmp	r2, r3
 800661a:	d80e      	bhi.n	800663a <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 800661c:	8abb      	ldrh	r3, [r7, #20]
 800661e:	3301      	adds	r3, #1
 8006620:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8006622:	8a7b      	ldrh	r3, [r7, #18]
 8006624:	3301      	adds	r3, #1
 8006626:	827b      	strh	r3, [r7, #18]
 8006628:	4b23      	ldr	r3, [pc, #140]	; (80066b8 <_UG_GetCharData+0x28c>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	8b9b      	ldrh	r3, [r3, #28]
 800662e:	8a7a      	ldrh	r2, [r7, #18]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3a7      	bcc.n	8006584 <_UG_GetCharData+0x158>
 8006634:	e002      	b.n	800663c <_UG_GetCharData+0x210>
        break;
 8006636:	bf00      	nop
 8006638:	e000      	b.n	800663c <_UG_GetCharData+0x210>
        break;
 800663a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 800663c:	7c3b      	ldrb	r3, [r7, #16]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d033      	beq.n	80066aa <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <_UG_GetCharData+0x28c>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006648:	4a1c      	ldr	r2, [pc, #112]	; (80066bc <_UG_GetCharData+0x290>)
 800664a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 800664c:	4a1c      	ldr	r2, [pc, #112]	; (80066c0 <_UG_GetCharData+0x294>)
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8006652:	4b19      	ldr	r3, [pc, #100]	; (80066b8 <_UG_GetCharData+0x28c>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006658:	8aba      	ldrh	r2, [r7, #20]
 800665a:	4917      	ldr	r1, [pc, #92]	; (80066b8 <_UG_GetCharData+0x28c>)
 800665c:	6809      	ldr	r1, [r1, #0]
 800665e:	8b09      	ldrh	r1, [r1, #24]
 8006660:	fb01 f202 	mul.w	r2, r1, r2
 8006664:	4413      	add	r3, r2
 8006666:	4a17      	ldr	r2, [pc, #92]	; (80066c4 <_UG_GetCharData+0x298>)
 8006668:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800666a:	4b13      	ldr	r3, [pc, #76]	; (80066b8 <_UG_GetCharData+0x28c>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8006674:	4b10      	ldr	r3, [pc, #64]	; (80066b8 <_UG_GetCharData+0x28c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6a1a      	ldr	r2, [r3, #32]
 800667a:	8abb      	ldrh	r3, [r7, #20]
 800667c:	4413      	add	r3, r2
 800667e:	781b      	ldrb	r3, [r3, #0]
 8006680:	b21a      	sxth	r2, r3
 8006682:	4b11      	ldr	r3, [pc, #68]	; (80066c8 <_UG_GetCharData+0x29c>)
 8006684:	801a      	strh	r2, [r3, #0]
 8006686:	e005      	b.n	8006694 <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8006688:	4b0b      	ldr	r3, [pc, #44]	; (80066b8 <_UG_GetCharData+0x28c>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	7d9b      	ldrb	r3, [r3, #22]
 800668e:	b21a      	sxth	r2, r3
 8006690:	4b0d      	ldr	r3, [pc, #52]	; (80066c8 <_UG_GetCharData+0x29c>)
 8006692:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 800669a:	4b0a      	ldr	r3, [pc, #40]	; (80066c4 <_UG_GetCharData+0x298>)
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80066a2:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <_UG_GetCharData+0x29c>)
 80066a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80066a8:	e001      	b.n	80066ae <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 80066aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3718      	adds	r7, #24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
 80066b6:	bf00      	nop
 80066b8:	20000504 	.word	0x20000504
 80066bc:	20000508 	.word	0x20000508
 80066c0:	2000050c 	.word	0x2000050c
 80066c4:	20000510 	.word	0x20000510
 80066c8:	20000514 	.word	0x20000514

080066cc <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 80066cc:	b590      	push	{r4, r7, lr}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80066d4:	4b3b      	ldr	r3, [pc, #236]	; (80067c4 <_UG_FontSelect+0xf8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d06c      	beq.n	80067ba <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80066e0:	4b38      	ldr	r3, [pc, #224]	; (80067c4 <_UG_FontSelect+0xf8>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	4b35      	ldr	r3, [pc, #212]	; (80067c4 <_UG_FontSelect+0xf8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	1c5a      	adds	r2, r3, #1
 80066fc:	607a      	str	r2, [r7, #4]
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	b25b      	sxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	da01      	bge.n	800670a <_UG_FontSelect+0x3e>
 8006706:	2201      	movs	r2, #1
 8006708:	e000      	b.n	800670c <_UG_FontSelect+0x40>
 800670a:	2200      	movs	r2, #0
 800670c:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <_UG_FontSelect+0xf8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	1c5a      	adds	r2, r3, #1
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	4a2a      	ldr	r2, [pc, #168]	; (80067c4 <_UG_FontSelect+0xf8>)
 800671c:	6812      	ldr	r2, [r2, #0]
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	4a26      	ldr	r2, [pc, #152]	; (80067c4 <_UG_FontSelect+0xf8>)
 800672a:	6812      	ldr	r2, [r2, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8006730:	4b24      	ldr	r3, [pc, #144]	; (80067c4 <_UG_FontSelect+0xf8>)
 8006732:	681c      	ldr	r4, [r3, #0]
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f7fe ff1f 	bl	8005578 <ptr_8to16>
 800673a:	4603      	mov	r3, r0
 800673c:	8363      	strh	r3, [r4, #26]
  font+=2;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3302      	adds	r3, #2
 8006742:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8006744:	4b1f      	ldr	r3, [pc, #124]	; (80067c4 <_UG_FontSelect+0xf8>)
 8006746:	681c      	ldr	r4, [r3, #0]
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f7fe ff15 	bl	8005578 <ptr_8to16>
 800674e:	4603      	mov	r3, r0
 8006750:	83a3      	strh	r3, [r4, #28]
  font+=2;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3302      	adds	r3, #2
 8006756:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8006758:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <_UG_FontSelect+0xf8>)
 800675a:	681c      	ldr	r4, [r3, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7fe ff0b 	bl	8005578 <ptr_8to16>
 8006762:	4603      	mov	r3, r0
 8006764:	8323      	strh	r3, [r4, #24]
  font+=2;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	3302      	adds	r3, #2
 800676a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	1c5a      	adds	r2, r3, #1
 8006770:	607a      	str	r2, [r7, #4]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d00b      	beq.n	8006790 <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8006778:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <_UG_FontSelect+0xf8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8006780:	4b10      	ldr	r3, [pc, #64]	; (80067c4 <_UG_FontSelect+0xf8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	8b5b      	ldrh	r3, [r3, #26]
 8006786:	461a      	mov	r2, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4413      	add	r3, r2
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	e003      	b.n	8006798 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8006790:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <_UG_FontSelect+0xf8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2200      	movs	r2, #0
 8006796:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <_UG_FontSelect+0xf8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80067a0:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <_UG_FontSelect+0xf8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	8b9b      	ldrh	r3, [r3, #28]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	461a      	mov	r2, r3
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	4413      	add	r3, r2
 80067ae:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 80067b0:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <_UG_FontSelect+0xf8>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	629a      	str	r2, [r3, #40]	; 0x28
 80067b8:	e000      	b.n	80067bc <_UG_FontSelect+0xf0>
    return;
 80067ba:	bf00      	nop
}
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd90      	pop	{r4, r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000504 	.word	0x20000504

080067c8 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 80067c8:	b5b0      	push	{r4, r5, r7, lr}
 80067ca:	b08c      	sub	sp, #48	; 0x30
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	4604      	mov	r4, r0
 80067d0:	4608      	mov	r0, r1
 80067d2:	4611      	mov	r1, r2
 80067d4:	461a      	mov	r2, r3
 80067d6:	4623      	mov	r3, r4
 80067d8:	71fb      	strb	r3, [r7, #7]
 80067da:	4603      	mov	r3, r0
 80067dc:	80bb      	strh	r3, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	807b      	strh	r3, [r7, #2]
 80067e2:	4613      	mov	r3, r2
 80067e4:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80067ea:	2300      	movs	r3, #0
 80067ec:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067ee:	2300      	movs	r3, #0
 80067f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80067f2:	2300      	movs	r3, #0
 80067f4:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80067f6:	4b8a      	ldr	r3, [pc, #552]	; (8006a20 <_UG_PutChar+0x258>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067fe:	75fb      	strb	r3, [r7, #23]
 8006800:	4b87      	ldr	r3, [pc, #540]	; (8006a20 <_UG_PutChar+0x258>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800680e:	2300      	movs	r3, #0
 8006810:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8006812:	f107 0208 	add.w	r2, r7, #8
 8006816:	79fb      	ldrb	r3, [r7, #7]
 8006818:	4611      	mov	r1, r2
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff fe06 	bl	800642c <_UG_GetCharData>
 8006820:	4603      	mov	r3, r0
 8006822:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8006824:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800682c:	d102      	bne.n	8006834 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800682e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006832:	e21e      	b.n	8006c72 <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 8006834:	4b7a      	ldr	r3, [pc, #488]	; (8006a20 <_UG_PutChar+0x258>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	7d9b      	ldrb	r3, [r3, #22]
 800683a:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 800683c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d101      	bne.n	8006846 <_UG_PutChar+0x7e>
     return 0;
 8006842:	2300      	movs	r3, #0
 8006844:	e215      	b.n	8006c72 <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 8006846:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006848:	08db      	lsrs	r3, r3, #3
 800684a:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800684c:	4b74      	ldr	r3, [pc, #464]	; (8006a20 <_UG_PutChar+0x258>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	7d9b      	ldrb	r3, [r3, #22]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <_UG_PutChar+0x9a>
 800685c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800685e:	3301      	adds	r3, #1
 8006860:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8006862:	7dbb      	ldrb	r3, [r7, #22]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01c      	beq.n	80068a2 <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8006868:	4b6d      	ldr	r3, [pc, #436]	; (8006a20 <_UG_PutChar+0x258>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686e:	461d      	mov	r5, r3
 8006870:	88ba      	ldrh	r2, [r7, #4]
 8006872:	8abb      	ldrh	r3, [r7, #20]
 8006874:	4413      	add	r3, r2
 8006876:	b29b      	uxth	r3, r3
 8006878:	3b01      	subs	r3, #1
 800687a:	b29b      	uxth	r3, r3
 800687c:	b21c      	sxth	r4, r3
 800687e:	4b68      	ldr	r3, [pc, #416]	; (8006a20 <_UG_PutChar+0x258>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	7ddb      	ldrb	r3, [r3, #23]
 8006884:	b29a      	uxth	r2, r3
 8006886:	887b      	ldrh	r3, [r7, #2]
 8006888:	4413      	add	r3, r2
 800688a:	b29b      	uxth	r3, r3
 800688c:	3b01      	subs	r3, #1
 800688e:	b29b      	uxth	r3, r3
 8006890:	b21b      	sxth	r3, r3
 8006892:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006896:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800689a:	4622      	mov	r2, r4
 800689c:	47a8      	blx	r5
 800689e:	4603      	mov	r3, r0
 80068a0:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80068a2:	4b5f      	ldr	r3, [pc, #380]	; (8006a20 <_UG_PutChar+0x258>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	7d1b      	ldrb	r3, [r3, #20]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 8171 	bne.w	8006b90 <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 80068ae:	2300      	movs	r3, #0
 80068b0:	853b      	strh	r3, [r7, #40]	; 0x28
 80068b2:	e0ec      	b.n	8006a8e <_UG_PutChar+0x2c6>
     {
       c=0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 80068b8:	2300      	movs	r3, #0
 80068ba:	857b      	strh	r3, [r7, #42]	; 0x2a
 80068bc:	e0df      	b.n	8006a7e <_UG_PutChar+0x2b6>
       {
         b = *data++;
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	60ba      	str	r2, [r7, #8]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80068c8:	2300      	movs	r3, #0
 80068ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80068cc:	e0ca      	b.n	8006a64 <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 80068ce:	7f7b      	ldrb	r3, [r7, #29]
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d033      	beq.n	8006940 <_UG_PutChar+0x178>
           {
             if(driver)
 80068d8:	7dbb      	ldrb	r3, [r7, #22]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d01f      	beq.n	800691e <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80068de:	8c3b      	ldrh	r3, [r7, #32]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00a      	beq.n	80068fa <_UG_PutChar+0x132>
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80068ea:	8c3a      	ldrh	r2, [r7, #32]
 80068ec:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	4610      	mov	r0, r2
 80068f4:	4798      	blx	r3
                 bpixels=0;
 80068f6:	2300      	movs	r3, #0
 80068f8:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80068fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <_UG_PutChar+0x14e>
 8006900:	7dfb      	ldrb	r3, [r7, #23]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 8006906:	88ba      	ldrh	r2, [r7, #4]
 8006908:	8bfb      	ldrh	r3, [r7, #30]
 800690a:	4413      	add	r3, r2
 800690c:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 800690e:	887a      	ldrh	r2, [r7, #2]
 8006910:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006912:	4413      	add	r3, r2
 8006914:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8006916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006918:	3301      	adds	r3, #1
 800691a:	847b      	strh	r3, [r7, #34]	; 0x22
 800691c:	e096      	b.n	8006a4c <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800691e:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <_UG_PutChar+0x258>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	88b9      	ldrh	r1, [r7, #4]
 8006928:	8bfa      	ldrh	r2, [r7, #30]
 800692a:	440a      	add	r2, r1
 800692c:	b292      	uxth	r2, r2
 800692e:	b210      	sxth	r0, r2
 8006930:	8879      	ldrh	r1, [r7, #2]
 8006932:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006934:	440a      	add	r2, r1
 8006936:	b292      	uxth	r2, r2
 8006938:	b211      	sxth	r1, r2
 800693a:	883a      	ldrh	r2, [r7, #0]
 800693c:	4798      	blx	r3
 800693e:	e085      	b.n	8006a4c <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8006940:	7dbb      	ldrb	r3, [r7, #22]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d06e      	beq.n	8006a24 <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8006946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006948:	2b00      	cmp	r3, #0
 800694a:	d064      	beq.n	8006a16 <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800694c:	7dfb      	ldrb	r3, [r7, #23]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d15e      	bne.n	8006a10 <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 8006952:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006954:	8839      	ldrh	r1, [r7, #0]
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	4610      	mov	r0, r2
 800695a:	4798      	blx	r3
                   fpixels=0;
 800695c:	2300      	movs	r3, #0
 800695e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006960:	e059      	b.n	8006a16 <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8006962:	88ba      	ldrh	r2, [r7, #4]
 8006964:	8abb      	ldrh	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
 8006968:	b29a      	uxth	r2, r3
 800696a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8006970:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006972:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d003      	beq.n	8006982 <_UG_PutChar+0x1ba>
 800697a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800697c:	89fb      	ldrh	r3, [r7, #14]
 800697e:	429a      	cmp	r2, r3
 8006980:	d224      	bcs.n	80069cc <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006982:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <_UG_PutChar+0x258>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006988:	461d      	mov	r5, r3
 800698a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800698e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006992:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006994:	89fb      	ldrh	r3, [r7, #14]
 8006996:	4413      	add	r3, r2
 8006998:	b29b      	uxth	r3, r3
 800699a:	3b01      	subs	r3, #1
 800699c:	b29b      	uxth	r3, r3
 800699e:	b21c      	sxth	r4, r3
 80069a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069a2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80069a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80069aa:	b29a      	uxth	r2, r3
 80069ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069ae:	4413      	add	r3, r2
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	b21b      	sxth	r3, r3
 80069b4:	4622      	mov	r2, r4
 80069b6:	47a8      	blx	r5
 80069b8:	4603      	mov	r3, r0
 80069ba:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80069bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069be:	8839      	ldrh	r1, [r7, #0]
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	4610      	mov	r0, r2
 80069c4:	4798      	blx	r3
                       fpixels=0;
 80069c6:	2300      	movs	r3, #0
 80069c8:	847b      	strh	r3, [r7, #34]	; 0x22
 80069ca:	e021      	b.n	8006a10 <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 80069cc:	4b14      	ldr	r3, [pc, #80]	; (8006a20 <_UG_PutChar+0x258>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069d2:	461c      	mov	r4, r3
 80069d4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80069d8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80069dc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069de:	89fb      	ldrh	r3, [r7, #14]
 80069e0:	4413      	add	r3, r2
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	3b01      	subs	r3, #1
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	b21a      	sxth	r2, r3
 80069ea:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80069ee:	47a0      	blx	r4
 80069f0:	4603      	mov	r3, r0
 80069f2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80069f4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069f6:	8839      	ldrh	r1, [r7, #0]
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
                       fpixels -= width;
 80069fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a00:	89fb      	ldrh	r3, [r7, #14]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8006a06:	88bb      	ldrh	r3, [r7, #4]
 8006a08:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8006a0a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8006a10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1a5      	bne.n	8006962 <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 8006a16:	8c3b      	ldrh	r3, [r7, #32]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	843b      	strh	r3, [r7, #32]
 8006a1c:	e016      	b.n	8006a4c <_UG_PutChar+0x284>
 8006a1e:	bf00      	nop
 8006a20:	20000504 	.word	0x20000504
             }
             else if(!trans)                           // Not accelerated output
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d110      	bne.n	8006a4c <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 8006a2a:	4b94      	ldr	r3, [pc, #592]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	88b9      	ldrh	r1, [r7, #4]
 8006a34:	8bfa      	ldrh	r2, [r7, #30]
 8006a36:	440a      	add	r2, r1
 8006a38:	b292      	uxth	r2, r2
 8006a3a:	b210      	sxth	r0, r2
 8006a3c:	8879      	ldrh	r1, [r7, #2]
 8006a3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a40:	440a      	add	r2, r1
 8006a42:	b292      	uxth	r2, r2
 8006a44:	b211      	sxth	r1, r2
 8006a46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006a4a:	4798      	blx	r3
             }
           }
           b >>= 1;
 8006a4c:	7f7b      	ldrb	r3, [r7, #29]
 8006a4e:	085b      	lsrs	r3, r3, #1
 8006a50:	777b      	strb	r3, [r7, #29]
           c++;
 8006a52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	3301      	adds	r3, #1
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006a5e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a60:	3301      	adds	r3, #1
 8006a62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a66:	2b07      	cmp	r3, #7
 8006a68:	d806      	bhi.n	8006a78 <_UG_PutChar+0x2b0>
 8006a6a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006a6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	f6ff af2b 	blt.w	80068ce <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 8006a78:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a7e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006a80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a82:	429a      	cmp	r2, r3
 8006a84:	f4ff af1b 	bcc.w	80068be <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006a88:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a8a:	3301      	adds	r3, #1
 8006a8c:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a8e:	4b7b      	ldr	r3, [pc, #492]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	7ddb      	ldrb	r3, [r3, #23]
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a98:	429a      	cmp	r2, r3
 8006a9a:	f4ff af0b 	bcc.w	80068b4 <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006a9e:	7dbb      	ldrb	r3, [r7, #22]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80e4 	beq.w	8006c6e <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 8006aa6:	8c3b      	ldrh	r3, [r7, #32]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d009      	beq.n	8006ac0 <_UG_PutChar+0x2f8>
 8006aac:	7dfb      	ldrb	r3, [r7, #23]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 8006ab2:	8c3a      	ldrh	r2, [r7, #32]
 8006ab4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	4610      	mov	r0, r2
 8006abc:	4798      	blx	r3
 8006abe:	e0d6      	b.n	8006c6e <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 8006ac0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 80d3 	beq.w	8006c6e <_UG_PutChar+0x4a6>
       {
         if(!trans)
 8006ac8:	7dfb      	ldrb	r3, [r7, #23]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d15c      	bne.n	8006b88 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 8006ace:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ad0:	8839      	ldrh	r1, [r7, #0]
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	4610      	mov	r0, r2
 8006ad6:	4798      	blx	r3
 8006ad8:	e0c9      	b.n	8006c6e <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006ada:	88ba      	ldrh	r2, [r7, #4]
 8006adc:	8abb      	ldrh	r3, [r7, #20]
 8006ade:	4413      	add	r3, r2
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8006ae8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d003      	beq.n	8006afa <_UG_PutChar+0x332>
 8006af2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006af4:	8a3b      	ldrh	r3, [r7, #16]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d224      	bcs.n	8006b44 <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006afa:	4b60      	ldr	r3, [pc, #384]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b00:	461d      	mov	r5, r3
 8006b02:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006b06:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006b0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b0c:	8a3b      	ldrh	r3, [r7, #16]
 8006b0e:	4413      	add	r3, r2
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	3b01      	subs	r3, #1
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	b21c      	sxth	r4, r3
 8006b18:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b1a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b1e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006b22:	b29a      	uxth	r2, r3
 8006b24:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b26:	4413      	add	r3, r2
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	4622      	mov	r2, r4
 8006b2e:	47a8      	blx	r5
 8006b30:	4603      	mov	r3, r0
 8006b32:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006b34:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b36:	8839      	ldrh	r1, [r7, #0]
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	4798      	blx	r3
               fpixels=0;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b42:	e021      	b.n	8006b88 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006b44:	4b4d      	ldr	r3, [pc, #308]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006b50:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006b54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b56:	8a3b      	ldrh	r3, [r7, #16]
 8006b58:	4413      	add	r3, r2
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	b21a      	sxth	r2, r3
 8006b62:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006b66:	47a0      	blx	r4
 8006b68:	4603      	mov	r3, r0
 8006b6a:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006b6c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b6e:	8839      	ldrh	r1, [r7, #0]
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	4610      	mov	r0, r2
 8006b74:	4798      	blx	r3
               fpixels -= width;
 8006b76:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b78:	8a3b      	ldrh	r3, [r7, #16]
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8006b7e:	88bb      	ldrh	r3, [r7, #4]
 8006b80:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8006b82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b84:	3301      	adds	r3, #1
 8006b86:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8006b88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1a5      	bne.n	8006ada <_UG_PutChar+0x312>
 8006b8e:	e06e      	b.n	8006c6e <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006b90:	4b3a      	ldr	r3, [pc, #232]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	7d1b      	ldrb	r3, [r3, #20]
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d169      	bne.n	8006c6e <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b9e:	e05f      	b.n	8006c60 <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ba4:	e04a      	b.n	8006c3c <_UG_PutChar+0x474>
       {
         b = *data++;
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	1c5a      	adds	r2, r3, #1
 8006baa:	60ba      	str	r2, [r7, #8]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006bb0:	883b      	ldrh	r3, [r7, #0]
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	7f7a      	ldrb	r2, [r7, #29]
 8006bb6:	fb03 f202 	mul.w	r2, r3, r2
 8006bba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	7f79      	ldrb	r1, [r7, #29]
 8006bc2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	4413      	add	r3, r2
 8006bcc:	121b      	asrs	r3, r3, #8
 8006bce:	b21b      	sxth	r3, r3
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8006bd4:	883b      	ldrh	r3, [r7, #0]
 8006bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bda:	7f79      	ldrb	r1, [r7, #29]
 8006bdc:	fb03 f101 	mul.w	r1, r3, r1
 8006be0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006be4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006be8:	7f78      	ldrb	r0, [r7, #29]
 8006bea:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006bee:	fb00 f303 	mul.w	r3, r0, r3
 8006bf2:	440b      	add	r3, r1
 8006bf4:	121b      	asrs	r3, r3, #8
 8006bf6:	b21b      	sxth	r3, r3
 8006bf8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bfc:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	b21b      	sxth	r3, r3
 8006c02:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006c04:	7dbb      	ldrb	r3, [r7, #22]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d005      	beq.n	8006c16 <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006c0a:	8a7a      	ldrh	r2, [r7, #18]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	4611      	mov	r1, r2
 8006c10:	2001      	movs	r0, #1
 8006c12:	4798      	blx	r3
 8006c14:	e00f      	b.n	8006c36 <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006c16:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	88b9      	ldrh	r1, [r7, #4]
 8006c20:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006c22:	440a      	add	r2, r1
 8006c24:	b292      	uxth	r2, r2
 8006c26:	b210      	sxth	r0, r2
 8006c28:	8879      	ldrh	r1, [r7, #2]
 8006c2a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c2c:	440a      	add	r2, r1
 8006c2e:	b292      	uxth	r2, r2
 8006c30:	b211      	sxth	r1, r2
 8006c32:	8a7a      	ldrh	r2, [r7, #18]
 8006c34:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006c36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c38:	3301      	adds	r3, #1
 8006c3a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c3c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006c3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c42:	429a      	cmp	r2, r3
 8006c44:	dbaf      	blt.n	8006ba6 <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006c4a:	6812      	ldr	r2, [r2, #0]
 8006c4c:	7d92      	ldrb	r2, [r2, #22]
 8006c4e:	4611      	mov	r1, r2
 8006c50:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006c54:	1a8a      	subs	r2, r1, r2
 8006c56:	4413      	add	r3, r2
 8006c58:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006c5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <_UG_PutChar+0x4b4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	7ddb      	ldrb	r3, [r3, #23]
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d398      	bcc.n	8006ba0 <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8006c6e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3730      	adds	r7, #48	; 0x30
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bdb0      	pop	{r4, r5, r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	20000504 	.word	0x20000504

08006c80 <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	781b      	ldrb	r3, [r3, #0]
 8006c8c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006c8e:	2300      	movs	r3, #0
 8006c90:	82fb      	strh	r3, [r7, #22]
 8006c92:	e01f      	b.n	8006cd4 <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	8afb      	ldrh	r3, [r7, #22]
 8006c9a:	015b      	lsls	r3, r3, #5
 8006c9c:	4413      	add	r3, r2
 8006c9e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006ca6:	7bfb      	ldrb	r3, [r7, #15]
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10e      	bne.n	8006cce <_UG_UpdateObjects+0x4e>
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d004      	beq.n	8006cce <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	6939      	ldr	r1, [r7, #16]
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006cce:	8afb      	ldrh	r3, [r7, #22]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	82fb      	strh	r3, [r7, #22]
 8006cd4:	8afa      	ldrh	r2, [r7, #22]
 8006cd6:	8abb      	ldrh	r3, [r7, #20]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d3db      	bcc.n	8006c94 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006cdc:	bf00      	nop
 8006cde:	bf00      	nop
 8006ce0:	3718      	adds	r7, #24
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006cf0:	4b22      	ldr	r3, [pc, #136]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006cf6:	4b21      	ldr	r3, [pc, #132]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006d02:	2300      	movs	r3, #0
 8006d04:	82fb      	strh	r3, [r7, #22]
 8006d06:	e02f      	b.n	8006d68 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	8afb      	ldrh	r3, [r7, #22]
 8006d0e:	015b      	lsls	r3, r3, #5
 8006d10:	4413      	add	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d11e      	bne.n	8006d62 <_UG_HandleEvents+0x7a>
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	f003 0302 	and.w	r3, r3, #2
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d019      	beq.n	8006d62 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	7e9b      	ldrb	r3, [r3, #26]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d015      	beq.n	8006d62 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8006d36:	4a11      	ldr	r2, [pc, #68]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	7e1a      	ldrb	r2, [r3, #24]
 8006d40:	4b0e      	ldr	r3, [pc, #56]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006d42:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	7e5a      	ldrb	r2, [r3, #25]
 8006d48:	4b0c      	ldr	r3, [pc, #48]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006d4a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	7e9a      	ldrb	r2, [r3, #26]
 8006d50:	4b0a      	ldr	r3, [pc, #40]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006d52:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d58:	4808      	ldr	r0, [pc, #32]	; (8006d7c <_UG_HandleEvents+0x94>)
 8006d5a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006d62:	8afb      	ldrh	r3, [r7, #22]
 8006d64:	3301      	adds	r3, #1
 8006d66:	82fb      	strh	r3, [r7, #22]
 8006d68:	8afa      	ldrh	r2, [r7, #22]
 8006d6a:	8abb      	ldrh	r3, [r7, #20]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d3cb      	bcc.n	8006d08 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006d70:	bf00      	nop
 8006d72:	bf00      	nop
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000518 	.word	0x20000518

08006d80 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b08f      	sub	sp, #60	; 0x3c
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8102 	beq.w	8006f96 <_UG_PutText+0x216>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	f000 80fd 	beq.w	8006f96 <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	89db      	ldrh	r3, [r3, #14]
 8006da0:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	895b      	ldrh	r3, [r3, #10]
 8006da6:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	3302      	adds	r3, #2
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 8006db2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006db6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006dba:	1ad2      	subs	r2, r2, r3
 8006dbc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	f2c0 80ea 	blt.w	8006f9a <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	891b      	ldrh	r3, [r3, #8]
 8006dca:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	899b      	ldrh	r3, [r3, #12]
 8006dd0:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	7d1b      	ldrb	r3, [r3, #20]
 8006dd6:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	8adb      	ldrh	r3, [r3, #22]
 8006ddc:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	8b1b      	ldrh	r3, [r3, #24]
 8006de2:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	623b      	str	r3, [r7, #32]
   char* c = str;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fc6a 	bl	80066cc <_UG_FontSelect>

   rc=1;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8006dfc:	6a3b      	ldr	r3, [r7, #32]
 8006dfe:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	1c5a      	adds	r2, r3, #1
 8006e04:	61fa      	str	r2, [r7, #28]
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 8006e0a:	7afb      	ldrb	r3, [r7, #11]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d006      	beq.n	8006e1e <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8006e10:	7afb      	ldrb	r3, [r7, #11]
 8006e12:	2b0a      	cmp	r3, #10
 8006e14:	d1f4      	bne.n	8006e00 <_UG_PutText+0x80>
 8006e16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e18:	3301      	adds	r3, #1
 8006e1a:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8006e1c:	e7f0      	b.n	8006e00 <_UG_PutText+0x80>
     if(!chr) break;
 8006e1e:	bf00      	nop
   }

   yp = 0;
 8006e20:	2300      	movs	r3, #0
 8006e22:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006e24:	7c7b      	ldrb	r3, [r7, #17]
 8006e26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01f      	beq.n	8006e6e <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8006e2e:	8b7a      	ldrh	r2, [r7, #26]
 8006e30:	8b3b      	ldrh	r3, [r7, #24]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	3301      	adds	r3, #1
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8006e3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e3e:	8afb      	ldrh	r3, [r7, #22]
 8006e40:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006e42:	fb11 f303 	smulbb	r3, r1, r3
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8006e4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e50:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e52:	3b01      	subs	r3, #1
 8006e54:	b299      	uxth	r1, r3
 8006e56:	89bb      	ldrh	r3, [r7, #12]
 8006e58:	fb11 f303 	smulbb	r3, r1, r3
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8006e64:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f2c0 8098 	blt.w	8006f9e <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006e6e:	7c7b      	ldrb	r3, [r7, #17]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <_UG_PutText+0x100>
 8006e78:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e7c:	105b      	asrs	r3, r3, #1
 8006e7e:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8006e80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e82:	8b3b      	ldrh	r3, [r7, #24]
 8006e84:	4413      	add	r3, r2
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	61fa      	str	r2, [r7, #28]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01b      	beq.n	8006ede <_UG_PutText+0x15e>
 8006ea6:	7afb      	ldrb	r3, [r7, #11]
 8006ea8:	2b0a      	cmp	r3, #10
 8006eaa:	d018      	beq.n	8006ede <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006eac:	7afb      	ldrb	r3, [r7, #11]
 8006eae:	2100      	movs	r1, #0
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fabb 	bl	800642c <_UG_GetCharData>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 8006eba:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec2:	d00a      	beq.n	8006eda <_UG_PutText+0x15a>
         sl++;
 8006ec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8006eca:	893a      	ldrh	r2, [r7, #8]
 8006ecc:	89fb      	ldrh	r3, [r7, #14]
 8006ece:	4413      	add	r3, r2
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ed4:	4413      	add	r3, r2
 8006ed6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ed8:	e7dd      	b.n	8006e96 <_UG_PutText+0x116>
         if (w == -1){continue;}
 8006eda:	bf00      	nop
        chr = *c++;
 8006edc:	e7db      	b.n	8006e96 <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8006ede:	89fb      	ldrh	r3, [r7, #14]
 8006ee0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8006ee6:	8a7a      	ldrh	r2, [r7, #18]
 8006ee8:	8abb      	ldrh	r3, [r7, #20]
 8006eea:	1ad3      	subs	r3, r2, r3
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	3301      	adds	r3, #1
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8006ef4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006ef6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ef8:	1ad3      	subs	r3, r2, r3
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8006efe:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	db4d      	blt.n	8006fa2 <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006f06:	7c7b      	ldrb	r3, [r7, #17]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <_UG_PutText+0x196>
 8006f10:	2300      	movs	r3, #0
 8006f12:	853b      	strh	r3, [r7, #40]	; 0x28
 8006f14:	e008      	b.n	8006f28 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006f16:	7c7b      	ldrb	r3, [r7, #17]
 8006f18:	f003 0302 	and.w	r3, r3, #2
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d003      	beq.n	8006f28 <_UG_PutText+0x1a8>
 8006f20:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006f24:	105b      	asrs	r3, r3, #1
 8006f26:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8006f28:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006f2a:	8abb      	ldrh	r3, [r7, #20]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	1c5a      	adds	r2, r3, #1
 8006f36:	623a      	str	r2, [r7, #32]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8006f3c:	7afb      	ldrb	r3, [r7, #11]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d031      	beq.n	8006fa6 <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 8006f42:	7afb      	ldrb	r3, [r7, #11]
 8006f44:	2b0a      	cmp	r3, #10
 8006f46:	d01c      	beq.n	8006f82 <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8a1c      	ldrh	r4, [r3, #16]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	8a5b      	ldrh	r3, [r3, #18]
 8006f50:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006f54:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8006f58:	7af8      	ldrb	r0, [r7, #11]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	4623      	mov	r3, r4
 8006f5e:	f7ff fc33 	bl	80067c8 <_UG_PutChar>
 8006f62:	4603      	mov	r3, r0
 8006f64:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 8006f66:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f6e:	d0e0      	beq.n	8006f32 <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8006f70:	893a      	ldrh	r2, [r7, #8]
 8006f72:	89fb      	ldrh	r3, [r7, #14]
 8006f74:	4413      	add	r3, r2
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f7a:	4413      	add	r3, r2
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 8006f80:	e7d7      	b.n	8006f32 <_UG_PutText+0x1b2>
           break;
 8006f82:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006f84:	8afa      	ldrh	r2, [r7, #22]
 8006f86:	89bb      	ldrh	r3, [r7, #12]
 8006f88:	4413      	add	r3, r2
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f8e:	4413      	add	r3, r2
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8006f94:	e779      	b.n	8006e8a <_UG_PutText+0x10a>
     return;
 8006f96:	bf00      	nop
 8006f98:	e006      	b.n	8006fa8 <_UG_PutText+0x228>
     return;
 8006f9a:	bf00      	nop
 8006f9c:	e004      	b.n	8006fa8 <_UG_PutText+0x228>
        return;
 8006f9e:	bf00      	nop
 8006fa0:	e002      	b.n	8006fa8 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <_UG_PutText+0x228>
           return;
 8006fa6:	bf00      	nop
   }
}
 8006fa8:	3734      	adds	r7, #52	; 0x34
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd90      	pop	{r4, r7, pc}

08006fae <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	70fb      	strb	r3, [r7, #3]
 8006fba:	4613      	mov	r3, r2
 8006fbc:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	e020      	b.n	800700c <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	015b      	lsls	r3, r3, #5
 8006fd2:	4413      	add	r3, r2
 8006fd4:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d111      	bne.n	8007006 <_UG_SearchObject+0x58>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	781b      	ldrb	r3, [r3, #0]
 8006fe6:	f003 0302 	and.w	r3, r3, #2
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	7e1b      	ldrb	r3, [r3, #24]
 8006ff2:	78fa      	ldrb	r2, [r7, #3]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d106      	bne.n	8007006 <_UG_SearchObject+0x58>
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	7e5b      	ldrb	r3, [r3, #25]
 8006ffc:	78ba      	ldrb	r2, [r7, #2]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d101      	bne.n	8007006 <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	e008      	b.n	8007018 <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	3301      	adds	r3, #1
 800700a:	73fb      	strb	r3, [r7, #15]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	7bfa      	ldrb	r2, [r7, #15]
 8007012:	429a      	cmp	r2, r3
 8007014:	d3d9      	bcc.n	8006fca <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3714      	adds	r7, #20
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr

08007024 <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8007024:	b5b0      	push	{r4, r5, r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af02      	add	r7, sp, #8
 800702a:	4604      	mov	r4, r0
 800702c:	4608      	mov	r0, r1
 800702e:	4611      	mov	r1, r2
 8007030:	461a      	mov	r2, r3
 8007032:	4623      	mov	r3, r4
 8007034:	80fb      	strh	r3, [r7, #6]
 8007036:	4603      	mov	r3, r0
 8007038:	80bb      	strh	r3, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	807b      	strh	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007042:	887b      	ldrh	r3, [r7, #2]
 8007044:	3b01      	subs	r3, #1
 8007046:	b29b      	uxth	r3, r3
 8007048:	b21c      	sxth	r4, r3
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	1c9a      	adds	r2, r3, #2
 800704e:	61ba      	str	r2, [r7, #24]
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007056:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800705a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	4613      	mov	r3, r2
 8007062:	4622      	mov	r2, r4
 8007064:	f7fe fe50 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8007068:	88bb      	ldrh	r3, [r7, #4]
 800706a:	3301      	adds	r3, #1
 800706c:	b29b      	uxth	r3, r3
 800706e:	b219      	sxth	r1, r3
 8007070:	883b      	ldrh	r3, [r7, #0]
 8007072:	3b01      	subs	r3, #1
 8007074:	b29b      	uxth	r3, r3
 8007076:	b21c      	sxth	r4, r3
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	1c9a      	adds	r2, r3, #2
 800707c:	61ba      	str	r2, [r7, #24]
 800707e:	881b      	ldrh	r3, [r3, #0]
 8007080:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007084:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	4623      	mov	r3, r4
 800708c:	f7fe fe3c 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	61ba      	str	r2, [r7, #24]
 8007096:	881b      	ldrh	r3, [r3, #0]
 8007098:	f9b7 4000 	ldrsh.w	r4, [r7]
 800709c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80070a0:	f9b7 1000 	ldrsh.w	r1, [r7]
 80070a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	4623      	mov	r3, r4
 80070ac:	f7fe fe2c 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 80070b0:	883b      	ldrh	r3, [r7, #0]
 80070b2:	3b01      	subs	r3, #1
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	b21c      	sxth	r4, r3
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	1c9a      	adds	r2, r3, #2
 80070bc:	61ba      	str	r2, [r7, #24]
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80070c4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80070c8:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	4623      	mov	r3, r4
 80070d0:	f7fe fe1a 	bl	8005d08 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	3301      	adds	r3, #1
 80070d8:	b29b      	uxth	r3, r3
 80070da:	b218      	sxth	r0, r3
 80070dc:	88bb      	ldrh	r3, [r7, #4]
 80070de:	3301      	adds	r3, #1
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	b219      	sxth	r1, r3
 80070e4:	887b      	ldrh	r3, [r7, #2]
 80070e6:	3b02      	subs	r3, #2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	b21c      	sxth	r4, r3
 80070ec:	88bb      	ldrh	r3, [r7, #4]
 80070ee:	3301      	adds	r3, #1
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	b21d      	sxth	r5, r3
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	1c9a      	adds	r2, r3, #2
 80070f8:	61ba      	str	r2, [r7, #24]
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	462b      	mov	r3, r5
 8007100:	4622      	mov	r2, r4
 8007102:	f7fe fe01 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8007106:	88fb      	ldrh	r3, [r7, #6]
 8007108:	3301      	adds	r3, #1
 800710a:	b29b      	uxth	r3, r3
 800710c:	b218      	sxth	r0, r3
 800710e:	88bb      	ldrh	r3, [r7, #4]
 8007110:	3302      	adds	r3, #2
 8007112:	b29b      	uxth	r3, r3
 8007114:	b219      	sxth	r1, r3
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	3301      	adds	r3, #1
 800711a:	b29b      	uxth	r3, r3
 800711c:	b21c      	sxth	r4, r3
 800711e:	883b      	ldrh	r3, [r7, #0]
 8007120:	3b02      	subs	r3, #2
 8007122:	b29b      	uxth	r3, r3
 8007124:	b21d      	sxth	r5, r3
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	1c9a      	adds	r2, r3, #2
 800712a:	61ba      	str	r2, [r7, #24]
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	462b      	mov	r3, r5
 8007132:	4622      	mov	r2, r4
 8007134:	f7fe fde8 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007138:	88fb      	ldrh	r3, [r7, #6]
 800713a:	3301      	adds	r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	b218      	sxth	r0, r3
 8007140:	883b      	ldrh	r3, [r7, #0]
 8007142:	3b01      	subs	r3, #1
 8007144:	b29b      	uxth	r3, r3
 8007146:	b219      	sxth	r1, r3
 8007148:	887b      	ldrh	r3, [r7, #2]
 800714a:	3b01      	subs	r3, #1
 800714c:	b29b      	uxth	r3, r3
 800714e:	b21c      	sxth	r4, r3
 8007150:	883b      	ldrh	r3, [r7, #0]
 8007152:	3b01      	subs	r3, #1
 8007154:	b29b      	uxth	r3, r3
 8007156:	b21d      	sxth	r5, r3
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	1c9a      	adds	r2, r3, #2
 800715c:	61ba      	str	r2, [r7, #24]
 800715e:	881b      	ldrh	r3, [r3, #0]
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	462b      	mov	r3, r5
 8007164:	4622      	mov	r2, r4
 8007166:	f7fe fdcf 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800716a:	887b      	ldrh	r3, [r7, #2]
 800716c:	3b01      	subs	r3, #1
 800716e:	b29b      	uxth	r3, r3
 8007170:	b218      	sxth	r0, r3
 8007172:	88bb      	ldrh	r3, [r7, #4]
 8007174:	3301      	adds	r3, #1
 8007176:	b29b      	uxth	r3, r3
 8007178:	b219      	sxth	r1, r3
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	3b01      	subs	r3, #1
 800717e:	b29b      	uxth	r3, r3
 8007180:	b21c      	sxth	r4, r3
 8007182:	883b      	ldrh	r3, [r7, #0]
 8007184:	3b02      	subs	r3, #2
 8007186:	b29b      	uxth	r3, r3
 8007188:	b21d      	sxth	r5, r3
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	1c9a      	adds	r2, r3, #2
 800718e:	61ba      	str	r2, [r7, #24]
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	9300      	str	r3, [sp, #0]
 8007194:	462b      	mov	r3, r5
 8007196:	4622      	mov	r2, r4
 8007198:	f7fe fdb6 	bl	8005d08 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 800719c:	88fb      	ldrh	r3, [r7, #6]
 800719e:	3302      	adds	r3, #2
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	b218      	sxth	r0, r3
 80071a4:	88bb      	ldrh	r3, [r7, #4]
 80071a6:	3302      	adds	r3, #2
 80071a8:	b29b      	uxth	r3, r3
 80071aa:	b219      	sxth	r1, r3
 80071ac:	887b      	ldrh	r3, [r7, #2]
 80071ae:	3b03      	subs	r3, #3
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	b21c      	sxth	r4, r3
 80071b4:	88bb      	ldrh	r3, [r7, #4]
 80071b6:	3302      	adds	r3, #2
 80071b8:	b29b      	uxth	r3, r3
 80071ba:	b21d      	sxth	r5, r3
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	1c9a      	adds	r2, r3, #2
 80071c0:	61ba      	str	r2, [r7, #24]
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	9300      	str	r3, [sp, #0]
 80071c6:	462b      	mov	r3, r5
 80071c8:	4622      	mov	r2, r4
 80071ca:	f7fe fd9d 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 80071ce:	88fb      	ldrh	r3, [r7, #6]
 80071d0:	3302      	adds	r3, #2
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	b218      	sxth	r0, r3
 80071d6:	88bb      	ldrh	r3, [r7, #4]
 80071d8:	3303      	adds	r3, #3
 80071da:	b29b      	uxth	r3, r3
 80071dc:	b219      	sxth	r1, r3
 80071de:	88fb      	ldrh	r3, [r7, #6]
 80071e0:	3302      	adds	r3, #2
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	b21c      	sxth	r4, r3
 80071e6:	883b      	ldrh	r3, [r7, #0]
 80071e8:	3b03      	subs	r3, #3
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	b21d      	sxth	r5, r3
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	61ba      	str	r2, [r7, #24]
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	462b      	mov	r3, r5
 80071fa:	4622      	mov	r2, r4
 80071fc:	f7fe fd84 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 8007200:	88fb      	ldrh	r3, [r7, #6]
 8007202:	3302      	adds	r3, #2
 8007204:	b29b      	uxth	r3, r3
 8007206:	b218      	sxth	r0, r3
 8007208:	883b      	ldrh	r3, [r7, #0]
 800720a:	3b02      	subs	r3, #2
 800720c:	b29b      	uxth	r3, r3
 800720e:	b219      	sxth	r1, r3
 8007210:	887b      	ldrh	r3, [r7, #2]
 8007212:	3b02      	subs	r3, #2
 8007214:	b29b      	uxth	r3, r3
 8007216:	b21c      	sxth	r4, r3
 8007218:	883b      	ldrh	r3, [r7, #0]
 800721a:	3b02      	subs	r3, #2
 800721c:	b29b      	uxth	r3, r3
 800721e:	b21d      	sxth	r5, r3
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	1c9a      	adds	r2, r3, #2
 8007224:	61ba      	str	r2, [r7, #24]
 8007226:	881b      	ldrh	r3, [r3, #0]
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	462b      	mov	r3, r5
 800722c:	4622      	mov	r2, r4
 800722e:	f7fe fd6b 	bl	8005d08 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8007232:	887b      	ldrh	r3, [r7, #2]
 8007234:	3b02      	subs	r3, #2
 8007236:	b29b      	uxth	r3, r3
 8007238:	b218      	sxth	r0, r3
 800723a:	88bb      	ldrh	r3, [r7, #4]
 800723c:	3302      	adds	r3, #2
 800723e:	b29b      	uxth	r3, r3
 8007240:	b219      	sxth	r1, r3
 8007242:	887b      	ldrh	r3, [r7, #2]
 8007244:	3b02      	subs	r3, #2
 8007246:	b29b      	uxth	r3, r3
 8007248:	b21a      	sxth	r2, r3
 800724a:	883b      	ldrh	r3, [r7, #0]
 800724c:	3b03      	subs	r3, #3
 800724e:	b29b      	uxth	r3, r3
 8007250:	b21c      	sxth	r4, r3
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4623      	mov	r3, r4
 800725a:	f7fe fd55 	bl	8005d08 <UG_DrawLine>
}
 800725e:	bf00      	nop
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bdb0      	pop	{r4, r5, r7, pc}

08007266 <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 8007266:	b480      	push	{r7}
 8007268:	b085      	sub	sp, #20
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8007274:	2300      	movs	r3, #0
 8007276:	73fb      	strb	r3, [r7, #15]
 8007278:	e016      	b.n	80072a8 <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	7bfb      	ldrb	r3, [r7, #15]
 8007280:	015b      	lsls	r3, r3, #5
 8007282:	4413      	add	r3, r2
 8007284:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d007      	beq.n	80072a2 <_UG_GetFreeObject+0x3c>
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0302 	and.w	r3, r3, #2
 800729a:	2b00      	cmp	r3, #0
 800729c:	d001      	beq.n	80072a2 <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	e008      	b.n	80072b4 <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	3301      	adds	r3, #1
 80072a6:	73fb      	strb	r3, [r7, #15]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	429a      	cmp	r2, r3
 80072b0:	d3e3      	bcc.n	800727a <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	4603      	mov	r3, r0
 80072c8:	6039      	str	r1, [r7, #0]
 80072ca:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80072cc:	79fb      	ldrb	r3, [r7, #7]
 80072ce:	2b03      	cmp	r3, #3
 80072d0:	d810      	bhi.n	80072f4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80072d2:	4b0b      	ldr	r3, [pc, #44]	; (8007300 <UG_DriverRegister+0x40>)
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	79fb      	ldrb	r3, [r7, #7]
 80072d8:	3307      	adds	r3, #7
 80072da:	00db      	lsls	r3, r3, #3
 80072dc:	4413      	add	r3, r2
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80072e2:	4b07      	ldr	r3, [pc, #28]	; (8007300 <UG_DriverRegister+0x40>)
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	79fb      	ldrb	r3, [r7, #7]
 80072e8:	3307      	adds	r3, #7
 80072ea:	00db      	lsls	r3, r3, #3
 80072ec:	4413      	add	r3, r2
 80072ee:	2203      	movs	r2, #3
 80072f0:	721a      	strb	r2, [r3, #8]
 80072f2:	e000      	b.n	80072f6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80072f4:	bf00      	nop
}
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	20000504 	.word	0x20000504

08007304 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b082      	sub	sp, #8
 8007308:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 800730a:	4b5d      	ldr	r3, [pc, #372]	; (8007480 <UG_Update+0x17c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007312:	f003 0301 	and.w	r3, r3, #1
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <UG_Update+0x2c>
 800731a:	4b59      	ldr	r3, [pc, #356]	; (8007480 <UG_Update+0x17c>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8007322:	4b57      	ldr	r3, [pc, #348]	; (8007480 <UG_Update+0x17c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f022 0201 	bic.w	r2, r2, #1
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8007330:	4b53      	ldr	r3, [pc, #332]	; (8007480 <UG_Update+0x17c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685a      	ldr	r2, [r3, #4]
 8007336:	4b52      	ldr	r3, [pc, #328]	; (8007480 <UG_Update+0x17c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	429a      	cmp	r2, r3
 800733e:	d071      	beq.n	8007424 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8007340:	4b4f      	ldr	r3, [pc, #316]	; (8007480 <UG_Update+0x17c>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d06c      	beq.n	8007424 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800734a:	4b4d      	ldr	r3, [pc, #308]	; (8007480 <UG_Update+0x17c>)
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b4c      	ldr	r3, [pc, #304]	; (8007480 <UG_Update+0x17c>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6892      	ldr	r2, [r2, #8]
 8007354:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 8007356:	4b4a      	ldr	r3, [pc, #296]	; (8007480 <UG_Update+0x17c>)
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	4b49      	ldr	r3, [pc, #292]	; (8007480 <UG_Update+0x17c>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	6852      	ldr	r2, [r2, #4]
 8007360:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007362:	4b47      	ldr	r3, [pc, #284]	; (8007480 <UG_Update+0x17c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d045      	beq.n	80073f8 <UG_Update+0xf4>
 800736c:	4b44      	ldr	r3, [pc, #272]	; (8007480 <UG_Update+0x17c>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	7d9b      	ldrb	r3, [r3, #22]
 8007374:	f003 0302 	and.w	r3, r3, #2
 8007378:	2b00      	cmp	r3, #0
 800737a:	d03d      	beq.n	80073f8 <UG_Update+0xf4>
 800737c:	4b40      	ldr	r3, [pc, #256]	; (8007480 <UG_Update+0x17c>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	7a1b      	ldrb	r3, [r3, #8]
 8007384:	f003 0308 	and.w	r3, r3, #8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d035      	beq.n	80073f8 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 800738c:	4b3c      	ldr	r3, [pc, #240]	; (8007480 <UG_Update+0x17c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007396:	4b3a      	ldr	r3, [pc, #232]	; (8007480 <UG_Update+0x17c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d123      	bne.n	80073ec <UG_Update+0xe8>
 80073a4:	4b36      	ldr	r3, [pc, #216]	; (8007480 <UG_Update+0x17c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80073ae:	4b34      	ldr	r3, [pc, #208]	; (8007480 <UG_Update+0x17c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d117      	bne.n	80073ec <UG_Update+0xe8>
 80073bc:	4b30      	ldr	r3, [pc, #192]	; (8007480 <UG_Update+0x17c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80073c6:	4b2e      	ldr	r3, [pc, #184]	; (8007480 <UG_Update+0x17c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d10b      	bne.n	80073ec <UG_Update+0xe8>
 80073d4:	4b2a      	ldr	r3, [pc, #168]	; (8007480 <UG_Update+0x17c>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80073de:	4b28      	ldr	r3, [pc, #160]	; (8007480 <UG_Update+0x17c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d005      	beq.n	80073f8 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80073ec:	4b24      	ldr	r3, [pc, #144]	; (8007480 <UG_Update+0x17c>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fd78 	bl	8007ee8 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80073f8:	4b21      	ldr	r3, [pc, #132]	; (8007480 <UG_Update+0x17c>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	7a1a      	ldrb	r2, [r3, #8]
 8007400:	4b1f      	ldr	r3, [pc, #124]	; (8007480 <UG_Update+0x17c>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800740a:	b2d2      	uxtb	r2, r2
 800740c:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800740e:	4b1c      	ldr	r3, [pc, #112]	; (8007480 <UG_Update+0x17c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	7a1a      	ldrb	r2, [r3, #8]
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <UG_Update+0x17c>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8007420:	b2d2      	uxtb	r2, r2
 8007422:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8007424:	4b16      	ldr	r3, [pc, #88]	; (8007480 <UG_Update+0x17c>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <UG_Update+0x17c>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7a1b      	ldrb	r3, [r3, #8]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d002      	beq.n	8007448 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fdfa 	bl	800803c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7a1b      	ldrb	r3, [r3, #8]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff fc13 	bl	8006c80 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f7ff fc44 	bl	8006ce8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <UG_Update+0x17c>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <UG_Update+0x172>
     gui->device->flush();
 800746c:	4b04      	ldr	r3, [pc, #16]	; (8007480 <UG_Update+0x17c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	4798      	blx	r3
   }
}
 8007476:	bf00      	nop
 8007478:	3708      	adds	r7, #8
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000504 	.word	0x20000504

08007484 <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 8007484:	b5b0      	push	{r4, r5, r7, lr}
 8007486:	b08a      	sub	sp, #40	; 0x28
 8007488:	af00      	add	r7, sp, #0
 800748a:	4603      	mov	r3, r0
 800748c:	603a      	str	r2, [r7, #0]
 800748e:	80fb      	strh	r3, [r7, #6]
 8007490:	460b      	mov	r3, r1
 8007492:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f000 810c 	beq.w	80076b6 <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	7a1b      	ldrb	r3, [r3, #8]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d164      	bne.n	8007570 <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 80074ac:	2300      	movs	r3, #0
 80074ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80074b0:	e057      	b.n	8007562 <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 80074b2:	2300      	movs	r3, #0
 80074b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074b6:	e048      	b.n	800754a <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 80074b8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80074bc:	2b00      	cmp	r3, #0
 80074be:	da00      	bge.n	80074c2 <UG_DrawBMP+0x3e>
 80074c0:	3307      	adds	r3, #7
 80074c2:	10db      	asrs	r3, r3, #3
 80074c4:	b21b      	sxth	r3, r3
 80074c6:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 80074c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80074cc:	425a      	negs	r2, r3
 80074ce:	f003 0307 	and.w	r3, r3, #7
 80074d2:	f002 0207 	and.w	r2, r2, #7
 80074d6:	bf58      	it	pl
 80074d8:	4253      	negpl	r3, r2
 80074da:	b21b      	sxth	r3, r3
 80074dc:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 80074de:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	6839      	ldr	r1, [r7, #0]
 80074e6:	8889      	ldrh	r1, [r1, #4]
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	461a      	mov	r2, r3
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	4413      	add	r3, r2
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	2201      	movs	r2, #1
 80074fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007500:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 8007502:	7bba      	ldrb	r2, [r7, #14]
 8007504:	7b7b      	ldrb	r3, [r7, #13]
 8007506:	4013      	ands	r3, r2
 8007508:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 800750a:	7bbb      	ldrb	r3, [r7, #14]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d004      	beq.n	800751a <UG_DrawBMP+0x96>
 8007510:	4b6b      	ldr	r3, [pc, #428]	; (80076c0 <UG_DrawBMP+0x23c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007516:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007518:	e003      	b.n	8007522 <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 800751a:	4b69      	ldr	r3, [pc, #420]	; (80076c0 <UG_DrawBMP+0x23c>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007520:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 8007522:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007524:	88fb      	ldrh	r3, [r7, #6]
 8007526:	4413      	add	r3, r2
 8007528:	b29b      	uxth	r3, r3
 800752a:	b218      	sxth	r0, r3
 800752c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800752e:	88bb      	ldrh	r3, [r7, #4]
 8007530:	4413      	add	r3, r2
 8007532:	b29b      	uxth	r3, r3
 8007534:	b21b      	sxth	r3, r3
 8007536:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007538:	4619      	mov	r1, r3
 800753a:	f7fe fa0b 	bl	8005954 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 800753e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007542:	b29b      	uxth	r3, r3
 8007544:	3301      	adds	r3, #1
 8007546:	b29b      	uxth	r3, r3
 8007548:	84bb      	strh	r3, [r7, #36]	; 0x24
 800754a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	8892      	ldrh	r2, [r2, #4]
 8007552:	4293      	cmp	r3, r2
 8007554:	dbb0      	blt.n	80074b8 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 8007556:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800755a:	b29b      	uxth	r3, r3
 800755c:	3301      	adds	r3, #1
 800755e:	b29b      	uxth	r3, r3
 8007560:	847b      	strh	r3, [r7, #34]	; 0x22
 8007562:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	88d2      	ldrh	r2, [r2, #6]
 800756a:	4293      	cmp	r3, r2
 800756c:	dba1      	blt.n	80074b2 <UG_DrawBMP+0x2e>
         }
      }
     return;
 800756e:	e0a3      	b.n	80076b8 <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	7a1b      	ldrb	r3, [r3, #8]
 8007574:	2b10      	cmp	r3, #16
 8007576:	f040 809f 	bne.w	80076b8 <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 800757a:	4b51      	ldr	r3, [pc, #324]	; (80076c0 <UG_DrawBMP+0x23c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d00b      	beq.n	80075a2 <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 800758a:	4b4d      	ldr	r3, [pc, #308]	; (80076c0 <UG_DrawBMP+0x23c>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007590:	461c      	mov	r4, r3
 8007592:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4618      	mov	r0, r3
 800759e:	47a0      	blx	r4
        return;
 80075a0:	e08a      	b.n	80076b8 <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 80075a2:	4b47      	ldr	r3, [pc, #284]	; (80076c0 <UG_DrawBMP+0x23c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d04b      	beq.n	800764a <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 80075b2:	4b43      	ldr	r3, [pc, #268]	; (80076c0 <UG_DrawBMP+0x23c>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	461d      	mov	r5, r3
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	889a      	ldrh	r2, [r3, #4]
 80075be:	88fb      	ldrh	r3, [r7, #6]
 80075c0:	4413      	add	r3, r2
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	b21c      	sxth	r4, r3
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	88da      	ldrh	r2, [r3, #6]
 80075ce:	88bb      	ldrh	r3, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	b21b      	sxth	r3, r3
 80075da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80075de:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80075e2:	4622      	mov	r2, r4
 80075e4:	47a8      	blx	r5
 80075e6:	4603      	mov	r3, r0
 80075e8:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 80075f0:	2300      	movs	r3, #0
 80075f2:	847b      	strh	r3, [r7, #34]	; 0x22
 80075f4:	e022      	b.n	800763c <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 80075f6:	2300      	movs	r3, #0
 80075f8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075fa:	e00d      	b.n	8007618 <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	61fa      	str	r2, [r7, #28]
 8007602:	881a      	ldrh	r2, [r3, #0]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4611      	mov	r1, r2
 8007608:	2001      	movs	r0, #1
 800760a:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 800760c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007610:	b29b      	uxth	r3, r3
 8007612:	3301      	adds	r3, #1
 8007614:	b29b      	uxth	r3, r3
 8007616:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007618:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800761c:	683a      	ldr	r2, [r7, #0]
 800761e:	8892      	ldrh	r2, [r2, #4]
 8007620:	4293      	cmp	r3, r2
 8007622:	dbeb      	blt.n	80075fc <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 8007624:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007628:	b29b      	uxth	r3, r3
 800762a:	3301      	adds	r3, #1
 800762c:	b29b      	uxth	r3, r3
 800762e:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8007630:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007634:	b29b      	uxth	r3, r3
 8007636:	3301      	adds	r3, #1
 8007638:	b29b      	uxth	r3, r3
 800763a:	847b      	strh	r3, [r7, #34]	; 0x22
 800763c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	88d2      	ldrh	r2, [r2, #6]
 8007644:	4293      	cmp	r3, r2
 8007646:	dbd6      	blt.n	80075f6 <UG_DrawBMP+0x172>
         }
         return;
 8007648:	e036      	b.n	80076b8 <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 8007650:	2300      	movs	r3, #0
 8007652:	847b      	strh	r3, [r7, #34]	; 0x22
 8007654:	e028      	b.n	80076a8 <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 8007656:	2300      	movs	r3, #0
 8007658:	84bb      	strh	r3, [r7, #36]	; 0x24
 800765a:	e013      	b.n	8007684 <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 800765c:	88fa      	ldrh	r2, [r7, #6]
 800765e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007660:	4413      	add	r3, r2
 8007662:	b29b      	uxth	r3, r3
 8007664:	b218      	sxth	r0, r3
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	1c9a      	adds	r2, r3, #2
 800766a:	61ba      	str	r2, [r7, #24]
 800766c:	881a      	ldrh	r2, [r3, #0]
 800766e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007672:	4619      	mov	r1, r3
 8007674:	f7fe f96e 	bl	8005954 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 8007678:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800767c:	b29b      	uxth	r3, r3
 800767e:	3301      	adds	r3, #1
 8007680:	b29b      	uxth	r3, r3
 8007682:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007684:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007688:	683a      	ldr	r2, [r7, #0]
 800768a:	8892      	ldrh	r2, [r2, #4]
 800768c:	4293      	cmp	r3, r2
 800768e:	dbe5      	blt.n	800765c <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 8007690:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007694:	b29b      	uxth	r3, r3
 8007696:	3301      	adds	r3, #1
 8007698:	b29b      	uxth	r3, r3
 800769a:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 800769c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	3301      	adds	r3, #1
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80076a8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	88d2      	ldrh	r2, [r2, #6]
 80076b0:	4293      	cmp	r3, r2
 80076b2:	dbd0      	blt.n	8007656 <UG_DrawBMP+0x1d2>
 80076b4:	e000      	b.n	80076b8 <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 80076b6:	bf00      	nop
     }
   }
   #endif
}
 80076b8:	3728      	adds	r7, #40	; 0x28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bdb0      	pop	{r4, r5, r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000504 	.word	0x20000504

080076c4 <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <UG_WindowCreate+0x26>
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <UG_WindowCreate+0x26>
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d102      	bne.n	80076f0 <UG_WindowCreate+0x2c>
 80076ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076ee:	e072      	b.n	80077d6 <UG_WindowCreate+0x112>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 80076f0:	2300      	movs	r3, #0
 80076f2:	75fb      	strb	r3, [r7, #23]
 80076f4:	e00d      	b.n	8007712 <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	015b      	lsls	r3, r3, #5
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	4413      	add	r3, r2
 80076fe:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	2203      	movs	r2, #3
 8007704:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2200      	movs	r2, #0
 800770a:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	3301      	adds	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
 8007712:	7dfa      	ldrb	r2, [r7, #23]
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	429a      	cmp	r2, r3
 8007718:	d3ed      	bcc.n	80076f6 <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	79fa      	ldrb	r2, [r7, #7]
 800771e:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2202      	movs	r2, #2
 800772a:	721a      	strb	r2, [r3, #8]
   wnd->fc = C_FORE_COLOR;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	2200      	movs	r2, #0
 8007730:	815a      	strh	r2, [r3, #10]
   wnd->bc = C_BACK_COLOR;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f64e 727d 	movw	r2, #61309	; 0xef7d
 8007738:	819a      	strh	r2, [r3, #12]
   wnd->xs = 0;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 8007746:	f7fe fe0d 	bl	8006364 <UG_GetXDim>
 800774a:	4603      	mov	r3, r0
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29b      	uxth	r3, r3
 8007752:	b21a      	sxth	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 8007758:	f7fe fe12 	bl	8006380 <UG_GetYDim>
 800775c:	4603      	mov	r3, r0
 800775e:	b29b      	uxth	r3, r3
 8007760:	3b01      	subs	r3, #1
 8007762:	b29b      	uxth	r3, r3
 8007764:	b21a      	sxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2203      	movs	r2, #3
 8007774:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = gui->font;
 800777c:	4b18      	ldr	r3, [pc, #96]	; (80077e0 <UG_WindowCreate+0x11c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d005      	beq.n	8007790 <UG_WindowCreate+0xcc>
 8007784:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <UG_WindowCreate+0x11c>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	691a      	ldr	r2, [r3, #16]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	61da      	str	r2, [r3, #28]
 800778e:	e002      	b.n	8007796 <UG_WindowCreate+0xd2>
   else wnd->title.font = NULL;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2202      	movs	r2, #2
 800779a:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2211      	movs	r2, #17
 80077aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_TITLE_FORE_COLOR;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077b4:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_TITLE_BACK_COLOR;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	221f      	movs	r2, #31
 80077ba:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_INACTIVE_TITLE_FORE_COLOR;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077c2:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_INACTIVE_TITLE_BACK_COLOR;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f248 4210 	movw	r2, #33808	; 0x8410
 80077ca:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	220f      	movs	r2, #15
 80077d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}
 80077de:	bf00      	nop
 80077e0:	20000504 	.word	0x20000504

080077e4 <UG_WindowDelete>:

UG_RESULT UG_WindowDelete( UG_WINDOW* wnd )
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
   if ( wnd == gui->active_window ) return UG_RESULT_FAIL;
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <UG_WindowDelete+0x78>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d102      	bne.n	80077fe <UG_WindowDelete+0x1a>
 80077f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077fc:	e027      	b.n	800784e <UG_WindowDelete+0x6a>

   /* Only delete valid windows */
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d022      	beq.n	800784a <UG_WindowDelete+0x66>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7a1b      	ldrb	r3, [r3, #8]
 8007808:	f003 0302 	and.w	r3, r3, #2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d01c      	beq.n	800784a <UG_WindowDelete+0x66>
   {
      wnd->state = 0;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	721a      	strb	r2, [r3, #8]
      wnd->cb = NULL;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2200      	movs	r2, #0
 800781a:	631a      	str	r2, [r3, #48]	; 0x30
      wnd->objcnt = 0;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	701a      	strb	r2, [r3, #0]
      wnd->objlst = NULL;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	605a      	str	r2, [r3, #4]
      wnd->xs = 0;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	81da      	strh	r2, [r3, #14]
      wnd->ys = 0;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2200      	movs	r2, #0
 8007832:	821a      	strh	r2, [r3, #16]
      wnd->xe = 0;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	825a      	strh	r2, [r3, #18]
      wnd->ye = 0;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	829a      	strh	r2, [r3, #20]
      wnd->style = 0;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	759a      	strb	r2, [r3, #22]
      return UG_RESULT_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e001      	b.n	800784e <UG_WindowDelete+0x6a>
   }
   return UG_RESULT_FAIL;
 800784a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800784e:	4618      	mov	r0, r3
 8007850:	370c      	adds	r7, #12
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	20000504 	.word	0x20000504

08007860 <UG_WindowShow>:

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 8007860:	b480      	push	{r7}
 8007862:	b083      	sub	sp, #12
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d013      	beq.n	8007896 <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	7a1b      	ldrb	r3, [r3, #8]
 8007872:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007876:	b2da      	uxtb	r2, r3
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7a1b      	ldrb	r3, [r3, #8]
 8007880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007884:	b2da      	uxtb	r2, r3
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 800788a:	4b07      	ldr	r3, [pc, #28]	; (80078a8 <UG_WindowShow+0x48>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	605a      	str	r2, [r3, #4]
      return UG_RESULT_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	e001      	b.n	800789a <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 8007896:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800789a:	4618      	mov	r0, r3
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	20000504 	.word	0x20000504

080078ac <UG_WindowHide>:

UG_RESULT UG_WindowHide( UG_WINDOW* wnd )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d060      	beq.n	800797c <UG_WindowHide+0xd0>
   {
      if ( wnd == gui->active_window )
 80078ba:	4b33      	ldr	r3, [pc, #204]	; (8007988 <UG_WindowHide+0xdc>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	687a      	ldr	r2, [r7, #4]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d155      	bne.n	8007972 <UG_WindowHide+0xc6>
      {
         /* Is there an old window which just lost the focus? */
         if ( (gui->last_window != NULL) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80078c6:	4b30      	ldr	r3, [pc, #192]	; (8007988 <UG_WindowHide+0xdc>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d039      	beq.n	8007944 <UG_WindowHide+0x98>
 80078d0:	4b2d      	ldr	r3, [pc, #180]	; (8007988 <UG_WindowHide+0xdc>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	7a1b      	ldrb	r3, [r3, #8]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d031      	beq.n	8007944 <UG_WindowHide+0x98>
         {
            if ( (gui->last_window->xs > wnd->xs) || (gui->last_window->ys > wnd->ys) || (gui->last_window->xe < wnd->xe) || (gui->last_window->ye < wnd->ye) )
 80078e0:	4b29      	ldr	r3, [pc, #164]	; (8007988 <UG_WindowHide+0xdc>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	dc1d      	bgt.n	8007930 <UG_WindowHide+0x84>
 80078f4:	4b24      	ldr	r3, [pc, #144]	; (8007988 <UG_WindowHide+0xdc>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68db      	ldr	r3, [r3, #12]
 80078fa:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007904:	429a      	cmp	r2, r3
 8007906:	dc13      	bgt.n	8007930 <UG_WindowHide+0x84>
 8007908:	4b1f      	ldr	r3, [pc, #124]	; (8007988 <UG_WindowHide+0xdc>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007918:	429a      	cmp	r2, r3
 800791a:	db09      	blt.n	8007930 <UG_WindowHide+0x84>
 800791c:	4b1a      	ldr	r3, [pc, #104]	; (8007988 <UG_WindowHide+0xdc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800792c:	429a      	cmp	r2, r3
 800792e:	da02      	bge.n	8007936 <UG_WindowHide+0x8a>
            {
               _UG_WindowClear( wnd );
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fc3f 	bl	80081b4 <_UG_WindowClear>
            }
            gui->next_window = gui->last_window;
 8007936:	4b14      	ldr	r3, [pc, #80]	; (8007988 <UG_WindowHide+0xdc>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b13      	ldr	r3, [pc, #76]	; (8007988 <UG_WindowHide+0xdc>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68d2      	ldr	r2, [r2, #12]
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	e019      	b.n	8007978 <UG_WindowHide+0xcc>
         }
         else
         {
            gui->active_window->state &= ~WND_STATE_VISIBLE;
 8007944:	4b10      	ldr	r3, [pc, #64]	; (8007988 <UG_WindowHide+0xdc>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	7a1a      	ldrb	r2, [r3, #8]
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <UG_WindowHide+0xdc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f022 0208 	bic.w	r2, r2, #8
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	721a      	strb	r2, [r3, #8]
            gui->active_window->state |= WND_STATE_UPDATE;
 800795a:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <UG_WindowHide+0xdc>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	7a1a      	ldrb	r2, [r3, #8]
 8007962:	4b09      	ldr	r3, [pc, #36]	; (8007988 <UG_WindowHide+0xdc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	f042 0220 	orr.w	r2, r2, #32
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	721a      	strb	r2, [r3, #8]
 8007970:	e002      	b.n	8007978 <UG_WindowHide+0xcc>
         }
      }
      else
      {
         /* If the old window is visible, clear it! */
         _UG_WindowClear( wnd );
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f000 fc1e 	bl	80081b4 <_UG_WindowClear>
      }
      return UG_RESULT_OK;
 8007978:	2300      	movs	r3, #0
 800797a:	e001      	b.n	8007980 <UG_WindowHide+0xd4>
   }
   return UG_RESULT_FAIL;
 800797c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	20000504 	.word	0x20000504

0800798c <UG_WindowResize>:

UG_RESULT UG_WindowResize( UG_WINDOW* wnd, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 800798c:	b590      	push	{r4, r7, lr}
 800798e:	b089      	sub	sp, #36	; 0x24
 8007990:	af02      	add	r7, sp, #8
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	4608      	mov	r0, r1
 8007996:	4611      	mov	r1, r2
 8007998:	461a      	mov	r2, r3
 800799a:	4603      	mov	r3, r0
 800799c:	817b      	strh	r3, [r7, #10]
 800799e:	460b      	mov	r3, r1
 80079a0:	813b      	strh	r3, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
   UG_S16 pos;
   UG_S16 xmax,ymax;

   xmax = UG_GetXDim()-1;
 80079a6:	f7fe fcdd 	bl	8006364 <UG_GetXDim>
 80079aa:	4603      	mov	r3, r0
 80079ac:	b29b      	uxth	r3, r3
 80079ae:	3b01      	subs	r3, #1
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	82fb      	strh	r3, [r7, #22]
   ymax = UG_GetYDim()-1;
 80079b4:	f7fe fce4 	bl	8006380 <UG_GetYDim>
 80079b8:	4603      	mov	r3, r0
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	3b01      	subs	r3, #1
 80079be:	b29b      	uxth	r3, r3
 80079c0:	82bb      	strh	r3, [r7, #20]

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 80cb 	beq.w	8007b60 <UG_WindowResize+0x1d4>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	7a1b      	ldrb	r3, [r3, #8]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 80c4 	beq.w	8007b60 <UG_WindowResize+0x1d4>
   {
      /* Do some checks... */
      if ( (xs < 0) || (ys < 0) ) return UG_RESULT_FAIL;
 80079d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	db03      	blt.n	80079e8 <UG_WindowResize+0x5c>
 80079e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da02      	bge.n	80079ee <UG_WindowResize+0x62>
 80079e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079ec:	e0ba      	b.n	8007b64 <UG_WindowResize+0x1d8>
      if ( (xe > xmax) || (ye > ymax) ) return UG_RESULT_FAIL;
 80079ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80079f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	dc05      	bgt.n	8007a06 <UG_WindowResize+0x7a>
 80079fa:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80079fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	dd02      	ble.n	8007a0c <UG_WindowResize+0x80>
 8007a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a0a:	e0ab      	b.n	8007b64 <UG_WindowResize+0x1d8>
      pos = xe-xs;
 8007a0c:	88fa      	ldrh	r2, [r7, #6]
 8007a0e:	897b      	ldrh	r3, [r7, #10]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007a16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	dc02      	bgt.n	8007a24 <UG_WindowResize+0x98>
 8007a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a22:	e09f      	b.n	8007b64 <UG_WindowResize+0x1d8>
      pos = ye-ys;
 8007a24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a26:	893b      	ldrh	r3, [r7, #8]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007a2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a32:	2b09      	cmp	r3, #9
 8007a34:	dc02      	bgt.n	8007a3c <UG_WindowResize+0xb0>
 8007a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a3a:	e093      	b.n	8007b64 <UG_WindowResize+0x1d8>

      /* ... and if everything is OK move the window! */
      wnd->xs = xs;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	897a      	ldrh	r2, [r7, #10]
 8007a40:	81da      	strh	r2, [r3, #14]
      wnd->ys = ys;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	893a      	ldrh	r2, [r7, #8]
 8007a46:	821a      	strh	r2, [r3, #16]
      wnd->xe = xe;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	88fa      	ldrh	r2, [r7, #6]
 8007a4c:	825a      	strh	r2, [r3, #18]
      wnd->ye = ye;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a52:	829a      	strh	r2, [r3, #20]

      if ( (wnd->state & WND_STATE_VISIBLE) && (gui->active_window == wnd) )
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	7a1b      	ldrb	r3, [r3, #8]
 8007a58:	f003 0308 	and.w	r3, r3, #8
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d07d      	beq.n	8007b5c <UG_WindowResize+0x1d0>
 8007a60:	4b42      	ldr	r3, [pc, #264]	; (8007b6c <UG_WindowResize+0x1e0>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d177      	bne.n	8007b5c <UG_WindowResize+0x1d0>
      {
         if ( wnd->ys ) UG_FillFrame(0, 0, xmax,wnd->ys-1,gui->desktop_color);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d011      	beq.n	8007a9a <UG_WindowResize+0x10e>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	b219      	sxth	r1, r3
 8007a84:	4b39      	ldr	r3, [pc, #228]	; (8007b6c <UG_WindowResize+0x1e0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007a8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a8e:	9300      	str	r3, [sp, #0]
 8007a90:	460b      	mov	r3, r1
 8007a92:	2100      	movs	r1, #0
 8007a94:	2000      	movs	r0, #0
 8007a96:	f7fd fe2d 	bl	80056f4 <UG_FillFrame>
         pos = wnd->ye+1;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	827b      	strh	r3, [r7, #18]
         if ( !(pos > ymax) ) UG_FillFrame(0, pos, xmax,ymax,gui->desktop_color);
 8007aa8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007aac:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	dc0d      	bgt.n	8007ad0 <UG_WindowResize+0x144>
 8007ab4:	4b2d      	ldr	r3, [pc, #180]	; (8007b6c <UG_WindowResize+0x1e0>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007aba:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007abe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007ac2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007ac6:	9300      	str	r3, [sp, #0]
 8007ac8:	4603      	mov	r3, r0
 8007aca:	2000      	movs	r0, #0
 8007acc:	f7fd fe12 	bl	80056f4 <UG_FillFrame>
         if ( wnd->xs ) UG_FillFrame(0, wnd->ys, wnd->xs-1,wnd->ye,gui->desktop_color);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d014      	beq.n	8007b04 <UG_WindowResize+0x178>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29b      	uxth	r3, r3
 8007aec:	b21a      	sxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007af4:	4b1d      	ldr	r3, [pc, #116]	; (8007b6c <UG_WindowResize+0x1e0>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4603      	mov	r3, r0
 8007afe:	2000      	movs	r0, #0
 8007b00:	f7fd fdf8 	bl	80056f4 <UG_FillFrame>
         pos = wnd->xe+1;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	827b      	strh	r3, [r7, #18]
         if ( !(pos > xmax) ) UG_FillFrame(pos, wnd->ys,xmax,wnd->ye,gui->desktop_color);
 8007b12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007b16:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	dc10      	bgt.n	8007b40 <UG_WindowResize+0x1b4>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007b2a:	4b10      	ldr	r3, [pc, #64]	; (8007b6c <UG_WindowResize+0x1e0>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007b30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007b34:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8007b38:	9300      	str	r3, [sp, #0]
 8007b3a:	4623      	mov	r3, r4
 8007b3c:	f7fd fdda 	bl	80056f4 <UG_FillFrame>

         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	7a1b      	ldrb	r3, [r3, #8]
 8007b44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	721a      	strb	r2, [r3, #8]
         wnd->state |= WND_STATE_UPDATE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	7a1b      	ldrb	r3, [r3, #8]
 8007b52:	f043 0320 	orr.w	r3, r3, #32
 8007b56:	b2da      	uxtb	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	e001      	b.n	8007b64 <UG_WindowResize+0x1d8>
   }
   return UG_RESULT_FAIL;
 8007b60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	371c      	adds	r7, #28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd90      	pop	{r4, r7, pc}
 8007b6c:	20000504 	.word	0x20000504

08007b70 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d011      	beq.n	8007ba4 <UG_WindowSetTitleText+0x34>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	7a1b      	ldrb	r3, [r3, #8]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00b      	beq.n	8007ba4 <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	683a      	ldr	r2, [r7, #0]
 8007b90:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	7a1b      	ldrb	r3, [r3, #8]
 8007b96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e001      	b.n	8007ba8 <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007ba4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb2:	4770      	bx	lr

08007bb4 <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, UG_FONT* font )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d02a      	beq.n	8007c1a <UG_WindowSetTitleTextFont+0x66>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	7a1b      	ldrb	r3, [r3, #8]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d024      	beq.n	8007c1a <UG_WindowSetTitleTextFont+0x66>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7a1b      	ldrb	r3, [r3, #8]
 8007bd4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007bd8:	b2da      	uxtb	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	683a      	ldr	r2, [r7, #0]
 8007be2:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (UG_GetFontHeight(font) + 1) )
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bea:	461a      	mov	r2, r3
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	3302      	adds	r3, #2
 8007bf0:	781b      	ldrb	r3, [r3, #0]
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	dc0e      	bgt.n	8007c16 <UG_WindowSetTitleTextFont+0x62>
      {
         wnd->title.height = UG_GetFontWidth(font) + 2;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	3302      	adds	r3, #2
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	7a1b      	ldrb	r3, [r3, #8]
 8007c0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007c16:	2300      	movs	r3, #0
 8007c18:	e001      	b.n	8007c1e <UG_WindowSetTitleTextFont+0x6a>
   }
   return UG_RESULT_FAIL;
 8007c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <UG_WindowSetTitleHeight>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleHeight( UG_WINDOW* wnd, UG_U8 height )
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b083      	sub	sp, #12
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	460b      	mov	r3, r1
 8007c34:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d019      	beq.n	8007c70 <UG_WindowSetTitleHeight+0x46>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	7a1b      	ldrb	r3, [r3, #8]
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d013      	beq.n	8007c70 <UG_WindowSetTitleHeight+0x46>
   {
      wnd->title.height = height;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	7a1b      	ldrb	r3, [r3, #8]
 8007c54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	721a      	strb	r2, [r3, #8]
      wnd->state |= WND_STATE_UPDATE;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7a1b      	ldrb	r3, [r3, #8]
 8007c62:	f043 0320 	orr.w	r3, r3, #32
 8007c66:	b2da      	uxtb	r2, r3
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	e001      	b.n	8007c74 <UG_WindowSetTitleHeight+0x4a>
   }
   return UG_RESULT_FAIL;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <UG_WindowSetXStart>:

UG_RESULT UG_WindowSetXStart( UG_WINDOW* wnd, UG_S16 xs )
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af02      	add	r7, sp, #8
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d022      	beq.n	8007cd8 <UG_WindowSetXStart+0x58>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	7a1b      	ldrb	r3, [r3, #8]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d01c      	beq.n	8007cd8 <UG_WindowSetXStart+0x58>
   {
      wnd->xs = xs;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	887a      	ldrh	r2, [r7, #2]
 8007ca2:	81da      	strh	r2, [r3, #14]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fe63 	bl	800798c <UG_WindowResize>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ccc:	d102      	bne.n	8007cd4 <UG_WindowSetXStart+0x54>
 8007cce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cd2:	e003      	b.n	8007cdc <UG_WindowSetXStart+0x5c>
      return UG_RESULT_OK;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	e001      	b.n	8007cdc <UG_WindowSetXStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007cd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <UG_WindowSetYStart>:

UG_RESULT UG_WindowSetYStart( UG_WINDOW* wnd, UG_S16 ys )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af02      	add	r7, sp, #8
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	460b      	mov	r3, r1
 8007cee:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d022      	beq.n	8007d3c <UG_WindowSetYStart+0x58>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	7a1b      	ldrb	r3, [r3, #8]
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d01c      	beq.n	8007d3c <UG_WindowSetYStart+0x58>
   {
      wnd->ys = ys;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	887a      	ldrh	r2, [r7, #2]
 8007d06:	821a      	strh	r2, [r3, #16]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d20:	9300      	str	r3, [sp, #0]
 8007d22:	4603      	mov	r3, r0
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f7ff fe31 	bl	800798c <UG_WindowResize>
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d30:	d102      	bne.n	8007d38 <UG_WindowSetYStart+0x54>
 8007d32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d36:	e003      	b.n	8007d40 <UG_WindowSetYStart+0x5c>
      return UG_RESULT_OK;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	e001      	b.n	8007d40 <UG_WindowSetYStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UG_WindowSetXEnd>:

UG_RESULT UG_WindowSetXEnd( UG_WINDOW* wnd, UG_S16 xe )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af02      	add	r7, sp, #8
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	460b      	mov	r3, r1
 8007d52:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d022      	beq.n	8007da0 <UG_WindowSetXEnd+0x58>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7a1b      	ldrb	r3, [r3, #8]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d01c      	beq.n	8007da0 <UG_WindowSetXEnd+0x58>
   {
      wnd->xe = xe;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	887a      	ldrh	r2, [r7, #2]
 8007d6a:	825a      	strh	r2, [r3, #18]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d84:	9300      	str	r3, [sp, #0]
 8007d86:	4603      	mov	r3, r0
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f7ff fdff 	bl	800798c <UG_WindowResize>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d94:	d102      	bne.n	8007d9c <UG_WindowSetXEnd+0x54>
 8007d96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d9a:	e003      	b.n	8007da4 <UG_WindowSetXEnd+0x5c>
      return UG_RESULT_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	e001      	b.n	8007da4 <UG_WindowSetXEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <UG_WindowSetYEnd>:

UG_RESULT UG_WindowSetYEnd( UG_WINDOW* wnd, UG_S16 ye )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d022      	beq.n	8007e04 <UG_WindowSetYEnd+0x58>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	7a1b      	ldrb	r3, [r3, #8]
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d01c      	beq.n	8007e04 <UG_WindowSetYEnd+0x58>
   {
      wnd->ye = ye;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	887a      	ldrh	r2, [r7, #2]
 8007dce:	829a      	strh	r2, [r3, #20]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007de8:	9300      	str	r3, [sp, #0]
 8007dea:	4603      	mov	r3, r0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f7ff fdcd 	bl	800798c <UG_WindowResize>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007df8:	d102      	bne.n	8007e00 <UG_WindowSetYEnd+0x54>
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dfe:	e003      	b.n	8007e08 <UG_WindowSetYEnd+0x5c>
      return UG_RESULT_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	e001      	b.n	8007e08 <UG_WindowSetYEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3708      	adds	r7, #8
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d05a      	beq.n	8007ed6 <UG_WindowGetArea+0xc6>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7a1b      	ldrb	r3, [r3, #8]
 8007e24:	f003 0302 	and.w	r3, r3, #2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d054      	beq.n	8007ed6 <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7d9b      	ldrb	r3, [r3, #22]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d023      	beq.n	8007ea8 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3303      	adds	r3, #3
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	b21a      	sxth	r2, r3
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3303      	adds	r3, #3
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	b21a      	sxth	r2, r3
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b03      	subs	r3, #3
 8007e8e:	b29b      	uxth	r3, r3
 8007e90:	b21a      	sxth	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b03      	subs	r3, #3
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	b21a      	sxth	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	7d9b      	ldrb	r3, [r3, #22]
 8007eac:	f003 0302 	and.w	r3, r3, #2
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00e      	beq.n	8007ed2 <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	4413      	add	r3, r2
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	b21a      	sxth	r2, r3
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	e001      	b.n	8007eda <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 8007ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b08f      	sub	sp, #60	; 0x3c
 8007eec:	af02      	add	r7, sp, #8
 8007eee:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f000 809a 	beq.w	800802c <_UG_WindowDrawTitle+0x144>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	7a1b      	ldrb	r3, [r3, #8]
 8007efc:	f003 0302 	and.w	r3, r3, #2
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	f000 8093 	beq.w	800802c <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	89db      	ldrh	r3, [r3, #14]
 8007f0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8a1b      	ldrh	r3, [r3, #16]
 8007f10:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	8a5b      	ldrh	r3, [r3, #18]
 8007f16:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	8a9b      	ldrh	r3, [r3, #20]
 8007f1c:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	7d9b      	ldrb	r3, [r3, #22]
 8007f22:	f003 0301 	and.w	r3, r3, #1
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00f      	beq.n	8007f4a <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8007f2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f2c:	3303      	adds	r3, #3
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8007f32:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f34:	3303      	adds	r3, #3
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8007f3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f3c:	3b03      	subs	r3, #3
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8007f42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f44:	3b03      	subs	r3, #3
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8007f4a:	4b3b      	ldr	r3, [pc, #236]	; (8008038 <_UG_WindowDrawTitle+0x150>)
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d106      	bne.n	8007f64 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f5a:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f60:	83bb      	strh	r3, [r7, #28]
 8007f62:	e005      	b.n	8007f70 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f68:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6e:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f7a:	4413      	add	r3, r2
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	3b01      	subs	r3, #1
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	b21c      	sxth	r4, r3
 8007f84:	8bfb      	ldrh	r3, [r7, #30]
 8007f86:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007f8a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8007f8e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	4623      	mov	r3, r4
 8007f96:	f7fd fbad 	bl	80056f4 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	699b      	ldr	r3, [r3, #24]
 8007f9e:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	69db      	ldr	r3, [r3, #28]
 8007fa4:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8007fa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007fa8:	3303      	adds	r3, #3
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	b21b      	sxth	r3, r3
 8007fae:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8007fb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fb2:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8007fb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007fb6:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fbe:	b29a      	uxth	r2, r3
 8007fc0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fc2:	4413      	add	r3, r2
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	b21b      	sxth	r3, r3
 8007fcc:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007fd4:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8007fde:	b21b      	sxth	r3, r3
 8007fe0:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8007fe8:	b21b      	sxth	r3, r3
 8007fea:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8007fec:	f107 030c 	add.w	r3, r7, #12
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fe fec5 	bl	8006d80 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008000:	4413      	add	r3, r2
 8008002:	b29b      	uxth	r3, r3
 8008004:	b219      	sxth	r1, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800800c:	b29a      	uxth	r2, r3
 800800e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008010:	4413      	add	r3, r2
 8008012:	b29b      	uxth	r3, r3
 8008014:	b21b      	sxth	r3, r3
 8008016:	f649 5413 	movw	r4, #40211	; 0x9d13
 800801a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800801e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8008022:	9400      	str	r4, [sp, #0]
 8008024:	f7fd fe70 	bl	8005d08 <UG_DrawLine>
      return UG_RESULT_OK;
 8008028:	2300      	movs	r3, #0
 800802a:	e001      	b.n	8008030 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 800802c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008030:	4618      	mov	r0, r3
 8008032:	3734      	adds	r7, #52	; 0x34
 8008034:	46bd      	mov	sp, r7
 8008036:	bd90      	pop	{r4, r7, pc}
 8008038:	20000504 	.word	0x20000504

0800803c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 800803c:	b590      	push	{r4, r7, lr}
 800803e:	b089      	sub	sp, #36	; 0x24
 8008040:	af02      	add	r7, sp, #8
 8008042:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	89db      	ldrh	r3, [r3, #14]
 8008048:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	8a1b      	ldrh	r3, [r3, #16]
 800804e:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8a5b      	ldrh	r3, [r3, #18]
 8008054:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	8a9b      	ldrh	r3, [r3, #20]
 800805a:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	7a1b      	ldrb	r3, [r3, #8]
 8008060:	f023 0320 	bic.w	r3, r3, #32
 8008064:	b2da      	uxtb	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7a1b      	ldrb	r3, [r3, #8]
 800806e:	f003 0308 	and.w	r3, r3, #8
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 8084 	beq.w	8008180 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	7d9b      	ldrb	r3, [r3, #22]
 800807c:	f003 0301 	and.w	r3, r3, #1
 8008080:	2b00      	cmp	r3, #0
 8008082:	d021      	beq.n	80080c8 <_UG_WindowUpdate+0x8c>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	7a1b      	ldrb	r3, [r3, #8]
 8008088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800808c:	2b00      	cmp	r3, #0
 800808e:	d11b      	bne.n	80080c8 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8008090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008094:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008098:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800809c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80080a0:	4c42      	ldr	r4, [pc, #264]	; (80081ac <_UG_WindowUpdate+0x170>)
 80080a2:	9400      	str	r4, [sp, #0]
 80080a4:	f7fe ffbe 	bl	8007024 <_UG_DrawObjectFrame>
         xs+=3;
 80080a8:	8abb      	ldrh	r3, [r7, #20]
 80080aa:	3303      	adds	r3, #3
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 80080b0:	8a7b      	ldrh	r3, [r7, #18]
 80080b2:	3303      	adds	r3, #3
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	827b      	strh	r3, [r7, #18]
         xe-=3;
 80080b8:	8a3b      	ldrh	r3, [r7, #16]
 80080ba:	3b03      	subs	r3, #3
 80080bc:	b29b      	uxth	r3, r3
 80080be:	823b      	strh	r3, [r7, #16]
         ye-=3;
 80080c0:	89fb      	ldrh	r3, [r7, #14]
 80080c2:	3b03      	subs	r3, #3
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	7d9b      	ldrb	r3, [r3, #22]
 80080cc:	f003 0302 	and.w	r3, r3, #2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01a      	beq.n	800810a <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff ff07 	bl	8007ee8 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	8a7b      	ldrh	r3, [r7, #18]
 80080e4:	4413      	add	r3, r2
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3301      	adds	r3, #1
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	7a1b      	ldrb	r3, [r3, #8]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d007      	beq.n	800810a <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	7a1b      	ldrb	r3, [r3, #8]
 80080fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008102:	b2da      	uxtb	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	721a      	strb	r2, [r3, #8]
            return;
 8008108:	e04d      	b.n	80081a6 <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	899b      	ldrh	r3, [r3, #12]
 800810e:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8008112:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008116:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800811a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800811e:	9300      	str	r3, [sp, #0]
 8008120:	4623      	mov	r3, r4
 8008122:	f7fd fae7 	bl	80056f4 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 800812c:	2300      	movs	r3, #0
 800812e:	82fb      	strh	r3, [r7, #22]
 8008130:	e021      	b.n	8008176 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	685a      	ldr	r2, [r3, #4]
 8008136:	8afb      	ldrh	r3, [r7, #22]
 8008138:	015b      	lsls	r3, r3, #5
 800813a:	4413      	add	r3, r2
 800813c:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	781b      	ldrb	r3, [r3, #0]
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	2b00      	cmp	r3, #0
 8008148:	d112      	bne.n	8008170 <_UG_WindowUpdate+0x134>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	f003 0302 	and.w	r3, r3, #2
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00c      	beq.n	8008170 <_UG_WindowUpdate+0x134>
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	781b      	ldrb	r3, [r3, #0]
 800815a:	f003 0308 	and.w	r3, r3, #8
 800815e:	2b00      	cmp	r3, #0
 8008160:	d006      	beq.n	8008170 <_UG_WindowUpdate+0x134>
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800816a:	b2da      	uxtb	r2, r3
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8008170:	8afb      	ldrh	r3, [r7, #22]
 8008172:	3301      	adds	r3, #1
 8008174:	82fb      	strh	r3, [r7, #22]
 8008176:	8afa      	ldrh	r2, [r7, #22]
 8008178:	89bb      	ldrh	r3, [r7, #12]
 800817a:	429a      	cmp	r2, r3
 800817c:	d3d9      	bcc.n	8008132 <_UG_WindowUpdate+0xf6>
 800817e:	e012      	b.n	80081a6 <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8008198:	4b05      	ldr	r3, [pc, #20]	; (80081b0 <_UG_WindowUpdate+0x174>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	4623      	mov	r3, r4
 80081a2:	f7fd faa7 	bl	80056f4 <UG_FillFrame>
   }
}
 80081a6:	371c      	adds	r7, #28
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd90      	pop	{r4, r7, pc}
 80081ac:	08021184 	.word	0x08021184
 80081b0:	20000504 	.word	0x20000504

080081b4 <_UG_WindowClear>:

static UG_RESULT _UG_WindowClear( UG_WINDOW* wnd )
{
 80081b4:	b590      	push	{r4, r7, lr}
 80081b6:	b085      	sub	sp, #20
 80081b8:	af02      	add	r7, sp, #8
 80081ba:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d045      	beq.n	800824e <_UG_WindowClear+0x9a>
   {
      if (wnd->state & WND_STATE_VISIBLE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	7a1b      	ldrb	r3, [r3, #8]
 80081c6:	f003 0308 	and.w	r3, r3, #8
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d03d      	beq.n	800824a <_UG_WindowClear+0x96>
      {
         wnd->state &= ~WND_STATE_VISIBLE;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	7a1b      	ldrb	r3, [r3, #8]
 80081d2:	f023 0308 	bic.w	r3, r3, #8
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	721a      	strb	r2, [r3, #8]
         UG_FillFrame( wnd->xs, wnd->ys, wnd->xe, wnd->ye, gui->desktop_color );
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80081f4:	4b19      	ldr	r3, [pc, #100]	; (800825c <_UG_WindowClear+0xa8>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80081fa:	9300      	str	r3, [sp, #0]
 80081fc:	4623      	mov	r3, r4
 80081fe:	f7fd fa79 	bl	80056f4 <UG_FillFrame>

         if ( wnd != gui->active_window )
 8008202:	4b16      	ldr	r3, [pc, #88]	; (800825c <_UG_WindowClear+0xa8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	429a      	cmp	r2, r3
 800820c:	d01d      	beq.n	800824a <_UG_WindowClear+0x96>
         {
            /* If the current window is visible, update it! */
            if ( gui->active_window->state & WND_STATE_VISIBLE )
 800820e:	4b13      	ldr	r3, [pc, #76]	; (800825c <_UG_WindowClear+0xa8>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	7a1b      	ldrb	r3, [r3, #8]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d015      	beq.n	800824a <_UG_WindowClear+0x96>
            {
               gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <_UG_WindowClear+0xa8>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	7a1a      	ldrb	r2, [r3, #8]
 8008226:	4b0d      	ldr	r3, [pc, #52]	; (800825c <_UG_WindowClear+0xa8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	689b      	ldr	r3, [r3, #8]
 800822c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	721a      	strb	r2, [r3, #8]
               gui->active_window->state |= WND_STATE_UPDATE;
 8008234:	4b09      	ldr	r3, [pc, #36]	; (800825c <_UG_WindowClear+0xa8>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	7a1a      	ldrb	r2, [r3, #8]
 800823c:	4b07      	ldr	r3, [pc, #28]	; (800825c <_UG_WindowClear+0xa8>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f042 0220 	orr.w	r2, r2, #32
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	721a      	strb	r2, [r3, #8]
            }
         }
      }
      return UG_RESULT_OK;
 800824a:	2300      	movs	r3, #0
 800824c:	e001      	b.n	8008252 <_UG_WindowClear+0x9e>
   }
   return UG_RESULT_FAIL;
 800824e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	bd90      	pop	{r4, r7, pc}
 800825a:	bf00      	nop
 800825c:	20000504 	.word	0x20000504

08008260 <UG_ButtonCreate>:
const UG_COLOR pal_button_released[] = {
    C_PAL_BUTTON_RELEASED
};

UG_RESULT UG_ButtonCreate( UG_WINDOW* wnd, UG_BUTTON* btn, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b086      	sub	sp, #24
 8008264:	af00      	add	r7, sp, #0
 8008266:	60f8      	str	r0, [r7, #12]
 8008268:	60b9      	str	r1, [r7, #8]
 800826a:	4611      	mov	r1, r2
 800826c:	461a      	mov	r2, r3
 800826e:	460b      	mov	r3, r1
 8008270:	71fb      	strb	r3, [r7, #7]
 8008272:	4613      	mov	r3, r2
 8008274:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f7fe fff5 	bl	8007266 <_UG_GetFreeObject>
 800827c:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <UG_ButtonCreate+0x2a>
 8008284:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008288:	e062      	b.n	8008350 <UG_ButtonCreate+0xf0>

   /* Initialize object-specific parameters */
   btn->state = BTN_STATE_RELEASED;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	701a      	strb	r2, [r3, #0]
   btn->bc = wnd->bc;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	899a      	ldrh	r2, [r3, #12]
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	809a      	strh	r2, [r3, #4]
   btn->fc = wnd->fc;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	895a      	ldrh	r2, [r3, #10]
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	805a      	strh	r2, [r3, #2]
   btn->abc = wnd->bc;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	899a      	ldrh	r2, [r3, #12]
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	811a      	strh	r2, [r3, #8]
   btn->afc = wnd->fc;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	895a      	ldrh	r2, [r3, #10]
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	80da      	strh	r2, [r3, #6]
   btn->style = BTN_STYLE_3D;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	2201      	movs	r2, #1
 80082b4:	705a      	strb	r2, [r3, #1]
   btn->align = ALIGN_CENTER;
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	2212      	movs	r2, #18
 80082ba:	741a      	strb	r2, [r3, #16]
   btn->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 80082bc:	f7fd f9da 	bl	8005674 <UG_GetGUI>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d004      	beq.n	80082d0 <UG_ButtonCreate+0x70>
 80082c6:	f7fd f9d5 	bl	8005674 <UG_GetGUI>
 80082ca:	4603      	mov	r3, r0
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	e000      	b.n	80082d2 <UG_ButtonCreate+0x72>
 80082d0:	2300      	movs	r3, #0
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	60d3      	str	r3, [r2, #12]
   btn->str = "-";
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <UG_ButtonCreate+0xf8>)
 80082da:	615a      	str	r2, [r3, #20]

   /* Initialize standard object parameters */
   obj->update = _UG_ButtonUpdate;
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	4a1f      	ldr	r2, [pc, #124]	; (800835c <UG_ButtonCreate+0xfc>)
 80082e0:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_BUTTON;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	2201      	movs	r2, #1
 80082e6:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	2200      	movs	r2, #0
 80082ec:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	88ba      	ldrh	r2, [r7, #4]
 80082f2:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	8c3a      	ldrh	r2, [r7, #32]
 80082f8:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082fe:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008304:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800830c:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008314:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800831c:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 800831e:	697b      	ldr	r3, [r7, #20]
 8008320:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008324:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	79fa      	ldrb	r2, [r7, #7]
 800832a:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008334:	b2da      	uxtb	r2, r3
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	701a      	strb	r2, [r3, #0]
   #ifdef UGUI_USE_TOUCH
   obj->state |= OBJ_STATE_TOUCH_ENABLE;
   #endif
   obj->data = (void*)btn;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	f023 0301 	bic.w	r3, r3, #1
 8008348:	b2da      	uxtb	r2, r3
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	0800dea0 	.word	0x0800dea0
 800835c:	080085bd 	.word	0x080085bd

08008360 <UG_ButtonSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	460b      	mov	r3, r1
 800836a:	70fb      	strb	r3, [r7, #3]
 800836c:	4613      	mov	r3, r2
 800836e:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008374:	2300      	movs	r3, #0
 8008376:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008378:	78fb      	ldrb	r3, [r7, #3]
 800837a:	461a      	mov	r2, r3
 800837c:	2101      	movs	r1, #1
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f7fe fe15 	bl	8006fae <_UG_SearchObject>
 8008384:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d102      	bne.n	8008392 <UG_ButtonSetForeColor+0x32>
 800838c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008390:	e00d      	b.n	80083ae <UG_ButtonSetForeColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	60bb      	str	r3, [r7, #8]
   btn->fc = fc;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	883a      	ldrh	r2, [r7, #0]
 800839c:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80083ac:	2300      	movs	r3, #0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UG_ButtonSetBackColor>:

UG_RESULT UG_ButtonSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b084      	sub	sp, #16
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	70fb      	strb	r3, [r7, #3]
 80083c2:	4613      	mov	r3, r2
 80083c4:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	461a      	mov	r2, r3
 80083d2:	2101      	movs	r1, #1
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f7fe fdea 	bl	8006fae <_UG_SearchObject>
 80083da:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <UG_ButtonSetBackColor+0x32>
 80083e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083e6:	e00d      	b.n	8008404 <UG_ButtonSetBackColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	60bb      	str	r3, [r7, #8]
   btn->bc = bc;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	883a      	ldrh	r2, [r7, #0]
 80083f2:	809a      	strh	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008402:	2300      	movs	r3, #0
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <UG_ButtonSetText>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af00      	add	r7, sp, #0
 8008412:	60f8      	str	r0, [r7, #12]
 8008414:	460b      	mov	r3, r1
 8008416:	607a      	str	r2, [r7, #4]
 8008418:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800841a:	2300      	movs	r3, #0
 800841c:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 800841e:	2300      	movs	r3, #0
 8008420:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008422:	7afb      	ldrb	r3, [r7, #11]
 8008424:	461a      	mov	r2, r3
 8008426:	2101      	movs	r1, #1
 8008428:	68f8      	ldr	r0, [r7, #12]
 800842a:	f7fe fdc0 	bl	8006fae <_UG_SearchObject>
 800842e:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d102      	bne.n	800843c <UG_ButtonSetText+0x30>
 8008436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800843a:	e00d      	b.n	8008458 <UG_ButtonSetText+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	613b      	str	r3, [r7, #16]
   btn->str = str;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	615a      	str	r2, [r3, #20]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008450:	b2da      	uxtb	r2, r3
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <UG_ButtonSetFont>:

UG_RESULT UG_ButtonSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b086      	sub	sp, #24
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	460b      	mov	r3, r1
 800846a:	607a      	str	r2, [r7, #4]
 800846c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800846e:	2300      	movs	r3, #0
 8008470:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008476:	7afb      	ldrb	r3, [r7, #11]
 8008478:	461a      	mov	r2, r3
 800847a:	2101      	movs	r1, #1
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7fe fd96 	bl	8006fae <_UG_SearchObject>
 8008482:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <UG_ButtonSetFont+0x30>
 800848a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800848e:	e00d      	b.n	80084ac <UG_ButtonSetFont+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	613b      	str	r3, [r7, #16]
   btn->font = font;
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	60da      	str	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	781b      	ldrb	r3, [r3, #0]
 80084a0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3718      	adds	r7, #24
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}

080084b4 <UG_ButtonSetStyle>:

UG_RESULT UG_ButtonSetStyle( UG_WINDOW* wnd, UG_U8 id, UG_U8 style )
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b084      	sub	sp, #16
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	460b      	mov	r3, r1
 80084be:	70fb      	strb	r3, [r7, #3]
 80084c0:	4613      	mov	r3, r2
 80084c2:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80084cc:	78fb      	ldrb	r3, [r7, #3]
 80084ce:	461a      	mov	r2, r3
 80084d0:	2101      	movs	r1, #1
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7fe fd6b 	bl	8006fae <_UG_SearchObject>
 80084d8:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d102      	bne.n	80084e6 <UG_ButtonSetStyle+0x32>
 80084e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084e4:	e065      	b.n	80085b2 <UG_ButtonSetStyle+0xfe>

   btn = (UG_BUTTON*)(obj->data);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	60bb      	str	r3, [r7, #8]

   /* Select color scheme */
   btn->style &= ~(BTN_STYLE_USE_ALTERNATE_COLORS | BTN_STYLE_TOGGLE_COLORS | BTN_STYLE_NO_BORDERS | BTN_STYLE_NO_FILL);
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	785b      	ldrb	r3, [r3, #1]
 80084f0:	f023 031e 	bic.w	r3, r3, #30
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	705a      	strb	r2, [r3, #1]
   btn->state |= BTN_STATE_ALWAYS_REDRAW;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	f043 0302 	orr.w	r3, r3, #2
 8008502:	b2da      	uxtb	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	701a      	strb	r2, [r3, #0]
   if ( style & BTN_STYLE_NO_BORDERS )
 8008508:	78bb      	ldrb	r3, [r7, #2]
 800850a:	f003 0308 	and.w	r3, r3, #8
 800850e:	2b00      	cmp	r3, #0
 8008510:	d006      	beq.n	8008520 <UG_ButtonSetStyle+0x6c>
   {
      btn->style |= BTN_STYLE_NO_BORDERS;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	f043 0308 	orr.w	r3, r3, #8
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_NO_FILL )
 8008520:	78bb      	ldrb	r3, [r7, #2]
 8008522:	f003 0310 	and.w	r3, r3, #16
 8008526:	2b00      	cmp	r3, #0
 8008528:	d006      	beq.n	8008538 <UG_ButtonSetStyle+0x84>
   {
      btn->style |= BTN_STYLE_NO_FILL;
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	f043 0310 	orr.w	r3, r3, #16
 8008532:	b2da      	uxtb	r2, r3
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_TOGGLE_COLORS )
 8008538:	78bb      	ldrb	r3, [r7, #2]
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d007      	beq.n	8008552 <UG_ButtonSetStyle+0x9e>
   {
      btn->style |= BTN_STYLE_TOGGLE_COLORS;
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	785b      	ldrb	r3, [r3, #1]
 8008546:	f043 0302 	orr.w	r3, r3, #2
 800854a:	b2da      	uxtb	r2, r3
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	705a      	strb	r2, [r3, #1]
 8008550:	e013      	b.n	800857a <UG_ButtonSetStyle+0xc6>
   }
   else if ( style & BTN_STYLE_USE_ALTERNATE_COLORS )
 8008552:	78bb      	ldrb	r3, [r7, #2]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d007      	beq.n	800856c <UG_ButtonSetStyle+0xb8>
   {
      btn->style |= BTN_STYLE_USE_ALTERNATE_COLORS;
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	785b      	ldrb	r3, [r3, #1]
 8008560:	f043 0304 	orr.w	r3, r3, #4
 8008564:	b2da      	uxtb	r2, r3
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	705a      	strb	r2, [r3, #1]
 800856a:	e006      	b.n	800857a <UG_ButtonSetStyle+0xc6>
   }
   else
   {
      btn->state &= ~BTN_STATE_ALWAYS_REDRAW;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f023 0302 	bic.w	r3, r3, #2
 8008574:	b2da      	uxtb	r2, r3
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	701a      	strb	r2, [r3, #0]
   }

   /* 3D or 2D */
   if ( style & BTN_STYLE_3D )
 800857a:	78bb      	ldrb	r3, [r7, #2]
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d007      	beq.n	8008594 <UG_ButtonSetStyle+0xe0>
   {
      btn->style |= BTN_STYLE_3D;
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	785b      	ldrb	r3, [r3, #1]
 8008588:	f043 0301 	orr.w	r3, r3, #1
 800858c:	b2da      	uxtb	r2, r3
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	705a      	strb	r2, [r3, #1]
 8008592:	e006      	b.n	80085a2 <UG_ButtonSetStyle+0xee>
   }
   else
   {
      btn->style &= ~BTN_STYLE_3D;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	f023 0301 	bic.w	r3, r3, #1
 800859c:	b2da      	uxtb	r2, r3
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	705a      	strb	r2, [r3, #1]
   }   
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <_UG_ButtonUpdate>:
   return align;
}


static void _UG_ButtonUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80085bc:	b590      	push	{r4, r7, lr}
 80085be:	b091      	sub	sp, #68	; 0x44
 80085c0:	af02      	add	r7, sp, #8
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
   UG_BUTTON* btn;
   UG_AREA a;
   UG_TEXT txt;
   UG_U8 d,o=0;
 80085c6:	2300      	movs	r3, #0
 80085c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   /* Get object-specific data */
   btn = (UG_BUTTON*)(obj->data);
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	633b      	str	r3, [r7, #48]	; 0x30
   #endif

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	f003 0320 	and.w	r3, r3, #32
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 8181 	beq.w	80088e2 <_UG_ButtonUpdate+0x326>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	f003 0308 	and.w	r3, r3, #8
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	f000 8157 	beq.w	800889c <_UG_ButtonUpdate+0x2e0>
      {
         /* Full redraw necessary? */
         if ( (obj->state & OBJ_STATE_REDRAW) || (btn->state & BTN_STATE_ALWAYS_REDRAW) )
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d106      	bne.n	8008608 <_UG_ButtonUpdate+0x4c>
 80085fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	f003 0302 	and.w	r3, r3, #2
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 8108 	beq.w	8008818 <_UG_ButtonUpdate+0x25c>
         {
            UG_WindowGetArea(wnd,&a);
 8008608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800860c:	4619      	mov	r1, r3
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f7ff fbfe 	bl	8007e10 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800861a:	b29a      	uxth	r2, r3
 800861c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008620:	b29b      	uxth	r3, r3
 8008622:	4413      	add	r3, r2
 8008624:	b29b      	uxth	r3, r3
 8008626:	b21a      	sxth	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008632:	b29a      	uxth	r2, r3
 8008634:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008638:	b29b      	uxth	r3, r3
 800863a:	4413      	add	r3, r2
 800863c:	b29b      	uxth	r3, r3
 800863e:	b21a      	sxth	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800864a:	b29a      	uxth	r2, r3
 800864c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008650:	b29b      	uxth	r3, r3
 8008652:	4413      	add	r3, r2
 8008654:	b29b      	uxth	r3, r3
 8008656:	b21a      	sxth	r2, r3
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008662:	b29a      	uxth	r2, r3
 8008664:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008668:	b29b      	uxth	r3, r3
 800866a:	4413      	add	r3, r2
 800866c:	b29b      	uxth	r3, r3
 800866e:	b21a      	sxth	r2, r3
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008680:	429a      	cmp	r2, r3
 8008682:	f300 812b 	bgt.w	80088dc <_UG_ButtonUpdate+0x320>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008692:	429a      	cmp	r2, r3
 8008694:	f300 8124 	bgt.w	80088e0 <_UG_ButtonUpdate+0x324>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            /* 3D or 2D style? */
            d = ( btn->style & BTN_STYLE_3D )? 3:1;
 8008698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869a:	785b      	ldrb	r3, [r3, #1]
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <_UG_ButtonUpdate+0xec>
 80086a4:	2303      	movs	r3, #3
 80086a6:	e000      	b.n	80086aa <_UG_ButtonUpdate+0xee>
 80086a8:	2301      	movs	r3, #1
 80086aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            txt.bc = btn->bc;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	889b      	ldrh	r3, [r3, #4]
 80086b2:	837b      	strh	r3, [r7, #26]
            txt.fc = btn->fc;
 80086b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b6:	885b      	ldrh	r3, [r3, #2]
 80086b8:	833b      	strh	r3, [r7, #24]

            if( btn->state & BTN_STATE_PRESSED )
 80086ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 0301 	and.w	r3, r3, #1
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d01b      	beq.n	80086fe <_UG_ButtonUpdate+0x142>
            {
              /* o is the text offset, to provide a visual effect when pressed */
              o=1;
 80086c6:	2301      	movs	r3, #1
 80086c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
               /* "toggle" style? */
               if( btn->style & BTN_STYLE_TOGGLE_COLORS )
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	785b      	ldrb	r3, [r3, #1]
 80086d0:	f003 0302 	and.w	r3, r3, #2
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d006      	beq.n	80086e6 <_UG_ButtonUpdate+0x12a>
               {
                  /* Swap colors */
                  txt.bc = btn->fc;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	885b      	ldrh	r3, [r3, #2]
 80086dc:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->bc;
 80086de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e0:	889b      	ldrh	r3, [r3, #4]
 80086e2:	833b      	strh	r3, [r7, #24]
 80086e4:	e00b      	b.n	80086fe <_UG_ButtonUpdate+0x142>
               }
               /* Use alternate colors? */
               else if ( btn->style & BTN_STYLE_USE_ALTERNATE_COLORS )
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	785b      	ldrb	r3, [r3, #1]
 80086ea:	f003 0304 	and.w	r3, r3, #4
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d005      	beq.n	80086fe <_UG_ButtonUpdate+0x142>
               {
                  txt.bc = btn->abc;
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	891b      	ldrh	r3, [r3, #8]
 80086f6:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->afc;
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	88db      	ldrh	r3, [r3, #6]
 80086fc:	833b      	strh	r3, [r7, #24]
               }
            }
            if ( !(btn->style & BTN_STYLE_NO_FILL) )
 80086fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008700:	785b      	ldrb	r3, [r3, #1]
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b00      	cmp	r3, #0
 8008708:	d12d      	bne.n	8008766 <_UG_ButtonUpdate+0x1aa>
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, txt.bc);
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008710:	b29a      	uxth	r2, r3
 8008712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008716:	b29b      	uxth	r3, r3
 8008718:	4413      	add	r3, r2
 800871a:	b29b      	uxth	r3, r3
 800871c:	b218      	sxth	r0, r3
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008724:	b29a      	uxth	r2, r3
 8008726:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800872a:	b29b      	uxth	r3, r3
 800872c:	4413      	add	r3, r2
 800872e:	b29b      	uxth	r3, r3
 8008730:	b219      	sxth	r1, r3
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008738:	b29a      	uxth	r2, r3
 800873a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800873e:	b29b      	uxth	r3, r3
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	b29b      	uxth	r3, r3
 8008744:	b21c      	sxth	r4, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800874c:	b29a      	uxth	r2, r3
 800874e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008752:	b29b      	uxth	r3, r3
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	b29b      	uxth	r3, r3
 8008758:	b21a      	sxth	r2, r3
 800875a:	8b7b      	ldrh	r3, [r7, #26]
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4613      	mov	r3, r2
 8008760:	4622      	mov	r2, r4
 8008762:	f7fc ffc7 	bl	80056f4 <UG_FillFrame>

            /* Draw button text */
            txt.a.xs = obj->a_abs.xs+d+o;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800876c:	b29a      	uxth	r2, r3
 800876e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008772:	b29b      	uxth	r3, r3
 8008774:	4413      	add	r3, r2
 8008776:	b29a      	uxth	r2, r3
 8008778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800877c:	b29b      	uxth	r3, r3
 800877e:	4413      	add	r3, r2
 8008780:	b29b      	uxth	r3, r3
 8008782:	b21b      	sxth	r3, r3
 8008784:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys+d+o;
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800878c:	b29a      	uxth	r2, r3
 800878e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008792:	b29b      	uxth	r3, r3
 8008794:	4413      	add	r3, r2
 8008796:	b29a      	uxth	r2, r3
 8008798:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800879c:	b29b      	uxth	r3, r3
 800879e:	4413      	add	r3, r2
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	b21b      	sxth	r3, r3
 80087a4:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe-d+o;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4413      	add	r3, r2
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	b21b      	sxth	r3, r3
 80087c4:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye-d+o;
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80087cc:	b29a      	uxth	r2, r3
 80087ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	b29a      	uxth	r2, r3
 80087d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087dc:	b29b      	uxth	r3, r3
 80087de:	4413      	add	r3, r2
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	b21b      	sxth	r3, r3
 80087e4:	82fb      	strh	r3, [r7, #22]
            txt.align = btn->align;
 80087e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e8:	7c1b      	ldrb	r3, [r3, #16]
 80087ea:	773b      	strb	r3, [r7, #28]
            txt.font = btn->font;
 80087ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	60fb      	str	r3, [r7, #12]
            txt.h_space = 2;
 80087f2:	2302      	movs	r3, #2
 80087f4:	83fb      	strh	r3, [r7, #30]
            txt.v_space = 2;
 80087f6:	2302      	movs	r3, #2
 80087f8:	843b      	strh	r3, [r7, #32]
            txt.str = btn->str;
 80087fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fc:	695b      	ldr	r3, [r3, #20]
 80087fe:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 8008800:	f107 0308 	add.w	r3, r7, #8
 8008804:	4618      	mov	r0, r3
 8008806:	f7fe fabb 	bl	8006d80 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	701a      	strb	r2, [r3, #0]
#ifdef UGUI_USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
#endif
         }
         /* Draw button frame */
         if ( !(btn->style & BTN_STYLE_NO_BORDERS) )
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	785b      	ldrb	r3, [r3, #1]
 800881c:	f003 0308 	and.w	r3, r3, #8
 8008820:	2b00      	cmp	r3, #0
 8008822:	d153      	bne.n	80088cc <_UG_ButtonUpdate+0x310>
         {
             if ( btn->style & BTN_STYLE_3D )
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	785b      	ldrb	r3, [r3, #1]
 8008828:	f003 0301 	and.w	r3, r3, #1
 800882c:	2b00      	cmp	r3, #0
 800882e:	d019      	beq.n	8008864 <_UG_ButtonUpdate+0x2a8>
             {  /* 3D */
                _UG_DrawObjectFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye, (btn->state&BTN_STATE_PRESSED)?(UG_COLOR*)pal_button_pressed:(UG_COLOR*)pal_button_released);
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884a:	781b      	ldrb	r3, [r3, #0]
 800884c:	f003 0301 	and.w	r3, r3, #1
 8008850:	2b00      	cmp	r3, #0
 8008852:	d001      	beq.n	8008858 <_UG_ButtonUpdate+0x29c>
 8008854:	4b24      	ldr	r3, [pc, #144]	; (80088e8 <_UG_ButtonUpdate+0x32c>)
 8008856:	e000      	b.n	800885a <_UG_ButtonUpdate+0x29e>
 8008858:	4b24      	ldr	r3, [pc, #144]	; (80088ec <_UG_ButtonUpdate+0x330>)
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	4623      	mov	r3, r4
 800885e:	f7fe fbe1 	bl	8007024 <_UG_DrawObjectFrame>
 8008862:	e033      	b.n	80088cc <_UG_ButtonUpdate+0x310>
             }
             else
             {  /* 2D */
                 UG_DrawFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye,(btn->state&BTN_STATE_PRESSED)?btn->abc:btn->afc);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800887c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	f003 0301 	and.w	r3, r3, #1
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <_UG_ButtonUpdate+0x2d2>
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	891b      	ldrh	r3, [r3, #8]
 800888c:	e001      	b.n	8008892 <_UG_ButtonUpdate+0x2d6>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	88db      	ldrh	r3, [r3, #6]
 8008892:	9300      	str	r3, [sp, #0]
 8008894:	4623      	mov	r3, r4
 8008896:	f7fd f816 	bl	80058c6 <UG_DrawFrame>
 800889a:	e017      	b.n	80088cc <_UG_ButtonUpdate+0x310>
             }
         }
      }
      else
      {
          if ( !(btn->style & BTN_STYLE_NO_FILL) )
 800889c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889e:	785b      	ldrb	r3, [r3, #1]
 80088a0:	f003 0310 	and.w	r3, r3, #16
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d111      	bne.n	80088cc <_UG_ButtonUpdate+0x310>
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	899b      	ldrh	r3, [r3, #12]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	4623      	mov	r3, r4
 80088c8:	f7fc ff14 	bl	80056f4 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	f023 0320 	bic.w	r3, r3, #32
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	701a      	strb	r2, [r3, #0]
 80088da:	e002      	b.n	80088e2 <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.ye > wnd->ye ) return;
 80088dc:	bf00      	nop
 80088de:	e000      	b.n	80088e2 <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80088e0:	bf00      	nop
   }
}
 80088e2:	373c      	adds	r7, #60	; 0x3c
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd90      	pop	{r4, r7, pc}
 80088e8:	0802119c 	.word	0x0802119c
 80088ec:	080211b4 	.word	0x080211b4

080088f0 <UG_ProgressCreate>:
const UG_COLOR pal_progress[] = {
    C_PAL_PROGRESS
};

UG_RESULT UG_ProgressCreate( UG_WINDOW* wnd, UG_PROGRESS* pgb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4611      	mov	r1, r2
 80088fc:	461a      	mov	r2, r3
 80088fe:	460b      	mov	r3, r1
 8008900:	71fb      	strb	r3, [r7, #7]
 8008902:	4613      	mov	r3, r2
 8008904:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008906:	68f8      	ldr	r0, [r7, #12]
 8008908:	f7fe fcad 	bl	8007266 <_UG_GetFreeObject>
 800890c:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <UG_ProgressCreate+0x2a>
 8008914:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008918:	e047      	b.n	80089aa <UG_ProgressCreate+0xba>

   /* Initialize object-specific parameters */
   pgb->style = PGB_STYLE_3D;
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2201      	movs	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]
   pgb->fc = wnd->fc;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	895a      	ldrh	r2, [r3, #10]
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	805a      	strh	r2, [r3, #2]
   pgb->bc = wnd->bc;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	899a      	ldrh	r2, [r3, #12]
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	809a      	strh	r2, [r3, #4]
   pgb->progress = 0;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	2200      	movs	r2, #0
 8008934:	719a      	strb	r2, [r3, #6]

   /* Initialize standard object parameters */
   obj->update = _UG_ProgressUpdate;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4a1e      	ldr	r2, [pc, #120]	; (80089b4 <UG_ProgressCreate+0xc4>)
 800893a:	605a      	str	r2, [r3, #4]
   obj->type = OBJ_TYPE_PROGRESS;
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	2205      	movs	r2, #5
 8008940:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2200      	movs	r2, #0
 8008946:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	88ba      	ldrh	r2, [r7, #4]
 800894c:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	8c3a      	ldrh	r2, [r7, #32]
 8008952:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008958:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800895e:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008966:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800896e:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008976:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800897e:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	79fa      	ldrb	r2, [r7, #7]
 8008984:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 800898e:	b2da      	uxtb	r2, r3
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)pgb;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	68ba      	ldr	r2, [r7, #8]
 8008998:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	f023 0301 	bic.w	r3, r3, #1
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3718      	adds	r7, #24
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	08008a8d 	.word	0x08008a8d

080089b8 <UG_ProgressSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
 80089c4:	4613      	mov	r3, r2
 80089c6:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	461a      	mov	r2, r3
 80089d4:	2105      	movs	r1, #5
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fe fae9 	bl	8006fae <_UG_SearchObject>
 80089dc:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d102      	bne.n	80089ea <UG_ProgressSetForeColor+0x32>
 80089e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089e8:	e00d      	b.n	8008a06 <UG_ProgressSetForeColor+0x4e>

   pgb = (UG_PROGRESS*)(obj->data);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	60bb      	str	r3, [r7, #8]
   pgb->fc = fc;
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	883a      	ldrh	r2, [r7, #0]
 80089f4:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <UG_ProgressSetProgress>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetProgress( UG_WINDOW* wnd, UG_U8 id, UG_U8 progress )
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	460b      	mov	r3, r1
 8008a18:	70fb      	strb	r3, [r7, #3]
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008a22:	2300      	movs	r3, #0
 8008a24:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008a26:	78fb      	ldrb	r3, [r7, #3]
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2105      	movs	r1, #5
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7fe fabe 	bl	8006fae <_UG_SearchObject>
 8008a32:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d102      	bne.n	8008a40 <UG_ProgressSetProgress+0x32>
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a3e:	e020      	b.n	8008a82 <UG_ProgressSetProgress+0x74>

   progress = progress > 100 ? 100 : progress;
 8008a40:	78bb      	ldrb	r3, [r7, #2]
 8008a42:	2b64      	cmp	r3, #100	; 0x64
 8008a44:	bf28      	it	cs
 8008a46:	2364      	movcs	r3, #100	; 0x64
 8008a48:	70bb      	strb	r3, [r7, #2]

   pgb = (UG_PROGRESS*)(obj->data);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	60bb      	str	r3, [r7, #8]

   // Only update if different
   if(progress != pgb->progress)
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	799b      	ldrb	r3, [r3, #6]
 8008a54:	78ba      	ldrb	r2, [r7, #2]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d012      	beq.n	8008a80 <UG_ProgressSetProgress+0x72>
   {
      // Only redraw if new progress is less then actual(Need to redraw the background)
      obj->state |= OBJ_STATE_UPDATE | ((progress < pgb->progress) ? OBJ_STATE_REDRAW : 0);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	b25b      	sxtb	r3, r3
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	7992      	ldrb	r2, [r2, #6]
 8008a64:	78b9      	ldrb	r1, [r7, #2]
 8008a66:	4291      	cmp	r1, r2
 8008a68:	d201      	bcs.n	8008a6e <UG_ProgressSetProgress+0x60>
 8008a6a:	2260      	movs	r2, #96	; 0x60
 8008a6c:	e000      	b.n	8008a70 <UG_ProgressSetProgress+0x62>
 8008a6e:	2220      	movs	r2, #32
 8008a70:	4313      	orrs	r3, r2
 8008a72:	b25b      	sxtb	r3, r3
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	701a      	strb	r2, [r3, #0]
      pgb->progress = progress;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
 8008a7c:	78ba      	ldrb	r2, [r7, #2]
 8008a7e:	719a      	strb	r2, [r3, #6]
   }

   return UG_RESULT_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
	...

08008a8c <_UG_ProgressUpdate>:
   }
   return c;
}

static void _UG_ProgressUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008a8c:	b590      	push	{r4, r7, lr}
 8008a8e:	b08b      	sub	sp, #44	; 0x2c
 8008a90:	af02      	add	r7, sp, #8
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	6039      	str	r1, [r7, #0]
   UG_PROGRESS* pgb;
   UG_AREA a;
   UG_U8 d=0;
 8008a96:	2300      	movs	r3, #0
 8008a98:	77fb      	strb	r3, [r7, #31]
   UG_S16 w, wps, wpe;

   /* Get object-specific data */
   pgb = (UG_PROGRESS*)(obj->data);
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	61bb      	str	r3, [r7, #24]

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	f003 0320 	and.w	r3, r3, #32
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 81a5 	beq.w	8008df8 <_UG_ProgressUpdate+0x36c>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	f003 0308 	and.w	r3, r3, #8
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 8162 	beq.w	8008d80 <_UG_ProgressUpdate+0x2f4>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 818c 	beq.w	8008de2 <_UG_ProgressUpdate+0x356>
         {
            UG_WindowGetArea(wnd,&a);
 8008aca:	f107 0308 	add.w	r3, r7, #8
 8008ace:	4619      	mov	r1, r3
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	f7ff f99d 	bl	8007e10 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	b21a      	sxth	r2, r3
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	b21a      	sxth	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4413      	add	r3, r2
 8008b16:	b29b      	uxth	r3, r3
 8008b18:	b21a      	sxth	r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008b24:	b29a      	uxth	r2, r3
 8008b26:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	b21a      	sxth	r2, r3
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	81da      	strh	r2, [r3, #14]

            if ( obj->a_abs.ye > wnd->ye ) return;
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	f300 8155 	bgt.w	8008df2 <_UG_ProgressUpdate+0x366>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	f300 814e 	bgt.w	8008df6 <_UG_ProgressUpdate+0x36a>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            d = 1;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	77fb      	strb	r3, [r7, #31]
            /* 3D or 2D style? */
            if ( !(pgb->style & PGB_STYLE_NO_BORDERS) )
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d12e      	bne.n	8008bc8 <_UG_ProgressUpdate+0x13c>
            {
               if ( pgb->style & PGB_STYLE_3D )
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	f003 0301 	and.w	r3, r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d013      	beq.n	8008b9e <_UG_ProgressUpdate+0x112>
               {  /* 3D */
                  _UG_DrawObjectFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, (UG_COLOR*)pal_progress);
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008b8e:	4c9c      	ldr	r4, [pc, #624]	; (8008e00 <_UG_ProgressUpdate+0x374>)
 8008b90:	9400      	str	r4, [sp, #0]
 8008b92:	f7fe fa47 	bl	8007024 <_UG_DrawObjectFrame>
                  d += 3;
 8008b96:	7ffb      	ldrb	r3, [r7, #31]
 8008b98:	3303      	adds	r3, #3
 8008b9a:	77fb      	strb	r3, [r7, #31]
 8008b9c:	e014      	b.n	8008bc8 <_UG_ProgressUpdate+0x13c>
               }
               else
               {  /* 2D */
                  UG_DrawFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, pgb->fc);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	885b      	ldrh	r3, [r3, #2]
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	4623      	mov	r3, r4
 8008bbe:	f7fc fe82 	bl	80058c6 <UG_DrawFrame>
                  d += 1;
 8008bc2:	7ffb      	ldrb	r3, [r7, #31]
 8008bc4:	3301      	adds	r3, #1
 8008bc6:	77fb      	strb	r3, [r7, #31]
               }
            }
            
            w   = ((obj->a_abs.xe-d)-(obj->a_abs.xs+d));
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	7ffb      	ldrb	r3, [r7, #31]
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	b29a      	uxth	r2, r3
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bde:	b299      	uxth	r1, r3
 8008be0:	7ffb      	ldrb	r3, [r7, #31]
 8008be2:	b29b      	uxth	r3, r3
 8008be4:	440b      	add	r3, r1
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	1ad3      	subs	r3, r2, r3
 8008bea:	b29b      	uxth	r3, r3
 8008bec:	82fb      	strh	r3, [r7, #22]
            wps = w * pgb->progress / 100;
 8008bee:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	7992      	ldrb	r2, [r2, #6]
 8008bf6:	fb02 f303 	mul.w	r3, r2, r3
 8008bfa:	4a82      	ldr	r2, [pc, #520]	; (8008e04 <_UG_ProgressUpdate+0x378>)
 8008bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8008c00:	1152      	asrs	r2, r2, #5
 8008c02:	17db      	asrs	r3, r3, #31
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	82bb      	strh	r3, [r7, #20]
            wpe = w - wps;
 8008c08:	8afa      	ldrh	r2, [r7, #22]
 8008c0a:	8abb      	ldrh	r3, [r7, #20]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	827b      	strh	r3, [r7, #18]

            if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	f003 0308 	and.w	r3, r3, #8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d17d      	bne.n	8008d1a <_UG_ProgressUpdate+0x28e>
                /* What's this for? Drawing a frame before drawing the remaining frames on top on it? Seems to do nothing, waste power? */
               //UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);

            // Draw remaining frame first
            if(wpe > 0)
 8008c1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	dd79      	ble.n	8008d1a <_UG_ProgressUpdate+0x28e>
            {
               UG_S16 xs = obj->a_abs.xs + d + wps;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c2c:	b29a      	uxth	r2, r3
 8008c2e:	7ffb      	ldrb	r3, [r7, #31]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	4413      	add	r3, r2
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	8abb      	ldrh	r3, [r7, #20]
 8008c38:	4413      	add	r3, r2
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	83bb      	strh	r3, [r7, #28]
               UG_S16 xe = obj->a_abs.xe - d;
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	7ffb      	ldrb	r3, [r7, #31]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	823b      	strh	r3, [r7, #16]
               
               if ( pgb->style & PGB_STYLE_FORE_COLOR_MESH )
 8008c50:	69bb      	ldr	r3, [r7, #24]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d042      	beq.n	8008ce2 <_UG_ProgressUpdate+0x256>
               {
                  // FIXME: Need fix, if start at 0, it is shifted 1 pixel right.
                  // Needed to match mesh pattern, otherwise it would "scroll right" 
                  if((((obj->a_abs.xs+d) & 1) && (wps & 1)) || (!((obj->a_abs.xs+d) & 1) && !(wps & 1)))
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c62:	461a      	mov	r2, r3
 8008c64:	7ffb      	ldrb	r3, [r7, #31]
 8008c66:	4413      	add	r3, r2
 8008c68:	f003 0301 	and.w	r3, r3, #1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d004      	beq.n	8008c7a <_UG_ProgressUpdate+0x1ee>
 8008c70:	8abb      	ldrh	r3, [r7, #20]
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10e      	bne.n	8008c98 <_UG_ProgressUpdate+0x20c>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c80:	461a      	mov	r2, r3
 8008c82:	7ffb      	ldrb	r3, [r7, #31]
 8008c84:	4413      	add	r3, r2
 8008c86:	f003 0301 	and.w	r3, r3, #1
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d10a      	bne.n	8008ca4 <_UG_ProgressUpdate+0x218>
 8008c8e:	8abb      	ldrh	r3, [r7, #20]
 8008c90:	f003 0301 	and.w	r3, r3, #1
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d105      	bne.n	8008ca4 <_UG_ProgressUpdate+0x218>
                     xs++;
 8008c98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	b29b      	uxth	r3, r3
 8008ca2:	83bb      	strh	r3, [r7, #28]
                  UG_DrawMesh (xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, 2, pgb->fc);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	7ffb      	ldrb	r3, [r7, #31]
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	4413      	add	r3, r2
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	b219      	sxth	r1, r3
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008cbc:	b29a      	uxth	r2, r3
 8008cbe:	7ffb      	ldrb	r3, [r7, #31]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	1ad3      	subs	r3, r2, r3
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	b21c      	sxth	r4, r3
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	885b      	ldrh	r3, [r3, #2]
 8008ccc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008cd0:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	2302      	movs	r3, #2
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	4623      	mov	r3, r4
 8008cdc:	f7fc fd7c 	bl	80057d8 <UG_DrawMesh>
 8008ce0:	e01b      	b.n	8008d1a <_UG_ProgressUpdate+0x28e>
               }
               else
               {
                  UG_FillFrame(xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, pgb->bc);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008ce8:	b29a      	uxth	r2, r3
 8008cea:	7ffb      	ldrb	r3, [r7, #31]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	4413      	add	r3, r2
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	b219      	sxth	r1, r3
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	7ffb      	ldrb	r3, [r7, #31]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	b21c      	sxth	r4, r3
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	889b      	ldrh	r3, [r3, #4]
 8008d0a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008d0e:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	4623      	mov	r3, r4
 8008d16:	f7fc fced 	bl	80056f4 <UG_FillFrame>
               }
            }

            // Draw elapsed frame
            if(pgb->progress > 0)
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	799b      	ldrb	r3, [r3, #6]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d05f      	beq.n	8008de2 <_UG_ProgressUpdate+0x356>
            {
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xs+d+wps, obj->a_abs.ye-d, pgb->fc);
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d28:	b29a      	uxth	r2, r3
 8008d2a:	7ffb      	ldrb	r3, [r7, #31]
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	4413      	add	r3, r2
 8008d30:	b29b      	uxth	r3, r3
 8008d32:	b218      	sxth	r0, r3
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d3a:	b29a      	uxth	r2, r3
 8008d3c:	7ffb      	ldrb	r3, [r7, #31]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	4413      	add	r3, r2
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	b219      	sxth	r1, r3
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d4c:	b29a      	uxth	r2, r3
 8008d4e:	7ffb      	ldrb	r3, [r7, #31]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	4413      	add	r3, r2
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	8abb      	ldrh	r3, [r7, #20]
 8008d58:	4413      	add	r3, r2
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	b21c      	sxth	r4, r3
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	7ffb      	ldrb	r3, [r7, #31]
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	b21a      	sxth	r2, r3
 8008d70:	69bb      	ldr	r3, [r7, #24]
 8008d72:	885b      	ldrh	r3, [r3, #2]
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	4613      	mov	r3, r2
 8008d78:	4622      	mov	r2, r4
 8008d7a:	f7fc fcbb 	bl	80056f4 <UG_FillFrame>
 8008d7e:	e030      	b.n	8008de2 <_UG_ProgressUpdate+0x356>
#endif
         }
      }
      else
      {
         if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	f003 0308 	and.w	r3, r3, #8
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d12a      	bne.n	8008de2 <_UG_ProgressUpdate+0x356>
            UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d92:	b29a      	uxth	r2, r3
 8008d94:	7ffb      	ldrb	r3, [r7, #31]
 8008d96:	b29b      	uxth	r3, r3
 8008d98:	4413      	add	r3, r2
 8008d9a:	b29b      	uxth	r3, r3
 8008d9c:	b218      	sxth	r0, r3
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	7ffb      	ldrb	r3, [r7, #31]
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	4413      	add	r3, r2
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	b219      	sxth	r1, r3
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	7ffb      	ldrb	r3, [r7, #31]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	1ad3      	subs	r3, r2, r3
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	b21c      	sxth	r4, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	7ffb      	ldrb	r3, [r7, #31]
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	b21a      	sxth	r2, r3
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	899b      	ldrh	r3, [r3, #12]
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	4622      	mov	r2, r4
 8008dde:	f7fc fc89 	bl	80056f4 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	f023 0320 	bic.w	r3, r3, #32
 8008dea:	b2da      	uxtb	r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	701a      	strb	r2, [r3, #0]
 8008df0:	e002      	b.n	8008df8 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008df2:	bf00      	nop
 8008df4:	e000      	b.n	8008df8 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008df6:	bf00      	nop
   }
}
 8008df8:	3724      	adds	r7, #36	; 0x24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd90      	pop	{r4, r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	080211cc 	.word	0x080211cc
 8008e04:	51eb851f 	.word	0x51eb851f

08008e08 <UG_TextboxCreate>:

/* Static functions */
static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj);

UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	4611      	mov	r1, r2
 8008e14:	461a      	mov	r2, r3
 8008e16:	460b      	mov	r3, r1
 8008e18:	71fb      	strb	r3, [r7, #7]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	f7fe fa21 	bl	8007266 <_UG_GetFreeObject>
 8008e24:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <UG_TextboxCreate+0x2a>
 8008e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e30:	e05d      	b.n	8008eee <UG_TextboxCreate+0xe6>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]
   txb->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8008e38:	f7fc fc1c 	bl	8005674 <UG_GetGUI>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d004      	beq.n	8008e4c <UG_TextboxCreate+0x44>
 8008e42:	f7fc fc17 	bl	8005674 <UG_GetGUI>
 8008e46:	4603      	mov	r3, r0
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	e000      	b.n	8008e4e <UG_TextboxCreate+0x46>
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	6053      	str	r3, [r2, #4]
   txb->style = 0; /* reserved */
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	895a      	ldrh	r2, [r3, #10]
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	899a      	ldrh	r2, [r3, #12]
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	2212      	movs	r2, #18
 8008e6c:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2200      	movs	r2, #0
 8008e72:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2200      	movs	r2, #0
 8008e78:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	4a1e      	ldr	r2, [pc, #120]	; (8008ef8 <UG_TextboxCreate+0xf0>)
 8008e7e:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_TEXTBOX;
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2202      	movs	r2, #2
 8008e84:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	88ba      	ldrh	r2, [r7, #4]
 8008e90:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	8c3a      	ldrh	r2, [r7, #32]
 8008e96:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e9c:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008ea2:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eaa:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eb2:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008eba:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ec2:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	79fa      	ldrb	r2, [r7, #7]
 8008ec8:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	781b      	ldrb	r3, [r3, #0]
 8008ee2:	f023 0301 	bic.w	r3, r3, #1
 8008ee6:	b2da      	uxtb	r2, r3
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3718      	adds	r7, #24
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	080090a7 	.word	0x080090a7

08008efc <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	460b      	mov	r3, r1
 8008f06:	70fb      	strb	r3, [r7, #3]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f14:	78fb      	ldrb	r3, [r7, #3]
 8008f16:	461a      	mov	r2, r3
 8008f18:	2102      	movs	r1, #2
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fe f847 	bl	8006fae <_UG_SearchObject>
 8008f20:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d102      	bne.n	8008f2e <UG_TextboxSetForeColor+0x32>
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f2c:	e00d      	b.n	8008f4a <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	883a      	ldrh	r2, [r7, #0]
 8008f38:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b084      	sub	sp, #16
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	70fb      	strb	r3, [r7, #3]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008f62:	2300      	movs	r3, #0
 8008f64:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f6a:	78fb      	ldrb	r3, [r7, #3]
 8008f6c:	461a      	mov	r2, r3
 8008f6e:	2102      	movs	r1, #2
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	f7fe f81c 	bl	8006fae <_UG_SearchObject>
 8008f76:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d102      	bne.n	8008f84 <UG_TextboxSetBackColor+0x32>
 8008f7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f82:	e00d      	b.n	8008fa0 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	69db      	ldr	r3, [r3, #28]
 8008f88:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	883a      	ldrh	r2, [r7, #0]
 8008f8e:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3710      	adds	r7, #16
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	b086      	sub	sp, #24
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	60f8      	str	r0, [r7, #12]
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	607a      	str	r2, [r7, #4]
 8008fb4:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008fbe:	7afb      	ldrb	r3, [r7, #11]
 8008fc0:	461a      	mov	r2, r3
 8008fc2:	2102      	movs	r1, #2
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7fd fff2 	bl	8006fae <_UG_SearchObject>
 8008fca:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d102      	bne.n	8008fd8 <UG_TextboxSetText+0x30>
 8008fd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fd6:	e00d      	b.n	8008ff4 <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008fd8:	697b      	ldr	r3, [r7, #20]
 8008fda:	69db      	ldr	r3, [r3, #28]
 8008fdc:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8008fde:	693b      	ldr	r3, [r7, #16]
 8008fe0:	687a      	ldr	r2, [r7, #4]
 8008fe2:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	781b      	ldrb	r3, [r3, #0]
 8008fe8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3718      	adds	r7, #24
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	460b      	mov	r3, r1
 8009006:	607a      	str	r2, [r7, #4]
 8009008:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800900a:	2300      	movs	r3, #0
 800900c:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 800900e:	2300      	movs	r3, #0
 8009010:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009012:	7afb      	ldrb	r3, [r7, #11]
 8009014:	461a      	mov	r2, r3
 8009016:	2102      	movs	r1, #2
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f7fd ffc8 	bl	8006fae <_UG_SearchObject>
 800901e:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d102      	bne.n	800902c <UG_TextboxSetFont+0x30>
 8009026:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800902a:	e00d      	b.n	8009048 <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	69db      	ldr	r3, [r3, #28]
 8009030:	613b      	str	r3, [r7, #16]
   txb->font = font;
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009040:	b2da      	uxtb	r2, r3
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3718      	adds	r7, #24
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	460b      	mov	r3, r1
 800905a:	70fb      	strb	r3, [r7, #3]
 800905c:	4613      	mov	r3, r2
 800905e:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8009064:	2300      	movs	r3, #0
 8009066:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009068:	78fb      	ldrb	r3, [r7, #3]
 800906a:	461a      	mov	r2, r3
 800906c:	2102      	movs	r1, #2
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7fd ff9d 	bl	8006fae <_UG_SearchObject>
 8009074:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <UG_TextboxSetAlignment+0x32>
 800907c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009080:	e00d      	b.n	800909e <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	69db      	ldr	r3, [r3, #28]
 8009086:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	78ba      	ldrb	r2, [r7, #2]
 800908c:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009096:	b2da      	uxtb	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3710      	adds	r7, #16
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <_UG_TextboxUpdate>:
   }
   return align;
}

static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80090a6:	b590      	push	{r4, r7, lr}
 80090a8:	b08f      	sub	sp, #60	; 0x3c
 80090aa:	af02      	add	r7, sp, #8
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	f003 0320 	and.w	r3, r3, #32
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 80b8 	beq.w	8009234 <_UG_TextboxUpdate+0x18e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 0308 	and.w	r3, r3, #8
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	f000 8094 	beq.w	80091fa <_UG_TextboxUpdate+0x154>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090da:	2b00      	cmp	r3, #0
 80090dc:	f000 809f 	beq.w	800921e <_UG_TextboxUpdate+0x178>
         {
            UG_WindowGetArea(wnd,&a);
 80090e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f7fe fe92 	bl	8007e10 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	4413      	add	r3, r2
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	b21a      	sxth	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800910a:	b29a      	uxth	r2, r3
 800910c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009110:	b29b      	uxth	r3, r3
 8009112:	4413      	add	r3, r2
 8009114:	b29b      	uxth	r3, r3
 8009116:	b21a      	sxth	r2, r3
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009122:	b29a      	uxth	r2, r3
 8009124:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009128:	b29b      	uxth	r3, r3
 800912a:	4413      	add	r3, r2
 800912c:	b29b      	uxth	r3, r3
 800912e:	b21a      	sxth	r2, r3
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800913a:	b29a      	uxth	r2, r3
 800913c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009140:	b29b      	uxth	r3, r3
 8009142:	4413      	add	r3, r2
 8009144:	b29b      	uxth	r3, r3
 8009146:	b21a      	sxth	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009158:	429a      	cmp	r2, r3
 800915a:	dc68      	bgt.n	800922e <_UG_TextboxUpdate+0x188>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009168:	429a      	cmp	r2, r3
 800916a:	dc62      	bgt.n	8009232 <_UG_TextboxUpdate+0x18c>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            txt.bc = txb->bc;
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	899b      	ldrh	r3, [r3, #12]
 8009170:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 8009172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009174:	895b      	ldrh	r3, [r3, #10]
 8009176:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8009190:	8b7b      	ldrh	r3, [r7, #26]
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	4623      	mov	r3, r4
 8009196:	f7fc faad 	bl	80056f4 <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80091a0:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80091a8:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80091b0:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80091b8:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	7b9b      	ldrb	r3, [r3, #14]
 80091be:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 80091c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 80091c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091c8:	f993 300f 	ldrsb.w	r3, [r3, #15]
 80091cc:	b21b      	sxth	r3, r3
 80091ce:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80091d6:	b21b      	sxth	r3, r3
 80091d8:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 80091e0:	f107 0308 	add.w	r3, r7, #8
 80091e4:	4618      	mov	r0, r3
 80091e6:	f7fd fdcb 	bl	8006d80 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	701a      	strb	r2, [r3, #0]
 80091f8:	e011      	b.n	800921e <_UG_TextboxUpdate+0x178>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	899b      	ldrh	r3, [r3, #12]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4623      	mov	r3, r4
 800921a:	f7fc fa6b 	bl	80056f4 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	f023 0320 	bic.w	r3, r3, #32
 8009226:	b2da      	uxtb	r2, r3
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	e002      	b.n	8009234 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.ye > wnd->ye ) return;
 800922e:	bf00      	nop
 8009230:	e000      	b.n	8009234 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8009232:	bf00      	nop
   }
}
 8009234:	3734      	adds	r7, #52	; 0x34
 8009236:	46bd      	mov	sp, r7
 8009238:	bd90      	pop	{r4, r7, pc}
	...

0800923c <__NVIC_SetPriority>:
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	4603      	mov	r3, r0
 8009244:	6039      	str	r1, [r7, #0]
 8009246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800924c:	2b00      	cmp	r3, #0
 800924e:	db0a      	blt.n	8009266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	b2da      	uxtb	r2, r3
 8009254:	490c      	ldr	r1, [pc, #48]	; (8009288 <__NVIC_SetPriority+0x4c>)
 8009256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800925a:	0112      	lsls	r2, r2, #4
 800925c:	b2d2      	uxtb	r2, r2
 800925e:	440b      	add	r3, r1
 8009260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009264:	e00a      	b.n	800927c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	b2da      	uxtb	r2, r3
 800926a:	4908      	ldr	r1, [pc, #32]	; (800928c <__NVIC_SetPriority+0x50>)
 800926c:	79fb      	ldrb	r3, [r7, #7]
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	3b04      	subs	r3, #4
 8009274:	0112      	lsls	r2, r2, #4
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	440b      	add	r3, r1
 800927a:	761a      	strb	r2, [r3, #24]
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	e000e100 	.word	0xe000e100
 800928c:	e000ed00 	.word	0xe000ed00

08009290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009290:	b580      	push	{r7, lr}
 8009292:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009294:	2100      	movs	r1, #0
 8009296:	f06f 0004 	mvn.w	r0, #4
 800929a:	f7ff ffcf 	bl	800923c <__NVIC_SetPriority>
#endif
}
 800929e:	bf00      	nop
 80092a0:	bd80      	pop	{r7, pc}
	...

080092a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80092a4:	b480      	push	{r7}
 80092a6:	b083      	sub	sp, #12
 80092a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092aa:	f3ef 8305 	mrs	r3, IPSR
 80092ae:	603b      	str	r3, [r7, #0]
  return(result);
 80092b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d003      	beq.n	80092be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80092b6:	f06f 0305 	mvn.w	r3, #5
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	e00c      	b.n	80092d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80092be:	4b0a      	ldr	r3, [pc, #40]	; (80092e8 <osKernelInitialize+0x44>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80092c6:	4b08      	ldr	r3, [pc, #32]	; (80092e8 <osKernelInitialize+0x44>)
 80092c8:	2201      	movs	r2, #1
 80092ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80092cc:	2300      	movs	r3, #0
 80092ce:	607b      	str	r3, [r7, #4]
 80092d0:	e002      	b.n	80092d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80092d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092d8:	687b      	ldr	r3, [r7, #4]
}
 80092da:	4618      	mov	r0, r3
 80092dc:	370c      	adds	r7, #12
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	20000520 	.word	0x20000520

080092ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092f2:	f3ef 8305 	mrs	r3, IPSR
 80092f6:	603b      	str	r3, [r7, #0]
  return(result);
 80092f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <osKernelStart+0x1a>
    stat = osErrorISR;
 80092fe:	f06f 0305 	mvn.w	r3, #5
 8009302:	607b      	str	r3, [r7, #4]
 8009304:	e010      	b.n	8009328 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009306:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <osKernelStart+0x48>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d109      	bne.n	8009322 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800930e:	f7ff ffbf 	bl	8009290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009312:	4b08      	ldr	r3, [pc, #32]	; (8009334 <osKernelStart+0x48>)
 8009314:	2202      	movs	r2, #2
 8009316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009318:	f001 ff94 	bl	800b244 <vTaskStartScheduler>
      stat = osOK;
 800931c:	2300      	movs	r3, #0
 800931e:	607b      	str	r3, [r7, #4]
 8009320:	e002      	b.n	8009328 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009322:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009328:	687b      	ldr	r3, [r7, #4]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000520 	.word	0x20000520

08009338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009338:	b580      	push	{r7, lr}
 800933a:	b08e      	sub	sp, #56	; 0x38
 800933c:	af04      	add	r7, sp, #16
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009344:	2300      	movs	r3, #0
 8009346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009348:	f3ef 8305 	mrs	r3, IPSR
 800934c:	617b      	str	r3, [r7, #20]
  return(result);
 800934e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009350:	2b00      	cmp	r3, #0
 8009352:	d17e      	bne.n	8009452 <osThreadNew+0x11a>
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d07b      	beq.n	8009452 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800935a:	2380      	movs	r3, #128	; 0x80
 800935c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800935e:	2318      	movs	r3, #24
 8009360:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009362:	2300      	movs	r3, #0
 8009364:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009366:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800936a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d045      	beq.n	80093fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d002      	beq.n	8009380 <osThreadNew+0x48>
        name = attr->name;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d008      	beq.n	80093a6 <osThreadNew+0x6e>
 8009394:	69fb      	ldr	r3, [r7, #28]
 8009396:	2b38      	cmp	r3, #56	; 0x38
 8009398:	d805      	bhi.n	80093a6 <osThreadNew+0x6e>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <osThreadNew+0x72>
        return (NULL);
 80093a6:	2300      	movs	r3, #0
 80093a8:	e054      	b.n	8009454 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	695b      	ldr	r3, [r3, #20]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	695b      	ldr	r3, [r3, #20]
 80093b6:	089b      	lsrs	r3, r3, #2
 80093b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00e      	beq.n	80093e0 <osThreadNew+0xa8>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	2bbb      	cmp	r3, #187	; 0xbb
 80093c8:	d90a      	bls.n	80093e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d006      	beq.n	80093e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <osThreadNew+0xa8>
        mem = 1;
 80093da:	2301      	movs	r3, #1
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e010      	b.n	8009402 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d10c      	bne.n	8009402 <osThreadNew+0xca>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d108      	bne.n	8009402 <osThreadNew+0xca>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d104      	bne.n	8009402 <osThreadNew+0xca>
          mem = 0;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61bb      	str	r3, [r7, #24]
 80093fc:	e001      	b.n	8009402 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80093fe:	2300      	movs	r3, #0
 8009400:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	2b01      	cmp	r3, #1
 8009406:	d110      	bne.n	800942a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009410:	9202      	str	r2, [sp, #8]
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	69fb      	ldr	r3, [r7, #28]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	6a3a      	ldr	r2, [r7, #32]
 800941c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800941e:	68f8      	ldr	r0, [r7, #12]
 8009420:	f001 fd24 	bl	800ae6c <xTaskCreateStatic>
 8009424:	4603      	mov	r3, r0
 8009426:	613b      	str	r3, [r7, #16]
 8009428:	e013      	b.n	8009452 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800942a:	69bb      	ldr	r3, [r7, #24]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d110      	bne.n	8009452 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	b29a      	uxth	r2, r3
 8009434:	f107 0310 	add.w	r3, r7, #16
 8009438:	9301      	str	r3, [sp, #4]
 800943a:	69fb      	ldr	r3, [r7, #28]
 800943c:	9300      	str	r3, [sp, #0]
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f001 fd6f 	bl	800af26 <xTaskCreate>
 8009448:	4603      	mov	r3, r0
 800944a:	2b01      	cmp	r3, #1
 800944c:	d001      	beq.n	8009452 <osThreadNew+0x11a>
            hTask = NULL;
 800944e:	2300      	movs	r3, #0
 8009450:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009452:	693b      	ldr	r3, [r7, #16]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3728      	adds	r7, #40	; 0x28
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}

0800945c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009464:	f3ef 8305 	mrs	r3, IPSR
 8009468:	60bb      	str	r3, [r7, #8]
  return(result);
 800946a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800946c:	2b00      	cmp	r3, #0
 800946e:	d003      	beq.n	8009478 <osDelay+0x1c>
    stat = osErrorISR;
 8009470:	f06f 0305 	mvn.w	r3, #5
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	e007      	b.n	8009488 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009478:	2300      	movs	r3, #0
 800947a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 feaa 	bl	800b1dc <vTaskDelay>
    }
  }

  return (stat);
 8009488:	68fb      	ldr	r3, [r7, #12]
}
 800948a:	4618      	mov	r0, r3
 800948c:	3710      	adds	r7, #16
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8009492:	b580      	push	{r7, lr}
 8009494:	b086      	sub	sp, #24
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800949a:	2300      	movs	r3, #0
 800949c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800949e:	f3ef 8305 	mrs	r3, IPSR
 80094a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80094a4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d12d      	bne.n	8009506 <osEventFlagsNew+0x74>
    mem = -1;
 80094aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094ae:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d015      	beq.n	80094e2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d006      	beq.n	80094cc <osEventFlagsNew+0x3a>
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	2b1f      	cmp	r3, #31
 80094c4:	d902      	bls.n	80094cc <osEventFlagsNew+0x3a>
        mem = 1;
 80094c6:	2301      	movs	r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
 80094ca:	e00c      	b.n	80094e6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d108      	bne.n	80094e6 <osEventFlagsNew+0x54>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <osEventFlagsNew+0x54>
          mem = 0;
 80094dc:	2300      	movs	r3, #0
 80094de:	613b      	str	r3, [r7, #16]
 80094e0:	e001      	b.n	80094e6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	d106      	bne.n	80094fa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	689b      	ldr	r3, [r3, #8]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fa0b 	bl	800990c <xEventGroupCreateStatic>
 80094f6:	6178      	str	r0, [r7, #20]
 80094f8:	e005      	b.n	8009506 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d102      	bne.n	8009506 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8009500:	f000 fa3b 	bl	800997a <xEventGroupCreate>
 8009504:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8009506:	697b      	ldr	r3, [r7, #20]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3718      	adds	r7, #24
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8009510:	b580      	push	{r7, lr}
 8009512:	b086      	sub	sp, #24
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d004      	beq.n	800952e <osEventFlagsSet+0x1e>
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800952a:	2b00      	cmp	r3, #0
 800952c:	d003      	beq.n	8009536 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800952e:	f06f 0303 	mvn.w	r3, #3
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e028      	b.n	8009588 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009536:	f3ef 8305 	mrs	r3, IPSR
 800953a:	60fb      	str	r3, [r7, #12]
  return(result);
 800953c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800953e:	2b00      	cmp	r3, #0
 8009540:	d01d      	beq.n	800957e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8009542:	2300      	movs	r3, #0
 8009544:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8009546:	f107 0308 	add.w	r3, r7, #8
 800954a:	461a      	mov	r2, r3
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6938      	ldr	r0, [r7, #16]
 8009550:	f000 fbb6 	bl	8009cc0 <xEventGroupSetBitsFromISR>
 8009554:	4603      	mov	r3, r0
 8009556:	2b00      	cmp	r3, #0
 8009558:	d103      	bne.n	8009562 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800955a:	f06f 0302 	mvn.w	r3, #2
 800955e:	617b      	str	r3, [r7, #20]
 8009560:	e012      	b.n	8009588 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d00d      	beq.n	8009588 <osEventFlagsSet+0x78>
 800956c:	4b09      	ldr	r3, [pc, #36]	; (8009594 <osEventFlagsSet+0x84>)
 800956e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009572:	601a      	str	r2, [r3, #0]
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	e004      	b.n	8009588 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6938      	ldr	r0, [r7, #16]
 8009582:	f000 fae3 	bl	8009b4c <xEventGroupSetBits>
 8009586:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8009588:	697b      	ldr	r3, [r7, #20]
}
 800958a:	4618      	mov	r0, r3
 800958c:	3718      	adds	r7, #24
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
 8009592:	bf00      	nop
 8009594:	e000ed04 	.word	0xe000ed04

08009598 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8009598:	b580      	push	{r7, lr}
 800959a:	b08c      	sub	sp, #48	; 0x30
 800959c:	af02      	add	r7, sp, #8
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d004      	beq.n	80095ba <osEventFlagsWait+0x22>
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80095ba:	f06f 0303 	mvn.w	r3, #3
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	e04b      	b.n	800965a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095c2:	f3ef 8305 	mrs	r3, IPSR
 80095c6:	617b      	str	r3, [r7, #20]
  return(result);
 80095c8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d003      	beq.n	80095d6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80095ce:	f06f 0305 	mvn.w	r3, #5
 80095d2:	61fb      	str	r3, [r7, #28]
 80095d4:	e041      	b.n	800965a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80095e0:	2301      	movs	r3, #1
 80095e2:	627b      	str	r3, [r7, #36]	; 0x24
 80095e4:	e001      	b.n	80095ea <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80095e6:	2300      	movs	r3, #0
 80095e8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f003 0302 	and.w	r3, r3, #2
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 80095f4:	2300      	movs	r3, #0
 80095f6:	623b      	str	r3, [r7, #32]
 80095f8:	e001      	b.n	80095fe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 80095fa:	2301      	movs	r3, #1
 80095fc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	9300      	str	r3, [sp, #0]
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	6a3a      	ldr	r2, [r7, #32]
 8009606:	68b9      	ldr	r1, [r7, #8]
 8009608:	69b8      	ldr	r0, [r7, #24]
 800960a:	f000 f9d1 	bl	80099b0 <xEventGroupWaitBits>
 800960e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f003 0301 	and.w	r3, r3, #1
 8009616:	2b00      	cmp	r3, #0
 8009618:	d010      	beq.n	800963c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800961a:	68ba      	ldr	r2, [r7, #8]
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	4013      	ands	r3, r2
 8009620:	68ba      	ldr	r2, [r7, #8]
 8009622:	429a      	cmp	r2, r3
 8009624:	d019      	beq.n	800965a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d003      	beq.n	8009634 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800962c:	f06f 0301 	mvn.w	r3, #1
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	e012      	b.n	800965a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009634:	f06f 0302 	mvn.w	r3, #2
 8009638:	61fb      	str	r3, [r7, #28]
 800963a:	e00e      	b.n	800965a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	4013      	ands	r3, r2
 8009642:	2b00      	cmp	r3, #0
 8009644:	d109      	bne.n	800965a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800964c:	f06f 0301 	mvn.w	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e002      	b.n	800965a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8009654:	f06f 0302 	mvn.w	r3, #2
 8009658:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800965a:	69fb      	ldr	r3, [r7, #28]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3728      	adds	r7, #40	; 0x28
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af02      	add	r7, sp, #8
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009670:	2300      	movs	r3, #0
 8009672:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009674:	f3ef 8305 	mrs	r3, IPSR
 8009678:	613b      	str	r3, [r7, #16]
  return(result);
 800967a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800967c:	2b00      	cmp	r3, #0
 800967e:	d175      	bne.n	800976c <osSemaphoreNew+0x108>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d072      	beq.n	800976c <osSemaphoreNew+0x108>
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	429a      	cmp	r2, r3
 800968c:	d86e      	bhi.n	800976c <osSemaphoreNew+0x108>
    mem = -1;
 800968e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009692:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d015      	beq.n	80096c6 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d006      	beq.n	80096b0 <osSemaphoreNew+0x4c>
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	2b4f      	cmp	r3, #79	; 0x4f
 80096a8:	d902      	bls.n	80096b0 <osSemaphoreNew+0x4c>
        mem = 1;
 80096aa:	2301      	movs	r3, #1
 80096ac:	61bb      	str	r3, [r7, #24]
 80096ae:	e00c      	b.n	80096ca <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d108      	bne.n	80096ca <osSemaphoreNew+0x66>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <osSemaphoreNew+0x66>
          mem = 0;
 80096c0:	2300      	movs	r3, #0
 80096c2:	61bb      	str	r3, [r7, #24]
 80096c4:	e001      	b.n	80096ca <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80096c6:	2300      	movs	r3, #0
 80096c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096d0:	d04c      	beq.n	800976c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d128      	bne.n	800972a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d10a      	bne.n	80096f4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	2203      	movs	r2, #3
 80096e4:	9200      	str	r2, [sp, #0]
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	2001      	movs	r0, #1
 80096ec:	f000 fc18 	bl	8009f20 <xQueueGenericCreateStatic>
 80096f0:	61f8      	str	r0, [r7, #28]
 80096f2:	e005      	b.n	8009700 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80096f4:	2203      	movs	r2, #3
 80096f6:	2100      	movs	r1, #0
 80096f8:	2001      	movs	r0, #1
 80096fa:	f000 fc89 	bl	800a010 <xQueueGenericCreate>
 80096fe:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009700:	69fb      	ldr	r3, [r7, #28]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d022      	beq.n	800974c <osSemaphoreNew+0xe8>
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d01f      	beq.n	800974c <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800970c:	2300      	movs	r3, #0
 800970e:	2200      	movs	r2, #0
 8009710:	2100      	movs	r1, #0
 8009712:	69f8      	ldr	r0, [r7, #28]
 8009714:	f000 fd44 	bl	800a1a0 <xQueueGenericSend>
 8009718:	4603      	mov	r3, r0
 800971a:	2b01      	cmp	r3, #1
 800971c:	d016      	beq.n	800974c <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800971e:	69f8      	ldr	r0, [r7, #28]
 8009720:	f001 f9d0 	bl	800aac4 <vQueueDelete>
            hSemaphore = NULL;
 8009724:	2300      	movs	r3, #0
 8009726:	61fb      	str	r3, [r7, #28]
 8009728:	e010      	b.n	800974c <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800972a:	69bb      	ldr	r3, [r7, #24]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d108      	bne.n	8009742 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	461a      	mov	r2, r3
 8009736:	68b9      	ldr	r1, [r7, #8]
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f000 fcc6 	bl	800a0ca <xQueueCreateCountingSemaphoreStatic>
 800973e:	61f8      	str	r0, [r7, #28]
 8009740:	e004      	b.n	800974c <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009742:	68b9      	ldr	r1, [r7, #8]
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f000 fcf7 	bl	800a138 <xQueueCreateCountingSemaphore>
 800974a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d00c      	beq.n	800976c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d003      	beq.n	8009760 <osSemaphoreNew+0xfc>
          name = attr->name;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	617b      	str	r3, [r7, #20]
 800975e:	e001      	b.n	8009764 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8009760:	2300      	movs	r3, #0
 8009762:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009764:	6979      	ldr	r1, [r7, #20]
 8009766:	69f8      	ldr	r0, [r7, #28]
 8009768:	f001 faf8 	bl	800ad5c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800976c:	69fb      	ldr	r3, [r7, #28]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3720      	adds	r7, #32
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
	...

08009778 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009786:	2300      	movs	r3, #0
 8009788:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d103      	bne.n	8009798 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8009790:	f06f 0303 	mvn.w	r3, #3
 8009794:	617b      	str	r3, [r7, #20]
 8009796:	e039      	b.n	800980c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009798:	f3ef 8305 	mrs	r3, IPSR
 800979c:	60fb      	str	r3, [r7, #12]
  return(result);
 800979e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d022      	beq.n	80097ea <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d003      	beq.n	80097b2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80097aa:	f06f 0303 	mvn.w	r3, #3
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	e02c      	b.n	800980c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80097b2:	2300      	movs	r3, #0
 80097b4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80097b6:	f107 0308 	add.w	r3, r7, #8
 80097ba:	461a      	mov	r2, r3
 80097bc:	2100      	movs	r1, #0
 80097be:	6938      	ldr	r0, [r7, #16]
 80097c0:	f001 f900 	bl	800a9c4 <xQueueReceiveFromISR>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	d003      	beq.n	80097d2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80097ca:	f06f 0302 	mvn.w	r3, #2
 80097ce:	617b      	str	r3, [r7, #20]
 80097d0:	e01c      	b.n	800980c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d019      	beq.n	800980c <osSemaphoreAcquire+0x94>
 80097d8:	4b0f      	ldr	r3, [pc, #60]	; (8009818 <osSemaphoreAcquire+0xa0>)
 80097da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097de:	601a      	str	r2, [r3, #0]
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	e010      	b.n	800980c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80097ea:	6839      	ldr	r1, [r7, #0]
 80097ec:	6938      	ldr	r0, [r7, #16]
 80097ee:	f000 ffdd 	bl	800a7ac <xQueueSemaphoreTake>
 80097f2:	4603      	mov	r3, r0
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d009      	beq.n	800980c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d003      	beq.n	8009806 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80097fe:	f06f 0301 	mvn.w	r3, #1
 8009802:	617b      	str	r3, [r7, #20]
 8009804:	e002      	b.n	800980c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009806:	f06f 0302 	mvn.w	r3, #2
 800980a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800980c:	697b      	ldr	r3, [r7, #20]
}
 800980e:	4618      	mov	r0, r3
 8009810:	3718      	adds	r7, #24
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	e000ed04 	.word	0xe000ed04

0800981c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b086      	sub	sp, #24
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009828:	2300      	movs	r3, #0
 800982a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009832:	f06f 0303 	mvn.w	r3, #3
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	e02c      	b.n	8009894 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800983a:	f3ef 8305 	mrs	r3, IPSR
 800983e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009840:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009842:	2b00      	cmp	r3, #0
 8009844:	d01a      	beq.n	800987c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009846:	2300      	movs	r3, #0
 8009848:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800984a:	f107 0308 	add.w	r3, r7, #8
 800984e:	4619      	mov	r1, r3
 8009850:	6938      	ldr	r0, [r7, #16]
 8009852:	f000 fe3e 	bl	800a4d2 <xQueueGiveFromISR>
 8009856:	4603      	mov	r3, r0
 8009858:	2b01      	cmp	r3, #1
 800985a:	d003      	beq.n	8009864 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800985c:	f06f 0302 	mvn.w	r3, #2
 8009860:	617b      	str	r3, [r7, #20]
 8009862:	e017      	b.n	8009894 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d014      	beq.n	8009894 <osSemaphoreRelease+0x78>
 800986a:	4b0d      	ldr	r3, [pc, #52]	; (80098a0 <osSemaphoreRelease+0x84>)
 800986c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	e00b      	b.n	8009894 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800987c:	2300      	movs	r3, #0
 800987e:	2200      	movs	r2, #0
 8009880:	2100      	movs	r1, #0
 8009882:	6938      	ldr	r0, [r7, #16]
 8009884:	f000 fc8c 	bl	800a1a0 <xQueueGenericSend>
 8009888:	4603      	mov	r3, r0
 800988a:	2b01      	cmp	r3, #1
 800988c:	d002      	beq.n	8009894 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800988e:	f06f 0302 	mvn.w	r3, #2
 8009892:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009894:	697b      	ldr	r3, [r7, #20]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	e000ed04 	.word	0xe000ed04

080098a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	4a07      	ldr	r2, [pc, #28]	; (80098d0 <vApplicationGetIdleTaskMemory+0x2c>)
 80098b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	4a06      	ldr	r2, [pc, #24]	; (80098d4 <vApplicationGetIdleTaskMemory+0x30>)
 80098ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2280      	movs	r2, #128	; 0x80
 80098c0:	601a      	str	r2, [r3, #0]
}
 80098c2:	bf00      	nop
 80098c4:	3714      	adds	r7, #20
 80098c6:	46bd      	mov	sp, r7
 80098c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098cc:	4770      	bx	lr
 80098ce:	bf00      	nop
 80098d0:	20000524 	.word	0x20000524
 80098d4:	200005e0 	.word	0x200005e0

080098d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4a07      	ldr	r2, [pc, #28]	; (8009904 <vApplicationGetTimerTaskMemory+0x2c>)
 80098e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	4a06      	ldr	r2, [pc, #24]	; (8009908 <vApplicationGetTimerTaskMemory+0x30>)
 80098ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80098f6:	601a      	str	r2, [r3, #0]
}
 80098f8:	bf00      	nop
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	200007e0 	.word	0x200007e0
 8009908:	2000089c 	.word	0x2000089c

0800990c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8009930:	2320      	movs	r3, #32
 8009932:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	2b20      	cmp	r3, #32
 8009938:	d00a      	beq.n	8009950 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993e:	f383 8811 	msr	BASEPRI, r3
 8009942:	f3bf 8f6f 	isb	sy
 8009946:	f3bf 8f4f 	dsb	sy
 800994a:	60fb      	str	r3, [r7, #12]
}
 800994c:	bf00      	nop
 800994e:	e7fe      	b.n	800994e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8009954:	697b      	ldr	r3, [r7, #20]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2200      	movs	r2, #0
 800995e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	3304      	adds	r3, #4
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f9bf 	bl	8009ce8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	2201      	movs	r2, #1
 800996e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8009970:	697b      	ldr	r3, [r7, #20]
	}
 8009972:	4618      	mov	r0, r3
 8009974:	3718      	adds	r7, #24
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8009980:	2020      	movs	r0, #32
 8009982:	f003 f909 	bl	800cb98 <pvPortMalloc>
 8009986:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	3304      	adds	r3, #4
 8009998:	4618      	mov	r0, r3
 800999a:	f000 f9a5 	bl	8009ce8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2200      	movs	r2, #0
 80099a2:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80099a4:	687b      	ldr	r3, [r7, #4]
	}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b090      	sub	sp, #64	; 0x40
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	60b9      	str	r1, [r7, #8]
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80099c2:	2300      	movs	r3, #0
 80099c4:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80099c6:	2300      	movs	r3, #0
 80099c8:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80099d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d4:	f383 8811 	msr	BASEPRI, r3
 80099d8:	f3bf 8f6f 	isb	sy
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	623b      	str	r3, [r7, #32]
}
 80099e2:	bf00      	nop
 80099e4:	e7fe      	b.n	80099e4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d00a      	beq.n	8009a06 <xEventGroupWaitBits+0x56>
	__asm volatile
 80099f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f4:	f383 8811 	msr	BASEPRI, r3
 80099f8:	f3bf 8f6f 	isb	sy
 80099fc:	f3bf 8f4f 	dsb	sy
 8009a00:	61fb      	str	r3, [r7, #28]
}
 8009a02:	bf00      	nop
 8009a04:	e7fe      	b.n	8009a04 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d10a      	bne.n	8009a22 <xEventGroupWaitBits+0x72>
	__asm volatile
 8009a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a10:	f383 8811 	msr	BASEPRI, r3
 8009a14:	f3bf 8f6f 	isb	sy
 8009a18:	f3bf 8f4f 	dsb	sy
 8009a1c:	61bb      	str	r3, [r7, #24]
}
 8009a1e:	bf00      	nop
 8009a20:	e7fe      	b.n	8009a20 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a22:	f002 f909 	bl	800bc38 <xTaskGetSchedulerState>
 8009a26:	4603      	mov	r3, r0
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <xEventGroupWaitBits+0x82>
 8009a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <xEventGroupWaitBits+0x86>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e000      	b.n	8009a38 <xEventGroupWaitBits+0x88>
 8009a36:	2300      	movs	r3, #0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d10a      	bne.n	8009a52 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8009a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a40:	f383 8811 	msr	BASEPRI, r3
 8009a44:	f3bf 8f6f 	isb	sy
 8009a48:	f3bf 8f4f 	dsb	sy
 8009a4c:	617b      	str	r3, [r7, #20]
}
 8009a4e:	bf00      	nop
 8009a50:	e7fe      	b.n	8009a50 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8009a52:	f001 fc67 	bl	800b324 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8009a56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a62:	f000 f90b 	bl	8009c7c <prvTestWaitCondition>
 8009a66:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00e      	beq.n	8009a8c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8009a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a70:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8009a72:	2300      	movs	r3, #0
 8009a74:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d028      	beq.n	8009ace <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	43db      	mvns	r3, r3
 8009a84:	401a      	ands	r2, r3
 8009a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a88:	601a      	str	r2, [r3, #0]
 8009a8a:	e020      	b.n	8009ace <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d104      	bne.n	8009a9c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8009a96:	2301      	movs	r3, #1
 8009a98:	633b      	str	r3, [r7, #48]	; 0x30
 8009a9a:	e018      	b.n	8009ace <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d003      	beq.n	8009aaa <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009aa8:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ab6:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aba:	1d18      	adds	r0, r3, #4
 8009abc:	68ba      	ldr	r2, [r7, #8]
 8009abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f001 fe2b 	bl	800b720 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8009ace:	f001 fc37 	bl	800b340 <xTaskResumeAll>
 8009ad2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8009ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d031      	beq.n	8009b3e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8009ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d107      	bne.n	8009af0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8009ae0:	4b19      	ldr	r3, [pc, #100]	; (8009b48 <xEventGroupWaitBits+0x198>)
 8009ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	f3bf 8f4f 	dsb	sy
 8009aec:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8009af0:	f002 fa18 	bl	800bf24 <uxTaskResetEventItemValue>
 8009af4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8009af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d11a      	bne.n	8009b36 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8009b00:	f002 ff28 	bl	800c954 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8009b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009b10:	f000 f8b4 	bl	8009c7c <prvTestWaitCondition>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d006      	beq.n	8009b2e <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8009b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	43db      	mvns	r3, r3
 8009b28:	401a      	ands	r2, r3
 8009b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b2c:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8009b32:	f002 ff3f 	bl	800c9b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009b3c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8009b3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b40:	4618      	mov	r0, r3
 8009b42:	3740      	adds	r7, #64	; 0x40
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08e      	sub	sp, #56	; 0x38
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8009b56:	2300      	movs	r3, #0
 8009b58:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xEventGroupSetBits+0x32>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	613b      	str	r3, [r7, #16]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <xEventGroupSetBits+0x52>
	__asm volatile
 8009b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8c:	f383 8811 	msr	BASEPRI, r3
 8009b90:	f3bf 8f6f 	isb	sy
 8009b94:	f3bf 8f4f 	dsb	sy
 8009b98:	60fb      	str	r3, [r7, #12]
}
 8009b9a:	bf00      	nop
 8009b9c:	e7fe      	b.n	8009b9c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8009baa:	f001 fbbb 	bl	800b324 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	431a      	orrs	r2, r3
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8009bc0:	e03c      	b.n	8009c3c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8009bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc4:	685b      	ldr	r3, [r3, #4]
 8009bc6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8009bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8009bd8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009be0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d108      	bne.n	8009bfe <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	4013      	ands	r3, r2
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00b      	beq.n	8009c10 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bfc:	e008      	b.n	8009c10 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8009bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	69bb      	ldr	r3, [r7, #24]
 8009c04:	4013      	ands	r3, r2
 8009c06:	69ba      	ldr	r2, [r7, #24]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d101      	bne.n	8009c10 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8009c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d010      	beq.n	8009c38 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d003      	beq.n	8009c28 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8009c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c22:	69bb      	ldr	r3, [r7, #24]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8009c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c30:	4619      	mov	r1, r3
 8009c32:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8009c34:	f001 fe40 	bl	800b8b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8009c38:	69fb      	ldr	r3, [r7, #28]
 8009c3a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8009c3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	429a      	cmp	r2, r3
 8009c42:	d1be      	bne.n	8009bc2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c4a:	43db      	mvns	r3, r3
 8009c4c:	401a      	ands	r2, r3
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8009c52:	f001 fb75 	bl	800b340 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8009c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c58:	681b      	ldr	r3, [r3, #0]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3738      	adds	r7, #56	; 0x38
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b082      	sub	sp, #8
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8009c6c:	6839      	ldr	r1, [r7, #0]
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f7ff ff6c 	bl	8009b4c <xEventGroupSetBits>
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b087      	sub	sp, #28
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	60f8      	str	r0, [r7, #12]
 8009c84:	60b9      	str	r1, [r7, #8]
 8009c86:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d107      	bne.n	8009ca2 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8009c92:	68fa      	ldr	r2, [r7, #12]
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	4013      	ands	r3, r2
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d00a      	beq.n	8009cb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e007      	b.n	8009cb2 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	68ba      	ldr	r2, [r7, #8]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d101      	bne.n	8009cb2 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8009cae:	2301      	movs	r3, #1
 8009cb0:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8009cb2:	697b      	ldr	r3, [r7, #20]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b086      	sub	sp, #24
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68ba      	ldr	r2, [r7, #8]
 8009cd0:	68f9      	ldr	r1, [r7, #12]
 8009cd2:	4804      	ldr	r0, [pc, #16]	; (8009ce4 <xEventGroupSetBitsFromISR+0x24>)
 8009cd4:	f002 fcf4 	bl	800c6c0 <xTimerPendFunctionCallFromISR>
 8009cd8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8009cda:	697b      	ldr	r3, [r7, #20]
	}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3718      	adds	r7, #24
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	08009c63 	.word	0x08009c63

08009ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f103 0208 	add.w	r2, r3, #8
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f103 0208 	add.w	r2, r3, #8
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f103 0208 	add.w	r2, r3, #8
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d36:	bf00      	nop
 8009d38:	370c      	adds	r7, #12
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d42:	b480      	push	{r7}
 8009d44:	b085      	sub	sp, #20
 8009d46:	af00      	add	r7, sp, #0
 8009d48:	6078      	str	r0, [r7, #4]
 8009d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	689a      	ldr	r2, [r3, #8]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	683a      	ldr	r2, [r7, #0]
 8009d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	601a      	str	r2, [r3, #0]
}
 8009d7e:	bf00      	nop
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d8a:	b480      	push	{r7}
 8009d8c:	b085      	sub	sp, #20
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009da0:	d103      	bne.n	8009daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e00c      	b.n	8009dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3308      	adds	r3, #8
 8009dae:	60fb      	str	r3, [r7, #12]
 8009db0:	e002      	b.n	8009db8 <vListInsert+0x2e>
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68ba      	ldr	r2, [r7, #8]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d2f6      	bcs.n	8009db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	683a      	ldr	r2, [r7, #0]
 8009dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	601a      	str	r2, [r3, #0]
}
 8009df0:	bf00      	nop
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009dfc:	b480      	push	{r7}
 8009dfe:	b085      	sub	sp, #20
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	6892      	ldr	r2, [r2, #8]
 8009e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	6852      	ldr	r2, [r2, #4]
 8009e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d103      	bne.n	8009e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689a      	ldr	r2, [r3, #8]
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	1e5a      	subs	r2, r3, #1
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d10a      	bne.n	8009e7a <xQueueGenericReset+0x2a>
	__asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	60bb      	str	r3, [r7, #8]
}
 8009e76:	bf00      	nop
 8009e78:	e7fe      	b.n	8009e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e7a:	f002 fd6b 	bl	800c954 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009e8a:	fb01 f303 	mul.w	r3, r1, r3
 8009e8e:	441a      	add	r2, r3
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2200      	movs	r2, #0
 8009e98:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	68f9      	ldr	r1, [r7, #12]
 8009eae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009eb0:	fb01 f303 	mul.w	r3, r1, r3
 8009eb4:	441a      	add	r2, r3
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	22ff      	movs	r2, #255	; 0xff
 8009ebe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	22ff      	movs	r2, #255	; 0xff
 8009ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d114      	bne.n	8009efa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d01a      	beq.n	8009f0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	3310      	adds	r3, #16
 8009edc:	4618      	mov	r0, r3
 8009ede:	f001 fc87 	bl	800b7f0 <xTaskRemoveFromEventList>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d012      	beq.n	8009f0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <xQueueGenericReset+0xcc>)
 8009eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eee:	601a      	str	r2, [r3, #0]
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	f3bf 8f6f 	isb	sy
 8009ef8:	e009      	b.n	8009f0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	3310      	adds	r3, #16
 8009efe:	4618      	mov	r0, r3
 8009f00:	f7ff fef2 	bl	8009ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff feed 	bl	8009ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f0e:	f002 fd51 	bl	800c9b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f12:	2301      	movs	r3, #1
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}
 8009f1c:	e000ed04 	.word	0xe000ed04

08009f20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b08e      	sub	sp, #56	; 0x38
 8009f24:	af02      	add	r7, sp, #8
 8009f26:	60f8      	str	r0, [r7, #12]
 8009f28:	60b9      	str	r1, [r7, #8]
 8009f2a:	607a      	str	r2, [r7, #4]
 8009f2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d10a      	bne.n	8009f4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f38:	f383 8811 	msr	BASEPRI, r3
 8009f3c:	f3bf 8f6f 	isb	sy
 8009f40:	f3bf 8f4f 	dsb	sy
 8009f44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f46:	bf00      	nop
 8009f48:	e7fe      	b.n	8009f48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d10a      	bne.n	8009f66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f54:	f383 8811 	msr	BASEPRI, r3
 8009f58:	f3bf 8f6f 	isb	sy
 8009f5c:	f3bf 8f4f 	dsb	sy
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f62:	bf00      	nop
 8009f64:	e7fe      	b.n	8009f64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <xQueueGenericCreateStatic+0x52>
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <xQueueGenericCreateStatic+0x56>
 8009f72:	2301      	movs	r3, #1
 8009f74:	e000      	b.n	8009f78 <xQueueGenericCreateStatic+0x58>
 8009f76:	2300      	movs	r3, #0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d10a      	bne.n	8009f92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	623b      	str	r3, [r7, #32]
}
 8009f8e:	bf00      	nop
 8009f90:	e7fe      	b.n	8009f90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <xQueueGenericCreateStatic+0x7e>
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d101      	bne.n	8009fa2 <xQueueGenericCreateStatic+0x82>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e000      	b.n	8009fa4 <xQueueGenericCreateStatic+0x84>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10a      	bne.n	8009fbe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	61fb      	str	r3, [r7, #28]
}
 8009fba:	bf00      	nop
 8009fbc:	e7fe      	b.n	8009fbc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009fbe:	2350      	movs	r3, #80	; 0x50
 8009fc0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	2b50      	cmp	r3, #80	; 0x50
 8009fc6:	d00a      	beq.n	8009fde <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61bb      	str	r3, [r7, #24]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009fde:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00d      	beq.n	800a006 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fec:	2201      	movs	r2, #1
 8009fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ff2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	9300      	str	r3, [sp, #0]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	68b9      	ldr	r1, [r7, #8]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f000 f83f 	bl	800a084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a008:	4618      	mov	r0, r3
 800a00a:	3730      	adds	r7, #48	; 0x30
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a010:	b580      	push	{r7, lr}
 800a012:	b08a      	sub	sp, #40	; 0x28
 800a014:	af02      	add	r7, sp, #8
 800a016:	60f8      	str	r0, [r7, #12]
 800a018:	60b9      	str	r1, [r7, #8]
 800a01a:	4613      	mov	r3, r2
 800a01c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d10a      	bne.n	800a03a <xQueueGenericCreate+0x2a>
	__asm volatile
 800a024:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a028:	f383 8811 	msr	BASEPRI, r3
 800a02c:	f3bf 8f6f 	isb	sy
 800a030:	f3bf 8f4f 	dsb	sy
 800a034:	613b      	str	r3, [r7, #16]
}
 800a036:	bf00      	nop
 800a038:	e7fe      	b.n	800a038 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	fb02 f303 	mul.w	r3, r2, r3
 800a042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	3350      	adds	r3, #80	; 0x50
 800a048:	4618      	mov	r0, r3
 800a04a:	f002 fda5 	bl	800cb98 <pvPortMalloc>
 800a04e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a050:	69bb      	ldr	r3, [r7, #24]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d011      	beq.n	800a07a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	3350      	adds	r3, #80	; 0x50
 800a05e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a068:	79fa      	ldrb	r2, [r7, #7]
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4613      	mov	r3, r2
 800a070:	697a      	ldr	r2, [r7, #20]
 800a072:	68b9      	ldr	r1, [r7, #8]
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f000 f805 	bl	800a084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a07a:	69bb      	ldr	r3, [r7, #24]
	}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b084      	sub	sp, #16
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d103      	bne.n	800a0a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	69ba      	ldr	r2, [r7, #24]
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	e002      	b.n	800a0a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	68ba      	ldr	r2, [r7, #8]
 800a0b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	69b8      	ldr	r0, [r7, #24]
 800a0b6:	f7ff fecb 	bl	8009e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0c2:	bf00      	nop
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b08a      	sub	sp, #40	; 0x28
 800a0ce:	af02      	add	r7, sp, #8
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d10a      	bne.n	800a0f2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	61bb      	str	r3, [r7, #24]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d90a      	bls.n	800a110 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	617b      	str	r3, [r7, #20]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a110:	2302      	movs	r3, #2
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	2100      	movs	r1, #0
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff ff00 	bl	8009f20 <xQueueGenericCreateStatic>
 800a120:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	68ba      	ldr	r2, [r7, #8]
 800a12c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a12e:	69fb      	ldr	r3, [r7, #28]
	}
 800a130:	4618      	mov	r0, r3
 800a132:	3720      	adds	r7, #32
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b086      	sub	sp, #24
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
 800a140:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d10a      	bne.n	800a15e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800a148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14c:	f383 8811 	msr	BASEPRI, r3
 800a150:	f3bf 8f6f 	isb	sy
 800a154:	f3bf 8f4f 	dsb	sy
 800a158:	613b      	str	r3, [r7, #16]
}
 800a15a:	bf00      	nop
 800a15c:	e7fe      	b.n	800a15c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	429a      	cmp	r2, r3
 800a164:	d90a      	bls.n	800a17c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800a166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16a:	f383 8811 	msr	BASEPRI, r3
 800a16e:	f3bf 8f6f 	isb	sy
 800a172:	f3bf 8f4f 	dsb	sy
 800a176:	60fb      	str	r3, [r7, #12]
}
 800a178:	bf00      	nop
 800a17a:	e7fe      	b.n	800a17a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a17c:	2202      	movs	r2, #2
 800a17e:	2100      	movs	r1, #0
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ff45 	bl	800a010 <xQueueGenericCreate>
 800a186:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d002      	beq.n	800a194 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a194:	697b      	ldr	r3, [r7, #20]
	}
 800a196:	4618      	mov	r0, r3
 800a198:	3718      	adds	r7, #24
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
	...

0800a1a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b08e      	sub	sp, #56	; 0x38
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
 800a1ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xQueueGenericSend+0x32>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d103      	bne.n	800a1e0 <xQueueGenericSend+0x40>
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <xQueueGenericSend+0x44>
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	e000      	b.n	800a1e6 <xQueueGenericSend+0x46>
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10a      	bne.n	800a200 <xQueueGenericSend+0x60>
	__asm volatile
 800a1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ee:	f383 8811 	msr	BASEPRI, r3
 800a1f2:	f3bf 8f6f 	isb	sy
 800a1f6:	f3bf 8f4f 	dsb	sy
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a1fc:	bf00      	nop
 800a1fe:	e7fe      	b.n	800a1fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d103      	bne.n	800a20e <xQueueGenericSend+0x6e>
 800a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a20a:	2b01      	cmp	r3, #1
 800a20c:	d101      	bne.n	800a212 <xQueueGenericSend+0x72>
 800a20e:	2301      	movs	r3, #1
 800a210:	e000      	b.n	800a214 <xQueueGenericSend+0x74>
 800a212:	2300      	movs	r3, #0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d10a      	bne.n	800a22e <xQueueGenericSend+0x8e>
	__asm volatile
 800a218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a21c:	f383 8811 	msr	BASEPRI, r3
 800a220:	f3bf 8f6f 	isb	sy
 800a224:	f3bf 8f4f 	dsb	sy
 800a228:	623b      	str	r3, [r7, #32]
}
 800a22a:	bf00      	nop
 800a22c:	e7fe      	b.n	800a22c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a22e:	f001 fd03 	bl	800bc38 <xTaskGetSchedulerState>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d102      	bne.n	800a23e <xQueueGenericSend+0x9e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d101      	bne.n	800a242 <xQueueGenericSend+0xa2>
 800a23e:	2301      	movs	r3, #1
 800a240:	e000      	b.n	800a244 <xQueueGenericSend+0xa4>
 800a242:	2300      	movs	r3, #0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <xQueueGenericSend+0xbe>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	61fb      	str	r3, [r7, #28]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a25e:	f002 fb79 	bl	800c954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a264:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d302      	bcc.n	800a274 <xQueueGenericSend+0xd4>
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	2b02      	cmp	r3, #2
 800a272:	d129      	bne.n	800a2c8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a274:	683a      	ldr	r2, [r7, #0]
 800a276:	68b9      	ldr	r1, [r7, #8]
 800a278:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a27a:	f000 fc5e 	bl	800ab3a <prvCopyDataToQueue>
 800a27e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a284:	2b00      	cmp	r3, #0
 800a286:	d010      	beq.n	800a2aa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a28a:	3324      	adds	r3, #36	; 0x24
 800a28c:	4618      	mov	r0, r3
 800a28e:	f001 faaf 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a292:	4603      	mov	r3, r0
 800a294:	2b00      	cmp	r3, #0
 800a296:	d013      	beq.n	800a2c0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a298:	4b3f      	ldr	r3, [pc, #252]	; (800a398 <xQueueGenericSend+0x1f8>)
 800a29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a29e:	601a      	str	r2, [r3, #0]
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	f3bf 8f6f 	isb	sy
 800a2a8:	e00a      	b.n	800a2c0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b39      	ldr	r3, [pc, #228]	; (800a398 <xQueueGenericSend+0x1f8>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2c0:	f002 fb78 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e063      	b.n	800a390 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2ce:	f002 fb71 	bl	800c9b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	e05c      	b.n	800a390 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d106      	bne.n	800a2ea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2dc:	f107 0314 	add.w	r3, r7, #20
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f001 fb4b 	bl	800b97c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2e6:	2301      	movs	r3, #1
 800a2e8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2ea:	f002 fb63 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2ee:	f001 f819 	bl	800b324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2f2:	f002 fb2f 	bl	800c954 <vPortEnterCritical>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2fc:	b25b      	sxtb	r3, r3
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a302:	d103      	bne.n	800a30c <xQueueGenericSend+0x16c>
 800a304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a306:	2200      	movs	r2, #0
 800a308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a312:	b25b      	sxtb	r3, r3
 800a314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a318:	d103      	bne.n	800a322 <xQueueGenericSend+0x182>
 800a31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a31c:	2200      	movs	r2, #0
 800a31e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a322:	f002 fb47 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a326:	1d3a      	adds	r2, r7, #4
 800a328:	f107 0314 	add.w	r3, r7, #20
 800a32c:	4611      	mov	r1, r2
 800a32e:	4618      	mov	r0, r3
 800a330:	f001 fb3a 	bl	800b9a8 <xTaskCheckForTimeOut>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d124      	bne.n	800a384 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a33a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a33c:	f000 fcf5 	bl	800ad2a <prvIsQueueFull>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	d018      	beq.n	800a378 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a348:	3310      	adds	r3, #16
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4611      	mov	r1, r2
 800a34e:	4618      	mov	r0, r3
 800a350:	f001 f9c2 	bl	800b6d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a356:	f000 fc80 	bl	800ac5a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a35a:	f000 fff1 	bl	800b340 <xTaskResumeAll>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	f47f af7c 	bne.w	800a25e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a366:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <xQueueGenericSend+0x1f8>)
 800a368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a36c:	601a      	str	r2, [r3, #0]
 800a36e:	f3bf 8f4f 	dsb	sy
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	e772      	b.n	800a25e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a378:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a37a:	f000 fc6e 	bl	800ac5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a37e:	f000 ffdf 	bl	800b340 <xTaskResumeAll>
 800a382:	e76c      	b.n	800a25e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a386:	f000 fc68 	bl	800ac5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a38a:	f000 ffd9 	bl	800b340 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a38e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a390:	4618      	mov	r0, r3
 800a392:	3738      	adds	r7, #56	; 0x38
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	e000ed04 	.word	0xe000ed04

0800a39c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b090      	sub	sp, #64	; 0x40
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d10a      	bne.n	800a3ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3b8:	f383 8811 	msr	BASEPRI, r3
 800a3bc:	f3bf 8f6f 	isb	sy
 800a3c0:	f3bf 8f4f 	dsb	sy
 800a3c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a3c6:	bf00      	nop
 800a3c8:	e7fe      	b.n	800a3c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d103      	bne.n	800a3d8 <xQueueGenericSendFromISR+0x3c>
 800a3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <xQueueGenericSendFromISR+0x40>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e000      	b.n	800a3de <xQueueGenericSendFromISR+0x42>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10a      	bne.n	800a3f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a3e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e6:	f383 8811 	msr	BASEPRI, r3
 800a3ea:	f3bf 8f6f 	isb	sy
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a3f4:	bf00      	nop
 800a3f6:	e7fe      	b.n	800a3f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d103      	bne.n	800a406 <xQueueGenericSendFromISR+0x6a>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a402:	2b01      	cmp	r3, #1
 800a404:	d101      	bne.n	800a40a <xQueueGenericSendFromISR+0x6e>
 800a406:	2301      	movs	r3, #1
 800a408:	e000      	b.n	800a40c <xQueueGenericSendFromISR+0x70>
 800a40a:	2300      	movs	r3, #0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d10a      	bne.n	800a426 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	623b      	str	r3, [r7, #32]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a426:	f002 fb77 	bl	800cb18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a42a:	f3ef 8211 	mrs	r2, BASEPRI
 800a42e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	61fa      	str	r2, [r7, #28]
 800a440:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a442:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a444:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44e:	429a      	cmp	r2, r3
 800a450:	d302      	bcc.n	800a458 <xQueueGenericSendFromISR+0xbc>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b02      	cmp	r3, #2
 800a456:	d12f      	bne.n	800a4b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a45e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a466:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a46e:	f000 fb64 	bl	800ab3a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a472:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a476:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a47a:	d112      	bne.n	800a4a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	2b00      	cmp	r3, #0
 800a482:	d016      	beq.n	800a4b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a486:	3324      	adds	r3, #36	; 0x24
 800a488:	4618      	mov	r0, r3
 800a48a:	f001 f9b1 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00e      	beq.n	800a4b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00b      	beq.n	800a4b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2201      	movs	r2, #1
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	e007      	b.n	800a4b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	b2db      	uxtb	r3, r3
 800a4aa:	b25a      	sxtb	r2, r3
 800a4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a4b6:	e001      	b.n	800a4bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3740      	adds	r7, #64	; 0x40
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}

0800a4d2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a4d2:	b580      	push	{r7, lr}
 800a4d4:	b08e      	sub	sp, #56	; 0x38
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
 800a4da:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a4e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d10a      	bne.n	800a4fc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	623b      	str	r3, [r7, #32]
}
 800a4f8:	bf00      	nop
 800a4fa:	e7fe      	b.n	800a4fa <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a500:	2b00      	cmp	r3, #0
 800a502:	d00a      	beq.n	800a51a <xQueueGiveFromISR+0x48>
	__asm volatile
 800a504:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a508:	f383 8811 	msr	BASEPRI, r3
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f3bf 8f4f 	dsb	sy
 800a514:	61fb      	str	r3, [r7, #28]
}
 800a516:	bf00      	nop
 800a518:	e7fe      	b.n	800a518 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d103      	bne.n	800a52a <xQueueGiveFromISR+0x58>
 800a522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d101      	bne.n	800a52e <xQueueGiveFromISR+0x5c>
 800a52a:	2301      	movs	r3, #1
 800a52c:	e000      	b.n	800a530 <xQueueGiveFromISR+0x5e>
 800a52e:	2300      	movs	r3, #0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10a      	bne.n	800a54a <xQueueGiveFromISR+0x78>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	61bb      	str	r3, [r7, #24]
}
 800a546:	bf00      	nop
 800a548:	e7fe      	b.n	800a548 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a54a:	f002 fae5 	bl	800cb18 <vPortValidateInterruptPriority>
	__asm volatile
 800a54e:	f3ef 8211 	mrs	r2, BASEPRI
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	617a      	str	r2, [r7, #20]
 800a564:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a566:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a568:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a576:	429a      	cmp	r2, r3
 800a578:	d22b      	bcs.n	800a5d2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	1c5a      	adds	r2, r3, #1
 800a588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a58c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a590:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a594:	d112      	bne.n	800a5bc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d016      	beq.n	800a5cc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a59e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a0:	3324      	adds	r3, #36	; 0x24
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f001 f924 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d00e      	beq.n	800a5cc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d00b      	beq.n	800a5cc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	601a      	str	r2, [r3, #0]
 800a5ba:	e007      	b.n	800a5cc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	b25a      	sxtb	r2, r3
 800a5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d0:	e001      	b.n	800a5d6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a5d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f383 8811 	msr	BASEPRI, r3
}
 800a5e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3738      	adds	r7, #56	; 0x38
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08c      	sub	sp, #48	; 0x30
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a602:	2b00      	cmp	r3, #0
 800a604:	d10a      	bne.n	800a61c <xQueueReceive+0x30>
	__asm volatile
 800a606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a60a:	f383 8811 	msr	BASEPRI, r3
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f3bf 8f4f 	dsb	sy
 800a616:	623b      	str	r3, [r7, #32]
}
 800a618:	bf00      	nop
 800a61a:	e7fe      	b.n	800a61a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d103      	bne.n	800a62a <xQueueReceive+0x3e>
 800a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a626:	2b00      	cmp	r3, #0
 800a628:	d101      	bne.n	800a62e <xQueueReceive+0x42>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e000      	b.n	800a630 <xQueueReceive+0x44>
 800a62e:	2300      	movs	r3, #0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d10a      	bne.n	800a64a <xQueueReceive+0x5e>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	61fb      	str	r3, [r7, #28]
}
 800a646:	bf00      	nop
 800a648:	e7fe      	b.n	800a648 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a64a:	f001 faf5 	bl	800bc38 <xTaskGetSchedulerState>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d102      	bne.n	800a65a <xQueueReceive+0x6e>
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d101      	bne.n	800a65e <xQueueReceive+0x72>
 800a65a:	2301      	movs	r3, #1
 800a65c:	e000      	b.n	800a660 <xQueueReceive+0x74>
 800a65e:	2300      	movs	r3, #0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xQueueReceive+0x8e>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	61bb      	str	r3, [r7, #24]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a67a:	f002 f96b 	bl	800c954 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a682:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a686:	2b00      	cmp	r3, #0
 800a688:	d01f      	beq.n	800a6ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a68a:	68b9      	ldr	r1, [r7, #8]
 800a68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68e:	f000 fabe 	bl	800ac0e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a69a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a69c:	691b      	ldr	r3, [r3, #16]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00f      	beq.n	800a6c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a4:	3310      	adds	r3, #16
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f001 f8a2 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d007      	beq.n	800a6c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a6b2:	4b3d      	ldr	r3, [pc, #244]	; (800a7a8 <xQueueReceive+0x1bc>)
 800a6b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6b8:	601a      	str	r2, [r3, #0]
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a6c2:	f002 f977 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e069      	b.n	800a79e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d103      	bne.n	800a6d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a6d0:	f002 f970 	bl	800c9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	e062      	b.n	800a79e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d106      	bne.n	800a6ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a6de:	f107 0310 	add.w	r3, r7, #16
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f001 f94a 	bl	800b97c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a6ec:	f002 f962 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a6f0:	f000 fe18 	bl	800b324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a6f4:	f002 f92e 	bl	800c954 <vPortEnterCritical>
 800a6f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6fe:	b25b      	sxtb	r3, r3
 800a700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a704:	d103      	bne.n	800a70e <xQueueReceive+0x122>
 800a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a710:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a714:	b25b      	sxtb	r3, r3
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a71a:	d103      	bne.n	800a724 <xQueueReceive+0x138>
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a724:	f002 f946 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a728:	1d3a      	adds	r2, r7, #4
 800a72a:	f107 0310 	add.w	r3, r7, #16
 800a72e:	4611      	mov	r1, r2
 800a730:	4618      	mov	r0, r3
 800a732:	f001 f939 	bl	800b9a8 <xTaskCheckForTimeOut>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d123      	bne.n	800a784 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a73e:	f000 fade 	bl	800acfe <prvIsQueueEmpty>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d017      	beq.n	800a778 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74a:	3324      	adds	r3, #36	; 0x24
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	4611      	mov	r1, r2
 800a750:	4618      	mov	r0, r3
 800a752:	f000 ffc1 	bl	800b6d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a758:	f000 fa7f 	bl	800ac5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a75c:	f000 fdf0 	bl	800b340 <xTaskResumeAll>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	d189      	bne.n	800a67a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a766:	4b10      	ldr	r3, [pc, #64]	; (800a7a8 <xQueueReceive+0x1bc>)
 800a768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a76c:	601a      	str	r2, [r3, #0]
 800a76e:	f3bf 8f4f 	dsb	sy
 800a772:	f3bf 8f6f 	isb	sy
 800a776:	e780      	b.n	800a67a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a77a:	f000 fa6e 	bl	800ac5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a77e:	f000 fddf 	bl	800b340 <xTaskResumeAll>
 800a782:	e77a      	b.n	800a67a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a786:	f000 fa68 	bl	800ac5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a78a:	f000 fdd9 	bl	800b340 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a78e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a790:	f000 fab5 	bl	800acfe <prvIsQueueEmpty>
 800a794:	4603      	mov	r3, r0
 800a796:	2b00      	cmp	r3, #0
 800a798:	f43f af6f 	beq.w	800a67a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a79c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3730      	adds	r7, #48	; 0x30
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b08e      	sub	sp, #56	; 0x38
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
 800a7b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a7c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7cc:	f383 8811 	msr	BASEPRI, r3
 800a7d0:	f3bf 8f6f 	isb	sy
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	623b      	str	r3, [r7, #32]
}
 800a7da:	bf00      	nop
 800a7dc:	e7fe      	b.n	800a7dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d00a      	beq.n	800a7fc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ea:	f383 8811 	msr	BASEPRI, r3
 800a7ee:	f3bf 8f6f 	isb	sy
 800a7f2:	f3bf 8f4f 	dsb	sy
 800a7f6:	61fb      	str	r3, [r7, #28]
}
 800a7f8:	bf00      	nop
 800a7fa:	e7fe      	b.n	800a7fa <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7fc:	f001 fa1c 	bl	800bc38 <xTaskGetSchedulerState>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <xQueueSemaphoreTake+0x60>
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d101      	bne.n	800a810 <xQueueSemaphoreTake+0x64>
 800a80c:	2301      	movs	r3, #1
 800a80e:	e000      	b.n	800a812 <xQueueSemaphoreTake+0x66>
 800a810:	2300      	movs	r3, #0
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10a      	bne.n	800a82c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	f383 8811 	msr	BASEPRI, r3
 800a81e:	f3bf 8f6f 	isb	sy
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	61bb      	str	r3, [r7, #24]
}
 800a828:	bf00      	nop
 800a82a:	e7fe      	b.n	800a82a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a82c:	f002 f892 	bl	800c954 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a834:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d024      	beq.n	800a886 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a83e:	1e5a      	subs	r2, r3, #1
 800a840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a842:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d104      	bne.n	800a856 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a84c:	f001 fb82 	bl	800bf54 <pvTaskIncrementMutexHeldCount>
 800a850:	4602      	mov	r2, r0
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00f      	beq.n	800a87e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a860:	3310      	adds	r3, #16
 800a862:	4618      	mov	r0, r3
 800a864:	f000 ffc4 	bl	800b7f0 <xTaskRemoveFromEventList>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d007      	beq.n	800a87e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a86e:	4b54      	ldr	r3, [pc, #336]	; (800a9c0 <xQueueSemaphoreTake+0x214>)
 800a870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a87e:	f002 f899 	bl	800c9b4 <vPortExitCritical>
				return pdPASS;
 800a882:	2301      	movs	r3, #1
 800a884:	e097      	b.n	800a9b6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d111      	bne.n	800a8b0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d00a      	beq.n	800a8a8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a896:	f383 8811 	msr	BASEPRI, r3
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	f3bf 8f4f 	dsb	sy
 800a8a2:	617b      	str	r3, [r7, #20]
}
 800a8a4:	bf00      	nop
 800a8a6:	e7fe      	b.n	800a8a6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a8a8:	f002 f884 	bl	800c9b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	e082      	b.n	800a9b6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a8b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d106      	bne.n	800a8c4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a8b6:	f107 030c 	add.w	r3, r7, #12
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f001 f85e 	bl	800b97c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a8c4:	f002 f876 	bl	800c9b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a8c8:	f000 fd2c 	bl	800b324 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a8cc:	f002 f842 	bl	800c954 <vPortEnterCritical>
 800a8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a8d6:	b25b      	sxtb	r3, r3
 800a8d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8dc:	d103      	bne.n	800a8e6 <xQueueSemaphoreTake+0x13a>
 800a8de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a8e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8ec:	b25b      	sxtb	r3, r3
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8f2:	d103      	bne.n	800a8fc <xQueueSemaphoreTake+0x150>
 800a8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8fc:	f002 f85a 	bl	800c9b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a900:	463a      	mov	r2, r7
 800a902:	f107 030c 	add.w	r3, r7, #12
 800a906:	4611      	mov	r1, r2
 800a908:	4618      	mov	r0, r3
 800a90a:	f001 f84d 	bl	800b9a8 <xTaskCheckForTimeOut>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d132      	bne.n	800a97a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a916:	f000 f9f2 	bl	800acfe <prvIsQueueEmpty>
 800a91a:	4603      	mov	r3, r0
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d026      	beq.n	800a96e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d109      	bne.n	800a93c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a928:	f002 f814 	bl	800c954 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	4618      	mov	r0, r3
 800a932:	f001 f99f 	bl	800bc74 <xTaskPriorityInherit>
 800a936:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a938:	f002 f83c 	bl	800c9b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	683a      	ldr	r2, [r7, #0]
 800a942:	4611      	mov	r1, r2
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fec7 	bl	800b6d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a94a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a94c:	f000 f985 	bl	800ac5a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a950:	f000 fcf6 	bl	800b340 <xTaskResumeAll>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	f47f af68 	bne.w	800a82c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a95c:	4b18      	ldr	r3, [pc, #96]	; (800a9c0 <xQueueSemaphoreTake+0x214>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
 800a96c:	e75e      	b.n	800a82c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a96e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a970:	f000 f973 	bl	800ac5a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a974:	f000 fce4 	bl	800b340 <xTaskResumeAll>
 800a978:	e758      	b.n	800a82c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a97a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a97c:	f000 f96d 	bl	800ac5a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a980:	f000 fcde 	bl	800b340 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a986:	f000 f9ba 	bl	800acfe <prvIsQueueEmpty>
 800a98a:	4603      	mov	r3, r0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f43f af4d 	beq.w	800a82c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a994:	2b00      	cmp	r3, #0
 800a996:	d00d      	beq.n	800a9b4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a998:	f001 ffdc 	bl	800c954 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a99c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a99e:	f000 f8b4 	bl	800ab0a <prvGetDisinheritPriorityAfterTimeout>
 800a9a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 fa38 	bl	800be20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a9b0:	f002 f800 	bl	800c9b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a9b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3738      	adds	r7, #56	; 0x38
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	e000ed04 	.word	0xe000ed04

0800a9c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08e      	sub	sp, #56	; 0x38
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	623b      	str	r3, [r7, #32]
}
 800a9ec:	bf00      	nop
 800a9ee:	e7fe      	b.n	800a9ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d103      	bne.n	800a9fe <xQueueReceiveFromISR+0x3a>
 800a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <xQueueReceiveFromISR+0x3e>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <xQueueReceiveFromISR+0x40>
 800aa02:	2300      	movs	r3, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	61fb      	str	r3, [r7, #28]
}
 800aa1a:	bf00      	nop
 800aa1c:	e7fe      	b.n	800aa1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa1e:	f002 f87b 	bl	800cb18 <vPortValidateInterruptPriority>
	__asm volatile
 800aa22:	f3ef 8211 	mrs	r2, BASEPRI
 800aa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa2a:	f383 8811 	msr	BASEPRI, r3
 800aa2e:	f3bf 8f6f 	isb	sy
 800aa32:	f3bf 8f4f 	dsb	sy
 800aa36:	61ba      	str	r2, [r7, #24]
 800aa38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800aa3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aa3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d02f      	beq.n	800aaaa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aa50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa54:	68b9      	ldr	r1, [r7, #8]
 800aa56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa58:	f000 f8d9 	bl	800ac0e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa5e:	1e5a      	subs	r2, r3, #1
 800aa60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800aa64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aa6c:	d112      	bne.n	800aa94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d016      	beq.n	800aaa4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa78:	3310      	adds	r3, #16
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f000 feb8 	bl	800b7f0 <xTaskRemoveFromEventList>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d00e      	beq.n	800aaa4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e007      	b.n	800aaa4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800aa94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa98:	3301      	adds	r3, #1
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	b25a      	sxtb	r2, r3
 800aa9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800aaa4:	2301      	movs	r3, #1
 800aaa6:	637b      	str	r3, [r7, #52]	; 0x34
 800aaa8:	e001      	b.n	800aaae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	637b      	str	r3, [r7, #52]	; 0x34
 800aaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f383 8811 	msr	BASEPRI, r3
}
 800aab8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3738      	adds	r7, #56	; 0x38
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10a      	bne.n	800aaec <vQueueDelete+0x28>
	__asm volatile
 800aad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aada:	f383 8811 	msr	BASEPRI, r3
 800aade:	f3bf 8f6f 	isb	sy
 800aae2:	f3bf 8f4f 	dsb	sy
 800aae6:	60bb      	str	r3, [r7, #8]
}
 800aae8:	bf00      	nop
 800aaea:	e7fe      	b.n	800aaea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800aaec:	68f8      	ldr	r0, [r7, #12]
 800aaee:	f000 f95f 	bl	800adb0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d102      	bne.n	800ab02 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800aafc:	68f8      	ldr	r0, [r7, #12]
 800aafe:	f002 f917 	bl	800cd30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ab02:	bf00      	nop
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ab0a:	b480      	push	{r7}
 800ab0c:	b085      	sub	sp, #20
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d006      	beq.n	800ab28 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ab24:	60fb      	str	r3, [r7, #12]
 800ab26:	e001      	b.n	800ab2c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
	}
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3714      	adds	r7, #20
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr

0800ab3a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab3a:	b580      	push	{r7, lr}
 800ab3c:	b086      	sub	sp, #24
 800ab3e:	af00      	add	r7, sp, #0
 800ab40:	60f8      	str	r0, [r7, #12]
 800ab42:	60b9      	str	r1, [r7, #8]
 800ab44:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab46:	2300      	movs	r3, #0
 800ab48:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab4e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d10d      	bne.n	800ab74 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d14d      	bne.n	800abfc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	4618      	mov	r0, r3
 800ab66:	f001 f8ed 	bl	800bd44 <xTaskPriorityDisinherit>
 800ab6a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2200      	movs	r2, #0
 800ab70:	609a      	str	r2, [r3, #8]
 800ab72:	e043      	b.n	800abfc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d119      	bne.n	800abae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	6858      	ldr	r0, [r3, #4]
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab82:	461a      	mov	r2, r3
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	f002 fbd7 	bl	800d338 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	685a      	ldr	r2, [r3, #4]
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab92:	441a      	add	r2, r3
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	685a      	ldr	r2, [r3, #4]
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d32b      	bcc.n	800abfc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	681a      	ldr	r2, [r3, #0]
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	605a      	str	r2, [r3, #4]
 800abac:	e026      	b.n	800abfc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	68d8      	ldr	r0, [r3, #12]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb6:	461a      	mov	r2, r3
 800abb8:	68b9      	ldr	r1, [r7, #8]
 800abba:	f002 fbbd 	bl	800d338 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc6:	425b      	negs	r3, r3
 800abc8:	441a      	add	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	68da      	ldr	r2, [r3, #12]
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d207      	bcs.n	800abea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	689a      	ldr	r2, [r3, #8]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe2:	425b      	negs	r3, r3
 800abe4:	441a      	add	r2, r3
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b02      	cmp	r3, #2
 800abee:	d105      	bne.n	800abfc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800abf6:	693b      	ldr	r3, [r7, #16]
 800abf8:	3b01      	subs	r3, #1
 800abfa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800abfc:	693b      	ldr	r3, [r7, #16]
 800abfe:	1c5a      	adds	r2, r3, #1
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ac04:	697b      	ldr	r3, [r7, #20]
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3718      	adds	r7, #24
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}

0800ac0e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac0e:	b580      	push	{r7, lr}
 800ac10:	b082      	sub	sp, #8
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
 800ac16:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d018      	beq.n	800ac52 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac28:	441a      	add	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68da      	ldr	r2, [r3, #12]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	689b      	ldr	r3, [r3, #8]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d303      	bcc.n	800ac42 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	68d9      	ldr	r1, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	6838      	ldr	r0, [r7, #0]
 800ac4e:	f002 fb73 	bl	800d338 <memcpy>
	}
}
 800ac52:	bf00      	nop
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}

0800ac5a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b084      	sub	sp, #16
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac62:	f001 fe77 	bl	800c954 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac6c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac6e:	e011      	b.n	800ac94 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d012      	beq.n	800ac9e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3324      	adds	r3, #36	; 0x24
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f000 fdb7 	bl	800b7f0 <xTaskRemoveFromEventList>
 800ac82:	4603      	mov	r3, r0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d001      	beq.n	800ac8c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac88:	f000 fef0 	bl	800ba6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	dce9      	bgt.n	800ac70 <prvUnlockQueue+0x16>
 800ac9c:	e000      	b.n	800aca0 <prvUnlockQueue+0x46>
					break;
 800ac9e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	22ff      	movs	r2, #255	; 0xff
 800aca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800aca8:	f001 fe84 	bl	800c9b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acac:	f001 fe52 	bl	800c954 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acb8:	e011      	b.n	800acde <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d012      	beq.n	800ace8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	3310      	adds	r3, #16
 800acc6:	4618      	mov	r0, r3
 800acc8:	f000 fd92 	bl	800b7f0 <xTaskRemoveFromEventList>
 800accc:	4603      	mov	r3, r0
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d001      	beq.n	800acd6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800acd2:	f000 fecb 	bl	800ba6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	3b01      	subs	r3, #1
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	dce9      	bgt.n	800acba <prvUnlockQueue+0x60>
 800ace6:	e000      	b.n	800acea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ace8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	22ff      	movs	r2, #255	; 0xff
 800acee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800acf2:	f001 fe5f 	bl	800c9b4 <vPortExitCritical>
}
 800acf6:	bf00      	nop
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}

0800acfe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800acfe:	b580      	push	{r7, lr}
 800ad00:	b084      	sub	sp, #16
 800ad02:	af00      	add	r7, sp, #0
 800ad04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad06:	f001 fe25 	bl	800c954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d102      	bne.n	800ad18 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad12:	2301      	movs	r3, #1
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	e001      	b.n	800ad1c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad1c:	f001 fe4a 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad32:	f001 fe0f 	bl	800c954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d102      	bne.n	800ad48 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad42:	2301      	movs	r3, #1
 800ad44:	60fb      	str	r3, [r7, #12]
 800ad46:	e001      	b.n	800ad4c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad4c:	f001 fe32 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800ad50:	68fb      	ldr	r3, [r7, #12]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
	...

0800ad5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
 800ad64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e014      	b.n	800ad96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad6c:	4a0f      	ldr	r2, [pc, #60]	; (800adac <vQueueAddToRegistry+0x50>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10b      	bne.n	800ad90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad78:	490c      	ldr	r1, [pc, #48]	; (800adac <vQueueAddToRegistry+0x50>)
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	683a      	ldr	r2, [r7, #0]
 800ad7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad82:	4a0a      	ldr	r2, [pc, #40]	; (800adac <vQueueAddToRegistry+0x50>)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	00db      	lsls	r3, r3, #3
 800ad88:	4413      	add	r3, r2
 800ad8a:	687a      	ldr	r2, [r7, #4]
 800ad8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad8e:	e006      	b.n	800ad9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60fb      	str	r3, [r7, #12]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b07      	cmp	r3, #7
 800ad9a:	d9e7      	bls.n	800ad6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad9c:	bf00      	nop
 800ad9e:	bf00      	nop
 800ada0:	3714      	adds	r7, #20
 800ada2:	46bd      	mov	sp, r7
 800ada4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada8:	4770      	bx	lr
 800adaa:	bf00      	nop
 800adac:	20000c9c 	.word	0x20000c9c

0800adb0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800adb0:	b480      	push	{r7}
 800adb2:	b085      	sub	sp, #20
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800adb8:	2300      	movs	r3, #0
 800adba:	60fb      	str	r3, [r7, #12]
 800adbc:	e016      	b.n	800adec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800adbe:	4a10      	ldr	r2, [pc, #64]	; (800ae00 <vQueueUnregisterQueue+0x50>)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	00db      	lsls	r3, r3, #3
 800adc4:	4413      	add	r3, r2
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d10b      	bne.n	800ade6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800adce:	4a0c      	ldr	r2, [pc, #48]	; (800ae00 <vQueueUnregisterQueue+0x50>)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2100      	movs	r1, #0
 800add4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800add8:	4a09      	ldr	r2, [pc, #36]	; (800ae00 <vQueueUnregisterQueue+0x50>)
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	00db      	lsls	r3, r3, #3
 800adde:	4413      	add	r3, r2
 800ade0:	2200      	movs	r2, #0
 800ade2:	605a      	str	r2, [r3, #4]
				break;
 800ade4:	e006      	b.n	800adf4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	3301      	adds	r3, #1
 800adea:	60fb      	str	r3, [r7, #12]
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2b07      	cmp	r3, #7
 800adf0:	d9e5      	bls.n	800adbe <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800adf2:	bf00      	nop
 800adf4:	bf00      	nop
 800adf6:	3714      	adds	r7, #20
 800adf8:	46bd      	mov	sp, r7
 800adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfe:	4770      	bx	lr
 800ae00:	20000c9c 	.word	0x20000c9c

0800ae04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ae14:	f001 fd9e 	bl	800c954 <vPortEnterCritical>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae1e:	b25b      	sxtb	r3, r3
 800ae20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae24:	d103      	bne.n	800ae2e <vQueueWaitForMessageRestricted+0x2a>
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae34:	b25b      	sxtb	r3, r3
 800ae36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae3a:	d103      	bne.n	800ae44 <vQueueWaitForMessageRestricted+0x40>
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae44:	f001 fdb6 	bl	800c9b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae48:	697b      	ldr	r3, [r7, #20]
 800ae4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d106      	bne.n	800ae5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	3324      	adds	r3, #36	; 0x24
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	68b9      	ldr	r1, [r7, #8]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 fc9d 	bl	800b798 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae5e:	6978      	ldr	r0, [r7, #20]
 800ae60:	f7ff fefb 	bl	800ac5a <prvUnlockQueue>
	}
 800ae64:	bf00      	nop
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08e      	sub	sp, #56	; 0x38
 800ae70:	af04      	add	r7, sp, #16
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
 800ae78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d10a      	bne.n	800ae96 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	623b      	str	r3, [r7, #32]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xTaskCreateStatic+0x46>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	61fb      	str	r3, [r7, #28]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aeb2:	23bc      	movs	r3, #188	; 0xbc
 800aeb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	2bbc      	cmp	r3, #188	; 0xbc
 800aeba:	d00a      	beq.n	800aed2 <xTaskCreateStatic+0x66>
	__asm volatile
 800aebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec0:	f383 8811 	msr	BASEPRI, r3
 800aec4:	f3bf 8f6f 	isb	sy
 800aec8:	f3bf 8f4f 	dsb	sy
 800aecc:	61bb      	str	r3, [r7, #24]
}
 800aece:	bf00      	nop
 800aed0:	e7fe      	b.n	800aed0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aed2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d01e      	beq.n	800af18 <xTaskCreateStatic+0xac>
 800aeda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01b      	beq.n	800af18 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aee2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	2202      	movs	r2, #2
 800aeee:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aef2:	2300      	movs	r3, #0
 800aef4:	9303      	str	r3, [sp, #12]
 800aef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	f107 0314 	add.w	r3, r7, #20
 800aefe:	9301      	str	r3, [sp, #4]
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	687a      	ldr	r2, [r7, #4]
 800af08:	68b9      	ldr	r1, [r7, #8]
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f000 f850 	bl	800afb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af12:	f000 f8f3 	bl	800b0fc <prvAddNewTaskToReadyList>
 800af16:	e001      	b.n	800af1c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800af18:	2300      	movs	r3, #0
 800af1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800af1c:	697b      	ldr	r3, [r7, #20]
	}
 800af1e:	4618      	mov	r0, r3
 800af20:	3728      	adds	r7, #40	; 0x28
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800af26:	b580      	push	{r7, lr}
 800af28:	b08c      	sub	sp, #48	; 0x30
 800af2a:	af04      	add	r7, sp, #16
 800af2c:	60f8      	str	r0, [r7, #12]
 800af2e:	60b9      	str	r1, [r7, #8]
 800af30:	603b      	str	r3, [r7, #0]
 800af32:	4613      	mov	r3, r2
 800af34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800af36:	88fb      	ldrh	r3, [r7, #6]
 800af38:	009b      	lsls	r3, r3, #2
 800af3a:	4618      	mov	r0, r3
 800af3c:	f001 fe2c 	bl	800cb98 <pvPortMalloc>
 800af40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d00e      	beq.n	800af66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af48:	20bc      	movs	r0, #188	; 0xbc
 800af4a:	f001 fe25 	bl	800cb98 <pvPortMalloc>
 800af4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d003      	beq.n	800af5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	697a      	ldr	r2, [r7, #20]
 800af5a:	631a      	str	r2, [r3, #48]	; 0x30
 800af5c:	e005      	b.n	800af6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af5e:	6978      	ldr	r0, [r7, #20]
 800af60:	f001 fee6 	bl	800cd30 <vPortFree>
 800af64:	e001      	b.n	800af6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d017      	beq.n	800afa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af78:	88fa      	ldrh	r2, [r7, #6]
 800af7a:	2300      	movs	r3, #0
 800af7c:	9303      	str	r3, [sp, #12]
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	9302      	str	r3, [sp, #8]
 800af82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af84:	9301      	str	r3, [sp, #4]
 800af86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af88:	9300      	str	r3, [sp, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	68b9      	ldr	r1, [r7, #8]
 800af8e:	68f8      	ldr	r0, [r7, #12]
 800af90:	f000 f80e 	bl	800afb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af94:	69f8      	ldr	r0, [r7, #28]
 800af96:	f000 f8b1 	bl	800b0fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af9a:	2301      	movs	r3, #1
 800af9c:	61bb      	str	r3, [r7, #24]
 800af9e:	e002      	b.n	800afa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800afa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800afa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800afa6:	69bb      	ldr	r3, [r7, #24]
	}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3720      	adds	r7, #32
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b088      	sub	sp, #32
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	60f8      	str	r0, [r7, #12]
 800afb8:	60b9      	str	r1, [r7, #8]
 800afba:	607a      	str	r2, [r7, #4]
 800afbc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	461a      	mov	r2, r3
 800afc8:	21a5      	movs	r1, #165	; 0xa5
 800afca:	f002 f9c3 	bl	800d354 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800afd8:	3b01      	subs	r3, #1
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afe0:	69bb      	ldr	r3, [r7, #24]
 800afe2:	f023 0307 	bic.w	r3, r3, #7
 800afe6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	f003 0307 	and.w	r3, r3, #7
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00a      	beq.n	800b008 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff6:	f383 8811 	msr	BASEPRI, r3
 800affa:	f3bf 8f6f 	isb	sy
 800affe:	f3bf 8f4f 	dsb	sy
 800b002:	617b      	str	r3, [r7, #20]
}
 800b004:	bf00      	nop
 800b006:	e7fe      	b.n	800b006 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d01f      	beq.n	800b04e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b00e:	2300      	movs	r3, #0
 800b010:	61fb      	str	r3, [r7, #28]
 800b012:	e012      	b.n	800b03a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	4413      	add	r3, r2
 800b01a:	7819      	ldrb	r1, [r3, #0]
 800b01c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b01e:	69fb      	ldr	r3, [r7, #28]
 800b020:	4413      	add	r3, r2
 800b022:	3334      	adds	r3, #52	; 0x34
 800b024:	460a      	mov	r2, r1
 800b026:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b028:	68ba      	ldr	r2, [r7, #8]
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d006      	beq.n	800b042 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	3301      	adds	r3, #1
 800b038:	61fb      	str	r3, [r7, #28]
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	2b0f      	cmp	r3, #15
 800b03e:	d9e9      	bls.n	800b014 <prvInitialiseNewTask+0x64>
 800b040:	e000      	b.n	800b044 <prvInitialiseNewTask+0x94>
			{
				break;
 800b042:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b046:	2200      	movs	r2, #0
 800b048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b04c:	e003      	b.n	800b056 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b050:	2200      	movs	r2, #0
 800b052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	2b37      	cmp	r3, #55	; 0x37
 800b05a:	d901      	bls.n	800b060 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b05c:	2337      	movs	r3, #55	; 0x37
 800b05e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b064:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b06a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	2200      	movs	r2, #0
 800b070:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b074:	3304      	adds	r3, #4
 800b076:	4618      	mov	r0, r3
 800b078:	f7fe fe56 	bl	8009d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	3318      	adds	r3, #24
 800b080:	4618      	mov	r0, r3
 800b082:	f7fe fe51 	bl	8009d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b088:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b08a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b08c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b09a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ae:	3354      	adds	r3, #84	; 0x54
 800b0b0:	2260      	movs	r2, #96	; 0x60
 800b0b2:	2100      	movs	r1, #0
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f002 f94d 	bl	800d354 <memset>
 800b0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0bc:	4a0c      	ldr	r2, [pc, #48]	; (800b0f0 <prvInitialiseNewTask+0x140>)
 800b0be:	659a      	str	r2, [r3, #88]	; 0x58
 800b0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c2:	4a0c      	ldr	r2, [pc, #48]	; (800b0f4 <prvInitialiseNewTask+0x144>)
 800b0c4:	65da      	str	r2, [r3, #92]	; 0x5c
 800b0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0c8:	4a0b      	ldr	r2, [pc, #44]	; (800b0f8 <prvInitialiseNewTask+0x148>)
 800b0ca:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	68f9      	ldr	r1, [r7, #12]
 800b0d0:	69b8      	ldr	r0, [r7, #24]
 800b0d2:	f001 fb15 	bl	800c700 <pxPortInitialiseStack>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0da:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d002      	beq.n	800b0e8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0e6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0e8:	bf00      	nop
 800b0ea:	3720      	adds	r7, #32
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	0802d278 	.word	0x0802d278
 800b0f4:	0802d298 	.word	0x0802d298
 800b0f8:	0802d258 	.word	0x0802d258

0800b0fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b104:	f001 fc26 	bl	800c954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b108:	4b2d      	ldr	r3, [pc, #180]	; (800b1c0 <prvAddNewTaskToReadyList+0xc4>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	3301      	adds	r3, #1
 800b10e:	4a2c      	ldr	r2, [pc, #176]	; (800b1c0 <prvAddNewTaskToReadyList+0xc4>)
 800b110:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b112:	4b2c      	ldr	r3, [pc, #176]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d109      	bne.n	800b12e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b11a:	4a2a      	ldr	r2, [pc, #168]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b120:	4b27      	ldr	r3, [pc, #156]	; (800b1c0 <prvAddNewTaskToReadyList+0xc4>)
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b01      	cmp	r3, #1
 800b126:	d110      	bne.n	800b14a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b128:	f000 fcc4 	bl	800bab4 <prvInitialiseTaskLists>
 800b12c:	e00d      	b.n	800b14a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b12e:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <prvAddNewTaskToReadyList+0xcc>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d109      	bne.n	800b14a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b136:	4b23      	ldr	r3, [pc, #140]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	429a      	cmp	r2, r3
 800b142:	d802      	bhi.n	800b14a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b144:	4a1f      	ldr	r2, [pc, #124]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b14a:	4b20      	ldr	r3, [pc, #128]	; (800b1cc <prvAddNewTaskToReadyList+0xd0>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	3301      	adds	r3, #1
 800b150:	4a1e      	ldr	r2, [pc, #120]	; (800b1cc <prvAddNewTaskToReadyList+0xd0>)
 800b152:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b154:	4b1d      	ldr	r3, [pc, #116]	; (800b1cc <prvAddNewTaskToReadyList+0xd0>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b160:	4b1b      	ldr	r3, [pc, #108]	; (800b1d0 <prvAddNewTaskToReadyList+0xd4>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	429a      	cmp	r2, r3
 800b166:	d903      	bls.n	800b170 <prvAddNewTaskToReadyList+0x74>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b16c:	4a18      	ldr	r2, [pc, #96]	; (800b1d0 <prvAddNewTaskToReadyList+0xd4>)
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4a15      	ldr	r2, [pc, #84]	; (800b1d4 <prvAddNewTaskToReadyList+0xd8>)
 800b17e:	441a      	add	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	3304      	adds	r3, #4
 800b184:	4619      	mov	r1, r3
 800b186:	4610      	mov	r0, r2
 800b188:	f7fe fddb 	bl	8009d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b18c:	f001 fc12 	bl	800c9b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b190:	4b0d      	ldr	r3, [pc, #52]	; (800b1c8 <prvAddNewTaskToReadyList+0xcc>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d00e      	beq.n	800b1b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b198:	4b0a      	ldr	r3, [pc, #40]	; (800b1c4 <prvAddNewTaskToReadyList+0xc8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d207      	bcs.n	800b1b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b1a6:	4b0c      	ldr	r3, [pc, #48]	; (800b1d8 <prvAddNewTaskToReadyList+0xdc>)
 800b1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b1b6:	bf00      	nop
 800b1b8:	3708      	adds	r7, #8
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	200011b0 	.word	0x200011b0
 800b1c4:	20000cdc 	.word	0x20000cdc
 800b1c8:	200011bc 	.word	0x200011bc
 800b1cc:	200011cc 	.word	0x200011cc
 800b1d0:	200011b8 	.word	0x200011b8
 800b1d4:	20000ce0 	.word	0x20000ce0
 800b1d8:	e000ed04 	.word	0xe000ed04

0800b1dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d017      	beq.n	800b21e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1ee:	4b13      	ldr	r3, [pc, #76]	; (800b23c <vTaskDelay+0x60>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <vTaskDelay+0x30>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60bb      	str	r3, [r7, #8]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b20c:	f000 f88a 	bl	800b324 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b210:	2100      	movs	r1, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 feb2 	bl	800bf7c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b218:	f000 f892 	bl	800b340 <xTaskResumeAll>
 800b21c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d107      	bne.n	800b234 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b224:	4b06      	ldr	r3, [pc, #24]	; (800b240 <vTaskDelay+0x64>)
 800b226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22a:	601a      	str	r2, [r3, #0]
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b234:	bf00      	nop
 800b236:	3710      	adds	r7, #16
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	200011d8 	.word	0x200011d8
 800b240:	e000ed04 	.word	0xe000ed04

0800b244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b08a      	sub	sp, #40	; 0x28
 800b248:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b252:	463a      	mov	r2, r7
 800b254:	1d39      	adds	r1, r7, #4
 800b256:	f107 0308 	add.w	r3, r7, #8
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fb22 	bl	80098a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	9202      	str	r2, [sp, #8]
 800b268:	9301      	str	r3, [sp, #4]
 800b26a:	2300      	movs	r3, #0
 800b26c:	9300      	str	r3, [sp, #0]
 800b26e:	2300      	movs	r3, #0
 800b270:	460a      	mov	r2, r1
 800b272:	4924      	ldr	r1, [pc, #144]	; (800b304 <vTaskStartScheduler+0xc0>)
 800b274:	4824      	ldr	r0, [pc, #144]	; (800b308 <vTaskStartScheduler+0xc4>)
 800b276:	f7ff fdf9 	bl	800ae6c <xTaskCreateStatic>
 800b27a:	4603      	mov	r3, r0
 800b27c:	4a23      	ldr	r2, [pc, #140]	; (800b30c <vTaskStartScheduler+0xc8>)
 800b27e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b280:	4b22      	ldr	r3, [pc, #136]	; (800b30c <vTaskStartScheduler+0xc8>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b288:	2301      	movs	r3, #1
 800b28a:	617b      	str	r3, [r7, #20]
 800b28c:	e001      	b.n	800b292 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b28e:	2300      	movs	r3, #0
 800b290:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	2b01      	cmp	r3, #1
 800b296:	d102      	bne.n	800b29e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b298:	f000 fec4 	bl	800c024 <xTimerCreateTimerTask>
 800b29c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d11b      	bne.n	800b2dc <vTaskStartScheduler+0x98>
	__asm volatile
 800b2a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a8:	f383 8811 	msr	BASEPRI, r3
 800b2ac:	f3bf 8f6f 	isb	sy
 800b2b0:	f3bf 8f4f 	dsb	sy
 800b2b4:	613b      	str	r3, [r7, #16]
}
 800b2b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b2b8:	4b15      	ldr	r3, [pc, #84]	; (800b310 <vTaskStartScheduler+0xcc>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	3354      	adds	r3, #84	; 0x54
 800b2be:	4a15      	ldr	r2, [pc, #84]	; (800b314 <vTaskStartScheduler+0xd0>)
 800b2c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b2c2:	4b15      	ldr	r3, [pc, #84]	; (800b318 <vTaskStartScheduler+0xd4>)
 800b2c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b2c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b2ca:	4b14      	ldr	r3, [pc, #80]	; (800b31c <vTaskStartScheduler+0xd8>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2d0:	4b13      	ldr	r3, [pc, #76]	; (800b320 <vTaskStartScheduler+0xdc>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2d6:	f001 fa9b 	bl	800c810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2da:	e00e      	b.n	800b2fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2e2:	d10a      	bne.n	800b2fa <vTaskStartScheduler+0xb6>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	60fb      	str	r3, [r7, #12]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <vTaskStartScheduler+0xb4>
}
 800b2fa:	bf00      	nop
 800b2fc:	3718      	adds	r7, #24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	0800dea4 	.word	0x0800dea4
 800b308:	0800ba85 	.word	0x0800ba85
 800b30c:	200011d4 	.word	0x200011d4
 800b310:	20000cdc 	.word	0x20000cdc
 800b314:	2000002c 	.word	0x2000002c
 800b318:	200011d0 	.word	0x200011d0
 800b31c:	200011bc 	.word	0x200011bc
 800b320:	200011b4 	.word	0x200011b4

0800b324 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b324:	b480      	push	{r7}
 800b326:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b328:	4b04      	ldr	r3, [pc, #16]	; (800b33c <vTaskSuspendAll+0x18>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	3301      	adds	r3, #1
 800b32e:	4a03      	ldr	r2, [pc, #12]	; (800b33c <vTaskSuspendAll+0x18>)
 800b330:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b332:	bf00      	nop
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	200011d8 	.word	0x200011d8

0800b340 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b346:	2300      	movs	r3, #0
 800b348:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b34a:	2300      	movs	r3, #0
 800b34c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b34e:	4b42      	ldr	r3, [pc, #264]	; (800b458 <xTaskResumeAll+0x118>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d10a      	bne.n	800b36c <xTaskResumeAll+0x2c>
	__asm volatile
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	603b      	str	r3, [r7, #0]
}
 800b368:	bf00      	nop
 800b36a:	e7fe      	b.n	800b36a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b36c:	f001 faf2 	bl	800c954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b370:	4b39      	ldr	r3, [pc, #228]	; (800b458 <xTaskResumeAll+0x118>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3b01      	subs	r3, #1
 800b376:	4a38      	ldr	r2, [pc, #224]	; (800b458 <xTaskResumeAll+0x118>)
 800b378:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b37a:	4b37      	ldr	r3, [pc, #220]	; (800b458 <xTaskResumeAll+0x118>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d162      	bne.n	800b448 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b382:	4b36      	ldr	r3, [pc, #216]	; (800b45c <xTaskResumeAll+0x11c>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d05e      	beq.n	800b448 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b38a:	e02f      	b.n	800b3ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b38c:	4b34      	ldr	r3, [pc, #208]	; (800b460 <xTaskResumeAll+0x120>)
 800b38e:	68db      	ldr	r3, [r3, #12]
 800b390:	68db      	ldr	r3, [r3, #12]
 800b392:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3318      	adds	r3, #24
 800b398:	4618      	mov	r0, r3
 800b39a:	f7fe fd2f 	bl	8009dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe fd2a 	bl	8009dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	4b2d      	ldr	r3, [pc, #180]	; (800b464 <xTaskResumeAll+0x124>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d903      	bls.n	800b3bc <xTaskResumeAll+0x7c>
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b8:	4a2a      	ldr	r2, [pc, #168]	; (800b464 <xTaskResumeAll+0x124>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3c0:	4613      	mov	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	4413      	add	r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4a27      	ldr	r2, [pc, #156]	; (800b468 <xTaskResumeAll+0x128>)
 800b3ca:	441a      	add	r2, r3
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	f7fe fcb5 	bl	8009d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3dc:	4b23      	ldr	r3, [pc, #140]	; (800b46c <xTaskResumeAll+0x12c>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d302      	bcc.n	800b3ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b3e6:	4b22      	ldr	r3, [pc, #136]	; (800b470 <xTaskResumeAll+0x130>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3ec:	4b1c      	ldr	r3, [pc, #112]	; (800b460 <xTaskResumeAll+0x120>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d1cb      	bne.n	800b38c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3fa:	f000 fbfd 	bl	800bbf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3fe:	4b1d      	ldr	r3, [pc, #116]	; (800b474 <xTaskResumeAll+0x134>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d010      	beq.n	800b42c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b40a:	f000 f847 	bl	800b49c <xTaskIncrementTick>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b414:	4b16      	ldr	r3, [pc, #88]	; (800b470 <xTaskResumeAll+0x130>)
 800b416:	2201      	movs	r2, #1
 800b418:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	3b01      	subs	r3, #1
 800b41e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1f1      	bne.n	800b40a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b426:	4b13      	ldr	r3, [pc, #76]	; (800b474 <xTaskResumeAll+0x134>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b42c:	4b10      	ldr	r3, [pc, #64]	; (800b470 <xTaskResumeAll+0x130>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d009      	beq.n	800b448 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b434:	2301      	movs	r3, #1
 800b436:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b438:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <xTaskResumeAll+0x138>)
 800b43a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b43e:	601a      	str	r2, [r3, #0]
 800b440:	f3bf 8f4f 	dsb	sy
 800b444:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b448:	f001 fab4 	bl	800c9b4 <vPortExitCritical>

	return xAlreadyYielded;
 800b44c:	68bb      	ldr	r3, [r7, #8]
}
 800b44e:	4618      	mov	r0, r3
 800b450:	3710      	adds	r7, #16
 800b452:	46bd      	mov	sp, r7
 800b454:	bd80      	pop	{r7, pc}
 800b456:	bf00      	nop
 800b458:	200011d8 	.word	0x200011d8
 800b45c:	200011b0 	.word	0x200011b0
 800b460:	20001170 	.word	0x20001170
 800b464:	200011b8 	.word	0x200011b8
 800b468:	20000ce0 	.word	0x20000ce0
 800b46c:	20000cdc 	.word	0x20000cdc
 800b470:	200011c4 	.word	0x200011c4
 800b474:	200011c0 	.word	0x200011c0
 800b478:	e000ed04 	.word	0xe000ed04

0800b47c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <xTaskGetTickCount+0x1c>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b488:	687b      	ldr	r3, [r7, #4]
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr
 800b496:	bf00      	nop
 800b498:	200011b4 	.word	0x200011b4

0800b49c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b086      	sub	sp, #24
 800b4a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4a6:	4b4f      	ldr	r3, [pc, #316]	; (800b5e4 <xTaskIncrementTick+0x148>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f040 808f 	bne.w	800b5ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b4b0:	4b4d      	ldr	r3, [pc, #308]	; (800b5e8 <xTaskIncrementTick+0x14c>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	3301      	adds	r3, #1
 800b4b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b4b8:	4a4b      	ldr	r2, [pc, #300]	; (800b5e8 <xTaskIncrementTick+0x14c>)
 800b4ba:	693b      	ldr	r3, [r7, #16]
 800b4bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d120      	bne.n	800b506 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b4c4:	4b49      	ldr	r3, [pc, #292]	; (800b5ec <xTaskIncrementTick+0x150>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d00a      	beq.n	800b4e4 <xTaskIncrementTick+0x48>
	__asm volatile
 800b4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d2:	f383 8811 	msr	BASEPRI, r3
 800b4d6:	f3bf 8f6f 	isb	sy
 800b4da:	f3bf 8f4f 	dsb	sy
 800b4de:	603b      	str	r3, [r7, #0]
}
 800b4e0:	bf00      	nop
 800b4e2:	e7fe      	b.n	800b4e2 <xTaskIncrementTick+0x46>
 800b4e4:	4b41      	ldr	r3, [pc, #260]	; (800b5ec <xTaskIncrementTick+0x150>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	60fb      	str	r3, [r7, #12]
 800b4ea:	4b41      	ldr	r3, [pc, #260]	; (800b5f0 <xTaskIncrementTick+0x154>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a3f      	ldr	r2, [pc, #252]	; (800b5ec <xTaskIncrementTick+0x150>)
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	4a3f      	ldr	r2, [pc, #252]	; (800b5f0 <xTaskIncrementTick+0x154>)
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	4b3e      	ldr	r3, [pc, #248]	; (800b5f4 <xTaskIncrementTick+0x158>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3301      	adds	r3, #1
 800b4fe:	4a3d      	ldr	r2, [pc, #244]	; (800b5f4 <xTaskIncrementTick+0x158>)
 800b500:	6013      	str	r3, [r2, #0]
 800b502:	f000 fb79 	bl	800bbf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b506:	4b3c      	ldr	r3, [pc, #240]	; (800b5f8 <xTaskIncrementTick+0x15c>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	693a      	ldr	r2, [r7, #16]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d349      	bcc.n	800b5a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b510:	4b36      	ldr	r3, [pc, #216]	; (800b5ec <xTaskIncrementTick+0x150>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d104      	bne.n	800b524 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b51a:	4b37      	ldr	r3, [pc, #220]	; (800b5f8 <xTaskIncrementTick+0x15c>)
 800b51c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b520:	601a      	str	r2, [r3, #0]
					break;
 800b522:	e03f      	b.n	800b5a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b524:	4b31      	ldr	r3, [pc, #196]	; (800b5ec <xTaskIncrementTick+0x150>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	68db      	ldr	r3, [r3, #12]
 800b52a:	68db      	ldr	r3, [r3, #12]
 800b52c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b534:	693a      	ldr	r2, [r7, #16]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d203      	bcs.n	800b544 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b53c:	4a2e      	ldr	r2, [pc, #184]	; (800b5f8 <xTaskIncrementTick+0x15c>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b542:	e02f      	b.n	800b5a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	3304      	adds	r3, #4
 800b548:	4618      	mov	r0, r3
 800b54a:	f7fe fc57 	bl	8009dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b552:	2b00      	cmp	r3, #0
 800b554:	d004      	beq.n	800b560 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	3318      	adds	r3, #24
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fe fc4e 	bl	8009dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b564:	4b25      	ldr	r3, [pc, #148]	; (800b5fc <xTaskIncrementTick+0x160>)
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	429a      	cmp	r2, r3
 800b56a:	d903      	bls.n	800b574 <xTaskIncrementTick+0xd8>
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b570:	4a22      	ldr	r2, [pc, #136]	; (800b5fc <xTaskIncrementTick+0x160>)
 800b572:	6013      	str	r3, [r2, #0]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b578:	4613      	mov	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	4413      	add	r3, r2
 800b57e:	009b      	lsls	r3, r3, #2
 800b580:	4a1f      	ldr	r2, [pc, #124]	; (800b600 <xTaskIncrementTick+0x164>)
 800b582:	441a      	add	r2, r3
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	3304      	adds	r3, #4
 800b588:	4619      	mov	r1, r3
 800b58a:	4610      	mov	r0, r2
 800b58c:	f7fe fbd9 	bl	8009d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b594:	4b1b      	ldr	r3, [pc, #108]	; (800b604 <xTaskIncrementTick+0x168>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d3b8      	bcc.n	800b510 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5a2:	e7b5      	b.n	800b510 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b5a4:	4b17      	ldr	r3, [pc, #92]	; (800b604 <xTaskIncrementTick+0x168>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5aa:	4915      	ldr	r1, [pc, #84]	; (800b600 <xTaskIncrementTick+0x164>)
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	009b      	lsls	r3, r3, #2
 800b5b0:	4413      	add	r3, r2
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	440b      	add	r3, r1
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	2b01      	cmp	r3, #1
 800b5ba:	d901      	bls.n	800b5c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b5c0:	4b11      	ldr	r3, [pc, #68]	; (800b608 <xTaskIncrementTick+0x16c>)
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d007      	beq.n	800b5d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	e004      	b.n	800b5d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5ce:	4b0f      	ldr	r3, [pc, #60]	; (800b60c <xTaskIncrementTick+0x170>)
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	4a0d      	ldr	r2, [pc, #52]	; (800b60c <xTaskIncrementTick+0x170>)
 800b5d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5d8:	697b      	ldr	r3, [r7, #20]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	200011d8 	.word	0x200011d8
 800b5e8:	200011b4 	.word	0x200011b4
 800b5ec:	20001168 	.word	0x20001168
 800b5f0:	2000116c 	.word	0x2000116c
 800b5f4:	200011c8 	.word	0x200011c8
 800b5f8:	200011d0 	.word	0x200011d0
 800b5fc:	200011b8 	.word	0x200011b8
 800b600:	20000ce0 	.word	0x20000ce0
 800b604:	20000cdc 	.word	0x20000cdc
 800b608:	200011c4 	.word	0x200011c4
 800b60c:	200011c0 	.word	0x200011c0

0800b610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b610:	b480      	push	{r7}
 800b612:	b085      	sub	sp, #20
 800b614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b616:	4b2a      	ldr	r3, [pc, #168]	; (800b6c0 <vTaskSwitchContext+0xb0>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d003      	beq.n	800b626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b61e:	4b29      	ldr	r3, [pc, #164]	; (800b6c4 <vTaskSwitchContext+0xb4>)
 800b620:	2201      	movs	r2, #1
 800b622:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b624:	e046      	b.n	800b6b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b626:	4b27      	ldr	r3, [pc, #156]	; (800b6c4 <vTaskSwitchContext+0xb4>)
 800b628:	2200      	movs	r2, #0
 800b62a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b62c:	4b26      	ldr	r3, [pc, #152]	; (800b6c8 <vTaskSwitchContext+0xb8>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	60fb      	str	r3, [r7, #12]
 800b632:	e010      	b.n	800b656 <vTaskSwitchContext+0x46>
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d10a      	bne.n	800b650 <vTaskSwitchContext+0x40>
	__asm volatile
 800b63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b63e:	f383 8811 	msr	BASEPRI, r3
 800b642:	f3bf 8f6f 	isb	sy
 800b646:	f3bf 8f4f 	dsb	sy
 800b64a:	607b      	str	r3, [r7, #4]
}
 800b64c:	bf00      	nop
 800b64e:	e7fe      	b.n	800b64e <vTaskSwitchContext+0x3e>
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	3b01      	subs	r3, #1
 800b654:	60fb      	str	r3, [r7, #12]
 800b656:	491d      	ldr	r1, [pc, #116]	; (800b6cc <vTaskSwitchContext+0xbc>)
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	4613      	mov	r3, r2
 800b65c:	009b      	lsls	r3, r3, #2
 800b65e:	4413      	add	r3, r2
 800b660:	009b      	lsls	r3, r3, #2
 800b662:	440b      	add	r3, r1
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d0e4      	beq.n	800b634 <vTaskSwitchContext+0x24>
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4613      	mov	r3, r2
 800b66e:	009b      	lsls	r3, r3, #2
 800b670:	4413      	add	r3, r2
 800b672:	009b      	lsls	r3, r3, #2
 800b674:	4a15      	ldr	r2, [pc, #84]	; (800b6cc <vTaskSwitchContext+0xbc>)
 800b676:	4413      	add	r3, r2
 800b678:	60bb      	str	r3, [r7, #8]
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	685a      	ldr	r2, [r3, #4]
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	605a      	str	r2, [r3, #4]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	685a      	ldr	r2, [r3, #4]
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	3308      	adds	r3, #8
 800b68c:	429a      	cmp	r2, r3
 800b68e:	d104      	bne.n	800b69a <vTaskSwitchContext+0x8a>
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	685a      	ldr	r2, [r3, #4]
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	605a      	str	r2, [r3, #4]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	4a0b      	ldr	r2, [pc, #44]	; (800b6d0 <vTaskSwitchContext+0xc0>)
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	4a08      	ldr	r2, [pc, #32]	; (800b6c8 <vTaskSwitchContext+0xb8>)
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b6aa:	4b09      	ldr	r3, [pc, #36]	; (800b6d0 <vTaskSwitchContext+0xc0>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3354      	adds	r3, #84	; 0x54
 800b6b0:	4a08      	ldr	r2, [pc, #32]	; (800b6d4 <vTaskSwitchContext+0xc4>)
 800b6b2:	6013      	str	r3, [r2, #0]
}
 800b6b4:	bf00      	nop
 800b6b6:	3714      	adds	r7, #20
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	200011d8 	.word	0x200011d8
 800b6c4:	200011c4 	.word	0x200011c4
 800b6c8:	200011b8 	.word	0x200011b8
 800b6cc:	20000ce0 	.word	0x20000ce0
 800b6d0:	20000cdc 	.word	0x20000cdc
 800b6d4:	2000002c 	.word	0x2000002c

0800b6d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d10a      	bne.n	800b6fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	60fb      	str	r3, [r7, #12]
}
 800b6fa:	bf00      	nop
 800b6fc:	e7fe      	b.n	800b6fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6fe:	4b07      	ldr	r3, [pc, #28]	; (800b71c <vTaskPlaceOnEventList+0x44>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3318      	adds	r3, #24
 800b704:	4619      	mov	r1, r3
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f7fe fb3f 	bl	8009d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b70c:	2101      	movs	r1, #1
 800b70e:	6838      	ldr	r0, [r7, #0]
 800b710:	f000 fc34 	bl	800bf7c <prvAddCurrentTaskToDelayedList>
}
 800b714:	bf00      	nop
 800b716:	3710      	adds	r7, #16
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	20000cdc 	.word	0x20000cdc

0800b720 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	60f8      	str	r0, [r7, #12]
 800b728:	60b9      	str	r1, [r7, #8]
 800b72a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d10a      	bne.n	800b748 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800b732:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b736:	f383 8811 	msr	BASEPRI, r3
 800b73a:	f3bf 8f6f 	isb	sy
 800b73e:	f3bf 8f4f 	dsb	sy
 800b742:	617b      	str	r3, [r7, #20]
}
 800b744:	bf00      	nop
 800b746:	e7fe      	b.n	800b746 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800b748:	4b11      	ldr	r3, [pc, #68]	; (800b790 <vTaskPlaceOnUnorderedEventList+0x70>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d10a      	bne.n	800b766 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800b750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b754:	f383 8811 	msr	BASEPRI, r3
 800b758:	f3bf 8f6f 	isb	sy
 800b75c:	f3bf 8f4f 	dsb	sy
 800b760:	613b      	str	r3, [r7, #16]
}
 800b762:	bf00      	nop
 800b764:	e7fe      	b.n	800b764 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b766:	4b0b      	ldr	r3, [pc, #44]	; (800b794 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800b770:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b772:	4b08      	ldr	r3, [pc, #32]	; (800b794 <vTaskPlaceOnUnorderedEventList+0x74>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3318      	adds	r3, #24
 800b778:	4619      	mov	r1, r3
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f7fe fae1 	bl	8009d42 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b780:	2101      	movs	r1, #1
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 fbfa 	bl	800bf7c <prvAddCurrentTaskToDelayedList>
}
 800b788:	bf00      	nop
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}
 800b790:	200011d8 	.word	0x200011d8
 800b794:	20000cdc 	.word	0x20000cdc

0800b798 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b086      	sub	sp, #24
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	60f8      	str	r0, [r7, #12]
 800b7a0:	60b9      	str	r1, [r7, #8]
 800b7a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d10a      	bne.n	800b7c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ae:	f383 8811 	msr	BASEPRI, r3
 800b7b2:	f3bf 8f6f 	isb	sy
 800b7b6:	f3bf 8f4f 	dsb	sy
 800b7ba:	617b      	str	r3, [r7, #20]
}
 800b7bc:	bf00      	nop
 800b7be:	e7fe      	b.n	800b7be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b7c0:	4b0a      	ldr	r3, [pc, #40]	; (800b7ec <vTaskPlaceOnEventListRestricted+0x54>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	3318      	adds	r3, #24
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f7fe faba 	bl	8009d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d002      	beq.n	800b7da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b7d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b7da:	6879      	ldr	r1, [r7, #4]
 800b7dc:	68b8      	ldr	r0, [r7, #8]
 800b7de:	f000 fbcd 	bl	800bf7c <prvAddCurrentTaskToDelayedList>
	}
 800b7e2:	bf00      	nop
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	20000cdc 	.word	0x20000cdc

0800b7f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b086      	sub	sp, #24
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	68db      	ldr	r3, [r3, #12]
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10a      	bne.n	800b81c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80a:	f383 8811 	msr	BASEPRI, r3
 800b80e:	f3bf 8f6f 	isb	sy
 800b812:	f3bf 8f4f 	dsb	sy
 800b816:	60fb      	str	r3, [r7, #12]
}
 800b818:	bf00      	nop
 800b81a:	e7fe      	b.n	800b81a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	3318      	adds	r3, #24
 800b820:	4618      	mov	r0, r3
 800b822:	f7fe faeb 	bl	8009dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b826:	4b1e      	ldr	r3, [pc, #120]	; (800b8a0 <xTaskRemoveFromEventList+0xb0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d11d      	bne.n	800b86a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	3304      	adds	r3, #4
 800b832:	4618      	mov	r0, r3
 800b834:	f7fe fae2 	bl	8009dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b83c:	4b19      	ldr	r3, [pc, #100]	; (800b8a4 <xTaskRemoveFromEventList+0xb4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d903      	bls.n	800b84c <xTaskRemoveFromEventList+0x5c>
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	4a16      	ldr	r2, [pc, #88]	; (800b8a4 <xTaskRemoveFromEventList+0xb4>)
 800b84a:	6013      	str	r3, [r2, #0]
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b850:	4613      	mov	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	4413      	add	r3, r2
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	4a13      	ldr	r2, [pc, #76]	; (800b8a8 <xTaskRemoveFromEventList+0xb8>)
 800b85a:	441a      	add	r2, r3
 800b85c:	693b      	ldr	r3, [r7, #16]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4610      	mov	r0, r2
 800b864:	f7fe fa6d 	bl	8009d42 <vListInsertEnd>
 800b868:	e005      	b.n	800b876 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	3318      	adds	r3, #24
 800b86e:	4619      	mov	r1, r3
 800b870:	480e      	ldr	r0, [pc, #56]	; (800b8ac <xTaskRemoveFromEventList+0xbc>)
 800b872:	f7fe fa66 	bl	8009d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b87a:	4b0d      	ldr	r3, [pc, #52]	; (800b8b0 <xTaskRemoveFromEventList+0xc0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b880:	429a      	cmp	r2, r3
 800b882:	d905      	bls.n	800b890 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b884:	2301      	movs	r3, #1
 800b886:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b888:	4b0a      	ldr	r3, [pc, #40]	; (800b8b4 <xTaskRemoveFromEventList+0xc4>)
 800b88a:	2201      	movs	r2, #1
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	e001      	b.n	800b894 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b890:	2300      	movs	r3, #0
 800b892:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b894:	697b      	ldr	r3, [r7, #20]
}
 800b896:	4618      	mov	r0, r3
 800b898:	3718      	adds	r7, #24
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	200011d8 	.word	0x200011d8
 800b8a4:	200011b8 	.word	0x200011b8
 800b8a8:	20000ce0 	.word	0x20000ce0
 800b8ac:	20001170 	.word	0x20001170
 800b8b0:	20000cdc 	.word	0x20000cdc
 800b8b4:	200011c4 	.word	0x200011c4

0800b8b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b086      	sub	sp, #24
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
 800b8c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800b8c2:	4b29      	ldr	r3, [pc, #164]	; (800b968 <vTaskRemoveFromUnorderedEventList+0xb0>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d10a      	bne.n	800b8e0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	613b      	str	r3, [r7, #16]
}
 800b8dc:	bf00      	nop
 800b8de:	e7fe      	b.n	800b8de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d10a      	bne.n	800b90c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800b8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8fa:	f383 8811 	msr	BASEPRI, r3
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	f3bf 8f4f 	dsb	sy
 800b906:	60fb      	str	r3, [r7, #12]
}
 800b908:	bf00      	nop
 800b90a:	e7fe      	b.n	800b90a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7fe fa75 	bl	8009dfc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	3304      	adds	r3, #4
 800b916:	4618      	mov	r0, r3
 800b918:	f7fe fa70 	bl	8009dfc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b920:	4b12      	ldr	r3, [pc, #72]	; (800b96c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	429a      	cmp	r2, r3
 800b926:	d903      	bls.n	800b930 <vTaskRemoveFromUnorderedEventList+0x78>
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92c:	4a0f      	ldr	r2, [pc, #60]	; (800b96c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800b92e:	6013      	str	r3, [r2, #0]
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b934:	4613      	mov	r3, r2
 800b936:	009b      	lsls	r3, r3, #2
 800b938:	4413      	add	r3, r2
 800b93a:	009b      	lsls	r3, r3, #2
 800b93c:	4a0c      	ldr	r2, [pc, #48]	; (800b970 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800b93e:	441a      	add	r2, r3
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	3304      	adds	r3, #4
 800b944:	4619      	mov	r1, r3
 800b946:	4610      	mov	r0, r2
 800b948:	f7fe f9fb 	bl	8009d42 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b94c:	697b      	ldr	r3, [r7, #20]
 800b94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b950:	4b08      	ldr	r3, [pc, #32]	; (800b974 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b956:	429a      	cmp	r2, r3
 800b958:	d902      	bls.n	800b960 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800b95a:	4b07      	ldr	r3, [pc, #28]	; (800b978 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800b95c:	2201      	movs	r2, #1
 800b95e:	601a      	str	r2, [r3, #0]
	}
}
 800b960:	bf00      	nop
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	200011d8 	.word	0x200011d8
 800b96c:	200011b8 	.word	0x200011b8
 800b970:	20000ce0 	.word	0x20000ce0
 800b974:	20000cdc 	.word	0x20000cdc
 800b978:	200011c4 	.word	0x200011c4

0800b97c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b97c:	b480      	push	{r7}
 800b97e:	b083      	sub	sp, #12
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b984:	4b06      	ldr	r3, [pc, #24]	; (800b9a0 <vTaskInternalSetTimeOutState+0x24>)
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b98c:	4b05      	ldr	r3, [pc, #20]	; (800b9a4 <vTaskInternalSetTimeOutState+0x28>)
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	605a      	str	r2, [r3, #4]
}
 800b994:	bf00      	nop
 800b996:	370c      	adds	r7, #12
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	200011c8 	.word	0x200011c8
 800b9a4:	200011b4 	.word	0x200011b4

0800b9a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b088      	sub	sp, #32
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10a      	bne.n	800b9ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9bc:	f383 8811 	msr	BASEPRI, r3
 800b9c0:	f3bf 8f6f 	isb	sy
 800b9c4:	f3bf 8f4f 	dsb	sy
 800b9c8:	613b      	str	r3, [r7, #16]
}
 800b9ca:	bf00      	nop
 800b9cc:	e7fe      	b.n	800b9cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d10a      	bne.n	800b9ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9d8:	f383 8811 	msr	BASEPRI, r3
 800b9dc:	f3bf 8f6f 	isb	sy
 800b9e0:	f3bf 8f4f 	dsb	sy
 800b9e4:	60fb      	str	r3, [r7, #12]
}
 800b9e6:	bf00      	nop
 800b9e8:	e7fe      	b.n	800b9e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b9ea:	f000 ffb3 	bl	800c954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b9ee:	4b1d      	ldr	r3, [pc, #116]	; (800ba64 <xTaskCheckForTimeOut+0xbc>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	69ba      	ldr	r2, [r7, #24]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba06:	d102      	bne.n	800ba0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba08:	2300      	movs	r3, #0
 800ba0a:	61fb      	str	r3, [r7, #28]
 800ba0c:	e023      	b.n	800ba56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	4b15      	ldr	r3, [pc, #84]	; (800ba68 <xTaskCheckForTimeOut+0xc0>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d007      	beq.n	800ba2a <xTaskCheckForTimeOut+0x82>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	69ba      	ldr	r2, [r7, #24]
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d302      	bcc.n	800ba2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba24:	2301      	movs	r3, #1
 800ba26:	61fb      	str	r3, [r7, #28]
 800ba28:	e015      	b.n	800ba56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba2a:	683b      	ldr	r3, [r7, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	429a      	cmp	r2, r3
 800ba32:	d20b      	bcs.n	800ba4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	1ad2      	subs	r2, r2, r3
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f7ff ff9b 	bl	800b97c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	61fb      	str	r3, [r7, #28]
 800ba4a:	e004      	b.n	800ba56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba52:	2301      	movs	r3, #1
 800ba54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba56:	f000 ffad 	bl	800c9b4 <vPortExitCritical>

	return xReturn;
 800ba5a:	69fb      	ldr	r3, [r7, #28]
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3720      	adds	r7, #32
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	200011b4 	.word	0x200011b4
 800ba68:	200011c8 	.word	0x200011c8

0800ba6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ba70:	4b03      	ldr	r3, [pc, #12]	; (800ba80 <vTaskMissedYield+0x14>)
 800ba72:	2201      	movs	r2, #1
 800ba74:	601a      	str	r2, [r3, #0]
}
 800ba76:	bf00      	nop
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	200011c4 	.word	0x200011c4

0800ba84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ba8c:	f000 f852 	bl	800bb34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ba90:	4b06      	ldr	r3, [pc, #24]	; (800baac <prvIdleTask+0x28>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d9f9      	bls.n	800ba8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <prvIdleTask+0x2c>)
 800ba9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba9e:	601a      	str	r2, [r3, #0]
 800baa0:	f3bf 8f4f 	dsb	sy
 800baa4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baa8:	e7f0      	b.n	800ba8c <prvIdleTask+0x8>
 800baaa:	bf00      	nop
 800baac:	20000ce0 	.word	0x20000ce0
 800bab0:	e000ed04 	.word	0xe000ed04

0800bab4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800baba:	2300      	movs	r3, #0
 800babc:	607b      	str	r3, [r7, #4]
 800babe:	e00c      	b.n	800bada <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	4a12      	ldr	r2, [pc, #72]	; (800bb14 <prvInitialiseTaskLists+0x60>)
 800bacc:	4413      	add	r3, r2
 800bace:	4618      	mov	r0, r3
 800bad0:	f7fe f90a 	bl	8009ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	3301      	adds	r3, #1
 800bad8:	607b      	str	r3, [r7, #4]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2b37      	cmp	r3, #55	; 0x37
 800bade:	d9ef      	bls.n	800bac0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bae0:	480d      	ldr	r0, [pc, #52]	; (800bb18 <prvInitialiseTaskLists+0x64>)
 800bae2:	f7fe f901 	bl	8009ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bae6:	480d      	ldr	r0, [pc, #52]	; (800bb1c <prvInitialiseTaskLists+0x68>)
 800bae8:	f7fe f8fe 	bl	8009ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800baec:	480c      	ldr	r0, [pc, #48]	; (800bb20 <prvInitialiseTaskLists+0x6c>)
 800baee:	f7fe f8fb 	bl	8009ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800baf2:	480c      	ldr	r0, [pc, #48]	; (800bb24 <prvInitialiseTaskLists+0x70>)
 800baf4:	f7fe f8f8 	bl	8009ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800baf8:	480b      	ldr	r0, [pc, #44]	; (800bb28 <prvInitialiseTaskLists+0x74>)
 800bafa:	f7fe f8f5 	bl	8009ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bafe:	4b0b      	ldr	r3, [pc, #44]	; (800bb2c <prvInitialiseTaskLists+0x78>)
 800bb00:	4a05      	ldr	r2, [pc, #20]	; (800bb18 <prvInitialiseTaskLists+0x64>)
 800bb02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb04:	4b0a      	ldr	r3, [pc, #40]	; (800bb30 <prvInitialiseTaskLists+0x7c>)
 800bb06:	4a05      	ldr	r2, [pc, #20]	; (800bb1c <prvInitialiseTaskLists+0x68>)
 800bb08:	601a      	str	r2, [r3, #0]
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}
 800bb12:	bf00      	nop
 800bb14:	20000ce0 	.word	0x20000ce0
 800bb18:	20001140 	.word	0x20001140
 800bb1c:	20001154 	.word	0x20001154
 800bb20:	20001170 	.word	0x20001170
 800bb24:	20001184 	.word	0x20001184
 800bb28:	2000119c 	.word	0x2000119c
 800bb2c:	20001168 	.word	0x20001168
 800bb30:	2000116c 	.word	0x2000116c

0800bb34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b082      	sub	sp, #8
 800bb38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb3a:	e019      	b.n	800bb70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb3c:	f000 ff0a 	bl	800c954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb40:	4b10      	ldr	r3, [pc, #64]	; (800bb84 <prvCheckTasksWaitingTermination+0x50>)
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	68db      	ldr	r3, [r3, #12]
 800bb46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f7fe f955 	bl	8009dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb52:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <prvCheckTasksWaitingTermination+0x54>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	3b01      	subs	r3, #1
 800bb58:	4a0b      	ldr	r2, [pc, #44]	; (800bb88 <prvCheckTasksWaitingTermination+0x54>)
 800bb5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bb5c:	4b0b      	ldr	r3, [pc, #44]	; (800bb8c <prvCheckTasksWaitingTermination+0x58>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	4a0a      	ldr	r2, [pc, #40]	; (800bb8c <prvCheckTasksWaitingTermination+0x58>)
 800bb64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bb66:	f000 ff25 	bl	800c9b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f810 	bl	800bb90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb70:	4b06      	ldr	r3, [pc, #24]	; (800bb8c <prvCheckTasksWaitingTermination+0x58>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1e1      	bne.n	800bb3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bb78:	bf00      	nop
 800bb7a:	bf00      	nop
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
 800bb82:	bf00      	nop
 800bb84:	20001184 	.word	0x20001184
 800bb88:	200011b0 	.word	0x200011b0
 800bb8c:	20001198 	.word	0x20001198

0800bb90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b084      	sub	sp, #16
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	3354      	adds	r3, #84	; 0x54
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	f001 fced 	bl	800d57c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d108      	bne.n	800bbbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f001 f8bd 	bl	800cd30 <vPortFree>
				vPortFree( pxTCB );
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f001 f8ba 	bl	800cd30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbbc:	e018      	b.n	800bbf0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bbc4:	2b01      	cmp	r3, #1
 800bbc6:	d103      	bne.n	800bbd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f001 f8b1 	bl	800cd30 <vPortFree>
	}
 800bbce:	e00f      	b.n	800bbf0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d00a      	beq.n	800bbf0 <prvDeleteTCB+0x60>
	__asm volatile
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	60fb      	str	r3, [r7, #12]
}
 800bbec:	bf00      	nop
 800bbee:	e7fe      	b.n	800bbee <prvDeleteTCB+0x5e>
	}
 800bbf0:	bf00      	nop
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bbfe:	4b0c      	ldr	r3, [pc, #48]	; (800bc30 <prvResetNextTaskUnblockTime+0x38>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d104      	bne.n	800bc12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <prvResetNextTaskUnblockTime+0x3c>)
 800bc0a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc10:	e008      	b.n	800bc24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc12:	4b07      	ldr	r3, [pc, #28]	; (800bc30 <prvResetNextTaskUnblockTime+0x38>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	68db      	ldr	r3, [r3, #12]
 800bc1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	4a04      	ldr	r2, [pc, #16]	; (800bc34 <prvResetNextTaskUnblockTime+0x3c>)
 800bc22:	6013      	str	r3, [r2, #0]
}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	20001168 	.word	0x20001168
 800bc34:	200011d0 	.word	0x200011d0

0800bc38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <xTaskGetSchedulerState+0x34>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d102      	bne.n	800bc4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc46:	2301      	movs	r3, #1
 800bc48:	607b      	str	r3, [r7, #4]
 800bc4a:	e008      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc4c:	4b08      	ldr	r3, [pc, #32]	; (800bc70 <xTaskGetSchedulerState+0x38>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc54:	2302      	movs	r3, #2
 800bc56:	607b      	str	r3, [r7, #4]
 800bc58:	e001      	b.n	800bc5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc5e:	687b      	ldr	r3, [r7, #4]
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	200011bc 	.word	0x200011bc
 800bc70:	200011d8 	.word	0x200011d8

0800bc74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d051      	beq.n	800bd2e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc8e:	4b2a      	ldr	r3, [pc, #168]	; (800bd38 <xTaskPriorityInherit+0xc4>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d241      	bcs.n	800bd1c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bc98:	68bb      	ldr	r3, [r7, #8]
 800bc9a:	699b      	ldr	r3, [r3, #24]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	db06      	blt.n	800bcae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bca0:	4b25      	ldr	r3, [pc, #148]	; (800bd38 <xTaskPriorityInherit+0xc4>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bca6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bcae:	68bb      	ldr	r3, [r7, #8]
 800bcb0:	6959      	ldr	r1, [r3, #20]
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb6:	4613      	mov	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4413      	add	r3, r2
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	4a1f      	ldr	r2, [pc, #124]	; (800bd3c <xTaskPriorityInherit+0xc8>)
 800bcc0:	4413      	add	r3, r2
 800bcc2:	4299      	cmp	r1, r3
 800bcc4:	d122      	bne.n	800bd0c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe f896 	bl	8009dfc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bcd0:	4b19      	ldr	r3, [pc, #100]	; (800bd38 <xTaskPriorityInherit+0xc4>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcde:	4b18      	ldr	r3, [pc, #96]	; (800bd40 <xTaskPriorityInherit+0xcc>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d903      	bls.n	800bcee <xTaskPriorityInherit+0x7a>
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcea:	4a15      	ldr	r2, [pc, #84]	; (800bd40 <xTaskPriorityInherit+0xcc>)
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	68bb      	ldr	r3, [r7, #8]
 800bcf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	009b      	lsls	r3, r3, #2
 800bcf6:	4413      	add	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4a10      	ldr	r2, [pc, #64]	; (800bd3c <xTaskPriorityInherit+0xc8>)
 800bcfc:	441a      	add	r2, r3
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	3304      	adds	r3, #4
 800bd02:	4619      	mov	r1, r3
 800bd04:	4610      	mov	r0, r2
 800bd06:	f7fe f81c 	bl	8009d42 <vListInsertEnd>
 800bd0a:	e004      	b.n	800bd16 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bd0c:	4b0a      	ldr	r3, [pc, #40]	; (800bd38 <xTaskPriorityInherit+0xc4>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bd16:	2301      	movs	r3, #1
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	e008      	b.n	800bd2e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd20:	4b05      	ldr	r3, [pc, #20]	; (800bd38 <xTaskPriorityInherit+0xc4>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d201      	bcs.n	800bd2e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
	}
 800bd30:	4618      	mov	r0, r3
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	20000cdc 	.word	0x20000cdc
 800bd3c:	20000ce0 	.word	0x20000ce0
 800bd40:	200011b8 	.word	0x200011b8

0800bd44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b086      	sub	sp, #24
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bd50:	2300      	movs	r3, #0
 800bd52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d056      	beq.n	800be08 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bd5a:	4b2e      	ldr	r3, [pc, #184]	; (800be14 <xTaskPriorityDisinherit+0xd0>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d00a      	beq.n	800bd7a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bd64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd68:	f383 8811 	msr	BASEPRI, r3
 800bd6c:	f3bf 8f6f 	isb	sy
 800bd70:	f3bf 8f4f 	dsb	sy
 800bd74:	60fb      	str	r3, [r7, #12]
}
 800bd76:	bf00      	nop
 800bd78:	e7fe      	b.n	800bd78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10a      	bne.n	800bd98 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	60bb      	str	r3, [r7, #8]
}
 800bd94:	bf00      	nop
 800bd96:	e7fe      	b.n	800bd96 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bd98:	693b      	ldr	r3, [r7, #16]
 800bd9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd9c:	1e5a      	subs	r2, r3, #1
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d02c      	beq.n	800be08 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d128      	bne.n	800be08 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7fe f81e 	bl	8009dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdcc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bdd4:	693b      	ldr	r3, [r7, #16]
 800bdd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd8:	4b0f      	ldr	r3, [pc, #60]	; (800be18 <xTaskPriorityDisinherit+0xd4>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	429a      	cmp	r2, r3
 800bdde:	d903      	bls.n	800bde8 <xTaskPriorityDisinherit+0xa4>
 800bde0:	693b      	ldr	r3, [r7, #16]
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	4a0c      	ldr	r2, [pc, #48]	; (800be18 <xTaskPriorityDisinherit+0xd4>)
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4a09      	ldr	r2, [pc, #36]	; (800be1c <xTaskPriorityDisinherit+0xd8>)
 800bdf6:	441a      	add	r2, r3
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4610      	mov	r0, r2
 800be00:	f7fd ff9f 	bl	8009d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800be04:	2301      	movs	r3, #1
 800be06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be08:	697b      	ldr	r3, [r7, #20]
	}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3718      	adds	r7, #24
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}
 800be12:	bf00      	nop
 800be14:	20000cdc 	.word	0x20000cdc
 800be18:	200011b8 	.word	0x200011b8
 800be1c:	20000ce0 	.word	0x20000ce0

0800be20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800be20:	b580      	push	{r7, lr}
 800be22:	b088      	sub	sp, #32
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800be2e:	2301      	movs	r3, #1
 800be30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d06a      	beq.n	800bf0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d10a      	bne.n	800be56 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800be40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	60fb      	str	r3, [r7, #12]
}
 800be52:	bf00      	nop
 800be54:	e7fe      	b.n	800be54 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800be56:	69bb      	ldr	r3, [r7, #24]
 800be58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be5a:	683a      	ldr	r2, [r7, #0]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d902      	bls.n	800be66 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e002      	b.n	800be6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800be66:	69bb      	ldr	r3, [r7, #24]
 800be68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be6a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800be6c:	69bb      	ldr	r3, [r7, #24]
 800be6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be70:	69fa      	ldr	r2, [r7, #28]
 800be72:	429a      	cmp	r2, r3
 800be74:	d04b      	beq.n	800bf0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800be76:	69bb      	ldr	r3, [r7, #24]
 800be78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be7a:	697a      	ldr	r2, [r7, #20]
 800be7c:	429a      	cmp	r2, r3
 800be7e:	d146      	bne.n	800bf0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800be80:	4b25      	ldr	r3, [pc, #148]	; (800bf18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	69ba      	ldr	r2, [r7, #24]
 800be86:	429a      	cmp	r2, r3
 800be88:	d10a      	bne.n	800bea0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800be8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8e:	f383 8811 	msr	BASEPRI, r3
 800be92:	f3bf 8f6f 	isb	sy
 800be96:	f3bf 8f4f 	dsb	sy
 800be9a:	60bb      	str	r3, [r7, #8]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bea6:	69bb      	ldr	r3, [r7, #24]
 800bea8:	69fa      	ldr	r2, [r7, #28]
 800beaa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	699b      	ldr	r3, [r3, #24]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	db04      	blt.n	800bebe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb4:	69fb      	ldr	r3, [r7, #28]
 800beb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800beba:	69bb      	ldr	r3, [r7, #24]
 800bebc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	6959      	ldr	r1, [r3, #20]
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4613      	mov	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	4413      	add	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4a13      	ldr	r2, [pc, #76]	; (800bf1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bece:	4413      	add	r3, r2
 800bed0:	4299      	cmp	r1, r3
 800bed2:	d11c      	bne.n	800bf0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bed4:	69bb      	ldr	r3, [r7, #24]
 800bed6:	3304      	adds	r3, #4
 800bed8:	4618      	mov	r0, r3
 800beda:	f7fd ff8f 	bl	8009dfc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bede:	69bb      	ldr	r3, [r7, #24]
 800bee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bee2:	4b0f      	ldr	r3, [pc, #60]	; (800bf20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d903      	bls.n	800bef2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800beea:	69bb      	ldr	r3, [r7, #24]
 800beec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beee:	4a0c      	ldr	r2, [pc, #48]	; (800bf20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	69bb      	ldr	r3, [r7, #24]
 800bef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef6:	4613      	mov	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	4413      	add	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4a07      	ldr	r2, [pc, #28]	; (800bf1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bf00:	441a      	add	r2, r3
 800bf02:	69bb      	ldr	r3, [r7, #24]
 800bf04:	3304      	adds	r3, #4
 800bf06:	4619      	mov	r1, r3
 800bf08:	4610      	mov	r0, r2
 800bf0a:	f7fd ff1a 	bl	8009d42 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bf0e:	bf00      	nop
 800bf10:	3720      	adds	r7, #32
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20000cdc 	.word	0x20000cdc
 800bf1c:	20000ce0 	.word	0x20000ce0
 800bf20:	200011b8 	.word	0x200011b8

0800bf24 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800bf24:	b480      	push	{r7}
 800bf26:	b083      	sub	sp, #12
 800bf28:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800bf2a:	4b09      	ldr	r3, [pc, #36]	; (800bf50 <uxTaskResetEventItemValue+0x2c>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf32:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <uxTaskResetEventItemValue+0x2c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf38:	4b05      	ldr	r3, [pc, #20]	; (800bf50 <uxTaskResetEventItemValue+0x2c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800bf40:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800bf42:	687b      	ldr	r3, [r7, #4]
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	370c      	adds	r7, #12
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr
 800bf50:	20000cdc 	.word	0x20000cdc

0800bf54 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bf54:	b480      	push	{r7}
 800bf56:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bf58:	4b07      	ldr	r3, [pc, #28]	; (800bf78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d004      	beq.n	800bf6a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bf60:	4b05      	ldr	r3, [pc, #20]	; (800bf78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bf66:	3201      	adds	r2, #1
 800bf68:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800bf6a:	4b03      	ldr	r3, [pc, #12]	; (800bf78 <pvTaskIncrementMutexHeldCount+0x24>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
	}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	20000cdc 	.word	0x20000cdc

0800bf7c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bf86:	4b21      	ldr	r3, [pc, #132]	; (800c00c <prvAddCurrentTaskToDelayedList+0x90>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf8c:	4b20      	ldr	r3, [pc, #128]	; (800c010 <prvAddCurrentTaskToDelayedList+0x94>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	3304      	adds	r3, #4
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fd ff32 	bl	8009dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bf9e:	d10a      	bne.n	800bfb6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d007      	beq.n	800bfb6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfa6:	4b1a      	ldr	r3, [pc, #104]	; (800c010 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3304      	adds	r3, #4
 800bfac:	4619      	mov	r1, r3
 800bfae:	4819      	ldr	r0, [pc, #100]	; (800c014 <prvAddCurrentTaskToDelayedList+0x98>)
 800bfb0:	f7fd fec7 	bl	8009d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bfb4:	e026      	b.n	800c004 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bfb6:	68fa      	ldr	r2, [r7, #12]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4413      	add	r3, r2
 800bfbc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bfbe:	4b14      	ldr	r3, [pc, #80]	; (800c010 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	68ba      	ldr	r2, [r7, #8]
 800bfc4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d209      	bcs.n	800bfe2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfce:	4b12      	ldr	r3, [pc, #72]	; (800c018 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	4b0f      	ldr	r3, [pc, #60]	; (800c010 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	3304      	adds	r3, #4
 800bfd8:	4619      	mov	r1, r3
 800bfda:	4610      	mov	r0, r2
 800bfdc:	f7fd fed5 	bl	8009d8a <vListInsert>
}
 800bfe0:	e010      	b.n	800c004 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bfe2:	4b0e      	ldr	r3, [pc, #56]	; (800c01c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bfe4:	681a      	ldr	r2, [r3, #0]
 800bfe6:	4b0a      	ldr	r3, [pc, #40]	; (800c010 <prvAddCurrentTaskToDelayedList+0x94>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	3304      	adds	r3, #4
 800bfec:	4619      	mov	r1, r3
 800bfee:	4610      	mov	r0, r2
 800bff0:	f7fd fecb 	bl	8009d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bff4:	4b0a      	ldr	r3, [pc, #40]	; (800c020 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d202      	bcs.n	800c004 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bffe:	4a08      	ldr	r2, [pc, #32]	; (800c020 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	6013      	str	r3, [r2, #0]
}
 800c004:	bf00      	nop
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	200011b4 	.word	0x200011b4
 800c010:	20000cdc 	.word	0x20000cdc
 800c014:	2000119c 	.word	0x2000119c
 800c018:	2000116c 	.word	0x2000116c
 800c01c:	20001168 	.word	0x20001168
 800c020:	200011d0 	.word	0x200011d0

0800c024 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08a      	sub	sp, #40	; 0x28
 800c028:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c02e:	f000 fb07 	bl	800c640 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c032:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <xTimerCreateTimerTask+0x80>)
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d021      	beq.n	800c07e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c03a:	2300      	movs	r3, #0
 800c03c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c03e:	2300      	movs	r3, #0
 800c040:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c042:	1d3a      	adds	r2, r7, #4
 800c044:	f107 0108 	add.w	r1, r7, #8
 800c048:	f107 030c 	add.w	r3, r7, #12
 800c04c:	4618      	mov	r0, r3
 800c04e:	f7fd fc43 	bl	80098d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c052:	6879      	ldr	r1, [r7, #4]
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	9202      	str	r2, [sp, #8]
 800c05a:	9301      	str	r3, [sp, #4]
 800c05c:	2302      	movs	r3, #2
 800c05e:	9300      	str	r3, [sp, #0]
 800c060:	2300      	movs	r3, #0
 800c062:	460a      	mov	r2, r1
 800c064:	4910      	ldr	r1, [pc, #64]	; (800c0a8 <xTimerCreateTimerTask+0x84>)
 800c066:	4811      	ldr	r0, [pc, #68]	; (800c0ac <xTimerCreateTimerTask+0x88>)
 800c068:	f7fe ff00 	bl	800ae6c <xTaskCreateStatic>
 800c06c:	4603      	mov	r3, r0
 800c06e:	4a10      	ldr	r2, [pc, #64]	; (800c0b0 <xTimerCreateTimerTask+0x8c>)
 800c070:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c072:	4b0f      	ldr	r3, [pc, #60]	; (800c0b0 <xTimerCreateTimerTask+0x8c>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c07a:	2301      	movs	r3, #1
 800c07c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c07e:	697b      	ldr	r3, [r7, #20]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d10a      	bne.n	800c09a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	613b      	str	r3, [r7, #16]
}
 800c096:	bf00      	nop
 800c098:	e7fe      	b.n	800c098 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c09a:	697b      	ldr	r3, [r7, #20]
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3718      	adds	r7, #24
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	2000120c 	.word	0x2000120c
 800c0a8:	0800deac 	.word	0x0800deac
 800c0ac:	0800c1e9 	.word	0x0800c1e9
 800c0b0:	20001210 	.word	0x20001210

0800c0b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08a      	sub	sp, #40	; 0x28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d10a      	bne.n	800c0e2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	623b      	str	r3, [r7, #32]
}
 800c0de:	bf00      	nop
 800c0e0:	e7fe      	b.n	800c0e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <xTimerGenericCommand+0x98>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d02a      	beq.n	800c140 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	2b05      	cmp	r3, #5
 800c0fa:	dc18      	bgt.n	800c12e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c0fc:	f7ff fd9c 	bl	800bc38 <xTaskGetSchedulerState>
 800c100:	4603      	mov	r3, r0
 800c102:	2b02      	cmp	r3, #2
 800c104:	d109      	bne.n	800c11a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c106:	4b11      	ldr	r3, [pc, #68]	; (800c14c <xTimerGenericCommand+0x98>)
 800c108:	6818      	ldr	r0, [r3, #0]
 800c10a:	f107 0110 	add.w	r1, r7, #16
 800c10e:	2300      	movs	r3, #0
 800c110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c112:	f7fe f845 	bl	800a1a0 <xQueueGenericSend>
 800c116:	6278      	str	r0, [r7, #36]	; 0x24
 800c118:	e012      	b.n	800c140 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c11a:	4b0c      	ldr	r3, [pc, #48]	; (800c14c <xTimerGenericCommand+0x98>)
 800c11c:	6818      	ldr	r0, [r3, #0]
 800c11e:	f107 0110 	add.w	r1, r7, #16
 800c122:	2300      	movs	r3, #0
 800c124:	2200      	movs	r2, #0
 800c126:	f7fe f83b 	bl	800a1a0 <xQueueGenericSend>
 800c12a:	6278      	str	r0, [r7, #36]	; 0x24
 800c12c:	e008      	b.n	800c140 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c12e:	4b07      	ldr	r3, [pc, #28]	; (800c14c <xTimerGenericCommand+0x98>)
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f107 0110 	add.w	r1, r7, #16
 800c136:	2300      	movs	r3, #0
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	f7fe f92f 	bl	800a39c <xQueueGenericSendFromISR>
 800c13e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c142:	4618      	mov	r0, r3
 800c144:	3728      	adds	r7, #40	; 0x28
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	2000120c 	.word	0x2000120c

0800c150 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b088      	sub	sp, #32
 800c154:	af02      	add	r7, sp, #8
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c15a:	4b22      	ldr	r3, [pc, #136]	; (800c1e4 <prvProcessExpiredTimer+0x94>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	3304      	adds	r3, #4
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fd fe47 	bl	8009dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c174:	f003 0304 	and.w	r3, r3, #4
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d022      	beq.n	800c1c2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c17c:	697b      	ldr	r3, [r7, #20]
 800c17e:	699a      	ldr	r2, [r3, #24]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	18d1      	adds	r1, r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	683a      	ldr	r2, [r7, #0]
 800c188:	6978      	ldr	r0, [r7, #20]
 800c18a:	f000 f8d1 	bl	800c330 <prvInsertTimerInActiveList>
 800c18e:	4603      	mov	r3, r0
 800c190:	2b00      	cmp	r3, #0
 800c192:	d01f      	beq.n	800c1d4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c194:	2300      	movs	r3, #0
 800c196:	9300      	str	r3, [sp, #0]
 800c198:	2300      	movs	r3, #0
 800c19a:	687a      	ldr	r2, [r7, #4]
 800c19c:	2100      	movs	r1, #0
 800c19e:	6978      	ldr	r0, [r7, #20]
 800c1a0:	f7ff ff88 	bl	800c0b4 <xTimerGenericCommand>
 800c1a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d113      	bne.n	800c1d4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b0:	f383 8811 	msr	BASEPRI, r3
 800c1b4:	f3bf 8f6f 	isb	sy
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	60fb      	str	r3, [r7, #12]
}
 800c1be:	bf00      	nop
 800c1c0:	e7fe      	b.n	800c1c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c1c8:	f023 0301 	bic.w	r3, r3, #1
 800c1cc:	b2da      	uxtb	r2, r3
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	6a1b      	ldr	r3, [r3, #32]
 800c1d8:	6978      	ldr	r0, [r7, #20]
 800c1da:	4798      	blx	r3
}
 800c1dc:	bf00      	nop
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	20001204 	.word	0x20001204

0800c1e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c1f0:	f107 0308 	add.w	r3, r7, #8
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f000 f857 	bl	800c2a8 <prvGetNextExpireTime>
 800c1fa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	4619      	mov	r1, r3
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f000 f803 	bl	800c20c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c206:	f000 f8d5 	bl	800c3b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c20a:	e7f1      	b.n	800c1f0 <prvTimerTask+0x8>

0800c20c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b084      	sub	sp, #16
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c216:	f7ff f885 	bl	800b324 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c21a:	f107 0308 	add.w	r3, r7, #8
 800c21e:	4618      	mov	r0, r3
 800c220:	f000 f866 	bl	800c2f0 <prvSampleTimeNow>
 800c224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d130      	bne.n	800c28e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10a      	bne.n	800c248 <prvProcessTimerOrBlockTask+0x3c>
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	429a      	cmp	r2, r3
 800c238:	d806      	bhi.n	800c248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c23a:	f7ff f881 	bl	800b340 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c23e:	68f9      	ldr	r1, [r7, #12]
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f7ff ff85 	bl	800c150 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c246:	e024      	b.n	800c292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d008      	beq.n	800c260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c24e:	4b13      	ldr	r3, [pc, #76]	; (800c29c <prvProcessTimerOrBlockTask+0x90>)
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <prvProcessTimerOrBlockTask+0x50>
 800c258:	2301      	movs	r3, #1
 800c25a:	e000      	b.n	800c25e <prvProcessTimerOrBlockTask+0x52>
 800c25c:	2300      	movs	r3, #0
 800c25e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <prvProcessTimerOrBlockTask+0x94>)
 800c262:	6818      	ldr	r0, [r3, #0]
 800c264:	687a      	ldr	r2, [r7, #4]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	4619      	mov	r1, r3
 800c26e:	f7fe fdc9 	bl	800ae04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c272:	f7ff f865 	bl	800b340 <xTaskResumeAll>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d10a      	bne.n	800c292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c27c:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <prvProcessTimerOrBlockTask+0x98>)
 800c27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c282:	601a      	str	r2, [r3, #0]
 800c284:	f3bf 8f4f 	dsb	sy
 800c288:	f3bf 8f6f 	isb	sy
}
 800c28c:	e001      	b.n	800c292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c28e:	f7ff f857 	bl	800b340 <xTaskResumeAll>
}
 800c292:	bf00      	nop
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	20001208 	.word	0x20001208
 800c2a0:	2000120c 	.word	0x2000120c
 800c2a4:	e000ed04 	.word	0xe000ed04

0800c2a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c2b0:	4b0e      	ldr	r3, [pc, #56]	; (800c2ec <prvGetNextExpireTime+0x44>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d101      	bne.n	800c2be <prvGetNextExpireTime+0x16>
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	e000      	b.n	800c2c0 <prvGetNextExpireTime+0x18>
 800c2be:	2200      	movs	r2, #0
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d105      	bne.n	800c2d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2cc:	4b07      	ldr	r3, [pc, #28]	; (800c2ec <prvGetNextExpireTime+0x44>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	60fb      	str	r3, [r7, #12]
 800c2d6:	e001      	b.n	800c2dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c2d8:	2300      	movs	r3, #0
 800c2da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3714      	adds	r7, #20
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	20001204 	.word	0x20001204

0800c2f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c2f8:	f7ff f8c0 	bl	800b47c <xTaskGetTickCount>
 800c2fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c2fe:	4b0b      	ldr	r3, [pc, #44]	; (800c32c <prvSampleTimeNow+0x3c>)
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	429a      	cmp	r2, r3
 800c306:	d205      	bcs.n	800c314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c308:	f000 f936 	bl	800c578 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	e002      	b.n	800c31a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c31a:	4a04      	ldr	r2, [pc, #16]	; (800c32c <prvSampleTimeNow+0x3c>)
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c320:	68fb      	ldr	r3, [r7, #12]
}
 800c322:	4618      	mov	r0, r3
 800c324:	3710      	adds	r7, #16
 800c326:	46bd      	mov	sp, r7
 800c328:	bd80      	pop	{r7, pc}
 800c32a:	bf00      	nop
 800c32c:	20001214 	.word	0x20001214

0800c330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b086      	sub	sp, #24
 800c334:	af00      	add	r7, sp, #0
 800c336:	60f8      	str	r0, [r7, #12]
 800c338:	60b9      	str	r1, [r7, #8]
 800c33a:	607a      	str	r2, [r7, #4]
 800c33c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	68fa      	ldr	r2, [r7, #12]
 800c34c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d812      	bhi.n	800c37c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	1ad2      	subs	r2, r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	699b      	ldr	r3, [r3, #24]
 800c360:	429a      	cmp	r2, r3
 800c362:	d302      	bcc.n	800c36a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c364:	2301      	movs	r3, #1
 800c366:	617b      	str	r3, [r7, #20]
 800c368:	e01b      	b.n	800c3a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c36a:	4b10      	ldr	r3, [pc, #64]	; (800c3ac <prvInsertTimerInActiveList+0x7c>)
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3304      	adds	r3, #4
 800c372:	4619      	mov	r1, r3
 800c374:	4610      	mov	r0, r2
 800c376:	f7fd fd08 	bl	8009d8a <vListInsert>
 800c37a:	e012      	b.n	800c3a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	429a      	cmp	r2, r3
 800c382:	d206      	bcs.n	800c392 <prvInsertTimerInActiveList+0x62>
 800c384:	68ba      	ldr	r2, [r7, #8]
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	429a      	cmp	r2, r3
 800c38a:	d302      	bcc.n	800c392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c38c:	2301      	movs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	e007      	b.n	800c3a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c392:	4b07      	ldr	r3, [pc, #28]	; (800c3b0 <prvInsertTimerInActiveList+0x80>)
 800c394:	681a      	ldr	r2, [r3, #0]
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3304      	adds	r3, #4
 800c39a:	4619      	mov	r1, r3
 800c39c:	4610      	mov	r0, r2
 800c39e:	f7fd fcf4 	bl	8009d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c3a2:	697b      	ldr	r3, [r7, #20]
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3718      	adds	r7, #24
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	20001208 	.word	0x20001208
 800c3b0:	20001204 	.word	0x20001204

0800c3b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b08e      	sub	sp, #56	; 0x38
 800c3b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c3ba:	e0ca      	b.n	800c552 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	da18      	bge.n	800c3f4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c3c2:	1d3b      	adds	r3, r7, #4
 800c3c4:	3304      	adds	r3, #4
 800c3c6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	61fb      	str	r3, [r7, #28]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ea:	6850      	ldr	r0, [r2, #4]
 800c3ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3ee:	6892      	ldr	r2, [r2, #8]
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f2c0 80aa 	blt.w	800c550 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c402:	695b      	ldr	r3, [r3, #20]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d004      	beq.n	800c412 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c40a:	3304      	adds	r3, #4
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fcf5 	bl	8009dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c412:	463b      	mov	r3, r7
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff ff6b 	bl	800c2f0 <prvSampleTimeNow>
 800c41a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2b09      	cmp	r3, #9
 800c420:	f200 8097 	bhi.w	800c552 <prvProcessReceivedCommands+0x19e>
 800c424:	a201      	add	r2, pc, #4	; (adr r2, 800c42c <prvProcessReceivedCommands+0x78>)
 800c426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c42a:	bf00      	nop
 800c42c:	0800c455 	.word	0x0800c455
 800c430:	0800c455 	.word	0x0800c455
 800c434:	0800c455 	.word	0x0800c455
 800c438:	0800c4c9 	.word	0x0800c4c9
 800c43c:	0800c4dd 	.word	0x0800c4dd
 800c440:	0800c527 	.word	0x0800c527
 800c444:	0800c455 	.word	0x0800c455
 800c448:	0800c455 	.word	0x0800c455
 800c44c:	0800c4c9 	.word	0x0800c4c9
 800c450:	0800c4dd 	.word	0x0800c4dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c45a:	f043 0301 	orr.w	r3, r3, #1
 800c45e:	b2da      	uxtb	r2, r3
 800c460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c466:	68ba      	ldr	r2, [r7, #8]
 800c468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c46a:	699b      	ldr	r3, [r3, #24]
 800c46c:	18d1      	adds	r1, r2, r3
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c474:	f7ff ff5c 	bl	800c330 <prvInsertTimerInActiveList>
 800c478:	4603      	mov	r3, r0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d069      	beq.n	800c552 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	6a1b      	ldr	r3, [r3, #32]
 800c482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c484:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c48c:	f003 0304 	and.w	r3, r3, #4
 800c490:	2b00      	cmp	r3, #0
 800c492:	d05e      	beq.n	800c552 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c498:	699b      	ldr	r3, [r3, #24]
 800c49a:	441a      	add	r2, r3
 800c49c:	2300      	movs	r3, #0
 800c49e:	9300      	str	r3, [sp, #0]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	2100      	movs	r1, #0
 800c4a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c4a6:	f7ff fe05 	bl	800c0b4 <xTimerGenericCommand>
 800c4aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c4ac:	6a3b      	ldr	r3, [r7, #32]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d14f      	bne.n	800c552 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	61bb      	str	r3, [r7, #24]
}
 800c4c4:	bf00      	nop
 800c4c6:	e7fe      	b.n	800c4c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4ce:	f023 0301 	bic.w	r3, r3, #1
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c4da:	e03a      	b.n	800c552 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c4e2:	f043 0301 	orr.w	r3, r3, #1
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c4ee:	68ba      	ldr	r2, [r7, #8]
 800c4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d10a      	bne.n	800c512 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c4fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c500:	f383 8811 	msr	BASEPRI, r3
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	f3bf 8f4f 	dsb	sy
 800c50c:	617b      	str	r3, [r7, #20]
}
 800c50e:	bf00      	nop
 800c510:	e7fe      	b.n	800c510 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c514:	699a      	ldr	r2, [r3, #24]
 800c516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c518:	18d1      	adds	r1, r2, r3
 800c51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c520:	f7ff ff06 	bl	800c330 <prvInsertTimerInActiveList>
					break;
 800c524:	e015      	b.n	800c552 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c52c:	f003 0302 	and.w	r3, r3, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d103      	bne.n	800c53c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c536:	f000 fbfb 	bl	800cd30 <vPortFree>
 800c53a:	e00a      	b.n	800c552 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c53e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c542:	f023 0301 	bic.w	r3, r3, #1
 800c546:	b2da      	uxtb	r2, r3
 800c548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c54e:	e000      	b.n	800c552 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c550:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c552:	4b08      	ldr	r3, [pc, #32]	; (800c574 <prvProcessReceivedCommands+0x1c0>)
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	1d39      	adds	r1, r7, #4
 800c558:	2200      	movs	r2, #0
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7fe f846 	bl	800a5ec <xQueueReceive>
 800c560:	4603      	mov	r3, r0
 800c562:	2b00      	cmp	r3, #0
 800c564:	f47f af2a 	bne.w	800c3bc <prvProcessReceivedCommands+0x8>
	}
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	3730      	adds	r7, #48	; 0x30
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	2000120c 	.word	0x2000120c

0800c578 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c57e:	e048      	b.n	800c612 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c580:	4b2d      	ldr	r3, [pc, #180]	; (800c638 <prvSwitchTimerLists+0xc0>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c58a:	4b2b      	ldr	r3, [pc, #172]	; (800c638 <prvSwitchTimerLists+0xc0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	68db      	ldr	r3, [r3, #12]
 800c590:	68db      	ldr	r3, [r3, #12]
 800c592:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	3304      	adds	r3, #4
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fd fc2f 	bl	8009dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6a1b      	ldr	r3, [r3, #32]
 800c5a2:	68f8      	ldr	r0, [r7, #12]
 800c5a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d02e      	beq.n	800c612 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	693a      	ldr	r2, [r7, #16]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c5be:	68ba      	ldr	r2, [r7, #8]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d90e      	bls.n	800c5e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	68fa      	ldr	r2, [r7, #12]
 800c5d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c5d2:	4b19      	ldr	r3, [pc, #100]	; (800c638 <prvSwitchTimerLists+0xc0>)
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4610      	mov	r0, r2
 800c5de:	f7fd fbd4 	bl	8009d8a <vListInsert>
 800c5e2:	e016      	b.n	800c612 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	693a      	ldr	r2, [r7, #16]
 800c5ec:	2100      	movs	r1, #0
 800c5ee:	68f8      	ldr	r0, [r7, #12]
 800c5f0:	f7ff fd60 	bl	800c0b4 <xTimerGenericCommand>
 800c5f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d10a      	bne.n	800c612 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	603b      	str	r3, [r7, #0]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c612:	4b09      	ldr	r3, [pc, #36]	; (800c638 <prvSwitchTimerLists+0xc0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d1b1      	bne.n	800c580 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c61c:	4b06      	ldr	r3, [pc, #24]	; (800c638 <prvSwitchTimerLists+0xc0>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c622:	4b06      	ldr	r3, [pc, #24]	; (800c63c <prvSwitchTimerLists+0xc4>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a04      	ldr	r2, [pc, #16]	; (800c638 <prvSwitchTimerLists+0xc0>)
 800c628:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c62a:	4a04      	ldr	r2, [pc, #16]	; (800c63c <prvSwitchTimerLists+0xc4>)
 800c62c:	697b      	ldr	r3, [r7, #20]
 800c62e:	6013      	str	r3, [r2, #0]
}
 800c630:	bf00      	nop
 800c632:	3718      	adds	r7, #24
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20001204 	.word	0x20001204
 800c63c:	20001208 	.word	0x20001208

0800c640 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c646:	f000 f985 	bl	800c954 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c64a:	4b15      	ldr	r3, [pc, #84]	; (800c6a0 <prvCheckForValidListAndQueue+0x60>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d120      	bne.n	800c694 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c652:	4814      	ldr	r0, [pc, #80]	; (800c6a4 <prvCheckForValidListAndQueue+0x64>)
 800c654:	f7fd fb48 	bl	8009ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c658:	4813      	ldr	r0, [pc, #76]	; (800c6a8 <prvCheckForValidListAndQueue+0x68>)
 800c65a:	f7fd fb45 	bl	8009ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c65e:	4b13      	ldr	r3, [pc, #76]	; (800c6ac <prvCheckForValidListAndQueue+0x6c>)
 800c660:	4a10      	ldr	r2, [pc, #64]	; (800c6a4 <prvCheckForValidListAndQueue+0x64>)
 800c662:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c664:	4b12      	ldr	r3, [pc, #72]	; (800c6b0 <prvCheckForValidListAndQueue+0x70>)
 800c666:	4a10      	ldr	r2, [pc, #64]	; (800c6a8 <prvCheckForValidListAndQueue+0x68>)
 800c668:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c66a:	2300      	movs	r3, #0
 800c66c:	9300      	str	r3, [sp, #0]
 800c66e:	4b11      	ldr	r3, [pc, #68]	; (800c6b4 <prvCheckForValidListAndQueue+0x74>)
 800c670:	4a11      	ldr	r2, [pc, #68]	; (800c6b8 <prvCheckForValidListAndQueue+0x78>)
 800c672:	2110      	movs	r1, #16
 800c674:	200a      	movs	r0, #10
 800c676:	f7fd fc53 	bl	8009f20 <xQueueGenericCreateStatic>
 800c67a:	4603      	mov	r3, r0
 800c67c:	4a08      	ldr	r2, [pc, #32]	; (800c6a0 <prvCheckForValidListAndQueue+0x60>)
 800c67e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c680:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <prvCheckForValidListAndQueue+0x60>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d005      	beq.n	800c694 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c688:	4b05      	ldr	r3, [pc, #20]	; (800c6a0 <prvCheckForValidListAndQueue+0x60>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	490b      	ldr	r1, [pc, #44]	; (800c6bc <prvCheckForValidListAndQueue+0x7c>)
 800c68e:	4618      	mov	r0, r3
 800c690:	f7fe fb64 	bl	800ad5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c694:	f000 f98e 	bl	800c9b4 <vPortExitCritical>
}
 800c698:	bf00      	nop
 800c69a:	46bd      	mov	sp, r7
 800c69c:	bd80      	pop	{r7, pc}
 800c69e:	bf00      	nop
 800c6a0:	2000120c 	.word	0x2000120c
 800c6a4:	200011dc 	.word	0x200011dc
 800c6a8:	200011f0 	.word	0x200011f0
 800c6ac:	20001204 	.word	0x20001204
 800c6b0:	20001208 	.word	0x20001208
 800c6b4:	200012b8 	.word	0x200012b8
 800c6b8:	20001218 	.word	0x20001218
 800c6bc:	0800deb4 	.word	0x0800deb4

0800c6c0 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08a      	sub	sp, #40	; 0x28
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	607a      	str	r2, [r7, #4]
 800c6cc:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800c6ce:	f06f 0301 	mvn.w	r3, #1
 800c6d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800c6d8:	68bb      	ldr	r3, [r7, #8]
 800c6da:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c6e0:	4b06      	ldr	r3, [pc, #24]	; (800c6fc <xTimerPendFunctionCallFromISR+0x3c>)
 800c6e2:	6818      	ldr	r0, [r3, #0]
 800c6e4:	f107 0114 	add.w	r1, r7, #20
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	683a      	ldr	r2, [r7, #0]
 800c6ec:	f7fd fe56 	bl	800a39c <xQueueGenericSendFromISR>
 800c6f0:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800c6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	3728      	adds	r7, #40	; 0x28
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	2000120c 	.word	0x2000120c

0800c700 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c700:	b480      	push	{r7}
 800c702:	b085      	sub	sp, #20
 800c704:	af00      	add	r7, sp, #0
 800c706:	60f8      	str	r0, [r7, #12]
 800c708:	60b9      	str	r1, [r7, #8]
 800c70a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	3b04      	subs	r3, #4
 800c710:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c718:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	3b04      	subs	r3, #4
 800c71e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	f023 0201 	bic.w	r2, r3, #1
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3b04      	subs	r3, #4
 800c72e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c730:	4a0c      	ldr	r2, [pc, #48]	; (800c764 <pxPortInitialiseStack+0x64>)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	3b14      	subs	r3, #20
 800c73a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	3b04      	subs	r3, #4
 800c746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	f06f 0202 	mvn.w	r2, #2
 800c74e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	3b20      	subs	r3, #32
 800c754:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c756:	68fb      	ldr	r3, [r7, #12]
}
 800c758:	4618      	mov	r0, r3
 800c75a:	3714      	adds	r7, #20
 800c75c:	46bd      	mov	sp, r7
 800c75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c762:	4770      	bx	lr
 800c764:	0800c769 	.word	0x0800c769

0800c768 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c768:	b480      	push	{r7}
 800c76a:	b085      	sub	sp, #20
 800c76c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c772:	4b12      	ldr	r3, [pc, #72]	; (800c7bc <prvTaskExitError+0x54>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c77a:	d00a      	beq.n	800c792 <prvTaskExitError+0x2a>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	60fb      	str	r3, [r7, #12]
}
 800c78e:	bf00      	nop
 800c790:	e7fe      	b.n	800c790 <prvTaskExitError+0x28>
	__asm volatile
 800c792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c796:	f383 8811 	msr	BASEPRI, r3
 800c79a:	f3bf 8f6f 	isb	sy
 800c79e:	f3bf 8f4f 	dsb	sy
 800c7a2:	60bb      	str	r3, [r7, #8]
}
 800c7a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7a6:	bf00      	nop
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d0fc      	beq.n	800c7a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7ae:	bf00      	nop
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr
 800c7bc:	2000001c 	.word	0x2000001c

0800c7c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7c0:	4b07      	ldr	r3, [pc, #28]	; (800c7e0 <pxCurrentTCBConst2>)
 800c7c2:	6819      	ldr	r1, [r3, #0]
 800c7c4:	6808      	ldr	r0, [r1, #0]
 800c7c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7ca:	f380 8809 	msr	PSP, r0
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f04f 0000 	mov.w	r0, #0
 800c7d6:	f380 8811 	msr	BASEPRI, r0
 800c7da:	4770      	bx	lr
 800c7dc:	f3af 8000 	nop.w

0800c7e0 <pxCurrentTCBConst2>:
 800c7e0:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7e4:	bf00      	nop
 800c7e6:	bf00      	nop

0800c7e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7e8:	4808      	ldr	r0, [pc, #32]	; (800c80c <prvPortStartFirstTask+0x24>)
 800c7ea:	6800      	ldr	r0, [r0, #0]
 800c7ec:	6800      	ldr	r0, [r0, #0]
 800c7ee:	f380 8808 	msr	MSP, r0
 800c7f2:	f04f 0000 	mov.w	r0, #0
 800c7f6:	f380 8814 	msr	CONTROL, r0
 800c7fa:	b662      	cpsie	i
 800c7fc:	b661      	cpsie	f
 800c7fe:	f3bf 8f4f 	dsb	sy
 800c802:	f3bf 8f6f 	isb	sy
 800c806:	df00      	svc	0
 800c808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c80a:	bf00      	nop
 800c80c:	e000ed08 	.word	0xe000ed08

0800c810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c816:	4b46      	ldr	r3, [pc, #280]	; (800c930 <xPortStartScheduler+0x120>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	4a46      	ldr	r2, [pc, #280]	; (800c934 <xPortStartScheduler+0x124>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d10a      	bne.n	800c836 <xPortStartScheduler+0x26>
	__asm volatile
 800c820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c824:	f383 8811 	msr	BASEPRI, r3
 800c828:	f3bf 8f6f 	isb	sy
 800c82c:	f3bf 8f4f 	dsb	sy
 800c830:	613b      	str	r3, [r7, #16]
}
 800c832:	bf00      	nop
 800c834:	e7fe      	b.n	800c834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c836:	4b3e      	ldr	r3, [pc, #248]	; (800c930 <xPortStartScheduler+0x120>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a3f      	ldr	r2, [pc, #252]	; (800c938 <xPortStartScheduler+0x128>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d10a      	bne.n	800c856 <xPortStartScheduler+0x46>
	__asm volatile
 800c840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c844:	f383 8811 	msr	BASEPRI, r3
 800c848:	f3bf 8f6f 	isb	sy
 800c84c:	f3bf 8f4f 	dsb	sy
 800c850:	60fb      	str	r3, [r7, #12]
}
 800c852:	bf00      	nop
 800c854:	e7fe      	b.n	800c854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c856:	4b39      	ldr	r3, [pc, #228]	; (800c93c <xPortStartScheduler+0x12c>)
 800c858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	781b      	ldrb	r3, [r3, #0]
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c862:	697b      	ldr	r3, [r7, #20]
 800c864:	22ff      	movs	r2, #255	; 0xff
 800c866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b31      	ldr	r3, [pc, #196]	; (800c940 <xPortStartScheduler+0x130>)
 800c87c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c87e:	4b31      	ldr	r3, [pc, #196]	; (800c944 <xPortStartScheduler+0x134>)
 800c880:	2207      	movs	r2, #7
 800c882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c884:	e009      	b.n	800c89a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c886:	4b2f      	ldr	r3, [pc, #188]	; (800c944 <xPortStartScheduler+0x134>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	4a2d      	ldr	r2, [pc, #180]	; (800c944 <xPortStartScheduler+0x134>)
 800c88e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c890:	78fb      	ldrb	r3, [r7, #3]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	005b      	lsls	r3, r3, #1
 800c896:	b2db      	uxtb	r3, r3
 800c898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c89a:	78fb      	ldrb	r3, [r7, #3]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a2:	2b80      	cmp	r3, #128	; 0x80
 800c8a4:	d0ef      	beq.n	800c886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8a6:	4b27      	ldr	r3, [pc, #156]	; (800c944 <xPortStartScheduler+0x134>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	f1c3 0307 	rsb	r3, r3, #7
 800c8ae:	2b04      	cmp	r3, #4
 800c8b0:	d00a      	beq.n	800c8c8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b6:	f383 8811 	msr	BASEPRI, r3
 800c8ba:	f3bf 8f6f 	isb	sy
 800c8be:	f3bf 8f4f 	dsb	sy
 800c8c2:	60bb      	str	r3, [r7, #8]
}
 800c8c4:	bf00      	nop
 800c8c6:	e7fe      	b.n	800c8c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8c8:	4b1e      	ldr	r3, [pc, #120]	; (800c944 <xPortStartScheduler+0x134>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	021b      	lsls	r3, r3, #8
 800c8ce:	4a1d      	ldr	r2, [pc, #116]	; (800c944 <xPortStartScheduler+0x134>)
 800c8d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8d2:	4b1c      	ldr	r3, [pc, #112]	; (800c944 <xPortStartScheduler+0x134>)
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c8da:	4a1a      	ldr	r2, [pc, #104]	; (800c944 <xPortStartScheduler+0x134>)
 800c8dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8e6:	4b18      	ldr	r3, [pc, #96]	; (800c948 <xPortStartScheduler+0x138>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	4a17      	ldr	r2, [pc, #92]	; (800c948 <xPortStartScheduler+0x138>)
 800c8ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c8f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c8f2:	4b15      	ldr	r3, [pc, #84]	; (800c948 <xPortStartScheduler+0x138>)
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	4a14      	ldr	r2, [pc, #80]	; (800c948 <xPortStartScheduler+0x138>)
 800c8f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c8fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c8fe:	f000 f8dd 	bl	800cabc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c902:	4b12      	ldr	r3, [pc, #72]	; (800c94c <xPortStartScheduler+0x13c>)
 800c904:	2200      	movs	r2, #0
 800c906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c908:	f000 f8fc 	bl	800cb04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c90c:	4b10      	ldr	r3, [pc, #64]	; (800c950 <xPortStartScheduler+0x140>)
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	4a0f      	ldr	r2, [pc, #60]	; (800c950 <xPortStartScheduler+0x140>)
 800c912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c918:	f7ff ff66 	bl	800c7e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c91c:	f7fe fe78 	bl	800b610 <vTaskSwitchContext>
	prvTaskExitError();
 800c920:	f7ff ff22 	bl	800c768 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c924:	2300      	movs	r3, #0
}
 800c926:	4618      	mov	r0, r3
 800c928:	3718      	adds	r7, #24
 800c92a:	46bd      	mov	sp, r7
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	e000ed00 	.word	0xe000ed00
 800c934:	410fc271 	.word	0x410fc271
 800c938:	410fc270 	.word	0x410fc270
 800c93c:	e000e400 	.word	0xe000e400
 800c940:	20001308 	.word	0x20001308
 800c944:	2000130c 	.word	0x2000130c
 800c948:	e000ed20 	.word	0xe000ed20
 800c94c:	2000001c 	.word	0x2000001c
 800c950:	e000ef34 	.word	0xe000ef34

0800c954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c954:	b480      	push	{r7}
 800c956:	b083      	sub	sp, #12
 800c958:	af00      	add	r7, sp, #0
	__asm volatile
 800c95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c95e:	f383 8811 	msr	BASEPRI, r3
 800c962:	f3bf 8f6f 	isb	sy
 800c966:	f3bf 8f4f 	dsb	sy
 800c96a:	607b      	str	r3, [r7, #4]
}
 800c96c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c96e:	4b0f      	ldr	r3, [pc, #60]	; (800c9ac <vPortEnterCritical+0x58>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	4a0d      	ldr	r2, [pc, #52]	; (800c9ac <vPortEnterCritical+0x58>)
 800c976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c978:	4b0c      	ldr	r3, [pc, #48]	; (800c9ac <vPortEnterCritical+0x58>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d10f      	bne.n	800c9a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c980:	4b0b      	ldr	r3, [pc, #44]	; (800c9b0 <vPortEnterCritical+0x5c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00a      	beq.n	800c9a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800c98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c98e:	f383 8811 	msr	BASEPRI, r3
 800c992:	f3bf 8f6f 	isb	sy
 800c996:	f3bf 8f4f 	dsb	sy
 800c99a:	603b      	str	r3, [r7, #0]
}
 800c99c:	bf00      	nop
 800c99e:	e7fe      	b.n	800c99e <vPortEnterCritical+0x4a>
	}
}
 800c9a0:	bf00      	nop
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr
 800c9ac:	2000001c 	.word	0x2000001c
 800c9b0:	e000ed04 	.word	0xe000ed04

0800c9b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9ba:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <vPortExitCritical+0x50>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d10a      	bne.n	800c9d8 <vPortExitCritical+0x24>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	607b      	str	r3, [r7, #4]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <vPortExitCritical+0x50>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4a09      	ldr	r2, [pc, #36]	; (800ca04 <vPortExitCritical+0x50>)
 800c9e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9e2:	4b08      	ldr	r3, [pc, #32]	; (800ca04 <vPortExitCritical+0x50>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d105      	bne.n	800c9f6 <vPortExitCritical+0x42>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	f383 8811 	msr	BASEPRI, r3
}
 800c9f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca00:	4770      	bx	lr
 800ca02:	bf00      	nop
 800ca04:	2000001c 	.word	0x2000001c
	...

0800ca10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca10:	f3ef 8009 	mrs	r0, PSP
 800ca14:	f3bf 8f6f 	isb	sy
 800ca18:	4b15      	ldr	r3, [pc, #84]	; (800ca70 <pxCurrentTCBConst>)
 800ca1a:	681a      	ldr	r2, [r3, #0]
 800ca1c:	f01e 0f10 	tst.w	lr, #16
 800ca20:	bf08      	it	eq
 800ca22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	6010      	str	r0, [r2, #0]
 800ca2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ca34:	f380 8811 	msr	BASEPRI, r0
 800ca38:	f3bf 8f4f 	dsb	sy
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f7fe fde6 	bl	800b610 <vTaskSwitchContext>
 800ca44:	f04f 0000 	mov.w	r0, #0
 800ca48:	f380 8811 	msr	BASEPRI, r0
 800ca4c:	bc09      	pop	{r0, r3}
 800ca4e:	6819      	ldr	r1, [r3, #0]
 800ca50:	6808      	ldr	r0, [r1, #0]
 800ca52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca56:	f01e 0f10 	tst.w	lr, #16
 800ca5a:	bf08      	it	eq
 800ca5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca60:	f380 8809 	msr	PSP, r0
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	f3af 8000 	nop.w

0800ca70 <pxCurrentTCBConst>:
 800ca70:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca74:	bf00      	nop
 800ca76:	bf00      	nop

0800ca78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca82:	f383 8811 	msr	BASEPRI, r3
 800ca86:	f3bf 8f6f 	isb	sy
 800ca8a:	f3bf 8f4f 	dsb	sy
 800ca8e:	607b      	str	r3, [r7, #4]
}
 800ca90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ca92:	f7fe fd03 	bl	800b49c <xTaskIncrementTick>
 800ca96:	4603      	mov	r3, r0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d003      	beq.n	800caa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ca9c:	4b06      	ldr	r3, [pc, #24]	; (800cab8 <xPortSysTickHandler+0x40>)
 800ca9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	2300      	movs	r3, #0
 800caa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	f383 8811 	msr	BASEPRI, r3
}
 800caae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cab0:	bf00      	nop
 800cab2:	3708      	adds	r7, #8
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <vPortSetupTimerInterrupt+0x34>)
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cac6:	4b0b      	ldr	r3, [pc, #44]	; (800caf4 <vPortSetupTimerInterrupt+0x38>)
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cacc:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <vPortSetupTimerInterrupt+0x3c>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a0a      	ldr	r2, [pc, #40]	; (800cafc <vPortSetupTimerInterrupt+0x40>)
 800cad2:	fba2 2303 	umull	r2, r3, r2, r3
 800cad6:	099b      	lsrs	r3, r3, #6
 800cad8:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <vPortSetupTimerInterrupt+0x44>)
 800cada:	3b01      	subs	r3, #1
 800cadc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cade:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <vPortSetupTimerInterrupt+0x34>)
 800cae0:	2207      	movs	r2, #7
 800cae2:	601a      	str	r2, [r3, #0]
}
 800cae4:	bf00      	nop
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr
 800caee:	bf00      	nop
 800caf0:	e000e010 	.word	0xe000e010
 800caf4:	e000e018 	.word	0xe000e018
 800caf8:	20000000 	.word	0x20000000
 800cafc:	10624dd3 	.word	0x10624dd3
 800cb00:	e000e014 	.word	0xe000e014

0800cb04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cb14 <vPortEnableVFP+0x10>
 800cb08:	6801      	ldr	r1, [r0, #0]
 800cb0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cb0e:	6001      	str	r1, [r0, #0]
 800cb10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb12:	bf00      	nop
 800cb14:	e000ed88 	.word	0xe000ed88

0800cb18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb1e:	f3ef 8305 	mrs	r3, IPSR
 800cb22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b0f      	cmp	r3, #15
 800cb28:	d914      	bls.n	800cb54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb2a:	4a17      	ldr	r2, [pc, #92]	; (800cb88 <vPortValidateInterruptPriority+0x70>)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	4413      	add	r3, r2
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb34:	4b15      	ldr	r3, [pc, #84]	; (800cb8c <vPortValidateInterruptPriority+0x74>)
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	7afa      	ldrb	r2, [r7, #11]
 800cb3a:	429a      	cmp	r2, r3
 800cb3c:	d20a      	bcs.n	800cb54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb42:	f383 8811 	msr	BASEPRI, r3
 800cb46:	f3bf 8f6f 	isb	sy
 800cb4a:	f3bf 8f4f 	dsb	sy
 800cb4e:	607b      	str	r3, [r7, #4]
}
 800cb50:	bf00      	nop
 800cb52:	e7fe      	b.n	800cb52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb54:	4b0e      	ldr	r3, [pc, #56]	; (800cb90 <vPortValidateInterruptPriority+0x78>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <vPortValidateInterruptPriority+0x7c>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d90a      	bls.n	800cb7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	603b      	str	r3, [r7, #0]
}
 800cb76:	bf00      	nop
 800cb78:	e7fe      	b.n	800cb78 <vPortValidateInterruptPriority+0x60>
	}
 800cb7a:	bf00      	nop
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	e000e3f0 	.word	0xe000e3f0
 800cb8c:	20001308 	.word	0x20001308
 800cb90:	e000ed0c 	.word	0xe000ed0c
 800cb94:	2000130c 	.word	0x2000130c

0800cb98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b08a      	sub	sp, #40	; 0x28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cba0:	2300      	movs	r3, #0
 800cba2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cba4:	f7fe fbbe 	bl	800b324 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cba8:	4b5b      	ldr	r3, [pc, #364]	; (800cd18 <pvPortMalloc+0x180>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbb0:	f000 f920 	bl	800cdf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbb4:	4b59      	ldr	r3, [pc, #356]	; (800cd1c <pvPortMalloc+0x184>)
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4013      	ands	r3, r2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f040 8093 	bne.w	800cce8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d01d      	beq.n	800cc04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cbc8:	2208      	movs	r2, #8
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	4413      	add	r3, r2
 800cbce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	f003 0307 	and.w	r3, r3, #7
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d014      	beq.n	800cc04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f023 0307 	bic.w	r3, r3, #7
 800cbe0:	3308      	adds	r3, #8
 800cbe2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f003 0307 	and.w	r3, r3, #7
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d00a      	beq.n	800cc04 <pvPortMalloc+0x6c>
	__asm volatile
 800cbee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbf2:	f383 8811 	msr	BASEPRI, r3
 800cbf6:	f3bf 8f6f 	isb	sy
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	617b      	str	r3, [r7, #20]
}
 800cc00:	bf00      	nop
 800cc02:	e7fe      	b.n	800cc02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d06e      	beq.n	800cce8 <pvPortMalloc+0x150>
 800cc0a:	4b45      	ldr	r3, [pc, #276]	; (800cd20 <pvPortMalloc+0x188>)
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d869      	bhi.n	800cce8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc14:	4b43      	ldr	r3, [pc, #268]	; (800cd24 <pvPortMalloc+0x18c>)
 800cc16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc18:	4b42      	ldr	r3, [pc, #264]	; (800cd24 <pvPortMalloc+0x18c>)
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc1e:	e004      	b.n	800cc2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cc20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d903      	bls.n	800cc3c <pvPortMalloc+0xa4>
 800cc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1f1      	bne.n	800cc20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc3c:	4b36      	ldr	r3, [pc, #216]	; (800cd18 <pvPortMalloc+0x180>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d050      	beq.n	800cce8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc46:	6a3b      	ldr	r3, [r7, #32]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	2208      	movs	r2, #8
 800cc4c:	4413      	add	r3, r2
 800cc4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	6a3b      	ldr	r3, [r7, #32]
 800cc56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	685a      	ldr	r2, [r3, #4]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	1ad2      	subs	r2, r2, r3
 800cc60:	2308      	movs	r3, #8
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d91f      	bls.n	800cca8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	4413      	add	r3, r2
 800cc6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	f003 0307 	and.w	r3, r3, #7
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00a      	beq.n	800cc90 <pvPortMalloc+0xf8>
	__asm volatile
 800cc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7e:	f383 8811 	msr	BASEPRI, r3
 800cc82:	f3bf 8f6f 	isb	sy
 800cc86:	f3bf 8f4f 	dsb	sy
 800cc8a:	613b      	str	r3, [r7, #16]
}
 800cc8c:	bf00      	nop
 800cc8e:	e7fe      	b.n	800cc8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc92:	685a      	ldr	r2, [r3, #4]
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	1ad2      	subs	r2, r2, r3
 800cc98:	69bb      	ldr	r3, [r7, #24]
 800cc9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc9e:	687a      	ldr	r2, [r7, #4]
 800cca0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cca2:	69b8      	ldr	r0, [r7, #24]
 800cca4:	f000 f908 	bl	800ceb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cca8:	4b1d      	ldr	r3, [pc, #116]	; (800cd20 <pvPortMalloc+0x188>)
 800ccaa:	681a      	ldr	r2, [r3, #0]
 800ccac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccae:	685b      	ldr	r3, [r3, #4]
 800ccb0:	1ad3      	subs	r3, r2, r3
 800ccb2:	4a1b      	ldr	r2, [pc, #108]	; (800cd20 <pvPortMalloc+0x188>)
 800ccb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccb6:	4b1a      	ldr	r3, [pc, #104]	; (800cd20 <pvPortMalloc+0x188>)
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	4b1b      	ldr	r3, [pc, #108]	; (800cd28 <pvPortMalloc+0x190>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d203      	bcs.n	800ccca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccc2:	4b17      	ldr	r3, [pc, #92]	; (800cd20 <pvPortMalloc+0x188>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a18      	ldr	r2, [pc, #96]	; (800cd28 <pvPortMalloc+0x190>)
 800ccc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	685a      	ldr	r2, [r3, #4]
 800ccce:	4b13      	ldr	r3, [pc, #76]	; (800cd1c <pvPortMalloc+0x184>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	431a      	orrs	r2, r3
 800ccd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ccde:	4b13      	ldr	r3, [pc, #76]	; (800cd2c <pvPortMalloc+0x194>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3301      	adds	r3, #1
 800cce4:	4a11      	ldr	r2, [pc, #68]	; (800cd2c <pvPortMalloc+0x194>)
 800cce6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cce8:	f7fe fb2a 	bl	800b340 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccec:	69fb      	ldr	r3, [r7, #28]
 800ccee:	f003 0307 	and.w	r3, r3, #7
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d00a      	beq.n	800cd0c <pvPortMalloc+0x174>
	__asm volatile
 800ccf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	60fb      	str	r3, [r7, #12]
}
 800cd08:	bf00      	nop
 800cd0a:	e7fe      	b.n	800cd0a <pvPortMalloc+0x172>
	return pvReturn;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3728      	adds	r7, #40	; 0x28
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20004f18 	.word	0x20004f18
 800cd1c:	20004f2c 	.word	0x20004f2c
 800cd20:	20004f1c 	.word	0x20004f1c
 800cd24:	20004f10 	.word	0x20004f10
 800cd28:	20004f20 	.word	0x20004f20
 800cd2c:	20004f24 	.word	0x20004f24

0800cd30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	b086      	sub	sp, #24
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d04d      	beq.n	800cdde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd42:	2308      	movs	r3, #8
 800cd44:	425b      	negs	r3, r3
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	4413      	add	r3, r2
 800cd4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd50:	693b      	ldr	r3, [r7, #16]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	4b24      	ldr	r3, [pc, #144]	; (800cde8 <vPortFree+0xb8>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	4013      	ands	r3, r2
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d10a      	bne.n	800cd74 <vPortFree+0x44>
	__asm volatile
 800cd5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd62:	f383 8811 	msr	BASEPRI, r3
 800cd66:	f3bf 8f6f 	isb	sy
 800cd6a:	f3bf 8f4f 	dsb	sy
 800cd6e:	60fb      	str	r3, [r7, #12]
}
 800cd70:	bf00      	nop
 800cd72:	e7fe      	b.n	800cd72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d00a      	beq.n	800cd92 <vPortFree+0x62>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	f383 8811 	msr	BASEPRI, r3
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	f3bf 8f4f 	dsb	sy
 800cd8c:	60bb      	str	r3, [r7, #8]
}
 800cd8e:	bf00      	nop
 800cd90:	e7fe      	b.n	800cd90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	685a      	ldr	r2, [r3, #4]
 800cd96:	4b14      	ldr	r3, [pc, #80]	; (800cde8 <vPortFree+0xb8>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d01e      	beq.n	800cdde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d11a      	bne.n	800cdde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	4b0e      	ldr	r3, [pc, #56]	; (800cde8 <vPortFree+0xb8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	43db      	mvns	r3, r3
 800cdb2:	401a      	ands	r2, r3
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cdb8:	f7fe fab4 	bl	800b324 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cdbc:	693b      	ldr	r3, [r7, #16]
 800cdbe:	685a      	ldr	r2, [r3, #4]
 800cdc0:	4b0a      	ldr	r3, [pc, #40]	; (800cdec <vPortFree+0xbc>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	4a09      	ldr	r2, [pc, #36]	; (800cdec <vPortFree+0xbc>)
 800cdc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdca:	6938      	ldr	r0, [r7, #16]
 800cdcc:	f000 f874 	bl	800ceb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cdd0:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <vPortFree+0xc0>)
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	3301      	adds	r3, #1
 800cdd6:	4a06      	ldr	r2, [pc, #24]	; (800cdf0 <vPortFree+0xc0>)
 800cdd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cdda:	f7fe fab1 	bl	800b340 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cdde:	bf00      	nop
 800cde0:	3718      	adds	r7, #24
 800cde2:	46bd      	mov	sp, r7
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20004f2c 	.word	0x20004f2c
 800cdec:	20004f1c 	.word	0x20004f1c
 800cdf0:	20004f28 	.word	0x20004f28

0800cdf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cdf4:	b480      	push	{r7}
 800cdf6:	b085      	sub	sp, #20
 800cdf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cdfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800cdfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce00:	4b27      	ldr	r3, [pc, #156]	; (800cea0 <prvHeapInit+0xac>)
 800ce02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f003 0307 	and.w	r3, r3, #7
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d00c      	beq.n	800ce28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	3307      	adds	r3, #7
 800ce12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f023 0307 	bic.w	r3, r3, #7
 800ce1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	1ad3      	subs	r3, r2, r3
 800ce22:	4a1f      	ldr	r2, [pc, #124]	; (800cea0 <prvHeapInit+0xac>)
 800ce24:	4413      	add	r3, r2
 800ce26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce2c:	4a1d      	ldr	r2, [pc, #116]	; (800cea4 <prvHeapInit+0xb0>)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce32:	4b1c      	ldr	r3, [pc, #112]	; (800cea4 <prvHeapInit+0xb0>)
 800ce34:	2200      	movs	r2, #0
 800ce36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68ba      	ldr	r2, [r7, #8]
 800ce3c:	4413      	add	r3, r2
 800ce3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce40:	2208      	movs	r2, #8
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	1a9b      	subs	r3, r3, r2
 800ce46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f023 0307 	bic.w	r3, r3, #7
 800ce4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	4a15      	ldr	r2, [pc, #84]	; (800cea8 <prvHeapInit+0xb4>)
 800ce54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce56:	4b14      	ldr	r3, [pc, #80]	; (800cea8 <prvHeapInit+0xb4>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce5e:	4b12      	ldr	r3, [pc, #72]	; (800cea8 <prvHeapInit+0xb4>)
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	2200      	movs	r2, #0
 800ce64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	68fa      	ldr	r2, [r7, #12]
 800ce6e:	1ad2      	subs	r2, r2, r3
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce74:	4b0c      	ldr	r3, [pc, #48]	; (800cea8 <prvHeapInit+0xb4>)
 800ce76:	681a      	ldr	r2, [r3, #0]
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	4a0a      	ldr	r2, [pc, #40]	; (800ceac <prvHeapInit+0xb8>)
 800ce82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	685b      	ldr	r3, [r3, #4]
 800ce88:	4a09      	ldr	r2, [pc, #36]	; (800ceb0 <prvHeapInit+0xbc>)
 800ce8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ce8c:	4b09      	ldr	r3, [pc, #36]	; (800ceb4 <prvHeapInit+0xc0>)
 800ce8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ce92:	601a      	str	r2, [r3, #0]
}
 800ce94:	bf00      	nop
 800ce96:	3714      	adds	r7, #20
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9e:	4770      	bx	lr
 800cea0:	20001310 	.word	0x20001310
 800cea4:	20004f10 	.word	0x20004f10
 800cea8:	20004f18 	.word	0x20004f18
 800ceac:	20004f20 	.word	0x20004f20
 800ceb0:	20004f1c 	.word	0x20004f1c
 800ceb4:	20004f2c 	.word	0x20004f2c

0800ceb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b085      	sub	sp, #20
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cec0:	4b28      	ldr	r3, [pc, #160]	; (800cf64 <prvInsertBlockIntoFreeList+0xac>)
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e002      	b.n	800cecc <prvInsertBlockIntoFreeList+0x14>
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	429a      	cmp	r2, r3
 800ced4:	d8f7      	bhi.n	800cec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	68ba      	ldr	r2, [r7, #8]
 800cee0:	4413      	add	r3, r2
 800cee2:	687a      	ldr	r2, [r7, #4]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	d108      	bne.n	800cefa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	685a      	ldr	r2, [r3, #4]
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	685b      	ldr	r3, [r3, #4]
 800cef0:	441a      	add	r2, r3
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	68ba      	ldr	r2, [r7, #8]
 800cf04:	441a      	add	r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	429a      	cmp	r2, r3
 800cf0c:	d118      	bne.n	800cf40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	681a      	ldr	r2, [r3, #0]
 800cf12:	4b15      	ldr	r3, [pc, #84]	; (800cf68 <prvInsertBlockIntoFreeList+0xb0>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d00d      	beq.n	800cf36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685a      	ldr	r2, [r3, #4]
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	441a      	add	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	601a      	str	r2, [r3, #0]
 800cf34:	e008      	b.n	800cf48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf36:	4b0c      	ldr	r3, [pc, #48]	; (800cf68 <prvInsertBlockIntoFreeList+0xb0>)
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e003      	b.n	800cf48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	681a      	ldr	r2, [r3, #0]
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf48:	68fa      	ldr	r2, [r7, #12]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	429a      	cmp	r2, r3
 800cf4e:	d002      	beq.n	800cf56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	687a      	ldr	r2, [r7, #4]
 800cf54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf56:	bf00      	nop
 800cf58:	3714      	adds	r7, #20
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf60:	4770      	bx	lr
 800cf62:	bf00      	nop
 800cf64:	20004f10 	.word	0x20004f10
 800cf68:	20004f18 	.word	0x20004f18

0800cf6c <vTaskCOM>:
* @brief Function implementing the TaskCOM thread.
* @param argument: Not used
* @retval None
*/
void vTaskCOM(void *argument)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
	osEventFlagsWait(xEventFinishedInitHandle, FINISH_INIT_ID, 0U, osWaitForever);
 800cf74:	4b05      	ldr	r3, [pc, #20]	; (800cf8c <vTaskCOM+0x20>)
 800cf76:	6818      	ldr	r0, [r3, #0]
 800cf78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	2101      	movs	r1, #1
 800cf80:	f7fc fb0a 	bl	8009598 <osEventFlagsWait>

	for(;;)
	{
		osDelay(1);
 800cf84:	2001      	movs	r0, #1
 800cf86:	f7fc fa69 	bl	800945c <osDelay>
 800cf8a:	e7fb      	b.n	800cf84 <vTaskCOM+0x18>
 800cf8c:	200002d0 	.word	0x200002d0

0800cf90 <vTaskDiagAppl>:
 */

#include "DiagAppl.h"

void vTaskDiagAppl(void *argument)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 800cf98:	2001      	movs	r0, #1
 800cf9a:	f7fc fa5f 	bl	800945c <osDelay>
 800cf9e:	e7fb      	b.n	800cf98 <vTaskDiagAppl+0x8>

0800cfa0 <vTaskUI>:
* @brief Function implementing the TaskUI thread.
* @param argument: Not used
* @retval None
*/
void vTaskUI(void *argument)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b082      	sub	sp, #8
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
	LCD_init();
 800cfa8:	f7f4 fc3a 	bl	8001820 <LCD_init>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream1, HAL_DMA_XFER_CPLT_CB_ID, DMATrasferCpltCallback);
 800cfac:	4a0a      	ldr	r2, [pc, #40]	; (800cfd8 <vTaskUI+0x38>)
 800cfae:	2100      	movs	r1, #0
 800cfb0:	480a      	ldr	r0, [pc, #40]	; (800cfdc <vTaskUI+0x3c>)
 800cfb2:	f7f5 fedd 	bl	8002d70 <HAL_DMA_RegisterCallback>
	FadeWhiteIn(20);
 800cfb6:	2014      	movs	r0, #20
 800cfb8:	f000 f814 	bl	800cfe4 <FadeWhiteIn>
	ITMLogoFadeIN();
 800cfbc:	f000 f850 	bl	800d060 <ITMLogoFadeIN>
	/*Write "Pneumatic Levitator"*/
	/*Letting the rest of the tasks to run*/
		osEventFlagsSet(xEventFinishedInitHandle, FINISH_INIT_ID);
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <vTaskUI+0x40>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	2101      	movs	r1, #1
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fc faa2 	bl	8009510 <osEventFlagsSet>
	ITMLogoFadeOUT();
 800cfcc:	f000 f94c 	bl	800d268 <ITMLogoFadeOUT>

  for(;;)
  {
  	/*TODO: Possible implementation of parsed loop scheme*/
  	LCD_Test(); /*TODO Remove the test from here*/
 800cfd0:	f7f4 fcce 	bl	8001970 <LCD_Test>
 800cfd4:	e7fc      	b.n	800cfd0 <vTaskUI+0x30>
 800cfd6:	bf00      	nop
 800cfd8:	0800d281 	.word	0x0800d281
 800cfdc:	20000250 	.word	0x20000250
 800cfe0:	200002d0 	.word	0x200002d0

0800cfe4 <FadeWhiteIn>:
 * @brief Fades in the white color on the screen
 * @param Delay for the animation in milliseconds
 * @retval none
 */
static void FadeWhiteIn(uint8_t animDelay)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b084      	sub	sp, #16
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	71fb      	strb	r3, [r7, #7]
	for(uint16_t r = 0, g = 0, b = 0; g < 63; r++, g+=2, b++)
 800cfee:	2300      	movs	r3, #0
 800cff0:	81fb      	strh	r3, [r7, #14]
 800cff2:	2300      	movs	r3, #0
 800cff4:	81bb      	strh	r3, [r7, #12]
 800cff6:	2300      	movs	r3, #0
 800cff8:	817b      	strh	r3, [r7, #10]
 800cffa:	e026      	b.n	800d04a <FadeWhiteIn+0x66>
	{
		UG_FillScreen(RGB565Color(r, g, b));
 800cffc:	89fb      	ldrh	r3, [r7, #14]
 800cffe:	02db      	lsls	r3, r3, #11
 800d000:	b21a      	sxth	r2, r3
 800d002:	89bb      	ldrh	r3, [r7, #12]
 800d004:	015b      	lsls	r3, r3, #5
 800d006:	b21b      	sxth	r3, r3
 800d008:	4313      	orrs	r3, r2
 800d00a:	b21a      	sxth	r2, r3
 800d00c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800d010:	4313      	orrs	r3, r2
 800d012:	b21b      	sxth	r3, r3
 800d014:	b29b      	uxth	r3, r3
 800d016:	4618      	mov	r0, r3
 800d018:	f7f8 fb48 	bl	80056ac <UG_FillScreen>
		UG_Update();
 800d01c:	f7fa f972 	bl	8007304 <UG_Update>
		osDelay(pdMS_TO_TICKS(animDelay));
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d026:	fb02 f303 	mul.w	r3, r2, r3
 800d02a:	4a0c      	ldr	r2, [pc, #48]	; (800d05c <FadeWhiteIn+0x78>)
 800d02c:	fba2 2303 	umull	r2, r3, r2, r3
 800d030:	099b      	lsrs	r3, r3, #6
 800d032:	4618      	mov	r0, r3
 800d034:	f7fc fa12 	bl	800945c <osDelay>
	for(uint16_t r = 0, g = 0, b = 0; g < 63; r++, g+=2, b++)
 800d038:	89fb      	ldrh	r3, [r7, #14]
 800d03a:	3301      	adds	r3, #1
 800d03c:	81fb      	strh	r3, [r7, #14]
 800d03e:	89bb      	ldrh	r3, [r7, #12]
 800d040:	3302      	adds	r3, #2
 800d042:	81bb      	strh	r3, [r7, #12]
 800d044:	897b      	ldrh	r3, [r7, #10]
 800d046:	3301      	adds	r3, #1
 800d048:	817b      	strh	r3, [r7, #10]
 800d04a:	89bb      	ldrh	r3, [r7, #12]
 800d04c:	2b3e      	cmp	r3, #62	; 0x3e
 800d04e:	d9d5      	bls.n	800cffc <FadeWhiteIn+0x18>
	}
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	10624dd3 	.word	0x10624dd3

0800d060 <ITMLogoFadeIN>:
 * @brief Fades in and then fades out the logo
 * @param none
 * @retval none
 */
static void ITMLogoFadeIN(void)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b088      	sub	sp, #32
 800d064:	af00      	add	r7, sp, #0
	uint16_t *ITMLogoRAMBuffer;
	uint16_t *NonWhitePixelsValue;
	uint32_t *NonWhitePixelsIndex;
	uint16_t PixelsIndex = 0;
 800d066:	2300      	movs	r3, #0
 800d068:	83fb      	strh	r3, [r7, #30]

	/*TODO: Change to memory pool to use heap memory instead of stack*/
	ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE*2, sizeof(uint16_t));
 800d06a:	2102      	movs	r1, #2
 800d06c:	f24c 0072 	movw	r0, #49266	; 0xc072
 800d070:	f000 f916 	bl	800d2a0 <calloc>
 800d074:	4603      	mov	r3, r0
 800d076:	617b      	str	r3, [r7, #20]
	/*Calloc Failure*/
	if(ITMLogoRAMBuffer == NULL)
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d102      	bne.n	800d084 <ITMLogoFadeIN+0x24>
	{
		/*Report for the debugger*/
		DynamicErrorHandler("ITMLogoRAMBuffer");
 800d07e:	4874      	ldr	r0, [pc, #464]	; (800d250 <ITMLogoFadeIN+0x1f0>)
 800d080:	f000 f8f9 	bl	800d276 <DynamicErrorHandler>
	}
	else
	{
		/*Do Nothing*/
	}
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream1, (uint32_t)ITMLogoData, (uint32_t)ITMLogoRAMBuffer, ITMLOGO_SIZE);
 800d084:	4973      	ldr	r1, [pc, #460]	; (800d254 <ITMLogoFadeIN+0x1f4>)
 800d086:	697a      	ldr	r2, [r7, #20]
 800d088:	f246 0339 	movw	r3, #24633	; 0x6039
 800d08c:	4872      	ldr	r0, [pc, #456]	; (800d258 <ITMLogoFadeIN+0x1f8>)
 800d08e:	f7f5 fbfb 	bl	8002888 <HAL_DMA_Start_IT>
	osSemaphoreAcquire(xSemaphoreDMACompleteHandle, osWaitForever);
 800d092:	4b72      	ldr	r3, [pc, #456]	; (800d25c <ITMLogoFadeIN+0x1fc>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d09a:	4618      	mov	r0, r3
 800d09c:	f7fc fb6c 	bl	8009778 <osSemaphoreAcquire>

	UG_BMP ITMLogoRAM = {
 800d0a0:	463b      	mov	r3, r7
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	605a      	str	r2, [r3, #4]
 800d0a8:	609a      	str	r2, [r3, #8]
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	603b      	str	r3, [r7, #0]
 800d0ae:	23a1      	movs	r3, #161	; 0xa1
 800d0b0:	80bb      	strh	r3, [r7, #4]
 800d0b2:	2399      	movs	r3, #153	; 0x99
 800d0b4:	80fb      	strh	r3, [r7, #6]
 800d0b6:	2310      	movs	r3, #16
 800d0b8:	723b      	strb	r3, [r7, #8]
		.height = 153,
		.bpp = BMP_BPP_16
	};

	/*Getting the non white pixels*/
	NonWhitePixelsValue = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 800d0ba:	2102      	movs	r1, #2
 800d0bc:	f246 0039 	movw	r0, #24633	; 0x6039
 800d0c0:	f000 f8ee 	bl	800d2a0 <calloc>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	613b      	str	r3, [r7, #16]
	NonWhitePixelsIndex = (uint32_t*)calloc(ITMLOGO_SIZE, sizeof(uint32_t));
 800d0c8:	2104      	movs	r1, #4
 800d0ca:	f246 0039 	movw	r0, #24633	; 0x6039
 800d0ce:	f000 f8e7 	bl	800d2a0 <calloc>
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	60fb      	str	r3, [r7, #12]
	if(NonWhitePixelsValue == NULL)
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d103      	bne.n	800d0e4 <ITMLogoFadeIN+0x84>
	{
		DynamicErrorHandler("NonWhitePixelsValue");
 800d0dc:	4860      	ldr	r0, [pc, #384]	; (800d260 <ITMLogoFadeIN+0x200>)
 800d0de:	f000 f8ca 	bl	800d276 <DynamicErrorHandler>
 800d0e2:	e005      	b.n	800d0f0 <ITMLogoFadeIN+0x90>
	}
	else if(NonWhitePixelsIndex == NULL)
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d102      	bne.n	800d0f0 <ITMLogoFadeIN+0x90>
	{
		DynamicErrorHandler("NonWhitePixelsIndex");
 800d0ea:	485e      	ldr	r0, [pc, #376]	; (800d264 <ITMLogoFadeIN+0x204>)
 800d0ec:	f000 f8c3 	bl	800d276 <DynamicErrorHandler>
	}
	else
	{
		/*Do Nothing*/
	}
	PixelsIndex = 0; /*Reusing variable for as index for the buffers*/
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0; i < ITMLOGO_SIZE*2; i++)
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	83bb      	strh	r3, [r7, #28]
 800d0f8:	e01e      	b.n	800d138 <ITMLogoFadeIN+0xd8>
	{
		if((uint16_t)ITMLogoRAMBuffer[i] != 0xFFFF)
 800d0fa:	8bbb      	ldrh	r3, [r7, #28]
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	697a      	ldr	r2, [r7, #20]
 800d100:	4413      	add	r3, r2
 800d102:	881b      	ldrh	r3, [r3, #0]
 800d104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d108:	4293      	cmp	r3, r2
 800d10a:	d012      	beq.n	800d132 <ITMLogoFadeIN+0xd2>
		{
			/*Found a non white pixel*/
			NonWhitePixelsValue[PixelsIndex] = ITMLogoRAMBuffer[i];
 800d10c:	8bbb      	ldrh	r3, [r7, #28]
 800d10e:	005b      	lsls	r3, r3, #1
 800d110:	697a      	ldr	r2, [r7, #20]
 800d112:	441a      	add	r2, r3
 800d114:	8bfb      	ldrh	r3, [r7, #30]
 800d116:	005b      	lsls	r3, r3, #1
 800d118:	6939      	ldr	r1, [r7, #16]
 800d11a:	440b      	add	r3, r1
 800d11c:	8812      	ldrh	r2, [r2, #0]
 800d11e:	801a      	strh	r2, [r3, #0]
			NonWhitePixelsIndex[PixelsIndex] = i;
 800d120:	8bfb      	ldrh	r3, [r7, #30]
 800d122:	009b      	lsls	r3, r3, #2
 800d124:	68fa      	ldr	r2, [r7, #12]
 800d126:	4413      	add	r3, r2
 800d128:	8bba      	ldrh	r2, [r7, #28]
 800d12a:	601a      	str	r2, [r3, #0]
			PixelsIndex++; /*At the end of the loop, will have the max number of data needed*/
 800d12c:	8bfb      	ldrh	r3, [r7, #30]
 800d12e:	3301      	adds	r3, #1
 800d130:	83fb      	strh	r3, [r7, #30]
	for(uint16_t i = 0; i < ITMLOGO_SIZE*2; i++)
 800d132:	8bbb      	ldrh	r3, [r7, #28]
 800d134:	3301      	adds	r3, #1
 800d136:	83bb      	strh	r3, [r7, #28]
 800d138:	8bbb      	ldrh	r3, [r7, #28]
 800d13a:	f24c 0271 	movw	r2, #49265	; 0xc071
 800d13e:	4293      	cmp	r3, r2
 800d140:	d9db      	bls.n	800d0fa <ITMLogoFadeIN+0x9a>
		}
	}
	/*Free RAM that is not used*/
	NonWhitePixelsValue = realloc(NonWhitePixelsValue, (PixelsIndex+1)*sizeof(uint16_t));
 800d142:	8bfb      	ldrh	r3, [r7, #30]
 800d144:	3301      	adds	r3, #1
 800d146:	005b      	lsls	r3, r3, #1
 800d148:	4619      	mov	r1, r3
 800d14a:	6938      	ldr	r0, [r7, #16]
 800d14c:	f000 fa00 	bl	800d550 <realloc>
 800d150:	6138      	str	r0, [r7, #16]
	NonWhitePixelsIndex = realloc(NonWhitePixelsIndex, (PixelsIndex+1)*sizeof(uint32_t));
 800d152:	8bfb      	ldrh	r3, [r7, #30]
 800d154:	3301      	adds	r3, #1
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	4619      	mov	r1, r3
 800d15a:	68f8      	ldr	r0, [r7, #12]
 800d15c:	f000 f9f8 	bl	800d550 <realloc>
 800d160:	60f8      	str	r0, [r7, #12]

	/*Fade animation logo in*/
	memset(ITMLogoRAMBuffer, 0xFFFF, ITMLOGO_SIZE*2); /*Setting white buffer*/
 800d162:	f24c 0272 	movw	r2, #49266	; 0xc072
 800d166:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d16a:	6978      	ldr	r0, [r7, #20]
 800d16c:	f000 f8f2 	bl	800d354 <memset>
	ITMLogoRAM.p = ITMLogoRAMBuffer;
 800d170:	697b      	ldr	r3, [r7, #20]
 800d172:	603b      	str	r3, [r7, #0]
	while(memcmp(ITMLogoRAMBuffer, ITMLogoData, ITMLOGO_SIZE) != 0)
 800d174:	e03e      	b.n	800d1f4 <ITMLogoFadeIN+0x194>
	{
		for(uint16_t i = 0; i < PixelsIndex; i++)
 800d176:	2300      	movs	r3, #0
 800d178:	837b      	strh	r3, [r7, #26]
 800d17a:	e01e      	b.n	800d1ba <ITMLogoFadeIN+0x15a>
		{
			if(ITMLogoRAMBuffer[NonWhitePixelsIndex[i]] != NonWhitePixelsValue[i])
 800d17c:	8b7b      	ldrh	r3, [r7, #26]
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	68fa      	ldr	r2, [r7, #12]
 800d182:	4413      	add	r3, r2
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	005b      	lsls	r3, r3, #1
 800d188:	697a      	ldr	r2, [r7, #20]
 800d18a:	4413      	add	r3, r2
 800d18c:	881a      	ldrh	r2, [r3, #0]
 800d18e:	8b7b      	ldrh	r3, [r7, #26]
 800d190:	005b      	lsls	r3, r3, #1
 800d192:	6939      	ldr	r1, [r7, #16]
 800d194:	440b      	add	r3, r1
 800d196:	881b      	ldrh	r3, [r3, #0]
 800d198:	429a      	cmp	r2, r3
 800d19a:	d00b      	beq.n	800d1b4 <ITMLogoFadeIN+0x154>
			{
				ITMLogoRAMBuffer[NonWhitePixelsIndex[i]]--; /*Until it gets the color*/
 800d19c:	8b7b      	ldrh	r3, [r7, #26]
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	68fa      	ldr	r2, [r7, #12]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	697a      	ldr	r2, [r7, #20]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	881a      	ldrh	r2, [r3, #0]
 800d1ae:	3a01      	subs	r2, #1
 800d1b0:	b292      	uxth	r2, r2
 800d1b2:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < PixelsIndex; i++)
 800d1b4:	8b7b      	ldrh	r3, [r7, #26]
 800d1b6:	3301      	adds	r3, #1
 800d1b8:	837b      	strh	r3, [r7, #26]
 800d1ba:	8b7a      	ldrh	r2, [r7, #26]
 800d1bc:	8bfb      	ldrh	r3, [r7, #30]
 800d1be:	429a      	cmp	r2, r3
 800d1c0:	d3dc      	bcc.n	800d17c <ITMLogoFadeIN+0x11c>
			}
		}
		ITMLogoRAM.p = ITMLogoRAMBuffer;
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	603b      	str	r3, [r7, #0]
		UG_DrawBMP((LCD_WIDTH-ITMLogoRAM.width)/2, (LCD_HEIGHT-ITMLogoRAM.height)/2, &ITMLogoRAM);
 800d1c6:	88bb      	ldrh	r3, [r7, #4]
 800d1c8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800d1cc:	0fda      	lsrs	r2, r3, #31
 800d1ce:	4413      	add	r3, r2
 800d1d0:	105b      	asrs	r3, r3, #1
 800d1d2:	b218      	sxth	r0, r3
 800d1d4:	88fb      	ldrh	r3, [r7, #6]
 800d1d6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800d1da:	0fda      	lsrs	r2, r3, #31
 800d1dc:	4413      	add	r3, r2
 800d1de:	105b      	asrs	r3, r3, #1
 800d1e0:	b21b      	sxth	r3, r3
 800d1e2:	463a      	mov	r2, r7
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	f7fa f94d 	bl	8007484 <UG_DrawBMP>
		UG_Update();
 800d1ea:	f7fa f88b 	bl	8007304 <UG_Update>
		osDelay(pdMS_TO_TICKS(20));
 800d1ee:	2014      	movs	r0, #20
 800d1f0:	f7fc f934 	bl	800945c <osDelay>
	while(memcmp(ITMLogoRAMBuffer, ITMLogoData, ITMLOGO_SIZE) != 0)
 800d1f4:	f246 0239 	movw	r2, #24633	; 0x6039
 800d1f8:	4916      	ldr	r1, [pc, #88]	; (800d254 <ITMLogoFadeIN+0x1f4>)
 800d1fa:	6978      	ldr	r0, [r7, #20]
 800d1fc:	f000 f88c 	bl	800d318 <memcmp>
 800d200:	4603      	mov	r3, r0
 800d202:	2b00      	cmp	r3, #0
 800d204:	d1b7      	bne.n	800d176 <ITMLogoFadeIN+0x116>
	}

	UG_DrawBMP((LCD_WIDTH-ITMLogoRAM.width)/2, (LCD_HEIGHT-ITMLogoRAM.height)/2, &ITMLogoRAM);
 800d206:	88bb      	ldrh	r3, [r7, #4]
 800d208:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800d20c:	0fda      	lsrs	r2, r3, #31
 800d20e:	4413      	add	r3, r2
 800d210:	105b      	asrs	r3, r3, #1
 800d212:	b218      	sxth	r0, r3
 800d214:	88fb      	ldrh	r3, [r7, #6]
 800d216:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800d21a:	0fda      	lsrs	r2, r3, #31
 800d21c:	4413      	add	r3, r2
 800d21e:	105b      	asrs	r3, r3, #1
 800d220:	b21b      	sxth	r3, r3
 800d222:	463a      	mov	r2, r7
 800d224:	4619      	mov	r1, r3
 800d226:	f7fa f92d 	bl	8007484 <UG_DrawBMP>
	UG_Update();
 800d22a:	f7fa f86b 	bl	8007304 <UG_Update>
	osDelay(pdMS_TO_TICKS(3000));
 800d22e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800d232:	f7fc f913 	bl	800945c <osDelay>

	free(ITMLogoRAMBuffer);
 800d236:	6978      	ldr	r0, [r7, #20]
 800d238:	f000 f866 	bl	800d308 <free>
	free(NonWhitePixelsValue);
 800d23c:	6938      	ldr	r0, [r7, #16]
 800d23e:	f000 f863 	bl	800d308 <free>
	free(NonWhitePixelsIndex);
 800d242:	68f8      	ldr	r0, [r7, #12]
 800d244:	f000 f860 	bl	800d308 <free>
	/*!HIGH RAM CONSUMPTION ZONE*/
}
 800d248:	bf00      	nop
 800d24a:	3720      	adds	r7, #32
 800d24c:	46bd      	mov	sp, r7
 800d24e:	bd80      	pop	{r7, pc}
 800d250:	0800debc 	.word	0x0800debc
 800d254:	080211e4 	.word	0x080211e4
 800d258:	20000250 	.word	0x20000250
 800d25c:	200002cc 	.word	0x200002cc
 800d260:	0800ded0 	.word	0x0800ded0
 800d264:	0800dee4 	.word	0x0800dee4

0800d268 <ITMLogoFadeOUT>:

static void ITMLogoFadeOUT(void)
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0

}
 800d26c:	bf00      	nop
 800d26e:	46bd      	mov	sp, r7
 800d270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d274:	4770      	bx	lr

0800d276 <DynamicErrorHandler>:
{

}

static void DynamicErrorHandler(char *str)
{
 800d276:	b480      	push	{r7}
 800d278:	b083      	sub	sp, #12
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	6078      	str	r0, [r7, #4]
	/*Halting the task*/
	while(1)
 800d27e:	e7fe      	b.n	800d27e <DynamicErrorHandler+0x8>

0800d280 <DMATrasferCpltCallback>:
		/*Do nothing, check buffer "str" with debugger*/
	}
}

void DMATrasferCpltCallback(DMA_HandleTypeDef *DmaHandle)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(xSemaphoreDMACompleteHandle);
 800d288:	4b04      	ldr	r3, [pc, #16]	; (800d29c <DMATrasferCpltCallback+0x1c>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7fc fac5 	bl	800981c <osSemaphoreRelease>
}
 800d292:	bf00      	nop
 800d294:	3708      	adds	r7, #8
 800d296:	46bd      	mov	sp, r7
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	200002cc 	.word	0x200002cc

0800d2a0 <calloc>:
 800d2a0:	4b02      	ldr	r3, [pc, #8]	; (800d2ac <calloc+0xc>)
 800d2a2:	460a      	mov	r2, r1
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	6818      	ldr	r0, [r3, #0]
 800d2a8:	f000 b85c 	b.w	800d364 <_calloc_r>
 800d2ac:	2000002c 	.word	0x2000002c

0800d2b0 <__errno>:
 800d2b0:	4b01      	ldr	r3, [pc, #4]	; (800d2b8 <__errno+0x8>)
 800d2b2:	6818      	ldr	r0, [r3, #0]
 800d2b4:	4770      	bx	lr
 800d2b6:	bf00      	nop
 800d2b8:	2000002c 	.word	0x2000002c

0800d2bc <__libc_init_array>:
 800d2bc:	b570      	push	{r4, r5, r6, lr}
 800d2be:	4d0d      	ldr	r5, [pc, #52]	; (800d2f4 <__libc_init_array+0x38>)
 800d2c0:	4c0d      	ldr	r4, [pc, #52]	; (800d2f8 <__libc_init_array+0x3c>)
 800d2c2:	1b64      	subs	r4, r4, r5
 800d2c4:	10a4      	asrs	r4, r4, #2
 800d2c6:	2600      	movs	r6, #0
 800d2c8:	42a6      	cmp	r6, r4
 800d2ca:	d109      	bne.n	800d2e0 <__libc_init_array+0x24>
 800d2cc:	4d0b      	ldr	r5, [pc, #44]	; (800d2fc <__libc_init_array+0x40>)
 800d2ce:	4c0c      	ldr	r4, [pc, #48]	; (800d300 <__libc_init_array+0x44>)
 800d2d0:	f000 fd2c 	bl	800dd2c <_init>
 800d2d4:	1b64      	subs	r4, r4, r5
 800d2d6:	10a4      	asrs	r4, r4, #2
 800d2d8:	2600      	movs	r6, #0
 800d2da:	42a6      	cmp	r6, r4
 800d2dc:	d105      	bne.n	800d2ea <__libc_init_array+0x2e>
 800d2de:	bd70      	pop	{r4, r5, r6, pc}
 800d2e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2e4:	4798      	blx	r3
 800d2e6:	3601      	adds	r6, #1
 800d2e8:	e7ee      	b.n	800d2c8 <__libc_init_array+0xc>
 800d2ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2ee:	4798      	blx	r3
 800d2f0:	3601      	adds	r6, #1
 800d2f2:	e7f2      	b.n	800d2da <__libc_init_array+0x1e>
 800d2f4:	0802d2f4 	.word	0x0802d2f4
 800d2f8:	0802d2f4 	.word	0x0802d2f4
 800d2fc:	0802d2f4 	.word	0x0802d2f4
 800d300:	0802d2f8 	.word	0x0802d2f8

0800d304 <__retarget_lock_acquire_recursive>:
 800d304:	4770      	bx	lr

0800d306 <__retarget_lock_release_recursive>:
 800d306:	4770      	bx	lr

0800d308 <free>:
 800d308:	4b02      	ldr	r3, [pc, #8]	; (800d314 <free+0xc>)
 800d30a:	4601      	mov	r1, r0
 800d30c:	6818      	ldr	r0, [r3, #0]
 800d30e:	f000 b83f 	b.w	800d390 <_free_r>
 800d312:	bf00      	nop
 800d314:	2000002c 	.word	0x2000002c

0800d318 <memcmp>:
 800d318:	b510      	push	{r4, lr}
 800d31a:	3901      	subs	r1, #1
 800d31c:	4402      	add	r2, r0
 800d31e:	4290      	cmp	r0, r2
 800d320:	d101      	bne.n	800d326 <memcmp+0xe>
 800d322:	2000      	movs	r0, #0
 800d324:	e005      	b.n	800d332 <memcmp+0x1a>
 800d326:	7803      	ldrb	r3, [r0, #0]
 800d328:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d32c:	42a3      	cmp	r3, r4
 800d32e:	d001      	beq.n	800d334 <memcmp+0x1c>
 800d330:	1b18      	subs	r0, r3, r4
 800d332:	bd10      	pop	{r4, pc}
 800d334:	3001      	adds	r0, #1
 800d336:	e7f2      	b.n	800d31e <memcmp+0x6>

0800d338 <memcpy>:
 800d338:	440a      	add	r2, r1
 800d33a:	4291      	cmp	r1, r2
 800d33c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d340:	d100      	bne.n	800d344 <memcpy+0xc>
 800d342:	4770      	bx	lr
 800d344:	b510      	push	{r4, lr}
 800d346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d34a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d34e:	4291      	cmp	r1, r2
 800d350:	d1f9      	bne.n	800d346 <memcpy+0xe>
 800d352:	bd10      	pop	{r4, pc}

0800d354 <memset>:
 800d354:	4402      	add	r2, r0
 800d356:	4603      	mov	r3, r0
 800d358:	4293      	cmp	r3, r2
 800d35a:	d100      	bne.n	800d35e <memset+0xa>
 800d35c:	4770      	bx	lr
 800d35e:	f803 1b01 	strb.w	r1, [r3], #1
 800d362:	e7f9      	b.n	800d358 <memset+0x4>

0800d364 <_calloc_r>:
 800d364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d366:	fba1 2402 	umull	r2, r4, r1, r2
 800d36a:	b94c      	cbnz	r4, 800d380 <_calloc_r+0x1c>
 800d36c:	4611      	mov	r1, r2
 800d36e:	9201      	str	r2, [sp, #4]
 800d370:	f000 f87a 	bl	800d468 <_malloc_r>
 800d374:	9a01      	ldr	r2, [sp, #4]
 800d376:	4605      	mov	r5, r0
 800d378:	b930      	cbnz	r0, 800d388 <_calloc_r+0x24>
 800d37a:	4628      	mov	r0, r5
 800d37c:	b003      	add	sp, #12
 800d37e:	bd30      	pop	{r4, r5, pc}
 800d380:	220c      	movs	r2, #12
 800d382:	6002      	str	r2, [r0, #0]
 800d384:	2500      	movs	r5, #0
 800d386:	e7f8      	b.n	800d37a <_calloc_r+0x16>
 800d388:	4621      	mov	r1, r4
 800d38a:	f7ff ffe3 	bl	800d354 <memset>
 800d38e:	e7f4      	b.n	800d37a <_calloc_r+0x16>

0800d390 <_free_r>:
 800d390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d392:	2900      	cmp	r1, #0
 800d394:	d044      	beq.n	800d420 <_free_r+0x90>
 800d396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d39a:	9001      	str	r0, [sp, #4]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f1a1 0404 	sub.w	r4, r1, #4
 800d3a2:	bfb8      	it	lt
 800d3a4:	18e4      	addlt	r4, r4, r3
 800d3a6:	f000 f975 	bl	800d694 <__malloc_lock>
 800d3aa:	4a1e      	ldr	r2, [pc, #120]	; (800d424 <_free_r+0x94>)
 800d3ac:	9801      	ldr	r0, [sp, #4]
 800d3ae:	6813      	ldr	r3, [r2, #0]
 800d3b0:	b933      	cbnz	r3, 800d3c0 <_free_r+0x30>
 800d3b2:	6063      	str	r3, [r4, #4]
 800d3b4:	6014      	str	r4, [r2, #0]
 800d3b6:	b003      	add	sp, #12
 800d3b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3bc:	f000 b970 	b.w	800d6a0 <__malloc_unlock>
 800d3c0:	42a3      	cmp	r3, r4
 800d3c2:	d908      	bls.n	800d3d6 <_free_r+0x46>
 800d3c4:	6825      	ldr	r5, [r4, #0]
 800d3c6:	1961      	adds	r1, r4, r5
 800d3c8:	428b      	cmp	r3, r1
 800d3ca:	bf01      	itttt	eq
 800d3cc:	6819      	ldreq	r1, [r3, #0]
 800d3ce:	685b      	ldreq	r3, [r3, #4]
 800d3d0:	1949      	addeq	r1, r1, r5
 800d3d2:	6021      	streq	r1, [r4, #0]
 800d3d4:	e7ed      	b.n	800d3b2 <_free_r+0x22>
 800d3d6:	461a      	mov	r2, r3
 800d3d8:	685b      	ldr	r3, [r3, #4]
 800d3da:	b10b      	cbz	r3, 800d3e0 <_free_r+0x50>
 800d3dc:	42a3      	cmp	r3, r4
 800d3de:	d9fa      	bls.n	800d3d6 <_free_r+0x46>
 800d3e0:	6811      	ldr	r1, [r2, #0]
 800d3e2:	1855      	adds	r5, r2, r1
 800d3e4:	42a5      	cmp	r5, r4
 800d3e6:	d10b      	bne.n	800d400 <_free_r+0x70>
 800d3e8:	6824      	ldr	r4, [r4, #0]
 800d3ea:	4421      	add	r1, r4
 800d3ec:	1854      	adds	r4, r2, r1
 800d3ee:	42a3      	cmp	r3, r4
 800d3f0:	6011      	str	r1, [r2, #0]
 800d3f2:	d1e0      	bne.n	800d3b6 <_free_r+0x26>
 800d3f4:	681c      	ldr	r4, [r3, #0]
 800d3f6:	685b      	ldr	r3, [r3, #4]
 800d3f8:	6053      	str	r3, [r2, #4]
 800d3fa:	4421      	add	r1, r4
 800d3fc:	6011      	str	r1, [r2, #0]
 800d3fe:	e7da      	b.n	800d3b6 <_free_r+0x26>
 800d400:	d902      	bls.n	800d408 <_free_r+0x78>
 800d402:	230c      	movs	r3, #12
 800d404:	6003      	str	r3, [r0, #0]
 800d406:	e7d6      	b.n	800d3b6 <_free_r+0x26>
 800d408:	6825      	ldr	r5, [r4, #0]
 800d40a:	1961      	adds	r1, r4, r5
 800d40c:	428b      	cmp	r3, r1
 800d40e:	bf04      	itt	eq
 800d410:	6819      	ldreq	r1, [r3, #0]
 800d412:	685b      	ldreq	r3, [r3, #4]
 800d414:	6063      	str	r3, [r4, #4]
 800d416:	bf04      	itt	eq
 800d418:	1949      	addeq	r1, r1, r5
 800d41a:	6021      	streq	r1, [r4, #0]
 800d41c:	6054      	str	r4, [r2, #4]
 800d41e:	e7ca      	b.n	800d3b6 <_free_r+0x26>
 800d420:	b003      	add	sp, #12
 800d422:	bd30      	pop	{r4, r5, pc}
 800d424:	20004f34 	.word	0x20004f34

0800d428 <sbrk_aligned>:
 800d428:	b570      	push	{r4, r5, r6, lr}
 800d42a:	4e0e      	ldr	r6, [pc, #56]	; (800d464 <sbrk_aligned+0x3c>)
 800d42c:	460c      	mov	r4, r1
 800d42e:	6831      	ldr	r1, [r6, #0]
 800d430:	4605      	mov	r5, r0
 800d432:	b911      	cbnz	r1, 800d43a <sbrk_aligned+0x12>
 800d434:	f000 f8fe 	bl	800d634 <_sbrk_r>
 800d438:	6030      	str	r0, [r6, #0]
 800d43a:	4621      	mov	r1, r4
 800d43c:	4628      	mov	r0, r5
 800d43e:	f000 f8f9 	bl	800d634 <_sbrk_r>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	d00a      	beq.n	800d45c <sbrk_aligned+0x34>
 800d446:	1cc4      	adds	r4, r0, #3
 800d448:	f024 0403 	bic.w	r4, r4, #3
 800d44c:	42a0      	cmp	r0, r4
 800d44e:	d007      	beq.n	800d460 <sbrk_aligned+0x38>
 800d450:	1a21      	subs	r1, r4, r0
 800d452:	4628      	mov	r0, r5
 800d454:	f000 f8ee 	bl	800d634 <_sbrk_r>
 800d458:	3001      	adds	r0, #1
 800d45a:	d101      	bne.n	800d460 <sbrk_aligned+0x38>
 800d45c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800d460:	4620      	mov	r0, r4
 800d462:	bd70      	pop	{r4, r5, r6, pc}
 800d464:	20004f38 	.word	0x20004f38

0800d468 <_malloc_r>:
 800d468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d46c:	1ccd      	adds	r5, r1, #3
 800d46e:	f025 0503 	bic.w	r5, r5, #3
 800d472:	3508      	adds	r5, #8
 800d474:	2d0c      	cmp	r5, #12
 800d476:	bf38      	it	cc
 800d478:	250c      	movcc	r5, #12
 800d47a:	2d00      	cmp	r5, #0
 800d47c:	4607      	mov	r7, r0
 800d47e:	db01      	blt.n	800d484 <_malloc_r+0x1c>
 800d480:	42a9      	cmp	r1, r5
 800d482:	d905      	bls.n	800d490 <_malloc_r+0x28>
 800d484:	230c      	movs	r3, #12
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	2600      	movs	r6, #0
 800d48a:	4630      	mov	r0, r6
 800d48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d490:	4e2e      	ldr	r6, [pc, #184]	; (800d54c <_malloc_r+0xe4>)
 800d492:	f000 f8ff 	bl	800d694 <__malloc_lock>
 800d496:	6833      	ldr	r3, [r6, #0]
 800d498:	461c      	mov	r4, r3
 800d49a:	bb34      	cbnz	r4, 800d4ea <_malloc_r+0x82>
 800d49c:	4629      	mov	r1, r5
 800d49e:	4638      	mov	r0, r7
 800d4a0:	f7ff ffc2 	bl	800d428 <sbrk_aligned>
 800d4a4:	1c43      	adds	r3, r0, #1
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	d14d      	bne.n	800d546 <_malloc_r+0xde>
 800d4aa:	6834      	ldr	r4, [r6, #0]
 800d4ac:	4626      	mov	r6, r4
 800d4ae:	2e00      	cmp	r6, #0
 800d4b0:	d140      	bne.n	800d534 <_malloc_r+0xcc>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	4631      	mov	r1, r6
 800d4b6:	4638      	mov	r0, r7
 800d4b8:	eb04 0803 	add.w	r8, r4, r3
 800d4bc:	f000 f8ba 	bl	800d634 <_sbrk_r>
 800d4c0:	4580      	cmp	r8, r0
 800d4c2:	d13a      	bne.n	800d53a <_malloc_r+0xd2>
 800d4c4:	6821      	ldr	r1, [r4, #0]
 800d4c6:	3503      	adds	r5, #3
 800d4c8:	1a6d      	subs	r5, r5, r1
 800d4ca:	f025 0503 	bic.w	r5, r5, #3
 800d4ce:	3508      	adds	r5, #8
 800d4d0:	2d0c      	cmp	r5, #12
 800d4d2:	bf38      	it	cc
 800d4d4:	250c      	movcc	r5, #12
 800d4d6:	4629      	mov	r1, r5
 800d4d8:	4638      	mov	r0, r7
 800d4da:	f7ff ffa5 	bl	800d428 <sbrk_aligned>
 800d4de:	3001      	adds	r0, #1
 800d4e0:	d02b      	beq.n	800d53a <_malloc_r+0xd2>
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	442b      	add	r3, r5
 800d4e6:	6023      	str	r3, [r4, #0]
 800d4e8:	e00e      	b.n	800d508 <_malloc_r+0xa0>
 800d4ea:	6822      	ldr	r2, [r4, #0]
 800d4ec:	1b52      	subs	r2, r2, r5
 800d4ee:	d41e      	bmi.n	800d52e <_malloc_r+0xc6>
 800d4f0:	2a0b      	cmp	r2, #11
 800d4f2:	d916      	bls.n	800d522 <_malloc_r+0xba>
 800d4f4:	1961      	adds	r1, r4, r5
 800d4f6:	42a3      	cmp	r3, r4
 800d4f8:	6025      	str	r5, [r4, #0]
 800d4fa:	bf18      	it	ne
 800d4fc:	6059      	strne	r1, [r3, #4]
 800d4fe:	6863      	ldr	r3, [r4, #4]
 800d500:	bf08      	it	eq
 800d502:	6031      	streq	r1, [r6, #0]
 800d504:	5162      	str	r2, [r4, r5]
 800d506:	604b      	str	r3, [r1, #4]
 800d508:	4638      	mov	r0, r7
 800d50a:	f104 060b 	add.w	r6, r4, #11
 800d50e:	f000 f8c7 	bl	800d6a0 <__malloc_unlock>
 800d512:	f026 0607 	bic.w	r6, r6, #7
 800d516:	1d23      	adds	r3, r4, #4
 800d518:	1af2      	subs	r2, r6, r3
 800d51a:	d0b6      	beq.n	800d48a <_malloc_r+0x22>
 800d51c:	1b9b      	subs	r3, r3, r6
 800d51e:	50a3      	str	r3, [r4, r2]
 800d520:	e7b3      	b.n	800d48a <_malloc_r+0x22>
 800d522:	6862      	ldr	r2, [r4, #4]
 800d524:	42a3      	cmp	r3, r4
 800d526:	bf0c      	ite	eq
 800d528:	6032      	streq	r2, [r6, #0]
 800d52a:	605a      	strne	r2, [r3, #4]
 800d52c:	e7ec      	b.n	800d508 <_malloc_r+0xa0>
 800d52e:	4623      	mov	r3, r4
 800d530:	6864      	ldr	r4, [r4, #4]
 800d532:	e7b2      	b.n	800d49a <_malloc_r+0x32>
 800d534:	4634      	mov	r4, r6
 800d536:	6876      	ldr	r6, [r6, #4]
 800d538:	e7b9      	b.n	800d4ae <_malloc_r+0x46>
 800d53a:	230c      	movs	r3, #12
 800d53c:	603b      	str	r3, [r7, #0]
 800d53e:	4638      	mov	r0, r7
 800d540:	f000 f8ae 	bl	800d6a0 <__malloc_unlock>
 800d544:	e7a1      	b.n	800d48a <_malloc_r+0x22>
 800d546:	6025      	str	r5, [r4, #0]
 800d548:	e7de      	b.n	800d508 <_malloc_r+0xa0>
 800d54a:	bf00      	nop
 800d54c:	20004f34 	.word	0x20004f34

0800d550 <realloc>:
 800d550:	4b02      	ldr	r3, [pc, #8]	; (800d55c <realloc+0xc>)
 800d552:	460a      	mov	r2, r1
 800d554:	4601      	mov	r1, r0
 800d556:	6818      	ldr	r0, [r3, #0]
 800d558:	f000 b8a8 	b.w	800d6ac <_realloc_r>
 800d55c:	2000002c 	.word	0x2000002c

0800d560 <cleanup_glue>:
 800d560:	b538      	push	{r3, r4, r5, lr}
 800d562:	460c      	mov	r4, r1
 800d564:	6809      	ldr	r1, [r1, #0]
 800d566:	4605      	mov	r5, r0
 800d568:	b109      	cbz	r1, 800d56e <cleanup_glue+0xe>
 800d56a:	f7ff fff9 	bl	800d560 <cleanup_glue>
 800d56e:	4621      	mov	r1, r4
 800d570:	4628      	mov	r0, r5
 800d572:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d576:	f7ff bf0b 	b.w	800d390 <_free_r>
	...

0800d57c <_reclaim_reent>:
 800d57c:	4b2c      	ldr	r3, [pc, #176]	; (800d630 <_reclaim_reent+0xb4>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	4283      	cmp	r3, r0
 800d582:	b570      	push	{r4, r5, r6, lr}
 800d584:	4604      	mov	r4, r0
 800d586:	d051      	beq.n	800d62c <_reclaim_reent+0xb0>
 800d588:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d58a:	b143      	cbz	r3, 800d59e <_reclaim_reent+0x22>
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d14a      	bne.n	800d628 <_reclaim_reent+0xac>
 800d592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d594:	6819      	ldr	r1, [r3, #0]
 800d596:	b111      	cbz	r1, 800d59e <_reclaim_reent+0x22>
 800d598:	4620      	mov	r0, r4
 800d59a:	f7ff fef9 	bl	800d390 <_free_r>
 800d59e:	6961      	ldr	r1, [r4, #20]
 800d5a0:	b111      	cbz	r1, 800d5a8 <_reclaim_reent+0x2c>
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	f7ff fef4 	bl	800d390 <_free_r>
 800d5a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d5aa:	b111      	cbz	r1, 800d5b2 <_reclaim_reent+0x36>
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f7ff feef 	bl	800d390 <_free_r>
 800d5b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d5b4:	b111      	cbz	r1, 800d5bc <_reclaim_reent+0x40>
 800d5b6:	4620      	mov	r0, r4
 800d5b8:	f7ff feea 	bl	800d390 <_free_r>
 800d5bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d5be:	b111      	cbz	r1, 800d5c6 <_reclaim_reent+0x4a>
 800d5c0:	4620      	mov	r0, r4
 800d5c2:	f7ff fee5 	bl	800d390 <_free_r>
 800d5c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d5c8:	b111      	cbz	r1, 800d5d0 <_reclaim_reent+0x54>
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	f7ff fee0 	bl	800d390 <_free_r>
 800d5d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d5d2:	b111      	cbz	r1, 800d5da <_reclaim_reent+0x5e>
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f7ff fedb 	bl	800d390 <_free_r>
 800d5da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d5dc:	b111      	cbz	r1, 800d5e4 <_reclaim_reent+0x68>
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f7ff fed6 	bl	800d390 <_free_r>
 800d5e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5e6:	b111      	cbz	r1, 800d5ee <_reclaim_reent+0x72>
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f7ff fed1 	bl	800d390 <_free_r>
 800d5ee:	69a3      	ldr	r3, [r4, #24]
 800d5f0:	b1e3      	cbz	r3, 800d62c <_reclaim_reent+0xb0>
 800d5f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	4798      	blx	r3
 800d5f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d5fa:	b1b9      	cbz	r1, 800d62c <_reclaim_reent+0xb0>
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d602:	f7ff bfad 	b.w	800d560 <cleanup_glue>
 800d606:	5949      	ldr	r1, [r1, r5]
 800d608:	b941      	cbnz	r1, 800d61c <_reclaim_reent+0xa0>
 800d60a:	3504      	adds	r5, #4
 800d60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d60e:	2d80      	cmp	r5, #128	; 0x80
 800d610:	68d9      	ldr	r1, [r3, #12]
 800d612:	d1f8      	bne.n	800d606 <_reclaim_reent+0x8a>
 800d614:	4620      	mov	r0, r4
 800d616:	f7ff febb 	bl	800d390 <_free_r>
 800d61a:	e7ba      	b.n	800d592 <_reclaim_reent+0x16>
 800d61c:	680e      	ldr	r6, [r1, #0]
 800d61e:	4620      	mov	r0, r4
 800d620:	f7ff feb6 	bl	800d390 <_free_r>
 800d624:	4631      	mov	r1, r6
 800d626:	e7ef      	b.n	800d608 <_reclaim_reent+0x8c>
 800d628:	2500      	movs	r5, #0
 800d62a:	e7ef      	b.n	800d60c <_reclaim_reent+0x90>
 800d62c:	bd70      	pop	{r4, r5, r6, pc}
 800d62e:	bf00      	nop
 800d630:	2000002c 	.word	0x2000002c

0800d634 <_sbrk_r>:
 800d634:	b538      	push	{r3, r4, r5, lr}
 800d636:	4d06      	ldr	r5, [pc, #24]	; (800d650 <_sbrk_r+0x1c>)
 800d638:	2300      	movs	r3, #0
 800d63a:	4604      	mov	r4, r0
 800d63c:	4608      	mov	r0, r1
 800d63e:	602b      	str	r3, [r5, #0]
 800d640:	f7f3 fce6 	bl	8001010 <_sbrk>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d102      	bne.n	800d64e <_sbrk_r+0x1a>
 800d648:	682b      	ldr	r3, [r5, #0]
 800d64a:	b103      	cbz	r3, 800d64e <_sbrk_r+0x1a>
 800d64c:	6023      	str	r3, [r4, #0]
 800d64e:	bd38      	pop	{r3, r4, r5, pc}
 800d650:	20004f3c 	.word	0x20004f3c

0800d654 <siprintf>:
 800d654:	b40e      	push	{r1, r2, r3}
 800d656:	b500      	push	{lr}
 800d658:	b09c      	sub	sp, #112	; 0x70
 800d65a:	ab1d      	add	r3, sp, #116	; 0x74
 800d65c:	9002      	str	r0, [sp, #8]
 800d65e:	9006      	str	r0, [sp, #24]
 800d660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d664:	4809      	ldr	r0, [pc, #36]	; (800d68c <siprintf+0x38>)
 800d666:	9107      	str	r1, [sp, #28]
 800d668:	9104      	str	r1, [sp, #16]
 800d66a:	4909      	ldr	r1, [pc, #36]	; (800d690 <siprintf+0x3c>)
 800d66c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d670:	9105      	str	r1, [sp, #20]
 800d672:	6800      	ldr	r0, [r0, #0]
 800d674:	9301      	str	r3, [sp, #4]
 800d676:	a902      	add	r1, sp, #8
 800d678:	f000 f8a2 	bl	800d7c0 <_svfiprintf_r>
 800d67c:	9b02      	ldr	r3, [sp, #8]
 800d67e:	2200      	movs	r2, #0
 800d680:	701a      	strb	r2, [r3, #0]
 800d682:	b01c      	add	sp, #112	; 0x70
 800d684:	f85d eb04 	ldr.w	lr, [sp], #4
 800d688:	b003      	add	sp, #12
 800d68a:	4770      	bx	lr
 800d68c:	2000002c 	.word	0x2000002c
 800d690:	ffff0208 	.word	0xffff0208

0800d694 <__malloc_lock>:
 800d694:	4801      	ldr	r0, [pc, #4]	; (800d69c <__malloc_lock+0x8>)
 800d696:	f7ff be35 	b.w	800d304 <__retarget_lock_acquire_recursive>
 800d69a:	bf00      	nop
 800d69c:	20004f30 	.word	0x20004f30

0800d6a0 <__malloc_unlock>:
 800d6a0:	4801      	ldr	r0, [pc, #4]	; (800d6a8 <__malloc_unlock+0x8>)
 800d6a2:	f7ff be30 	b.w	800d306 <__retarget_lock_release_recursive>
 800d6a6:	bf00      	nop
 800d6a8:	20004f30 	.word	0x20004f30

0800d6ac <_realloc_r>:
 800d6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6b0:	4680      	mov	r8, r0
 800d6b2:	4614      	mov	r4, r2
 800d6b4:	460e      	mov	r6, r1
 800d6b6:	b921      	cbnz	r1, 800d6c2 <_realloc_r+0x16>
 800d6b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d6bc:	4611      	mov	r1, r2
 800d6be:	f7ff bed3 	b.w	800d468 <_malloc_r>
 800d6c2:	b92a      	cbnz	r2, 800d6d0 <_realloc_r+0x24>
 800d6c4:	f7ff fe64 	bl	800d390 <_free_r>
 800d6c8:	4625      	mov	r5, r4
 800d6ca:	4628      	mov	r0, r5
 800d6cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d0:	f000 fb24 	bl	800dd1c <_malloc_usable_size_r>
 800d6d4:	4284      	cmp	r4, r0
 800d6d6:	4607      	mov	r7, r0
 800d6d8:	d802      	bhi.n	800d6e0 <_realloc_r+0x34>
 800d6da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6de:	d812      	bhi.n	800d706 <_realloc_r+0x5a>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4640      	mov	r0, r8
 800d6e4:	f7ff fec0 	bl	800d468 <_malloc_r>
 800d6e8:	4605      	mov	r5, r0
 800d6ea:	2800      	cmp	r0, #0
 800d6ec:	d0ed      	beq.n	800d6ca <_realloc_r+0x1e>
 800d6ee:	42bc      	cmp	r4, r7
 800d6f0:	4622      	mov	r2, r4
 800d6f2:	4631      	mov	r1, r6
 800d6f4:	bf28      	it	cs
 800d6f6:	463a      	movcs	r2, r7
 800d6f8:	f7ff fe1e 	bl	800d338 <memcpy>
 800d6fc:	4631      	mov	r1, r6
 800d6fe:	4640      	mov	r0, r8
 800d700:	f7ff fe46 	bl	800d390 <_free_r>
 800d704:	e7e1      	b.n	800d6ca <_realloc_r+0x1e>
 800d706:	4635      	mov	r5, r6
 800d708:	e7df      	b.n	800d6ca <_realloc_r+0x1e>

0800d70a <__ssputs_r>:
 800d70a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d70e:	688e      	ldr	r6, [r1, #8]
 800d710:	429e      	cmp	r6, r3
 800d712:	4682      	mov	sl, r0
 800d714:	460c      	mov	r4, r1
 800d716:	4690      	mov	r8, r2
 800d718:	461f      	mov	r7, r3
 800d71a:	d838      	bhi.n	800d78e <__ssputs_r+0x84>
 800d71c:	898a      	ldrh	r2, [r1, #12]
 800d71e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d722:	d032      	beq.n	800d78a <__ssputs_r+0x80>
 800d724:	6825      	ldr	r5, [r4, #0]
 800d726:	6909      	ldr	r1, [r1, #16]
 800d728:	eba5 0901 	sub.w	r9, r5, r1
 800d72c:	6965      	ldr	r5, [r4, #20]
 800d72e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d732:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d736:	3301      	adds	r3, #1
 800d738:	444b      	add	r3, r9
 800d73a:	106d      	asrs	r5, r5, #1
 800d73c:	429d      	cmp	r5, r3
 800d73e:	bf38      	it	cc
 800d740:	461d      	movcc	r5, r3
 800d742:	0553      	lsls	r3, r2, #21
 800d744:	d531      	bpl.n	800d7aa <__ssputs_r+0xa0>
 800d746:	4629      	mov	r1, r5
 800d748:	f7ff fe8e 	bl	800d468 <_malloc_r>
 800d74c:	4606      	mov	r6, r0
 800d74e:	b950      	cbnz	r0, 800d766 <__ssputs_r+0x5c>
 800d750:	230c      	movs	r3, #12
 800d752:	f8ca 3000 	str.w	r3, [sl]
 800d756:	89a3      	ldrh	r3, [r4, #12]
 800d758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75c:	81a3      	strh	r3, [r4, #12]
 800d75e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d766:	6921      	ldr	r1, [r4, #16]
 800d768:	464a      	mov	r2, r9
 800d76a:	f7ff fde5 	bl	800d338 <memcpy>
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d778:	81a3      	strh	r3, [r4, #12]
 800d77a:	6126      	str	r6, [r4, #16]
 800d77c:	6165      	str	r5, [r4, #20]
 800d77e:	444e      	add	r6, r9
 800d780:	eba5 0509 	sub.w	r5, r5, r9
 800d784:	6026      	str	r6, [r4, #0]
 800d786:	60a5      	str	r5, [r4, #8]
 800d788:	463e      	mov	r6, r7
 800d78a:	42be      	cmp	r6, r7
 800d78c:	d900      	bls.n	800d790 <__ssputs_r+0x86>
 800d78e:	463e      	mov	r6, r7
 800d790:	6820      	ldr	r0, [r4, #0]
 800d792:	4632      	mov	r2, r6
 800d794:	4641      	mov	r1, r8
 800d796:	f000 faa7 	bl	800dce8 <memmove>
 800d79a:	68a3      	ldr	r3, [r4, #8]
 800d79c:	1b9b      	subs	r3, r3, r6
 800d79e:	60a3      	str	r3, [r4, #8]
 800d7a0:	6823      	ldr	r3, [r4, #0]
 800d7a2:	4433      	add	r3, r6
 800d7a4:	6023      	str	r3, [r4, #0]
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	e7db      	b.n	800d762 <__ssputs_r+0x58>
 800d7aa:	462a      	mov	r2, r5
 800d7ac:	f7ff ff7e 	bl	800d6ac <_realloc_r>
 800d7b0:	4606      	mov	r6, r0
 800d7b2:	2800      	cmp	r0, #0
 800d7b4:	d1e1      	bne.n	800d77a <__ssputs_r+0x70>
 800d7b6:	6921      	ldr	r1, [r4, #16]
 800d7b8:	4650      	mov	r0, sl
 800d7ba:	f7ff fde9 	bl	800d390 <_free_r>
 800d7be:	e7c7      	b.n	800d750 <__ssputs_r+0x46>

0800d7c0 <_svfiprintf_r>:
 800d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7c4:	4698      	mov	r8, r3
 800d7c6:	898b      	ldrh	r3, [r1, #12]
 800d7c8:	061b      	lsls	r3, r3, #24
 800d7ca:	b09d      	sub	sp, #116	; 0x74
 800d7cc:	4607      	mov	r7, r0
 800d7ce:	460d      	mov	r5, r1
 800d7d0:	4614      	mov	r4, r2
 800d7d2:	d50e      	bpl.n	800d7f2 <_svfiprintf_r+0x32>
 800d7d4:	690b      	ldr	r3, [r1, #16]
 800d7d6:	b963      	cbnz	r3, 800d7f2 <_svfiprintf_r+0x32>
 800d7d8:	2140      	movs	r1, #64	; 0x40
 800d7da:	f7ff fe45 	bl	800d468 <_malloc_r>
 800d7de:	6028      	str	r0, [r5, #0]
 800d7e0:	6128      	str	r0, [r5, #16]
 800d7e2:	b920      	cbnz	r0, 800d7ee <_svfiprintf_r+0x2e>
 800d7e4:	230c      	movs	r3, #12
 800d7e6:	603b      	str	r3, [r7, #0]
 800d7e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7ec:	e0d1      	b.n	800d992 <_svfiprintf_r+0x1d2>
 800d7ee:	2340      	movs	r3, #64	; 0x40
 800d7f0:	616b      	str	r3, [r5, #20]
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f6:	2320      	movs	r3, #32
 800d7f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800d800:	2330      	movs	r3, #48	; 0x30
 800d802:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d9ac <_svfiprintf_r+0x1ec>
 800d806:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d80a:	f04f 0901 	mov.w	r9, #1
 800d80e:	4623      	mov	r3, r4
 800d810:	469a      	mov	sl, r3
 800d812:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d816:	b10a      	cbz	r2, 800d81c <_svfiprintf_r+0x5c>
 800d818:	2a25      	cmp	r2, #37	; 0x25
 800d81a:	d1f9      	bne.n	800d810 <_svfiprintf_r+0x50>
 800d81c:	ebba 0b04 	subs.w	fp, sl, r4
 800d820:	d00b      	beq.n	800d83a <_svfiprintf_r+0x7a>
 800d822:	465b      	mov	r3, fp
 800d824:	4622      	mov	r2, r4
 800d826:	4629      	mov	r1, r5
 800d828:	4638      	mov	r0, r7
 800d82a:	f7ff ff6e 	bl	800d70a <__ssputs_r>
 800d82e:	3001      	adds	r0, #1
 800d830:	f000 80aa 	beq.w	800d988 <_svfiprintf_r+0x1c8>
 800d834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d836:	445a      	add	r2, fp
 800d838:	9209      	str	r2, [sp, #36]	; 0x24
 800d83a:	f89a 3000 	ldrb.w	r3, [sl]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	f000 80a2 	beq.w	800d988 <_svfiprintf_r+0x1c8>
 800d844:	2300      	movs	r3, #0
 800d846:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d84a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d84e:	f10a 0a01 	add.w	sl, sl, #1
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	9307      	str	r3, [sp, #28]
 800d856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d85a:	931a      	str	r3, [sp, #104]	; 0x68
 800d85c:	4654      	mov	r4, sl
 800d85e:	2205      	movs	r2, #5
 800d860:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d864:	4851      	ldr	r0, [pc, #324]	; (800d9ac <_svfiprintf_r+0x1ec>)
 800d866:	f7f2 fcbb 	bl	80001e0 <memchr>
 800d86a:	9a04      	ldr	r2, [sp, #16]
 800d86c:	b9d8      	cbnz	r0, 800d8a6 <_svfiprintf_r+0xe6>
 800d86e:	06d0      	lsls	r0, r2, #27
 800d870:	bf44      	itt	mi
 800d872:	2320      	movmi	r3, #32
 800d874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d878:	0711      	lsls	r1, r2, #28
 800d87a:	bf44      	itt	mi
 800d87c:	232b      	movmi	r3, #43	; 0x2b
 800d87e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d882:	f89a 3000 	ldrb.w	r3, [sl]
 800d886:	2b2a      	cmp	r3, #42	; 0x2a
 800d888:	d015      	beq.n	800d8b6 <_svfiprintf_r+0xf6>
 800d88a:	9a07      	ldr	r2, [sp, #28]
 800d88c:	4654      	mov	r4, sl
 800d88e:	2000      	movs	r0, #0
 800d890:	f04f 0c0a 	mov.w	ip, #10
 800d894:	4621      	mov	r1, r4
 800d896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d89a:	3b30      	subs	r3, #48	; 0x30
 800d89c:	2b09      	cmp	r3, #9
 800d89e:	d94e      	bls.n	800d93e <_svfiprintf_r+0x17e>
 800d8a0:	b1b0      	cbz	r0, 800d8d0 <_svfiprintf_r+0x110>
 800d8a2:	9207      	str	r2, [sp, #28]
 800d8a4:	e014      	b.n	800d8d0 <_svfiprintf_r+0x110>
 800d8a6:	eba0 0308 	sub.w	r3, r0, r8
 800d8aa:	fa09 f303 	lsl.w	r3, r9, r3
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	9304      	str	r3, [sp, #16]
 800d8b2:	46a2      	mov	sl, r4
 800d8b4:	e7d2      	b.n	800d85c <_svfiprintf_r+0x9c>
 800d8b6:	9b03      	ldr	r3, [sp, #12]
 800d8b8:	1d19      	adds	r1, r3, #4
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	9103      	str	r1, [sp, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	bfbb      	ittet	lt
 800d8c2:	425b      	neglt	r3, r3
 800d8c4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8c8:	9307      	strge	r3, [sp, #28]
 800d8ca:	9307      	strlt	r3, [sp, #28]
 800d8cc:	bfb8      	it	lt
 800d8ce:	9204      	strlt	r2, [sp, #16]
 800d8d0:	7823      	ldrb	r3, [r4, #0]
 800d8d2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8d4:	d10c      	bne.n	800d8f0 <_svfiprintf_r+0x130>
 800d8d6:	7863      	ldrb	r3, [r4, #1]
 800d8d8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8da:	d135      	bne.n	800d948 <_svfiprintf_r+0x188>
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	1d1a      	adds	r2, r3, #4
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	9203      	str	r2, [sp, #12]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	bfb8      	it	lt
 800d8e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d8ec:	3402      	adds	r4, #2
 800d8ee:	9305      	str	r3, [sp, #20]
 800d8f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9bc <_svfiprintf_r+0x1fc>
 800d8f4:	7821      	ldrb	r1, [r4, #0]
 800d8f6:	2203      	movs	r2, #3
 800d8f8:	4650      	mov	r0, sl
 800d8fa:	f7f2 fc71 	bl	80001e0 <memchr>
 800d8fe:	b140      	cbz	r0, 800d912 <_svfiprintf_r+0x152>
 800d900:	2340      	movs	r3, #64	; 0x40
 800d902:	eba0 000a 	sub.w	r0, r0, sl
 800d906:	fa03 f000 	lsl.w	r0, r3, r0
 800d90a:	9b04      	ldr	r3, [sp, #16]
 800d90c:	4303      	orrs	r3, r0
 800d90e:	3401      	adds	r4, #1
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d916:	4826      	ldr	r0, [pc, #152]	; (800d9b0 <_svfiprintf_r+0x1f0>)
 800d918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d91c:	2206      	movs	r2, #6
 800d91e:	f7f2 fc5f 	bl	80001e0 <memchr>
 800d922:	2800      	cmp	r0, #0
 800d924:	d038      	beq.n	800d998 <_svfiprintf_r+0x1d8>
 800d926:	4b23      	ldr	r3, [pc, #140]	; (800d9b4 <_svfiprintf_r+0x1f4>)
 800d928:	bb1b      	cbnz	r3, 800d972 <_svfiprintf_r+0x1b2>
 800d92a:	9b03      	ldr	r3, [sp, #12]
 800d92c:	3307      	adds	r3, #7
 800d92e:	f023 0307 	bic.w	r3, r3, #7
 800d932:	3308      	adds	r3, #8
 800d934:	9303      	str	r3, [sp, #12]
 800d936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d938:	4433      	add	r3, r6
 800d93a:	9309      	str	r3, [sp, #36]	; 0x24
 800d93c:	e767      	b.n	800d80e <_svfiprintf_r+0x4e>
 800d93e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d942:	460c      	mov	r4, r1
 800d944:	2001      	movs	r0, #1
 800d946:	e7a5      	b.n	800d894 <_svfiprintf_r+0xd4>
 800d948:	2300      	movs	r3, #0
 800d94a:	3401      	adds	r4, #1
 800d94c:	9305      	str	r3, [sp, #20]
 800d94e:	4619      	mov	r1, r3
 800d950:	f04f 0c0a 	mov.w	ip, #10
 800d954:	4620      	mov	r0, r4
 800d956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d95a:	3a30      	subs	r2, #48	; 0x30
 800d95c:	2a09      	cmp	r2, #9
 800d95e:	d903      	bls.n	800d968 <_svfiprintf_r+0x1a8>
 800d960:	2b00      	cmp	r3, #0
 800d962:	d0c5      	beq.n	800d8f0 <_svfiprintf_r+0x130>
 800d964:	9105      	str	r1, [sp, #20]
 800d966:	e7c3      	b.n	800d8f0 <_svfiprintf_r+0x130>
 800d968:	fb0c 2101 	mla	r1, ip, r1, r2
 800d96c:	4604      	mov	r4, r0
 800d96e:	2301      	movs	r3, #1
 800d970:	e7f0      	b.n	800d954 <_svfiprintf_r+0x194>
 800d972:	ab03      	add	r3, sp, #12
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	462a      	mov	r2, r5
 800d978:	4b0f      	ldr	r3, [pc, #60]	; (800d9b8 <_svfiprintf_r+0x1f8>)
 800d97a:	a904      	add	r1, sp, #16
 800d97c:	4638      	mov	r0, r7
 800d97e:	f3af 8000 	nop.w
 800d982:	1c42      	adds	r2, r0, #1
 800d984:	4606      	mov	r6, r0
 800d986:	d1d6      	bne.n	800d936 <_svfiprintf_r+0x176>
 800d988:	89ab      	ldrh	r3, [r5, #12]
 800d98a:	065b      	lsls	r3, r3, #25
 800d98c:	f53f af2c 	bmi.w	800d7e8 <_svfiprintf_r+0x28>
 800d990:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d992:	b01d      	add	sp, #116	; 0x74
 800d994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d998:	ab03      	add	r3, sp, #12
 800d99a:	9300      	str	r3, [sp, #0]
 800d99c:	462a      	mov	r2, r5
 800d99e:	4b06      	ldr	r3, [pc, #24]	; (800d9b8 <_svfiprintf_r+0x1f8>)
 800d9a0:	a904      	add	r1, sp, #16
 800d9a2:	4638      	mov	r0, r7
 800d9a4:	f000 f87a 	bl	800da9c <_printf_i>
 800d9a8:	e7eb      	b.n	800d982 <_svfiprintf_r+0x1c2>
 800d9aa:	bf00      	nop
 800d9ac:	0802d2b8 	.word	0x0802d2b8
 800d9b0:	0802d2c2 	.word	0x0802d2c2
 800d9b4:	00000000 	.word	0x00000000
 800d9b8:	0800d70b 	.word	0x0800d70b
 800d9bc:	0802d2be 	.word	0x0802d2be

0800d9c0 <_printf_common>:
 800d9c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c4:	4616      	mov	r6, r2
 800d9c6:	4699      	mov	r9, r3
 800d9c8:	688a      	ldr	r2, [r1, #8]
 800d9ca:	690b      	ldr	r3, [r1, #16]
 800d9cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d9d0:	4293      	cmp	r3, r2
 800d9d2:	bfb8      	it	lt
 800d9d4:	4613      	movlt	r3, r2
 800d9d6:	6033      	str	r3, [r6, #0]
 800d9d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d9dc:	4607      	mov	r7, r0
 800d9de:	460c      	mov	r4, r1
 800d9e0:	b10a      	cbz	r2, 800d9e6 <_printf_common+0x26>
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	6033      	str	r3, [r6, #0]
 800d9e6:	6823      	ldr	r3, [r4, #0]
 800d9e8:	0699      	lsls	r1, r3, #26
 800d9ea:	bf42      	ittt	mi
 800d9ec:	6833      	ldrmi	r3, [r6, #0]
 800d9ee:	3302      	addmi	r3, #2
 800d9f0:	6033      	strmi	r3, [r6, #0]
 800d9f2:	6825      	ldr	r5, [r4, #0]
 800d9f4:	f015 0506 	ands.w	r5, r5, #6
 800d9f8:	d106      	bne.n	800da08 <_printf_common+0x48>
 800d9fa:	f104 0a19 	add.w	sl, r4, #25
 800d9fe:	68e3      	ldr	r3, [r4, #12]
 800da00:	6832      	ldr	r2, [r6, #0]
 800da02:	1a9b      	subs	r3, r3, r2
 800da04:	42ab      	cmp	r3, r5
 800da06:	dc26      	bgt.n	800da56 <_printf_common+0x96>
 800da08:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da0c:	1e13      	subs	r3, r2, #0
 800da0e:	6822      	ldr	r2, [r4, #0]
 800da10:	bf18      	it	ne
 800da12:	2301      	movne	r3, #1
 800da14:	0692      	lsls	r2, r2, #26
 800da16:	d42b      	bmi.n	800da70 <_printf_common+0xb0>
 800da18:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da1c:	4649      	mov	r1, r9
 800da1e:	4638      	mov	r0, r7
 800da20:	47c0      	blx	r8
 800da22:	3001      	adds	r0, #1
 800da24:	d01e      	beq.n	800da64 <_printf_common+0xa4>
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	68e5      	ldr	r5, [r4, #12]
 800da2a:	6832      	ldr	r2, [r6, #0]
 800da2c:	f003 0306 	and.w	r3, r3, #6
 800da30:	2b04      	cmp	r3, #4
 800da32:	bf08      	it	eq
 800da34:	1aad      	subeq	r5, r5, r2
 800da36:	68a3      	ldr	r3, [r4, #8]
 800da38:	6922      	ldr	r2, [r4, #16]
 800da3a:	bf0c      	ite	eq
 800da3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da40:	2500      	movne	r5, #0
 800da42:	4293      	cmp	r3, r2
 800da44:	bfc4      	itt	gt
 800da46:	1a9b      	subgt	r3, r3, r2
 800da48:	18ed      	addgt	r5, r5, r3
 800da4a:	2600      	movs	r6, #0
 800da4c:	341a      	adds	r4, #26
 800da4e:	42b5      	cmp	r5, r6
 800da50:	d11a      	bne.n	800da88 <_printf_common+0xc8>
 800da52:	2000      	movs	r0, #0
 800da54:	e008      	b.n	800da68 <_printf_common+0xa8>
 800da56:	2301      	movs	r3, #1
 800da58:	4652      	mov	r2, sl
 800da5a:	4649      	mov	r1, r9
 800da5c:	4638      	mov	r0, r7
 800da5e:	47c0      	blx	r8
 800da60:	3001      	adds	r0, #1
 800da62:	d103      	bne.n	800da6c <_printf_common+0xac>
 800da64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800da68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da6c:	3501      	adds	r5, #1
 800da6e:	e7c6      	b.n	800d9fe <_printf_common+0x3e>
 800da70:	18e1      	adds	r1, r4, r3
 800da72:	1c5a      	adds	r2, r3, #1
 800da74:	2030      	movs	r0, #48	; 0x30
 800da76:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800da7a:	4422      	add	r2, r4
 800da7c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800da80:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800da84:	3302      	adds	r3, #2
 800da86:	e7c7      	b.n	800da18 <_printf_common+0x58>
 800da88:	2301      	movs	r3, #1
 800da8a:	4622      	mov	r2, r4
 800da8c:	4649      	mov	r1, r9
 800da8e:	4638      	mov	r0, r7
 800da90:	47c0      	blx	r8
 800da92:	3001      	adds	r0, #1
 800da94:	d0e6      	beq.n	800da64 <_printf_common+0xa4>
 800da96:	3601      	adds	r6, #1
 800da98:	e7d9      	b.n	800da4e <_printf_common+0x8e>
	...

0800da9c <_printf_i>:
 800da9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800daa0:	7e0f      	ldrb	r7, [r1, #24]
 800daa2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800daa4:	2f78      	cmp	r7, #120	; 0x78
 800daa6:	4691      	mov	r9, r2
 800daa8:	4680      	mov	r8, r0
 800daaa:	460c      	mov	r4, r1
 800daac:	469a      	mov	sl, r3
 800daae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dab2:	d807      	bhi.n	800dac4 <_printf_i+0x28>
 800dab4:	2f62      	cmp	r7, #98	; 0x62
 800dab6:	d80a      	bhi.n	800dace <_printf_i+0x32>
 800dab8:	2f00      	cmp	r7, #0
 800daba:	f000 80d8 	beq.w	800dc6e <_printf_i+0x1d2>
 800dabe:	2f58      	cmp	r7, #88	; 0x58
 800dac0:	f000 80a3 	beq.w	800dc0a <_printf_i+0x16e>
 800dac4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dac8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dacc:	e03a      	b.n	800db44 <_printf_i+0xa8>
 800dace:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dad2:	2b15      	cmp	r3, #21
 800dad4:	d8f6      	bhi.n	800dac4 <_printf_i+0x28>
 800dad6:	a101      	add	r1, pc, #4	; (adr r1, 800dadc <_printf_i+0x40>)
 800dad8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dadc:	0800db35 	.word	0x0800db35
 800dae0:	0800db49 	.word	0x0800db49
 800dae4:	0800dac5 	.word	0x0800dac5
 800dae8:	0800dac5 	.word	0x0800dac5
 800daec:	0800dac5 	.word	0x0800dac5
 800daf0:	0800dac5 	.word	0x0800dac5
 800daf4:	0800db49 	.word	0x0800db49
 800daf8:	0800dac5 	.word	0x0800dac5
 800dafc:	0800dac5 	.word	0x0800dac5
 800db00:	0800dac5 	.word	0x0800dac5
 800db04:	0800dac5 	.word	0x0800dac5
 800db08:	0800dc55 	.word	0x0800dc55
 800db0c:	0800db79 	.word	0x0800db79
 800db10:	0800dc37 	.word	0x0800dc37
 800db14:	0800dac5 	.word	0x0800dac5
 800db18:	0800dac5 	.word	0x0800dac5
 800db1c:	0800dc77 	.word	0x0800dc77
 800db20:	0800dac5 	.word	0x0800dac5
 800db24:	0800db79 	.word	0x0800db79
 800db28:	0800dac5 	.word	0x0800dac5
 800db2c:	0800dac5 	.word	0x0800dac5
 800db30:	0800dc3f 	.word	0x0800dc3f
 800db34:	682b      	ldr	r3, [r5, #0]
 800db36:	1d1a      	adds	r2, r3, #4
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	602a      	str	r2, [r5, #0]
 800db3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db40:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800db44:	2301      	movs	r3, #1
 800db46:	e0a3      	b.n	800dc90 <_printf_i+0x1f4>
 800db48:	6820      	ldr	r0, [r4, #0]
 800db4a:	6829      	ldr	r1, [r5, #0]
 800db4c:	0606      	lsls	r6, r0, #24
 800db4e:	f101 0304 	add.w	r3, r1, #4
 800db52:	d50a      	bpl.n	800db6a <_printf_i+0xce>
 800db54:	680e      	ldr	r6, [r1, #0]
 800db56:	602b      	str	r3, [r5, #0]
 800db58:	2e00      	cmp	r6, #0
 800db5a:	da03      	bge.n	800db64 <_printf_i+0xc8>
 800db5c:	232d      	movs	r3, #45	; 0x2d
 800db5e:	4276      	negs	r6, r6
 800db60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db64:	485e      	ldr	r0, [pc, #376]	; (800dce0 <_printf_i+0x244>)
 800db66:	230a      	movs	r3, #10
 800db68:	e019      	b.n	800db9e <_printf_i+0x102>
 800db6a:	680e      	ldr	r6, [r1, #0]
 800db6c:	602b      	str	r3, [r5, #0]
 800db6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800db72:	bf18      	it	ne
 800db74:	b236      	sxthne	r6, r6
 800db76:	e7ef      	b.n	800db58 <_printf_i+0xbc>
 800db78:	682b      	ldr	r3, [r5, #0]
 800db7a:	6820      	ldr	r0, [r4, #0]
 800db7c:	1d19      	adds	r1, r3, #4
 800db7e:	6029      	str	r1, [r5, #0]
 800db80:	0601      	lsls	r1, r0, #24
 800db82:	d501      	bpl.n	800db88 <_printf_i+0xec>
 800db84:	681e      	ldr	r6, [r3, #0]
 800db86:	e002      	b.n	800db8e <_printf_i+0xf2>
 800db88:	0646      	lsls	r6, r0, #25
 800db8a:	d5fb      	bpl.n	800db84 <_printf_i+0xe8>
 800db8c:	881e      	ldrh	r6, [r3, #0]
 800db8e:	4854      	ldr	r0, [pc, #336]	; (800dce0 <_printf_i+0x244>)
 800db90:	2f6f      	cmp	r7, #111	; 0x6f
 800db92:	bf0c      	ite	eq
 800db94:	2308      	moveq	r3, #8
 800db96:	230a      	movne	r3, #10
 800db98:	2100      	movs	r1, #0
 800db9a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800db9e:	6865      	ldr	r5, [r4, #4]
 800dba0:	60a5      	str	r5, [r4, #8]
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	bfa2      	ittt	ge
 800dba6:	6821      	ldrge	r1, [r4, #0]
 800dba8:	f021 0104 	bicge.w	r1, r1, #4
 800dbac:	6021      	strge	r1, [r4, #0]
 800dbae:	b90e      	cbnz	r6, 800dbb4 <_printf_i+0x118>
 800dbb0:	2d00      	cmp	r5, #0
 800dbb2:	d04d      	beq.n	800dc50 <_printf_i+0x1b4>
 800dbb4:	4615      	mov	r5, r2
 800dbb6:	fbb6 f1f3 	udiv	r1, r6, r3
 800dbba:	fb03 6711 	mls	r7, r3, r1, r6
 800dbbe:	5dc7      	ldrb	r7, [r0, r7]
 800dbc0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dbc4:	4637      	mov	r7, r6
 800dbc6:	42bb      	cmp	r3, r7
 800dbc8:	460e      	mov	r6, r1
 800dbca:	d9f4      	bls.n	800dbb6 <_printf_i+0x11a>
 800dbcc:	2b08      	cmp	r3, #8
 800dbce:	d10b      	bne.n	800dbe8 <_printf_i+0x14c>
 800dbd0:	6823      	ldr	r3, [r4, #0]
 800dbd2:	07de      	lsls	r6, r3, #31
 800dbd4:	d508      	bpl.n	800dbe8 <_printf_i+0x14c>
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	6861      	ldr	r1, [r4, #4]
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	bfde      	ittt	le
 800dbde:	2330      	movle	r3, #48	; 0x30
 800dbe0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dbe4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dbe8:	1b52      	subs	r2, r2, r5
 800dbea:	6122      	str	r2, [r4, #16]
 800dbec:	f8cd a000 	str.w	sl, [sp]
 800dbf0:	464b      	mov	r3, r9
 800dbf2:	aa03      	add	r2, sp, #12
 800dbf4:	4621      	mov	r1, r4
 800dbf6:	4640      	mov	r0, r8
 800dbf8:	f7ff fee2 	bl	800d9c0 <_printf_common>
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d14c      	bne.n	800dc9a <_printf_i+0x1fe>
 800dc00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc04:	b004      	add	sp, #16
 800dc06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc0a:	4835      	ldr	r0, [pc, #212]	; (800dce0 <_printf_i+0x244>)
 800dc0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc10:	6829      	ldr	r1, [r5, #0]
 800dc12:	6823      	ldr	r3, [r4, #0]
 800dc14:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc18:	6029      	str	r1, [r5, #0]
 800dc1a:	061d      	lsls	r5, r3, #24
 800dc1c:	d514      	bpl.n	800dc48 <_printf_i+0x1ac>
 800dc1e:	07df      	lsls	r7, r3, #31
 800dc20:	bf44      	itt	mi
 800dc22:	f043 0320 	orrmi.w	r3, r3, #32
 800dc26:	6023      	strmi	r3, [r4, #0]
 800dc28:	b91e      	cbnz	r6, 800dc32 <_printf_i+0x196>
 800dc2a:	6823      	ldr	r3, [r4, #0]
 800dc2c:	f023 0320 	bic.w	r3, r3, #32
 800dc30:	6023      	str	r3, [r4, #0]
 800dc32:	2310      	movs	r3, #16
 800dc34:	e7b0      	b.n	800db98 <_printf_i+0xfc>
 800dc36:	6823      	ldr	r3, [r4, #0]
 800dc38:	f043 0320 	orr.w	r3, r3, #32
 800dc3c:	6023      	str	r3, [r4, #0]
 800dc3e:	2378      	movs	r3, #120	; 0x78
 800dc40:	4828      	ldr	r0, [pc, #160]	; (800dce4 <_printf_i+0x248>)
 800dc42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc46:	e7e3      	b.n	800dc10 <_printf_i+0x174>
 800dc48:	0659      	lsls	r1, r3, #25
 800dc4a:	bf48      	it	mi
 800dc4c:	b2b6      	uxthmi	r6, r6
 800dc4e:	e7e6      	b.n	800dc1e <_printf_i+0x182>
 800dc50:	4615      	mov	r5, r2
 800dc52:	e7bb      	b.n	800dbcc <_printf_i+0x130>
 800dc54:	682b      	ldr	r3, [r5, #0]
 800dc56:	6826      	ldr	r6, [r4, #0]
 800dc58:	6961      	ldr	r1, [r4, #20]
 800dc5a:	1d18      	adds	r0, r3, #4
 800dc5c:	6028      	str	r0, [r5, #0]
 800dc5e:	0635      	lsls	r5, r6, #24
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	d501      	bpl.n	800dc68 <_printf_i+0x1cc>
 800dc64:	6019      	str	r1, [r3, #0]
 800dc66:	e002      	b.n	800dc6e <_printf_i+0x1d2>
 800dc68:	0670      	lsls	r0, r6, #25
 800dc6a:	d5fb      	bpl.n	800dc64 <_printf_i+0x1c8>
 800dc6c:	8019      	strh	r1, [r3, #0]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	6123      	str	r3, [r4, #16]
 800dc72:	4615      	mov	r5, r2
 800dc74:	e7ba      	b.n	800dbec <_printf_i+0x150>
 800dc76:	682b      	ldr	r3, [r5, #0]
 800dc78:	1d1a      	adds	r2, r3, #4
 800dc7a:	602a      	str	r2, [r5, #0]
 800dc7c:	681d      	ldr	r5, [r3, #0]
 800dc7e:	6862      	ldr	r2, [r4, #4]
 800dc80:	2100      	movs	r1, #0
 800dc82:	4628      	mov	r0, r5
 800dc84:	f7f2 faac 	bl	80001e0 <memchr>
 800dc88:	b108      	cbz	r0, 800dc8e <_printf_i+0x1f2>
 800dc8a:	1b40      	subs	r0, r0, r5
 800dc8c:	6060      	str	r0, [r4, #4]
 800dc8e:	6863      	ldr	r3, [r4, #4]
 800dc90:	6123      	str	r3, [r4, #16]
 800dc92:	2300      	movs	r3, #0
 800dc94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dc98:	e7a8      	b.n	800dbec <_printf_i+0x150>
 800dc9a:	6923      	ldr	r3, [r4, #16]
 800dc9c:	462a      	mov	r2, r5
 800dc9e:	4649      	mov	r1, r9
 800dca0:	4640      	mov	r0, r8
 800dca2:	47d0      	blx	sl
 800dca4:	3001      	adds	r0, #1
 800dca6:	d0ab      	beq.n	800dc00 <_printf_i+0x164>
 800dca8:	6823      	ldr	r3, [r4, #0]
 800dcaa:	079b      	lsls	r3, r3, #30
 800dcac:	d413      	bmi.n	800dcd6 <_printf_i+0x23a>
 800dcae:	68e0      	ldr	r0, [r4, #12]
 800dcb0:	9b03      	ldr	r3, [sp, #12]
 800dcb2:	4298      	cmp	r0, r3
 800dcb4:	bfb8      	it	lt
 800dcb6:	4618      	movlt	r0, r3
 800dcb8:	e7a4      	b.n	800dc04 <_printf_i+0x168>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4632      	mov	r2, r6
 800dcbe:	4649      	mov	r1, r9
 800dcc0:	4640      	mov	r0, r8
 800dcc2:	47d0      	blx	sl
 800dcc4:	3001      	adds	r0, #1
 800dcc6:	d09b      	beq.n	800dc00 <_printf_i+0x164>
 800dcc8:	3501      	adds	r5, #1
 800dcca:	68e3      	ldr	r3, [r4, #12]
 800dccc:	9903      	ldr	r1, [sp, #12]
 800dcce:	1a5b      	subs	r3, r3, r1
 800dcd0:	42ab      	cmp	r3, r5
 800dcd2:	dcf2      	bgt.n	800dcba <_printf_i+0x21e>
 800dcd4:	e7eb      	b.n	800dcae <_printf_i+0x212>
 800dcd6:	2500      	movs	r5, #0
 800dcd8:	f104 0619 	add.w	r6, r4, #25
 800dcdc:	e7f5      	b.n	800dcca <_printf_i+0x22e>
 800dcde:	bf00      	nop
 800dce0:	0802d2c9 	.word	0x0802d2c9
 800dce4:	0802d2da 	.word	0x0802d2da

0800dce8 <memmove>:
 800dce8:	4288      	cmp	r0, r1
 800dcea:	b510      	push	{r4, lr}
 800dcec:	eb01 0402 	add.w	r4, r1, r2
 800dcf0:	d902      	bls.n	800dcf8 <memmove+0x10>
 800dcf2:	4284      	cmp	r4, r0
 800dcf4:	4623      	mov	r3, r4
 800dcf6:	d807      	bhi.n	800dd08 <memmove+0x20>
 800dcf8:	1e43      	subs	r3, r0, #1
 800dcfa:	42a1      	cmp	r1, r4
 800dcfc:	d008      	beq.n	800dd10 <memmove+0x28>
 800dcfe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd06:	e7f8      	b.n	800dcfa <memmove+0x12>
 800dd08:	4402      	add	r2, r0
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	428a      	cmp	r2, r1
 800dd0e:	d100      	bne.n	800dd12 <memmove+0x2a>
 800dd10:	bd10      	pop	{r4, pc}
 800dd12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd1a:	e7f7      	b.n	800dd0c <memmove+0x24>

0800dd1c <_malloc_usable_size_r>:
 800dd1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd20:	1f18      	subs	r0, r3, #4
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	bfbc      	itt	lt
 800dd26:	580b      	ldrlt	r3, [r1, r0]
 800dd28:	18c0      	addlt	r0, r0, r3
 800dd2a:	4770      	bx	lr

0800dd2c <_init>:
 800dd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd2e:	bf00      	nop
 800dd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd32:	bc08      	pop	{r3}
 800dd34:	469e      	mov	lr, r3
 800dd36:	4770      	bx	lr

0800dd38 <_fini>:
 800dd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd3a:	bf00      	nop
 800dd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd3e:	bc08      	pop	{r3}
 800dd40:	469e      	mov	lr, r3
 800dd42:	4770      	bx	lr
