
Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001372c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080138cc  080138cc  000238cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013980  08013980  0003047c  2**0
                  CONTENTS
  4 .ARM          00000008  08013980  08013980  00023980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013988  08013988  0003047c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013988  08013988  00023988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801398c  0801398c  0002398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000047c  20000000  08013990  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b70  2000047c  08013e0c  0003047c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002fec  08013e0c  00032fec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003047c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027bac  00000000  00000000  000304ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b7a  00000000  00000000  00058058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e30  00000000  00000000  0005cbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c50  00000000  00000000  0005ea08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d2fd  00000000  00000000  00060658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000275f2  00000000  00000000  0007d955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a254c  00000000  00000000  000a4f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147493  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008570  00000000  00000000  001474e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000047c 	.word	0x2000047c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080138b4 	.word	0x080138b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000480 	.word	0x20000480
 80001dc:	080138b4 	.word	0x080138b4

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <EEPROM_ReadUint8>:
#include "EEPROMTypes.h"

extern I2C_HandleTypeDef hi2c2;

HAL_StatusTypeDef EEPROM_ReadUint8(Euint8 *data)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af04      	add	r7, sp, #16
 8000d96:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR, data->Address, 1, &data->Value, 1, 100);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2164      	movs	r1, #100	; 0x64
 8000da4:	9102      	str	r1, [sp, #8]
 8000da6:	2101      	movs	r1, #1
 8000da8:	9101      	str	r1, [sp, #4]
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2301      	movs	r3, #1
 8000dae:	21a0      	movs	r1, #160	; 0xa0
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <EEPROM_ReadUint8+0x30>)
 8000db2:	f003 f897 	bl	8003ee4 <HAL_I2C_Mem_Read>
 8000db6:	4603      	mov	r3, r0
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	200004f0 	.word	0x200004f0

08000dc4 <EEPROM_ReadInt32>:
HAL_StatusTypeDef EEPROM_WriteUint8(Euint8 *data)
{
	return HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR, data->Address, 1, &data->Value, 1, 100);
}
HAL_StatusTypeDef EEPROM_ReadInt32(Eint32 *data)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af04      	add	r7, sp, #16
 8000dca:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR, data->BaseAddress, 1, (uint8_t*)&data->Value, 1, 100);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	b29a      	uxth	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	2164      	movs	r1, #100	; 0x64
 8000dd8:	9102      	str	r1, [sp, #8]
 8000dda:	2101      	movs	r1, #1
 8000ddc:	9101      	str	r1, [sp, #4]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	2301      	movs	r3, #1
 8000de2:	21a0      	movs	r1, #160	; 0xa0
 8000de4:	4803      	ldr	r0, [pc, #12]	; (8000df4 <EEPROM_ReadInt32+0x30>)
 8000de6:	f003 f87d 	bl	8003ee4 <HAL_I2C_Mem_Read>
 8000dea:	4603      	mov	r3, r0
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200004f0 	.word	0x200004f0

08000df8 <EEPROM_ReadFloat>:
HAL_StatusTypeDef EEPROM_WriteInt32(Eint32 *data)
{
	return HAL_I2C_Mem_Write(&hi2c2, EEPROM_ADDR, data->BaseAddress, 1, (uint8_t*)&data->Value, 1, 100);
}
HAL_StatusTypeDef EEPROM_ReadFloat(Efloat *data)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af02      	add	r7, sp, #8
 8000dfe:	6078      	str	r0, [r7, #4]
	return HAL_I2C_Mem_Read_DMA(&hi2c2, EEPROM_ADDR, data->BaseAddress, 1, (uint8_t*)&data->Value, sizeof(float));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	2104      	movs	r1, #4
 8000e0c:	9101      	str	r1, [sp, #4]
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	21a0      	movs	r1, #160	; 0xa0
 8000e14:	4803      	ldr	r0, [pc, #12]	; (8000e24 <EEPROM_ReadFloat+0x2c>)
 8000e16:	f003 fa8b 	bl	8004330 <HAL_I2C_Mem_Read_DMA>
 8000e1a:	4603      	mov	r3, r0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200004f0 	.word	0x200004f0

08000e28 <FatalError_EEPROM>:
#include "ErrorHandling.h"

extern UART_HandleTypeDef huart1;

void FatalError_EEPROM(uint8_t ID)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
	int i = 2;
 8000e32:	2302      	movs	r3, #2
 8000e34:	60fb      	str	r3, [r7, #12]
}
 8000e36:	bf00      	nop
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
	...

08000e44 <main>:
		.BaseAddress = KdBase,
		.Value = DefaultKd
};

int main(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
  HAL_Init();
 8000e4a:	f001 fc8f 	bl	800276c <HAL_Init>
  SystemClock_Config();
 8000e4e:	f000 fcc3 	bl	80017d8 <SystemClock_Config>
  MX_GPIO_Init();
 8000e52:	f001 f80b 	bl	8001e6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e56:	f000 ffc3 	bl	8001de0 <MX_DMA_Init>
  MX_RTC_Init();
 8000e5a:	f000 fd9f 	bl	800199c <MX_RTC_Init>
  MX_I2C1_Init();
 8000e5e:	f000 fd27 	bl	80018b0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000e62:	f000 fd53 	bl	800190c <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000e66:	f000 ff8f 	bl	8001d88 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000e6a:	f011 fb31 	bl	80124d0 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000e6e:	f000 fdbb 	bl	80019e8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000e72:	f000 fe09 	bl	8001a88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e76:	f000 fe53 	bl	8001b20 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e7a:	f000 fec7 	bl	8001c0c <MX_TIM4_Init>
  MX_TIM5_Init();
 8000e7e:	f000 ff35 	bl	8001cec <MX_TIM5_Init>
  MX_IWDG_Init();
 8000e82:	f000 fd71 	bl	8001968 <MX_IWDG_Init>

  //TODO Report that the MCU is starting

  MaxCCR = htim3.Init.Period;
 8000e86:	4b96      	ldr	r3, [pc, #600]	; (80010e0 <main+0x29c>)
 8000e88:	68db      	ldr	r3, [r3, #12]
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b95      	ldr	r3, [pc, #596]	; (80010e4 <main+0x2a0>)
 8000e8e:	801a      	strh	r2, [r3, #0]
  Dev->I2cHandle = &hi2c1;
 8000e90:	4b95      	ldr	r3, [pc, #596]	; (80010e8 <main+0x2a4>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a95      	ldr	r2, [pc, #596]	; (80010ec <main+0x2a8>)
 8000e96:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev->I2cDevAddr = 0x52;
 8000e9a:	4b93      	ldr	r3, [pc, #588]	; (80010e8 <main+0x2a4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2252      	movs	r2, #82	; 0x52
 8000ea0:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  for(uint16_t i = 0; i < CDC_CIRCULAR_BUFFER_SIZE; i++)
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	e00f      	b.n	8000eca <main+0x86>
  {
	  memset(CDCCircularBuffer[i], '\0', CDC_STR_SIZE);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	015b      	lsls	r3, r3, #5
 8000eae:	4a90      	ldr	r2, [pc, #576]	; (80010f0 <main+0x2ac>)
 8000eb0:	4413      	add	r3, r2
 8000eb2:	2220      	movs	r2, #32
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f012 f88c 	bl	8012fd4 <memset>
	  CDCSendFlags[i] = false;
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	4a8d      	ldr	r2, [pc, #564]	; (80010f4 <main+0x2b0>)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i = 0; i < CDC_CIRCULAR_BUFFER_SIZE; i++)
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	80fb      	strh	r3, [r7, #6]
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	2b3f      	cmp	r3, #63	; 0x3f
 8000ece:	d9ec      	bls.n	8000eaa <main+0x66>
  }

  //Disable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2180      	movs	r1, #128	; 0x80
 8000ed4:	4888      	ldr	r0, [pc, #544]	; (80010f8 <main+0x2b4>)
 8000ed6:	f002 fb83 	bl	80035e0 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000eda:	2014      	movs	r0, #20
 8000edc:	f001 fcb8 	bl	8002850 <HAL_Delay>

  //Enable XSHUT
  HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	2180      	movs	r1, #128	; 0x80
 8000ee4:	4884      	ldr	r0, [pc, #528]	; (80010f8 <main+0x2b4>)
 8000ee6:	f002 fb7b 	bl	80035e0 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000eea:	2014      	movs	r0, #20
 8000eec:	f001 fcb0 	bl	8002850 <HAL_Delay>

  VL53L0X_WaitDeviceBooted( Dev );
 8000ef0:	4b7d      	ldr	r3, [pc, #500]	; (80010e8 <main+0x2a4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f00a fe1f 	bl	800bb38 <VL53L0X_WaitDeviceBooted>
  VL53L0X_DataInit( Dev );
 8000efa:	4b7b      	ldr	r3, [pc, #492]	; (80010e8 <main+0x2a4>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f00a fb34 	bl	800b56c <VL53L0X_DataInit>
  VL53L0X_StaticInit( Dev );
 8000f04:	4b78      	ldr	r3, [pc, #480]	; (80010e8 <main+0x2a4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00a fc93 	bl	800b834 <VL53L0X_StaticInit>
  VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000f0e:	4b76      	ldr	r3, [pc, #472]	; (80010e8 <main+0x2a4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a7a      	ldr	r2, [pc, #488]	; (80010fc <main+0x2b8>)
 8000f14:	497a      	ldr	r1, [pc, #488]	; (8001100 <main+0x2bc>)
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00b fb2e 	bl	800c578 <VL53L0X_PerformRefCalibration>
  VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000f1c:	4b72      	ldr	r3, [pc, #456]	; (80010e8 <main+0x2a4>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a78      	ldr	r2, [pc, #480]	; (8001104 <main+0x2c0>)
 8000f22:	4979      	ldr	r1, [pc, #484]	; (8001108 <main+0x2c4>)
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00b ffb5 	bl	800ce94 <VL53L0X_PerformRefSpadManagement>
  VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000f2a:	4b6f      	ldr	r3, [pc, #444]	; (80010e8 <main+0x2a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f00a fe9f 	bl	800bc74 <VL53L0X_SetDeviceMode>
  HAL_IWDG_Refresh(&hiwdg);
 8000f36:	4875      	ldr	r0, [pc, #468]	; (800110c <main+0x2c8>)
 8000f38:	f004 f929 	bl	800518e <HAL_IWDG_Refresh>

  //Enable/Disable Sigma and Signal check
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000f3c:	4b6a      	ldr	r3, [pc, #424]	; (80010e8 <main+0x2a4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2201      	movs	r2, #1
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00b f911 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8000f4a:	4b67      	ldr	r3, [pc, #412]	; (80010e8 <main+0x2a4>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2101      	movs	r1, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f00b f90a 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8000f58:	4b63      	ldr	r3, [pc, #396]	; (80010e8 <main+0x2a4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f641 1299 	movw	r2, #6553	; 0x1999
 8000f60:	2101      	movs	r1, #1
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00b f9b2 	bl	800c2cc <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8000f68:	4b5f      	ldr	r3, [pc, #380]	; (80010e8 <main+0x2a4>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f00b f9aa 	bl	800c2cc <VL53L0X_SetLimitCheckValue>
  VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8000f78:	4b5b      	ldr	r3, [pc, #364]	; (80010e8 <main+0x2a4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00a fed5 	bl	800bd30 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8000f86:	4b58      	ldr	r3, [pc, #352]	; (80010e8 <main+0x2a4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2212      	movs	r2, #18
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f00a fef4 	bl	800bd7c <VL53L0X_SetVcselPulsePeriod>
  VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8000f94:	4b54      	ldr	r3, [pc, #336]	; (80010e8 <main+0x2a4>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	220e      	movs	r2, #14
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00a feed 	bl	800bd7c <VL53L0X_SetVcselPulsePeriod>
  HAL_IWDG_Refresh(&hiwdg);
 8000fa2:	485a      	ldr	r0, [pc, #360]	; (800110c <main+0x2c8>)
 8000fa4:	f004 f8f3 	bl	800518e <HAL_IWDG_Refresh>

  //EEPROM Check & Configurations Read
  if(EEPROM_ReadUint8(&FactoryValue) != HAL_OK)
 8000fa8:	4859      	ldr	r0, [pc, #356]	; (8001110 <main+0x2cc>)
 8000faa:	f7ff fef1 	bl	8000d90 <EEPROM_ReadUint8>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d005      	beq.n	8000fc0 <main+0x17c>
	  FatalError_EEPROM(FactoryValue.Address);
 8000fb4:	4b56      	ldr	r3, [pc, #344]	; (8001110 <main+0x2cc>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff34 	bl	8000e28 <FatalError_EEPROM>
  HAL_IWDG_Refresh(&hiwdg);
 8000fc0:	4852      	ldr	r0, [pc, #328]	; (800110c <main+0x2c8>)
 8000fc2:	f004 f8e4 	bl	800518e <HAL_IWDG_Refresh>
  if(!Errors.EEPROM_Fatal && FactoryValue.Value == 0)
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <main+0x2d0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d144      	bne.n	8001058 <main+0x214>
 8000fce:	4b50      	ldr	r3, [pc, #320]	; (8001110 <main+0x2cc>)
 8000fd0:	791b      	ldrb	r3, [r3, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d140      	bne.n	8001058 <main+0x214>
  {
	  if(EEPROM_ReadInt32(&eSetPoint) != HAL_OK) {
 8000fd6:	4850      	ldr	r0, [pc, #320]	; (8001118 <main+0x2d4>)
 8000fd8:	f7ff fef4 	bl	8000dc4 <EEPROM_ReadInt32>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d006      	beq.n	8000ff0 <main+0x1ac>
		  FatalError_EEPROM(eSetPoint.BaseAddress);
 8000fe2:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <main+0x2d4>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff ff1d 	bl	8000e28 <FatalError_EEPROM>
		  goto END_OF_CONFIG;
 8000fee:	e030      	b.n	8001052 <main+0x20e>
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 8000ff0:	4846      	ldr	r0, [pc, #280]	; (800110c <main+0x2c8>)
 8000ff2:	f004 f8cc 	bl	800518e <HAL_IWDG_Refresh>
	  if(EEPROM_ReadFloat(&Kp) != HAL_OK) {
 8000ff6:	4849      	ldr	r0, [pc, #292]	; (800111c <main+0x2d8>)
 8000ff8:	f7ff fefe 	bl	8000df8 <EEPROM_ReadFloat>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d006      	beq.n	8001010 <main+0x1cc>
		  FatalError_EEPROM(Kp.BaseAddress);
 8001002:	4b46      	ldr	r3, [pc, #280]	; (800111c <main+0x2d8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff0d 	bl	8000e28 <FatalError_EEPROM>
		  goto END_OF_CONFIG;
 800100e:	e020      	b.n	8001052 <main+0x20e>
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 8001010:	483e      	ldr	r0, [pc, #248]	; (800110c <main+0x2c8>)
 8001012:	f004 f8bc 	bl	800518e <HAL_IWDG_Refresh>
	  if(EEPROM_ReadFloat(&Ki) != HAL_OK) {
 8001016:	4842      	ldr	r0, [pc, #264]	; (8001120 <main+0x2dc>)
 8001018:	f7ff feee 	bl	8000df8 <EEPROM_ReadFloat>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <main+0x1ec>
		  FatalError_EEPROM(Ki.BaseAddress);
 8001022:	4b3f      	ldr	r3, [pc, #252]	; (8001120 <main+0x2dc>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f7ff fefd 	bl	8000e28 <FatalError_EEPROM>
		  goto END_OF_CONFIG;
 800102e:	e010      	b.n	8001052 <main+0x20e>
	  }
	  HAL_IWDG_Refresh(&hiwdg);
 8001030:	4836      	ldr	r0, [pc, #216]	; (800110c <main+0x2c8>)
 8001032:	f004 f8ac 	bl	800518e <HAL_IWDG_Refresh>
	  if(EEPROM_ReadFloat(&Kp) != HAL_OK) {
 8001036:	4839      	ldr	r0, [pc, #228]	; (800111c <main+0x2d8>)
 8001038:	f7ff fede 	bl	8000df8 <EEPROM_ReadFloat>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d006      	beq.n	8001050 <main+0x20c>
		  FatalError_EEPROM(Kd.BaseAddress);
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <main+0x2e0>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff feed 	bl	8000e28 <FatalError_EEPROM>
		  goto END_OF_CONFIG;
 800104e:	e000      	b.n	8001052 <main+0x20e>
	  }
	  END_OF_CONFIG:
 8001050:	bf00      	nop
	  HAL_IWDG_Refresh(&hiwdg);
 8001052:	482e      	ldr	r0, [pc, #184]	; (800110c <main+0x2c8>)
 8001054:	f004 f89b 	bl	800518e <HAL_IWDG_Refresh>
  }

  //Enable AND Gate
  HAL_GPIO_WritePin(EnableFAN_GPIO_Port, EnableFAN_Pin, 1);
 8001058:	2201      	movs	r2, #1
 800105a:	2120      	movs	r1, #32
 800105c:	4826      	ldr	r0, [pc, #152]	; (80010f8 <main+0x2b4>)
 800105e:	f002 fabf 	bl	80035e0 <HAL_GPIO_WritePin>

  //Start Timers
  HAL_TIM_Base_Start_IT(&htim1);
 8001062:	4831      	ldr	r0, [pc, #196]	; (8001128 <main+0x2e4>)
 8001064:	f006 f9b2 	bl	80073cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8001068:	4830      	ldr	r0, [pc, #192]	; (800112c <main+0x2e8>)
 800106a:	f006 f9af 	bl	80073cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 800106e:	4830      	ldr	r0, [pc, #192]	; (8001130 <main+0x2ec>)
 8001070:	f006 f9ac 	bl	80073cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001074:	2100      	movs	r1, #0
 8001076:	481a      	ldr	r0, [pc, #104]	; (80010e0 <main+0x29c>)
 8001078:	f006 fa64 	bl	8007544 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 800107c:	2100      	movs	r1, #0
 800107e:	482d      	ldr	r0, [pc, #180]	; (8001134 <main+0x2f0>)
 8001080:	f006 fc38 	bl	80078f4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2); //Indirect Channel
 8001084:	2104      	movs	r1, #4
 8001086:	482b      	ldr	r0, [pc, #172]	; (8001134 <main+0x2f0>)
 8001088:	f006 fb66 	bl	8007758 <HAL_TIM_IC_Start>
  HAL_IWDG_Refresh(&hiwdg);
 800108c:	481f      	ldr	r0, [pc, #124]	; (800110c <main+0x2c8>)
 800108e:	f004 f87e 	bl	800518e <HAL_IWDG_Refresh>
  //Start Receptions
  HAL_UART_Receive_IT(&huart1, (uint8_t *)&UARTIncomData, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	4928      	ldr	r1, [pc, #160]	; (8001138 <main+0x2f4>)
 8001096:	4829      	ldr	r0, [pc, #164]	; (800113c <main+0x2f8>)
 8001098:	f007 fd8f 	bl	8008bba <HAL_UART_Receive_IT>
  //TODO Report all OK

  //Sleep until reception
#ifdef USER_DEBUG
  while(WakeUpFlag)
 800109c:	e002      	b.n	80010a4 <main+0x260>
	  HAL_IWDG_Refresh(&hiwdg);
 800109e:	481b      	ldr	r0, [pc, #108]	; (800110c <main+0x2c8>)
 80010a0:	f004 f875 	bl	800518e <HAL_IWDG_Refresh>
  while(WakeUpFlag)
 80010a4:	4b26      	ldr	r3, [pc, #152]	; (8001140 <main+0x2fc>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f8      	bne.n	800109e <main+0x25a>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
#endif
  while(1)
  {
	  HAL_IWDG_Refresh(&hiwdg);
 80010ac:	4817      	ldr	r0, [pc, #92]	; (800110c <main+0x2c8>)
 80010ae:	f004 f86e 	bl	800518e <HAL_IWDG_Refresh>
	  vTaskMeasure();
 80010b2:	f000 f849 	bl	8001148 <vTaskMeasure>
	  vTaskReceiveUSB();
 80010b6:	f000 f897 	bl	80011e8 <vTaskReceiveUSB>
	  vTaskSendUSB();
 80010ba:	f000 f8a5 	bl	8001208 <vTaskSendUSB>
	  vTaskCommandsHandler();
 80010be:	f000 f941 	bl	8001344 <vTaskCommandsHandler>
#ifdef USER_DEBUG
	  while(ParsedFlag)
 80010c2:	e002      	b.n	80010ca <main+0x286>
		  HAL_IWDG_Refresh(&hiwdg);
 80010c4:	4811      	ldr	r0, [pc, #68]	; (800110c <main+0x2c8>)
 80010c6:	f004 f862 	bl	800518e <HAL_IWDG_Refresh>
	  while(ParsedFlag)
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <main+0x300>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f8      	bne.n	80010c4 <main+0x280>
	  ParsedFlag = true;
 80010d2:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <main+0x300>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
#else
	  HAL_SuspendTick();
	  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
	  HAL_ResumeTick();
#endif
	  HAL_IWDG_Refresh(&hiwdg);
 80010d8:	480c      	ldr	r0, [pc, #48]	; (800110c <main+0x2c8>)
 80010da:	f004 f858 	bl	800518e <HAL_IWDG_Refresh>
	  HAL_IWDG_Refresh(&hiwdg);
 80010de:	e7e5      	b.n	80010ac <main+0x268>
 80010e0:	200006c0 	.word	0x200006c0
 80010e4:	200012dc 	.word	0x200012dc
 80010e8:	20000034 	.word	0x20000034
 80010ec:	2000049c 	.word	0x2000049c
 80010f0:	200008e0 	.word	0x200008e0
 80010f4:	200010e0 	.word	0x200010e0
 80010f8:	40020400 	.word	0x40020400
 80010fc:	200012d6 	.word	0x200012d6
 8001100:	200012d5 	.word	0x200012d5
 8001104:	200012d4 	.word	0x200012d4
 8001108:	200012d0 	.word	0x200012d0
 800110c:	20000624 	.word	0x20000624
 8001110:	2000003c 	.word	0x2000003c
 8001114:	20000498 	.word	0x20000498
 8001118:	2000135c 	.word	0x2000135c
 800111c:	20000044 	.word	0x20000044
 8001120:	2000004c 	.word	0x2000004c
 8001124:	20000054 	.word	0x20000054
 8001128:	20000630 	.word	0x20000630
 800112c:	20000678 	.word	0x20000678
 8001130:	20000750 	.word	0x20000750
 8001134:	20000708 	.word	0x20000708
 8001138:	20001354 	.word	0x20001354
 800113c:	20000798 	.word	0x20000798
 8001140:	20000039 	.word	0x20000039
 8001144:	20000038 	.word	0x20000038

08001148 <vTaskMeasure>:
}
//-----------------------------------
//			    TASKS
//-----------------------------------
static void vTaskMeasure(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 800114c:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <vTaskMeasure+0x80>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	491e      	ldr	r1, [pc, #120]	; (80011cc <vTaskMeasure+0x84>)
 8001152:	4618      	mov	r0, r3
 8001154:	f00b fcb2 	bl	800cabc <VL53L0X_PerformSingleRangingMeasurement>
	HAL_IWDG_Refresh(&hiwdg);
 8001158:	481d      	ldr	r0, [pc, #116]	; (80011d0 <vTaskMeasure+0x88>)
 800115a:	f004 f818 	bl	800518e <HAL_IWDG_Refresh>
	if(RangingData.RangeStatus == 0)
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <vTaskMeasure+0x84>)
 8001160:	7e1b      	ldrb	r3, [r3, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d127      	bne.n	80011b6 <vTaskMeasure+0x6e>
    {
		if(RangingData.RangeMilliMeter > past_measure+MeasureTolerance || RangingData.RangeMilliMeter < past_measure-MeasureTolerance)
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <vTaskMeasure+0x84>)
 8001168:	891b      	ldrh	r3, [r3, #8]
 800116a:	461a      	mov	r2, r3
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <vTaskMeasure+0x8c>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	3305      	adds	r3, #5
 8001172:	429a      	cmp	r2, r3
 8001174:	dc07      	bgt.n	8001186 <vTaskMeasure+0x3e>
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <vTaskMeasure+0x84>)
 8001178:	891b      	ldrh	r3, [r3, #8]
 800117a:	461a      	mov	r2, r3
 800117c:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <vTaskMeasure+0x8c>)
 800117e:	881b      	ldrh	r3, [r3, #0]
 8001180:	3b05      	subs	r3, #5
 8001182:	429a      	cmp	r2, r3
 8001184:	da17      	bge.n	80011b6 <vTaskMeasure+0x6e>
		{
			distance = Reference - RangingData.RangeMilliMeter;
 8001186:	4b11      	ldr	r3, [pc, #68]	; (80011cc <vTaskMeasure+0x84>)
 8001188:	891b      	ldrh	r3, [r3, #8]
 800118a:	f5c3 7302 	rsb	r3, r3, #520	; 0x208
 800118e:	b29a      	uxth	r2, r3
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <vTaskMeasure+0x90>)
 8001192:	801a      	strh	r2, [r3, #0]
			sprintf(TXDistanceBuffer, "%d", distance);
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <vTaskMeasure+0x90>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4910      	ldr	r1, [pc, #64]	; (80011dc <vTaskMeasure+0x94>)
 800119c:	4810      	ldr	r0, [pc, #64]	; (80011e0 <vTaskMeasure+0x98>)
 800119e:	f011 ff21 	bl	8012fe4 <siprintf>
			HAL_UART_Transmit_DMA(&huart1, (uint8_t *)TXDistanceBuffer, strlen(TXDistanceBuffer));
 80011a2:	480f      	ldr	r0, [pc, #60]	; (80011e0 <vTaskMeasure+0x98>)
 80011a4:	f7ff f826 	bl	80001f4 <strlen>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	490c      	ldr	r1, [pc, #48]	; (80011e0 <vTaskMeasure+0x98>)
 80011b0:	480c      	ldr	r0, [pc, #48]	; (80011e4 <vTaskMeasure+0x9c>)
 80011b2:	f007 fd33 	bl	8008c1c <HAL_UART_Transmit_DMA>
		}
	}
	HAL_IWDG_Refresh(&hiwdg);
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <vTaskMeasure+0x88>)
 80011b8:	f003 ffe9 	bl	800518e <HAL_IWDG_Refresh>
	past_measure = RangingData.RangeMilliMeter;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <vTaskMeasure+0x84>)
 80011be:	891a      	ldrh	r2, [r3, #8]
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <vTaskMeasure+0x8c>)
 80011c2:	801a      	strh	r2, [r3, #0]

}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000034 	.word	0x20000034
 80011cc:	20001124 	.word	0x20001124
 80011d0:	20000624 	.word	0x20000624
 80011d4:	200012da 	.word	0x200012da
 80011d8:	200012d8 	.word	0x200012d8
 80011dc:	080138e0 	.word	0x080138e0
 80011e0:	200012ec 	.word	0x200012ec
 80011e4:	20000798 	.word	0x20000798

080011e8 <vTaskReceiveUSB>:
static void vTaskReceiveUSB(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
	if(ReceiveFlag)
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <vTaskReceiveUSB+0x1c>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d002      	beq.n	80011fa <vTaskReceiveUSB+0x12>
	{
		//TODO for vacations - Checkout PC commands
		ReceiveFlag = 0;
 80011f4:	4b03      	ldr	r3, [pc, #12]	; (8001204 <vTaskReceiveUSB+0x1c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
	}
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	200008dc 	.word	0x200008dc

08001208 <vTaskSendUSB>:

//Implementing Circular buffer to avoid losing data
static void vTaskSendUSB(void)
{
 8001208:	b590      	push	{r4, r7, lr}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
	static bool NotCleared = true;
	static bool ReportConnected = false;

	HAL_IWDG_Refresh(&hiwdg);
 800120e:	4845      	ldr	r0, [pc, #276]	; (8001324 <vTaskSendUSB+0x11c>)
 8001210:	f003 ffbd 	bl	800518e <HAL_IWDG_Refresh>
	if(USBIsDisconnected && NotCleared)
 8001214:	4b44      	ldr	r3, [pc, #272]	; (8001328 <vTaskSendUSB+0x120>)
 8001216:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800121a:	b2db      	uxtb	r3, r3
 800121c:	2b04      	cmp	r3, #4
 800121e:	d12c      	bne.n	800127a <vTaskSendUSB+0x72>
 8001220:	4b42      	ldr	r3, [pc, #264]	; (800132c <vTaskSendUSB+0x124>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d028      	beq.n	800127a <vTaskSendUSB+0x72>
	{
		//Clear all the info saved and reset the index states
		for(uint16_t i = 0; i < CDC_CIRCULAR_BUFFER_SIZE; i++)
 8001228:	2300      	movs	r3, #0
 800122a:	80fb      	strh	r3, [r7, #6]
 800122c:	e00f      	b.n	800124e <vTaskSendUSB+0x46>
		{
			memset(CDCCircularBuffer[i], '\0', CDC_STR_SIZE);
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	015b      	lsls	r3, r3, #5
 8001232:	4a3f      	ldr	r2, [pc, #252]	; (8001330 <vTaskSendUSB+0x128>)
 8001234:	4413      	add	r3, r2
 8001236:	2220      	movs	r2, #32
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f011 feca 	bl	8012fd4 <memset>
			CDCSendFlags[i] = false;
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	4a3c      	ldr	r2, [pc, #240]	; (8001334 <vTaskSendUSB+0x12c>)
 8001244:	2100      	movs	r1, #0
 8001246:	54d1      	strb	r1, [r2, r3]
		for(uint16_t i = 0; i < CDC_CIRCULAR_BUFFER_SIZE; i++)
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	3301      	adds	r3, #1
 800124c:	80fb      	strh	r3, [r7, #6]
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	2b3f      	cmp	r3, #63	; 0x3f
 8001252:	d9ec      	bls.n	800122e <vTaskSendUSB+0x26>
		}
		CDCWriteIndex = 0;
 8001254:	4b38      	ldr	r3, [pc, #224]	; (8001338 <vTaskSendUSB+0x130>)
 8001256:	2200      	movs	r2, #0
 8001258:	801a      	strh	r2, [r3, #0]
		CDCReadIndex = 0;
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <vTaskSendUSB+0x134>)
 800125c:	2200      	movs	r2, #0
 800125e:	801a      	strh	r2, [r3, #0]
		NotCleared = false;
 8001260:	4b32      	ldr	r3, [pc, #200]	; (800132c <vTaskSendUSB+0x124>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
		ReportConnected = false;
 8001266:	4b36      	ldr	r3, [pc, #216]	; (8001340 <vTaskSendUSB+0x138>)
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
		UART_Transmit(USBDisconnected);
 800126c:	2004      	movs	r0, #4
 800126e:	f000 f8f3 	bl	8001458 <UART_Transmit>
		HAL_IWDG_Refresh(&hiwdg);
 8001272:	482c      	ldr	r0, [pc, #176]	; (8001324 <vTaskSendUSB+0x11c>)
 8001274:	f003 ff8b 	bl	800518e <HAL_IWDG_Refresh>
				}
			}
			HAL_IWDG_Refresh(&hiwdg);
		}
	}
}
 8001278:	e04f      	b.n	800131a <vTaskSendUSB+0x112>
	else if(USBIsConnected)
 800127a:	4b2b      	ldr	r3, [pc, #172]	; (8001328 <vTaskSendUSB+0x120>)
 800127c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b03      	cmp	r3, #3
 8001284:	d149      	bne.n	800131a <vTaskSendUSB+0x112>
		if(!ReportConnected)
 8001286:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <vTaskSendUSB+0x138>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <vTaskSendUSB+0x92>
			ReportConnected = true;
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <vTaskSendUSB+0x138>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
			UART_Transmit(USBConnected);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 f8df 	bl	8001458 <UART_Transmit>
		if(CDCReadIndex > CDC_CIRCULAR_BUFFER_SIZE)
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <vTaskSendUSB+0x134>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	d902      	bls.n	80012a8 <vTaskSendUSB+0xa0>
			CDCReadIndex = 0;
 80012a2:	4b26      	ldr	r3, [pc, #152]	; (800133c <vTaskSendUSB+0x134>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	801a      	strh	r2, [r3, #0]
		if(CDCSendFlags[CDCReadIndex])
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <vTaskSendUSB+0x134>)
 80012aa:	881b      	ldrh	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b21      	ldr	r3, [pc, #132]	; (8001334 <vTaskSendUSB+0x12c>)
 80012b0:	5c9b      	ldrb	r3, [r3, r2]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d031      	beq.n	800131a <vTaskSendUSB+0x112>
			if(CDC_getReady() == USBD_OK)
 80012b6:	f011 fa23 	bl	8012700 <CDC_getReady>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d129      	bne.n	8001314 <vTaskSendUSB+0x10c>
				HAL_IWDG_Refresh(&hiwdg);
 80012c0:	4818      	ldr	r0, [pc, #96]	; (8001324 <vTaskSendUSB+0x11c>)
 80012c2:	f003 ff64 	bl	800518e <HAL_IWDG_Refresh>
				uint8_t Result = CDC_Transmit_FS((uint8_t*)CDCCircularBuffer[CDCReadIndex],
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <vTaskSendUSB+0x134>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	015b      	lsls	r3, r3, #5
 80012cc:	4a18      	ldr	r2, [pc, #96]	; (8001330 <vTaskSendUSB+0x128>)
 80012ce:	189c      	adds	r4, r3, r2
											  strlen(CDCCircularBuffer[CDCReadIndex]));
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <vTaskSendUSB+0x134>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	4a16      	ldr	r2, [pc, #88]	; (8001330 <vTaskSendUSB+0x128>)
 80012d8:	4413      	add	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ff8a 	bl	80001f4 <strlen>
 80012e0:	4603      	mov	r3, r0
				uint8_t Result = CDC_Transmit_FS((uint8_t*)CDCCircularBuffer[CDCReadIndex],
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4619      	mov	r1, r3
 80012e6:	4620      	mov	r0, r4
 80012e8:	f011 f9d2 	bl	8012690 <CDC_Transmit_FS>
 80012ec:	4603      	mov	r3, r0
 80012ee:	717b      	strb	r3, [r7, #5]
				HAL_IWDG_Refresh(&hiwdg);
 80012f0:	480c      	ldr	r0, [pc, #48]	; (8001324 <vTaskSendUSB+0x11c>)
 80012f2:	f003 ff4c 	bl	800518e <HAL_IWDG_Refresh>
				if(Result == USBD_OK)
 80012f6:	797b      	ldrb	r3, [r7, #5]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d10b      	bne.n	8001314 <vTaskSendUSB+0x10c>
					CDCSendFlags[CDCReadIndex] = false;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <vTaskSendUSB+0x134>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <vTaskSendUSB+0x12c>)
 8001304:	2100      	movs	r1, #0
 8001306:	5499      	strb	r1, [r3, r2]
					CDCReadIndex++;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <vTaskSendUSB+0x134>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	3301      	adds	r3, #1
 800130e:	b29a      	uxth	r2, r3
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <vTaskSendUSB+0x134>)
 8001312:	801a      	strh	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <vTaskSendUSB+0x11c>)
 8001316:	f003 ff3a 	bl	800518e <HAL_IWDG_Refresh>
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	bd90      	pop	{r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	20000624 	.word	0x20000624
 8001328:	200013d4 	.word	0x200013d4
 800132c:	2000005c 	.word	0x2000005c
 8001330:	200008e0 	.word	0x200008e0
 8001334:	200010e0 	.word	0x200010e0
 8001338:	20001120 	.word	0x20001120
 800133c:	20001122 	.word	0x20001122
 8001340:	20001364 	.word	0x20001364

08001344 <vTaskCommandsHandler>:
static void vTaskDaughter(void);
static void vTaskCommandsHandler(void)
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
	if(NeedToProcessCommand)
 800134a:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <vTaskCommandsHandler+0xac>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d049      	beq.n	80013e6 <vTaskCommandsHandler+0xa2>
	{
		CommandProcess(CommandBuffer, &commands);
 8001352:	4928      	ldr	r1, [pc, #160]	; (80013f4 <vTaskCommandsHandler+0xb0>)
 8001354:	4828      	ldr	r0, [pc, #160]	; (80013f8 <vTaskCommandsHandler+0xb4>)
 8001356:	f000 f855 	bl	8001404 <CommandProcess>
		switch(commands)
 800135a:	4b26      	ldr	r3, [pc, #152]	; (80013f4 <vTaskCommandsHandler+0xb0>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	dc01      	bgt.n	8001366 <vTaskCommandsHandler+0x22>
 8001362:	2b00      	cmp	r3, #0
				doPID = true;
				commands = null;
			break;
			case notHandled:
			case null:
			break;
 8001364:	e040      	b.n	80013e8 <vTaskCommandsHandler+0xa4>
		switch(commands)
 8001366:	2b02      	cmp	r3, #2
 8001368:	d13e      	bne.n	80013e8 <vTaskCommandsHandler+0xa4>
				doPID = false;
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <vTaskCommandsHandler+0xb8>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
				PID.Set_point = 0;
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <vTaskCommandsHandler+0xbc>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
				for(uint16_t i = 0; i < strlen(CommandBuffer); i++)
 8001376:	2300      	movs	r3, #0
 8001378:	80fb      	strh	r3, [r7, #6]
 800137a:	e026      	b.n	80013ca <vTaskCommandsHandler+0x86>
					if(CommandBuffer[i] == ' ')
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <vTaskCommandsHandler+0xb4>)
 8001380:	5cd3      	ldrb	r3, [r2, r3]
 8001382:	2b20      	cmp	r3, #32
 8001384:	d11e      	bne.n	80013c4 <vTaskCommandsHandler+0x80>
						for(uint16_t Pos = 1; i < strlen(CommandBuffer); Pos*=10, i++)
 8001386:	2301      	movs	r3, #1
 8001388:	80bb      	strh	r3, [r7, #4]
 800138a:	e014      	b.n	80013b6 <vTaskCommandsHandler+0x72>
							PID.Set_point = AtoI(CommandBuffer[i])*Pos;
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	4a1a      	ldr	r2, [pc, #104]	; (80013f8 <vTaskCommandsHandler+0xb4>)
 8001390:	5cd3      	ldrb	r3, [r2, r3]
 8001392:	4619      	mov	r1, r3
 8001394:	88ba      	ldrh	r2, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	0092      	lsls	r2, r2, #2
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	011b      	lsls	r3, r3, #4
 800139e:	440b      	add	r3, r1
 80013a0:	4a17      	ldr	r2, [pc, #92]	; (8001400 <vTaskCommandsHandler+0xbc>)
 80013a2:	6253      	str	r3, [r2, #36]	; 0x24
						for(uint16_t Pos = 1; i < strlen(CommandBuffer); Pos*=10, i++)
 80013a4:	88bb      	ldrh	r3, [r7, #4]
 80013a6:	461a      	mov	r2, r3
 80013a8:	0092      	lsls	r2, r2, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	80bb      	strh	r3, [r7, #4]
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	3301      	adds	r3, #1
 80013b4:	80fb      	strh	r3, [r7, #6]
 80013b6:	88fc      	ldrh	r4, [r7, #6]
 80013b8:	480f      	ldr	r0, [pc, #60]	; (80013f8 <vTaskCommandsHandler+0xb4>)
 80013ba:	f7fe ff1b 	bl	80001f4 <strlen>
 80013be:	4603      	mov	r3, r0
 80013c0:	429c      	cmp	r4, r3
 80013c2:	d3e3      	bcc.n	800138c <vTaskCommandsHandler+0x48>
				for(uint16_t i = 0; i < strlen(CommandBuffer); i++)
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	3301      	adds	r3, #1
 80013c8:	80fb      	strh	r3, [r7, #6]
 80013ca:	88fc      	ldrh	r4, [r7, #6]
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <vTaskCommandsHandler+0xb4>)
 80013ce:	f7fe ff11 	bl	80001f4 <strlen>
 80013d2:	4603      	mov	r3, r0
 80013d4:	429c      	cmp	r4, r3
 80013d6:	d3d1      	bcc.n	800137c <vTaskCommandsHandler+0x38>
				doPID = true;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <vTaskCommandsHandler+0xb8>)
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
				commands = null;
 80013de:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <vTaskCommandsHandler+0xb0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	701a      	strb	r2, [r3, #0]
			break;
 80013e4:	e000      	b.n	80013e8 <vTaskCommandsHandler+0xa4>
		}
	}
 80013e6:	bf00      	nop
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd90      	pop	{r4, r7, pc}
 80013f0:	20001355 	.word	0x20001355
 80013f4:	20001358 	.word	0x20001358
 80013f8:	200012f4 	.word	0x200012f4
 80013fc:	200012d7 	.word	0x200012d7
 8001400:	2000000c 	.word	0x2000000c

08001404 <CommandProcess>:
}
//-----------------------------------
//			   FUNCTIONS
//-----------------------------------
static void CommandProcess(char *Buffer, Commands *command)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
	uint64_t *RXCommandsPtr = (uint64_t*) &RXCommands;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <CommandProcess+0x50>)
 8001410:	60fb      	str	r3, [r7, #12]
	for(*command = 0;*command < RXCommands.memberNum; *command++, RXCommandsPtr++)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	e00c      	b.n	8001434 <CommandProcess+0x30>
	{
		if(strcmp(Buffer, (char*)RXCommandsPtr) == 0) {
 800141a:	68f9      	ldr	r1, [r7, #12]
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7fe fedf 	bl	80001e0 <strcmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d010      	beq.n	800144a <CommandProcess+0x46>
	for(*command = 0;*command < RXCommands.memberNum; *command++, RXCommandsPtr++)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3308      	adds	r3, #8
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b29a      	uxth	r2, r3
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <CommandProcess+0x50>)
 800143c:	891b      	ldrh	r3, [r3, #8]
 800143e:	429a      	cmp	r2, r3
 8001440:	d3eb      	bcc.n	800141a <CommandProcess+0x16>
			return;
		}
	}
	*command = notHandled;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
 8001448:	e000      	b.n	800144c <CommandProcess+0x48>
			return;
 800144a:	bf00      	nop
}
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000000 	.word	0x20000000

08001458 <UART_Transmit>:
	if(CDCWriteIndex > CDC_CIRCULAR_BUFFER_SIZE)
		CDCWriteIndex = 0;
}

static void UART_Transmit(TXDataID dataID, ...)
{
 8001458:	b40f      	push	{r0, r1, r2, r3}
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, dataID);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	603b      	str	r3, [r7, #0]
	uint8_t* pData = va_arg(args, uint8_t*);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	1d1a      	adds	r2, r3, #4
 800146a:	603a      	str	r2, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	deff      	udf	#255	; 0xff
	...

08001474 <HAL_TIM_PeriodElapsedCallback>:
}
//-----------------------------------
//			 	 ISRs
//-----------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2 && doPID)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001484:	f040 80ae 	bne.w	80015e4 <HAL_TIM_PeriodElapsedCallback+0x170>
 8001488:	4b5d      	ldr	r3, [pc, #372]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a9 	beq.w	80015e4 <HAL_TIM_PeriodElapsedCallback+0x170>
	{
		PID.Error = PID.Set_point - distance;
 8001492:	4b5c      	ldr	r3, [pc, #368]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001496:	4a5c      	ldr	r2, [pc, #368]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001498:	8812      	ldrh	r2, [r2, #0]
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	4a59      	ldr	r2, [pc, #356]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800149e:	61d3      	str	r3, [r2, #28]
		PID.P = (float)PID.Error * PID.Kp;
 80014a0:	4b58      	ldr	r3, [pc, #352]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	4b55      	ldr	r3, [pc, #340]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014b6:	4b53      	ldr	r3, [pc, #332]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014b8:	edc3 7a04 	vstr	s15, [r3, #16]
		PID.I += (float)PID.Error * PID.Ki;
 80014bc:	4b51      	ldr	r3, [pc, #324]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014be:	ed93 7a05 	vldr	s14, [r3, #20]
 80014c2:	4b50      	ldr	r3, [pc, #320]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	ee07 3a90 	vmov	s15, r3
 80014ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80014ce:	4b4d      	ldr	r3, [pc, #308]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80014d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014dc:	4b49      	ldr	r3, [pc, #292]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014de:	edc3 7a05 	vstr	s15, [r3, #20]
		PID.D = (float)(PID.Error - PID.Past_Error) * PID.Kd;
 80014e2:	4b48      	ldr	r3, [pc, #288]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	ee07 3a90 	vmov	s15, r3
 80014f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f4:	4b43      	ldr	r3, [pc, #268]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80014f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fe:	4b41      	ldr	r3, [pc, #260]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001500:	edc3 7a06 	vstr	s15, [r3, #24]
	#ifdef MaxPID
		if(PID.I > 80)
 8001504:	4b3f      	ldr	r3, [pc, #252]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001506:	edd3 7a05 	vldr	s15, [r3, #20]
 800150a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800160c <HAL_TIM_PeriodElapsedCallback+0x198>
 800150e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	dd03      	ble.n	8001520 <HAL_TIM_PeriodElapsedCallback+0xac>
		{
			PID.I = 80;
 8001518:	4b3a      	ldr	r3, [pc, #232]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800151a:	4a3d      	ldr	r2, [pc, #244]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800151c:	615a      	str	r2, [r3, #20]
 800151e:	e00c      	b.n	800153a <HAL_TIM_PeriodElapsedCallback+0xc6>
		}
		else if(PID.I < -80)
 8001520:	4b38      	ldr	r3, [pc, #224]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001522:	edd3 7a05 	vldr	s15, [r3, #20]
 8001526:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001614 <HAL_TIM_PeriodElapsedCallback+0x1a0>
 800152a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800152e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001532:	d502      	bpl.n	800153a <HAL_TIM_PeriodElapsedCallback+0xc6>
		{
			PID.I = -80;
 8001534:	4b33      	ldr	r3, [pc, #204]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001536:	4a38      	ldr	r2, [pc, #224]	; (8001618 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001538:	615a      	str	r2, [r3, #20]
		else if(PID.I < 0)
		{
			PID.I = 0;
		}
	#endif
		PID.Control = PID.P + PID.I + PID.D;
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800153c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001540:	4b30      	ldr	r3, [pc, #192]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001542:	edd3 7a05 	vldr	s15, [r3, #20]
 8001546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800154a:	4b2e      	ldr	r3, [pc, #184]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800154c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001550:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001554:	4b2b      	ldr	r3, [pc, #172]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001556:	edc3 7a03 	vstr	s15, [r3, #12]
		if(PID.Control < 0)
 800155a:	4b2a      	ldr	r3, [pc, #168]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800155c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001560:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	d513      	bpl.n	8001592 <HAL_TIM_PeriodElapsedCallback+0x11e>
			PID.Control = ABS(PID.Control);
 800156a:	4b26      	ldr	r3, [pc, #152]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800156c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001578:	dd03      	ble.n	8001582 <HAL_TIM_PeriodElapsedCallback+0x10e>
 800157a:	4b22      	ldr	r3, [pc, #136]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800157c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001580:	e004      	b.n	800158c <HAL_TIM_PeriodElapsedCallback+0x118>
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001584:	edd3 7a03 	vldr	s15, [r3, #12]
 8001588:	eef1 7a67 	vneg.f32	s15, s15
 800158c:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800158e:	edc3 7a03 	vstr	s15, [r3, #12]
	#ifdef MaxPID
		if(PID.Control > MaxPID)
 8001592:	4b1c      	ldr	r3, [pc, #112]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001594:	edd3 7a03 	vldr	s15, [r3, #12]
 8001598:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x1a8>
 800159c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	dd02      	ble.n	80015ac <HAL_TIM_PeriodElapsedCallback+0x138>
			PID.Control = MaxPID;
 80015a6:	4b17      	ldr	r3, [pc, #92]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015a8:	4a1d      	ldr	r2, [pc, #116]	; (8001620 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015aa:	60da      	str	r2, [r3, #12]
		TIM3 -> CCR1 = (uint32_t)((PID.Control * MaxCCR) / 100) + 2056;
 80015ac:	4b15      	ldr	r3, [pc, #84]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015ae:	ed93 7a03 	vldr	s14, [r3, #12]
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80015b4:	881b      	ldrh	r3, [r3, #0]
 80015b6:	ee07 3a90 	vmov	s15, r3
 80015ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c2:	eddf 6a16 	vldr	s13, [pc, #88]	; 800161c <HAL_TIM_PeriodElapsedCallback+0x1a8>
 80015c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015ce:	ee17 3a90 	vmov	r3, s15
 80015d2:	4a15      	ldr	r2, [pc, #84]	; (8001628 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015d4:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80015d8:	6353      	str	r3, [r2, #52]	; 0x34
	#else
		if(PID.Control > MaxCCR)
			PID.Control = MaxCCR;
		TIM2 -> CCR1 = (uint32_t)(PID.Control);
	#endif
		PID.Past_Error = PID.Error;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80015e0:	6213      	str	r3, [r2, #32]
#endif
	else if(htim -> Instance == TIM5)
	{
		//Check Acknowledge flag
	}
}
 80015e2:	e007      	b.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x180>
	else if(htim->Instance == TIM1) //ParsedLoop
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d102      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x180>
		ParsedFlag = false;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	200012d7 	.word	0x200012d7
 8001604:	2000000c 	.word	0x2000000c
 8001608:	200012d8 	.word	0x200012d8
 800160c:	42a00000 	.word	0x42a00000
 8001610:	42a00000 	.word	0x42a00000
 8001614:	c2a00000 	.word	0xc2a00000
 8001618:	c2a00000 	.word	0xc2a00000
 800161c:	42c80000 	.word	0x42c80000
 8001620:	42c80000 	.word	0x42c80000
 8001624:	200012dc 	.word	0x200012dc
 8001628:	40000400 	.word	0x40000400
 800162c:	40010000 	.word	0x40010000
 8001630:	20000038 	.word	0x20000038
 8001634:	00000000 	.word	0x00000000

08001638 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // If the interrupt is triggered by channel 1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	7f1b      	ldrb	r3, [r3, #28]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d12d      	bne.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x6c>
	{
		// Read the IC value
		ICValue = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8001648:	2100      	movs	r1, #0
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f006 fd9a 	bl	8008184 <HAL_TIM_ReadCapturedValue>
 8001650:	4603      	mov	r3, r0
 8001652:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001654:	6013      	str	r3, [r2, #0]
		if (ICValue != 0)
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d022      	beq.n	80016a4 <HAL_TIM_IC_CaptureCallback+0x6c>
		{
			// calculate the Duty Cycle
			Duty = (HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) *100)/ICValue;
 800165e:	2104      	movs	r1, #4
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f006 fd8f 	bl	8008184 <HAL_TIM_ReadCapturedValue>
 8001666:	4603      	mov	r3, r0
 8001668:	2264      	movs	r2, #100	; 0x64
 800166a:	fb03 f202 	mul.w	r2, r3, r2
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4a11      	ldr	r2, [pc, #68]	; (80016bc <HAL_TIM_IC_CaptureCallback+0x84>)
 8001678:	6013      	str	r3, [r2, #0]
			Frequency = 96e6/ICValue;
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_TIM_IC_CaptureCallback+0x80>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f7fe ff58 	bl	8000534 <__aeabi_ui2d>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	a109      	add	r1, pc, #36	; (adr r1, 80016b0 <HAL_TIM_IC_CaptureCallback+0x78>)
 800168a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800168e:	f7ff f8f5 	bl	800087c <__aeabi_ddiv>
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4610      	mov	r0, r2
 8001698:	4619      	mov	r1, r3
 800169a:	f7ff f9d7 	bl	8000a4c <__aeabi_d2uiz>
 800169e:	4603      	mov	r3, r0
 80016a0:	4a07      	ldr	r2, [pc, #28]	; (80016c0 <HAL_TIM_IC_CaptureCallback+0x88>)
 80016a2:	6013      	str	r3, [r2, #0]
		}
	}
}
 80016a4:	bf00      	nop
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	f3af 8000 	nop.w
 80016b0:	00000000 	.word	0x00000000
 80016b4:	4196e360 	.word	0x4196e360
 80016b8:	200012e0 	.word	0x200012e0
 80016bc:	200012e4 	.word	0x200012e4
 80016c0:	200012e8 	.word	0x200012e8

080016c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
	static uint16_t DataCount = 0;
	static char Buffer[32] = "";

	Buffer[DataCount] = UARTIncomData;
 80016e0:	4b32      	ldr	r3, [pc, #200]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <HAL_UART_RxCpltCallback+0xd8>)
 80016e8:	7819      	ldrb	r1, [r3, #0]
 80016ea:	4b32      	ldr	r3, [pc, #200]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 80016ec:	5499      	strb	r1, [r3, r2]
	DataCount++;
 80016ee:	4b2f      	ldr	r3, [pc, #188]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 80016f0:	881b      	ldrh	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 80016f8:	801a      	strh	r2, [r3, #0]
	if(UARTIncomData == '!') //Communication finished
 80016fa:	4b2d      	ldr	r3, [pc, #180]	; (80017b0 <HAL_UART_RxCpltCallback+0xd8>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b21      	cmp	r3, #33	; 0x21
 8001700:	d14a      	bne.n	8001798 <HAL_UART_RxCpltCallback+0xc0>
	{
		switch(Buffer[0])
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b57      	cmp	r3, #87	; 0x57
 8001708:	d032      	beq.n	8001770 <HAL_UART_RxCpltCallback+0x98>
 800170a:	2b57      	cmp	r3, #87	; 0x57
 800170c:	dc34      	bgt.n	8001778 <HAL_UART_RxCpltCallback+0xa0>
 800170e:	2b25      	cmp	r3, #37	; 0x25
 8001710:	d01f      	beq.n	8001752 <HAL_UART_RxCpltCallback+0x7a>
 8001712:	2b25      	cmp	r3, #37	; 0x25
 8001714:	dc30      	bgt.n	8001778 <HAL_UART_RxCpltCallback+0xa0>
 8001716:	2b24      	cmp	r3, #36	; 0x24
 8001718:	d010      	beq.n	800173c <HAL_UART_RxCpltCallback+0x64>
 800171a:	2b24      	cmp	r3, #36	; 0x24
 800171c:	dc2c      	bgt.n	8001778 <HAL_UART_RxCpltCallback+0xa0>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d022      	beq.n	8001768 <HAL_UART_RxCpltCallback+0x90>
 8001722:	2b23      	cmp	r3, #35	; 0x23
 8001724:	d128      	bne.n	8001778 <HAL_UART_RxCpltCallback+0xa0>
		{
			case Command:
				NeedToProcessCommand = true;
 8001726:	4b24      	ldr	r3, [pc, #144]	; (80017b8 <HAL_UART_RxCpltCallback+0xe0>)
 8001728:	2201      	movs	r2, #1
 800172a:	701a      	strb	r2, [r3, #0]
				memcpy(CommandBuffer, Buffer, DataCount);
 800172c:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	4920      	ldr	r1, [pc, #128]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 8001734:	4821      	ldr	r0, [pc, #132]	; (80017bc <HAL_UART_RxCpltCallback+0xe4>)
 8001736:	f011 fc3f 	bl	8012fb8 <memcpy>
			break;
 800173a:	e01e      	b.n	800177a <HAL_UART_RxCpltCallback+0xa2>
			case Action:
				NeedToProcessAction = true;
 800173c:	4b20      	ldr	r3, [pc, #128]	; (80017c0 <HAL_UART_RxCpltCallback+0xe8>)
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
				memcpy(ActionBuffer, Buffer, DataCount);
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 8001744:	881b      	ldrh	r3, [r3, #0]
 8001746:	461a      	mov	r2, r3
 8001748:	491a      	ldr	r1, [pc, #104]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 800174a:	481e      	ldr	r0, [pc, #120]	; (80017c4 <HAL_UART_RxCpltCallback+0xec>)
 800174c:	f011 fc34 	bl	8012fb8 <memcpy>
			break;
 8001750:	e013      	b.n	800177a <HAL_UART_RxCpltCallback+0xa2>
			case Information:
				NeedToProcessInfo = true;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_UART_RxCpltCallback+0xf0>)
 8001754:	2201      	movs	r2, #1
 8001756:	701a      	strb	r2, [r3, #0]
				memcpy(InfoBuffer, Buffer, DataCount);
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4915      	ldr	r1, [pc, #84]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 8001760:	481a      	ldr	r0, [pc, #104]	; (80017cc <HAL_UART_RxCpltCallback+0xf4>)
 8001762:	f011 fc29 	bl	8012fb8 <memcpy>
			break;
 8001766:	e008      	b.n	800177a <HAL_UART_RxCpltCallback+0xa2>
			case Acknowledge:
				DataCount = 0;
 8001768:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 800176a:	2200      	movs	r2, #0
 800176c:	801a      	strh	r2, [r3, #0]
			break;
 800176e:	e004      	b.n	800177a <HAL_UART_RxCpltCallback+0xa2>
#ifdef USER_DEBUG
			case WakeUp:
				WakeUpFlag = false;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_UART_RxCpltCallback+0xf8>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
			break;
 8001776:	e000      	b.n	800177a <HAL_UART_RxCpltCallback+0xa2>
#endif
			default: //Data not handled
			break;
 8001778:	bf00      	nop
		}
		memset(Buffer, '\0', 32); //Reset the buffer
 800177a:	2220      	movs	r2, #32
 800177c:	2100      	movs	r1, #0
 800177e:	480d      	ldr	r0, [pc, #52]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 8001780:	f011 fc28 	bl	8012fd4 <memset>
		DataCount = 0;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_UART_RxCpltCallback+0xd4>)
 8001786:	2200      	movs	r2, #0
 8001788:	801a      	strh	r2, [r3, #0]
		if(Buffer[0] != Acknowledge) {
 800178a:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <HAL_UART_RxCpltCallback+0xdc>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d002      	beq.n	8001798 <HAL_UART_RxCpltCallback+0xc0>
			UART_Transmit(Acknowledge);
 8001792:	2001      	movs	r0, #1
 8001794:	f7ff fe60 	bl	8001458 <UART_Transmit>
		}
	}
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&UARTIncomData, 1);
 8001798:	2201      	movs	r2, #1
 800179a:	4905      	ldr	r1, [pc, #20]	; (80017b0 <HAL_UART_RxCpltCallback+0xd8>)
 800179c:	480d      	ldr	r0, [pc, #52]	; (80017d4 <HAL_UART_RxCpltCallback+0xfc>)
 800179e:	f007 fa0c 	bl	8008bba <HAL_UART_Receive_IT>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20001366 	.word	0x20001366
 80017b0:	20001354 	.word	0x20001354
 80017b4:	20001368 	.word	0x20001368
 80017b8:	20001355 	.word	0x20001355
 80017bc:	200012f4 	.word	0x200012f4
 80017c0:	20001356 	.word	0x20001356
 80017c4:	20001314 	.word	0x20001314
 80017c8:	20001357 	.word	0x20001357
 80017cc:	20001334 	.word	0x20001334
 80017d0:	20000039 	.word	0x20000039
 80017d4:	20000798 	.word	0x20000798

080017d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b094      	sub	sp, #80	; 0x50
 80017dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017de:	f107 0320 	add.w	r3, r7, #32
 80017e2:	2230      	movs	r2, #48	; 0x30
 80017e4:	2100      	movs	r1, #0
 80017e6:	4618      	mov	r0, r3
 80017e8:	f011 fbf4 	bl	8012fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	2300      	movs	r3, #0
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	4b29      	ldr	r3, [pc, #164]	; (80018a8 <SystemClock_Config+0xd0>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	4a28      	ldr	r2, [pc, #160]	; (80018a8 <SystemClock_Config+0xd0>)
 8001806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800180a:	6413      	str	r3, [r2, #64]	; 0x40
 800180c:	4b26      	ldr	r3, [pc, #152]	; (80018a8 <SystemClock_Config+0xd0>)
 800180e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001818:	2300      	movs	r3, #0
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <SystemClock_Config+0xd4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a22      	ldr	r2, [pc, #136]	; (80018ac <SystemClock_Config+0xd4>)
 8001822:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b20      	ldr	r3, [pc, #128]	; (80018ac <SystemClock_Config+0xd4>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001830:	607b      	str	r3, [r7, #4]
 8001832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 8001834:	230d      	movs	r3, #13
 8001836:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001838:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800183e:	2301      	movs	r3, #1
 8001840:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001842:	2301      	movs	r3, #1
 8001844:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001846:	2302      	movs	r3, #2
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001850:	2319      	movs	r3, #25
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001854:	23c0      	movs	r3, #192	; 0xc0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	4618      	mov	r0, r3
 8001866:	f004 ff1f 	bl	80066a8 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001870:	f000 fb94 	bl	8001f9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800188a:	f107 030c 	add.w	r3, r7, #12
 800188e:	2103      	movs	r1, #3
 8001890:	4618      	mov	r0, r3
 8001892:	f005 f981 	bl	8006b98 <HAL_RCC_ClockConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800189c:	f000 fb7e 	bl	8001f9c <Error_Handler>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3750      	adds	r7, #80	; 0x50
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40007000 	.word	0x40007000

080018b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b4:	4b12      	ldr	r3, [pc, #72]	; (8001900 <MX_I2C1_Init+0x50>)
 80018b6:	4a13      	ldr	r2, [pc, #76]	; (8001904 <MX_I2C1_Init+0x54>)
 80018b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <MX_I2C1_Init+0x50>)
 80018bc:	4a12      	ldr	r2, [pc, #72]	; (8001908 <MX_I2C1_Init+0x58>)
 80018be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_I2C1_Init+0x50>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <MX_I2C1_Init+0x50>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	; (8001900 <MX_I2C1_Init+0x50>)
 80018ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b0a      	ldr	r3, [pc, #40]	; (8001900 <MX_I2C1_Init+0x50>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_I2C1_Init+0x50>)
 80018dc:	2200      	movs	r2, #0
 80018de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <MX_I2C1_Init+0x50>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_I2C1_Init+0x50>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <MX_I2C1_Init+0x50>)
 80018ee:	f001 fe91 	bl	8003614 <HAL_I2C_Init>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f8:	f000 fb50 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	2000049c 	.word	0x2000049c
 8001904:	40005400 	.word	0x40005400
 8001908:	00061a80 	.word	0x00061a80

0800190c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <MX_I2C2_Init+0x50>)
 8001912:	4a13      	ldr	r2, [pc, #76]	; (8001960 <MX_I2C2_Init+0x54>)
 8001914:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001916:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_I2C2_Init+0x50>)
 8001918:	4a12      	ldr	r2, [pc, #72]	; (8001964 <MX_I2C2_Init+0x58>)
 800191a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800191c:	4b0f      	ldr	r3, [pc, #60]	; (800195c <MX_I2C2_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_I2C2_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_I2C2_Init+0x50>)
 800192a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800192e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001930:	4b0a      	ldr	r3, [pc, #40]	; (800195c <MX_I2C2_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_I2C2_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800193c:	4b07      	ldr	r3, [pc, #28]	; (800195c <MX_I2C2_Init+0x50>)
 800193e:	2200      	movs	r2, #0
 8001940:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_I2C2_Init+0x50>)
 8001944:	2200      	movs	r2, #0
 8001946:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001948:	4804      	ldr	r0, [pc, #16]	; (800195c <MX_I2C2_Init+0x50>)
 800194a:	f001 fe63 	bl	8003614 <HAL_I2C_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001954:	f000 fb22 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}
 800195c:	200004f0 	.word	0x200004f0
 8001960:	40005800 	.word	0x40005800
 8001964:	00061a80 	.word	0x00061a80

08001968 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_IWDG_Init+0x2c>)
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <MX_IWDG_Init+0x30>)
 8001970:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_IWDG_Init+0x2c>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_IWDG_Init+0x2c>)
 800197a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800197e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001980:	4804      	ldr	r0, [pc, #16]	; (8001994 <MX_IWDG_Init+0x2c>)
 8001982:	f003 fbc2 	bl	800510a <HAL_IWDG_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800198c:	f000 fb06 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000624 	.word	0x20000624
 8001998:	40003000 	.word	0x40003000

0800199c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <MX_RTC_Init+0x44>)
 80019a2:	4a10      	ldr	r2, [pc, #64]	; (80019e4 <MX_RTC_Init+0x48>)
 80019a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <MX_RTC_Init+0x44>)
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <MX_RTC_Init+0x44>)
 80019ae:	227f      	movs	r2, #127	; 0x7f
 80019b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <MX_RTC_Init+0x44>)
 80019b4:	22ff      	movs	r2, #255	; 0xff
 80019b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <MX_RTC_Init+0x44>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019be:	4b08      	ldr	r3, [pc, #32]	; (80019e0 <MX_RTC_Init+0x44>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <MX_RTC_Init+0x44>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <MX_RTC_Init+0x44>)
 80019cc:	f005 fbb4 	bl	8007138 <HAL_RTC_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80019d6:	f000 fae1 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	20000604 	.word	0x20000604
 80019e4:	40002800 	.word	0x40002800

080019e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a04:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a06:	4a1f      	ldr	r2, [pc, #124]	; (8001a84 <MX_TIM1_Init+0x9c>)
 8001a08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8001a16:	4b1a      	ldr	r3, [pc, #104]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a18:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001a1c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a24:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a2c:	2280      	movs	r2, #128	; 0x80
 8001a2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a30:	4813      	ldr	r0, [pc, #76]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a32:	f005 fc7b 	bl	800732c <HAL_TIM_Base_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a3c:	f000 faae 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480c      	ldr	r0, [pc, #48]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a4e:	f006 fad1 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a58:	f000 faa0 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	2300      	movs	r3, #0
 8001a62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a64:	463b      	mov	r3, r7
 8001a66:	4619      	mov	r1, r3
 8001a68:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_TIM1_Init+0x98>)
 8001a6a:	f006 ffd7 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a74:	f000 fa92 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	3718      	adds	r7, #24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20000630 	.word	0x20000630
 8001a84:	40010000 	.word	0x40010000

08001a88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a8e:	f107 0308 	add.w	r3, r7, #8
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aaa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001aba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001abe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac0:	4b16      	ldr	r3, [pc, #88]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac6:	4b15      	ldr	r3, [pc, #84]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001acc:	4813      	ldr	r0, [pc, #76]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001ace:	f005 fc2d 	bl	800732c <HAL_TIM_Base_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ad8:	f000 fa60 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001aea:	f006 fa83 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001af4:	f000 fa52 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b00:	463b      	mov	r3, r7
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_TIM2_Init+0x94>)
 8001b06:	f006 ff89 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b10:	f000 fa44 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3718      	adds	r7, #24
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000678 	.word	0x20000678

08001b20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b08e      	sub	sp, #56	; 0x38
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b34:	f107 0320 	add.w	r3, r7, #32
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
 8001b4c:	615a      	str	r2, [r3, #20]
 8001b4e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <MX_TIM3_Init+0xe8>)
 8001b54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b56:	4b2b      	ldr	r3, [pc, #172]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5c:	4b29      	ldr	r3, [pc, #164]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b62:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b68:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6a:	4b26      	ldr	r3, [pc, #152]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b76:	4823      	ldr	r0, [pc, #140]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b78:	f005 fbd8 	bl	800732c <HAL_TIM_Base_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001b82:	f000 fa0b 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b90:	4619      	mov	r1, r3
 8001b92:	481c      	ldr	r0, [pc, #112]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001b94:	f006 fa2e 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001b9e:	f000 f9fd 	bl	8001f9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ba2:	4818      	ldr	r0, [pc, #96]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001ba4:	f005 fc74 	bl	8007490 <HAL_TIM_PWM_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001bae:	f000 f9f5 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bba:	f107 0320 	add.w	r3, r7, #32
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4810      	ldr	r0, [pc, #64]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001bc2:	f006 ff2b 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001bcc:	f000 f9e6 	bl	8001f9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd0:	2360      	movs	r3, #96	; 0x60
 8001bd2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	4619      	mov	r1, r3
 8001be6:	4807      	ldr	r0, [pc, #28]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001be8:	f006 f942 	bl	8007e70 <HAL_TIM_PWM_ConfigChannel>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001bf2:	f000 f9d3 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bf6:	4803      	ldr	r0, [pc, #12]	; (8001c04 <MX_TIM3_Init+0xe4>)
 8001bf8:	f000 fbd2 	bl	80023a0 <HAL_TIM_MspPostInit>

}
 8001bfc:	bf00      	nop
 8001bfe:	3738      	adds	r7, #56	; 0x38
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200006c0 	.word	0x200006c0
 8001c08:	40000400 	.word	0x40000400

08001c0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0318 	add.w	r3, r7, #24
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c36:	4b2b      	ldr	r3, [pc, #172]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c38:	4a2b      	ldr	r2, [pc, #172]	; (8001ce8 <MX_TIM4_Init+0xdc>)
 8001c3a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c42:	4b28      	ldr	r3, [pc, #160]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c56:	4b23      	ldr	r3, [pc, #140]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c5c:	4821      	ldr	r0, [pc, #132]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c5e:	f005 fb65 	bl	800732c <HAL_TIM_Base_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8001c68:	f000 f998 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c70:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	4619      	mov	r1, r3
 8001c78:	481a      	ldr	r0, [pc, #104]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c7a:	f006 f9bb 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f000 f98a 	bl	8001f9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001c88:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001c8a:	f005 fd0b 	bl	80076a4 <HAL_TIM_IC_Init>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001c94:	f000 f982 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca0:	f107 0310 	add.w	r3, r7, #16
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	480f      	ldr	r0, [pc, #60]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001ca8:	f006 feb8 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8001cb2:	f000 f973 	bl	8001f9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2200      	movs	r2, #0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_TIM4_Init+0xd8>)
 8001cce:	f006 f833 	bl	8007d38 <HAL_TIM_IC_ConfigChannel>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001cd8:	f000 f960 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	20000708 	.word	0x20000708
 8001ce8:	40000800 	.word	0x40000800

08001cec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf2:	f107 0308 	add.w	r3, r7, #8
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	601a      	str	r2, [r3, #0]
 8001cfa:	605a      	str	r2, [r3, #4]
 8001cfc:	609a      	str	r2, [r3, #8]
 8001cfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d0a:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <MX_TIM5_Init+0x98>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14;
 8001d0e:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d10:	220e      	movs	r2, #14
 8001d12:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b1a      	ldr	r3, [pc, #104]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 63999;
 8001d1a:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d1c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001d20:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d22:	4b17      	ldr	r3, [pc, #92]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d28:	4b15      	ldr	r3, [pc, #84]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d30:	f005 fafc 	bl	800732c <HAL_TIM_Base_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001d3a:	f000 f92f 	bl	8001f9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480d      	ldr	r0, [pc, #52]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d4c:	f006 f952 	bl	8007ff4 <HAL_TIM_ConfigClockSource>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001d56:	f000 f921 	bl	8001f9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d62:	463b      	mov	r3, r7
 8001d64:	4619      	mov	r1, r3
 8001d66:	4806      	ldr	r0, [pc, #24]	; (8001d80 <MX_TIM5_Init+0x94>)
 8001d68:	f006 fe58 	bl	8008a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001d72:	f000 f913 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000750 	.word	0x20000750
 8001d84:	40000c00 	.word	0x40000c00

08001d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <MX_USART1_UART_Init+0x54>)
 8001d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8001d92:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001d94:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8001d9a:	4b0f      	ldr	r3, [pc, #60]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001da0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001daa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001db2:	220c      	movs	r2, #12
 8001db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc2:	4805      	ldr	r0, [pc, #20]	; (8001dd8 <MX_USART1_UART_Init+0x50>)
 8001dc4:	f006 feac 	bl	8008b20 <HAL_UART_Init>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8001dce:	f000 f8e5 	bl	8001f9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000798 	.word	0x20000798
 8001ddc:	40011000 	.word	0x40011000

08001de0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_DMA_Init+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <MX_DMA_Init+0x88>)
 8001df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_DMA_Init+0x88>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfe:	607b      	str	r3, [r7, #4]
 8001e00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
 8001e06:	4b18      	ldr	r3, [pc, #96]	; (8001e68 <MX_DMA_Init+0x88>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <MX_DMA_Init+0x88>)
 8001e0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_DMA_Init+0x88>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1a:	603b      	str	r3, [r7, #0]
 8001e1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	2100      	movs	r1, #0
 8001e22:	200d      	movs	r0, #13
 8001e24:	f000 fe13 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001e28:	200d      	movs	r0, #13
 8001e2a:	f000 fe2c 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2100      	movs	r1, #0
 8001e32:	202f      	movs	r0, #47	; 0x2f
 8001e34:	f000 fe0b 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001e38:	202f      	movs	r0, #47	; 0x2f
 8001e3a:	f000 fe24 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2100      	movs	r1, #0
 8001e42:	203a      	movs	r0, #58	; 0x3a
 8001e44:	f000 fe03 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e48:	203a      	movs	r0, #58	; 0x3a
 8001e4a:	f000 fe1c 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2100      	movs	r1, #0
 8001e52:	2046      	movs	r0, #70	; 0x46
 8001e54:	f000 fdfb 	bl	8002a4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001e58:	2046      	movs	r0, #70	; 0x46
 8001e5a:	f000 fe14 	bl	8002a86 <HAL_NVIC_EnableIRQ>

}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	40023800 	.word	0x40023800

08001e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b41      	ldr	r3, [pc, #260]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a40      	ldr	r2, [pc, #256]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001e8c:	f043 0304 	orr.w	r3, r3, #4
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b3a      	ldr	r3, [pc, #232]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a39      	ldr	r2, [pc, #228]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	4b33      	ldr	r3, [pc, #204]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a32      	ldr	r2, [pc, #200]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b30      	ldr	r3, [pc, #192]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	4b2c      	ldr	r3, [pc, #176]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a2b      	ldr	r2, [pc, #172]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b29      	ldr	r3, [pc, #164]	; (8001f8c <MX_GPIO_Init+0x120>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OR_GPIO_Port, LED_OR_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ef8:	4825      	ldr	r0, [pc, #148]	; (8001f90 <MX_GPIO_Init+0x124>)
 8001efa:	f001 fb71 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPLed1_Pin|GPLed2_Pin|WP_Pin, GPIO_PIN_RESET);
 8001efe:	2200      	movs	r2, #0
 8001f00:	2198      	movs	r1, #152	; 0x98
 8001f02:	4824      	ldr	r0, [pc, #144]	; (8001f94 <MX_GPIO_Init+0x128>)
 8001f04:	f001 fb6c 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EnableFAN_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	21a0      	movs	r1, #160	; 0xa0
 8001f0c:	4822      	ldr	r0, [pc, #136]	; (8001f98 <MX_GPIO_Init+0x12c>)
 8001f0e:	f001 fb67 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_OR_Pin */
  GPIO_InitStruct.Pin = LED_OR_Pin;
 8001f12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f20:	2300      	movs	r3, #0
 8001f22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OR_GPIO_Port, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4819      	ldr	r0, [pc, #100]	; (8001f90 <MX_GPIO_Init+0x124>)
 8001f2c:	f001 f9d4 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DevMode_IT_Pin */
  GPIO_InitStruct.Pin = DevMode_IT_Pin;
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DevMode_IT_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	4619      	mov	r1, r3
 8001f44:	4813      	ldr	r0, [pc, #76]	; (8001f94 <MX_GPIO_Init+0x128>)
 8001f46:	f001 f9c7 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLed1_Pin GPLed2_Pin WP_Pin */
  GPIO_InitStruct.Pin = GPLed1_Pin|GPLed2_Pin|WP_Pin;
 8001f4a:	2398      	movs	r3, #152	; 0x98
 8001f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <MX_GPIO_Init+0x128>)
 8001f62:	f001 f9b9 	bl	80032d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EnableFAN_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = EnableFAN_Pin|TOF_XSHUT_Pin;
 8001f66:	23a0      	movs	r3, #160	; 0xa0
 8001f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f72:	2300      	movs	r3, #0
 8001f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_GPIO_Init+0x12c>)
 8001f7e:	f001 f9ab 	bl	80032d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f82:	bf00      	nop
 8001f84:	3728      	adds	r7, #40	; 0x28
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020800 	.word	0x40020800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40020400 	.word	0x40020400

08001f9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa0:	b672      	cpsid	i
}
 8001fa2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <Error_Handler+0x8>
	...

08001fa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b10      	ldr	r3, [pc, #64]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb6:	4a0f      	ldr	r2, [pc, #60]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001fbe:	4b0d      	ldr	r3, [pc, #52]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	603b      	str	r3, [r7, #0]
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	4a08      	ldr	r2, [pc, #32]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <HAL_MspInit+0x4c>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	603b      	str	r3, [r7, #0]
 8001fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800

08001ff8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08c      	sub	sp, #48	; 0x30
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 031c 	add.w	r3, r7, #28
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a69      	ldr	r2, [pc, #420]	; (80021bc <HAL_I2C_MspInit+0x1c4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d12d      	bne.n	8002076 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
 800201e:	4b68      	ldr	r3, [pc, #416]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a67      	ldr	r2, [pc, #412]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 8002024:	f043 0302 	orr.w	r3, r3, #2
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b65      	ldr	r3, [pc, #404]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002036:	f44f 7340 	mov.w	r3, #768	; 0x300
 800203a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800203c:	2312      	movs	r3, #18
 800203e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002040:	2300      	movs	r3, #0
 8002042:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002044:	2303      	movs	r3, #3
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002048:	2304      	movs	r3, #4
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	485c      	ldr	r0, [pc, #368]	; (80021c4 <HAL_I2C_MspInit+0x1cc>)
 8002054:	f001 f940 	bl	80032d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	4b58      	ldr	r3, [pc, #352]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	4a57      	ldr	r2, [pc, #348]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 8002062:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002066:	6413      	str	r3, [r2, #64]	; 0x40
 8002068:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 800206a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002074:	e09e      	b.n	80021b4 <HAL_I2C_MspInit+0x1bc>
  else if(hi2c->Instance==I2C2)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <HAL_I2C_MspInit+0x1d0>)
 800207c:	4293      	cmp	r3, r2
 800207e:	f040 8099 	bne.w	80021b4 <HAL_I2C_MspInit+0x1bc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	4b4e      	ldr	r3, [pc, #312]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a4d      	ldr	r2, [pc, #308]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 800208c:	f043 0302 	orr.w	r3, r3, #2
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b4b      	ldr	r3, [pc, #300]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	613b      	str	r3, [r7, #16]
 800209c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800209e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020a4:	2312      	movs	r3, #18
 80020a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020b0:	2304      	movs	r3, #4
 80020b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	4619      	mov	r1, r3
 80020ba:	4842      	ldr	r0, [pc, #264]	; (80021c4 <HAL_I2C_MspInit+0x1cc>)
 80020bc:	f001 f90c 	bl	80032d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020c0:	2308      	movs	r3, #8
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c4:	2312      	movs	r3, #18
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80020d0:	2309      	movs	r3, #9
 80020d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	483a      	ldr	r0, [pc, #232]	; (80021c4 <HAL_I2C_MspInit+0x1cc>)
 80020dc:	f001 f8fc 	bl	80032d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020e0:	2300      	movs	r3, #0
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	4b36      	ldr	r3, [pc, #216]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 80020e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e8:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 80020ea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020ee:	6413      	str	r3, [r2, #64]	; 0x40
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_I2C_MspInit+0x1c8>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 80020fe:	4a34      	ldr	r2, [pc, #208]	; (80021d0 <HAL_I2C_MspInit+0x1d8>)
 8002100:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002102:	4b32      	ldr	r3, [pc, #200]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002104:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002108:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800210a:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002110:	4b2e      	ldr	r3, [pc, #184]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800211c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800211e:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002120:	2200      	movs	r2, #0
 8002122:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002124:	4b29      	ldr	r3, [pc, #164]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002126:	2200      	movs	r2, #0
 8002128:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 800212a:	4b28      	ldr	r3, [pc, #160]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 800212c:	2200      	movs	r2, #0
 800212e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002130:	4b26      	ldr	r3, [pc, #152]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002132:	2200      	movs	r2, #0
 8002134:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002138:	2200      	movs	r2, #0
 800213a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 800213c:	4823      	ldr	r0, [pc, #140]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 800213e:	f000 fcbd 	bl	8002abc <HAL_DMA_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8002148:	f7ff ff28 	bl	8001f9c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a1f      	ldr	r2, [pc, #124]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002150:	639a      	str	r2, [r3, #56]	; 0x38
 8002152:	4a1e      	ldr	r2, [pc, #120]	; (80021cc <HAL_I2C_MspInit+0x1d4>)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 800215a:	4a1f      	ldr	r2, [pc, #124]	; (80021d8 <HAL_I2C_MspInit+0x1e0>)
 800215c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 8002160:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002164:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 8002168:	2240      	movs	r2, #64	; 0x40
 800216a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 800216e:	2200      	movs	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002172:	4b18      	ldr	r3, [pc, #96]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 8002174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002178:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002180:	4b14      	ldr	r3, [pc, #80]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002186:	4b13      	ldr	r3, [pc, #76]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 800218e:	2200      	movs	r2, #0
 8002190:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002192:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 8002194:	2200      	movs	r2, #0
 8002196:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002198:	480e      	ldr	r0, [pc, #56]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 800219a:	f000 fc8f 	bl	8002abc <HAL_DMA_Init>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 80021a4:	f7ff fefa 	bl	8001f9c <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a0a      	ldr	r2, [pc, #40]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 80021ac:	635a      	str	r2, [r3, #52]	; 0x34
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_I2C_MspInit+0x1dc>)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80021b4:	bf00      	nop
 80021b6:	3730      	adds	r7, #48	; 0x30
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40005400 	.word	0x40005400
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020400 	.word	0x40020400
 80021c8:	40005800 	.word	0x40005800
 80021cc:	200005a4 	.word	0x200005a4
 80021d0:	40026040 	.word	0x40026040
 80021d4:	20000544 	.word	0x20000544
 80021d8:	400260b8 	.word	0x400260b8

080021dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021e4:	f107 0308 	add.w	r3, r7, #8
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]
 80021f2:	611a      	str	r2, [r3, #16]
 80021f4:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a0c      	ldr	r2, [pc, #48]	; (800222c <HAL_RTC_MspInit+0x50>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d111      	bne.n	8002224 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002200:	2302      	movs	r3, #2
 8002202:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002204:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002208:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	4618      	mov	r0, r3
 8002210:	f004 fea2 	bl	8006f58 <HAL_RCCEx_PeriphCLKConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800221a:	f7ff febf 	bl	8001f9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800221e:	4b04      	ldr	r3, [pc, #16]	; (8002230 <HAL_RTC_MspInit+0x54>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40002800 	.word	0x40002800
 8002230:	42470e3c 	.word	0x42470e3c

08002234 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08e      	sub	sp, #56	; 0x38
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002240:	2200      	movs	r2, #0
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	609a      	str	r2, [r3, #8]
 8002248:	60da      	str	r2, [r3, #12]
 800224a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a4d      	ldr	r2, [pc, #308]	; (8002388 <HAL_TIM_Base_MspInit+0x154>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d116      	bne.n	8002284 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
 800225a:	4b4c      	ldr	r3, [pc, #304]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	4a4b      	ldr	r2, [pc, #300]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	6453      	str	r3, [r2, #68]	; 0x44
 8002266:	4b49      	ldr	r3, [pc, #292]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	623b      	str	r3, [r7, #32]
 8002270:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	2100      	movs	r1, #0
 8002276:	2019      	movs	r0, #25
 8002278:	f000 fbe9 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800227c:	2019      	movs	r0, #25
 800227e:	f000 fc02 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002282:	e07c      	b.n	800237e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM2)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800228c:	d116      	bne.n	80022bc <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	4b3e      	ldr	r3, [pc, #248]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	4a3d      	ldr	r2, [pc, #244]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	6413      	str	r3, [r2, #64]	; 0x40
 800229e:	4b3b      	ldr	r3, [pc, #236]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80022aa:	2200      	movs	r2, #0
 80022ac:	2100      	movs	r1, #0
 80022ae:	201c      	movs	r0, #28
 80022b0:	f000 fbcd 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022b4:	201c      	movs	r0, #28
 80022b6:	f000 fbe6 	bl	8002a86 <HAL_NVIC_EnableIRQ>
}
 80022ba:	e060      	b.n	800237e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a33      	ldr	r2, [pc, #204]	; (8002390 <HAL_TIM_Base_MspInit+0x15c>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d10e      	bne.n	80022e4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
 80022ca:	4b30      	ldr	r3, [pc, #192]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	4a2f      	ldr	r2, [pc, #188]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6413      	str	r3, [r2, #64]	; 0x40
 80022d6:	4b2d      	ldr	r3, [pc, #180]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
 80022e0:	69bb      	ldr	r3, [r7, #24]
}
 80022e2:	e04c      	b.n	800237e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2a      	ldr	r2, [pc, #168]	; (8002394 <HAL_TIM_Base_MspInit+0x160>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d12c      	bne.n	8002348 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	4b26      	ldr	r3, [pc, #152]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a25      	ldr	r2, [pc, #148]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b23      	ldr	r3, [pc, #140]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	617b      	str	r3, [r7, #20]
 8002308:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800230a:	2300      	movs	r3, #0
 800230c:	613b      	str	r3, [r7, #16]
 800230e:	4b1f      	ldr	r3, [pc, #124]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002314:	f043 0302 	orr.w	r3, r3, #2
 8002318:	6313      	str	r3, [r2, #48]	; 0x30
 800231a:	4b1c      	ldr	r3, [pc, #112]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RPMSpeed_IC_Pin;
 8002326:	2340      	movs	r3, #64	; 0x40
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002336:	2302      	movs	r3, #2
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RPMSpeed_IC_GPIO_Port, &GPIO_InitStruct);
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	4619      	mov	r1, r3
 8002340:	4815      	ldr	r0, [pc, #84]	; (8002398 <HAL_TIM_Base_MspInit+0x164>)
 8002342:	f000 ffc9 	bl	80032d8 <HAL_GPIO_Init>
}
 8002346:	e01a      	b.n	800237e <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a13      	ldr	r2, [pc, #76]	; (800239c <HAL_TIM_Base_MspInit+0x168>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d115      	bne.n	800237e <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6413      	str	r3, [r2, #64]	; 0x40
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_TIM_Base_MspInit+0x158>)
 8002364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2032      	movs	r0, #50	; 0x32
 8002374:	f000 fb6b 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002378:	2032      	movs	r0, #50	; 0x32
 800237a:	f000 fb84 	bl	8002a86 <HAL_NVIC_EnableIRQ>
}
 800237e:	bf00      	nop
 8002380:	3738      	adds	r7, #56	; 0x38
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40010000 	.word	0x40010000
 800238c:	40023800 	.word	0x40023800
 8002390:	40000400 	.word	0x40000400
 8002394:	40000800 	.word	0x40000800
 8002398:	40020400 	.word	0x40020400
 800239c:	40000c00 	.word	0x40000c00

080023a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b088      	sub	sp, #32
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023a8:	f107 030c 	add.w	r3, r7, #12
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a12      	ldr	r2, [pc, #72]	; (8002408 <HAL_TIM_MspPostInit+0x68>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d11d      	bne.n	80023fe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b11      	ldr	r3, [pc, #68]	; (800240c <HAL_TIM_MspPostInit+0x6c>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a10      	ldr	r2, [pc, #64]	; (800240c <HAL_TIM_MspPostInit+0x6c>)
 80023cc:	f043 0302 	orr.w	r3, r3, #2
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b0e      	ldr	r3, [pc, #56]	; (800240c <HAL_TIM_MspPostInit+0x6c>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 80023de:	2310      	movs	r3, #16
 80023e0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e2:	2302      	movs	r3, #2
 80023e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ee:	2302      	movs	r3, #2
 80023f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 80023f2:	f107 030c 	add.w	r3, r7, #12
 80023f6:	4619      	mov	r1, r3
 80023f8:	4805      	ldr	r0, [pc, #20]	; (8002410 <HAL_TIM_MspPostInit+0x70>)
 80023fa:	f000 ff6d 	bl	80032d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80023fe:	bf00      	nop
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	40000400 	.word	0x40000400
 800240c:	40023800 	.word	0x40023800
 8002410:	40020400 	.word	0x40020400

08002414 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08a      	sub	sp, #40	; 0x28
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a4c      	ldr	r2, [pc, #304]	; (8002564 <HAL_UART_MspInit+0x150>)
 8002432:	4293      	cmp	r3, r2
 8002434:	f040 8091 	bne.w	800255a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	4b4a      	ldr	r3, [pc, #296]	; (8002568 <HAL_UART_MspInit+0x154>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	4a49      	ldr	r2, [pc, #292]	; (8002568 <HAL_UART_MspInit+0x154>)
 8002442:	f043 0310 	orr.w	r3, r3, #16
 8002446:	6453      	str	r3, [r2, #68]	; 0x44
 8002448:	4b47      	ldr	r3, [pc, #284]	; (8002568 <HAL_UART_MspInit+0x154>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b43      	ldr	r3, [pc, #268]	; (8002568 <HAL_UART_MspInit+0x154>)
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	4a42      	ldr	r2, [pc, #264]	; (8002568 <HAL_UART_MspInit+0x154>)
 800245e:	f043 0301 	orr.w	r3, r3, #1
 8002462:	6313      	str	r3, [r2, #48]	; 0x30
 8002464:	4b40      	ldr	r3, [pc, #256]	; (8002568 <HAL_UART_MspInit+0x154>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f003 0301 	and.w	r3, r3, #1
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002470:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002474:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002476:	2302      	movs	r3, #2
 8002478:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247e:	2303      	movs	r3, #3
 8002480:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002482:	2307      	movs	r3, #7
 8002484:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002486:	f107 0314 	add.w	r3, r7, #20
 800248a:	4619      	mov	r1, r3
 800248c:	4837      	ldr	r0, [pc, #220]	; (800256c <HAL_UART_MspInit+0x158>)
 800248e:	f000 ff23 	bl	80032d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002492:	4b37      	ldr	r3, [pc, #220]	; (8002570 <HAL_UART_MspInit+0x15c>)
 8002494:	4a37      	ldr	r2, [pc, #220]	; (8002574 <HAL_UART_MspInit+0x160>)
 8002496:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_UART_MspInit+0x15c>)
 800249a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800249e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024a0:	4b33      	ldr	r3, [pc, #204]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a6:	4b32      	ldr	r3, [pc, #200]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024ac:	4b30      	ldr	r3, [pc, #192]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024b4:	4b2e      	ldr	r3, [pc, #184]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024bc:	2200      	movs	r2, #0
 80024be:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024c0:	4b2b      	ldr	r3, [pc, #172]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024cc:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024d2:	4827      	ldr	r0, [pc, #156]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024d4:	f000 faf2 	bl	8002abc <HAL_DMA_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80024de:	f7ff fd5d 	bl	8001f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a22      	ldr	r2, [pc, #136]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_UART_MspInit+0x15c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80024ee:	4b22      	ldr	r3, [pc, #136]	; (8002578 <HAL_UART_MspInit+0x164>)
 80024f0:	4a22      	ldr	r2, [pc, #136]	; (800257c <HAL_UART_MspInit+0x168>)
 80024f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80024f4:	4b20      	ldr	r3, [pc, #128]	; (8002578 <HAL_UART_MspInit+0x164>)
 80024f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024fc:	4b1e      	ldr	r3, [pc, #120]	; (8002578 <HAL_UART_MspInit+0x164>)
 80024fe:	2240      	movs	r2, #64	; 0x40
 8002500:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002502:	4b1d      	ldr	r3, [pc, #116]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002508:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_UART_MspInit+0x164>)
 800250a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800250e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002510:	4b19      	ldr	r3, [pc, #100]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002516:	4b18      	ldr	r3, [pc, #96]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800251c:	4b16      	ldr	r3, [pc, #88]	; (8002578 <HAL_UART_MspInit+0x164>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002522:	4b15      	ldr	r3, [pc, #84]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002528:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_UART_MspInit+0x164>)
 800252a:	2200      	movs	r2, #0
 800252c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800252e:	4812      	ldr	r0, [pc, #72]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002530:	f000 fac4 	bl	8002abc <HAL_DMA_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800253a:	f7ff fd2f 	bl	8001f9c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a0d      	ldr	r2, [pc, #52]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002542:	635a      	str	r2, [r3, #52]	; 0x34
 8002544:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <HAL_UART_MspInit+0x164>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800254a:	2200      	movs	r2, #0
 800254c:	2100      	movs	r1, #0
 800254e:	2025      	movs	r0, #37	; 0x25
 8002550:	f000 fa7d 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002554:	2025      	movs	r0, #37	; 0x25
 8002556:	f000 fa96 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800255a:	bf00      	nop
 800255c:	3728      	adds	r7, #40	; 0x28
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	40011000 	.word	0x40011000
 8002568:	40023800 	.word	0x40023800
 800256c:	40020000 	.word	0x40020000
 8002570:	200007dc 	.word	0x200007dc
 8002574:	40026440 	.word	0x40026440
 8002578:	2000083c 	.word	0x2000083c
 800257c:	400264b8 	.word	0x400264b8

08002580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002584:	e7fe      	b.n	8002584 <NMI_Handler+0x4>

08002586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258a:	e7fe      	b.n	800258a <HardFault_Handler+0x4>

0800258c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002590:	e7fe      	b.n	8002590 <MemManage_Handler+0x4>

08002592 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002596:	e7fe      	b.n	8002596 <BusFault_Handler+0x4>

08002598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <UsageFault_Handler+0x4>

0800259e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025b0:	bf00      	nop
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025cc:	f000 f920 	bl	8002810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80025d8:	4802      	ldr	r0, [pc, #8]	; (80025e4 <DMA1_Stream2_IRQHandler+0x10>)
 80025da:	f000 fc07 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	200005a4 	.word	0x200005a4

080025e8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025ec:	4802      	ldr	r0, [pc, #8]	; (80025f8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025ee:	f005 fa9b 	bl	8007b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025f2:	bf00      	nop
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	20000630 	.word	0x20000630

080025fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002600:	4802      	ldr	r0, [pc, #8]	; (800260c <TIM2_IRQHandler+0x10>)
 8002602:	f005 fa91 	bl	8007b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002606:	bf00      	nop
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000678 	.word	0x20000678

08002610 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002614:	4802      	ldr	r0, [pc, #8]	; (8002620 <USART1_IRQHandler+0x10>)
 8002616:	f006 fb7f 	bl	8008d18 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000798 	.word	0x20000798

08002624 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002628:	4802      	ldr	r0, [pc, #8]	; (8002634 <DMA1_Stream7_IRQHandler+0x10>)
 800262a:	f000 fbdf 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000544 	.word	0x20000544

08002638 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800263c:	4802      	ldr	r0, [pc, #8]	; (8002648 <TIM5_IRQHandler+0x10>)
 800263e:	f005 fa73 	bl	8007b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	20000750 	.word	0x20000750

0800264c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <DMA2_Stream2_IRQHandler+0x10>)
 8002652:	f000 fbcb 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	200007dc 	.word	0x200007dc

08002660 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002664:	4802      	ldr	r0, [pc, #8]	; (8002670 <OTG_FS_IRQHandler+0x10>)
 8002666:	f002 fef2 	bl	800544e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	200028b0 	.word	0x200028b0

08002674 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002678:	4802      	ldr	r0, [pc, #8]	; (8002684 <DMA2_Stream7_IRQHandler+0x10>)
 800267a:	f000 fbb7 	bl	8002dec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800267e:	bf00      	nop
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	2000083c 	.word	0x2000083c

08002688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002690:	4a14      	ldr	r2, [pc, #80]	; (80026e4 <_sbrk+0x5c>)
 8002692:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <_sbrk+0x60>)
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <_sbrk+0x64>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d102      	bne.n	80026aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026a4:	4b11      	ldr	r3, [pc, #68]	; (80026ec <_sbrk+0x64>)
 80026a6:	4a12      	ldr	r2, [pc, #72]	; (80026f0 <_sbrk+0x68>)
 80026a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026aa:	4b10      	ldr	r3, [pc, #64]	; (80026ec <_sbrk+0x64>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	693a      	ldr	r2, [r7, #16]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d207      	bcs.n	80026c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026b8:	f010 fc54 	bl	8012f64 <__errno>
 80026bc:	4603      	mov	r3, r0
 80026be:	220c      	movs	r2, #12
 80026c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026c6:	e009      	b.n	80026dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026c8:	4b08      	ldr	r3, [pc, #32]	; (80026ec <_sbrk+0x64>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026ce:	4b07      	ldr	r3, [pc, #28]	; (80026ec <_sbrk+0x64>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4413      	add	r3, r2
 80026d6:	4a05      	ldr	r2, [pc, #20]	; (80026ec <_sbrk+0x64>)
 80026d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026da:	68fb      	ldr	r3, [r7, #12]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20020000 	.word	0x20020000
 80026e8:	00000400 	.word	0x00000400
 80026ec:	20001388 	.word	0x20001388
 80026f0:	20002ff0 	.word	0x20002ff0

080026f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <SystemInit+0x20>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	4a05      	ldr	r2, [pc, #20]	; (8002714 <SystemInit+0x20>)
 8002700:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002704:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000ed00 	.word	0xe000ed00

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800271e:	490e      	ldr	r1, [pc, #56]	; (8002758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002734:	4c0b      	ldr	r4, [pc, #44]	; (8002764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002742:	f7ff ffd7 	bl	80026f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002746:	f010 fc13 	bl	8012f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7fe fb7b 	bl	8000e44 <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	2000047c 	.word	0x2000047c
  ldr r2, =_sidata
 800275c:	08013990 	.word	0x08013990
  ldr r2, =_sbss
 8002760:	2000047c 	.word	0x2000047c
  ldr r4, =_ebss
 8002764:	20002fec 	.word	0x20002fec

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_Init+0x40>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_Init+0x40>)
 8002776:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800277a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_Init+0x40>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_Init+0x40>)
 8002782:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002786:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002788:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_Init+0x40>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_Init+0x40>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002794:	2003      	movs	r0, #3
 8002796:	f000 f94f 	bl	8002a38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800279a:	200f      	movs	r0, #15
 800279c:	f000 f808 	bl	80027b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027a0:	f7ff fc02 	bl	8001fa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40023c00 	.word	0x40023c00

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027b8:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_InitTick+0x54>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <HAL_InitTick+0x58>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f967 	bl	8002aa2 <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e00e      	b.n	80027fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b0f      	cmp	r3, #15
 80027e2:	d80a      	bhi.n	80027fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e4:	2200      	movs	r2, #0
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ec:	f000 f92f 	bl	8002a4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027f0:	4a06      	ldr	r2, [pc, #24]	; (800280c <HAL_InitTick+0x5c>)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e000      	b.n	80027fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	20000060 	.word	0x20000060
 8002808:	20000068 	.word	0x20000068
 800280c:	20000064 	.word	0x20000064

08002810 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_IncTick+0x20>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_IncTick+0x24>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4413      	add	r3, r2
 8002820:	4a04      	ldr	r2, [pc, #16]	; (8002834 <HAL_IncTick+0x24>)
 8002822:	6013      	str	r3, [r2, #0]
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000068 	.word	0x20000068
 8002834:	2000138c 	.word	0x2000138c

08002838 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
  return uwTick;
 800283c:	4b03      	ldr	r3, [pc, #12]	; (800284c <HAL_GetTick+0x14>)
 800283e:	681b      	ldr	r3, [r3, #0]
}
 8002840:	4618      	mov	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	2000138c 	.word	0x2000138c

08002850 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002858:	f7ff ffee 	bl	8002838 <HAL_GetTick>
 800285c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002868:	d005      	beq.n	8002876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <HAL_Delay+0x44>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	461a      	mov	r2, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002876:	bf00      	nop
 8002878:	f7ff ffde 	bl	8002838 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	429a      	cmp	r2, r3
 8002886:	d8f7      	bhi.n	8002878 <HAL_Delay+0x28>
  {
  }
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20000068 	.word	0x20000068

08002898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028b4:	4013      	ands	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ca:	4a04      	ldr	r2, [pc, #16]	; (80028dc <__NVIC_SetPriorityGrouping+0x44>)
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	60d3      	str	r3, [r2, #12]
}
 80028d0:	bf00      	nop
 80028d2:	3714      	adds	r7, #20
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000ed00 	.word	0xe000ed00

080028e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028e4:	4b04      	ldr	r3, [pc, #16]	; (80028f8 <__NVIC_GetPriorityGrouping+0x18>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f003 0307 	and.w	r3, r3, #7
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	2b00      	cmp	r3, #0
 800290c:	db0b      	blt.n	8002926 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	f003 021f 	and.w	r2, r3, #31
 8002914:	4907      	ldr	r1, [pc, #28]	; (8002934 <__NVIC_EnableIRQ+0x38>)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	095b      	lsrs	r3, r3, #5
 800291c:	2001      	movs	r0, #1
 800291e:	fa00 f202 	lsl.w	r2, r0, r2
 8002922:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	e000e100 	.word	0xe000e100

08002938 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002948:	2b00      	cmp	r3, #0
 800294a:	db0a      	blt.n	8002962 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	490c      	ldr	r1, [pc, #48]	; (8002984 <__NVIC_SetPriority+0x4c>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	0112      	lsls	r2, r2, #4
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	440b      	add	r3, r1
 800295c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002960:	e00a      	b.n	8002978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	b2da      	uxtb	r2, r3
 8002966:	4908      	ldr	r1, [pc, #32]	; (8002988 <__NVIC_SetPriority+0x50>)
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	3b04      	subs	r3, #4
 8002970:	0112      	lsls	r2, r2, #4
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	440b      	add	r3, r1
 8002976:	761a      	strb	r2, [r3, #24]
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	e000e100 	.word	0xe000e100
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800298c:	b480      	push	{r7}
 800298e:	b089      	sub	sp, #36	; 0x24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	f1c3 0307 	rsb	r3, r3, #7
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	bf28      	it	cs
 80029aa:	2304      	movcs	r3, #4
 80029ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	3304      	adds	r3, #4
 80029b2:	2b06      	cmp	r3, #6
 80029b4:	d902      	bls.n	80029bc <NVIC_EncodePriority+0x30>
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	3b03      	subs	r3, #3
 80029ba:	e000      	b.n	80029be <NVIC_EncodePriority+0x32>
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ca:	43da      	mvns	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	401a      	ands	r2, r3
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	fa01 f303 	lsl.w	r3, r1, r3
 80029de:	43d9      	mvns	r1, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	4313      	orrs	r3, r2
         );
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3724      	adds	r7, #36	; 0x24
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
	...

080029f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a04:	d301      	bcc.n	8002a0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00f      	b.n	8002a2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a0a:	4a0a      	ldr	r2, [pc, #40]	; (8002a34 <SysTick_Config+0x40>)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a12:	210f      	movs	r1, #15
 8002a14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a18:	f7ff ff8e 	bl	8002938 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <SysTick_Config+0x40>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a22:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <SysTick_Config+0x40>)
 8002a24:	2207      	movs	r2, #7
 8002a26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	e000e010 	.word	0xe000e010

08002a38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7ff ff29 	bl	8002898 <__NVIC_SetPriorityGrouping>
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b086      	sub	sp, #24
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	4603      	mov	r3, r0
 8002a56:	60b9      	str	r1, [r7, #8]
 8002a58:	607a      	str	r2, [r7, #4]
 8002a5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a60:	f7ff ff3e 	bl	80028e0 <__NVIC_GetPriorityGrouping>
 8002a64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	6978      	ldr	r0, [r7, #20]
 8002a6c:	f7ff ff8e 	bl	800298c <NVIC_EncodePriority>
 8002a70:	4602      	mov	r2, r0
 8002a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff ff5d 	bl	8002938 <__NVIC_SetPriority>
}
 8002a7e:	bf00      	nop
 8002a80:	3718      	adds	r7, #24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b082      	sub	sp, #8
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f7ff ff31 	bl	80028fc <__NVIC_EnableIRQ>
}
 8002a9a:	bf00      	nop
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff ffa2 	bl	80029f4 <SysTick_Config>
 8002ab0:	4603      	mov	r3, r0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
	...

08002abc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff feb6 	bl	8002838 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d101      	bne.n	8002ad8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e099      	b.n	8002c0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af8:	e00f      	b.n	8002b1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002afa:	f7ff fe9d 	bl	8002838 <HAL_GetTick>
 8002afe:	4602      	mov	r2, r0
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	d908      	bls.n	8002b1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2220      	movs	r2, #32
 8002b0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2203      	movs	r2, #3
 8002b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e078      	b.n	8002c0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1e8      	bne.n	8002afa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_DMA_Init+0x158>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a1b      	ldr	r3, [r3, #32]
 8002b64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	697a      	ldr	r2, [r7, #20]
 8002b8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f023 0307 	bic.w	r3, r3, #7
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d117      	bne.n	8002bde <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 fb0d 	bl	80031e0 <DMA_CheckFifoParam>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2240      	movs	r2, #64	; 0x40
 8002bd0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e016      	b.n	8002c0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 fac4 	bl	8003174 <DMA_CalcBaseAndBitshift>
 8002bec:	4603      	mov	r3, r0
 8002bee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	223f      	movs	r2, #63	; 0x3f
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	f010803f 	.word	0xf010803f

08002c18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Start_IT+0x26>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e040      	b.n	8002cc0 <HAL_DMA_Start_IT+0xa8>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d12f      	bne.n	8002cb2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2202      	movs	r2, #2
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	68b9      	ldr	r1, [r7, #8]
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fa56 	bl	8003118 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	223f      	movs	r2, #63	; 0x3f
 8002c72:	409a      	lsls	r2, r3
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0216 	orr.w	r2, r2, #22
 8002c86:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f042 0208 	orr.w	r2, r2, #8
 8002c9e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0201 	orr.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	e005      	b.n	8002cbe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cd6:	f7ff fdaf 	bl	8002838 <HAL_GetTick>
 8002cda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d008      	beq.n	8002cfa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2280      	movs	r2, #128	; 0x80
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e052      	b.n	8002da0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 0216 	bic.w	r2, r2, #22
 8002d08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d103      	bne.n	8002d2a <HAL_DMA_Abort+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0208 	bic.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d4a:	e013      	b.n	8002d74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d4c:	f7ff fd74 	bl	8002838 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	d90c      	bls.n	8002d74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2203      	movs	r2, #3
 8002d64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e015      	b.n	8002da0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d1e4      	bne.n	8002d4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	223f      	movs	r2, #63	; 0x3f
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2201      	movs	r2, #1
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d004      	beq.n	8002dc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2280      	movs	r2, #128	; 0x80
 8002dc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00c      	b.n	8002de0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2205      	movs	r2, #5
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0201 	bic.w	r2, r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002df8:	4b8e      	ldr	r3, [pc, #568]	; (8003034 <HAL_DMA_IRQHandler+0x248>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a8e      	ldr	r2, [pc, #568]	; (8003038 <HAL_DMA_IRQHandler+0x24c>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	0a9b      	lsrs	r3, r3, #10
 8002e04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	2208      	movs	r2, #8
 8002e18:	409a      	lsls	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d01a      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0204 	bic.w	r2, r2, #4
 8002e3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	2208      	movs	r2, #8
 8002e46:	409a      	lsls	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	f043 0201 	orr.w	r2, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	409a      	lsls	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d012      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e86:	f043 0202 	orr.w	r2, r3, #2
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e92:	2204      	movs	r2, #4
 8002e94:	409a      	lsls	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d012      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00b      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	409a      	lsls	r2, r3
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f043 0204 	orr.w	r2, r3, #4
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec8:	2210      	movs	r2, #16
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d043      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d03c      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee6:	2210      	movs	r2, #16
 8002ee8:	409a      	lsls	r2, r3
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d018      	beq.n	8002f2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d108      	bne.n	8002f1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d024      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	e01f      	b.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01b      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	4798      	blx	r3
 8002f2c:	e016      	b.n	8002f5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d107      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f022 0208 	bic.w	r2, r2, #8
 8002f4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f60:	2220      	movs	r2, #32
 8002f62:	409a      	lsls	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	4013      	ands	r3, r2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 808f 	beq.w	800308c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 8087 	beq.w	800308c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	2220      	movs	r2, #32
 8002f84:	409a      	lsls	r2, r3
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b05      	cmp	r3, #5
 8002f94:	d136      	bne.n	8003004 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0216 	bic.w	r2, r2, #22
 8002fa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695a      	ldr	r2, [r3, #20]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d103      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0x1da>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0208 	bic.w	r2, r2, #8
 8002fd4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	223f      	movs	r2, #63	; 0x3f
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d07e      	beq.n	80030f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
        }
        return;
 8003002:	e079      	b.n	80030f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d01d      	beq.n	800304e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10d      	bne.n	800303c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	2b00      	cmp	r3, #0
 8003026:	d031      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	4798      	blx	r3
 8003030:	e02c      	b.n	800308c <HAL_DMA_IRQHandler+0x2a0>
 8003032:	bf00      	nop
 8003034:	20000060 	.word	0x20000060
 8003038:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d023      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e01e      	b.n	800308c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003058:	2b00      	cmp	r3, #0
 800305a:	d10f      	bne.n	800307c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0210 	bic.w	r2, r2, #16
 800306a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d032      	beq.n	80030fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003098:	f003 0301 	and.w	r3, r3, #1
 800309c:	2b00      	cmp	r3, #0
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2205      	movs	r2, #5
 80030a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d307      	bcc.n	80030d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1f2      	bne.n	80030b8 <HAL_DMA_IRQHandler+0x2cc>
 80030d2:	e000      	b.n	80030d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	4798      	blx	r3
 80030f6:	e000      	b.n	80030fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80030f8:	bf00      	nop
    }
  }
}
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800310c:	4618      	mov	r0, r3
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003134:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	2b40      	cmp	r3, #64	; 0x40
 8003144:	d108      	bne.n	8003158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003156:	e007      	b.n	8003168 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68ba      	ldr	r2, [r7, #8]
 800315e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	60da      	str	r2, [r3, #12]
}
 8003168:	bf00      	nop
 800316a:	3714      	adds	r7, #20
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	3b10      	subs	r3, #16
 8003184:	4a14      	ldr	r2, [pc, #80]	; (80031d8 <DMA_CalcBaseAndBitshift+0x64>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	091b      	lsrs	r3, r3, #4
 800318c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800318e:	4a13      	ldr	r2, [pc, #76]	; (80031dc <DMA_CalcBaseAndBitshift+0x68>)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4413      	add	r3, r2
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b03      	cmp	r3, #3
 80031a0:	d909      	bls.n	80031b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	659a      	str	r2, [r3, #88]	; 0x58
 80031b4:	e007      	b.n	80031c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031be:	f023 0303 	bic.w	r3, r3, #3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	aaaaaaab 	.word	0xaaaaaaab
 80031dc:	08013944 	.word	0x08013944

080031e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031e8:	2300      	movs	r3, #0
 80031ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d11f      	bne.n	800323a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2b03      	cmp	r3, #3
 80031fe:	d856      	bhi.n	80032ae <DMA_CheckFifoParam+0xce>
 8003200:	a201      	add	r2, pc, #4	; (adr r2, 8003208 <DMA_CheckFifoParam+0x28>)
 8003202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003206:	bf00      	nop
 8003208:	08003219 	.word	0x08003219
 800320c:	0800322b 	.word	0x0800322b
 8003210:	08003219 	.word	0x08003219
 8003214:	080032af 	.word	0x080032af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d046      	beq.n	80032b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003228:	e043      	b.n	80032b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003232:	d140      	bne.n	80032b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003238:	e03d      	b.n	80032b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003242:	d121      	bne.n	8003288 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2b03      	cmp	r3, #3
 8003248:	d837      	bhi.n	80032ba <DMA_CheckFifoParam+0xda>
 800324a:	a201      	add	r2, pc, #4	; (adr r2, 8003250 <DMA_CheckFifoParam+0x70>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	08003261 	.word	0x08003261
 8003254:	08003267 	.word	0x08003267
 8003258:	08003261 	.word	0x08003261
 800325c:	08003279 	.word	0x08003279
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
      break;
 8003264:	e030      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d025      	beq.n	80032be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003276:	e022      	b.n	80032be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003280:	d11f      	bne.n	80032c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003286:	e01c      	b.n	80032c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d903      	bls.n	8003296 <DMA_CheckFifoParam+0xb6>
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d003      	beq.n	800329c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003294:	e018      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
      break;
 800329a:	e015      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00e      	beq.n	80032c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      break;
 80032ac:	e00b      	b.n	80032c6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ae:	bf00      	nop
 80032b0:	e00a      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b2:	bf00      	nop
 80032b4:	e008      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032b6:	bf00      	nop
 80032b8:	e006      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032ba:	bf00      	nop
 80032bc:	e004      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032be:	bf00      	nop
 80032c0:	e002      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032c2:	bf00      	nop
 80032c4:	e000      	b.n	80032c8 <DMA_CheckFifoParam+0xe8>
      break;
 80032c6:	bf00      	nop
    }
  } 
  
  return status; 
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3714      	adds	r7, #20
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop

080032d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032d8:	b480      	push	{r7}
 80032da:	b089      	sub	sp, #36	; 0x24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e159      	b.n	80035a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032f4:	2201      	movs	r2, #1
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4013      	ands	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	429a      	cmp	r2, r3
 800330e:	f040 8148 	bne.w	80035a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b01      	cmp	r3, #1
 800331c:	d005      	beq.n	800332a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003326:	2b02      	cmp	r3, #2
 8003328:	d130      	bne.n	800338c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	2203      	movs	r2, #3
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43db      	mvns	r3, r3
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	4013      	ands	r3, r2
 8003340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	69ba      	ldr	r2, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003360:	2201      	movs	r2, #1
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43db      	mvns	r3, r3
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	4013      	ands	r3, r2
 800336e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0201 	and.w	r2, r3, #1
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa02 f303 	lsl.w	r3, r2, r3
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b03      	cmp	r3, #3
 8003396:	d017      	beq.n	80033c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	2203      	movs	r2, #3
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	4013      	ands	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	689a      	ldr	r2, [r3, #8]
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	69ba      	ldr	r2, [r7, #24]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d123      	bne.n	800341c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	08da      	lsrs	r2, r3, #3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3208      	adds	r2, #8
 80033dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	220f      	movs	r2, #15
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	43db      	mvns	r3, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4013      	ands	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	08da      	lsrs	r2, r3, #3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3208      	adds	r2, #8
 8003416:	69b9      	ldr	r1, [r7, #24]
 8003418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	2203      	movs	r2, #3
 8003428:	fa02 f303 	lsl.w	r3, r2, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	4013      	ands	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f003 0203 	and.w	r2, r3, #3
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4313      	orrs	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a2 	beq.w	80035a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b57      	ldr	r3, [pc, #348]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003466:	4a56      	ldr	r2, [pc, #344]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800346c:	6453      	str	r3, [r2, #68]	; 0x44
 800346e:	4b54      	ldr	r3, [pc, #336]	; (80035c0 <HAL_GPIO_Init+0x2e8>)
 8003470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800347a:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_GPIO_Init+0x2ec>)
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	089b      	lsrs	r3, r3, #2
 8003480:	3302      	adds	r3, #2
 8003482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a49      	ldr	r2, [pc, #292]	; (80035c8 <HAL_GPIO_Init+0x2f0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d019      	beq.n	80034da <HAL_GPIO_Init+0x202>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a48      	ldr	r2, [pc, #288]	; (80035cc <HAL_GPIO_Init+0x2f4>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d013      	beq.n	80034d6 <HAL_GPIO_Init+0x1fe>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a47      	ldr	r2, [pc, #284]	; (80035d0 <HAL_GPIO_Init+0x2f8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d00d      	beq.n	80034d2 <HAL_GPIO_Init+0x1fa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a46      	ldr	r2, [pc, #280]	; (80035d4 <HAL_GPIO_Init+0x2fc>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d007      	beq.n	80034ce <HAL_GPIO_Init+0x1f6>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a45      	ldr	r2, [pc, #276]	; (80035d8 <HAL_GPIO_Init+0x300>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d101      	bne.n	80034ca <HAL_GPIO_Init+0x1f2>
 80034c6:	2304      	movs	r3, #4
 80034c8:	e008      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034ca:	2307      	movs	r3, #7
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e004      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x204>
 80034da:	2300      	movs	r3, #0
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	f002 0203 	and.w	r2, r2, #3
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	4093      	lsls	r3, r2
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034ec:	4935      	ldr	r1, [pc, #212]	; (80035c4 <HAL_GPIO_Init+0x2ec>)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034fa:	4b38      	ldr	r3, [pc, #224]	; (80035dc <HAL_GPIO_Init+0x304>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	43db      	mvns	r3, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4013      	ands	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800351e:	4a2f      	ldr	r2, [pc, #188]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003524:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	43db      	mvns	r3, r3
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	4013      	ands	r3, r2
 8003532:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	4313      	orrs	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003548:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_GPIO_Init+0x304>)
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800356a:	69ba      	ldr	r2, [r7, #24]
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003572:	4a1a      	ldr	r2, [pc, #104]	; (80035dc <HAL_GPIO_Init+0x304>)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_GPIO_Init+0x304>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800359c:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <HAL_GPIO_Init+0x304>)
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	3301      	adds	r3, #1
 80035a6:	61fb      	str	r3, [r7, #28]
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b0f      	cmp	r3, #15
 80035ac:	f67f aea2 	bls.w	80032f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	3724      	adds	r7, #36	; 0x24
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40013800 	.word	0x40013800
 80035c8:	40020000 	.word	0x40020000
 80035cc:	40020400 	.word	0x40020400
 80035d0:	40020800 	.word	0x40020800
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	40021000 	.word	0x40021000
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e12b      	b.n	800387e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	d106      	bne.n	8003640 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	f7fe fcdc 	bl	8001ff8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0201 	bic.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003666:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003676:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003678:	f003 fc46 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800367c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	4a81      	ldr	r2, [pc, #516]	; (8003888 <HAL_I2C_Init+0x274>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d807      	bhi.n	8003698 <HAL_I2C_Init+0x84>
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	4a80      	ldr	r2, [pc, #512]	; (800388c <HAL_I2C_Init+0x278>)
 800368c:	4293      	cmp	r3, r2
 800368e:	bf94      	ite	ls
 8003690:	2301      	movls	r3, #1
 8003692:	2300      	movhi	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	e006      	b.n	80036a6 <HAL_I2C_Init+0x92>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a7d      	ldr	r2, [pc, #500]	; (8003890 <HAL_I2C_Init+0x27c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e0e7      	b.n	800387e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4a78      	ldr	r2, [pc, #480]	; (8003894 <HAL_I2C_Init+0x280>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	0c9b      	lsrs	r3, r3, #18
 80036b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	4a6a      	ldr	r2, [pc, #424]	; (8003888 <HAL_I2C_Init+0x274>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d802      	bhi.n	80036e8 <HAL_I2C_Init+0xd4>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	3301      	adds	r3, #1
 80036e6:	e009      	b.n	80036fc <HAL_I2C_Init+0xe8>
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	4a69      	ldr	r2, [pc, #420]	; (8003898 <HAL_I2C_Init+0x284>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	099b      	lsrs	r3, r3, #6
 80036fa:	3301      	adds	r3, #1
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	430b      	orrs	r3, r1
 8003702:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	69db      	ldr	r3, [r3, #28]
 800370a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800370e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	495c      	ldr	r1, [pc, #368]	; (8003888 <HAL_I2C_Init+0x274>)
 8003718:	428b      	cmp	r3, r1
 800371a:	d819      	bhi.n	8003750 <HAL_I2C_Init+0x13c>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e59      	subs	r1, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	fbb1 f3f3 	udiv	r3, r1, r3
 800372a:	1c59      	adds	r1, r3, #1
 800372c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003730:	400b      	ands	r3, r1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00a      	beq.n	800374c <HAL_I2C_Init+0x138>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1e59      	subs	r1, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	fbb1 f3f3 	udiv	r3, r1, r3
 8003744:	3301      	adds	r3, #1
 8003746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800374a:	e051      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 800374c:	2304      	movs	r3, #4
 800374e:	e04f      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d111      	bne.n	800377c <HAL_I2C_Init+0x168>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1e58      	subs	r0, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6859      	ldr	r1, [r3, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	440b      	add	r3, r1
 8003766:	fbb0 f3f3 	udiv	r3, r0, r3
 800376a:	3301      	adds	r3, #1
 800376c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003770:	2b00      	cmp	r3, #0
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	e012      	b.n	80037a2 <HAL_I2C_Init+0x18e>
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1e58      	subs	r0, r3, #1
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	460b      	mov	r3, r1
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	440b      	add	r3, r1
 800378a:	0099      	lsls	r1, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	2b00      	cmp	r3, #0
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Init+0x196>
 80037a6:	2301      	movs	r3, #1
 80037a8:	e022      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10e      	bne.n	80037d0 <HAL_I2C_Init+0x1bc>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1e58      	subs	r0, r3, #1
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	460b      	mov	r3, r1
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	440b      	add	r3, r1
 80037c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037ce:	e00f      	b.n	80037f0 <HAL_I2C_Init+0x1dc>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	1e58      	subs	r0, r3, #1
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6859      	ldr	r1, [r3, #4]
 80037d8:	460b      	mov	r3, r1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	0099      	lsls	r1, r3, #2
 80037e0:	440b      	add	r3, r1
 80037e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e6:	3301      	adds	r3, #1
 80037e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	6809      	ldr	r1, [r1, #0]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69da      	ldr	r2, [r3, #28]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	430a      	orrs	r2, r1
 8003812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800381e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	6911      	ldr	r1, [r2, #16]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68d2      	ldr	r2, [r2, #12]
 800382a:	4311      	orrs	r1, r2
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6812      	ldr	r2, [r2, #0]
 8003830:	430b      	orrs	r3, r1
 8003832:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f042 0201 	orr.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	000186a0 	.word	0x000186a0
 800388c:	001e847f 	.word	0x001e847f
 8003890:	003d08ff 	.word	0x003d08ff
 8003894:	431bde83 	.word	0x431bde83
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b088      	sub	sp, #32
 80038a0:	af02      	add	r7, sp, #8
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	607a      	str	r2, [r7, #4]
 80038a6:	461a      	mov	r2, r3
 80038a8:	460b      	mov	r3, r1
 80038aa:	817b      	strh	r3, [r7, #10]
 80038ac:	4613      	mov	r3, r2
 80038ae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038b0:	f7fe ffc2 	bl	8002838 <HAL_GetTick>
 80038b4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b20      	cmp	r3, #32
 80038c0:	f040 80e0 	bne.w	8003a84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2319      	movs	r3, #25
 80038ca:	2201      	movs	r2, #1
 80038cc:	4970      	ldr	r1, [pc, #448]	; (8003a90 <HAL_I2C_Master_Transmit+0x1f4>)
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f001 fa3e 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038da:	2302      	movs	r3, #2
 80038dc:	e0d3      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d101      	bne.n	80038ec <HAL_I2C_Master_Transmit+0x50>
 80038e8:	2302      	movs	r3, #2
 80038ea:	e0cc      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x1ea>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d007      	beq.n	8003912 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0201 	orr.w	r2, r2, #1
 8003910:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003920:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2221      	movs	r2, #33	; 0x21
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2210      	movs	r2, #16
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	893a      	ldrh	r2, [r7, #8]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003948:	b29a      	uxth	r2, r3
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	4a50      	ldr	r2, [pc, #320]	; (8003a94 <HAL_I2C_Master_Transmit+0x1f8>)
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003954:	8979      	ldrh	r1, [r7, #10]
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	6a3a      	ldr	r2, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 feae 	bl	80046bc <I2C_MasterRequestWrite>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d001      	beq.n	800396a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e08d      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003980:	e066      	b.n	8003a50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	6a39      	ldr	r1, [r7, #32]
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f001 fab8 	bl	8004efc <I2C_WaitOnTXEFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b04      	cmp	r3, #4
 8003998:	d107      	bne.n	80039aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e06b      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b04      	cmp	r3, #4
 80039ea:	d11b      	bne.n	8003a24 <HAL_I2C_Master_Transmit+0x188>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d017      	beq.n	8003a24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	781a      	ldrb	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a04:	1c5a      	adds	r2, r3, #1
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	6a39      	ldr	r1, [r7, #32]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f001 faa8 	bl	8004f7e <I2C_WaitOnBTFFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d107      	bne.n	8003a4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e01a      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d194      	bne.n	8003982 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2220      	movs	r2, #32
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e000      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a84:	2302      	movs	r3, #2
  }
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3718      	adds	r7, #24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	00100002 	.word	0x00100002
 8003a94:	ffff0000 	.word	0xffff0000

08003a98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b08c      	sub	sp, #48	; 0x30
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	817b      	strh	r3, [r7, #10]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aac:	f7fe fec4 	bl	8002838 <HAL_GetTick>
 8003ab0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b20      	cmp	r3, #32
 8003abc:	f040 820b 	bne.w	8003ed6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac2:	9300      	str	r3, [sp, #0]
 8003ac4:	2319      	movs	r3, #25
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	497c      	ldr	r1, [pc, #496]	; (8003cbc <HAL_I2C_Master_Receive+0x224>)
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f001 f940 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e1fe      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_I2C_Master_Receive+0x50>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e1f7      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d007      	beq.n	8003b0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f042 0201 	orr.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2222      	movs	r2, #34	; 0x22
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	893a      	ldrh	r2, [r7, #8]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a5c      	ldr	r2, [pc, #368]	; (8003cc0 <HAL_I2C_Master_Receive+0x228>)
 8003b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b50:	8979      	ldrh	r1, [r7, #10]
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fe32 	bl	80047c0 <I2C_MasterRequestRead>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e1b8      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d113      	bne.n	8003b96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6e:	2300      	movs	r3, #0
 8003b70:	623b      	str	r3, [r7, #32]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695b      	ldr	r3, [r3, #20]
 8003b78:	623b      	str	r3, [r7, #32]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	623b      	str	r3, [r7, #32]
 8003b82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e18c      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d11b      	bne.n	8003bd6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61fb      	str	r3, [r7, #28]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	61fb      	str	r3, [r7, #28]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	61fb      	str	r3, [r7, #28]
 8003bc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e16c      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d11b      	bne.n	8003c16 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	61bb      	str	r3, [r7, #24]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61bb      	str	r3, [r7, #24]
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	e14c      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	617b      	str	r3, [r7, #20]
 8003c3a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c3c:	e138      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	2b03      	cmp	r3, #3
 8003c44:	f200 80f1 	bhi.w	8003e2a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d123      	bne.n	8003c98 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f001 f9d3 	bl	8005000 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e139      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691a      	ldr	r2, [r3, #16]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	b2d2      	uxtb	r2, r2
 8003c70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c96:	e10b      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d14e      	bne.n	8003d3e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	4906      	ldr	r1, [pc, #24]	; (8003cc4 <HAL_I2C_Master_Receive+0x22c>)
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f001 f850 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e10e      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
 8003cba:	bf00      	nop
 8003cbc:	00100002 	.word	0x00100002
 8003cc0:	ffff0000 	.word	0xffff0000
 8003cc4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	691a      	ldr	r2, [r3, #16]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce2:	b2d2      	uxtb	r2, r2
 8003ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	b2d2      	uxtb	r2, r2
 8003d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	1c5a      	adds	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d26:	3b01      	subs	r3, #1
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d3c:	e0b8      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d44:	2200      	movs	r2, #0
 8003d46:	4966      	ldr	r1, [pc, #408]	; (8003ee0 <HAL_I2C_Master_Receive+0x448>)
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f001 f801 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e0bf      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da0:	2200      	movs	r2, #0
 8003da2:	494f      	ldr	r1, [pc, #316]	; (8003ee0 <HAL_I2C_Master_Receive+0x448>)
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 ffd3 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e091      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	691a      	ldr	r2, [r3, #16]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e12:	3b01      	subs	r3, #1
 8003e14:	b29a      	uxth	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e28:	e042      	b.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f001 f8e6 	bl	8005000 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e04c      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	691a      	ldr	r2, [r3, #16]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	b2d2      	uxtb	r2, r2
 8003e4a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b04      	cmp	r3, #4
 8003e7c:	d118      	bne.n	8003eb0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f47f aec2 	bne.w	8003c3e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3728      	adds	r7, #40	; 0x28
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	00010004 	.word	0x00010004

08003ee4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	; 0x30
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	4608      	mov	r0, r1
 8003eee:	4611      	mov	r1, r2
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	817b      	strh	r3, [r7, #10]
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	813b      	strh	r3, [r7, #8]
 8003efa:	4613      	mov	r3, r2
 8003efc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003efe:	f7fe fc9b 	bl	8002838 <HAL_GetTick>
 8003f02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	2b20      	cmp	r3, #32
 8003f0e:	f040 8208 	bne.w	8004322 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	2319      	movs	r3, #25
 8003f18:	2201      	movs	r2, #1
 8003f1a:	497b      	ldr	r1, [pc, #492]	; (8004108 <HAL_I2C_Mem_Read+0x224>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 ff17 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e1fb      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d101      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x56>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e1f4      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d007      	beq.n	8003f60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2222      	movs	r2, #34	; 0x22
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2240      	movs	r2, #64	; 0x40
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a5b      	ldr	r2, [pc, #364]	; (800410c <HAL_I2C_Mem_Read+0x228>)
 8003fa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fa2:	88f8      	ldrh	r0, [r7, #6]
 8003fa4:	893a      	ldrh	r2, [r7, #8]
 8003fa6:	8979      	ldrh	r1, [r7, #10]
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	9301      	str	r3, [sp, #4]
 8003fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fae:	9300      	str	r3, [sp, #0]
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fcd2 	bl	800495c <I2C_RequestMemoryRead>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e1b0      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d113      	bne.n	8003ff2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	623b      	str	r3, [r7, #32]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e184      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d11b      	bne.n	8004032 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800400a:	2300      	movs	r3, #0
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	695b      	ldr	r3, [r3, #20]
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	e164      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004036:	2b02      	cmp	r3, #2
 8004038:	d11b      	bne.n	8004072 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004048:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004058:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800405a:	2300      	movs	r3, #0
 800405c:	61bb      	str	r3, [r7, #24]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	695b      	ldr	r3, [r3, #20]
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	e144      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695b      	ldr	r3, [r3, #20]
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	699b      	ldr	r3, [r3, #24]
 8004084:	617b      	str	r3, [r7, #20]
 8004086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004088:	e138      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	2b03      	cmp	r3, #3
 8004090:	f200 80f1 	bhi.w	8004276 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004098:	2b01      	cmp	r3, #1
 800409a:	d123      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 ffad 	bl	8005000 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e139      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040cc:	3b01      	subs	r3, #1
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80040e2:	e10b      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d14e      	bne.n	800418a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2200      	movs	r2, #0
 80040f4:	4906      	ldr	r1, [pc, #24]	; (8004110 <HAL_I2C_Mem_Read+0x22c>)
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fe2a 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d008      	beq.n	8004114 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e10e      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
 8004106:	bf00      	nop
 8004108:	00100002 	.word	0x00100002
 800410c:	ffff0000 	.word	0xffff0000
 8004110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	691a      	ldr	r2, [r3, #16]
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	691a      	ldr	r2, [r3, #16]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004188:	e0b8      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	9300      	str	r3, [sp, #0]
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	2200      	movs	r2, #0
 8004192:	4966      	ldr	r1, [pc, #408]	; (800432c <HAL_I2C_Mem_Read+0x448>)
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fddb 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d001      	beq.n	80041a4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e0bf      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	691a      	ldr	r2, [r3, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	2200      	movs	r2, #0
 80041ee:	494f      	ldr	r1, [pc, #316]	; (800432c <HAL_I2C_Mem_Read+0x448>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 fdad 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e091      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800420e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004238:	b29b      	uxth	r3, r3
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	691a      	ldr	r2, [r3, #16]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004274:	e042      	b.n	80042fc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004278:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 fec0 	bl	8005000 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e04c      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d118      	bne.n	80042fc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004300:	2b00      	cmp	r3, #0
 8004302:	f47f aec2 	bne.w	800408a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800431e:	2300      	movs	r3, #0
 8004320:	e000      	b.n	8004324 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004322:	2302      	movs	r3, #2
  }
}
 8004324:	4618      	mov	r0, r3
 8004326:	3728      	adds	r7, #40	; 0x28
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	00010004 	.word	0x00010004

08004330 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b08c      	sub	sp, #48	; 0x30
 8004334:	af02      	add	r7, sp, #8
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	817b      	strh	r3, [r7, #10]
 8004342:	460b      	mov	r3, r1
 8004344:	813b      	strh	r3, [r7, #8]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800434a:	f7fe fa75 	bl	8002838 <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24
  __IO uint32_t count = 0U;
 8004350:	2300      	movs	r3, #0
 8004352:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b20      	cmp	r3, #32
 800435e:	f040 8176 	bne.w	800464e <HAL_I2C_Mem_Read_DMA+0x31e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004362:	4b95      	ldr	r3, [pc, #596]	; (80045b8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	08db      	lsrs	r3, r3, #3
 8004368:	4a94      	ldr	r2, [pc, #592]	; (80045bc <HAL_I2C_Mem_Read_DMA+0x28c>)
 800436a:	fba2 2303 	umull	r2, r3, r2, r3
 800436e:	0a1a      	lsrs	r2, r3, #8
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	009a      	lsls	r2, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	3b01      	subs	r3, #1
 8004380:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d116      	bne.n	80043b6 <HAL_I2C_Mem_Read_DMA+0x86>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0220 	orr.w	r2, r3, #32
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e14c      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d0db      	beq.n	800437c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_I2C_Mem_Read_DMA+0xa2>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e13e      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d007      	beq.n	80043f8 <HAL_I2C_Mem_Read_DMA+0xc8>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0201 	orr.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004406:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2222      	movs	r2, #34	; 0x22
 800440c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2240      	movs	r2, #64	; 0x40
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2200      	movs	r2, #0
 800441c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4a62      	ldr	r2, [pc, #392]	; (80045c0 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004438:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800443a:	897a      	ldrh	r2, [r7, #10]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8004440:	893a      	ldrh	r2, [r7, #8]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004446:	88fa      	ldrh	r2, [r7, #6]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	651a      	str	r2, [r3, #80]	; 0x50

    if (hi2c->XferSize > 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004456:	2b00      	cmp	r3, #0
 8004458:	f000 80cc 	beq.w	80045f4 <HAL_I2C_Mem_Read_DMA+0x2c4>
    {
      if (hi2c->hdmarx != NULL)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02d      	beq.n	80044c0 <HAL_I2C_Mem_Read_DMA+0x190>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004468:	4a56      	ldr	r2, [pc, #344]	; (80045c4 <HAL_I2C_Mem_Read_DMA+0x294>)
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004470:	4a55      	ldr	r2, [pc, #340]	; (80045c8 <HAL_I2C_Mem_Read_DMA+0x298>)
 8004472:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004478:	2200      	movs	r2, #0
 800447a:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	2200      	movs	r2, #0
 8004482:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004488:	2200      	movs	r2, #0
 800448a:	649a      	str	r2, [r3, #72]	; 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	2200      	movs	r2, #0
 8004492:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3310      	adds	r3, #16
 800449e:	4619      	mov	r1, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	461a      	mov	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	f7fe fbb5 	bl	8002c18 <HAL_DMA_Start_IT>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80044b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f040 8087 	bne.w	80045cc <HAL_I2C_Mem_Read_DMA+0x29c>
 80044be:	e013      	b.n	80044e8 <HAL_I2C_Mem_Read_DMA+0x1b8>
        hi2c->State     = HAL_I2C_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0b3      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80044e8:	88f8      	ldrh	r0, [r7, #6]
 80044ea:	893a      	ldrh	r2, [r7, #8]
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2323      	movs	r3, #35	; 0x23
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	4603      	mov	r3, r0
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f000 fa2f 	bl	800495c <I2C_RequestMemoryRead>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d023      	beq.n	800454c <HAL_I2C_Mem_Read_DMA+0x21c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004508:	4618      	mov	r0, r3
 800450a:	f7fe fc4d 	bl	8002da8 <HAL_DMA_Abort_IT>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004518:	2200      	movs	r2, #0
 800451a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800452a:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount = 0U;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f022 0201 	bic.w	r2, r2, #1
 8004546:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e081      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
        }

        if (hi2c->XferSize == 1U)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004550:	2b01      	cmp	r3, #1
 8004552:	d108      	bne.n	8004566 <HAL_I2C_Mem_Read_DMA+0x236>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e007      	b.n	8004576 <HAL_I2C_Mem_Read_DMA+0x246>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004574:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a2:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	e049      	b.n	800464a <HAL_I2C_Mem_Read_DMA+0x31a>
 80045b6:	bf00      	nop
 80045b8:	20000060 	.word	0x20000060
 80045bc:	14f8b589 	.word	0x14f8b589
 80045c0:	ffff0000 	.word	0xffff0000
 80045c4:	08004b2d 	.word	0x08004b2d
 80045c8:	08004cd7 	.word	0x08004cd7
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f043 0210 	orr.w	r2, r3, #16
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e02d      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80045f4:	88f8      	ldrh	r0, [r7, #6]
 80045f6:	893a      	ldrh	r2, [r7, #8]
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	2323      	movs	r3, #35	; 0x23
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4603      	mov	r3, r0
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 f9a9 	bl	800495c <I2C_RequestMemoryRead>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <HAL_I2C_Mem_Read_DMA+0x2e4>
      {
        return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e01d      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	617b      	str	r3, [r7, #20]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_I2C_Mem_Read_DMA+0x320>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004688:	bf00      	nop
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af02      	add	r7, sp, #8
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	607a      	str	r2, [r7, #4]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	460b      	mov	r3, r1
 80046ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b08      	cmp	r3, #8
 80046d6:	d006      	beq.n	80046e6 <I2C_MasterRequestWrite+0x2a>
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d003      	beq.n	80046e6 <I2C_MasterRequestWrite+0x2a>
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046e4:	d108      	bne.n	80046f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046f4:	601a      	str	r2, [r3, #0]
 80046f6:	e00b      	b.n	8004710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fc:	2b12      	cmp	r3, #18
 80046fe:	d107      	bne.n	8004710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800470e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fb17 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00d      	beq.n	8004744 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004736:	d103      	bne.n	8004740 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800473e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e035      	b.n	80047b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474c:	d108      	bne.n	8004760 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800474e:	897b      	ldrh	r3, [r7, #10]
 8004750:	b2db      	uxtb	r3, r3
 8004752:	461a      	mov	r2, r3
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800475c:	611a      	str	r2, [r3, #16]
 800475e:	e01b      	b.n	8004798 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004760:	897b      	ldrh	r3, [r7, #10]
 8004762:	11db      	asrs	r3, r3, #7
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0306 	and.w	r3, r3, #6
 800476a:	b2db      	uxtb	r3, r3
 800476c:	f063 030f 	orn	r3, r3, #15
 8004770:	b2da      	uxtb	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	490e      	ldr	r1, [pc, #56]	; (80047b8 <I2C_MasterRequestWrite+0xfc>)
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fb3d 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d001      	beq.n	800478e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e010      	b.n	80047b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800478e:	897b      	ldrh	r3, [r7, #10]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	4907      	ldr	r1, [pc, #28]	; (80047bc <I2C_MasterRequestWrite+0x100>)
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 fb2d 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3718      	adds	r7, #24
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	00010008 	.word	0x00010008
 80047bc:	00010002 	.word	0x00010002

080047c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	607a      	str	r2, [r7, #4]
 80047ca:	603b      	str	r3, [r7, #0]
 80047cc:	460b      	mov	r3, r1
 80047ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b08      	cmp	r3, #8
 80047ea:	d006      	beq.n	80047fa <I2C_MasterRequestRead+0x3a>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d003      	beq.n	80047fa <I2C_MasterRequestRead+0x3a>
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047f8:	d108      	bne.n	800480c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e00b      	b.n	8004824 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004810:	2b11      	cmp	r3, #17
 8004812:	d107      	bne.n	8004824 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004822:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fa8d 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484a:	d103      	bne.n	8004854 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004852:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004854:	2303      	movs	r3, #3
 8004856:	e079      	b.n	800494c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004860:	d108      	bne.n	8004874 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	f043 0301 	orr.w	r3, r3, #1
 800486a:	b2da      	uxtb	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	611a      	str	r2, [r3, #16]
 8004872:	e05f      	b.n	8004934 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004874:	897b      	ldrh	r3, [r7, #10]
 8004876:	11db      	asrs	r3, r3, #7
 8004878:	b2db      	uxtb	r3, r3
 800487a:	f003 0306 	and.w	r3, r3, #6
 800487e:	b2db      	uxtb	r3, r3
 8004880:	f063 030f 	orn	r3, r3, #15
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	4930      	ldr	r1, [pc, #192]	; (8004954 <I2C_MasterRequestRead+0x194>)
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 fab3 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e054      	b.n	800494c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	4929      	ldr	r1, [pc, #164]	; (8004958 <I2C_MasterRequestRead+0x198>)
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f000 faa3 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e044      	b.n	800494c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	613b      	str	r3, [r7, #16]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fa2b 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800490e:	d103      	bne.n	8004918 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004916:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e017      	b.n	800494c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800491c:	897b      	ldrh	r3, [r7, #10]
 800491e:	11db      	asrs	r3, r3, #7
 8004920:	b2db      	uxtb	r3, r3
 8004922:	f003 0306 	and.w	r3, r3, #6
 8004926:	b2db      	uxtb	r3, r3
 8004928:	f063 030e 	orn	r3, r3, #14
 800492c:	b2da      	uxtb	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	4907      	ldr	r1, [pc, #28]	; (8004958 <I2C_MasterRequestRead+0x198>)
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 fa5f 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d001      	beq.n	800494a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e000      	b.n	800494c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3718      	adds	r7, #24
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	00010008 	.word	0x00010008
 8004958:	00010002 	.word	0x00010002

0800495c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b088      	sub	sp, #32
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	4608      	mov	r0, r1
 8004966:	4611      	mov	r1, r2
 8004968:	461a      	mov	r2, r3
 800496a:	4603      	mov	r3, r0
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	460b      	mov	r3, r1
 8004970:	813b      	strh	r3, [r7, #8]
 8004972:	4613      	mov	r3, r2
 8004974:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004984:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004994:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	2200      	movs	r2, #0
 800499e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f000 f9d4 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00d      	beq.n	80049ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049bc:	d103      	bne.n	80049c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e0aa      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049ca:	897b      	ldrh	r3, [r7, #10]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	461a      	mov	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049dc:	6a3a      	ldr	r2, [r7, #32]
 80049de:	4952      	ldr	r1, [pc, #328]	; (8004b28 <I2C_RequestMemoryRead+0x1cc>)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fa0c 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e097      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049f0:	2300      	movs	r3, #0
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	6a39      	ldr	r1, [r7, #32]
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fa76 	bl	8004efc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00d      	beq.n	8004a32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d107      	bne.n	8004a2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e076      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a32:	88fb      	ldrh	r3, [r7, #6]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a38:	893b      	ldrh	r3, [r7, #8]
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	611a      	str	r2, [r3, #16]
 8004a42:	e021      	b.n	8004a88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004a44:	893b      	ldrh	r3, [r7, #8]
 8004a46:	0a1b      	lsrs	r3, r3, #8
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a54:	6a39      	ldr	r1, [r7, #32]
 8004a56:	68f8      	ldr	r0, [r7, #12]
 8004a58:	f000 fa50 	bl	8004efc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00d      	beq.n	8004a7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	2b04      	cmp	r3, #4
 8004a68:	d107      	bne.n	8004a7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e050      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004a7e:	893b      	ldrh	r3, [r7, #8]
 8004a80:	b2da      	uxtb	r2, r3
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	6a39      	ldr	r1, [r7, #32]
 8004a8c:	68f8      	ldr	r0, [r7, #12]
 8004a8e:	f000 fa35 	bl	8004efc <I2C_WaitOnTXEFlagUntilTimeout>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00d      	beq.n	8004ab4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9c:	2b04      	cmp	r3, #4
 8004a9e:	d107      	bne.n	8004ab0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e035      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f000 f93d 	bl	8004d50 <I2C_WaitOnFlagUntilTimeout>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00d      	beq.n	8004af8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aea:	d103      	bne.n	8004af4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004af2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004af4:	2303      	movs	r3, #3
 8004af6:	e013      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004af8:	897b      	ldrh	r3, [r7, #10]
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	6a3a      	ldr	r2, [r7, #32]
 8004b0c:	4906      	ldr	r1, [pc, #24]	; (8004b28 <I2C_RequestMemoryRead+0x1cc>)
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 f975 	bl	8004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e000      	b.n	8004b20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	00010002 	.word	0x00010002

08004b2c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b38:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b40:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b48:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004b86:	2b21      	cmp	r3, #33	; 0x21
 8004b88:	d007      	beq.n	8004b9a <I2C_DMAXferCplt+0x6e>
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8004b90:	2b22      	cmp	r3, #34	; 0x22
 8004b92:	d131      	bne.n	8004bf8 <I2C_DMAXferCplt+0xcc>
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
 8004b96:	2b20      	cmp	r3, #32
 8004b98:	d12e      	bne.n	8004bf8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bb0:	7cfb      	ldrb	r3, [r7, #19]
 8004bb2:	2b29      	cmp	r3, #41	; 0x29
 8004bb4:	d10a      	bne.n	8004bcc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2221      	movs	r2, #33	; 0x21
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	2228      	movs	r2, #40	; 0x28
 8004bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc4:	6978      	ldr	r0, [r7, #20]
 8004bc6:	f7ff fd51 	bl	800466c <HAL_I2C_SlaveTxCpltCallback>
 8004bca:	e00c      	b.n	8004be6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd0:	d109      	bne.n	8004be6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2222      	movs	r2, #34	; 0x22
 8004bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2228      	movs	r2, #40	; 0x28
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004be0:	6978      	ldr	r0, [r7, #20]
 8004be2:	f7ff fd4d 	bl	8004680 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004bf4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bf6:	e06a      	b.n	8004cce <I2C_DMAXferCplt+0x1a2>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d064      	beq.n	8004cce <I2C_DMAXferCplt+0x1a2>
    if (hi2c->XferCount == (uint16_t)1)
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d107      	bne.n	8004c1e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c34:	d009      	beq.n	8004c4a <I2C_DMAXferCplt+0x11e>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d006      	beq.n	8004c4a <I2C_DMAXferCplt+0x11e>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004c42:	d002      	beq.n	8004c4a <I2C_DMAXferCplt+0x11e>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b20      	cmp	r3, #32
 8004c48:	d107      	bne.n	8004c5a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c58:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c68:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c78:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8004c88:	6978      	ldr	r0, [r7, #20]
 8004c8a:	f7ff fd0d 	bl	80046a8 <HAL_I2C_ErrorCallback>
}
 8004c8e:	e01e      	b.n	8004cce <I2C_DMAXferCplt+0x1a2>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	2220      	movs	r2, #32
 8004c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b40      	cmp	r3, #64	; 0x40
 8004ca2:	d10a      	bne.n	8004cba <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f7ff fcee 	bl	8004694 <HAL_I2C_MemRxCpltCallback>
}
 8004cb8:	e009      	b.n	8004cce <I2C_DMAXferCplt+0x1a2>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2212      	movs	r2, #18
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004cc8:	6978      	ldr	r0, [r7, #20]
 8004cca:	f7ff fcc5 	bl	8004658 <HAL_I2C_MasterRxCpltCallback>
}
 8004cce:	bf00      	nop
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b084      	sub	sp, #16
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d003      	beq.n	8004d04 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	2200      	movs	r2, #0
 8004d02:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fe f9fb 	bl	8003100 <HAL_DMA_GetError>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d01b      	beq.n	8004d48 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f043 0210 	orr.w	r2, r3, #16
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f7ff fcb0 	bl	80046a8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d60:	e025      	b.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d68:	d021      	beq.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d6a:	f7fd fd65 	bl	8002838 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d302      	bcc.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d116      	bne.n	8004dae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0220 	orr.w	r2, r3, #32
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e023      	b.n	8004df6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	0c1b      	lsrs	r3, r3, #16
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d10d      	bne.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	43da      	mvns	r2, r3
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	bf0c      	ite	eq
 8004dca:	2301      	moveq	r3, #1
 8004dcc:	2300      	movne	r3, #0
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	e00c      	b.n	8004dee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	43da      	mvns	r2, r3
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d0b6      	beq.n	8004d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004dfe:	b580      	push	{r7, lr}
 8004e00:	b084      	sub	sp, #16
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	60f8      	str	r0, [r7, #12]
 8004e06:	60b9      	str	r1, [r7, #8]
 8004e08:	607a      	str	r2, [r7, #4]
 8004e0a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e0c:	e051      	b.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	695b      	ldr	r3, [r3, #20]
 8004e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e1c:	d123      	bne.n	8004e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e2c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e36:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f043 0204 	orr.w	r2, r3, #4
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e046      	b.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e6c:	d021      	beq.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e6e:	f7fd fce3 	bl	8002838 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d302      	bcc.n	8004e84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d116      	bne.n	8004eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2220      	movs	r2, #32
 8004e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9e:	f043 0220 	orr.w	r2, r3, #32
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e020      	b.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10c      	bne.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	43da      	mvns	r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bf14      	ite	ne
 8004ece:	2301      	movne	r3, #1
 8004ed0:	2300      	moveq	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	e00b      	b.n	8004eee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	43da      	mvns	r2, r3
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bf14      	ite	ne
 8004ee8:	2301      	movne	r3, #1
 8004eea:	2300      	moveq	r3, #0
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d18d      	bne.n	8004e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3710      	adds	r7, #16
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f08:	e02d      	b.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f8ce 	bl	80050ac <I2C_IsAcknowledgeFailed>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e02d      	b.n	8004f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f20:	d021      	beq.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f22:	f7fd fc89 	bl	8002838 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d302      	bcc.n	8004f38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d116      	bne.n	8004f66 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f52:	f043 0220 	orr.w	r2, r3, #32
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e007      	b.n	8004f76 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f70:	2b80      	cmp	r3, #128	; 0x80
 8004f72:	d1ca      	bne.n	8004f0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	60f8      	str	r0, [r7, #12]
 8004f86:	60b9      	str	r1, [r7, #8]
 8004f88:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f8a:	e02d      	b.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f000 f88d 	bl	80050ac <I2C_IsAcknowledgeFailed>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e02d      	b.n	8004ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa2:	d021      	beq.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa4:	f7fd fc48 	bl	8002838 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d302      	bcc.n	8004fba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd4:	f043 0220 	orr.w	r2, r3, #32
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d1ca      	bne.n	8004f8c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800500c:	e042      	b.n	8005094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0310 	and.w	r3, r3, #16
 8005018:	2b10      	cmp	r3, #16
 800501a:	d119      	bne.n	8005050 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0210 	mvn.w	r2, #16
 8005024:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e029      	b.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005050:	f7fd fbf2 	bl	8002838 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d116      	bne.n	8005094 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	f043 0220 	orr.w	r2, r3, #32
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e007      	b.n	80050a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d1b5      	bne.n	800500e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c2:	d11b      	bne.n	80050fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2220      	movs	r2, #32
 80050d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	f043 0204 	orr.w	r2, r3, #4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr

0800510a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	e034      	b.n	8005186 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8005124:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f245 5255 	movw	r2, #21845	; 0x5555
 800512e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6852      	ldr	r2, [r2, #4]
 8005138:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6892      	ldr	r2, [r2, #8]
 8005142:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8005144:	f7fd fb78 	bl	8002838 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800514a:	e00f      	b.n	800516c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800514c:	f7fd fb74 	bl	8002838 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b31      	cmp	r3, #49	; 0x31
 8005158:	d908      	bls.n	800516c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f003 0303 	and.w	r3, r3, #3
 8005164:	2b00      	cmp	r3, #0
 8005166:	d001      	beq.n	800516c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e00c      	b.n	8005186 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1e8      	bne.n	800514c <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8005182:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800519e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051b0:	b08f      	sub	sp, #60	; 0x3c
 80051b2:	af0a      	add	r7, sp, #40	; 0x28
 80051b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e10f      	b.n	80053e0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f00d fbb8 	bl	8012950 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2203      	movs	r2, #3
 80051e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051e8:	68bb      	ldr	r3, [r7, #8]
 80051ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d102      	bne.n	80051fa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4618      	mov	r0, r3
 8005200:	f004 fe67 	bl	8009ed2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	603b      	str	r3, [r7, #0]
 800520a:	687e      	ldr	r6, [r7, #4]
 800520c:	466d      	mov	r5, sp
 800520e:	f106 0410 	add.w	r4, r6, #16
 8005212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005216:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005218:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800521a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800521e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005222:	1d33      	adds	r3, r6, #4
 8005224:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005226:	6838      	ldr	r0, [r7, #0]
 8005228:	f004 fd3e 	bl	8009ca8 <USB_CoreInit>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d005      	beq.n	800523e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0d0      	b.n	80053e0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2100      	movs	r1, #0
 8005244:	4618      	mov	r0, r3
 8005246:	f004 fe55 	bl	8009ef4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800524a:	2300      	movs	r3, #0
 800524c:	73fb      	strb	r3, [r7, #15]
 800524e:	e04a      	b.n	80052e6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005250:	7bfa      	ldrb	r2, [r7, #15]
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	4613      	mov	r3, r2
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	4413      	add	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	440b      	add	r3, r1
 800525e:	333d      	adds	r3, #61	; 0x3d
 8005260:	2201      	movs	r2, #1
 8005262:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	333c      	adds	r3, #60	; 0x3c
 8005274:	7bfa      	ldrb	r2, [r7, #15]
 8005276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	7bfb      	ldrb	r3, [r7, #15]
 800527c:	b298      	uxth	r0, r3
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3344      	adds	r3, #68	; 0x44
 800528c:	4602      	mov	r2, r0
 800528e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005290:	7bfa      	ldrb	r2, [r7, #15]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3340      	adds	r3, #64	; 0x40
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3348      	adds	r3, #72	; 0x48
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	334c      	adds	r3, #76	; 0x4c
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3354      	adds	r3, #84	; 0x54
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052e0:	7bfb      	ldrb	r3, [r7, #15]
 80052e2:	3301      	adds	r3, #1
 80052e4:	73fb      	strb	r3, [r7, #15]
 80052e6:	7bfa      	ldrb	r2, [r7, #15]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d3af      	bcc.n	8005250 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e044      	b.n	8005380 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005308:	2200      	movs	r2, #0
 800530a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800530c:	7bfa      	ldrb	r2, [r7, #15]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005322:	7bfa      	ldrb	r2, [r7, #15]
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005334:	2200      	movs	r2, #0
 8005336:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005338:	7bfa      	ldrb	r2, [r7, #15]
 800533a:	6879      	ldr	r1, [r7, #4]
 800533c:	4613      	mov	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	4413      	add	r3, r2
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	440b      	add	r3, r1
 8005346:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800534a:	2200      	movs	r2, #0
 800534c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	6879      	ldr	r1, [r7, #4]
 8005352:	4613      	mov	r3, r2
 8005354:	00db      	lsls	r3, r3, #3
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	440b      	add	r3, r1
 800535c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005364:	7bfa      	ldrb	r2, [r7, #15]
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	4613      	mov	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	4413      	add	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	440b      	add	r3, r1
 8005372:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800537a:	7bfb      	ldrb	r3, [r7, #15]
 800537c:	3301      	adds	r3, #1
 800537e:	73fb      	strb	r3, [r7, #15]
 8005380:	7bfa      	ldrb	r2, [r7, #15]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	429a      	cmp	r2, r3
 8005388:	d3b5      	bcc.n	80052f6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	603b      	str	r3, [r7, #0]
 8005390:	687e      	ldr	r6, [r7, #4]
 8005392:	466d      	mov	r5, sp
 8005394:	f106 0410 	add.w	r4, r6, #16
 8005398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800539c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800539e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80053a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80053a8:	1d33      	adds	r3, r6, #4
 80053aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ac:	6838      	ldr	r0, [r7, #0]
 80053ae:	f004 fded 	bl	8009f8c <USB_DevInit>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e00d      	b.n	80053e0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4618      	mov	r0, r3
 80053da:	f005 ff3c 	bl	800b256 <USB_DevDisconnect>

  return HAL_OK;
 80053de:	2300      	movs	r3, #0
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053e8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d101      	bne.n	8005404 <HAL_PCD_Start+0x1c>
 8005400:	2302      	movs	r3, #2
 8005402:	e020      	b.n	8005446 <HAL_PCD_Start+0x5e>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005410:	2b01      	cmp	r3, #1
 8005412:	d109      	bne.n	8005428 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005418:	2b01      	cmp	r3, #1
 800541a:	d005      	beq.n	8005428 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4618      	mov	r0, r3
 800542e:	f004 fd3f 	bl	8009eb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4618      	mov	r0, r3
 8005438:	f005 feec 	bl	800b214 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800544e:	b590      	push	{r4, r7, lr}
 8005450:	b08d      	sub	sp, #52	; 0x34
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545c:	6a3b      	ldr	r3, [r7, #32]
 800545e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f005 ffaa 	bl	800b3be <USB_GetMode>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 848a 	bne.w	8005d86 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f005 ff0e 	bl	800b298 <USB_ReadInterrupts>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 8480 	beq.w	8005d84 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	0a1b      	lsrs	r3, r3, #8
 800548e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f005 fefb 	bl	800b298 <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d107      	bne.n	80054bc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	695a      	ldr	r2, [r3, #20]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f002 0202 	and.w	r2, r2, #2
 80054ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f005 fee9 	bl	800b298 <USB_ReadInterrupts>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f003 0310 	and.w	r3, r3, #16
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d161      	bne.n	8005594 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	699a      	ldr	r2, [r3, #24]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0210 	bic.w	r2, r2, #16
 80054de:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054e0:	6a3b      	ldr	r3, [r7, #32]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	f003 020f 	and.w	r2, r3, #15
 80054ec:	4613      	mov	r3, r2
 80054ee:	00db      	lsls	r3, r3, #3
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	4413      	add	r3, r2
 80054fc:	3304      	adds	r3, #4
 80054fe:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	0c5b      	lsrs	r3, r3, #17
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	2b02      	cmp	r3, #2
 800550a:	d124      	bne.n	8005556 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005512:	4013      	ands	r3, r2
 8005514:	2b00      	cmp	r3, #0
 8005516:	d035      	beq.n	8005584 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005522:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005526:	b29b      	uxth	r3, r3
 8005528:	461a      	mov	r2, r3
 800552a:	6a38      	ldr	r0, [r7, #32]
 800552c:	f005 fd20 	bl	800af70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	091b      	lsrs	r3, r3, #4
 8005538:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800553c:	441a      	add	r2, r3
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	6a1a      	ldr	r2, [r3, #32]
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	091b      	lsrs	r3, r3, #4
 800554a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800554e:	441a      	add	r2, r3
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	621a      	str	r2, [r3, #32]
 8005554:	e016      	b.n	8005584 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	0c5b      	lsrs	r3, r3, #17
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	2b06      	cmp	r3, #6
 8005560:	d110      	bne.n	8005584 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005568:	2208      	movs	r2, #8
 800556a:	4619      	mov	r1, r3
 800556c:	6a38      	ldr	r0, [r7, #32]
 800556e:	f005 fcff 	bl	800af70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	6a1a      	ldr	r2, [r3, #32]
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800557e:	441a      	add	r2, r3
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	699a      	ldr	r2, [r3, #24]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0210 	orr.w	r2, r2, #16
 8005592:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f005 fe7d 	bl	800b298 <USB_ReadInterrupts>
 800559e:	4603      	mov	r3, r0
 80055a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80055a8:	f040 80a7 	bne.w	80056fa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055ac:	2300      	movs	r3, #0
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f005 fe82 	bl	800b2be <USB_ReadDevAllOutEpInterrupt>
 80055ba:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80055bc:	e099      	b.n	80056f2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 808e 	beq.w	80056e6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f005 fea6 	bl	800b326 <USB_ReadDevOutEPInterrupt>
 80055da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00c      	beq.n	8005600 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	461a      	mov	r2, r3
 80055f4:	2301      	movs	r3, #1
 80055f6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fec2 	bl	8006384 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f003 0308 	and.w	r3, r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00c      	beq.n	8005624 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	461a      	mov	r2, r3
 8005618:	2308      	movs	r3, #8
 800561a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800561c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 ff98 	bl	8006554 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	f003 0310 	and.w	r3, r3, #16
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	461a      	mov	r2, r3
 800563c:	2310      	movs	r3, #16
 800563e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d030      	beq.n	80056ac <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b80      	cmp	r3, #128	; 0x80
 8005654:	d109      	bne.n	800566a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	69fa      	ldr	r2, [r7, #28]
 8005660:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005664:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005668:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	4613      	mov	r3, r2
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	4413      	add	r3, r2
 800567c:	3304      	adds	r3, #4
 800567e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	78db      	ldrb	r3, [r3, #3]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d108      	bne.n	800569a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	b2db      	uxtb	r3, r3
 8005692:	4619      	mov	r1, r3
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f00d fa57 	bl	8012b48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a6:	461a      	mov	r2, r3
 80056a8:	2302      	movs	r3, #2
 80056aa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	f003 0320 	and.w	r3, r3, #32
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c2:	461a      	mov	r2, r3
 80056c4:	2320      	movs	r3, #32
 80056c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d009      	beq.n	80056e6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	69fb      	ldr	r3, [r7, #28]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	461a      	mov	r2, r3
 80056e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056e4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	3301      	adds	r3, #1
 80056ea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	f47f af62 	bne.w	80055be <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f005 fdca 	bl	800b298 <USB_ReadInterrupts>
 8005704:	4603      	mov	r3, r0
 8005706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800570a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800570e:	f040 80db 	bne.w	80058c8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4618      	mov	r0, r3
 8005718:	f005 fdeb 	bl	800b2f2 <USB_ReadDevAllInEpInterrupt>
 800571c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800571e:	2300      	movs	r3, #0
 8005720:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005722:	e0cd      	b.n	80058c0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80c2 	beq.w	80058b4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005736:	b2d2      	uxtb	r2, r2
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f005 fe11 	bl	800b362 <USB_ReadDevInEPInterrupt>
 8005740:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	d057      	beq.n	80057fc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	f003 030f 	and.w	r3, r3, #15
 8005752:	2201      	movs	r2, #1
 8005754:	fa02 f303 	lsl.w	r3, r2, r3
 8005758:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	43db      	mvns	r3, r3
 8005766:	69f9      	ldr	r1, [r7, #28]
 8005768:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800576c:	4013      	ands	r3, r2
 800576e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	2301      	movs	r3, #1
 8005780:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d132      	bne.n	80057f0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578e:	4613      	mov	r3, r2
 8005790:	00db      	lsls	r3, r3, #3
 8005792:	4413      	add	r3, r2
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	440b      	add	r3, r1
 8005798:	334c      	adds	r3, #76	; 0x4c
 800579a:	6819      	ldr	r1, [r3, #0]
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	4613      	mov	r3, r2
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	4413      	add	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4403      	add	r3, r0
 80057aa:	3348      	adds	r3, #72	; 0x48
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4419      	add	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4403      	add	r3, r0
 80057be:	334c      	adds	r3, #76	; 0x4c
 80057c0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d113      	bne.n	80057f0 <HAL_PCD_IRQHandler+0x3a2>
 80057c8:	6879      	ldr	r1, [r7, #4]
 80057ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057cc:	4613      	mov	r3, r2
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	4413      	add	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	440b      	add	r3, r1
 80057d6:	3354      	adds	r3, #84	; 0x54
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d108      	bne.n	80057f0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6818      	ldr	r0, [r3, #0]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057e8:	461a      	mov	r2, r3
 80057ea:	2101      	movs	r1, #1
 80057ec:	f005 fe18 	bl	800b420 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f00d f92b 	bl	8012a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005812:	461a      	mov	r2, r3
 8005814:	2308      	movs	r3, #8
 8005816:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	f003 0310 	and.w	r3, r3, #16
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	015a      	lsls	r2, r3, #5
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	4413      	add	r3, r2
 800582a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582e:	461a      	mov	r2, r3
 8005830:	2310      	movs	r3, #16
 8005832:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800583e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	69fb      	ldr	r3, [r7, #28]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584a:	461a      	mov	r2, r3
 800584c:	2340      	movs	r3, #64	; 0x40
 800584e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d023      	beq.n	80058a2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800585a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800585c:	6a38      	ldr	r0, [r7, #32]
 800585e:	f004 fcf9 	bl	800a254 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005864:	4613      	mov	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	3338      	adds	r3, #56	; 0x38
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	3304      	adds	r3, #4
 8005874:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	78db      	ldrb	r3, [r3, #3]
 800587a:	2b01      	cmp	r3, #1
 800587c:	d108      	bne.n	8005890 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	b2db      	uxtb	r3, r3
 8005888:	4619      	mov	r1, r3
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f00d f96e 	bl	8012b6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	461a      	mov	r2, r3
 800589e:	2302      	movs	r3, #2
 80058a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d003      	beq.n	80058b4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fcdb 	bl	800626a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	3301      	adds	r3, #1
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	085b      	lsrs	r3, r3, #1
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80058c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f47f af2e 	bne.w	8005724 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f005 fce3 	bl	800b298 <USB_ReadInterrupts>
 80058d2:	4603      	mov	r3, r0
 80058d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058dc:	d122      	bne.n	8005924 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	69fa      	ldr	r2, [r7, #28]
 80058e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058ec:	f023 0301 	bic.w	r3, r3, #1
 80058f0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d108      	bne.n	800590e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005904:	2100      	movs	r1, #0
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fec2 	bl	8006690 <HAL_PCDEx_LPM_Callback>
 800590c:	e002      	b.n	8005914 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f00d f90c 	bl	8012b2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695a      	ldr	r2, [r3, #20]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005922:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4618      	mov	r0, r3
 800592a:	f005 fcb5 	bl	800b298 <USB_ReadInterrupts>
 800592e:	4603      	mov	r3, r0
 8005930:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005934:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005938:	d112      	bne.n	8005960 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b01      	cmp	r3, #1
 8005948:	d102      	bne.n	8005950 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f00d f8c8 	bl	8012ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800595e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f005 fc97 	bl	800b298 <USB_ReadInterrupts>
 800596a:	4603      	mov	r3, r0
 800596c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005974:	f040 80b7 	bne.w	8005ae6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005986:	f023 0301 	bic.w	r3, r3, #1
 800598a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2110      	movs	r1, #16
 8005992:	4618      	mov	r0, r3
 8005994:	f004 fc5e 	bl	800a254 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005998:	2300      	movs	r3, #0
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599c:	e046      	b.n	8005a2c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059aa:	461a      	mov	r2, r3
 80059ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	461a      	mov	r2, r3
 80059e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a16:	0151      	lsls	r1, r2, #5
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	440a      	add	r2, r1
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a28:	3301      	adds	r3, #1
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d3b3      	bcc.n	800599e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d016      	beq.n	8005a80 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a62:	f043 030b 	orr.w	r3, r3, #11
 8005a66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a78:	f043 030b 	orr.w	r3, r3, #11
 8005a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8005a7e:	e015      	b.n	8005aac <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a92:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005a96:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	69fa      	ldr	r2, [r7, #28]
 8005aa2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aa6:	f043 030b 	orr.w	r3, r3, #11
 8005aaa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69fa      	ldr	r2, [r7, #28]
 8005ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005abe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6818      	ldr	r0, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f005 fca5 	bl	800b420 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	695a      	ldr	r2, [r3, #20]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ae4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f005 fbd4 	bl	800b298 <USB_ReadInterrupts>
 8005af0:	4603      	mov	r3, r0
 8005af2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005afa:	d124      	bne.n	8005b46 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f005 fc6a 	bl	800b3da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 fc1f 	bl	800a34e <USB_GetDevSpeed>
 8005b10:	4603      	mov	r3, r0
 8005b12:	461a      	mov	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681c      	ldr	r4, [r3, #0]
 8005b1c:	f001 f9e8 	bl	8006ef0 <HAL_RCC_GetHCLKFreq>
 8005b20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f004 f91e 	bl	8009d6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f00c ffb6 	bl	8012aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f005 fba4 	bl	800b298 <USB_ReadInterrupts>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d10a      	bne.n	8005b70 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f00c ff93 	bl	8012a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f002 0208 	and.w	r2, r2, #8
 8005b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f005 fb8f 	bl	800b298 <USB_ReadInterrupts>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b80      	cmp	r3, #128	; 0x80
 8005b82:	d122      	bne.n	8005bca <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b90:	2301      	movs	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
 8005b94:	e014      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb27 	bl	8006208 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d3e5      	bcc.n	8005b96 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f005 fb62 	bl	800b298 <USB_ReadInterrupts>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005bde:	d13b      	bne.n	8005c58 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005be0:	2301      	movs	r3, #1
 8005be2:	627b      	str	r3, [r7, #36]	; 0x24
 8005be4:	e02b      	b.n	8005c3e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	015a      	lsls	r2, r3, #5
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	4413      	add	r3, r2
 8005bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bf6:	6879      	ldr	r1, [r7, #4]
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3340      	adds	r3, #64	; 0x40
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d115      	bne.n	8005c38 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da12      	bge.n	8005c38 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c12:	6879      	ldr	r1, [r7, #4]
 8005c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	333f      	adds	r3, #63	; 0x3f
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fae8 	bl	8006208 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d3ce      	bcc.n	8005be6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f005 fb1b 	bl	800b298 <USB_ReadInterrupts>
 8005c62:	4603      	mov	r3, r0
 8005c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c6c:	d155      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c6e:	2301      	movs	r3, #1
 8005c70:	627b      	str	r3, [r7, #36]	; 0x24
 8005c72:	e045      	b.n	8005d00 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c84:	6879      	ldr	r1, [r7, #4]
 8005c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c88:	4613      	mov	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4413      	add	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c96:	781b      	ldrb	r3, [r3, #0]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d12e      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c9c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	da2b      	bge.n	8005cfa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005cae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d121      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	4613      	mov	r3, r2
 8005cbc:	00db      	lsls	r3, r3, #3
 8005cbe:	4413      	add	r3, r2
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	440b      	add	r3, r1
 8005cc4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005cc8:	2201      	movs	r2, #1
 8005cca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005cd4:	6a3b      	ldr	r3, [r7, #32]
 8005cd6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10a      	bne.n	8005cfa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cf6:	6053      	str	r3, [r2, #4]
            break;
 8005cf8:	e007      	b.n	8005d0a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d3b4      	bcc.n	8005c74 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695a      	ldr	r2, [r3, #20]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f005 faba 	bl	800b298 <USB_ReadInterrupts>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d10a      	bne.n	8005d46 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f00c ff2d 	bl	8012b90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	695a      	ldr	r2, [r3, #20]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f005 faa4 	bl	800b298 <USB_ReadInterrupts>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f003 0304 	and.w	r3, r3, #4
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d115      	bne.n	8005d86 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	f003 0304 	and.w	r3, r3, #4
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f00c ff1d 	bl	8012bac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	69ba      	ldr	r2, [r7, #24]
 8005d7e:	430a      	orrs	r2, r1
 8005d80:	605a      	str	r2, [r3, #4]
 8005d82:	e000      	b.n	8005d86 <HAL_PCD_IRQHandler+0x938>
      return;
 8005d84:	bf00      	nop
    }
  }
}
 8005d86:	3734      	adds	r7, #52	; 0x34
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd90      	pop	{r4, r7, pc}

08005d8c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b082      	sub	sp, #8
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d101      	bne.n	8005da6 <HAL_PCD_SetAddress+0x1a>
 8005da2:	2302      	movs	r3, #2
 8005da4:	e013      	b.n	8005dce <HAL_PCD_SetAddress+0x42>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	78fa      	ldrb	r2, [r7, #3]
 8005db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f005 fa02 	bl	800b1c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3708      	adds	r7, #8
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b084      	sub	sp, #16
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	4608      	mov	r0, r1
 8005de0:	4611      	mov	r1, r2
 8005de2:	461a      	mov	r2, r3
 8005de4:	4603      	mov	r3, r0
 8005de6:	70fb      	strb	r3, [r7, #3]
 8005de8:	460b      	mov	r3, r1
 8005dea:	803b      	strh	r3, [r7, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005df4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	da0f      	bge.n	8005e1c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dfc:	78fb      	ldrb	r3, [r7, #3]
 8005dfe:	f003 020f 	and.w	r2, r3, #15
 8005e02:	4613      	mov	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	4413      	add	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	3338      	adds	r3, #56	; 0x38
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	3304      	adds	r3, #4
 8005e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2201      	movs	r2, #1
 8005e18:	705a      	strb	r2, [r3, #1]
 8005e1a:	e00f      	b.n	8005e3c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	4413      	add	r3, r2
 8005e32:	3304      	adds	r3, #4
 8005e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	b2da      	uxtb	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e48:	883a      	ldrh	r2, [r7, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	78ba      	ldrb	r2, [r7, #2]
 8005e52:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	785b      	ldrb	r3, [r3, #1]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d004      	beq.n	8005e66 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e66:	78bb      	ldrb	r3, [r7, #2]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d102      	bne.n	8005e72 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d101      	bne.n	8005e80 <HAL_PCD_EP_Open+0xaa>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	e00e      	b.n	8005e9e <HAL_PCD_EP_Open+0xc8>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68f9      	ldr	r1, [r7, #12]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f004 fa82 	bl	800a398 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e9c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ea6:	b580      	push	{r7, lr}
 8005ea8:	b084      	sub	sp, #16
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005eb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	da0f      	bge.n	8005eda <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eba:	78fb      	ldrb	r3, [r7, #3]
 8005ebc:	f003 020f 	and.w	r2, r3, #15
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	3338      	adds	r3, #56	; 0x38
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3304      	adds	r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	705a      	strb	r2, [r3, #1]
 8005ed8:	e00f      	b.n	8005efa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eda:	78fb      	ldrb	r3, [r7, #3]
 8005edc:	f003 020f 	and.w	r2, r3, #15
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	00db      	lsls	r3, r3, #3
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eec:	687a      	ldr	r2, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	3304      	adds	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005efa:	78fb      	ldrb	r3, [r7, #3]
 8005efc:	f003 030f 	and.w	r3, r3, #15
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d101      	bne.n	8005f14 <HAL_PCD_EP_Close+0x6e>
 8005f10:	2302      	movs	r3, #2
 8005f12:	e00e      	b.n	8005f32 <HAL_PCD_EP_Close+0x8c>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68f9      	ldr	r1, [r7, #12]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 fac0 	bl	800a4a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b086      	sub	sp, #24
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	607a      	str	r2, [r7, #4]
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	460b      	mov	r3, r1
 8005f48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	f003 020f 	and.w	r2, r3, #15
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4413      	add	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	683a      	ldr	r2, [r7, #0]
 8005f6e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2200      	movs	r2, #0
 8005f74:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	f003 030f 	and.w	r3, r3, #15
 8005f82:	b2da      	uxtb	r2, r3
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d102      	bne.n	8005f96 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f96:	7afb      	ldrb	r3, [r7, #11]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	6979      	ldr	r1, [r7, #20]
 8005fae:	f004 fd9f 	bl	800aaf0 <USB_EP0StartXfer>
 8005fb2:	e008      	b.n	8005fc6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6818      	ldr	r0, [r3, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6979      	ldr	r1, [r7, #20]
 8005fc2:	f004 fb4d 	bl	800a660 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3718      	adds	r7, #24
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005ff2:	681b      	ldr	r3, [r3, #0]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	607a      	str	r2, [r7, #4]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	460b      	mov	r3, r1
 800600e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006010:	7afb      	ldrb	r3, [r7, #11]
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	4613      	mov	r3, r2
 8006018:	00db      	lsls	r3, r3, #3
 800601a:	4413      	add	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	3338      	adds	r3, #56	; 0x38
 8006020:	68fa      	ldr	r2, [r7, #12]
 8006022:	4413      	add	r3, r2
 8006024:	3304      	adds	r3, #4
 8006026:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	683a      	ldr	r2, [r7, #0]
 8006032:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2200      	movs	r2, #0
 8006038:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2201      	movs	r2, #1
 800603e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	b2da      	uxtb	r2, r3
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d102      	bne.n	800605a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800605a:	7afb      	ldrb	r3, [r7, #11]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	2b00      	cmp	r3, #0
 8006062:	d109      	bne.n	8006078 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6818      	ldr	r0, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	6979      	ldr	r1, [r7, #20]
 8006072:	f004 fd3d 	bl	800aaf0 <USB_EP0StartXfer>
 8006076:	e008      	b.n	800608a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	6818      	ldr	r0, [r3, #0]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	691b      	ldr	r3, [r3, #16]
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	6979      	ldr	r1, [r7, #20]
 8006086:	f004 faeb 	bl	800a660 <USB_EPStartXfer>
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	460b      	mov	r3, r1
 800609e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80060a0:	78fb      	ldrb	r3, [r7, #3]
 80060a2:	f003 020f 	and.w	r2, r3, #15
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d901      	bls.n	80060b2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e050      	b.n	8006154 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da0f      	bge.n	80060da <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	3338      	adds	r3, #56	; 0x38
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	705a      	strb	r2, [r3, #1]
 80060d8:	e00d      	b.n	80060f6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060da:	78fa      	ldrb	r2, [r7, #3]
 80060dc:	4613      	mov	r3, r2
 80060de:	00db      	lsls	r3, r3, #3
 80060e0:	4413      	add	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	4413      	add	r3, r2
 80060ec:	3304      	adds	r3, #4
 80060ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	f003 030f 	and.w	r3, r3, #15
 8006102:	b2da      	uxtb	r2, r3
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_PCD_EP_SetStall+0x82>
 8006112:	2302      	movs	r3, #2
 8006114:	e01e      	b.n	8006154 <HAL_PCD_EP_SetStall+0xc0>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68f9      	ldr	r1, [r7, #12]
 8006124:	4618      	mov	r0, r3
 8006126:	f004 ff7b 	bl	800b020 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800612a:	78fb      	ldrb	r3, [r7, #3]
 800612c:	f003 030f 	and.w	r3, r3, #15
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6818      	ldr	r0, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	b2d9      	uxtb	r1, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006144:	461a      	mov	r2, r3
 8006146:	f005 f96b 	bl	800b420 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	460b      	mov	r3, r1
 8006166:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	f003 020f 	and.w	r2, r3, #15
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	429a      	cmp	r2, r3
 8006174:	d901      	bls.n	800617a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e042      	b.n	8006200 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800617a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800617e:	2b00      	cmp	r3, #0
 8006180:	da0f      	bge.n	80061a2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006182:	78fb      	ldrb	r3, [r7, #3]
 8006184:	f003 020f 	and.w	r2, r3, #15
 8006188:	4613      	mov	r3, r2
 800618a:	00db      	lsls	r3, r3, #3
 800618c:	4413      	add	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	3338      	adds	r3, #56	; 0x38
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	3304      	adds	r3, #4
 8006198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	705a      	strb	r2, [r3, #1]
 80061a0:	e00f      	b.n	80061c2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	4413      	add	r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	4413      	add	r3, r2
 80061b8:	3304      	adds	r3, #4
 80061ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	f003 030f 	and.w	r3, r3, #15
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d101      	bne.n	80061e2 <HAL_PCD_EP_ClrStall+0x86>
 80061de:	2302      	movs	r3, #2
 80061e0:	e00e      	b.n	8006200 <HAL_PCD_EP_ClrStall+0xa4>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68f9      	ldr	r1, [r7, #12]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f004 ff83 	bl	800b0fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006214:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006218:	2b00      	cmp	r3, #0
 800621a:	da0c      	bge.n	8006236 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800621c:	78fb      	ldrb	r3, [r7, #3]
 800621e:	f003 020f 	and.w	r2, r3, #15
 8006222:	4613      	mov	r3, r2
 8006224:	00db      	lsls	r3, r3, #3
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	3338      	adds	r3, #56	; 0x38
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	4413      	add	r3, r2
 8006230:	3304      	adds	r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e00c      	b.n	8006250 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006236:	78fb      	ldrb	r3, [r7, #3]
 8006238:	f003 020f 	and.w	r2, r3, #15
 800623c:	4613      	mov	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	4413      	add	r3, r2
 800624c:	3304      	adds	r3, #4
 800624e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68f9      	ldr	r1, [r7, #12]
 8006256:	4618      	mov	r0, r3
 8006258:	f004 fda2 	bl	800ada0 <USB_EPStopXfer>
 800625c:	4603      	mov	r3, r0
 800625e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006260:	7afb      	ldrb	r3, [r7, #11]
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}

0800626a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800626a:	b580      	push	{r7, lr}
 800626c:	b08a      	sub	sp, #40	; 0x28
 800626e:	af02      	add	r7, sp, #8
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800627e:	683a      	ldr	r2, [r7, #0]
 8006280:	4613      	mov	r3, r2
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	4413      	add	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	3338      	adds	r3, #56	; 0x38
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	4413      	add	r3, r2
 800628e:	3304      	adds	r3, #4
 8006290:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6a1a      	ldr	r2, [r3, #32]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	699b      	ldr	r3, [r3, #24]
 800629a:	429a      	cmp	r2, r3
 800629c:	d901      	bls.n	80062a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e06c      	b.n	800637c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	1ad3      	subs	r3, r2, r3
 80062ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d902      	bls.n	80062be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062be:	69fb      	ldr	r3, [r7, #28]
 80062c0:	3303      	adds	r3, #3
 80062c2:	089b      	lsrs	r3, r3, #2
 80062c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062c6:	e02b      	b.n	8006320 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	699a      	ldr	r2, [r3, #24]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	69fa      	ldr	r2, [r7, #28]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d902      	bls.n	80062e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3303      	adds	r3, #3
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6919      	ldr	r1, [r3, #16]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	4603      	mov	r3, r0
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f004 fdf6 	bl	800aef4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	691a      	ldr	r2, [r3, #16]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	441a      	add	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1a      	ldr	r2, [r3, #32]
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	441a      	add	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	015a      	lsls	r2, r3, #5
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	4413      	add	r3, r2
 8006328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	b29b      	uxth	r3, r3
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	429a      	cmp	r2, r3
 8006334:	d809      	bhi.n	800634a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1a      	ldr	r2, [r3, #32]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800633e:	429a      	cmp	r2, r3
 8006340:	d203      	bcs.n	800634a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	699b      	ldr	r3, [r3, #24]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d1be      	bne.n	80062c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699a      	ldr	r2, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	429a      	cmp	r2, r3
 8006354:	d811      	bhi.n	800637a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	2201      	movs	r2, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	43db      	mvns	r3, r3
 8006370:	6939      	ldr	r1, [r7, #16]
 8006372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006376:	4013      	ands	r3, r2
 8006378:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b088      	sub	sp, #32
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	333c      	adds	r3, #60	; 0x3c
 800639c:	3304      	adds	r3, #4
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	015a      	lsls	r2, r3, #5
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	4413      	add	r3, r2
 80063aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ae:	689b      	ldr	r3, [r3, #8]
 80063b0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	691b      	ldr	r3, [r3, #16]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d17b      	bne.n	80064b2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	f003 0308 	and.w	r3, r3, #8
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d015      	beq.n	80063f0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	4a61      	ldr	r2, [pc, #388]	; (800654c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	f240 80b9 	bls.w	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ce:	693b      	ldr	r3, [r7, #16]
 80063d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f000 80b3 	beq.w	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ec:	6093      	str	r3, [r2, #8]
 80063ee:	e0a7      	b.n	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d009      	beq.n	800640e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	461a      	mov	r2, r3
 8006408:	2320      	movs	r3, #32
 800640a:	6093      	str	r3, [r2, #8]
 800640c:	e098      	b.n	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006414:	2b00      	cmp	r3, #0
 8006416:	f040 8093 	bne.w	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	4a4b      	ldr	r2, [pc, #300]	; (800654c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d90f      	bls.n	8006442 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00a      	beq.n	8006442 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	69bb      	ldr	r3, [r7, #24]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006438:	461a      	mov	r2, r3
 800643a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800643e:	6093      	str	r3, [r2, #8]
 8006440:	e07e      	b.n	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006442:	683a      	ldr	r2, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4413      	add	r3, r2
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	4413      	add	r3, r2
 8006454:	3304      	adds	r3, #4
 8006456:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	69da      	ldr	r2, [r3, #28]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	0159      	lsls	r1, r3, #5
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	440b      	add	r3, r1
 8006464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646e:	1ad2      	subs	r2, r2, r3
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d114      	bne.n	80064a4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d109      	bne.n	8006496 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800648c:	461a      	mov	r2, r3
 800648e:	2101      	movs	r1, #1
 8006490:	f004 ffc6 	bl	800b420 <USB_EP0_OutStart>
 8006494:	e006      	b.n	80064a4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	691a      	ldr	r2, [r3, #16]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	441a      	add	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f00c fab6 	bl	8012a1c <HAL_PCD_DataOutStageCallback>
 80064b0:	e046      	b.n	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	4a26      	ldr	r2, [pc, #152]	; (8006550 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d124      	bne.n	8006504 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00a      	beq.n	80064da <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d0:	461a      	mov	r2, r3
 80064d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064d6:	6093      	str	r3, [r2, #8]
 80064d8:	e032      	b.n	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	f003 0320 	and.w	r3, r3, #32
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d008      	beq.n	80064f6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	015a      	lsls	r2, r3, #5
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	4413      	add	r3, r2
 80064ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f0:	461a      	mov	r2, r3
 80064f2:	2320      	movs	r3, #32
 80064f4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	4619      	mov	r1, r3
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f00c fa8d 	bl	8012a1c <HAL_PCD_DataOutStageCallback>
 8006502:	e01d      	b.n	8006540 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d114      	bne.n	8006534 <PCD_EP_OutXfrComplete_int+0x1b0>
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	4613      	mov	r3, r2
 8006510:	00db      	lsls	r3, r3, #3
 8006512:	4413      	add	r3, r2
 8006514:	009b      	lsls	r3, r3, #2
 8006516:	440b      	add	r3, r1
 8006518:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d108      	bne.n	8006534 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6818      	ldr	r0, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800652c:	461a      	mov	r2, r3
 800652e:	2100      	movs	r1, #0
 8006530:	f004 ff76 	bl	800b420 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f00c fa6e 	bl	8012a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	4f54300a 	.word	0x4f54300a
 8006550:	4f54310a 	.word	0x4f54310a

08006554 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	333c      	adds	r3, #60	; 0x3c
 800656c:	3304      	adds	r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	015a      	lsls	r2, r3, #5
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4413      	add	r3, r2
 800657a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	4a15      	ldr	r2, [pc, #84]	; (80065dc <PCD_EP_OutSetupPacket_int+0x88>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d90e      	bls.n	80065a8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006590:	2b00      	cmp	r3, #0
 8006592:	d009      	beq.n	80065a8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	015a      	lsls	r2, r3, #5
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a0:	461a      	mov	r2, r3
 80065a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f00c fa25 	bl	80129f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <PCD_EP_OutSetupPacket_int+0x88>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d90c      	bls.n	80065d0 <PCD_EP_OutSetupPacket_int+0x7c>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d108      	bne.n	80065d0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065c8:	461a      	mov	r2, r3
 80065ca:	2101      	movs	r1, #1
 80065cc:	f004 ff28 	bl	800b420 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3718      	adds	r7, #24
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	4f54300a 	.word	0x4f54300a

080065e0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b085      	sub	sp, #20
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	460b      	mov	r3, r1
 80065ea:	70fb      	strb	r3, [r7, #3]
 80065ec:	4613      	mov	r3, r2
 80065ee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d107      	bne.n	800660e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065fe:	883b      	ldrh	r3, [r7, #0]
 8006600:	0419      	lsls	r1, r3, #16
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	430a      	orrs	r2, r1
 800660a:	629a      	str	r2, [r3, #40]	; 0x28
 800660c:	e028      	b.n	8006660 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006614:	0c1b      	lsrs	r3, r3, #16
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	4413      	add	r3, r2
 800661a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800661c:	2300      	movs	r3, #0
 800661e:	73fb      	strb	r3, [r7, #15]
 8006620:	e00d      	b.n	800663e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	3340      	adds	r3, #64	; 0x40
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4413      	add	r3, r2
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	0c1b      	lsrs	r3, r3, #16
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	4413      	add	r3, r2
 8006636:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	3301      	adds	r3, #1
 800663c:	73fb      	strb	r3, [r7, #15]
 800663e:	7bfa      	ldrb	r2, [r7, #15]
 8006640:	78fb      	ldrb	r3, [r7, #3]
 8006642:	3b01      	subs	r3, #1
 8006644:	429a      	cmp	r2, r3
 8006646:	d3ec      	bcc.n	8006622 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006648:	883b      	ldrh	r3, [r7, #0]
 800664a:	0418      	lsls	r0, r3, #16
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6819      	ldr	r1, [r3, #0]
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	3b01      	subs	r3, #1
 8006654:	68ba      	ldr	r2, [r7, #8]
 8006656:	4302      	orrs	r2, r0
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	009b      	lsls	r3, r3, #2
 800665c:	440b      	add	r3, r1
 800665e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr

0800666e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800666e:	b480      	push	{r7}
 8006670:	b083      	sub	sp, #12
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	460b      	mov	r3, r1
 8006678:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006682:	2300      	movs	r3, #0
}
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d101      	bne.n	80066ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e267      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d075      	beq.n	80067b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066c6:	4b88      	ldr	r3, [pc, #544]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d00c      	beq.n	80066ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066d2:	4b85      	ldr	r3, [pc, #532]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d112      	bne.n	8006704 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066de:	4b82      	ldr	r3, [pc, #520]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066ea:	d10b      	bne.n	8006704 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	4b7e      	ldr	r3, [pc, #504]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d05b      	beq.n	80067b0 <HAL_RCC_OscConfig+0x108>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d157      	bne.n	80067b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e242      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d106      	bne.n	800671c <HAL_RCC_OscConfig+0x74>
 800670e:	4b76      	ldr	r3, [pc, #472]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a75      	ldr	r2, [pc, #468]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e01d      	b.n	8006758 <HAL_RCC_OscConfig+0xb0>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006724:	d10c      	bne.n	8006740 <HAL_RCC_OscConfig+0x98>
 8006726:	4b70      	ldr	r3, [pc, #448]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a6f      	ldr	r2, [pc, #444]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 800672c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006730:	6013      	str	r3, [r2, #0]
 8006732:	4b6d      	ldr	r3, [pc, #436]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a6c      	ldr	r2, [pc, #432]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800673c:	6013      	str	r3, [r2, #0]
 800673e:	e00b      	b.n	8006758 <HAL_RCC_OscConfig+0xb0>
 8006740:	4b69      	ldr	r3, [pc, #420]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a68      	ldr	r2, [pc, #416]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006746:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800674a:	6013      	str	r3, [r2, #0]
 800674c:	4b66      	ldr	r3, [pc, #408]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a65      	ldr	r2, [pc, #404]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006760:	f7fc f86a 	bl	8002838 <HAL_GetTick>
 8006764:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006766:	e008      	b.n	800677a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006768:	f7fc f866 	bl	8002838 <HAL_GetTick>
 800676c:	4602      	mov	r2, r0
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	2b64      	cmp	r3, #100	; 0x64
 8006774:	d901      	bls.n	800677a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006776:	2303      	movs	r3, #3
 8006778:	e207      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	4b5b      	ldr	r3, [pc, #364]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d0f0      	beq.n	8006768 <HAL_RCC_OscConfig+0xc0>
 8006786:	e014      	b.n	80067b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006788:	f7fc f856 	bl	8002838 <HAL_GetTick>
 800678c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678e:	e008      	b.n	80067a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006790:	f7fc f852 	bl	8002838 <HAL_GetTick>
 8006794:	4602      	mov	r2, r0
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	2b64      	cmp	r3, #100	; 0x64
 800679c:	d901      	bls.n	80067a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e1f3      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a2:	4b51      	ldr	r3, [pc, #324]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1f0      	bne.n	8006790 <HAL_RCC_OscConfig+0xe8>
 80067ae:	e000      	b.n	80067b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0302 	and.w	r3, r3, #2
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d063      	beq.n	8006886 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067be:	4b4a      	ldr	r3, [pc, #296]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00b      	beq.n	80067e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067d2:	2b08      	cmp	r3, #8
 80067d4:	d11c      	bne.n	8006810 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067d6:	4b44      	ldr	r3, [pc, #272]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d116      	bne.n	8006810 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067e2:	4b41      	ldr	r3, [pc, #260]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d005      	beq.n	80067fa <HAL_RCC_OscConfig+0x152>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d001      	beq.n	80067fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e1c7      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067fa:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	00db      	lsls	r3, r3, #3
 8006808:	4937      	ldr	r1, [pc, #220]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 800680a:	4313      	orrs	r3, r2
 800680c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800680e:	e03a      	b.n	8006886 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d020      	beq.n	800685a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006818:	4b34      	ldr	r3, [pc, #208]	; (80068ec <HAL_RCC_OscConfig+0x244>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681e:	f7fc f80b 	bl	8002838 <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006824:	e008      	b.n	8006838 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006826:	f7fc f807 	bl	8002838 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e1a8      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006838:	4b2b      	ldr	r3, [pc, #172]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f0      	beq.n	8006826 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006844:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4925      	ldr	r1, [pc, #148]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 8006854:	4313      	orrs	r3, r2
 8006856:	600b      	str	r3, [r1, #0]
 8006858:	e015      	b.n	8006886 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800685a:	4b24      	ldr	r3, [pc, #144]	; (80068ec <HAL_RCC_OscConfig+0x244>)
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006860:	f7fb ffea 	bl	8002838 <HAL_GetTick>
 8006864:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006866:	e008      	b.n	800687a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006868:	f7fb ffe6 	bl	8002838 <HAL_GetTick>
 800686c:	4602      	mov	r2, r0
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	2b02      	cmp	r3, #2
 8006874:	d901      	bls.n	800687a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e187      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687a:	4b1b      	ldr	r3, [pc, #108]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0302 	and.w	r3, r3, #2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1f0      	bne.n	8006868 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d036      	beq.n	8006900 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d016      	beq.n	80068c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800689a:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <HAL_RCC_OscConfig+0x248>)
 800689c:	2201      	movs	r2, #1
 800689e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068a0:	f7fb ffca 	bl	8002838 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a8:	f7fb ffc6 	bl	8002838 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e167      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ba:	4b0b      	ldr	r3, [pc, #44]	; (80068e8 <HAL_RCC_OscConfig+0x240>)
 80068bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d0f0      	beq.n	80068a8 <HAL_RCC_OscConfig+0x200>
 80068c6:	e01b      	b.n	8006900 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c8:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_RCC_OscConfig+0x248>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ce:	f7fb ffb3 	bl	8002838 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	e00e      	b.n	80068f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068d6:	f7fb ffaf 	bl	8002838 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d907      	bls.n	80068f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e150      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
 80068e8:	40023800 	.word	0x40023800
 80068ec:	42470000 	.word	0x42470000
 80068f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068f4:	4b88      	ldr	r3, [pc, #544]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80068f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1ea      	bne.n	80068d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0304 	and.w	r3, r3, #4
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8097 	beq.w	8006a3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800690e:	2300      	movs	r3, #0
 8006910:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006912:	4b81      	ldr	r3, [pc, #516]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10f      	bne.n	800693e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800691e:	2300      	movs	r3, #0
 8006920:	60bb      	str	r3, [r7, #8]
 8006922:	4b7d      	ldr	r3, [pc, #500]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006926:	4a7c      	ldr	r2, [pc, #496]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006928:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800692c:	6413      	str	r3, [r2, #64]	; 0x40
 800692e:	4b7a      	ldr	r3, [pc, #488]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006936:	60bb      	str	r3, [r7, #8]
 8006938:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693e:	4b77      	ldr	r3, [pc, #476]	; (8006b1c <HAL_RCC_OscConfig+0x474>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006946:	2b00      	cmp	r3, #0
 8006948:	d118      	bne.n	800697c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800694a:	4b74      	ldr	r3, [pc, #464]	; (8006b1c <HAL_RCC_OscConfig+0x474>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a73      	ldr	r2, [pc, #460]	; (8006b1c <HAL_RCC_OscConfig+0x474>)
 8006950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006954:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006956:	f7fb ff6f 	bl	8002838 <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800695e:	f7fb ff6b 	bl	8002838 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e10c      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006970:	4b6a      	ldr	r3, [pc, #424]	; (8006b1c <HAL_RCC_OscConfig+0x474>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d106      	bne.n	8006992 <HAL_RCC_OscConfig+0x2ea>
 8006984:	4b64      	ldr	r3, [pc, #400]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006988:	4a63      	ldr	r2, [pc, #396]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 800698a:	f043 0301 	orr.w	r3, r3, #1
 800698e:	6713      	str	r3, [r2, #112]	; 0x70
 8006990:	e01c      	b.n	80069cc <HAL_RCC_OscConfig+0x324>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b05      	cmp	r3, #5
 8006998:	d10c      	bne.n	80069b4 <HAL_RCC_OscConfig+0x30c>
 800699a:	4b5f      	ldr	r3, [pc, #380]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 800699c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699e:	4a5e      	ldr	r2, [pc, #376]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	6713      	str	r3, [r2, #112]	; 0x70
 80069a6:	4b5c      	ldr	r3, [pc, #368]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	4a5b      	ldr	r2, [pc, #364]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069ac:	f043 0301 	orr.w	r3, r3, #1
 80069b0:	6713      	str	r3, [r2, #112]	; 0x70
 80069b2:	e00b      	b.n	80069cc <HAL_RCC_OscConfig+0x324>
 80069b4:	4b58      	ldr	r3, [pc, #352]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a57      	ldr	r2, [pc, #348]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	4b55      	ldr	r3, [pc, #340]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	4a54      	ldr	r2, [pc, #336]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069c6:	f023 0304 	bic.w	r3, r3, #4
 80069ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d015      	beq.n	8006a00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d4:	f7fb ff30 	bl	8002838 <HAL_GetTick>
 80069d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069da:	e00a      	b.n	80069f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069dc:	f7fb ff2c 	bl	8002838 <HAL_GetTick>
 80069e0:	4602      	mov	r2, r0
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d901      	bls.n	80069f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e0cb      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f2:	4b49      	ldr	r3, [pc, #292]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0ee      	beq.n	80069dc <HAL_RCC_OscConfig+0x334>
 80069fe:	e014      	b.n	8006a2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a00:	f7fb ff1a 	bl	8002838 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a06:	e00a      	b.n	8006a1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a08:	f7fb ff16 	bl	8002838 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e0b5      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a1e:	4b3e      	ldr	r3, [pc, #248]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a22:	f003 0302 	and.w	r3, r3, #2
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1ee      	bne.n	8006a08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d105      	bne.n	8006a3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a30:	4b39      	ldr	r3, [pc, #228]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	4a38      	ldr	r2, [pc, #224]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a3a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 80a1 	beq.w	8006b88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a46:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	f003 030c 	and.w	r3, r3, #12
 8006a4e:	2b08      	cmp	r3, #8
 8006a50:	d05c      	beq.n	8006b0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d141      	bne.n	8006ade <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a5a:	4b31      	ldr	r3, [pc, #196]	; (8006b20 <HAL_RCC_OscConfig+0x478>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a60:	f7fb feea 	bl	8002838 <HAL_GetTick>
 8006a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a66:	e008      	b.n	8006a7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a68:	f7fb fee6 	bl	8002838 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	2b02      	cmp	r3, #2
 8006a74:	d901      	bls.n	8006a7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e087      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7a:	4b27      	ldr	r3, [pc, #156]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1f0      	bne.n	8006a68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	69da      	ldr	r2, [r3, #28]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	431a      	orrs	r2, r3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	019b      	lsls	r3, r3, #6
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	085b      	lsrs	r3, r3, #1
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	041b      	lsls	r3, r3, #16
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	061b      	lsls	r3, r3, #24
 8006aaa:	491b      	ldr	r1, [pc, #108]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006aac:	4313      	orrs	r3, r2
 8006aae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <HAL_RCC_OscConfig+0x478>)
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab6:	f7fb febf 	bl	8002838 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006abc:	e008      	b.n	8006ad0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006abe:	f7fb febb 	bl	8002838 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d901      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e05c      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad0:	4b11      	ldr	r3, [pc, #68]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d0f0      	beq.n	8006abe <HAL_RCC_OscConfig+0x416>
 8006adc:	e054      	b.n	8006b88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ade:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <HAL_RCC_OscConfig+0x478>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae4:	f7fb fea8 	bl	8002838 <HAL_GetTick>
 8006ae8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aea:	e008      	b.n	8006afe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aec:	f7fb fea4 	bl	8002838 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e045      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afe:	4b06      	ldr	r3, [pc, #24]	; (8006b18 <HAL_RCC_OscConfig+0x470>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1f0      	bne.n	8006aec <HAL_RCC_OscConfig+0x444>
 8006b0a:	e03d      	b.n	8006b88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d107      	bne.n	8006b24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e038      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	40007000 	.word	0x40007000
 8006b20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <HAL_RCC_OscConfig+0x4ec>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	699b      	ldr	r3, [r3, #24]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d028      	beq.n	8006b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d121      	bne.n	8006b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d11a      	bne.n	8006b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b54:	4013      	ands	r3, r2
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d111      	bne.n	8006b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	085b      	lsrs	r3, r3, #1
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d107      	bne.n	8006b84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b80:	429a      	cmp	r2, r3
 8006b82:	d001      	beq.n	8006b88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b88:	2300      	movs	r3, #0
}
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	3718      	adds	r7, #24
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800

08006b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d101      	bne.n	8006bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e0cc      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bac:	4b68      	ldr	r3, [pc, #416]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0307 	and.w	r3, r3, #7
 8006bb4:	683a      	ldr	r2, [r7, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d90c      	bls.n	8006bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bba:	4b65      	ldr	r3, [pc, #404]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006bbc:	683a      	ldr	r2, [r7, #0]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bc2:	4b63      	ldr	r3, [pc, #396]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d001      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e0b8      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d020      	beq.n	8006c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 0304 	and.w	r3, r3, #4
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d005      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bec:	4b59      	ldr	r3, [pc, #356]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	4a58      	ldr	r2, [pc, #352]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0308 	and.w	r3, r3, #8
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d005      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c04:	4b53      	ldr	r3, [pc, #332]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	689b      	ldr	r3, [r3, #8]
 8006c08:	4a52      	ldr	r2, [pc, #328]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c10:	4b50      	ldr	r3, [pc, #320]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	494d      	ldr	r1, [pc, #308]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0301 	and.w	r3, r3, #1
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d044      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d107      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c36:	4b47      	ldr	r3, [pc, #284]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d119      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e07f      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d003      	beq.n	8006c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d107      	bne.n	8006c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c56:	4b3f      	ldr	r3, [pc, #252]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d109      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e06f      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c66:	4b3b      	ldr	r3, [pc, #236]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e067      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c76:	4b37      	ldr	r3, [pc, #220]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f023 0203 	bic.w	r2, r3, #3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	4934      	ldr	r1, [pc, #208]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c88:	f7fb fdd6 	bl	8002838 <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c8e:	e00a      	b.n	8006ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c90:	f7fb fdd2 	bl	8002838 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d901      	bls.n	8006ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e04f      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca6:	4b2b      	ldr	r3, [pc, #172]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f003 020c 	and.w	r2, r3, #12
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d1eb      	bne.n	8006c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006cb8:	4b25      	ldr	r3, [pc, #148]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0307 	and.w	r3, r3, #7
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d20c      	bcs.n	8006ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cc6:	4b22      	ldr	r3, [pc, #136]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cce:	4b20      	ldr	r3, [pc, #128]	; (8006d50 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f003 0307 	and.w	r3, r3, #7
 8006cd6:	683a      	ldr	r2, [r7, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d001      	beq.n	8006ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cdc:	2301      	movs	r3, #1
 8006cde:	e032      	b.n	8006d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f003 0304 	and.w	r3, r3, #4
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d008      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cec:	4b19      	ldr	r3, [pc, #100]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	4916      	ldr	r1, [pc, #88]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0308 	and.w	r3, r3, #8
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d0a:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	691b      	ldr	r3, [r3, #16]
 8006d16:	00db      	lsls	r3, r3, #3
 8006d18:	490e      	ldr	r1, [pc, #56]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d1e:	f000 f821 	bl	8006d64 <HAL_RCC_GetSysClockFreq>
 8006d22:	4602      	mov	r2, r0
 8006d24:	4b0b      	ldr	r3, [pc, #44]	; (8006d54 <HAL_RCC_ClockConfig+0x1bc>)
 8006d26:	689b      	ldr	r3, [r3, #8]
 8006d28:	091b      	lsrs	r3, r3, #4
 8006d2a:	f003 030f 	and.w	r3, r3, #15
 8006d2e:	490a      	ldr	r1, [pc, #40]	; (8006d58 <HAL_RCC_ClockConfig+0x1c0>)
 8006d30:	5ccb      	ldrb	r3, [r1, r3]
 8006d32:	fa22 f303 	lsr.w	r3, r2, r3
 8006d36:	4a09      	ldr	r2, [pc, #36]	; (8006d5c <HAL_RCC_ClockConfig+0x1c4>)
 8006d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fb fd36 	bl	80027b0 <HAL_InitTick>

  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	40023c00 	.word	0x40023c00
 8006d54:	40023800 	.word	0x40023800
 8006d58:	0801392c 	.word	0x0801392c
 8006d5c:	20000060 	.word	0x20000060
 8006d60:	20000064 	.word	0x20000064

08006d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d68:	b090      	sub	sp, #64	; 0x40
 8006d6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006d70:	2300      	movs	r3, #0
 8006d72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d74:	2300      	movs	r3, #0
 8006d76:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d7c:	4b59      	ldr	r3, [pc, #356]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	f003 030c 	and.w	r3, r3, #12
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d00d      	beq.n	8006da4 <HAL_RCC_GetSysClockFreq+0x40>
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	f200 80a1 	bhi.w	8006ed0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_RCC_GetSysClockFreq+0x34>
 8006d92:	2b04      	cmp	r3, #4
 8006d94:	d003      	beq.n	8006d9e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d96:	e09b      	b.n	8006ed0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d98:	4b53      	ldr	r3, [pc, #332]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006d9c:	e09b      	b.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d9e:	4b53      	ldr	r3, [pc, #332]	; (8006eec <HAL_RCC_GetSysClockFreq+0x188>)
 8006da0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006da2:	e098      	b.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006da4:	4b4f      	ldr	r3, [pc, #316]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dae:	4b4d      	ldr	r3, [pc, #308]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d028      	beq.n	8006e0c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dba:	4b4a      	ldr	r3, [pc, #296]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	099b      	lsrs	r3, r3, #6
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	623b      	str	r3, [r7, #32]
 8006dc4:	627a      	str	r2, [r7, #36]	; 0x24
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dcc:	2100      	movs	r1, #0
 8006dce:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_GetSysClockFreq+0x188>)
 8006dd0:	fb03 f201 	mul.w	r2, r3, r1
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	fb00 f303 	mul.w	r3, r0, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	4a43      	ldr	r2, [pc, #268]	; (8006eec <HAL_RCC_GetSysClockFreq+0x188>)
 8006dde:	fba0 1202 	umull	r1, r2, r0, r2
 8006de2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006de4:	460a      	mov	r2, r1
 8006de6:	62ba      	str	r2, [r7, #40]	; 0x28
 8006de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dea:	4413      	add	r3, r2
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006df0:	2200      	movs	r2, #0
 8006df2:	61bb      	str	r3, [r7, #24]
 8006df4:	61fa      	str	r2, [r7, #28]
 8006df6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dfa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006dfe:	f7f9 fe45 	bl	8000a8c <__aeabi_uldivmod>
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	4613      	mov	r3, r2
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e0a:	e053      	b.n	8006eb4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e0c:	4b35      	ldr	r3, [pc, #212]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	099b      	lsrs	r3, r3, #6
 8006e12:	2200      	movs	r2, #0
 8006e14:	613b      	str	r3, [r7, #16]
 8006e16:	617a      	str	r2, [r7, #20]
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e1e:	f04f 0b00 	mov.w	fp, #0
 8006e22:	4652      	mov	r2, sl
 8006e24:	465b      	mov	r3, fp
 8006e26:	f04f 0000 	mov.w	r0, #0
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	0159      	lsls	r1, r3, #5
 8006e30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e34:	0150      	lsls	r0, r2, #5
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	ebb2 080a 	subs.w	r8, r2, sl
 8006e3e:	eb63 090b 	sbc.w	r9, r3, fp
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e4e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e52:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e56:	ebb2 0408 	subs.w	r4, r2, r8
 8006e5a:	eb63 0509 	sbc.w	r5, r3, r9
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	f04f 0300 	mov.w	r3, #0
 8006e66:	00eb      	lsls	r3, r5, #3
 8006e68:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e6c:	00e2      	lsls	r2, r4, #3
 8006e6e:	4614      	mov	r4, r2
 8006e70:	461d      	mov	r5, r3
 8006e72:	eb14 030a 	adds.w	r3, r4, sl
 8006e76:	603b      	str	r3, [r7, #0]
 8006e78:	eb45 030b 	adc.w	r3, r5, fp
 8006e7c:	607b      	str	r3, [r7, #4]
 8006e7e:	f04f 0200 	mov.w	r2, #0
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	028b      	lsls	r3, r1, #10
 8006e8e:	4621      	mov	r1, r4
 8006e90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e94:	4621      	mov	r1, r4
 8006e96:	028a      	lsls	r2, r1, #10
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
 8006ea2:	60fa      	str	r2, [r7, #12]
 8006ea4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ea8:	f7f9 fdf0 	bl	8000a8c <__aeabi_uldivmod>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006eb4:	4b0b      	ldr	r3, [pc, #44]	; (8006ee4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	005b      	lsls	r3, r3, #1
 8006ec2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ec4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ecc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ece:	e002      	b.n	8006ed6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ed0:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ed2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3740      	adds	r7, #64	; 0x40
 8006edc:	46bd      	mov	sp, r7
 8006ede:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ee2:	bf00      	nop
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	00f42400 	.word	0x00f42400
 8006eec:	017d7840 	.word	0x017d7840

08006ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ef4:	4b03      	ldr	r3, [pc, #12]	; (8006f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	20000060 	.word	0x20000060

08006f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f0c:	f7ff fff0 	bl	8006ef0 <HAL_RCC_GetHCLKFreq>
 8006f10:	4602      	mov	r2, r0
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	0a9b      	lsrs	r3, r3, #10
 8006f18:	f003 0307 	and.w	r3, r3, #7
 8006f1c:	4903      	ldr	r1, [pc, #12]	; (8006f2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f1e:	5ccb      	ldrb	r3, [r1, r3]
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	bd80      	pop	{r7, pc}
 8006f28:	40023800 	.word	0x40023800
 8006f2c:	0801393c 	.word	0x0801393c

08006f30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f34:	f7ff ffdc 	bl	8006ef0 <HAL_RCC_GetHCLKFreq>
 8006f38:	4602      	mov	r2, r0
 8006f3a:	4b05      	ldr	r3, [pc, #20]	; (8006f50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	0b5b      	lsrs	r3, r3, #13
 8006f40:	f003 0307 	and.w	r3, r3, #7
 8006f44:	4903      	ldr	r1, [pc, #12]	; (8006f54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f46:	5ccb      	ldrb	r3, [r1, r3]
 8006f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	40023800 	.word	0x40023800
 8006f54:	0801393c 	.word	0x0801393c

08006f58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b086      	sub	sp, #24
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d105      	bne.n	8006f80 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d038      	beq.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f80:	4b68      	ldr	r3, [pc, #416]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006f82:	2200      	movs	r2, #0
 8006f84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f86:	f7fb fc57 	bl	8002838 <HAL_GetTick>
 8006f8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f8c:	e008      	b.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f8e:	f7fb fc53 	bl	8002838 <HAL_GetTick>
 8006f92:	4602      	mov	r2, r0
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d901      	bls.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e0bd      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fa0:	4b61      	ldr	r3, [pc, #388]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1f0      	bne.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	019b      	lsls	r3, r3, #6
 8006fb6:	431a      	orrs	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	071b      	lsls	r3, r3, #28
 8006fbe:	495a      	ldr	r1, [pc, #360]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fc6:	4b57      	ldr	r3, [pc, #348]	; (8007124 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fcc:	f7fb fc34 	bl	8002838 <HAL_GetTick>
 8006fd0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fd2:	e008      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006fd4:	f7fb fc30 	bl	8002838 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	2b02      	cmp	r3, #2
 8006fe0:	d901      	bls.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fe2:	2303      	movs	r3, #3
 8006fe4:	e09a      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fe6:	4b50      	ldr	r3, [pc, #320]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0f0      	beq.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0302 	and.w	r3, r3, #2
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 8083 	beq.w	8007106 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]
 8007004:	4b48      	ldr	r3, [pc, #288]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007008:	4a47      	ldr	r2, [pc, #284]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800700a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800700e:	6413      	str	r3, [r2, #64]	; 0x40
 8007010:	4b45      	ldr	r3, [pc, #276]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800701c:	4b43      	ldr	r3, [pc, #268]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a42      	ldr	r2, [pc, #264]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007026:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007028:	f7fb fc06 	bl	8002838 <HAL_GetTick>
 800702c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800702e:	e008      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007030:	f7fb fc02 	bl	8002838 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	2b02      	cmp	r3, #2
 800703c:	d901      	bls.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800703e:	2303      	movs	r3, #3
 8007040:	e06c      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007042:	4b3a      	ldr	r3, [pc, #232]	; (800712c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0f0      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800704e:	4b36      	ldr	r3, [pc, #216]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007056:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d02f      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x166>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007066:	693a      	ldr	r2, [r7, #16]
 8007068:	429a      	cmp	r2, r3
 800706a:	d028      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800706c:	4b2e      	ldr	r3, [pc, #184]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007074:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007076:	4b2e      	ldr	r3, [pc, #184]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007078:	2201      	movs	r2, #1
 800707a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800707c:	4b2c      	ldr	r3, [pc, #176]	; (8007130 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007082:	4a29      	ldr	r2, [pc, #164]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007088:	4b27      	ldr	r3, [pc, #156]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800708a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800708c:	f003 0301 	and.w	r3, r3, #1
 8007090:	2b01      	cmp	r3, #1
 8007092:	d114      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007094:	f7fb fbd0 	bl	8002838 <HAL_GetTick>
 8007098:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800709a:	e00a      	b.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800709c:	f7fb fbcc 	bl	8002838 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d901      	bls.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e034      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070b2:	4b1d      	ldr	r3, [pc, #116]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070b6:	f003 0302 	and.w	r3, r3, #2
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d0ee      	beq.n	800709c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070ca:	d10d      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x190>
 80070cc:	4b16      	ldr	r3, [pc, #88]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80070dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e0:	4911      	ldr	r1, [pc, #68]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	608b      	str	r3, [r1, #8]
 80070e6:	e005      	b.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80070e8:	4b0f      	ldr	r3, [pc, #60]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	4a0e      	ldr	r2, [pc, #56]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80070f2:	6093      	str	r3, [r2, #8]
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007100:	4909      	ldr	r1, [pc, #36]	; (8007128 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007102:	4313      	orrs	r3, r2
 8007104:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	7d1a      	ldrb	r2, [r3, #20]
 8007116:	4b07      	ldr	r3, [pc, #28]	; (8007134 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8007118:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800711a:	2300      	movs	r3, #0
}
 800711c:	4618      	mov	r0, r3
 800711e:	3718      	adds	r7, #24
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	42470068 	.word	0x42470068
 8007128:	40023800 	.word	0x40023800
 800712c:	40007000 	.word	0x40007000
 8007130:	42470e40 	.word	0x42470e40
 8007134:	424711e0 	.word	0x424711e0

08007138 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d101      	bne.n	800714e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	e066      	b.n	800721c <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	7f5b      	ldrb	r3, [r3, #29]
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d105      	bne.n	8007164 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2200      	movs	r2, #0
 800715c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7fb f83c 	bl	80021dc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2202      	movs	r2, #2
 8007168:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	22ca      	movs	r2, #202	; 0xca
 8007170:	625a      	str	r2, [r3, #36]	; 0x24
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2253      	movs	r2, #83	; 0x53
 8007178:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 f87a 	bl	8007274 <RTC_EnterInitMode>
 8007180:	4603      	mov	r3, r0
 8007182:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007184:	7bfb      	ldrb	r3, [r7, #15]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d12c      	bne.n	80071e4 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	6812      	ldr	r2, [r2, #0]
 8007194:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719c:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	6899      	ldr	r1, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	431a      	orrs	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	695b      	ldr	r3, [r3, #20]
 80071b2:	431a      	orrs	r2, r3
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	430a      	orrs	r2, r1
 80071ba:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	68d2      	ldr	r2, [r2, #12]
 80071c4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6919      	ldr	r1, [r3, #16]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	041a      	lsls	r2, r3, #16
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	430a      	orrs	r2, r1
 80071d8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80071da:	6878      	ldr	r0, [r7, #4]
 80071dc:	f000 f881 	bl	80072e2 <RTC_ExitInitMode>
 80071e0:	4603      	mov	r3, r0
 80071e2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d113      	bne.n	8007212 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80071f8:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	699a      	ldr	r2, [r3, #24]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	430a      	orrs	r2, r1
 800720a:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	22ff      	movs	r2, #255	; 0xff
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800721a:	7bfb      	ldrb	r3, [r7, #15]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68da      	ldr	r2, [r3, #12]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800723e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007240:	f7fb fafa 	bl	8002838 <HAL_GetTick>
 8007244:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007246:	e009      	b.n	800725c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007248:	f7fb faf6 	bl	8002838 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007256:	d901      	bls.n	800725c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e007      	b.n	800726c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d0ee      	beq.n	8007248 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800728e:	2b00      	cmp	r3, #0
 8007290:	d122      	bne.n	80072d8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68da      	ldr	r2, [r3, #12]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80072a2:	f7fb fac9 	bl	8002838 <HAL_GetTick>
 80072a6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072a8:	e00c      	b.n	80072c4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80072aa:	f7fb fac5 	bl	8002838 <HAL_GetTick>
 80072ae:	4602      	mov	r2, r0
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	1ad3      	subs	r3, r2, r3
 80072b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b8:	d904      	bls.n	80072c4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2204      	movs	r2, #4
 80072be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <RTC_EnterInitMode+0x64>
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d1e8      	bne.n	80072aa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072ea:	2300      	movs	r3, #0
 80072ec:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68da      	ldr	r2, [r3, #12]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072fc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 0320 	and.w	r3, r3, #32
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff89 	bl	8007224 <HAL_RTC_WaitForSynchro>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d004      	beq.n	8007322 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2204      	movs	r2, #4
 800731c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007322:	7bfb      	ldrb	r3, [r7, #15]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b082      	sub	sp, #8
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d101      	bne.n	800733e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e041      	b.n	80073c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d106      	bne.n	8007358 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7fa ff6e 	bl	8002234 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2202      	movs	r2, #2
 800735c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f000 ff6c 	bl	8008248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
	...

080073cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d001      	beq.n	80073e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e044      	b.n	800746e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2202      	movs	r2, #2
 80073e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68da      	ldr	r2, [r3, #12]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f042 0201 	orr.w	r2, r2, #1
 80073fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a1e      	ldr	r2, [pc, #120]	; (800747c <HAL_TIM_Base_Start_IT+0xb0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d018      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x6c>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740e:	d013      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x6c>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a1a      	ldr	r2, [pc, #104]	; (8007480 <HAL_TIM_Base_Start_IT+0xb4>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d00e      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x6c>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a19      	ldr	r2, [pc, #100]	; (8007484 <HAL_TIM_Base_Start_IT+0xb8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d009      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x6c>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a17      	ldr	r2, [pc, #92]	; (8007488 <HAL_TIM_Base_Start_IT+0xbc>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d004      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0x6c>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <HAL_TIM_Base_Start_IT+0xc0>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d111      	bne.n	800745c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0307 	and.w	r3, r3, #7
 8007442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b06      	cmp	r3, #6
 8007448:	d010      	beq.n	800746c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f042 0201 	orr.w	r2, r2, #1
 8007458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745a:	e007      	b.n	800746c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0201 	orr.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40010000 	.word	0x40010000
 8007480:	40000400 	.word	0x40000400
 8007484:	40000800 	.word	0x40000800
 8007488:	40000c00 	.word	0x40000c00
 800748c:	40014000 	.word	0x40014000

08007490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e041      	b.n	8007526 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d106      	bne.n	80074bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f839 	bl	800752e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2202      	movs	r2, #2
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	3304      	adds	r3, #4
 80074cc:	4619      	mov	r1, r3
 80074ce:	4610      	mov	r0, r2
 80074d0:	f000 feba 	bl	8008248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2201      	movs	r2, #1
 8007518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
	...

08007544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d109      	bne.n	8007568 <HAL_TIM_PWM_Start+0x24>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b01      	cmp	r3, #1
 800755e:	bf14      	ite	ne
 8007560:	2301      	movne	r3, #1
 8007562:	2300      	moveq	r3, #0
 8007564:	b2db      	uxtb	r3, r3
 8007566:	e022      	b.n	80075ae <HAL_TIM_PWM_Start+0x6a>
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	2b04      	cmp	r3, #4
 800756c:	d109      	bne.n	8007582 <HAL_TIM_PWM_Start+0x3e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007574:	b2db      	uxtb	r3, r3
 8007576:	2b01      	cmp	r3, #1
 8007578:	bf14      	ite	ne
 800757a:	2301      	movne	r3, #1
 800757c:	2300      	moveq	r3, #0
 800757e:	b2db      	uxtb	r3, r3
 8007580:	e015      	b.n	80075ae <HAL_TIM_PWM_Start+0x6a>
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	2b08      	cmp	r3, #8
 8007586:	d109      	bne.n	800759c <HAL_TIM_PWM_Start+0x58>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800758e:	b2db      	uxtb	r3, r3
 8007590:	2b01      	cmp	r3, #1
 8007592:	bf14      	ite	ne
 8007594:	2301      	movne	r3, #1
 8007596:	2300      	moveq	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	e008      	b.n	80075ae <HAL_TIM_PWM_Start+0x6a>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	bf14      	ite	ne
 80075a8:	2301      	movne	r3, #1
 80075aa:	2300      	moveq	r3, #0
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e068      	b.n	8007688 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d104      	bne.n	80075c6 <HAL_TIM_PWM_Start+0x82>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2202      	movs	r2, #2
 80075c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075c4:	e013      	b.n	80075ee <HAL_TIM_PWM_Start+0xaa>
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	2b04      	cmp	r3, #4
 80075ca:	d104      	bne.n	80075d6 <HAL_TIM_PWM_Start+0x92>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075d4:	e00b      	b.n	80075ee <HAL_TIM_PWM_Start+0xaa>
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	2b08      	cmp	r3, #8
 80075da:	d104      	bne.n	80075e6 <HAL_TIM_PWM_Start+0xa2>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2202      	movs	r2, #2
 80075e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075e4:	e003      	b.n	80075ee <HAL_TIM_PWM_Start+0xaa>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2202      	movs	r2, #2
 80075ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2201      	movs	r2, #1
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f001 f9ea 	bl	80089d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a23      	ldr	r2, [pc, #140]	; (8007690 <HAL_TIM_PWM_Start+0x14c>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d107      	bne.n	8007616 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a1d      	ldr	r2, [pc, #116]	; (8007690 <HAL_TIM_PWM_Start+0x14c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d018      	beq.n	8007652 <HAL_TIM_PWM_Start+0x10e>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007628:	d013      	beq.n	8007652 <HAL_TIM_PWM_Start+0x10e>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a19      	ldr	r2, [pc, #100]	; (8007694 <HAL_TIM_PWM_Start+0x150>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d00e      	beq.n	8007652 <HAL_TIM_PWM_Start+0x10e>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a17      	ldr	r2, [pc, #92]	; (8007698 <HAL_TIM_PWM_Start+0x154>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d009      	beq.n	8007652 <HAL_TIM_PWM_Start+0x10e>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a16      	ldr	r2, [pc, #88]	; (800769c <HAL_TIM_PWM_Start+0x158>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <HAL_TIM_PWM_Start+0x10e>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <HAL_TIM_PWM_Start+0x15c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d111      	bne.n	8007676 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2b06      	cmp	r3, #6
 8007662:	d010      	beq.n	8007686 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f042 0201 	orr.w	r2, r2, #1
 8007672:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007674:	e007      	b.n	8007686 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f042 0201 	orr.w	r2, r2, #1
 8007684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007686:	2300      	movs	r3, #0
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	40010000 	.word	0x40010000
 8007694:	40000400 	.word	0x40000400
 8007698:	40000800 	.word	0x40000800
 800769c:	40000c00 	.word	0x40000c00
 80076a0:	40014000 	.word	0x40014000

080076a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d101      	bne.n	80076b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e041      	b.n	800773a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076bc:	b2db      	uxtb	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f839 	bl	8007742 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4610      	mov	r0, r2
 80076e4:	f000 fdb0 	bl	8008248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2201      	movs	r2, #1
 800771c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_TIM_IC_Start+0x1a>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800776e:	b2db      	uxtb	r3, r3
 8007770:	e013      	b.n	800779a <HAL_TIM_IC_Start+0x42>
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d104      	bne.n	8007782 <HAL_TIM_IC_Start+0x2a>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800777e:	b2db      	uxtb	r3, r3
 8007780:	e00b      	b.n	800779a <HAL_TIM_IC_Start+0x42>
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	2b08      	cmp	r3, #8
 8007786:	d104      	bne.n	8007792 <HAL_TIM_IC_Start+0x3a>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800778e:	b2db      	uxtb	r3, r3
 8007790:	e003      	b.n	800779a <HAL_TIM_IC_Start+0x42>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007798:	b2db      	uxtb	r3, r3
 800779a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d104      	bne.n	80077ac <HAL_TIM_IC_Start+0x54>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	e013      	b.n	80077d4 <HAL_TIM_IC_Start+0x7c>
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	d104      	bne.n	80077bc <HAL_TIM_IC_Start+0x64>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	e00b      	b.n	80077d4 <HAL_TIM_IC_Start+0x7c>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d104      	bne.n	80077cc <HAL_TIM_IC_Start+0x74>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	e003      	b.n	80077d4 <HAL_TIM_IC_Start+0x7c>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80077d6:	7bfb      	ldrb	r3, [r7, #15]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d102      	bne.n	80077e2 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d001      	beq.n	80077e6 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e077      	b.n	80078d6 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d104      	bne.n	80077f6 <HAL_TIM_IC_Start+0x9e>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2202      	movs	r2, #2
 80077f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80077f4:	e013      	b.n	800781e <HAL_TIM_IC_Start+0xc6>
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b04      	cmp	r3, #4
 80077fa:	d104      	bne.n	8007806 <HAL_TIM_IC_Start+0xae>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007804:	e00b      	b.n	800781e <HAL_TIM_IC_Start+0xc6>
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b08      	cmp	r3, #8
 800780a:	d104      	bne.n	8007816 <HAL_TIM_IC_Start+0xbe>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2202      	movs	r2, #2
 8007810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007814:	e003      	b.n	800781e <HAL_TIM_IC_Start+0xc6>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d104      	bne.n	800782e <HAL_TIM_IC_Start+0xd6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800782c:	e013      	b.n	8007856 <HAL_TIM_IC_Start+0xfe>
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b04      	cmp	r3, #4
 8007832:	d104      	bne.n	800783e <HAL_TIM_IC_Start+0xe6>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800783c:	e00b      	b.n	8007856 <HAL_TIM_IC_Start+0xfe>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b08      	cmp	r3, #8
 8007842:	d104      	bne.n	800784e <HAL_TIM_IC_Start+0xf6>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2202      	movs	r2, #2
 8007848:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800784c:	e003      	b.n	8007856 <HAL_TIM_IC_Start+0xfe>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2202      	movs	r2, #2
 8007852:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2201      	movs	r2, #1
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	4618      	mov	r0, r3
 8007860:	f001 f8b6 	bl	80089d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <HAL_TIM_IC_Start+0x188>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d018      	beq.n	80078a0 <HAL_TIM_IC_Start+0x148>
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007876:	d013      	beq.n	80078a0 <HAL_TIM_IC_Start+0x148>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a19      	ldr	r2, [pc, #100]	; (80078e4 <HAL_TIM_IC_Start+0x18c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d00e      	beq.n	80078a0 <HAL_TIM_IC_Start+0x148>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <HAL_TIM_IC_Start+0x190>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d009      	beq.n	80078a0 <HAL_TIM_IC_Start+0x148>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a16      	ldr	r2, [pc, #88]	; (80078ec <HAL_TIM_IC_Start+0x194>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d004      	beq.n	80078a0 <HAL_TIM_IC_Start+0x148>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	4a15      	ldr	r2, [pc, #84]	; (80078f0 <HAL_TIM_IC_Start+0x198>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d111      	bne.n	80078c4 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b06      	cmp	r3, #6
 80078b0:	d010      	beq.n	80078d4 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0201 	orr.w	r2, r2, #1
 80078c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078c2:	e007      	b.n	80078d4 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f042 0201 	orr.w	r2, r2, #1
 80078d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	40010000 	.word	0x40010000
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40014000 	.word	0x40014000

080078f4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d104      	bne.n	8007912 <HAL_TIM_IC_Start_IT+0x1e>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800790e:	b2db      	uxtb	r3, r3
 8007910:	e013      	b.n	800793a <HAL_TIM_IC_Start_IT+0x46>
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b04      	cmp	r3, #4
 8007916:	d104      	bne.n	8007922 <HAL_TIM_IC_Start_IT+0x2e>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800791e:	b2db      	uxtb	r3, r3
 8007920:	e00b      	b.n	800793a <HAL_TIM_IC_Start_IT+0x46>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2b08      	cmp	r3, #8
 8007926:	d104      	bne.n	8007932 <HAL_TIM_IC_Start_IT+0x3e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800792e:	b2db      	uxtb	r3, r3
 8007930:	e003      	b.n	800793a <HAL_TIM_IC_Start_IT+0x46>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007938:	b2db      	uxtb	r3, r3
 800793a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d104      	bne.n	800794c <HAL_TIM_IC_Start_IT+0x58>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007948:	b2db      	uxtb	r3, r3
 800794a:	e013      	b.n	8007974 <HAL_TIM_IC_Start_IT+0x80>
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2b04      	cmp	r3, #4
 8007950:	d104      	bne.n	800795c <HAL_TIM_IC_Start_IT+0x68>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007958:	b2db      	uxtb	r3, r3
 800795a:	e00b      	b.n	8007974 <HAL_TIM_IC_Start_IT+0x80>
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	2b08      	cmp	r3, #8
 8007960:	d104      	bne.n	800796c <HAL_TIM_IC_Start_IT+0x78>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007968:	b2db      	uxtb	r3, r3
 800796a:	e003      	b.n	8007974 <HAL_TIM_IC_Start_IT+0x80>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007972:	b2db      	uxtb	r3, r3
 8007974:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b01      	cmp	r3, #1
 800797a:	d102      	bne.n	8007982 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800797c:	7b7b      	ldrb	r3, [r7, #13]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d001      	beq.n	8007986 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e0c2      	b.n	8007b0c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d104      	bne.n	8007996 <HAL_TIM_IC_Start_IT+0xa2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007994:	e013      	b.n	80079be <HAL_TIM_IC_Start_IT+0xca>
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	2b04      	cmp	r3, #4
 800799a:	d104      	bne.n	80079a6 <HAL_TIM_IC_Start_IT+0xb2>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2202      	movs	r2, #2
 80079a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079a4:	e00b      	b.n	80079be <HAL_TIM_IC_Start_IT+0xca>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d104      	bne.n	80079b6 <HAL_TIM_IC_Start_IT+0xc2>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2202      	movs	r2, #2
 80079b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079b4:	e003      	b.n	80079be <HAL_TIM_IC_Start_IT+0xca>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2202      	movs	r2, #2
 80079ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <HAL_TIM_IC_Start_IT+0xda>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2202      	movs	r2, #2
 80079c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079cc:	e013      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x102>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b04      	cmp	r3, #4
 80079d2:	d104      	bne.n	80079de <HAL_TIM_IC_Start_IT+0xea>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079dc:	e00b      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x102>
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	2b08      	cmp	r3, #8
 80079e2:	d104      	bne.n	80079ee <HAL_TIM_IC_Start_IT+0xfa>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079ec:	e003      	b.n	80079f6 <HAL_TIM_IC_Start_IT+0x102>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2202      	movs	r2, #2
 80079f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	2b0c      	cmp	r3, #12
 80079fa:	d841      	bhi.n	8007a80 <HAL_TIM_IC_Start_IT+0x18c>
 80079fc:	a201      	add	r2, pc, #4	; (adr r2, 8007a04 <HAL_TIM_IC_Start_IT+0x110>)
 80079fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a02:	bf00      	nop
 8007a04:	08007a39 	.word	0x08007a39
 8007a08:	08007a81 	.word	0x08007a81
 8007a0c:	08007a81 	.word	0x08007a81
 8007a10:	08007a81 	.word	0x08007a81
 8007a14:	08007a4b 	.word	0x08007a4b
 8007a18:	08007a81 	.word	0x08007a81
 8007a1c:	08007a81 	.word	0x08007a81
 8007a20:	08007a81 	.word	0x08007a81
 8007a24:	08007a5d 	.word	0x08007a5d
 8007a28:	08007a81 	.word	0x08007a81
 8007a2c:	08007a81 	.word	0x08007a81
 8007a30:	08007a81 	.word	0x08007a81
 8007a34:	08007a6f 	.word	0x08007a6f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68da      	ldr	r2, [r3, #12]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0202 	orr.w	r2, r2, #2
 8007a46:	60da      	str	r2, [r3, #12]
      break;
 8007a48:	e01d      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68da      	ldr	r2, [r3, #12]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0204 	orr.w	r2, r2, #4
 8007a58:	60da      	str	r2, [r3, #12]
      break;
 8007a5a:	e014      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	68da      	ldr	r2, [r3, #12]
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f042 0208 	orr.w	r2, r2, #8
 8007a6a:	60da      	str	r2, [r3, #12]
      break;
 8007a6c:	e00b      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68da      	ldr	r2, [r3, #12]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f042 0210 	orr.w	r2, r2, #16
 8007a7c:	60da      	str	r2, [r3, #12]
      break;
 8007a7e:	e002      	b.n	8007a86 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	73fb      	strb	r3, [r7, #15]
      break;
 8007a84:	bf00      	nop
  }

  if (status == HAL_OK)
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d13e      	bne.n	8007b0a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2201      	movs	r2, #1
 8007a92:	6839      	ldr	r1, [r7, #0]
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 ff9b 	bl	80089d0 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <HAL_TIM_IC_Start_IT+0x220>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d018      	beq.n	8007ad6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aac:	d013      	beq.n	8007ad6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <HAL_TIM_IC_Start_IT+0x224>)
 8007ab4:	4293      	cmp	r3, r2
 8007ab6:	d00e      	beq.n	8007ad6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a17      	ldr	r2, [pc, #92]	; (8007b1c <HAL_TIM_IC_Start_IT+0x228>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d009      	beq.n	8007ad6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a16      	ldr	r2, [pc, #88]	; (8007b20 <HAL_TIM_IC_Start_IT+0x22c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d004      	beq.n	8007ad6 <HAL_TIM_IC_Start_IT+0x1e2>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a14      	ldr	r2, [pc, #80]	; (8007b24 <HAL_TIM_IC_Start_IT+0x230>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d111      	bne.n	8007afa <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0307 	and.w	r3, r3, #7
 8007ae0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b06      	cmp	r3, #6
 8007ae6:	d010      	beq.n	8007b0a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af8:	e007      	b.n	8007b0a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f042 0201 	orr.w	r2, r2, #1
 8007b08:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	40010000 	.word	0x40010000
 8007b18:	40000400 	.word	0x40000400
 8007b1c:	40000800 	.word	0x40000800
 8007b20:	40000c00 	.word	0x40000c00
 8007b24:	40014000 	.word	0x40014000

08007b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d122      	bne.n	8007b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d11b      	bne.n	8007b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0202 	mvn.w	r2, #2
 8007b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7f9 fd64 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 8007b70:	e005      	b.n	8007b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fb4a 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fb51 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d122      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d11b      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f06f 0204 	mvn.w	r2, #4
 8007ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2202      	movs	r2, #2
 8007bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7f9 fd3a 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 8007bc4:	e005      	b.n	8007bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fb20 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fb27 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d122      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d11b      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0208 	mvn.w	r2, #8
 8007bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2204      	movs	r2, #4
 8007c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7f9 fd10 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 8007c18:	e005      	b.n	8007c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 faf6 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fafd 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d122      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d11b      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0210 	mvn.w	r2, #16
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2208      	movs	r2, #8
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f7f9 fce6 	bl	8001638 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 facc 	bl	800820c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fad3 	bl	8008220 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d10e      	bne.n	8007cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d107      	bne.n	8007cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0201 	mvn.w	r2, #1
 8007ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7f9 fbe4 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc4:	2b80      	cmp	r3, #128	; 0x80
 8007cc6:	d107      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 ff1a 	bl	8008b0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d10e      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b40      	cmp	r3, #64	; 0x40
 8007cf2:	d107      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fa98 	bl	8008234 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d10e      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d107      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0220 	mvn.w	r2, #32
 8007d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fee4 	bl	8008af8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e088      	b.n	8007e68 <HAL_TIM_IC_ConfigChannel+0x130>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11b      	bne.n	8007d9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6819      	ldr	r1, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f000 fc74 	bl	8008660 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 020c 	bic.w	r2, r2, #12
 8007d86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6999      	ldr	r1, [r3, #24]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	619a      	str	r2, [r3, #24]
 8007d9a:	e060      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d11c      	bne.n	8007ddc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f000 fcec 	bl	800878e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699a      	ldr	r2, [r3, #24]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6999      	ldr	r1, [r3, #24]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	021a      	lsls	r2, r3, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	619a      	str	r2, [r3, #24]
 8007dda:	e040      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d11b      	bne.n	8007e1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6819      	ldr	r1, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f000 fd39 	bl	8008868 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 020c 	bic.w	r2, r2, #12
 8007e04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	61da      	str	r2, [r3, #28]
 8007e18:	e021      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b0c      	cmp	r3, #12
 8007e1e:	d11c      	bne.n	8007e5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	6819      	ldr	r1, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f000 fd56 	bl	80088e0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69da      	ldr	r2, [r3, #28]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69d9      	ldr	r1, [r3, #28]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	021a      	lsls	r2, r3, #8
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	61da      	str	r2, [r3, #28]
 8007e58:	e001      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e86:	2b01      	cmp	r3, #1
 8007e88:	d101      	bne.n	8007e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	e0ae      	b.n	8007fec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b0c      	cmp	r3, #12
 8007e9a:	f200 809f 	bhi.w	8007fdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea4:	08007ed9 	.word	0x08007ed9
 8007ea8:	08007fdd 	.word	0x08007fdd
 8007eac:	08007fdd 	.word	0x08007fdd
 8007eb0:	08007fdd 	.word	0x08007fdd
 8007eb4:	08007f19 	.word	0x08007f19
 8007eb8:	08007fdd 	.word	0x08007fdd
 8007ebc:	08007fdd 	.word	0x08007fdd
 8007ec0:	08007fdd 	.word	0x08007fdd
 8007ec4:	08007f5b 	.word	0x08007f5b
 8007ec8:	08007fdd 	.word	0x08007fdd
 8007ecc:	08007fdd 	.word	0x08007fdd
 8007ed0:	08007fdd 	.word	0x08007fdd
 8007ed4:	08007f9b 	.word	0x08007f9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 fa32 	bl	8008348 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f042 0208 	orr.w	r2, r2, #8
 8007ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f022 0204 	bic.w	r2, r2, #4
 8007f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6999      	ldr	r1, [r3, #24]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	691a      	ldr	r2, [r3, #16]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	430a      	orrs	r2, r1
 8007f14:	619a      	str	r2, [r3, #24]
      break;
 8007f16:	e064      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68b9      	ldr	r1, [r7, #8]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 fa78 	bl	8008414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	699a      	ldr	r2, [r3, #24]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	6999      	ldr	r1, [r3, #24]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	021a      	lsls	r2, r3, #8
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	619a      	str	r2, [r3, #24]
      break;
 8007f58:	e043      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fac3 	bl	80084ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0208 	orr.w	r2, r2, #8
 8007f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0204 	bic.w	r2, r2, #4
 8007f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69d9      	ldr	r1, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	61da      	str	r2, [r3, #28]
      break;
 8007f98:	e023      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68b9      	ldr	r1, [r7, #8]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f000 fb0d 	bl	80085c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69da      	ldr	r2, [r3, #28]
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69d9      	ldr	r1, [r3, #28]
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	021a      	lsls	r2, r3, #8
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	61da      	str	r2, [r3, #28]
      break;
 8007fda:	e002      	b.n	8007fe2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_TIM_ConfigClockSource+0x1c>
 800800c:	2302      	movs	r3, #2
 800800e:	e0b4      	b.n	800817a <HAL_TIM_ConfigClockSource+0x186>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2201      	movs	r2, #1
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800802e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008030:	68bb      	ldr	r3, [r7, #8]
 8008032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008048:	d03e      	beq.n	80080c8 <HAL_TIM_ConfigClockSource+0xd4>
 800804a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800804e:	f200 8087 	bhi.w	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008056:	f000 8086 	beq.w	8008166 <HAL_TIM_ConfigClockSource+0x172>
 800805a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800805e:	d87f      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008060:	2b70      	cmp	r3, #112	; 0x70
 8008062:	d01a      	beq.n	800809a <HAL_TIM_ConfigClockSource+0xa6>
 8008064:	2b70      	cmp	r3, #112	; 0x70
 8008066:	d87b      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008068:	2b60      	cmp	r3, #96	; 0x60
 800806a:	d050      	beq.n	800810e <HAL_TIM_ConfigClockSource+0x11a>
 800806c:	2b60      	cmp	r3, #96	; 0x60
 800806e:	d877      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008070:	2b50      	cmp	r3, #80	; 0x50
 8008072:	d03c      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0xfa>
 8008074:	2b50      	cmp	r3, #80	; 0x50
 8008076:	d873      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d058      	beq.n	800812e <HAL_TIM_ConfigClockSource+0x13a>
 800807c:	2b40      	cmp	r3, #64	; 0x40
 800807e:	d86f      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008080:	2b30      	cmp	r3, #48	; 0x30
 8008082:	d064      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008084:	2b30      	cmp	r3, #48	; 0x30
 8008086:	d86b      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008088:	2b20      	cmp	r3, #32
 800808a:	d060      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 800808c:	2b20      	cmp	r3, #32
 800808e:	d867      	bhi.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d05c      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008094:	2b10      	cmp	r3, #16
 8008096:	d05a      	beq.n	800814e <HAL_TIM_ConfigClockSource+0x15a>
 8008098:	e062      	b.n	8008160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	6899      	ldr	r1, [r3, #8]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685a      	ldr	r2, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	f000 fc71 	bl	8008990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	609a      	str	r2, [r3, #8]
      break;
 80080c6:	e04f      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	6899      	ldr	r1, [r3, #8]
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	f000 fc5a 	bl	8008990 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	689a      	ldr	r2, [r3, #8]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80080ea:	609a      	str	r2, [r3, #8]
      break;
 80080ec:	e03c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6818      	ldr	r0, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	6859      	ldr	r1, [r3, #4]
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	461a      	mov	r2, r3
 80080fc:	f000 fb18 	bl	8008730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	2150      	movs	r1, #80	; 0x50
 8008106:	4618      	mov	r0, r3
 8008108:	f000 fc27 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 800810c:	e02c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6818      	ldr	r0, [r3, #0]
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	6859      	ldr	r1, [r3, #4]
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	461a      	mov	r2, r3
 800811c:	f000 fb74 	bl	8008808 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2160      	movs	r1, #96	; 0x60
 8008126:	4618      	mov	r0, r3
 8008128:	f000 fc17 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 800812c:	e01c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6818      	ldr	r0, [r3, #0]
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	6859      	ldr	r1, [r3, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	461a      	mov	r2, r3
 800813c:	f000 faf8 	bl	8008730 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2140      	movs	r1, #64	; 0x40
 8008146:	4618      	mov	r0, r3
 8008148:	f000 fc07 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 800814c:	e00c      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4619      	mov	r1, r3
 8008158:	4610      	mov	r0, r2
 800815a:	f000 fbfe 	bl	800895a <TIM_ITRx_SetConfig>
      break;
 800815e:	e003      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	73fb      	strb	r3, [r7, #15]
      break;
 8008164:	e000      	b.n	8008168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008178:	7bfb      	ldrb	r3, [r7, #15]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008184:	b480      	push	{r7}
 8008186:	b085      	sub	sp, #20
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800818e:	2300      	movs	r3, #0
 8008190:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b0c      	cmp	r3, #12
 8008196:	d831      	bhi.n	80081fc <HAL_TIM_ReadCapturedValue+0x78>
 8008198:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <HAL_TIM_ReadCapturedValue+0x1c>)
 800819a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819e:	bf00      	nop
 80081a0:	080081d5 	.word	0x080081d5
 80081a4:	080081fd 	.word	0x080081fd
 80081a8:	080081fd 	.word	0x080081fd
 80081ac:	080081fd 	.word	0x080081fd
 80081b0:	080081df 	.word	0x080081df
 80081b4:	080081fd 	.word	0x080081fd
 80081b8:	080081fd 	.word	0x080081fd
 80081bc:	080081fd 	.word	0x080081fd
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081fd 	.word	0x080081fd
 80081c8:	080081fd 	.word	0x080081fd
 80081cc:	080081fd 	.word	0x080081fd
 80081d0:	080081f3 	.word	0x080081f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	60fb      	str	r3, [r7, #12]

      break;
 80081dc:	e00f      	b.n	80081fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e4:	60fb      	str	r3, [r7, #12]

      break;
 80081e6:	e00a      	b.n	80081fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ee:	60fb      	str	r3, [r7, #12]

      break;
 80081f0:	e005      	b.n	80081fe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	60fb      	str	r3, [r7, #12]

      break;
 80081fa:	e000      	b.n	80081fe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80081fc:	bf00      	nop
  }

  return tmpreg;
 80081fe:	68fb      	ldr	r3, [r7, #12]
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008214:	bf00      	nop
 8008216:	370c      	adds	r7, #12
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr

08008220 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008228:	bf00      	nop
 800822a:	370c      	adds	r7, #12
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr

08008234 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	4a34      	ldr	r2, [pc, #208]	; (800832c <TIM_Base_SetConfig+0xe4>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d00f      	beq.n	8008280 <TIM_Base_SetConfig+0x38>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008266:	d00b      	beq.n	8008280 <TIM_Base_SetConfig+0x38>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4a31      	ldr	r2, [pc, #196]	; (8008330 <TIM_Base_SetConfig+0xe8>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d007      	beq.n	8008280 <TIM_Base_SetConfig+0x38>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a30      	ldr	r2, [pc, #192]	; (8008334 <TIM_Base_SetConfig+0xec>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d003      	beq.n	8008280 <TIM_Base_SetConfig+0x38>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a2f      	ldr	r2, [pc, #188]	; (8008338 <TIM_Base_SetConfig+0xf0>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d108      	bne.n	8008292 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008286:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	4313      	orrs	r3, r2
 8008290:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a25      	ldr	r2, [pc, #148]	; (800832c <TIM_Base_SetConfig+0xe4>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d01b      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a0:	d017      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a22      	ldr	r2, [pc, #136]	; (8008330 <TIM_Base_SetConfig+0xe8>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d013      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	4a21      	ldr	r2, [pc, #132]	; (8008334 <TIM_Base_SetConfig+0xec>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d00f      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	4a20      	ldr	r2, [pc, #128]	; (8008338 <TIM_Base_SetConfig+0xf0>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d00b      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a1f      	ldr	r2, [pc, #124]	; (800833c <TIM_Base_SetConfig+0xf4>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d007      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a1e      	ldr	r2, [pc, #120]	; (8008340 <TIM_Base_SetConfig+0xf8>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d003      	beq.n	80082d2 <TIM_Base_SetConfig+0x8a>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4a1d      	ldr	r2, [pc, #116]	; (8008344 <TIM_Base_SetConfig+0xfc>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d108      	bne.n	80082e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	4313      	orrs	r3, r2
 80082f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	68fa      	ldr	r2, [r7, #12]
 80082f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	689a      	ldr	r2, [r3, #8]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a08      	ldr	r2, [pc, #32]	; (800832c <TIM_Base_SetConfig+0xe4>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d103      	bne.n	8008318 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	691a      	ldr	r2, [r3, #16]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	615a      	str	r2, [r3, #20]
}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	40010000 	.word	0x40010000
 8008330:	40000400 	.word	0x40000400
 8008334:	40000800 	.word	0x40000800
 8008338:	40000c00 	.word	0x40000c00
 800833c:	40014000 	.word	0x40014000
 8008340:	40014400 	.word	0x40014400
 8008344:	40014800 	.word	0x40014800

08008348 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008348:	b480      	push	{r7}
 800834a:	b087      	sub	sp, #28
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
 8008356:	f023 0201 	bic.w	r2, r3, #1
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4313      	orrs	r3, r2
 8008388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	f023 0302 	bic.w	r3, r3, #2
 8008390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a1c      	ldr	r2, [pc, #112]	; (8008410 <TIM_OC1_SetConfig+0xc8>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10c      	bne.n	80083be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 0308 	bic.w	r3, r3, #8
 80083aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083b6:	697b      	ldr	r3, [r7, #20]
 80083b8:	f023 0304 	bic.w	r3, r3, #4
 80083bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4a13      	ldr	r2, [pc, #76]	; (8008410 <TIM_OC1_SetConfig+0xc8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d111      	bne.n	80083ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	695b      	ldr	r3, [r3, #20]
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	4313      	orrs	r3, r2
 80083de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	693a      	ldr	r2, [r7, #16]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	685a      	ldr	r2, [r3, #4]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	697a      	ldr	r2, [r7, #20]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr
 8008410:	40010000 	.word	0x40010000

08008414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f023 0210 	bic.w	r2, r3, #16
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800844a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4313      	orrs	r3, r2
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	f023 0320 	bic.w	r3, r3, #32
 800845e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	011b      	lsls	r3, r3, #4
 8008466:	697a      	ldr	r2, [r7, #20]
 8008468:	4313      	orrs	r3, r2
 800846a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a1e      	ldr	r2, [pc, #120]	; (80084e8 <TIM_OC2_SetConfig+0xd4>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d10d      	bne.n	8008490 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	68db      	ldr	r3, [r3, #12]
 8008480:	011b      	lsls	r3, r3, #4
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800848e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <TIM_OC2_SetConfig+0xd4>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d113      	bne.n	80084c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800849e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	4313      	orrs	r3, r2
 80084b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	699b      	ldr	r3, [r3, #24]
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	693a      	ldr	r2, [r7, #16]
 80084bc:	4313      	orrs	r3, r2
 80084be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	693a      	ldr	r2, [r7, #16]
 80084c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40010000 	.word	0x40010000

080084ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	69db      	ldr	r3, [r3, #28]
 8008512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f023 0303 	bic.w	r3, r3, #3
 8008522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	021b      	lsls	r3, r3, #8
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <TIM_OC3_SetConfig+0xd0>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d10d      	bne.n	8008566 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	68db      	ldr	r3, [r3, #12]
 8008556:	021b      	lsls	r3, r3, #8
 8008558:	697a      	ldr	r2, [r7, #20]
 800855a:	4313      	orrs	r3, r2
 800855c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	4a14      	ldr	r2, [pc, #80]	; (80085bc <TIM_OC3_SetConfig+0xd0>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d113      	bne.n	8008596 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008576:	693b      	ldr	r3, [r7, #16]
 8008578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800857c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	693a      	ldr	r2, [r7, #16]
 8008586:	4313      	orrs	r3, r2
 8008588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	011b      	lsls	r3, r3, #4
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	40010000 	.word	0x40010000

080085c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	69db      	ldr	r3, [r3, #28]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	021b      	lsls	r3, r3, #8
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800860a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	031b      	lsls	r3, r3, #12
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	4313      	orrs	r3, r2
 8008616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a10      	ldr	r2, [pc, #64]	; (800865c <TIM_OC4_SetConfig+0x9c>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d109      	bne.n	8008634 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	019b      	lsls	r3, r3, #6
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	4313      	orrs	r3, r2
 8008632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	697a      	ldr	r2, [r7, #20]
 8008638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	685a      	ldr	r2, [r3, #4]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	621a      	str	r2, [r3, #32]
}
 800864e:	bf00      	nop
 8008650:	371c      	adds	r7, #28
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40010000 	.word	0x40010000

08008660 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008660:	b480      	push	{r7}
 8008662:	b087      	sub	sp, #28
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f023 0201 	bic.w	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	6a1b      	ldr	r3, [r3, #32]
 8008684:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	4a24      	ldr	r2, [pc, #144]	; (800871c <TIM_TI1_SetConfig+0xbc>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d013      	beq.n	80086b6 <TIM_TI1_SetConfig+0x56>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008694:	d00f      	beq.n	80086b6 <TIM_TI1_SetConfig+0x56>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	4a21      	ldr	r2, [pc, #132]	; (8008720 <TIM_TI1_SetConfig+0xc0>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d00b      	beq.n	80086b6 <TIM_TI1_SetConfig+0x56>
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a20      	ldr	r2, [pc, #128]	; (8008724 <TIM_TI1_SetConfig+0xc4>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d007      	beq.n	80086b6 <TIM_TI1_SetConfig+0x56>
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4a1f      	ldr	r2, [pc, #124]	; (8008728 <TIM_TI1_SetConfig+0xc8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d003      	beq.n	80086b6 <TIM_TI1_SetConfig+0x56>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4a1e      	ldr	r2, [pc, #120]	; (800872c <TIM_TI1_SetConfig+0xcc>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d101      	bne.n	80086ba <TIM_TI1_SetConfig+0x5a>
 80086b6:	2301      	movs	r3, #1
 80086b8:	e000      	b.n	80086bc <TIM_TI1_SetConfig+0x5c>
 80086ba:	2300      	movs	r3, #0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d008      	beq.n	80086d2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f023 0303 	bic.w	r3, r3, #3
 80086c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80086c8:	697a      	ldr	r2, [r7, #20]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e003      	b.n	80086da <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	f043 0301 	orr.w	r3, r3, #1
 80086d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	011b      	lsls	r3, r3, #4
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	4313      	orrs	r3, r2
 80086ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	f023 030a 	bic.w	r3, r3, #10
 80086f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f003 030a 	and.w	r3, r3, #10
 80086fc:	693a      	ldr	r2, [r7, #16]
 80086fe:	4313      	orrs	r3, r2
 8008700:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	693a      	ldr	r2, [r7, #16]
 800870c:	621a      	str	r2, [r3, #32]
}
 800870e:	bf00      	nop
 8008710:	371c      	adds	r7, #28
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	40010000 	.word	0x40010000
 8008720:	40000400 	.word	0x40000400
 8008724:	40000800 	.word	0x40000800
 8008728:	40000c00 	.word	0x40000c00
 800872c:	40014000 	.word	0x40014000

08008730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	6a1b      	ldr	r3, [r3, #32]
 8008740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	f023 0201 	bic.w	r2, r3, #1
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	699b      	ldr	r3, [r3, #24]
 8008752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800875a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	4313      	orrs	r3, r2
 8008764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	f023 030a 	bic.w	r3, r3, #10
 800876c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	4313      	orrs	r3, r2
 8008774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	697a      	ldr	r2, [r7, #20]
 8008780:	621a      	str	r2, [r3, #32]
}
 8008782:	bf00      	nop
 8008784:	371c      	adds	r7, #28
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800878e:	b480      	push	{r7}
 8008790:	b087      	sub	sp, #28
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	607a      	str	r2, [r7, #4]
 800879a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	f023 0210 	bic.w	r2, r3, #16
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	699b      	ldr	r3, [r3, #24]
 80087ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ba:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	021b      	lsls	r3, r3, #8
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	031b      	lsls	r3, r3, #12
 80087d2:	b29b      	uxth	r3, r3
 80087d4:	697a      	ldr	r2, [r7, #20]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	011b      	lsls	r3, r3, #4
 80087e6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	697a      	ldr	r2, [r7, #20]
 80087f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	693a      	ldr	r2, [r7, #16]
 80087fa:	621a      	str	r2, [r3, #32]
}
 80087fc:	bf00      	nop
 80087fe:	371c      	adds	r7, #28
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008808:	b480      	push	{r7}
 800880a:	b087      	sub	sp, #28
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6a1b      	ldr	r3, [r3, #32]
 8008818:	f023 0210 	bic.w	r2, r3, #16
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	699b      	ldr	r3, [r3, #24]
 8008824:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a1b      	ldr	r3, [r3, #32]
 800882a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	031b      	lsls	r3, r3, #12
 8008838:	697a      	ldr	r2, [r7, #20]
 800883a:	4313      	orrs	r3, r2
 800883c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008844:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	011b      	lsls	r3, r3, #4
 800884a:	693a      	ldr	r2, [r7, #16]
 800884c:	4313      	orrs	r3, r2
 800884e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	693a      	ldr	r2, [r7, #16]
 800885a:	621a      	str	r2, [r3, #32]
}
 800885c:	bf00      	nop
 800885e:	371c      	adds	r7, #28
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f023 0303 	bic.w	r3, r3, #3
 8008894:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008896:	697a      	ldr	r2, [r7, #20]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4313      	orrs	r3, r2
 800889c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80088a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	011b      	lsls	r3, r3, #4
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80088b8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80088c2:	693a      	ldr	r2, [r7, #16]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	697a      	ldr	r2, [r7, #20]
 80088cc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	693a      	ldr	r2, [r7, #16]
 80088d2:	621a      	str	r2, [r3, #32]
}
 80088d4:	bf00      	nop
 80088d6:	371c      	adds	r7, #28
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
 80088ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	69db      	ldr	r3, [r3, #28]
 80088fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800890c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	4313      	orrs	r3, r2
 8008916:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800891e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	031b      	lsls	r3, r3, #12
 8008924:	b29b      	uxth	r3, r3
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4313      	orrs	r3, r2
 800892a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008932:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	031b      	lsls	r3, r3, #12
 8008938:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800893c:	693a      	ldr	r2, [r7, #16]
 800893e:	4313      	orrs	r3, r2
 8008940:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	697a      	ldr	r2, [r7, #20]
 8008946:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	621a      	str	r2, [r3, #32]
}
 800894e:	bf00      	nop
 8008950:	371c      	adds	r7, #28
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr

0800895a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800895a:	b480      	push	{r7}
 800895c:	b085      	sub	sp, #20
 800895e:	af00      	add	r7, sp, #0
 8008960:	6078      	str	r0, [r7, #4]
 8008962:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008972:	683a      	ldr	r2, [r7, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4313      	orrs	r3, r2
 8008978:	f043 0307 	orr.w	r3, r3, #7
 800897c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	609a      	str	r2, [r3, #8]
}
 8008984:	bf00      	nop
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	607a      	str	r2, [r7, #4]
 800899c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	021a      	lsls	r2, r3, #8
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	431a      	orrs	r2, r3
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	697a      	ldr	r2, [r7, #20]
 80089ba:	4313      	orrs	r3, r2
 80089bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	609a      	str	r2, [r3, #8]
}
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b087      	sub	sp, #28
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 031f 	and.w	r3, r3, #31
 80089e2:	2201      	movs	r2, #1
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1a      	ldr	r2, [r3, #32]
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	43db      	mvns	r3, r3
 80089f2:	401a      	ands	r2, r3
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a1a      	ldr	r2, [r3, #32]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	f003 031f 	and.w	r3, r3, #31
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	fa01 f303 	lsl.w	r3, r1, r3
 8008a08:	431a      	orrs	r2, r3
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	621a      	str	r2, [r3, #32]
}
 8008a0e:	bf00      	nop
 8008a10:	371c      	adds	r7, #28
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
	...

08008a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	d101      	bne.n	8008a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008a30:	2302      	movs	r3, #2
 8008a32:	e050      	b.n	8008ad6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2201      	movs	r2, #1
 8008a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	2202      	movs	r2, #2
 8008a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a1c      	ldr	r2, [pc, #112]	; (8008ae4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d018      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a80:	d013      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a18      	ldr	r2, [pc, #96]	; (8008ae8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d00e      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a16      	ldr	r2, [pc, #88]	; (8008aec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d009      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a13      	ldr	r2, [pc, #76]	; (8008af4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d10c      	bne.n	8008ac4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68ba      	ldr	r2, [r7, #8]
 8008ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40000400 	.word	0x40000400
 8008aec:	40000800 	.word	0x40000800
 8008af0:	40000c00 	.word	0x40000c00
 8008af4:	40014000 	.word	0x40014000

08008af8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b00:	bf00      	nop
 8008b02:	370c      	adds	r7, #12
 8008b04:	46bd      	mov	sp, r7
 8008b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0a:	4770      	bx	lr

08008b0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b14:	bf00      	nop
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b082      	sub	sp, #8
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d101      	bne.n	8008b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e03f      	b.n	8008bb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d106      	bne.n	8008b4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7f9 fc64 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2224      	movs	r2, #36	; 0x24
 8008b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b64:	6878      	ldr	r0, [r7, #4]
 8008b66:	f000 fe2b 	bl	80097c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	695a      	ldr	r2, [r3, #20]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68da      	ldr	r2, [r3, #12]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2220      	movs	r2, #32
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bb0:	2300      	movs	r3, #0
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	60f8      	str	r0, [r7, #12]
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008bce:	b2db      	uxtb	r3, r3
 8008bd0:	2b20      	cmp	r3, #32
 8008bd2:	d11d      	bne.n	8008c10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d002      	beq.n	8008be0 <HAL_UART_Receive_IT+0x26>
 8008bda:	88fb      	ldrh	r3, [r7, #6]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d101      	bne.n	8008be4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e016      	b.n	8008c12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_UART_Receive_IT+0x38>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e00f      	b.n	8008c12 <HAL_UART_Receive_IT+0x58>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008c00:	88fb      	ldrh	r3, [r7, #6]
 8008c02:	461a      	mov	r2, r3
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 fbd9 	bl	80093be <UART_Start_Receive_IT>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	e000      	b.n	8008c12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c10:	2302      	movs	r3, #2
  }
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b08c      	sub	sp, #48	; 0x30
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4613      	mov	r3, r2
 8008c28:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d165      	bne.n	8008d02 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d002      	beq.n	8008c42 <HAL_UART_Transmit_DMA+0x26>
 8008c3c:	88fb      	ldrh	r3, [r7, #6]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e05e      	b.n	8008d04 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d101      	bne.n	8008c54 <HAL_UART_Transmit_DMA+0x38>
 8008c50:	2302      	movs	r3, #2
 8008c52:	e057      	b.n	8008d04 <HAL_UART_Transmit_DMA+0xe8>
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008c5c:	68ba      	ldr	r2, [r7, #8]
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	88fa      	ldrh	r2, [r7, #6]
 8008c66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	88fa      	ldrh	r2, [r7, #6]
 8008c6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2221      	movs	r2, #33	; 0x21
 8008c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c80:	4a22      	ldr	r2, [pc, #136]	; (8008d0c <HAL_UART_Transmit_DMA+0xf0>)
 8008c82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c88:	4a21      	ldr	r2, [pc, #132]	; (8008d10 <HAL_UART_Transmit_DMA+0xf4>)
 8008c8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	4a20      	ldr	r2, [pc, #128]	; (8008d14 <HAL_UART_Transmit_DMA+0xf8>)
 8008c92:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c98:	2200      	movs	r2, #0
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008c9c:	f107 0308 	add.w	r3, r7, #8
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ca8:	6819      	ldr	r1, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3304      	adds	r3, #4
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	88fb      	ldrh	r3, [r7, #6]
 8008cb4:	f7f9 ffb0 	bl	8002c18 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008cc0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	3314      	adds	r3, #20
 8008cd0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	e853 3f00 	ldrex	r3, [r3]
 8008cd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3314      	adds	r3, #20
 8008ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008cea:	627a      	str	r2, [r7, #36]	; 0x24
 8008cec:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cee:	6a39      	ldr	r1, [r7, #32]
 8008cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e5      	bne.n	8008cca <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e000      	b.n	8008d04 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008d02:	2302      	movs	r3, #2
  }
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3730      	adds	r7, #48	; 0x30
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	08009275 	.word	0x08009275
 8008d10:	0800930f 	.word	0x0800930f
 8008d14:	0800932b 	.word	0x0800932b

08008d18 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b0ba      	sub	sp, #232	; 0xe8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	695b      	ldr	r3, [r3, #20]
 8008d3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d4e:	f003 030f 	and.w	r3, r3, #15
 8008d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008d56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d10f      	bne.n	8008d7e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d62:	f003 0320 	and.w	r3, r3, #32
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d009      	beq.n	8008d7e <HAL_UART_IRQHandler+0x66>
 8008d6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d6e:	f003 0320 	and.w	r3, r3, #32
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 fc66 	bl	8009648 <UART_Receive_IT>
      return;
 8008d7c:	e256      	b.n	800922c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 80de 	beq.w	8008f44 <HAL_UART_IRQHandler+0x22c>
 8008d88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d8c:	f003 0301 	and.w	r3, r3, #1
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d106      	bne.n	8008da2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d98:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 80d1 	beq.w	8008f44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00b      	beq.n	8008dc6 <HAL_UART_IRQHandler+0xae>
 8008dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dbe:	f043 0201 	orr.w	r2, r3, #1
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dca:	f003 0304 	and.w	r3, r3, #4
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d00b      	beq.n	8008dea <HAL_UART_IRQHandler+0xd2>
 8008dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de2:	f043 0202 	orr.w	r2, r3, #2
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dee:	f003 0302 	and.w	r3, r3, #2
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00b      	beq.n	8008e0e <HAL_UART_IRQHandler+0xf6>
 8008df6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dfa:	f003 0301 	and.w	r3, r3, #1
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d005      	beq.n	8008e0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	f043 0204 	orr.w	r2, r3, #4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e12:	f003 0308 	and.w	r3, r3, #8
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d011      	beq.n	8008e3e <HAL_UART_IRQHandler+0x126>
 8008e1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1e:	f003 0320 	and.w	r3, r3, #32
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d105      	bne.n	8008e32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008e26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d005      	beq.n	8008e3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e36:	f043 0208 	orr.w	r2, r3, #8
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 81ed 	beq.w	8009222 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4c:	f003 0320 	and.w	r3, r3, #32
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d008      	beq.n	8008e66 <HAL_UART_IRQHandler+0x14e>
 8008e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e58:	f003 0320 	and.w	r3, r3, #32
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d002      	beq.n	8008e66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fbf1 	bl	8009648 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e70:	2b40      	cmp	r3, #64	; 0x40
 8008e72:	bf0c      	ite	eq
 8008e74:	2301      	moveq	r3, #1
 8008e76:	2300      	movne	r3, #0
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e82:	f003 0308 	and.w	r3, r3, #8
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d103      	bne.n	8008e92 <HAL_UART_IRQHandler+0x17a>
 8008e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d04f      	beq.n	8008f32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 faf9 	bl	800948a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea2:	2b40      	cmp	r3, #64	; 0x40
 8008ea4:	d141      	bne.n	8008f2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3314      	adds	r3, #20
 8008eac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ebc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3314      	adds	r3, #20
 8008ece:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ed2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ed6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ede:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1d9      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d013      	beq.n	8008f22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efe:	4a7d      	ldr	r2, [pc, #500]	; (80090f4 <HAL_UART_IRQHandler+0x3dc>)
 8008f00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7f9 ff4e 	bl	8002da8 <HAL_DMA_Abort_IT>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d016      	beq.n	8008f40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f1c:	4610      	mov	r0, r2
 8008f1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f20:	e00e      	b.n	8008f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 f990 	bl	8009248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f28:	e00a      	b.n	8008f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f000 f98c 	bl	8009248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f30:	e006      	b.n	8008f40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f988 	bl	8009248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008f3e:	e170      	b.n	8009222 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f40:	bf00      	nop
    return;
 8008f42:	e16e      	b.n	8009222 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	f040 814a 	bne.w	80091e2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f52:	f003 0310 	and.w	r3, r3, #16
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 8143 	beq.w	80091e2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 813c 	beq.w	80091e2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	60bb      	str	r3, [r7, #8]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	60bb      	str	r3, [r7, #8]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	60bb      	str	r3, [r7, #8]
 8008f7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8a:	2b40      	cmp	r3, #64	; 0x40
 8008f8c:	f040 80b4 	bne.w	80090f8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	f000 8140 	beq.w	8009226 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008faa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	f080 8139 	bcs.w	8009226 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	69db      	ldr	r3, [r3, #28]
 8008fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc6:	f000 8088 	beq.w	80090da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	330c      	adds	r3, #12
 8008fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fd8:	e853 3f00 	ldrex	r3, [r3]
 8008fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	330c      	adds	r3, #12
 8008ff2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ff6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009002:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009006:	e841 2300 	strex	r3, r2, [r1]
 800900a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800900e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1d9      	bne.n	8008fca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3314      	adds	r3, #20
 800901c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	3314      	adds	r3, #20
 8009036:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800903a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800903e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009042:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009046:	e841 2300 	strex	r3, r2, [r1]
 800904a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800904c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1e1      	bne.n	8009016 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	3314      	adds	r3, #20
 8009058:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800905c:	e853 3f00 	ldrex	r3, [r3]
 8009060:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009062:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009064:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009068:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3314      	adds	r3, #20
 8009072:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009076:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009078:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800907c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800907e:	e841 2300 	strex	r3, r2, [r1]
 8009082:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009084:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009086:	2b00      	cmp	r3, #0
 8009088:	d1e3      	bne.n	8009052 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2220      	movs	r2, #32
 800908e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	330c      	adds	r3, #12
 800909e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090aa:	f023 0310 	bic.w	r3, r3, #16
 80090ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	330c      	adds	r3, #12
 80090b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80090bc:	65ba      	str	r2, [r7, #88]	; 0x58
 80090be:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e3      	bne.n	8009098 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7f9 fdf7 	bl	8002cc8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	1ad3      	subs	r3, r2, r3
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f8b6 	bl	800925c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80090f0:	e099      	b.n	8009226 <HAL_UART_IRQHandler+0x50e>
 80090f2:	bf00      	nop
 80090f4:	08009551 	.word	0x08009551
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009100:	b29b      	uxth	r3, r3
 8009102:	1ad3      	subs	r3, r2, r3
 8009104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800910c:	b29b      	uxth	r3, r3
 800910e:	2b00      	cmp	r3, #0
 8009110:	f000 808b 	beq.w	800922a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 8086 	beq.w	800922a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	330c      	adds	r3, #12
 8009124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009128:	e853 3f00 	ldrex	r3, [r3]
 800912c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800912e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	330c      	adds	r3, #12
 800913e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009142:	647a      	str	r2, [r7, #68]	; 0x44
 8009144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e3      	bne.n	800911e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	3314      	adds	r3, #20
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	623b      	str	r3, [r7, #32]
   return(result);
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	f023 0301 	bic.w	r3, r3, #1
 800916c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3314      	adds	r3, #20
 8009176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800917a:	633a      	str	r2, [r7, #48]	; 0x30
 800917c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918a:	2b00      	cmp	r3, #0
 800918c:	d1e3      	bne.n	8009156 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2220      	movs	r2, #32
 8009192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	330c      	adds	r3, #12
 80091a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	693b      	ldr	r3, [r7, #16]
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0310 	bic.w	r3, r3, #16
 80091b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	330c      	adds	r3, #12
 80091bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80091c0:	61fa      	str	r2, [r7, #28]
 80091c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c4:	69b9      	ldr	r1, [r7, #24]
 80091c6:	69fa      	ldr	r2, [r7, #28]
 80091c8:	e841 2300 	strex	r3, r2, [r1]
 80091cc:	617b      	str	r3, [r7, #20]
   return(result);
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d1e3      	bne.n	800919c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091d8:	4619      	mov	r1, r3
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f000 f83e 	bl	800925c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80091e0:	e023      	b.n	800922a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80091e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d009      	beq.n	8009202 <HAL_UART_IRQHandler+0x4ea>
 80091ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f9bc 	bl	8009578 <UART_Transmit_IT>
    return;
 8009200:	e014      	b.n	800922c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920a:	2b00      	cmp	r3, #0
 800920c:	d00e      	beq.n	800922c <HAL_UART_IRQHandler+0x514>
 800920e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009216:	2b00      	cmp	r3, #0
 8009218:	d008      	beq.n	800922c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f9fc 	bl	8009618 <UART_EndTransmit_IT>
    return;
 8009220:	e004      	b.n	800922c <HAL_UART_IRQHandler+0x514>
    return;
 8009222:	bf00      	nop
 8009224:	e002      	b.n	800922c <HAL_UART_IRQHandler+0x514>
      return;
 8009226:	bf00      	nop
 8009228:	e000      	b.n	800922c <HAL_UART_IRQHandler+0x514>
      return;
 800922a:	bf00      	nop
  }
}
 800922c:	37e8      	adds	r7, #232	; 0xe8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop

08009234 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	460b      	mov	r3, r1
 8009266:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr

08009274 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b090      	sub	sp, #64	; 0x40
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928c:	2b00      	cmp	r3, #0
 800928e:	d137      	bne.n	8009300 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009292:	2200      	movs	r2, #0
 8009294:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009296:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3314      	adds	r3, #20
 800929c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a0:	e853 3f00 	ldrex	r3, [r3]
 80092a4:	623b      	str	r3, [r7, #32]
   return(result);
 80092a6:	6a3b      	ldr	r3, [r7, #32]
 80092a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80092ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	3314      	adds	r3, #20
 80092b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80092b6:	633a      	str	r2, [r7, #48]	; 0x30
 80092b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e5      	bne.n	8009296 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80092ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	330c      	adds	r3, #12
 80092d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092e0:	637b      	str	r3, [r7, #52]	; 0x34
 80092e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	330c      	adds	r3, #12
 80092e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092ea:	61fa      	str	r2, [r7, #28]
 80092ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ee:	69b9      	ldr	r1, [r7, #24]
 80092f0:	69fa      	ldr	r2, [r7, #28]
 80092f2:	e841 2300 	strex	r3, r2, [r1]
 80092f6:	617b      	str	r3, [r7, #20]
   return(result);
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d1e5      	bne.n	80092ca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092fe:	e002      	b.n	8009306 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009300:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8009302:	f7f8 f9df 	bl	80016c4 <HAL_UART_TxCpltCallback>
}
 8009306:	bf00      	nop
 8009308:	3740      	adds	r7, #64	; 0x40
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f7ff ff89 	bl	8009234 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009322:	bf00      	nop
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009346:	2b80      	cmp	r3, #128	; 0x80
 8009348:	bf0c      	ite	eq
 800934a:	2301      	moveq	r3, #1
 800934c:	2300      	movne	r3, #0
 800934e:	b2db      	uxtb	r3, r3
 8009350:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009358:	b2db      	uxtb	r3, r3
 800935a:	2b21      	cmp	r3, #33	; 0x21
 800935c:	d108      	bne.n	8009370 <UART_DMAError+0x46>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d005      	beq.n	8009370 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	2200      	movs	r2, #0
 8009368:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800936a:	68b8      	ldr	r0, [r7, #8]
 800936c:	f000 f865 	bl	800943a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937a:	2b40      	cmp	r3, #64	; 0x40
 800937c:	bf0c      	ite	eq
 800937e:	2301      	moveq	r3, #1
 8009380:	2300      	movne	r3, #0
 8009382:	b2db      	uxtb	r3, r3
 8009384:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800938c:	b2db      	uxtb	r3, r3
 800938e:	2b22      	cmp	r3, #34	; 0x22
 8009390:	d108      	bne.n	80093a4 <UART_DMAError+0x7a>
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d005      	beq.n	80093a4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	2200      	movs	r2, #0
 800939c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800939e:	68b8      	ldr	r0, [r7, #8]
 80093a0:	f000 f873 	bl	800948a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	f043 0210 	orr.w	r2, r3, #16
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b0:	68b8      	ldr	r0, [r7, #8]
 80093b2:	f7ff ff49 	bl	8009248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	60f8      	str	r0, [r7, #12]
 80093c6:	60b9      	str	r1, [r7, #8]
 80093c8:	4613      	mov	r3, r2
 80093ca:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	68ba      	ldr	r2, [r7, #8]
 80093d0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	88fa      	ldrh	r2, [r7, #6]
 80093d6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	88fa      	ldrh	r2, [r7, #6]
 80093dc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2200      	movs	r2, #0
 80093e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2222      	movs	r2, #34	; 0x22
 80093e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d007      	beq.n	800940c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800940a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	695a      	ldr	r2, [r3, #20]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f042 0201 	orr.w	r2, r2, #1
 800941a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	68da      	ldr	r2, [r3, #12]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f042 0220 	orr.w	r2, r2, #32
 800942a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3714      	adds	r7, #20
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800943a:	b480      	push	{r7}
 800943c:	b089      	sub	sp, #36	; 0x24
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	330c      	adds	r3, #12
 8009448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	60bb      	str	r3, [r7, #8]
   return(result);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009458:	61fb      	str	r3, [r7, #28]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	330c      	adds	r3, #12
 8009460:	69fa      	ldr	r2, [r7, #28]
 8009462:	61ba      	str	r2, [r7, #24]
 8009464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6979      	ldr	r1, [r7, #20]
 8009468:	69ba      	ldr	r2, [r7, #24]
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	613b      	str	r3, [r7, #16]
   return(result);
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e5      	bne.n	8009442 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2220      	movs	r2, #32
 800947a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800947e:	bf00      	nop
 8009480:	3724      	adds	r7, #36	; 0x24
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800948a:	b480      	push	{r7}
 800948c:	b095      	sub	sp, #84	; 0x54
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	330c      	adds	r3, #12
 8009498:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	e853 3f00 	ldrex	r3, [r3]
 80094a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80094a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80094b2:	643a      	str	r2, [r7, #64]	; 0x40
 80094b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80094c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e5      	bne.n	8009492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	3314      	adds	r3, #20
 80094cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ce:	6a3b      	ldr	r3, [r7, #32]
 80094d0:	e853 3f00 	ldrex	r3, [r3]
 80094d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f023 0301 	bic.w	r3, r3, #1
 80094dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3314      	adds	r3, #20
 80094e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80094e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e5      	bne.n	80094c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d119      	bne.n	8009536 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	330c      	adds	r3, #12
 8009508:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	e853 3f00 	ldrex	r3, [r3]
 8009510:	60bb      	str	r3, [r7, #8]
   return(result);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f023 0310 	bic.w	r3, r3, #16
 8009518:	647b      	str	r3, [r7, #68]	; 0x44
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	330c      	adds	r3, #12
 8009520:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009522:	61ba      	str	r2, [r7, #24]
 8009524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	6979      	ldr	r1, [r7, #20]
 8009528:	69ba      	ldr	r2, [r7, #24]
 800952a:	e841 2300 	strex	r3, r2, [r1]
 800952e:	613b      	str	r3, [r7, #16]
   return(result);
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d1e5      	bne.n	8009502 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2220      	movs	r2, #32
 800953a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009544:	bf00      	nop
 8009546:	3754      	adds	r7, #84	; 0x54
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr

08009550 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800955c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800956a:	68f8      	ldr	r0, [r7, #12]
 800956c:	f7ff fe6c 	bl	8009248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b21      	cmp	r3, #33	; 0x21
 800958a:	d13e      	bne.n	800960a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009594:	d114      	bne.n	80095c0 <UART_Transmit_IT+0x48>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	691b      	ldr	r3, [r3, #16]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d110      	bne.n	80095c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
 80095a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	881b      	ldrh	r3, [r3, #0]
 80095a8:	461a      	mov	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a1b      	ldr	r3, [r3, #32]
 80095b8:	1c9a      	adds	r2, r3, #2
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	621a      	str	r2, [r3, #32]
 80095be:	e008      	b.n	80095d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	1c59      	adds	r1, r3, #1
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6211      	str	r1, [r2, #32]
 80095ca:	781a      	ldrb	r2, [r3, #0]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	3b01      	subs	r3, #1
 80095da:	b29b      	uxth	r3, r3
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	4619      	mov	r1, r3
 80095e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d10f      	bne.n	8009606 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68da      	ldr	r2, [r3, #12]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009604:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009606:	2300      	movs	r3, #0
 8009608:	e000      	b.n	800960c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800960a:	2302      	movs	r3, #2
  }
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68da      	ldr	r2, [r3, #12]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800962e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2220      	movs	r2, #32
 8009634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7f8 f843 	bl	80016c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800963e:	2300      	movs	r3, #0
}
 8009640:	4618      	mov	r0, r3
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08c      	sub	sp, #48	; 0x30
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b22      	cmp	r3, #34	; 0x22
 800965a:	f040 80ab 	bne.w	80097b4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009666:	d117      	bne.n	8009698 <UART_Receive_IT+0x50>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d113      	bne.n	8009698 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009670:	2300      	movs	r3, #0
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	b29b      	uxth	r3, r3
 8009682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009686:	b29a      	uxth	r2, r3
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009690:	1c9a      	adds	r2, r3, #2
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	629a      	str	r2, [r3, #40]	; 0x28
 8009696:	e026      	b.n	80096e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800969e:	2300      	movs	r3, #0
 80096a0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096aa:	d007      	beq.n	80096bc <UART_Receive_IT+0x74>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10a      	bne.n	80096ca <UART_Receive_IT+0x82>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d106      	bne.n	80096ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	685b      	ldr	r3, [r3, #4]
 80096c2:	b2da      	uxtb	r2, r3
 80096c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096c6:	701a      	strb	r2, [r3, #0]
 80096c8:	e008      	b.n	80096dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	685b      	ldr	r3, [r3, #4]
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d6:	b2da      	uxtb	r2, r3
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e0:	1c5a      	adds	r2, r3, #1
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	3b01      	subs	r3, #1
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	4619      	mov	r1, r3
 80096f4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d15a      	bne.n	80097b0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68da      	ldr	r2, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f022 0220 	bic.w	r2, r2, #32
 8009708:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	68da      	ldr	r2, [r3, #12]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009718:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	695a      	ldr	r2, [r3, #20]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0201 	bic.w	r2, r2, #1
 8009728:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2220      	movs	r2, #32
 800972e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009736:	2b01      	cmp	r3, #1
 8009738:	d135      	bne.n	80097a6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2200      	movs	r2, #0
 800973e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	330c      	adds	r3, #12
 8009746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	e853 3f00 	ldrex	r3, [r3]
 800974e:	613b      	str	r3, [r7, #16]
   return(result);
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f023 0310 	bic.w	r3, r3, #16
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	330c      	adds	r3, #12
 800975e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009760:	623a      	str	r2, [r7, #32]
 8009762:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009764:	69f9      	ldr	r1, [r7, #28]
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	e841 2300 	strex	r3, r2, [r1]
 800976c:	61bb      	str	r3, [r7, #24]
   return(result);
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d1e5      	bne.n	8009740 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0310 	and.w	r3, r3, #16
 800977e:	2b10      	cmp	r3, #16
 8009780:	d10a      	bne.n	8009798 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009782:	2300      	movs	r3, #0
 8009784:	60fb      	str	r3, [r7, #12]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60fb      	str	r3, [r7, #12]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	60fb      	str	r3, [r7, #12]
 8009796:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff fd5c 	bl	800925c <HAL_UARTEx_RxEventCallback>
 80097a4:	e002      	b.n	80097ac <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7f7 ff96 	bl	80016d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e002      	b.n	80097b6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	e000      	b.n	80097b6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80097b4:	2302      	movs	r3, #2
  }
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3730      	adds	r7, #48	; 0x30
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097c4:	b0c0      	sub	sp, #256	; 0x100
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80097d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097dc:	68d9      	ldr	r1, [r3, #12]
 80097de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097e2:	681a      	ldr	r2, [r3, #0]
 80097e4:	ea40 0301 	orr.w	r3, r0, r1
 80097e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80097ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097ee:	689a      	ldr	r2, [r3, #8]
 80097f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	431a      	orrs	r2, r3
 80097f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	431a      	orrs	r2, r3
 8009800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009804:	69db      	ldr	r3, [r3, #28]
 8009806:	4313      	orrs	r3, r2
 8009808:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800980c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009818:	f021 010c 	bic.w	r1, r1, #12
 800981c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009826:	430b      	orrs	r3, r1
 8009828:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800982a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	695b      	ldr	r3, [r3, #20]
 8009832:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800983a:	6999      	ldr	r1, [r3, #24]
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	ea40 0301 	orr.w	r3, r0, r1
 8009846:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800984c:	681a      	ldr	r2, [r3, #0]
 800984e:	4b8f      	ldr	r3, [pc, #572]	; (8009a8c <UART_SetConfig+0x2cc>)
 8009850:	429a      	cmp	r2, r3
 8009852:	d005      	beq.n	8009860 <UART_SetConfig+0xa0>
 8009854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	4b8d      	ldr	r3, [pc, #564]	; (8009a90 <UART_SetConfig+0x2d0>)
 800985c:	429a      	cmp	r2, r3
 800985e:	d104      	bne.n	800986a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009860:	f7fd fb66 	bl	8006f30 <HAL_RCC_GetPCLK2Freq>
 8009864:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009868:	e003      	b.n	8009872 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800986a:	f7fd fb4d 	bl	8006f08 <HAL_RCC_GetPCLK1Freq>
 800986e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987c:	f040 810c 	bne.w	8009a98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009880:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009884:	2200      	movs	r2, #0
 8009886:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800988a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800988e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009892:	4622      	mov	r2, r4
 8009894:	462b      	mov	r3, r5
 8009896:	1891      	adds	r1, r2, r2
 8009898:	65b9      	str	r1, [r7, #88]	; 0x58
 800989a:	415b      	adcs	r3, r3
 800989c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800989e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80098a2:	4621      	mov	r1, r4
 80098a4:	eb12 0801 	adds.w	r8, r2, r1
 80098a8:	4629      	mov	r1, r5
 80098aa:	eb43 0901 	adc.w	r9, r3, r1
 80098ae:	f04f 0200 	mov.w	r2, #0
 80098b2:	f04f 0300 	mov.w	r3, #0
 80098b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80098ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80098be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80098c2:	4690      	mov	r8, r2
 80098c4:	4699      	mov	r9, r3
 80098c6:	4623      	mov	r3, r4
 80098c8:	eb18 0303 	adds.w	r3, r8, r3
 80098cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80098d0:	462b      	mov	r3, r5
 80098d2:	eb49 0303 	adc.w	r3, r9, r3
 80098d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80098da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80098e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80098ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80098ee:	460b      	mov	r3, r1
 80098f0:	18db      	adds	r3, r3, r3
 80098f2:	653b      	str	r3, [r7, #80]	; 0x50
 80098f4:	4613      	mov	r3, r2
 80098f6:	eb42 0303 	adc.w	r3, r2, r3
 80098fa:	657b      	str	r3, [r7, #84]	; 0x54
 80098fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009900:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009904:	f7f7 f8c2 	bl	8000a8c <__aeabi_uldivmod>
 8009908:	4602      	mov	r2, r0
 800990a:	460b      	mov	r3, r1
 800990c:	4b61      	ldr	r3, [pc, #388]	; (8009a94 <UART_SetConfig+0x2d4>)
 800990e:	fba3 2302 	umull	r2, r3, r3, r2
 8009912:	095b      	lsrs	r3, r3, #5
 8009914:	011c      	lsls	r4, r3, #4
 8009916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800991a:	2200      	movs	r2, #0
 800991c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009920:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009924:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	1891      	adds	r1, r2, r2
 800992e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009930:	415b      	adcs	r3, r3
 8009932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009934:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009938:	4641      	mov	r1, r8
 800993a:	eb12 0a01 	adds.w	sl, r2, r1
 800993e:	4649      	mov	r1, r9
 8009940:	eb43 0b01 	adc.w	fp, r3, r1
 8009944:	f04f 0200 	mov.w	r2, #0
 8009948:	f04f 0300 	mov.w	r3, #0
 800994c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009950:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009954:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009958:	4692      	mov	sl, r2
 800995a:	469b      	mov	fp, r3
 800995c:	4643      	mov	r3, r8
 800995e:	eb1a 0303 	adds.w	r3, sl, r3
 8009962:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009966:	464b      	mov	r3, r9
 8009968:	eb4b 0303 	adc.w	r3, fp, r3
 800996c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800997c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009980:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009984:	460b      	mov	r3, r1
 8009986:	18db      	adds	r3, r3, r3
 8009988:	643b      	str	r3, [r7, #64]	; 0x40
 800998a:	4613      	mov	r3, r2
 800998c:	eb42 0303 	adc.w	r3, r2, r3
 8009990:	647b      	str	r3, [r7, #68]	; 0x44
 8009992:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009996:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800999a:	f7f7 f877 	bl	8000a8c <__aeabi_uldivmod>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4611      	mov	r1, r2
 80099a4:	4b3b      	ldr	r3, [pc, #236]	; (8009a94 <UART_SetConfig+0x2d4>)
 80099a6:	fba3 2301 	umull	r2, r3, r3, r1
 80099aa:	095b      	lsrs	r3, r3, #5
 80099ac:	2264      	movs	r2, #100	; 0x64
 80099ae:	fb02 f303 	mul.w	r3, r2, r3
 80099b2:	1acb      	subs	r3, r1, r3
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80099ba:	4b36      	ldr	r3, [pc, #216]	; (8009a94 <UART_SetConfig+0x2d4>)
 80099bc:	fba3 2302 	umull	r2, r3, r3, r2
 80099c0:	095b      	lsrs	r3, r3, #5
 80099c2:	005b      	lsls	r3, r3, #1
 80099c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80099c8:	441c      	add	r4, r3
 80099ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ce:	2200      	movs	r2, #0
 80099d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80099d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80099dc:	4642      	mov	r2, r8
 80099de:	464b      	mov	r3, r9
 80099e0:	1891      	adds	r1, r2, r2
 80099e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80099e4:	415b      	adcs	r3, r3
 80099e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80099ec:	4641      	mov	r1, r8
 80099ee:	1851      	adds	r1, r2, r1
 80099f0:	6339      	str	r1, [r7, #48]	; 0x30
 80099f2:	4649      	mov	r1, r9
 80099f4:	414b      	adcs	r3, r1
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
 80099f8:	f04f 0200 	mov.w	r2, #0
 80099fc:	f04f 0300 	mov.w	r3, #0
 8009a00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a04:	4659      	mov	r1, fp
 8009a06:	00cb      	lsls	r3, r1, #3
 8009a08:	4651      	mov	r1, sl
 8009a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a0e:	4651      	mov	r1, sl
 8009a10:	00ca      	lsls	r2, r1, #3
 8009a12:	4610      	mov	r0, r2
 8009a14:	4619      	mov	r1, r3
 8009a16:	4603      	mov	r3, r0
 8009a18:	4642      	mov	r2, r8
 8009a1a:	189b      	adds	r3, r3, r2
 8009a1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a20:	464b      	mov	r3, r9
 8009a22:	460a      	mov	r2, r1
 8009a24:	eb42 0303 	adc.w	r3, r2, r3
 8009a28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009a38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009a3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009a40:	460b      	mov	r3, r1
 8009a42:	18db      	adds	r3, r3, r3
 8009a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a46:	4613      	mov	r3, r2
 8009a48:	eb42 0303 	adc.w	r3, r2, r3
 8009a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009a52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009a56:	f7f7 f819 	bl	8000a8c <__aeabi_uldivmod>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4b0d      	ldr	r3, [pc, #52]	; (8009a94 <UART_SetConfig+0x2d4>)
 8009a60:	fba3 1302 	umull	r1, r3, r3, r2
 8009a64:	095b      	lsrs	r3, r3, #5
 8009a66:	2164      	movs	r1, #100	; 0x64
 8009a68:	fb01 f303 	mul.w	r3, r1, r3
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	3332      	adds	r3, #50	; 0x32
 8009a72:	4a08      	ldr	r2, [pc, #32]	; (8009a94 <UART_SetConfig+0x2d4>)
 8009a74:	fba2 2303 	umull	r2, r3, r2, r3
 8009a78:	095b      	lsrs	r3, r3, #5
 8009a7a:	f003 0207 	and.w	r2, r3, #7
 8009a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4422      	add	r2, r4
 8009a86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a88:	e105      	b.n	8009c96 <UART_SetConfig+0x4d6>
 8009a8a:	bf00      	nop
 8009a8c:	40011000 	.word	0x40011000
 8009a90:	40011400 	.word	0x40011400
 8009a94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009aa2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009aa6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009aaa:	4642      	mov	r2, r8
 8009aac:	464b      	mov	r3, r9
 8009aae:	1891      	adds	r1, r2, r2
 8009ab0:	6239      	str	r1, [r7, #32]
 8009ab2:	415b      	adcs	r3, r3
 8009ab4:	627b      	str	r3, [r7, #36]	; 0x24
 8009ab6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009aba:	4641      	mov	r1, r8
 8009abc:	1854      	adds	r4, r2, r1
 8009abe:	4649      	mov	r1, r9
 8009ac0:	eb43 0501 	adc.w	r5, r3, r1
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	f04f 0300 	mov.w	r3, #0
 8009acc:	00eb      	lsls	r3, r5, #3
 8009ace:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ad2:	00e2      	lsls	r2, r4, #3
 8009ad4:	4614      	mov	r4, r2
 8009ad6:	461d      	mov	r5, r3
 8009ad8:	4643      	mov	r3, r8
 8009ada:	18e3      	adds	r3, r4, r3
 8009adc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009ae0:	464b      	mov	r3, r9
 8009ae2:	eb45 0303 	adc.w	r3, r5, r3
 8009ae6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009af6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009afa:	f04f 0200 	mov.w	r2, #0
 8009afe:	f04f 0300 	mov.w	r3, #0
 8009b02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b06:	4629      	mov	r1, r5
 8009b08:	008b      	lsls	r3, r1, #2
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b10:	4621      	mov	r1, r4
 8009b12:	008a      	lsls	r2, r1, #2
 8009b14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009b18:	f7f6 ffb8 	bl	8000a8c <__aeabi_uldivmod>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	460b      	mov	r3, r1
 8009b20:	4b60      	ldr	r3, [pc, #384]	; (8009ca4 <UART_SetConfig+0x4e4>)
 8009b22:	fba3 2302 	umull	r2, r3, r3, r2
 8009b26:	095b      	lsrs	r3, r3, #5
 8009b28:	011c      	lsls	r4, r3, #4
 8009b2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009b34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009b38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009b3c:	4642      	mov	r2, r8
 8009b3e:	464b      	mov	r3, r9
 8009b40:	1891      	adds	r1, r2, r2
 8009b42:	61b9      	str	r1, [r7, #24]
 8009b44:	415b      	adcs	r3, r3
 8009b46:	61fb      	str	r3, [r7, #28]
 8009b48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009b4c:	4641      	mov	r1, r8
 8009b4e:	1851      	adds	r1, r2, r1
 8009b50:	6139      	str	r1, [r7, #16]
 8009b52:	4649      	mov	r1, r9
 8009b54:	414b      	adcs	r3, r1
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	f04f 0200 	mov.w	r2, #0
 8009b5c:	f04f 0300 	mov.w	r3, #0
 8009b60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009b64:	4659      	mov	r1, fp
 8009b66:	00cb      	lsls	r3, r1, #3
 8009b68:	4651      	mov	r1, sl
 8009b6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b6e:	4651      	mov	r1, sl
 8009b70:	00ca      	lsls	r2, r1, #3
 8009b72:	4610      	mov	r0, r2
 8009b74:	4619      	mov	r1, r3
 8009b76:	4603      	mov	r3, r0
 8009b78:	4642      	mov	r2, r8
 8009b7a:	189b      	adds	r3, r3, r2
 8009b7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009b80:	464b      	mov	r3, r9
 8009b82:	460a      	mov	r2, r1
 8009b84:	eb42 0303 	adc.w	r3, r2, r3
 8009b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	67bb      	str	r3, [r7, #120]	; 0x78
 8009b96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009b98:	f04f 0200 	mov.w	r2, #0
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	008b      	lsls	r3, r1, #2
 8009ba8:	4641      	mov	r1, r8
 8009baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bae:	4641      	mov	r1, r8
 8009bb0:	008a      	lsls	r2, r1, #2
 8009bb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009bb6:	f7f6 ff69 	bl	8000a8c <__aeabi_uldivmod>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	4b39      	ldr	r3, [pc, #228]	; (8009ca4 <UART_SetConfig+0x4e4>)
 8009bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009bc4:	095b      	lsrs	r3, r3, #5
 8009bc6:	2164      	movs	r1, #100	; 0x64
 8009bc8:	fb01 f303 	mul.w	r3, r1, r3
 8009bcc:	1ad3      	subs	r3, r2, r3
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	3332      	adds	r3, #50	; 0x32
 8009bd2:	4a34      	ldr	r2, [pc, #208]	; (8009ca4 <UART_SetConfig+0x4e4>)
 8009bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009bde:	441c      	add	r4, r3
 8009be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009be4:	2200      	movs	r2, #0
 8009be6:	673b      	str	r3, [r7, #112]	; 0x70
 8009be8:	677a      	str	r2, [r7, #116]	; 0x74
 8009bea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009bee:	4642      	mov	r2, r8
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	1891      	adds	r1, r2, r2
 8009bf4:	60b9      	str	r1, [r7, #8]
 8009bf6:	415b      	adcs	r3, r3
 8009bf8:	60fb      	str	r3, [r7, #12]
 8009bfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009bfe:	4641      	mov	r1, r8
 8009c00:	1851      	adds	r1, r2, r1
 8009c02:	6039      	str	r1, [r7, #0]
 8009c04:	4649      	mov	r1, r9
 8009c06:	414b      	adcs	r3, r1
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	f04f 0200 	mov.w	r2, #0
 8009c0e:	f04f 0300 	mov.w	r3, #0
 8009c12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c16:	4659      	mov	r1, fp
 8009c18:	00cb      	lsls	r3, r1, #3
 8009c1a:	4651      	mov	r1, sl
 8009c1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c20:	4651      	mov	r1, sl
 8009c22:	00ca      	lsls	r2, r1, #3
 8009c24:	4610      	mov	r0, r2
 8009c26:	4619      	mov	r1, r3
 8009c28:	4603      	mov	r3, r0
 8009c2a:	4642      	mov	r2, r8
 8009c2c:	189b      	adds	r3, r3, r2
 8009c2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c30:	464b      	mov	r3, r9
 8009c32:	460a      	mov	r2, r1
 8009c34:	eb42 0303 	adc.w	r3, r2, r3
 8009c38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c3e:	685b      	ldr	r3, [r3, #4]
 8009c40:	2200      	movs	r2, #0
 8009c42:	663b      	str	r3, [r7, #96]	; 0x60
 8009c44:	667a      	str	r2, [r7, #100]	; 0x64
 8009c46:	f04f 0200 	mov.w	r2, #0
 8009c4a:	f04f 0300 	mov.w	r3, #0
 8009c4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009c52:	4649      	mov	r1, r9
 8009c54:	008b      	lsls	r3, r1, #2
 8009c56:	4641      	mov	r1, r8
 8009c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c5c:	4641      	mov	r1, r8
 8009c5e:	008a      	lsls	r2, r1, #2
 8009c60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c64:	f7f6 ff12 	bl	8000a8c <__aeabi_uldivmod>
 8009c68:	4602      	mov	r2, r0
 8009c6a:	460b      	mov	r3, r1
 8009c6c:	4b0d      	ldr	r3, [pc, #52]	; (8009ca4 <UART_SetConfig+0x4e4>)
 8009c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8009c72:	095b      	lsrs	r3, r3, #5
 8009c74:	2164      	movs	r1, #100	; 0x64
 8009c76:	fb01 f303 	mul.w	r3, r1, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	011b      	lsls	r3, r3, #4
 8009c7e:	3332      	adds	r3, #50	; 0x32
 8009c80:	4a08      	ldr	r2, [pc, #32]	; (8009ca4 <UART_SetConfig+0x4e4>)
 8009c82:	fba2 2303 	umull	r2, r3, r2, r3
 8009c86:	095b      	lsrs	r3, r3, #5
 8009c88:	f003 020f 	and.w	r2, r3, #15
 8009c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4422      	add	r2, r4
 8009c94:	609a      	str	r2, [r3, #8]
}
 8009c96:	bf00      	nop
 8009c98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ca2:	bf00      	nop
 8009ca4:	51eb851f 	.word	0x51eb851f

08009ca8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009ca8:	b084      	sub	sp, #16
 8009caa:	b580      	push	{r7, lr}
 8009cac:	b084      	sub	sp, #16
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	f107 001c 	add.w	r0, r7, #28
 8009cb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d122      	bne.n	8009d06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009ce8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d105      	bne.n	8009cfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f001 fbee 	bl	800b4dc <USB_CoreReset>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73fb      	strb	r3, [r7, #15]
 8009d04:	e01a      	b.n	8009d3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f001 fbe2 	bl	800b4dc <USB_CoreReset>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009d1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d106      	bne.n	8009d30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38
 8009d2e:	e005      	b.n	8009d3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d10b      	bne.n	8009d5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f043 0206 	orr.w	r2, r3, #6
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	f043 0220 	orr.w	r2, r3, #32
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d66:	b004      	add	sp, #16
 8009d68:	4770      	bx	lr
	...

08009d6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b087      	sub	sp, #28
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009d7a:	79fb      	ldrb	r3, [r7, #7]
 8009d7c:	2b02      	cmp	r3, #2
 8009d7e:	d165      	bne.n	8009e4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	4a41      	ldr	r2, [pc, #260]	; (8009e88 <USB_SetTurnaroundTime+0x11c>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d906      	bls.n	8009d96 <USB_SetTurnaroundTime+0x2a>
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	4a40      	ldr	r2, [pc, #256]	; (8009e8c <USB_SetTurnaroundTime+0x120>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d202      	bcs.n	8009d96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009d90:	230f      	movs	r3, #15
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	e062      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	4a3c      	ldr	r2, [pc, #240]	; (8009e8c <USB_SetTurnaroundTime+0x120>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d306      	bcc.n	8009dac <USB_SetTurnaroundTime+0x40>
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	4a3b      	ldr	r2, [pc, #236]	; (8009e90 <USB_SetTurnaroundTime+0x124>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d202      	bcs.n	8009dac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009da6:	230e      	movs	r3, #14
 8009da8:	617b      	str	r3, [r7, #20]
 8009daa:	e057      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	4a38      	ldr	r2, [pc, #224]	; (8009e90 <USB_SetTurnaroundTime+0x124>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d306      	bcc.n	8009dc2 <USB_SetTurnaroundTime+0x56>
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4a37      	ldr	r2, [pc, #220]	; (8009e94 <USB_SetTurnaroundTime+0x128>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d202      	bcs.n	8009dc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009dbc:	230d      	movs	r3, #13
 8009dbe:	617b      	str	r3, [r7, #20]
 8009dc0:	e04c      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	4a33      	ldr	r2, [pc, #204]	; (8009e94 <USB_SetTurnaroundTime+0x128>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d306      	bcc.n	8009dd8 <USB_SetTurnaroundTime+0x6c>
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	4a32      	ldr	r2, [pc, #200]	; (8009e98 <USB_SetTurnaroundTime+0x12c>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d802      	bhi.n	8009dd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009dd2:	230c      	movs	r3, #12
 8009dd4:	617b      	str	r3, [r7, #20]
 8009dd6:	e041      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	4a2f      	ldr	r2, [pc, #188]	; (8009e98 <USB_SetTurnaroundTime+0x12c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d906      	bls.n	8009dee <USB_SetTurnaroundTime+0x82>
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	4a2e      	ldr	r2, [pc, #184]	; (8009e9c <USB_SetTurnaroundTime+0x130>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d802      	bhi.n	8009dee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009de8:	230b      	movs	r3, #11
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	e036      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	4a2a      	ldr	r2, [pc, #168]	; (8009e9c <USB_SetTurnaroundTime+0x130>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d906      	bls.n	8009e04 <USB_SetTurnaroundTime+0x98>
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4a29      	ldr	r2, [pc, #164]	; (8009ea0 <USB_SetTurnaroundTime+0x134>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d802      	bhi.n	8009e04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009dfe:	230a      	movs	r3, #10
 8009e00:	617b      	str	r3, [r7, #20]
 8009e02:	e02b      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	4a26      	ldr	r2, [pc, #152]	; (8009ea0 <USB_SetTurnaroundTime+0x134>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d906      	bls.n	8009e1a <USB_SetTurnaroundTime+0xae>
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	4a25      	ldr	r2, [pc, #148]	; (8009ea4 <USB_SetTurnaroundTime+0x138>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d202      	bcs.n	8009e1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009e14:	2309      	movs	r3, #9
 8009e16:	617b      	str	r3, [r7, #20]
 8009e18:	e020      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	4a21      	ldr	r2, [pc, #132]	; (8009ea4 <USB_SetTurnaroundTime+0x138>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d306      	bcc.n	8009e30 <USB_SetTurnaroundTime+0xc4>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	4a20      	ldr	r2, [pc, #128]	; (8009ea8 <USB_SetTurnaroundTime+0x13c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d802      	bhi.n	8009e30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009e2a:	2308      	movs	r3, #8
 8009e2c:	617b      	str	r3, [r7, #20]
 8009e2e:	e015      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	4a1d      	ldr	r2, [pc, #116]	; (8009ea8 <USB_SetTurnaroundTime+0x13c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d906      	bls.n	8009e46 <USB_SetTurnaroundTime+0xda>
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	4a1c      	ldr	r2, [pc, #112]	; (8009eac <USB_SetTurnaroundTime+0x140>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d202      	bcs.n	8009e46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009e40:	2307      	movs	r3, #7
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	e00a      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009e46:	2306      	movs	r3, #6
 8009e48:	617b      	str	r3, [r7, #20]
 8009e4a:	e007      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009e4c:	79fb      	ldrb	r3, [r7, #7]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d102      	bne.n	8009e58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009e52:	2309      	movs	r3, #9
 8009e54:	617b      	str	r3, [r7, #20]
 8009e56:	e001      	b.n	8009e5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009e58:	2309      	movs	r3, #9
 8009e5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68db      	ldr	r3, [r3, #12]
 8009e60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68da      	ldr	r2, [r3, #12]
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	029b      	lsls	r3, r3, #10
 8009e70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009e74:	431a      	orrs	r2, r3
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	371c      	adds	r7, #28
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr
 8009e88:	00d8acbf 	.word	0x00d8acbf
 8009e8c:	00e4e1c0 	.word	0x00e4e1c0
 8009e90:	00f42400 	.word	0x00f42400
 8009e94:	01067380 	.word	0x01067380
 8009e98:	011a499f 	.word	0x011a499f
 8009e9c:	01312cff 	.word	0x01312cff
 8009ea0:	014ca43f 	.word	0x014ca43f
 8009ea4:	016e3600 	.word	0x016e3600
 8009ea8:	01a6ab1f 	.word	0x01a6ab1f
 8009eac:	01e84800 	.word	0x01e84800

08009eb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f043 0201 	orr.w	r2, r3, #1
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed0:	4770      	bx	lr

08009ed2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009ed2:	b480      	push	{r7}
 8009ed4:	b083      	sub	sp, #12
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	689b      	ldr	r3, [r3, #8]
 8009ede:	f023 0201 	bic.w	r2, r3, #1
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	370c      	adds	r7, #12
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d115      	bne.n	8009f42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f22:	2001      	movs	r0, #1
 8009f24:	f7f8 fc94 	bl	8002850 <HAL_Delay>
      ms++;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	3301      	adds	r3, #1
 8009f2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f001 fa45 	bl	800b3be <USB_GetMode>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b01      	cmp	r3, #1
 8009f38:	d01e      	beq.n	8009f78 <USB_SetCurrentMode+0x84>
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	2b31      	cmp	r3, #49	; 0x31
 8009f3e:	d9f0      	bls.n	8009f22 <USB_SetCurrentMode+0x2e>
 8009f40:	e01a      	b.n	8009f78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009f42:	78fb      	ldrb	r3, [r7, #3]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d115      	bne.n	8009f74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f54:	2001      	movs	r0, #1
 8009f56:	f7f8 fc7b 	bl	8002850 <HAL_Delay>
      ms++;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 fa2c 	bl	800b3be <USB_GetMode>
 8009f66:	4603      	mov	r3, r0
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d005      	beq.n	8009f78 <USB_SetCurrentMode+0x84>
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b31      	cmp	r3, #49	; 0x31
 8009f70:	d9f0      	bls.n	8009f54 <USB_SetCurrentMode+0x60>
 8009f72:	e001      	b.n	8009f78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e005      	b.n	8009f84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b32      	cmp	r3, #50	; 0x32
 8009f7c:	d101      	bne.n	8009f82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b086      	sub	sp, #24
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	613b      	str	r3, [r7, #16]
 8009faa:	e009      	b.n	8009fc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	3340      	adds	r3, #64	; 0x40
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	3301      	adds	r3, #1
 8009fbe:	613b      	str	r3, [r7, #16]
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	2b0e      	cmp	r3, #14
 8009fc4:	d9f2      	bls.n	8009fac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d11c      	bne.n	800a006 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fda:	f043 0302 	orr.w	r3, r3, #2
 8009fde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ff0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ffc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	639a      	str	r2, [r3, #56]	; 0x38
 800a004:	e00b      	b.n	800a01e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a024:	461a      	mov	r2, r3
 800a026:	2300      	movs	r3, #0
 800a028:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a030:	4619      	mov	r1, r3
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a038:	461a      	mov	r2, r3
 800a03a:	680b      	ldr	r3, [r1, #0]
 800a03c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a03e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a040:	2b01      	cmp	r3, #1
 800a042:	d10c      	bne.n	800a05e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a046:	2b00      	cmp	r3, #0
 800a048:	d104      	bne.n	800a054 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a04a:	2100      	movs	r1, #0
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f965 	bl	800a31c <USB_SetDevSpeed>
 800a052:	e008      	b.n	800a066 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a054:	2101      	movs	r1, #1
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f960 	bl	800a31c <USB_SetDevSpeed>
 800a05c:	e003      	b.n	800a066 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a05e:	2103      	movs	r1, #3
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 f95b 	bl	800a31c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a066:	2110      	movs	r1, #16
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 f8f3 	bl	800a254 <USB_FlushTxFifo>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d001      	beq.n	800a078 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 f91f 	bl	800a2bc <USB_FlushRxFifo>
 800a07e:	4603      	mov	r3, r0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d001      	beq.n	800a088 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08e:	461a      	mov	r2, r3
 800a090:	2300      	movs	r3, #0
 800a092:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a09a:	461a      	mov	r2, r3
 800a09c:	2300      	movs	r3, #0
 800a09e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a6:	461a      	mov	r2, r3
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	613b      	str	r3, [r7, #16]
 800a0b0:	e043      	b.n	800a13a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a0c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a0c8:	d118      	bne.n	800a0fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d10a      	bne.n	800a0e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	015a      	lsls	r2, r3, #5
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	4413      	add	r3, r2
 800a0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0dc:	461a      	mov	r2, r3
 800a0de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a0e2:	6013      	str	r3, [r2, #0]
 800a0e4:	e013      	b.n	800a10e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0f8:	6013      	str	r3, [r2, #0]
 800a0fa:	e008      	b.n	800a10e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a108:	461a      	mov	r2, r3
 800a10a:	2300      	movs	r3, #0
 800a10c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11a:	461a      	mov	r2, r3
 800a11c:	2300      	movs	r3, #0
 800a11e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	015a      	lsls	r2, r3, #5
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	4413      	add	r3, r2
 800a128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a12c:	461a      	mov	r2, r3
 800a12e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a132:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	3301      	adds	r3, #1
 800a138:	613b      	str	r3, [r7, #16]
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	693a      	ldr	r2, [r7, #16]
 800a13e:	429a      	cmp	r2, r3
 800a140:	d3b7      	bcc.n	800a0b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a142:	2300      	movs	r3, #0
 800a144:	613b      	str	r3, [r7, #16]
 800a146:	e043      	b.n	800a1d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a15a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a15e:	d118      	bne.n	800a192 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d10a      	bne.n	800a17c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	015a      	lsls	r2, r3, #5
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	4413      	add	r3, r2
 800a16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a172:	461a      	mov	r2, r3
 800a174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a178:	6013      	str	r3, [r2, #0]
 800a17a:	e013      	b.n	800a1a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	015a      	lsls	r2, r3, #5
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	4413      	add	r3, r2
 800a184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a188:	461a      	mov	r2, r3
 800a18a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a18e:	6013      	str	r3, [r2, #0]
 800a190:	e008      	b.n	800a1a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	015a      	lsls	r2, r3, #5
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	4413      	add	r3, r2
 800a19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a19e:	461a      	mov	r2, r3
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1ca:	693b      	ldr	r3, [r7, #16]
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	613b      	str	r3, [r7, #16]
 800a1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d3b7      	bcc.n	800a148 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a1ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a1f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d105      	bne.n	800a20c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	699b      	ldr	r3, [r3, #24]
 800a204:	f043 0210 	orr.w	r2, r3, #16
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	699a      	ldr	r2, [r3, #24]
 800a210:	4b0f      	ldr	r3, [pc, #60]	; (800a250 <USB_DevInit+0x2c4>)
 800a212:	4313      	orrs	r3, r2
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a218:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d005      	beq.n	800a22a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	f043 0208 	orr.w	r2, r3, #8
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a22a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d107      	bne.n	800a240 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a238:	f043 0304 	orr.w	r3, r3, #4
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a240:	7dfb      	ldrb	r3, [r7, #23]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3718      	adds	r7, #24
 800a246:	46bd      	mov	sp, r7
 800a248:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a24c:	b004      	add	sp, #16
 800a24e:	4770      	bx	lr
 800a250:	803c3800 	.word	0x803c3800

0800a254 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a25e:	2300      	movs	r3, #0
 800a260:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	3301      	adds	r3, #1
 800a266:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	4a13      	ldr	r2, [pc, #76]	; (800a2b8 <USB_FlushTxFifo+0x64>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d901      	bls.n	800a274 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e01b      	b.n	800a2ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	daf2      	bge.n	800a262 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	019b      	lsls	r3, r3, #6
 800a284:	f043 0220 	orr.w	r2, r3, #32
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	3301      	adds	r3, #1
 800a290:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	4a08      	ldr	r2, [pc, #32]	; (800a2b8 <USB_FlushTxFifo+0x64>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d901      	bls.n	800a29e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a29a:	2303      	movs	r3, #3
 800a29c:	e006      	b.n	800a2ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	f003 0320 	and.w	r3, r3, #32
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d0f0      	beq.n	800a28c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a2aa:	2300      	movs	r3, #0
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3714      	adds	r7, #20
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	00030d40 	.word	0x00030d40

0800a2bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	3301      	adds	r3, #1
 800a2cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4a11      	ldr	r2, [pc, #68]	; (800a318 <USB_FlushRxFifo+0x5c>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d901      	bls.n	800a2da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a2d6:	2303      	movs	r3, #3
 800a2d8:	e018      	b.n	800a30c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	daf2      	bge.n	800a2c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2210      	movs	r2, #16
 800a2ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4a08      	ldr	r2, [pc, #32]	; (800a318 <USB_FlushRxFifo+0x5c>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d901      	bls.n	800a2fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	e006      	b.n	800a30c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	f003 0310 	and.w	r3, r3, #16
 800a306:	2b10      	cmp	r3, #16
 800a308:	d0f0      	beq.n	800a2ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a30a:	2300      	movs	r3, #0
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3714      	adds	r7, #20
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr
 800a318:	00030d40 	.word	0x00030d40

0800a31c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	78fb      	ldrb	r3, [r7, #3]
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a33c:	4313      	orrs	r3, r2
 800a33e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3714      	adds	r7, #20
 800a346:	46bd      	mov	sp, r7
 800a348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a34c:	4770      	bx	lr

0800a34e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a34e:	b480      	push	{r7}
 800a350:	b087      	sub	sp, #28
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f003 0306 	and.w	r3, r3, #6
 800a366:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d102      	bne.n	800a374 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a36e:	2300      	movs	r3, #0
 800a370:	75fb      	strb	r3, [r7, #23]
 800a372:	e00a      	b.n	800a38a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2b02      	cmp	r3, #2
 800a378:	d002      	beq.n	800a380 <USB_GetDevSpeed+0x32>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2b06      	cmp	r3, #6
 800a37e:	d102      	bne.n	800a386 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a380:	2302      	movs	r3, #2
 800a382:	75fb      	strb	r3, [r7, #23]
 800a384:	e001      	b.n	800a38a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a386:	230f      	movs	r3, #15
 800a388:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a38c:	4618      	mov	r0, r3
 800a38e:	371c      	adds	r7, #28
 800a390:	46bd      	mov	sp, r7
 800a392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a396:	4770      	bx	lr

0800a398 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	785b      	ldrb	r3, [r3, #1]
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	d13a      	bne.n	800a42a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ba:	69da      	ldr	r2, [r3, #28]
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	f003 030f 	and.w	r3, r3, #15
 800a3c4:	2101      	movs	r1, #1
 800a3c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	68f9      	ldr	r1, [r7, #12]
 800a3ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3d2:	4313      	orrs	r3, r2
 800a3d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	015a      	lsls	r2, r3, #5
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	4413      	add	r3, r2
 800a3de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d155      	bne.n	800a498 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	791b      	ldrb	r3, [r3, #4]
 800a406:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a408:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	059b      	lsls	r3, r3, #22
 800a40e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a410:	4313      	orrs	r3, r2
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	0151      	lsls	r1, r2, #5
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	440a      	add	r2, r1
 800a41a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a41e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	e036      	b.n	800a498 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a430:	69da      	ldr	r2, [r3, #28]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	781b      	ldrb	r3, [r3, #0]
 800a436:	f003 030f 	and.w	r3, r3, #15
 800a43a:	2101      	movs	r1, #1
 800a43c:	fa01 f303 	lsl.w	r3, r1, r3
 800a440:	041b      	lsls	r3, r3, #16
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a448:	4313      	orrs	r3, r2
 800a44a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	015a      	lsls	r2, r3, #5
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4413      	add	r3, r2
 800a454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d11a      	bne.n	800a498 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	015a      	lsls	r2, r3, #5
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4413      	add	r3, r2
 800a46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	791b      	ldrb	r3, [r3, #4]
 800a47c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a47e:	430b      	orrs	r3, r1
 800a480:	4313      	orrs	r3, r2
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	0151      	lsls	r1, r2, #5
 800a486:	68fa      	ldr	r2, [r7, #12]
 800a488:	440a      	add	r2, r1
 800a48a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a48e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a496:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	3714      	adds	r7, #20
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr
	...

0800a4a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b085      	sub	sp, #20
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
 800a4b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	785b      	ldrb	r3, [r3, #1]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d161      	bne.n	800a588 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4da:	d11f      	bne.n	800a51c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	015a      	lsls	r2, r3, #5
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	4413      	add	r3, r2
 800a4e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68ba      	ldr	r2, [r7, #8]
 800a4ec:	0151      	lsls	r1, r2, #5
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	440a      	add	r2, r1
 800a4f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a4fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	0151      	lsls	r1, r2, #5
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	440a      	add	r2, r1
 800a512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a516:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a51a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	781b      	ldrb	r3, [r3, #0]
 800a528:	f003 030f 	and.w	r3, r3, #15
 800a52c:	2101      	movs	r1, #1
 800a52e:	fa01 f303 	lsl.w	r3, r1, r3
 800a532:	b29b      	uxth	r3, r3
 800a534:	43db      	mvns	r3, r3
 800a536:	68f9      	ldr	r1, [r7, #12]
 800a538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a53c:	4013      	ands	r3, r2
 800a53e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a546:	69da      	ldr	r2, [r3, #28]
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	2101      	movs	r1, #1
 800a552:	fa01 f303 	lsl.w	r3, r1, r3
 800a556:	b29b      	uxth	r3, r3
 800a558:	43db      	mvns	r3, r3
 800a55a:	68f9      	ldr	r1, [r7, #12]
 800a55c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a560:	4013      	ands	r3, r2
 800a562:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	0159      	lsls	r1, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	440b      	add	r3, r1
 800a57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57e:	4619      	mov	r1, r3
 800a580:	4b35      	ldr	r3, [pc, #212]	; (800a658 <USB_DeactivateEndpoint+0x1b0>)
 800a582:	4013      	ands	r3, r2
 800a584:	600b      	str	r3, [r1, #0]
 800a586:	e060      	b.n	800a64a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a59a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a59e:	d11f      	bne.n	800a5e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a5a0:	68bb      	ldr	r3, [r7, #8]
 800a5a2:	015a      	lsls	r2, r3, #5
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	0151      	lsls	r1, r2, #5
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	440a      	add	r2, r1
 800a5b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a5c0:	68bb      	ldr	r3, [r7, #8]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	0151      	lsls	r1, r2, #5
 800a5d2:	68fa      	ldr	r2, [r7, #12]
 800a5d4:	440a      	add	r2, r1
 800a5d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	f003 030f 	and.w	r3, r3, #15
 800a5f0:	2101      	movs	r1, #1
 800a5f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f6:	041b      	lsls	r3, r3, #16
 800a5f8:	43db      	mvns	r3, r3
 800a5fa:	68f9      	ldr	r1, [r7, #12]
 800a5fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a600:	4013      	ands	r3, r2
 800a602:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a60a:	69da      	ldr	r2, [r3, #28]
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	781b      	ldrb	r3, [r3, #0]
 800a610:	f003 030f 	and.w	r3, r3, #15
 800a614:	2101      	movs	r1, #1
 800a616:	fa01 f303 	lsl.w	r3, r1, r3
 800a61a:	041b      	lsls	r3, r3, #16
 800a61c:	43db      	mvns	r3, r3
 800a61e:	68f9      	ldr	r1, [r7, #12]
 800a620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a624:	4013      	ands	r3, r2
 800a626:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	015a      	lsls	r2, r3, #5
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	4413      	add	r3, r2
 800a630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a634:	681a      	ldr	r2, [r3, #0]
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	0159      	lsls	r1, r3, #5
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	440b      	add	r3, r1
 800a63e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a642:	4619      	mov	r1, r3
 800a644:	4b05      	ldr	r3, [pc, #20]	; (800a65c <USB_DeactivateEndpoint+0x1b4>)
 800a646:	4013      	ands	r3, r2
 800a648:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr
 800a658:	ec337800 	.word	0xec337800
 800a65c:	eff37800 	.word	0xeff37800

0800a660 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b08a      	sub	sp, #40	; 0x28
 800a664:	af02      	add	r7, sp, #8
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	4613      	mov	r3, r2
 800a66c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a672:	68bb      	ldr	r3, [r7, #8]
 800a674:	781b      	ldrb	r3, [r3, #0]
 800a676:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	785b      	ldrb	r3, [r3, #1]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	f040 815c 	bne.w	800a93a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d132      	bne.n	800a6f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a68a:	69bb      	ldr	r3, [r7, #24]
 800a68c:	015a      	lsls	r2, r3, #5
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	4413      	add	r3, r2
 800a692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	0151      	lsls	r1, r2, #5
 800a69c:	69fa      	ldr	r2, [r7, #28]
 800a69e:	440a      	add	r2, r1
 800a6a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a6a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a6ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	69ba      	ldr	r2, [r7, #24]
 800a6be:	0151      	lsls	r1, r2, #5
 800a6c0:	69fa      	ldr	r2, [r7, #28]
 800a6c2:	440a      	add	r2, r1
 800a6c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6da:	691b      	ldr	r3, [r3, #16]
 800a6dc:	69ba      	ldr	r2, [r7, #24]
 800a6de:	0151      	lsls	r1, r2, #5
 800a6e0:	69fa      	ldr	r2, [r7, #28]
 800a6e2:	440a      	add	r2, r1
 800a6e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6e8:	0cdb      	lsrs	r3, r3, #19
 800a6ea:	04db      	lsls	r3, r3, #19
 800a6ec:	6113      	str	r3, [r2, #16]
 800a6ee:	e074      	b.n	800a7da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6fc:	691b      	ldr	r3, [r3, #16]
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	0151      	lsls	r1, r2, #5
 800a702:	69fa      	ldr	r2, [r7, #28]
 800a704:	440a      	add	r2, r1
 800a706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a70a:	0cdb      	lsrs	r3, r3, #19
 800a70c:	04db      	lsls	r3, r3, #19
 800a70e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	69fb      	ldr	r3, [r7, #28]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71c:	691b      	ldr	r3, [r3, #16]
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	0151      	lsls	r1, r2, #5
 800a722:	69fa      	ldr	r2, [r7, #28]
 800a724:	440a      	add	r2, r1
 800a726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a72a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a72e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	015a      	lsls	r2, r3, #5
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	4413      	add	r3, r2
 800a73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a740:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	6999      	ldr	r1, [r3, #24]
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	68db      	ldr	r3, [r3, #12]
 800a74a:	440b      	add	r3, r1
 800a74c:	1e59      	subs	r1, r3, #1
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	fbb1 f3f3 	udiv	r3, r1, r3
 800a756:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a758:	4b9d      	ldr	r3, [pc, #628]	; (800a9d0 <USB_EPStartXfer+0x370>)
 800a75a:	400b      	ands	r3, r1
 800a75c:	69b9      	ldr	r1, [r7, #24]
 800a75e:	0148      	lsls	r0, r1, #5
 800a760:	69f9      	ldr	r1, [r7, #28]
 800a762:	4401      	add	r1, r0
 800a764:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a768:	4313      	orrs	r3, r2
 800a76a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a778:	691a      	ldr	r2, [r3, #16]
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	699b      	ldr	r3, [r3, #24]
 800a77e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a782:	69b9      	ldr	r1, [r7, #24]
 800a784:	0148      	lsls	r0, r1, #5
 800a786:	69f9      	ldr	r1, [r7, #28]
 800a788:	4401      	add	r1, r0
 800a78a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a78e:	4313      	orrs	r3, r2
 800a790:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	791b      	ldrb	r3, [r3, #4]
 800a796:	2b01      	cmp	r3, #1
 800a798:	d11f      	bne.n	800a7da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a79a:	69bb      	ldr	r3, [r7, #24]
 800a79c:	015a      	lsls	r2, r3, #5
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	69ba      	ldr	r2, [r7, #24]
 800a7aa:	0151      	lsls	r1, r2, #5
 800a7ac:	69fa      	ldr	r2, [r7, #28]
 800a7ae:	440a      	add	r2, r1
 800a7b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a7b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c6:	691b      	ldr	r3, [r3, #16]
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	0151      	lsls	r1, r2, #5
 800a7cc:	69fa      	ldr	r2, [r7, #28]
 800a7ce:	440a      	add	r2, r1
 800a7d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a7d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	2b01      	cmp	r3, #1
 800a7de:	d14b      	bne.n	800a878 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d009      	beq.n	800a7fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	015a      	lsls	r2, r3, #5
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	4413      	add	r3, r2
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f4:	461a      	mov	r2, r3
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	791b      	ldrb	r3, [r3, #4]
 800a800:	2b01      	cmp	r3, #1
 800a802:	d128      	bne.n	800a856 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a804:	69fb      	ldr	r3, [r7, #28]
 800a806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a810:	2b00      	cmp	r3, #0
 800a812:	d110      	bne.n	800a836 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a814:	69bb      	ldr	r3, [r7, #24]
 800a816:	015a      	lsls	r2, r3, #5
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	4413      	add	r3, r2
 800a81c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69ba      	ldr	r2, [r7, #24]
 800a824:	0151      	lsls	r1, r2, #5
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	440a      	add	r2, r1
 800a82a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a82e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a832:	6013      	str	r3, [r2, #0]
 800a834:	e00f      	b.n	800a856 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a854:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a856:	69bb      	ldr	r3, [r7, #24]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	69ba      	ldr	r2, [r7, #24]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	69fa      	ldr	r2, [r7, #28]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a870:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a874:	6013      	str	r3, [r2, #0]
 800a876:	e133      	b.n	800aae0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	0151      	lsls	r1, r2, #5
 800a88a:	69fa      	ldr	r2, [r7, #28]
 800a88c:	440a      	add	r2, r1
 800a88e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a896:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	791b      	ldrb	r3, [r3, #4]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d015      	beq.n	800a8cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	699b      	ldr	r3, [r3, #24]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 811b 	beq.w	800aae0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a8aa:	69fb      	ldr	r3, [r7, #28]
 800a8ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8b2:	68bb      	ldr	r3, [r7, #8]
 800a8b4:	781b      	ldrb	r3, [r3, #0]
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c0:	69f9      	ldr	r1, [r7, #28]
 800a8c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	634b      	str	r3, [r1, #52]	; 0x34
 800a8ca:	e109      	b.n	800aae0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d110      	bne.n	800a8fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	0151      	lsls	r1, r2, #5
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	440a      	add	r2, r1
 800a8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	e00f      	b.n	800a91e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	015a      	lsls	r2, r3, #5
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4413      	add	r3, r2
 800a906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	69fa      	ldr	r2, [r7, #28]
 800a912:	440a      	add	r2, r1
 800a914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a91c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	6919      	ldr	r1, [r3, #16]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	781a      	ldrb	r2, [r3, #0]
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	699b      	ldr	r3, [r3, #24]
 800a92a:	b298      	uxth	r0, r3
 800a92c:	79fb      	ldrb	r3, [r7, #7]
 800a92e:	9300      	str	r3, [sp, #0]
 800a930:	4603      	mov	r3, r0
 800a932:	68f8      	ldr	r0, [r7, #12]
 800a934:	f000 fade 	bl	800aef4 <USB_WritePacket>
 800a938:	e0d2      	b.n	800aae0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a93a:	69bb      	ldr	r3, [r7, #24]
 800a93c:	015a      	lsls	r2, r3, #5
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	4413      	add	r3, r2
 800a942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a946:	691b      	ldr	r3, [r3, #16]
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	0151      	lsls	r1, r2, #5
 800a94c:	69fa      	ldr	r2, [r7, #28]
 800a94e:	440a      	add	r2, r1
 800a950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a954:	0cdb      	lsrs	r3, r3, #19
 800a956:	04db      	lsls	r3, r3, #19
 800a958:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a95a:	69bb      	ldr	r3, [r7, #24]
 800a95c:	015a      	lsls	r2, r3, #5
 800a95e:	69fb      	ldr	r3, [r7, #28]
 800a960:	4413      	add	r3, r2
 800a962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	0151      	lsls	r1, r2, #5
 800a96c:	69fa      	ldr	r2, [r7, #28]
 800a96e:	440a      	add	r2, r1
 800a970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a974:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a978:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a97c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d126      	bne.n	800a9d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	015a      	lsls	r2, r3, #5
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	4413      	add	r3, r2
 800a98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a992:	691a      	ldr	r2, [r3, #16]
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a99c:	69b9      	ldr	r1, [r7, #24]
 800a99e:	0148      	lsls	r0, r1, #5
 800a9a0:	69f9      	ldr	r1, [r7, #28]
 800a9a2:	4401      	add	r1, r0
 800a9a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	0151      	lsls	r1, r2, #5
 800a9be:	69fa      	ldr	r2, [r7, #28]
 800a9c0:	440a      	add	r2, r1
 800a9c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9ca:	6113      	str	r3, [r2, #16]
 800a9cc:	e03a      	b.n	800aa44 <USB_EPStartXfer+0x3e4>
 800a9ce:	bf00      	nop
 800a9d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	699a      	ldr	r2, [r3, #24]
 800a9d8:	68bb      	ldr	r3, [r7, #8]
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	1e5a      	subs	r2, r3, #1
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	8afa      	ldrh	r2, [r7, #22]
 800a9f0:	fb03 f202 	mul.w	r2, r3, r2
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a9f8:	69bb      	ldr	r3, [r7, #24]
 800a9fa:	015a      	lsls	r2, r3, #5
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	4413      	add	r3, r2
 800aa00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa04:	691a      	ldr	r2, [r3, #16]
 800aa06:	8afb      	ldrh	r3, [r7, #22]
 800aa08:	04d9      	lsls	r1, r3, #19
 800aa0a:	4b38      	ldr	r3, [pc, #224]	; (800aaec <USB_EPStartXfer+0x48c>)
 800aa0c:	400b      	ands	r3, r1
 800aa0e:	69b9      	ldr	r1, [r7, #24]
 800aa10:	0148      	lsls	r0, r1, #5
 800aa12:	69f9      	ldr	r1, [r7, #28]
 800aa14:	4401      	add	r1, r0
 800aa16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2a:	691a      	ldr	r2, [r3, #16]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	69db      	ldr	r3, [r3, #28]
 800aa30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa34:	69b9      	ldr	r1, [r7, #24]
 800aa36:	0148      	lsls	r0, r1, #5
 800aa38:	69f9      	ldr	r1, [r7, #28]
 800aa3a:	4401      	add	r1, r0
 800aa3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa40:	4313      	orrs	r3, r2
 800aa42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800aa44:	79fb      	ldrb	r3, [r7, #7]
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10d      	bne.n	800aa66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	691b      	ldr	r3, [r3, #16]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d009      	beq.n	800aa66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	6919      	ldr	r1, [r3, #16]
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	015a      	lsls	r2, r3, #5
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	4413      	add	r3, r2
 800aa5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa62:	460a      	mov	r2, r1
 800aa64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	791b      	ldrb	r3, [r3, #4]
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d128      	bne.n	800aac0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa74:	689b      	ldr	r3, [r3, #8]
 800aa76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d110      	bne.n	800aaa0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800aa7e:	69bb      	ldr	r3, [r7, #24]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	0151      	lsls	r1, r2, #5
 800aa90:	69fa      	ldr	r2, [r7, #28]
 800aa92:	440a      	add	r2, r1
 800aa94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa9c:	6013      	str	r3, [r2, #0]
 800aa9e:	e00f      	b.n	800aac0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	0151      	lsls	r1, r2, #5
 800aab2:	69fa      	ldr	r2, [r7, #28]
 800aab4:	440a      	add	r2, r1
 800aab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aabe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	015a      	lsls	r2, r3, #5
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	4413      	add	r3, r2
 800aac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	69ba      	ldr	r2, [r7, #24]
 800aad0:	0151      	lsls	r1, r2, #5
 800aad2:	69fa      	ldr	r2, [r7, #28]
 800aad4:	440a      	add	r2, r1
 800aad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aae0:	2300      	movs	r3, #0
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3720      	adds	r7, #32
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	1ff80000 	.word	0x1ff80000

0800aaf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aaf0:	b480      	push	{r7}
 800aaf2:	b087      	sub	sp, #28
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	4613      	mov	r3, r2
 800aafc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	785b      	ldrb	r3, [r3, #1]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	f040 80ce 	bne.w	800acae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d132      	bne.n	800ab80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	015a      	lsls	r2, r3, #5
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	4413      	add	r3, r2
 800ab22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab26:	691b      	ldr	r3, [r3, #16]
 800ab28:	693a      	ldr	r2, [r7, #16]
 800ab2a:	0151      	lsls	r1, r2, #5
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	440a      	add	r2, r1
 800ab30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ab38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ab3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	015a      	lsls	r2, r3, #5
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	4413      	add	r3, r2
 800ab46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab4a:	691b      	ldr	r3, [r3, #16]
 800ab4c:	693a      	ldr	r2, [r7, #16]
 800ab4e:	0151      	lsls	r1, r2, #5
 800ab50:	697a      	ldr	r2, [r7, #20]
 800ab52:	440a      	add	r2, r1
 800ab54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	015a      	lsls	r2, r3, #5
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	4413      	add	r3, r2
 800ab66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	693a      	ldr	r2, [r7, #16]
 800ab6e:	0151      	lsls	r1, r2, #5
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	440a      	add	r2, r1
 800ab74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab78:	0cdb      	lsrs	r3, r3, #19
 800ab7a:	04db      	lsls	r3, r3, #19
 800ab7c:	6113      	str	r3, [r2, #16]
 800ab7e:	e04e      	b.n	800ac1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ab80:	693b      	ldr	r3, [r7, #16]
 800ab82:	015a      	lsls	r2, r3, #5
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	4413      	add	r3, r2
 800ab88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	0151      	lsls	r1, r2, #5
 800ab92:	697a      	ldr	r2, [r7, #20]
 800ab94:	440a      	add	r2, r1
 800ab96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab9a:	0cdb      	lsrs	r3, r3, #19
 800ab9c:	04db      	lsls	r3, r3, #19
 800ab9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aba0:	693b      	ldr	r3, [r7, #16]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abac:	691b      	ldr	r3, [r3, #16]
 800abae:	693a      	ldr	r2, [r7, #16]
 800abb0:	0151      	lsls	r1, r2, #5
 800abb2:	697a      	ldr	r2, [r7, #20]
 800abb4:	440a      	add	r2, r1
 800abb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800abbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800abc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d903      	bls.n	800abd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	015a      	lsls	r2, r3, #5
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	4413      	add	r3, r2
 800abe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	693a      	ldr	r2, [r7, #16]
 800abe8:	0151      	lsls	r1, r2, #5
 800abea:	697a      	ldr	r2, [r7, #20]
 800abec:	440a      	add	r2, r1
 800abee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800abf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	015a      	lsls	r2, r3, #5
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	4413      	add	r3, r2
 800ac00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac04:	691a      	ldr	r2, [r3, #16]
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	699b      	ldr	r3, [r3, #24]
 800ac0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac0e:	6939      	ldr	r1, [r7, #16]
 800ac10:	0148      	lsls	r0, r1, #5
 800ac12:	6979      	ldr	r1, [r7, #20]
 800ac14:	4401      	add	r1, r0
 800ac16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ac1a:	4313      	orrs	r3, r2
 800ac1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ac1e:	79fb      	ldrb	r3, [r7, #7]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d11e      	bne.n	800ac62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	695b      	ldr	r3, [r3, #20]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d009      	beq.n	800ac40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	015a      	lsls	r2, r3, #5
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	4413      	add	r3, r2
 800ac34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac38:	461a      	mov	r2, r3
 800ac3a:	68bb      	ldr	r3, [r7, #8]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	693a      	ldr	r2, [r7, #16]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac5e:	6013      	str	r3, [r2, #0]
 800ac60:	e097      	b.n	800ad92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	0151      	lsls	r1, r2, #5
 800ac74:	697a      	ldr	r2, [r7, #20]
 800ac76:	440a      	add	r2, r1
 800ac78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ac80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ac82:	68bb      	ldr	r3, [r7, #8]
 800ac84:	699b      	ldr	r3, [r3, #24]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 8083 	beq.w	800ad92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	f003 030f 	and.w	r3, r3, #15
 800ac9c:	2101      	movs	r1, #1
 800ac9e:	fa01 f303 	lsl.w	r3, r1, r3
 800aca2:	6979      	ldr	r1, [r7, #20]
 800aca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aca8:	4313      	orrs	r3, r2
 800acaa:	634b      	str	r3, [r1, #52]	; 0x34
 800acac:	e071      	b.n	800ad92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	015a      	lsls	r2, r3, #5
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	4413      	add	r3, r2
 800acb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	693a      	ldr	r2, [r7, #16]
 800acbe:	0151      	lsls	r1, r2, #5
 800acc0:	697a      	ldr	r2, [r7, #20]
 800acc2:	440a      	add	r2, r1
 800acc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acc8:	0cdb      	lsrs	r3, r3, #19
 800acca:	04db      	lsls	r3, r3, #19
 800accc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	693a      	ldr	r2, [r7, #16]
 800acde:	0151      	lsls	r1, r2, #5
 800ace0:	697a      	ldr	r2, [r7, #20]
 800ace2:	440a      	add	r2, r1
 800ace4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ace8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acf0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	68da      	ldr	r2, [r3, #12]
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	68da      	ldr	r2, [r3, #12]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	0151      	lsls	r1, r2, #5
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	440a      	add	r2, r1
 800ad20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	015a      	lsls	r2, r3, #5
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	4413      	add	r3, r2
 800ad32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad36:	691a      	ldr	r2, [r3, #16]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	69db      	ldr	r3, [r3, #28]
 800ad3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad40:	6939      	ldr	r1, [r7, #16]
 800ad42:	0148      	lsls	r0, r1, #5
 800ad44:	6979      	ldr	r1, [r7, #20]
 800ad46:	4401      	add	r1, r0
 800ad48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ad50:	79fb      	ldrb	r3, [r7, #7]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d10d      	bne.n	800ad72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d009      	beq.n	800ad72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	6919      	ldr	r1, [r3, #16]
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad6e:	460a      	mov	r2, r1
 800ad70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	693a      	ldr	r2, [r7, #16]
 800ad82:	0151      	lsls	r1, r2, #5
 800ad84:	697a      	ldr	r2, [r7, #20]
 800ad86:	440a      	add	r2, r1
 800ad88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad92:	2300      	movs	r3, #0
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	371c      	adds	r7, #28
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr

0800ada0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b087      	sub	sp, #28
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
 800ada8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800adae:	2300      	movs	r3, #0
 800adb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	785b      	ldrb	r3, [r3, #1]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d14a      	bne.n	800ae54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800add2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800add6:	f040 8086 	bne.w	800aee6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	683a      	ldr	r2, [r7, #0]
 800adec:	7812      	ldrb	r2, [r2, #0]
 800adee:	0151      	lsls	r1, r2, #5
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	440a      	add	r2, r1
 800adf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800adfc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	781b      	ldrb	r3, [r3, #0]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	7812      	ldrb	r2, [r2, #0]
 800ae12:	0151      	lsls	r1, r2, #5
 800ae14:	693a      	ldr	r2, [r7, #16]
 800ae16:	440a      	add	r2, r1
 800ae18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3301      	adds	r3, #1
 800ae26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f242 7210 	movw	r2, #10000	; 0x2710
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d902      	bls.n	800ae38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	75fb      	strb	r3, [r7, #23]
          break;
 800ae36:	e056      	b.n	800aee6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae50:	d0e7      	beq.n	800ae22 <USB_EPStopXfer+0x82>
 800ae52:	e048      	b.n	800aee6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	015a      	lsls	r2, r3, #5
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae6c:	d13b      	bne.n	800aee6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	015a      	lsls	r2, r3, #5
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	683a      	ldr	r2, [r7, #0]
 800ae80:	7812      	ldrb	r2, [r2, #0]
 800ae82:	0151      	lsls	r1, r2, #5
 800ae84:	693a      	ldr	r2, [r7, #16]
 800ae86:	440a      	add	r2, r1
 800ae88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	781b      	ldrb	r3, [r3, #0]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	693b      	ldr	r3, [r7, #16]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	7812      	ldrb	r2, [r2, #0]
 800aea6:	0151      	lsls	r1, r2, #5
 800aea8:	693a      	ldr	r2, [r7, #16]
 800aeaa:	440a      	add	r2, r1
 800aeac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aeb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aeb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f242 7210 	movw	r2, #10000	; 0x2710
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d902      	bls.n	800aecc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800aec6:	2301      	movs	r3, #1
 800aec8:	75fb      	strb	r3, [r7, #23]
          break;
 800aeca:	e00c      	b.n	800aee6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	015a      	lsls	r2, r3, #5
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aee4:	d0e7      	beq.n	800aeb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800aee6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aee8:	4618      	mov	r0, r3
 800aeea:	371c      	adds	r7, #28
 800aeec:	46bd      	mov	sp, r7
 800aeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef2:	4770      	bx	lr

0800aef4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b089      	sub	sp, #36	; 0x24
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	60f8      	str	r0, [r7, #12]
 800aefc:	60b9      	str	r1, [r7, #8]
 800aefe:	4611      	mov	r1, r2
 800af00:	461a      	mov	r2, r3
 800af02:	460b      	mov	r3, r1
 800af04:	71fb      	strb	r3, [r7, #7]
 800af06:	4613      	mov	r3, r2
 800af08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800af0e:	68bb      	ldr	r3, [r7, #8]
 800af10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800af12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af16:	2b00      	cmp	r3, #0
 800af18:	d123      	bne.n	800af62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800af1a:	88bb      	ldrh	r3, [r7, #4]
 800af1c:	3303      	adds	r3, #3
 800af1e:	089b      	lsrs	r3, r3, #2
 800af20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800af22:	2300      	movs	r3, #0
 800af24:	61bb      	str	r3, [r7, #24]
 800af26:	e018      	b.n	800af5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800af28:	79fb      	ldrb	r3, [r7, #7]
 800af2a:	031a      	lsls	r2, r3, #12
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800af34:	461a      	mov	r2, r3
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	3301      	adds	r3, #1
 800af40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	3301      	adds	r3, #1
 800af46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af48:	69fb      	ldr	r3, [r7, #28]
 800af4a:	3301      	adds	r3, #1
 800af4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800af4e:	69fb      	ldr	r3, [r7, #28]
 800af50:	3301      	adds	r3, #1
 800af52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	3301      	adds	r3, #1
 800af58:	61bb      	str	r3, [r7, #24]
 800af5a:	69ba      	ldr	r2, [r7, #24]
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d3e2      	bcc.n	800af28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3724      	adds	r7, #36	; 0x24
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800af70:	b480      	push	{r7}
 800af72:	b08b      	sub	sp, #44	; 0x2c
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	4613      	mov	r3, r2
 800af7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800af86:	88fb      	ldrh	r3, [r7, #6]
 800af88:	089b      	lsrs	r3, r3, #2
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800af8e:	88fb      	ldrh	r3, [r7, #6]
 800af90:	f003 0303 	and.w	r3, r3, #3
 800af94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800af96:	2300      	movs	r3, #0
 800af98:	623b      	str	r3, [r7, #32]
 800af9a:	e014      	b.n	800afc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800af9c:	69bb      	ldr	r3, [r7, #24]
 800af9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa6:	601a      	str	r2, [r3, #0]
    pDest++;
 800afa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afaa:	3301      	adds	r3, #1
 800afac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb0:	3301      	adds	r3, #1
 800afb2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb6:	3301      	adds	r3, #1
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	3301      	adds	r3, #1
 800afbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800afc0:	6a3b      	ldr	r3, [r7, #32]
 800afc2:	3301      	adds	r3, #1
 800afc4:	623b      	str	r3, [r7, #32]
 800afc6:	6a3a      	ldr	r2, [r7, #32]
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d3e6      	bcc.n	800af9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800afce:	8bfb      	ldrh	r3, [r7, #30]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d01e      	beq.n	800b012 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800afde:	461a      	mov	r2, r3
 800afe0:	f107 0310 	add.w	r3, r7, #16
 800afe4:	6812      	ldr	r2, [r2, #0]
 800afe6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800afe8:	693a      	ldr	r2, [r7, #16]
 800afea:	6a3b      	ldr	r3, [r7, #32]
 800afec:	b2db      	uxtb	r3, r3
 800afee:	00db      	lsls	r3, r3, #3
 800aff0:	fa22 f303 	lsr.w	r3, r2, r3
 800aff4:	b2da      	uxtb	r2, r3
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	701a      	strb	r2, [r3, #0]
      i++;
 800affa:	6a3b      	ldr	r3, [r7, #32]
 800affc:	3301      	adds	r3, #1
 800affe:	623b      	str	r3, [r7, #32]
      pDest++;
 800b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b002:	3301      	adds	r3, #1
 800b004:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b006:	8bfb      	ldrh	r3, [r7, #30]
 800b008:	3b01      	subs	r3, #1
 800b00a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b00c:	8bfb      	ldrh	r3, [r7, #30]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1ea      	bne.n	800afe8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b014:	4618      	mov	r0, r3
 800b016:	372c      	adds	r7, #44	; 0x2c
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr

0800b020 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	785b      	ldrb	r3, [r3, #1]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d12c      	bne.n	800b096 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	db12      	blt.n	800b074 <USB_EPSetStall+0x54>
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d00f      	beq.n	800b074 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	015a      	lsls	r2, r3, #5
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4413      	add	r3, r2
 800b05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	68ba      	ldr	r2, [r7, #8]
 800b064:	0151      	lsls	r1, r2, #5
 800b066:	68fa      	ldr	r2, [r7, #12]
 800b068:	440a      	add	r2, r1
 800b06a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b06e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b072:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	015a      	lsls	r2, r3, #5
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	4413      	add	r3, r2
 800b07c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	68ba      	ldr	r2, [r7, #8]
 800b084:	0151      	lsls	r1, r2, #5
 800b086:	68fa      	ldr	r2, [r7, #12]
 800b088:	440a      	add	r2, r1
 800b08a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b08e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	e02b      	b.n	800b0ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	015a      	lsls	r2, r3, #5
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	4413      	add	r3, r2
 800b09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	db12      	blt.n	800b0ce <USB_EPSetStall+0xae>
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d00f      	beq.n	800b0ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	015a      	lsls	r2, r3, #5
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	4413      	add	r3, r2
 800b0b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	68ba      	ldr	r2, [r7, #8]
 800b0be:	0151      	lsls	r1, r2, #5
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	440a      	add	r2, r1
 800b0c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b0cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	015a      	lsls	r2, r3, #5
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	0151      	lsls	r1, r2, #5
 800b0e0:	68fa      	ldr	r2, [r7, #12]
 800b0e2:	440a      	add	r2, r1
 800b0e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b0ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b085      	sub	sp, #20
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
 800b104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	785b      	ldrb	r3, [r3, #1]
 800b114:	2b01      	cmp	r3, #1
 800b116:	d128      	bne.n	800b16a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b136:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	791b      	ldrb	r3, [r3, #4]
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	d003      	beq.n	800b148 <USB_EPClearStall+0x4c>
 800b140:	683b      	ldr	r3, [r7, #0]
 800b142:	791b      	ldrb	r3, [r3, #4]
 800b144:	2b02      	cmp	r3, #2
 800b146:	d138      	bne.n	800b1ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	015a      	lsls	r2, r3, #5
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	4413      	add	r3, r2
 800b150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	68ba      	ldr	r2, [r7, #8]
 800b158:	0151      	lsls	r1, r2, #5
 800b15a:	68fa      	ldr	r2, [r7, #12]
 800b15c:	440a      	add	r2, r1
 800b15e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	e027      	b.n	800b1ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	015a      	lsls	r2, r3, #5
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	4413      	add	r3, r2
 800b172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	0151      	lsls	r1, r2, #5
 800b17c:	68fa      	ldr	r2, [r7, #12]
 800b17e:	440a      	add	r2, r1
 800b180:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b184:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b188:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	791b      	ldrb	r3, [r3, #4]
 800b18e:	2b03      	cmp	r3, #3
 800b190:	d003      	beq.n	800b19a <USB_EPClearStall+0x9e>
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	791b      	ldrb	r3, [r3, #4]
 800b196:	2b02      	cmp	r3, #2
 800b198:	d10f      	bne.n	800b1ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	0151      	lsls	r1, r2, #5
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	440a      	add	r2, r1
 800b1b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b1ba:	2300      	movs	r3, #0
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3714      	adds	r7, #20
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68fa      	ldr	r2, [r7, #12]
 800b1e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b1ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	78fb      	ldrb	r3, [r7, #3]
 800b1f6:	011b      	lsls	r3, r3, #4
 800b1f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b202:	4313      	orrs	r3, r2
 800b204:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b22e:	f023 0303 	bic.w	r3, r3, #3
 800b232:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b242:	f023 0302 	bic.w	r3, r3, #2
 800b246:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3714      	adds	r7, #20
 800b24e:	46bd      	mov	sp, r7
 800b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b254:	4770      	bx	lr

0800b256 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b256:	b480      	push	{r7}
 800b258:	b085      	sub	sp, #20
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b270:	f023 0303 	bic.w	r3, r3, #3
 800b274:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b27c:	685b      	ldr	r3, [r3, #4]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	699b      	ldr	r3, [r3, #24]
 800b2aa:	68fa      	ldr	r2, [r7, #12]
 800b2ac:	4013      	ands	r3, r2
 800b2ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr

0800b2be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2be:	b480      	push	{r7}
 800b2c0:	b085      	sub	sp, #20
 800b2c2:	af00      	add	r7, sp, #0
 800b2c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d0:	699b      	ldr	r3, [r3, #24]
 800b2d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2da:	69db      	ldr	r3, [r3, #28]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	4013      	ands	r3, r2
 800b2e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	0c1b      	lsrs	r3, r3, #16
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3714      	adds	r7, #20
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f0:	4770      	bx	lr

0800b2f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b2f2:	b480      	push	{r7}
 800b2f4:	b085      	sub	sp, #20
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b304:	699b      	ldr	r3, [r3, #24]
 800b306:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b30e:	69db      	ldr	r3, [r3, #28]
 800b310:	68ba      	ldr	r2, [r7, #8]
 800b312:	4013      	ands	r3, r2
 800b314:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	b29b      	uxth	r3, r3
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3714      	adds	r7, #20
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b326:	b480      	push	{r7}
 800b328:	b085      	sub	sp, #20
 800b32a:	af00      	add	r7, sp, #0
 800b32c:	6078      	str	r0, [r7, #4]
 800b32e:	460b      	mov	r3, r1
 800b330:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b336:	78fb      	ldrb	r3, [r7, #3]
 800b338:	015a      	lsls	r2, r3, #5
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	4413      	add	r3, r2
 800b33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34c:	695b      	ldr	r3, [r3, #20]
 800b34e:	68ba      	ldr	r2, [r7, #8]
 800b350:	4013      	ands	r3, r2
 800b352:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b354:	68bb      	ldr	r3, [r7, #8]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b362:	b480      	push	{r7}
 800b364:	b087      	sub	sp, #28
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
 800b36a:	460b      	mov	r3, r1
 800b36c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b372:	697b      	ldr	r3, [r7, #20]
 800b374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b384:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b386:	78fb      	ldrb	r3, [r7, #3]
 800b388:	f003 030f 	and.w	r3, r3, #15
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	fa22 f303 	lsr.w	r3, r2, r3
 800b392:	01db      	lsls	r3, r3, #7
 800b394:	b2db      	uxtb	r3, r3
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	4313      	orrs	r3, r2
 800b39a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b39c:	78fb      	ldrb	r3, [r7, #3]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a8:	689b      	ldr	r3, [r3, #8]
 800b3aa:	693a      	ldr	r2, [r7, #16]
 800b3ac:	4013      	ands	r3, r2
 800b3ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3b0:	68bb      	ldr	r3, [r7, #8]
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	371c      	adds	r7, #28
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr

0800b3be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b3be:	b480      	push	{r7}
 800b3c0:	b083      	sub	sp, #12
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	f003 0301 	and.w	r3, r3, #1
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr

0800b3da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b3da:	b480      	push	{r7}
 800b3dc:	b085      	sub	sp, #20
 800b3de:	af00      	add	r7, sp, #0
 800b3e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	68fa      	ldr	r2, [r7, #12]
 800b3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b3f8:	f023 0307 	bic.w	r3, r3, #7
 800b3fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b404:	685b      	ldr	r3, [r3, #4]
 800b406:	68fa      	ldr	r2, [r7, #12]
 800b408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b410:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b412:	2300      	movs	r3, #0
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	460b      	mov	r3, r1
 800b42a:	607a      	str	r2, [r7, #4]
 800b42c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	333c      	adds	r3, #60	; 0x3c
 800b436:	3304      	adds	r3, #4
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b43c:	693b      	ldr	r3, [r7, #16]
 800b43e:	4a26      	ldr	r2, [pc, #152]	; (800b4d8 <USB_EP0_OutStart+0xb8>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d90a      	bls.n	800b45a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b450:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b454:	d101      	bne.n	800b45a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b456:	2300      	movs	r3, #0
 800b458:	e037      	b.n	800b4ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b460:	461a      	mov	r2, r3
 800b462:	2300      	movs	r3, #0
 800b464:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b478:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b480:	691b      	ldr	r3, [r3, #16]
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b488:	f043 0318 	orr.w	r3, r3, #24
 800b48c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b494:	691b      	ldr	r3, [r3, #16]
 800b496:	697a      	ldr	r2, [r7, #20]
 800b498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b49c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b4a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d10f      	bne.n	800b4c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	697a      	ldr	r2, [r7, #20]
 800b4be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b4c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	371c      	adds	r7, #28
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	4f54300a 	.word	0x4f54300a

0800b4dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	4a13      	ldr	r2, [pc, #76]	; (800b540 <USB_CoreReset+0x64>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d901      	bls.n	800b4fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e01b      	b.n	800b532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	691b      	ldr	r3, [r3, #16]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	daf2      	bge.n	800b4e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b502:	2300      	movs	r3, #0
 800b504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f043 0201 	orr.w	r2, r3, #1
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	3301      	adds	r3, #1
 800b516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	4a09      	ldr	r2, [pc, #36]	; (800b540 <USB_CoreReset+0x64>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d901      	bls.n	800b524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	e006      	b.n	800b532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	691b      	ldr	r3, [r3, #16]
 800b528:	f003 0301 	and.w	r3, r3, #1
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d0f0      	beq.n	800b512 <USB_CoreReset+0x36>

  return HAL_OK;
 800b530:	2300      	movs	r3, #0
}
 800b532:	4618      	mov	r0, r3
 800b534:	3714      	adds	r7, #20
 800b536:	46bd      	mov	sp, r7
 800b538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53c:	4770      	bx	lr
 800b53e:	bf00      	nop
 800b540:	00030d40 	.word	0x00030d40

0800b544 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b084      	sub	sp, #16
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b54e:	2300      	movs	r3, #0
 800b550:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f001 fcb2 	bl	800cebe <VL53L0X_get_offset_calibration_data_micro_meter>
 800b55a:	4603      	mov	r3, r0
 800b55c:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800b55e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
	...

0800b56c <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800b56c:	b5b0      	push	{r4, r5, r7, lr}
 800b56e:	b096      	sub	sp, #88	; 0x58
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b574:	2300      	movs	r3, #0
 800b576:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800b57a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d107      	bne.n	800b592 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b582:	2200      	movs	r2, #0
 800b584:	2188      	movs	r1, #136	; 0x88
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f004 feaa 	bl	80102e0 <VL53L0X_WrByte>
 800b58c:	4603      	mov	r3, r0
 800b58e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2200      	movs	r2, #0
 800b596:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b5a0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b5aa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	4a9e      	ldr	r2, [pc, #632]	; (800b82c <VL53L0X_DataInit+0x2c0>)
 800b5b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a9d      	ldr	r2, [pc, #628]	; (800b830 <VL53L0X_DataInit+0x2c4>)
 800b5ba:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b5c4:	f107 0310 	add.w	r3, r7, #16
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fac2 	bl	800bb54 <VL53L0X_GetDeviceParameters>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800b5d6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d112      	bne.n	800b604 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f103 0410 	add.w	r4, r3, #16
 800b5ec:	f107 0510 	add.w	r5, r7, #16
 800b5f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b5fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b5fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b600:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2264      	movs	r2, #100	; 0x64
 800b608:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b612:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b61c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b626:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2201      	movs	r2, #1
 800b62e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b632:	2201      	movs	r2, #1
 800b634:	2180      	movs	r1, #128	; 0x80
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f004 fe52 	bl	80102e0 <VL53L0X_WrByte>
 800b63c:	4603      	mov	r3, r0
 800b63e:	461a      	mov	r2, r3
 800b640:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b644:	4313      	orrs	r3, r2
 800b646:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b64a:	2201      	movs	r2, #1
 800b64c:	21ff      	movs	r1, #255	; 0xff
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f004 fe46 	bl	80102e0 <VL53L0X_WrByte>
 800b654:	4603      	mov	r3, r0
 800b656:	461a      	mov	r2, r3
 800b658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b65c:	4313      	orrs	r3, r2
 800b65e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b662:	2200      	movs	r2, #0
 800b664:	2100      	movs	r1, #0
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f004 fe3a 	bl	80102e0 <VL53L0X_WrByte>
 800b66c:	4603      	mov	r3, r0
 800b66e:	461a      	mov	r2, r3
 800b670:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b674:	4313      	orrs	r3, r2
 800b676:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b67a:	f107 030f 	add.w	r3, r7, #15
 800b67e:	461a      	mov	r2, r3
 800b680:	2191      	movs	r1, #145	; 0x91
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f004 feae 	bl	80103e4 <VL53L0X_RdByte>
 800b688:	4603      	mov	r3, r0
 800b68a:	461a      	mov	r2, r3
 800b68c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b690:	4313      	orrs	r3, r2
 800b692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b696:	7bfa      	ldrb	r2, [r7, #15]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b69e:	2201      	movs	r2, #1
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f004 fe1c 	bl	80102e0 <VL53L0X_WrByte>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	461a      	mov	r2, r3
 800b6ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	21ff      	movs	r1, #255	; 0xff
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f004 fe10 	bl	80102e0 <VL53L0X_WrByte>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	2180      	movs	r1, #128	; 0x80
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f004 fe04 	bl	80102e0 <VL53L0X_WrByte>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	461a      	mov	r2, r3
 800b6dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	653b      	str	r3, [r7, #80]	; 0x50
 800b6ea:	e014      	b.n	800b716 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800b6ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d114      	bne.n	800b71e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b6f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	2201      	movs	r2, #1
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 fd35 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
 800b702:	4603      	mov	r3, r0
 800b704:	461a      	mov	r2, r3
 800b706:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b70a:	4313      	orrs	r3, r2
 800b70c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b712:	3301      	adds	r3, #1
 800b714:	653b      	str	r3, [r7, #80]	; 0x50
 800b716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b718:	2b05      	cmp	r3, #5
 800b71a:	dde7      	ble.n	800b6ec <VL53L0X_DataInit+0x180>
 800b71c:	e000      	b.n	800b720 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800b71e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b720:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b724:	2b00      	cmp	r3, #0
 800b726:	d107      	bne.n	800b738 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b728:	2200      	movs	r2, #0
 800b72a:	2102      	movs	r1, #2
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 fd1d 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
 800b732:	4603      	mov	r3, r0
 800b734:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b738:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d107      	bne.n	800b750 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b740:	2200      	movs	r2, #0
 800b742:	2103      	movs	r1, #3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 fd11 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
 800b74a:	4603      	mov	r3, r0
 800b74c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b750:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b754:	2b00      	cmp	r3, #0
 800b756:	d107      	bne.n	800b768 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b758:	2200      	movs	r2, #0
 800b75a:	2104      	movs	r1, #4
 800b75c:	6878      	ldr	r0, [r7, #4]
 800b75e:	f000 fd05 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
 800b762:	4603      	mov	r3, r0
 800b764:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b768:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d107      	bne.n	800b780 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b770:	2200      	movs	r2, #0
 800b772:	2105      	movs	r1, #5
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 fcf9 	bl	800c16c <VL53L0X_SetLimitCheckEnable>
 800b77a:	4603      	mov	r3, r0
 800b77c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800b780:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b784:	2b00      	cmp	r3, #0
 800b786:	d108      	bne.n	800b79a <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b788:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b78c:	2100      	movs	r1, #0
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f000 fd9c 	bl	800c2cc <VL53L0X_SetLimitCheckValue>
 800b794:	4603      	mov	r3, r0
 800b796:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b79a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d108      	bne.n	800b7b4 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b7a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b7a6:	2101      	movs	r1, #1
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f000 fd8f 	bl	800c2cc <VL53L0X_SetLimitCheckValue>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b7b4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d108      	bne.n	800b7ce <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b7bc:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b7c0:	2102      	movs	r1, #2
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fd82 	bl	800c2cc <VL53L0X_SetLimitCheckValue>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b7ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d107      	bne.n	800b7e6 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	2103      	movs	r1, #3
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	f000 fd76 	bl	800c2cc <VL53L0X_SetLimitCheckValue>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b7e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d10f      	bne.n	800b80e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	22ff      	movs	r2, #255	; 0xff
 800b7f2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b7f6:	22ff      	movs	r2, #255	; 0xff
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f004 fd70 	bl	80102e0 <VL53L0X_WrByte>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2201      	movs	r2, #1
 800b80a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b80e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b812:	2b00      	cmp	r3, #0
 800b814:	d103      	bne.n	800b81e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	2200      	movs	r2, #0
 800b81a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800b81e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b822:	4618      	mov	r0, r3
 800b824:	3758      	adds	r7, #88	; 0x58
 800b826:	46bd      	mov	sp, r7
 800b828:	bdb0      	pop	{r4, r5, r7, pc}
 800b82a:	bf00      	nop
 800b82c:	00016b85 	.word	0x00016b85
 800b830:	000970a4 	.word	0x000970a4

0800b834 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800b834:	b5b0      	push	{r4, r5, r7, lr}
 800b836:	b09e      	sub	sp, #120	; 0x78
 800b838:	af02      	add	r7, sp, #8
 800b83a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b83c:	2300      	movs	r3, #0
 800b83e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b842:	f107 031c 	add.w	r3, r7, #28
 800b846:	2240      	movs	r2, #64	; 0x40
 800b848:	2100      	movs	r1, #0
 800b84a:	4618      	mov	r0, r3
 800b84c:	f007 fbc2 	bl	8012fd4 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800b854:	2300      	movs	r3, #0
 800b856:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800b862:	2300      	movs	r3, #0
 800b864:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800b866:	2300      	movs	r3, #0
 800b868:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800b870:	2101      	movs	r1, #1
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f002 fa79 	bl	800dd6a <VL53L0X_get_info_from_device>
 800b878:	4603      	mov	r3, r0
 800b87a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b884:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b88c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800b890:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b894:	2b01      	cmp	r3, #1
 800b896:	d80d      	bhi.n	800b8b4 <VL53L0X_StaticInit+0x80>
 800b898:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d102      	bne.n	800b8a6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800b8a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8a2:	2b20      	cmp	r3, #32
 800b8a4:	d806      	bhi.n	800b8b4 <VL53L0X_StaticInit+0x80>
 800b8a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d10e      	bne.n	800b8cc <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800b8ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b8b0:	2b0c      	cmp	r3, #12
 800b8b2:	d90b      	bls.n	800b8cc <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b8b4:	f107 0218 	add.w	r2, r7, #24
 800b8b8:	f107 0314 	add.w	r3, r7, #20
 800b8bc:	4619      	mov	r1, r3
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 fcf8 	bl	800d2b4 <VL53L0X_perform_ref_spad_management>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b8ca:	e009      	b.n	800b8e0 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b8cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f001 fef9 	bl	800d6cc <VL53L0X_set_reference_spads>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800b8e0:	4b94      	ldr	r3, [pc, #592]	; (800bb34 <VL53L0X_StaticInit+0x300>)
 800b8e2:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800b8e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10f      	bne.n	800b90c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b8f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800b8f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d104      	bne.n	800b908 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b904:	66bb      	str	r3, [r7, #104]	; 0x68
 800b906:	e001      	b.n	800b90c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800b908:	4b8a      	ldr	r3, [pc, #552]	; (800bb34 <VL53L0X_StaticInit+0x300>)
 800b90a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b90c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b910:	2b00      	cmp	r3, #0
 800b912:	d106      	bne.n	800b922 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f003 fdcc 	bl	800f4b4 <VL53L0X_load_tuning_settings>
 800b91c:	4603      	mov	r3, r0
 800b91e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b922:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b926:	2b00      	cmp	r3, #0
 800b928:	d10a      	bne.n	800b940 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b92a:	2300      	movs	r3, #0
 800b92c:	9300      	str	r3, [sp, #0]
 800b92e:	2304      	movs	r3, #4
 800b930:	2200      	movs	r2, #0
 800b932:	2100      	movs	r1, #0
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f001 f8f1 	bl	800cb1c <VL53L0X_SetGpioConfig>
 800b93a:	4603      	mov	r3, r0
 800b93c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b940:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b944:	2b00      	cmp	r3, #0
 800b946:	d121      	bne.n	800b98c <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b948:	2201      	movs	r2, #1
 800b94a:	21ff      	movs	r1, #255	; 0xff
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f004 fcc7 	bl	80102e0 <VL53L0X_WrByte>
 800b952:	4603      	mov	r3, r0
 800b954:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b958:	f107 031a 	add.w	r3, r7, #26
 800b95c:	461a      	mov	r2, r3
 800b95e:	2184      	movs	r1, #132	; 0x84
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f004 fd69 	bl	8010438 <VL53L0X_RdWord>
 800b966:	4603      	mov	r3, r0
 800b968:	461a      	mov	r2, r3
 800b96a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b96e:	4313      	orrs	r3, r2
 800b970:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b974:	2200      	movs	r2, #0
 800b976:	21ff      	movs	r1, #255	; 0xff
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f004 fcb1 	bl	80102e0 <VL53L0X_WrByte>
 800b97e:	4603      	mov	r3, r0
 800b980:	461a      	mov	r2, r3
 800b982:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b986:	4313      	orrs	r3, r2
 800b988:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b98c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b990:	2b00      	cmp	r3, #0
 800b992:	d105      	bne.n	800b9a0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b994:	8b7b      	ldrh	r3, [r7, #26]
 800b996:	011b      	lsls	r3, r3, #4
 800b998:	461a      	mov	r2, r3
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b9a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d108      	bne.n	800b9ba <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b9a8:	f107 031c 	add.w	r3, r7, #28
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f8d0 	bl	800bb54 <VL53L0X_GetDeviceParameters>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b9ba:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d110      	bne.n	800b9e4 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b9c2:	f107 0319 	add.w	r3, r7, #25
 800b9c6:	4619      	mov	r1, r3
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f992 	bl	800bcf2 <VL53L0X_GetFractionEnable>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b9d4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b9dc:	7e7a      	ldrb	r2, [r7, #25]
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b9e4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10e      	bne.n	800ba0a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f103 0410 	add.w	r4, r3, #16
 800b9f2:	f107 051c 	add.w	r5, r7, #28
 800b9f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b9fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b9fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ba00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ba02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ba06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800ba0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d111      	bne.n	800ba36 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800ba12:	f107 0319 	add.w	r3, r7, #25
 800ba16:	461a      	mov	r2, r3
 800ba18:	2101      	movs	r1, #1
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f004 fce2 	bl	80103e4 <VL53L0X_RdByte>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800ba26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d103      	bne.n	800ba36 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800ba2e:	7e7a      	ldrb	r2, [r7, #25]
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800ba36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d107      	bne.n	800ba4e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800ba3e:	2200      	movs	r2, #0
 800ba40:	2100      	movs	r1, #0
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f9ca 	bl	800bddc <VL53L0X_SetSequenceStepEnable>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800ba4e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d107      	bne.n	800ba66 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800ba56:	2200      	movs	r2, #0
 800ba58:	2102      	movs	r1, #2
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f9be 	bl	800bddc <VL53L0X_SetSequenceStepEnable>
 800ba60:	4603      	mov	r3, r0
 800ba62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800ba66:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d103      	bne.n	800ba76 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2203      	movs	r2, #3
 800ba72:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800ba76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d109      	bne.n	800ba92 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800ba7e:	f107 0313 	add.w	r3, r7, #19
 800ba82:	461a      	mov	r2, r3
 800ba84:	2100      	movs	r1, #0
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f990 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ba92:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ba9a:	7cfa      	ldrb	r2, [r7, #19]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800baa2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d109      	bne.n	800babe <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800baaa:	f107 0313 	add.w	r3, r7, #19
 800baae:	461a      	mov	r2, r3
 800bab0:	2101      	movs	r1, #1
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f97a 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800bab8:	4603      	mov	r3, r0
 800baba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800babe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d103      	bne.n	800bace <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bac6:	7cfa      	ldrb	r2, [r7, #19]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800bace:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800bad6:	f107 030c 	add.w	r3, r7, #12
 800bada:	461a      	mov	r2, r3
 800badc:	2103      	movs	r1, #3
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f002 fec4 	bl	800e86c <get_sequence_step_timeout>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800baea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d103      	bne.n	800bafa <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800bafa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d109      	bne.n	800bb16 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800bb02:	f107 030c 	add.w	r3, r7, #12
 800bb06:	461a      	mov	r2, r3
 800bb08:	2104      	movs	r1, #4
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f002 feae 	bl	800e86c <get_sequence_step_timeout>
 800bb10:	4603      	mov	r3, r0
 800bb12:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bb16:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d103      	bne.n	800bb26 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3770      	adds	r7, #112	; 0x70
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bdb0      	pop	{r4, r5, r7, pc}
 800bb32:	bf00      	nop
 800bb34:	20000224 	.word	0x20000224

0800bb38 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800bb38:	b480      	push	{r7}
 800bb3a:	b085      	sub	sp, #20
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800bb40:	239d      	movs	r3, #157	; 0x9d
 800bb42:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800bb44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	4619      	mov	r1, r3
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f8b0 	bl	800bccc <VL53L0X_GetDeviceMode>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d107      	bne.n	800bb88 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	3308      	adds	r3, #8
 800bb7c:	4619      	mov	r1, r3
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 fa78 	bl	800c074 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800bb88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d102      	bne.n	800bb96 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	2200      	movs	r2, #0
 800bb94:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800bb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d107      	bne.n	800bbae <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	3310      	adds	r3, #16
 800bba2:	4619      	mov	r1, r3
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 faae 	bl	800c106 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800bbae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d107      	bne.n	800bbc6 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	3314      	adds	r3, #20
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f7ff fcc1 	bl	800b544 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800bbc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d134      	bne.n	800bc38 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800bbce:	2300      	movs	r3, #0
 800bbd0:	60bb      	str	r3, [r7, #8]
 800bbd2:	e02a      	b.n	800bc2a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800bbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d12a      	bne.n	800bc32 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	b299      	uxth	r1, r3
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	3308      	adds	r3, #8
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	683a      	ldr	r2, [r7, #0]
 800bbe8:	4413      	add	r3, r2
 800bbea:	3304      	adds	r3, #4
 800bbec:	461a      	mov	r2, r3
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f000 fbce 	bl	800c390 <VL53L0X_GetLimitCheckValue>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	7bfb      	ldrb	r3, [r7, #15]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800bbfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d117      	bne.n	800bc36 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	b299      	uxth	r1, r3
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	3318      	adds	r3, #24
 800bc0e:	683a      	ldr	r2, [r7, #0]
 800bc10:	4413      	add	r3, r2
 800bc12:	461a      	mov	r2, r3
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 fb35 	bl	800c284 <VL53L0X_GetLimitCheckEnable>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	4313      	orrs	r3, r2
 800bc22:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	3301      	adds	r3, #1
 800bc28:	60bb      	str	r3, [r7, #8]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b05      	cmp	r3, #5
 800bc2e:	ddd1      	ble.n	800bbd4 <VL53L0X_GetDeviceParameters+0x80>
 800bc30:	e002      	b.n	800bc38 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800bc32:	bf00      	nop
 800bc34:	e000      	b.n	800bc38 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800bc36:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d107      	bne.n	800bc50 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	333c      	adds	r3, #60	; 0x3c
 800bc44:	4619      	mov	r1, r3
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fc30 	bl	800c4ac <VL53L0X_GetWrapAroundCheckEnable>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800bc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d107      	bne.n	800bc68 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	3304      	adds	r3, #4
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 f879 	bl	800bd56 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800bc64:	4603      	mov	r3, r0
 800bc66:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	3710      	adds	r7, #16
 800bc70:	46bd      	mov	sp, r7
 800bc72:	bd80      	pop	{r7, pc}

0800bc74 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800bc74:	b480      	push	{r7}
 800bc76:	b085      	sub	sp, #20
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc80:	2300      	movs	r3, #0
 800bc82:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	2b15      	cmp	r3, #21
 800bc88:	bf8c      	ite	hi
 800bc8a:	2201      	movhi	r2, #1
 800bc8c:	2200      	movls	r2, #0
 800bc8e:	b2d2      	uxtb	r2, r2
 800bc90:	2a00      	cmp	r2, #0
 800bc92:	d10e      	bne.n	800bcb2 <VL53L0X_SetDeviceMode+0x3e>
 800bc94:	2201      	movs	r2, #1
 800bc96:	409a      	lsls	r2, r3
 800bc98:	4b0b      	ldr	r3, [pc, #44]	; (800bcc8 <VL53L0X_SetDeviceMode+0x54>)
 800bc9a:	4013      	ands	r3, r2
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	bf14      	ite	ne
 800bca0:	2301      	movne	r3, #1
 800bca2:	2300      	moveq	r3, #0
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d003      	beq.n	800bcb2 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	78fa      	ldrb	r2, [r7, #3]
 800bcae:	741a      	strb	r2, [r3, #16]
		break;
 800bcb0:	e001      	b.n	800bcb6 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800bcb2:	23f8      	movs	r3, #248	; 0xf8
 800bcb4:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bcb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	0030000b 	.word	0x0030000b

0800bccc <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b085      	sub	sp, #20
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	7c1a      	ldrb	r2, [r3, #16]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr

0800bcf2 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800bd00:	683a      	ldr	r2, [r7, #0]
 800bd02:	2109      	movs	r1, #9
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f004 fb6d 	bl	80103e4 <VL53L0X_RdByte>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800bd0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	b2da      	uxtb	r2, r3
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bd24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3710      	adds	r7, #16
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}

0800bd30 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f003 fa26 	bl	800f192 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800bd4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3710      	adds	r7, #16
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b084      	sub	sp, #16
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd60:	2300      	movs	r3, #0
 800bd62:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f003 faf3 	bl	800f352 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800bd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	3710      	adds	r7, #16
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd80      	pop	{r7, pc}

0800bd7c <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b084      	sub	sp, #16
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	460b      	mov	r3, r1
 800bd86:	70fb      	strb	r3, [r7, #3]
 800bd88:	4613      	mov	r3, r2
 800bd8a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800bd90:	78ba      	ldrb	r2, [r7, #2]
 800bd92:	78fb      	ldrb	r3, [r7, #3]
 800bd94:	4619      	mov	r1, r3
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f002 ff3b 	bl	800ec12 <VL53L0X_set_vcsel_pulse_period>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800bda0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b086      	sub	sp, #24
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	60f8      	str	r0, [r7, #12]
 800bdb4:	460b      	mov	r3, r1
 800bdb6:	607a      	str	r2, [r7, #4]
 800bdb8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdba:	2300      	movs	r3, #0
 800bdbc:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800bdbe:	7afb      	ldrb	r3, [r7, #11]
 800bdc0:	687a      	ldr	r2, [r7, #4]
 800bdc2:	4619      	mov	r1, r3
 800bdc4:	68f8      	ldr	r0, [r7, #12]
 800bdc6:	f003 f9ad 	bl	800f124 <VL53L0X_get_vcsel_pulse_period>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800bdce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3718      	adds	r7, #24
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
	...

0800bddc <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b086      	sub	sp, #24
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
 800bde4:	460b      	mov	r3, r1
 800bde6:	70fb      	strb	r3, [r7, #3]
 800bde8:	4613      	mov	r3, r2
 800bdea:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdec:	2300      	movs	r3, #0
 800bdee:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800bdf0:	2300      	movs	r3, #0
 800bdf2:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bdf8:	f107 030f 	add.w	r3, r7, #15
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	2101      	movs	r1, #1
 800be00:	6878      	ldr	r0, [r7, #4]
 800be02:	f004 faef 	bl	80103e4 <VL53L0X_RdByte>
 800be06:	4603      	mov	r3, r0
 800be08:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800be0a:	7bfb      	ldrb	r3, [r7, #15]
 800be0c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800be0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800be12:	2b00      	cmp	r3, #0
 800be14:	d15a      	bne.n	800becc <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800be16:	78bb      	ldrb	r3, [r7, #2]
 800be18:	2b01      	cmp	r3, #1
 800be1a:	d12b      	bne.n	800be74 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800be1c:	78fb      	ldrb	r3, [r7, #3]
 800be1e:	2b04      	cmp	r3, #4
 800be20:	d825      	bhi.n	800be6e <VL53L0X_SetSequenceStepEnable+0x92>
 800be22:	a201      	add	r2, pc, #4	; (adr r2, 800be28 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800be24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be28:	0800be3d 	.word	0x0800be3d
 800be2c:	0800be47 	.word	0x0800be47
 800be30:	0800be51 	.word	0x0800be51
 800be34:	0800be5b 	.word	0x0800be5b
 800be38:	0800be65 	.word	0x0800be65
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800be3c:	7dbb      	ldrb	r3, [r7, #22]
 800be3e:	f043 0310 	orr.w	r3, r3, #16
 800be42:	75bb      	strb	r3, [r7, #22]
				break;
 800be44:	e043      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800be46:	7dbb      	ldrb	r3, [r7, #22]
 800be48:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800be4c:	75bb      	strb	r3, [r7, #22]
				break;
 800be4e:	e03e      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800be50:	7dbb      	ldrb	r3, [r7, #22]
 800be52:	f043 0304 	orr.w	r3, r3, #4
 800be56:	75bb      	strb	r3, [r7, #22]
				break;
 800be58:	e039      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800be5a:	7dbb      	ldrb	r3, [r7, #22]
 800be5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be60:	75bb      	strb	r3, [r7, #22]
				break;
 800be62:	e034      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800be64:	7dbb      	ldrb	r3, [r7, #22]
 800be66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800be6a:	75bb      	strb	r3, [r7, #22]
				break;
 800be6c:	e02f      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be6e:	23fc      	movs	r3, #252	; 0xfc
 800be70:	75fb      	strb	r3, [r7, #23]
 800be72:	e02c      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800be74:	78fb      	ldrb	r3, [r7, #3]
 800be76:	2b04      	cmp	r3, #4
 800be78:	d825      	bhi.n	800bec6 <VL53L0X_SetSequenceStepEnable+0xea>
 800be7a:	a201      	add	r2, pc, #4	; (adr r2, 800be80 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800be7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be80:	0800be95 	.word	0x0800be95
 800be84:	0800be9f 	.word	0x0800be9f
 800be88:	0800bea9 	.word	0x0800bea9
 800be8c:	0800beb3 	.word	0x0800beb3
 800be90:	0800bebd 	.word	0x0800bebd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800be94:	7dbb      	ldrb	r3, [r7, #22]
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	75bb      	strb	r3, [r7, #22]
				break;
 800be9c:	e017      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800be9e:	7dbb      	ldrb	r3, [r7, #22]
 800bea0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800bea4:	75bb      	strb	r3, [r7, #22]
				break;
 800bea6:	e012      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800bea8:	7dbb      	ldrb	r3, [r7, #22]
 800beaa:	f023 0304 	bic.w	r3, r3, #4
 800beae:	75bb      	strb	r3, [r7, #22]
				break;
 800beb0:	e00d      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800beb2:	7dbb      	ldrb	r3, [r7, #22]
 800beb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beb8:	75bb      	strb	r3, [r7, #22]
				break;
 800beba:	e008      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800bebc:	7dbb      	ldrb	r3, [r7, #22]
 800bebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bec2:	75bb      	strb	r3, [r7, #22]
				break;
 800bec4:	e003      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bec6:	23fc      	movs	r3, #252	; 0xfc
 800bec8:	75fb      	strb	r3, [r7, #23]
 800beca:	e000      	b.n	800bece <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800becc:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800bece:	7bfb      	ldrb	r3, [r7, #15]
 800bed0:	7dba      	ldrb	r2, [r7, #22]
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d01e      	beq.n	800bf14 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800bed6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d107      	bne.n	800beee <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800bede:	7dbb      	ldrb	r3, [r7, #22]
 800bee0:	461a      	mov	r2, r3
 800bee2:	2101      	movs	r1, #1
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f004 f9fb 	bl	80102e0 <VL53L0X_WrByte>
 800beea:	4603      	mov	r3, r0
 800beec:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800beee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	7dba      	ldrb	r2, [r7, #22]
 800befa:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800befe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d106      	bne.n	800bf14 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	695b      	ldr	r3, [r3, #20]
 800bf0a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800bf0c:	6939      	ldr	r1, [r7, #16]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7ff ff0e 	bl	800bd30 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bf14:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3718      	adds	r7, #24
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	607b      	str	r3, [r7, #4]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	72fb      	strb	r3, [r7, #11]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf32:	2300      	movs	r3, #0
 800bf34:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	2b04      	cmp	r3, #4
 800bf40:	d836      	bhi.n	800bfb0 <sequence_step_enabled+0x90>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <sequence_step_enabled+0x28>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf5d 	.word	0x0800bf5d
 800bf4c:	0800bf6f 	.word	0x0800bf6f
 800bf50:	0800bf81 	.word	0x0800bf81
 800bf54:	0800bf93 	.word	0x0800bf93
 800bf58:	0800bfa5 	.word	0x0800bfa5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800bf5c:	7abb      	ldrb	r3, [r7, #10]
 800bf5e:	111b      	asrs	r3, r3, #4
 800bf60:	b2db      	uxtb	r3, r3
 800bf62:	f003 0301 	and.w	r3, r3, #1
 800bf66:	b2da      	uxtb	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	701a      	strb	r2, [r3, #0]
		break;
 800bf6c:	e022      	b.n	800bfb4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800bf6e:	7abb      	ldrb	r3, [r7, #10]
 800bf70:	10db      	asrs	r3, r3, #3
 800bf72:	b2db      	uxtb	r3, r3
 800bf74:	f003 0301 	and.w	r3, r3, #1
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	701a      	strb	r2, [r3, #0]
		break;
 800bf7e:	e019      	b.n	800bfb4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800bf80:	7abb      	ldrb	r3, [r7, #10]
 800bf82:	109b      	asrs	r3, r3, #2
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	f003 0301 	and.w	r3, r3, #1
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	701a      	strb	r2, [r3, #0]
		break;
 800bf90:	e010      	b.n	800bfb4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800bf92:	7abb      	ldrb	r3, [r7, #10]
 800bf94:	119b      	asrs	r3, r3, #6
 800bf96:	b2db      	uxtb	r3, r3
 800bf98:	f003 0301 	and.w	r3, r3, #1
 800bf9c:	b2da      	uxtb	r2, r3
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	701a      	strb	r2, [r3, #0]
		break;
 800bfa2:	e007      	b.n	800bfb4 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800bfa4:	7abb      	ldrb	r3, [r7, #10]
 800bfa6:	09db      	lsrs	r3, r3, #7
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	701a      	strb	r2, [r3, #0]
		break;
 800bfae:	e001      	b.n	800bfb4 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfb0:	23fc      	movs	r3, #252	; 0xfc
 800bfb2:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bfb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	371c      	adds	r7, #28
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc2:	4770      	bx	lr

0800bfc4 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b084      	sub	sp, #16
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bfd6:	f107 030e 	add.w	r3, r7, #14
 800bfda:	461a      	mov	r2, r3
 800bfdc:	2101      	movs	r1, #1
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f004 fa00 	bl	80103e4 <VL53L0X_RdByte>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800bfe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d107      	bne.n	800c000 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800bff0:	7bba      	ldrb	r2, [r7, #14]
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	2100      	movs	r1, #0
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff ff92 	bl	800bf20 <sequence_step_enabled>
 800bffc:	4603      	mov	r3, r0
 800bffe:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d108      	bne.n	800c01a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800c008:	7bba      	ldrb	r2, [r7, #14]
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	3302      	adds	r3, #2
 800c00e:	2101      	movs	r1, #1
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f7ff ff85 	bl	800bf20 <sequence_step_enabled>
 800c016:	4603      	mov	r3, r0
 800c018:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c01a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d108      	bne.n	800c034 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800c022:	7bba      	ldrb	r2, [r7, #14]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	3301      	adds	r3, #1
 800c028:	2102      	movs	r1, #2
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7ff ff78 	bl	800bf20 <sequence_step_enabled>
 800c030:	4603      	mov	r3, r0
 800c032:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c034:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d108      	bne.n	800c04e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800c03c:	7bba      	ldrb	r2, [r7, #14]
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	3303      	adds	r3, #3
 800c042:	2103      	movs	r1, #3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff ff6b 	bl	800bf20 <sequence_step_enabled>
 800c04a:	4603      	mov	r3, r0
 800c04c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c04e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d108      	bne.n	800c068 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800c056:	7bba      	ldrb	r2, [r7, #14]
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	3304      	adds	r3, #4
 800c05c:	2104      	movs	r1, #4
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7ff ff5e 	bl	800bf20 <sequence_step_enabled>
 800c064:	4603      	mov	r3, r0
 800c066:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c068:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3710      	adds	r7, #16
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}

0800c074 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b084      	sub	sp, #16
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c07e:	2300      	movs	r3, #0
 800c080:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800c082:	f107 030c 	add.w	r3, r7, #12
 800c086:	461a      	mov	r2, r3
 800c088:	21f8      	movs	r1, #248	; 0xf8
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f004 f9d4 	bl	8010438 <VL53L0X_RdWord>
 800c090:	4603      	mov	r3, r0
 800c092:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800c094:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d108      	bne.n	800c0ae <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800c09c:	f107 0308 	add.w	r3, r7, #8
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	2104      	movs	r1, #4
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f004 f9ff 	bl	80104a8 <VL53L0X_RdDWord>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c0ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d10c      	bne.n	800c0d0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800c0b6:	89bb      	ldrh	r3, [r7, #12]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d005      	beq.n	800c0c8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	89ba      	ldrh	r2, [r7, #12]
 800c0c0:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	3710      	adds	r7, #16
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	bd80      	pop	{r7, pc}

0800c0dc <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	7f1b      	ldrb	r3, [r3, #28]
 800c0ee:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	7bba      	ldrb	r2, [r7, #14]
 800c0f4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800c0f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800c106:	b580      	push	{r7, lr}
 800c108:	b086      	sub	sp, #24
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c110:	2300      	movs	r3, #0
 800c112:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800c114:	f107 030e 	add.w	r3, r7, #14
 800c118:	461a      	mov	r2, r3
 800c11a:	2120      	movs	r1, #32
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f004 f98b 	bl	8010438 <VL53L0X_RdWord>
 800c122:	4603      	mov	r3, r0
 800c124:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800c126:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d118      	bne.n	800c160 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800c12e:	89fb      	ldrh	r3, [r7, #14]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d109      	bne.n	800c148 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6a1b      	ldr	r3, [r3, #32]
 800c138:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2200      	movs	r2, #0
 800c144:	771a      	strb	r2, [r3, #28]
 800c146:	e00b      	b.n	800c160 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800c148:	89fb      	ldrh	r3, [r7, #14]
 800c14a:	00db      	lsls	r3, r3, #3
 800c14c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	693a      	ldr	r2, [r7, #16]
 800c158:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2201      	movs	r2, #1
 800c15e:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c160:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	807b      	strh	r3, [r7, #2]
 800c178:	4613      	mov	r3, r2
 800c17a:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c17c:	2300      	movs	r3, #0
 800c17e:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800c184:	2300      	movs	r3, #0
 800c186:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c18c:	887b      	ldrh	r3, [r7, #2]
 800c18e:	2b05      	cmp	r3, #5
 800c190:	d902      	bls.n	800c198 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c192:	23fc      	movs	r3, #252	; 0xfc
 800c194:	75fb      	strb	r3, [r7, #23]
 800c196:	e05b      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800c198:	787b      	ldrb	r3, [r7, #1]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d106      	bne.n	800c1ac <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	73bb      	strb	r3, [r7, #14]
 800c1aa:	e00a      	b.n	800c1c2 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c1ac:	887b      	ldrh	r3, [r7, #2]
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	330c      	adds	r3, #12
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	4413      	add	r3, r2
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800c1c2:	887b      	ldrh	r3, [r7, #2]
 800c1c4:	2b05      	cmp	r3, #5
 800c1c6:	d841      	bhi.n	800c24c <VL53L0X_SetLimitCheckEnable+0xe0>
 800c1c8:	a201      	add	r2, pc, #4	; (adr r2, 800c1d0 <VL53L0X_SetLimitCheckEnable+0x64>)
 800c1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ce:	bf00      	nop
 800c1d0:	0800c1e9 	.word	0x0800c1e9
 800c1d4:	0800c1f3 	.word	0x0800c1f3
 800c1d8:	0800c209 	.word	0x0800c209
 800c1dc:	0800c213 	.word	0x0800c213
 800c1e0:	0800c21d 	.word	0x0800c21d
 800c1e4:	0800c235 	.word	0x0800c235

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	7bfa      	ldrb	r2, [r7, #15]
 800c1ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800c1f0:	e02e      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	2144      	movs	r1, #68	; 0x44
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f004 f893 	bl	8010328 <VL53L0X_WrWord>
 800c202:	4603      	mov	r3, r0
 800c204:	75fb      	strb	r3, [r7, #23]

			break;
 800c206:	e023      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	7bfa      	ldrb	r2, [r7, #15]
 800c20c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800c210:	e01e      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	7bfa      	ldrb	r2, [r7, #15]
 800c216:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800c21a:	e019      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800c21c:	7bbb      	ldrb	r3, [r7, #14]
 800c21e:	005b      	lsls	r3, r3, #1
 800c220:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800c222:	7b7b      	ldrb	r3, [r7, #13]
 800c224:	22fe      	movs	r2, #254	; 0xfe
 800c226:	2160      	movs	r1, #96	; 0x60
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f004 f8a7 	bl	801037c <VL53L0X_UpdateByte>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800c232:	e00d      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800c234:	7bbb      	ldrb	r3, [r7, #14]
 800c236:	011b      	lsls	r3, r3, #4
 800c238:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800c23a:	7b7b      	ldrb	r3, [r7, #13]
 800c23c:	22ef      	movs	r2, #239	; 0xef
 800c23e:	2160      	movs	r1, #96	; 0x60
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f004 f89b 	bl	801037c <VL53L0X_UpdateByte>
 800c246:	4603      	mov	r3, r0
 800c248:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800c24a:	e001      	b.n	800c250 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c24c:	23fc      	movs	r3, #252	; 0xfc
 800c24e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c250:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10f      	bne.n	800c278 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800c258:	787b      	ldrb	r3, [r7, #1]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c25e:	887b      	ldrh	r3, [r7, #2]
 800c260:	687a      	ldr	r2, [r7, #4]
 800c262:	4413      	add	r3, r2
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c26a:	e005      	b.n	800c278 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c26c:	887b      	ldrh	r3, [r7, #2]
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	4413      	add	r3, r2
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c278:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3718      	adds	r7, #24
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	460b      	mov	r3, r1
 800c28e:	607a      	str	r2, [r7, #4]
 800c290:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c292:	2300      	movs	r3, #0
 800c294:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800c296:	897b      	ldrh	r3, [r7, #10]
 800c298:	2b05      	cmp	r3, #5
 800c29a:	d905      	bls.n	800c2a8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c29c:	23fc      	movs	r3, #252	; 0xfc
 800c29e:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	701a      	strb	r2, [r3, #0]
 800c2a6:	e008      	b.n	800c2ba <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800c2a8:	897b      	ldrh	r3, [r7, #10]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	4413      	add	r3, r2
 800c2ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b2:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	7dba      	ldrb	r2, [r7, #22]
 800c2b8:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c2ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
	...

0800c2cc <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	60f8      	str	r0, [r7, #12]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	607a      	str	r2, [r7, #4]
 800c2d8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800c2de:	897b      	ldrh	r3, [r7, #10]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2e8:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800c2ea:	7dbb      	ldrb	r3, [r7, #22]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d107      	bne.n	800c300 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c2f0:	897b      	ldrh	r3, [r7, #10]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	330c      	adds	r3, #12
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	4413      	add	r3, r2
 800c2fa:	687a      	ldr	r2, [r7, #4]
 800c2fc:	605a      	str	r2, [r3, #4]
 800c2fe:	e040      	b.n	800c382 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800c300:	897b      	ldrh	r3, [r7, #10]
 800c302:	2b05      	cmp	r3, #5
 800c304:	d830      	bhi.n	800c368 <VL53L0X_SetLimitCheckValue+0x9c>
 800c306:	a201      	add	r2, pc, #4	; (adr r2, 800c30c <VL53L0X_SetLimitCheckValue+0x40>)
 800c308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c30c:	0800c325 	.word	0x0800c325
 800c310:	0800c32d 	.word	0x0800c32d
 800c314:	0800c343 	.word	0x0800c343
 800c318:	0800c34b 	.word	0x0800c34b
 800c31c:	0800c353 	.word	0x0800c353
 800c320:	0800c353 	.word	0x0800c353

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	687a      	ldr	r2, [r7, #4]
 800c328:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800c32a:	e01f      	b.n	800c36c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c330:	b29b      	uxth	r3, r3
 800c332:	461a      	mov	r2, r3
 800c334:	2144      	movs	r1, #68	; 0x44
 800c336:	68f8      	ldr	r0, [r7, #12]
 800c338:	f003 fff6 	bl	8010328 <VL53L0X_WrWord>
 800c33c:	4603      	mov	r3, r0
 800c33e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800c340:	e014      	b.n	800c36c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800c348:	e010      	b.n	800c36c <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800c350:	e00c      	b.n	800c36c <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800c356:	b29b      	uxth	r3, r3
 800c358:	461a      	mov	r2, r3
 800c35a:	2164      	movs	r1, #100	; 0x64
 800c35c:	68f8      	ldr	r0, [r7, #12]
 800c35e:	f003 ffe3 	bl	8010328 <VL53L0X_WrWord>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800c366:	e001      	b.n	800c36c <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c368:	23fc      	movs	r3, #252	; 0xfc
 800c36a:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c36c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d106      	bne.n	800c382 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c374:	897b      	ldrh	r3, [r7, #10]
 800c376:	68fa      	ldr	r2, [r7, #12]
 800c378:	330c      	adds	r3, #12
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c382:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3718      	adds	r7, #24
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	bf00      	nop

0800c390 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	460b      	mov	r3, r1
 800c39a:	607a      	str	r2, [r7, #4]
 800c39c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c39e:	2300      	movs	r3, #0
 800c3a0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800c3a6:	897b      	ldrh	r3, [r7, #10]
 800c3a8:	2b05      	cmp	r3, #5
 800c3aa:	d847      	bhi.n	800c43c <VL53L0X_GetLimitCheckValue+0xac>
 800c3ac:	a201      	add	r2, pc, #4	; (adr r2, 800c3b4 <VL53L0X_GetLimitCheckValue+0x24>)
 800c3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3b2:	bf00      	nop
 800c3b4:	0800c3cd 	.word	0x0800c3cd
 800c3b8:	0800c3d9 	.word	0x0800c3d9
 800c3bc:	0800c3ff 	.word	0x0800c3ff
 800c3c0:	0800c40b 	.word	0x0800c40b
 800c3c4:	0800c417 	.word	0x0800c417
 800c3c8:	0800c417 	.word	0x0800c417

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3d0:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	77bb      	strb	r3, [r7, #30]
		break;
 800c3d6:	e033      	b.n	800c440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c3d8:	f107 0316 	add.w	r3, r7, #22
 800c3dc:	461a      	mov	r2, r3
 800c3de:	2144      	movs	r1, #68	; 0x44
 800c3e0:	68f8      	ldr	r0, [r7, #12]
 800c3e2:	f004 f829 	bl	8010438 <VL53L0X_RdWord>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c3ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d102      	bne.n	800c3f8 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c3f2:	8afb      	ldrh	r3, [r7, #22]
 800c3f4:	025b      	lsls	r3, r3, #9
 800c3f6:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	77bb      	strb	r3, [r7, #30]
		break;
 800c3fc:	e020      	b.n	800c440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c402:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800c404:	2300      	movs	r3, #0
 800c406:	77bb      	strb	r3, [r7, #30]
		break;
 800c408:	e01a      	b.n	800c440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c40e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800c410:	2300      	movs	r3, #0
 800c412:	77bb      	strb	r3, [r7, #30]
		break;
 800c414:	e014      	b.n	800c440 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c416:	f107 0316 	add.w	r3, r7, #22
 800c41a:	461a      	mov	r2, r3
 800c41c:	2164      	movs	r1, #100	; 0x64
 800c41e:	68f8      	ldr	r0, [r7, #12]
 800c420:	f004 f80a 	bl	8010438 <VL53L0X_RdWord>
 800c424:	4603      	mov	r3, r0
 800c426:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c428:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d102      	bne.n	800c436 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c430:	8afb      	ldrh	r3, [r7, #22]
 800c432:	025b      	lsls	r3, r3, #9
 800c434:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800c436:	2300      	movs	r3, #0
 800c438:	77bb      	strb	r3, [r7, #30]
		break;
 800c43a:	e001      	b.n	800c440 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c43c:	23fc      	movs	r3, #252	; 0xfc
 800c43e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c440:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d12a      	bne.n	800c49e <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800c448:	7fbb      	ldrb	r3, [r7, #30]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d124      	bne.n	800c498 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d110      	bne.n	800c476 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800c454:	897b      	ldrh	r3, [r7, #10]
 800c456:	68fa      	ldr	r2, [r7, #12]
 800c458:	330c      	adds	r3, #12
 800c45a:	009b      	lsls	r3, r3, #2
 800c45c:	4413      	add	r3, r2
 800c45e:	685b      	ldr	r3, [r3, #4]
 800c460:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	69ba      	ldr	r2, [r7, #24]
 800c466:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c468:	897b      	ldrh	r3, [r7, #10]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	4413      	add	r3, r2
 800c46e:	2200      	movs	r2, #0
 800c470:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c474:	e013      	b.n	800c49e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	69ba      	ldr	r2, [r7, #24]
 800c47a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c47c:	897b      	ldrh	r3, [r7, #10]
 800c47e:	68fa      	ldr	r2, [r7, #12]
 800c480:	330c      	adds	r3, #12
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	4413      	add	r3, r2
 800c486:	69ba      	ldr	r2, [r7, #24]
 800c488:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c48a:	897b      	ldrh	r3, [r7, #10]
 800c48c:	68fa      	ldr	r2, [r7, #12]
 800c48e:	4413      	add	r3, r2
 800c490:	2201      	movs	r2, #1
 800c492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c496:	e002      	b.n	800c49e <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	69ba      	ldr	r2, [r7, #24]
 800c49c:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c49e:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3720      	adds	r7, #32
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}
 800c4aa:	bf00      	nop

0800c4ac <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800c4ba:	f107 030e 	add.w	r3, r7, #14
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f003 ff8e 	bl	80103e4 <VL53L0X_RdByte>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800c4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10e      	bne.n	800c4f2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800c4d4:	7bba      	ldrb	r2, [r7, #14]
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	b25b      	sxtb	r3, r3
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	da03      	bge.n	800c4ec <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	e002      	b.n	800c4f2 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c4f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d104      	bne.n	800c504 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781a      	ldrb	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c504:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c518:	2300      	movs	r3, #0
 800c51a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c51c:	f107 030e 	add.w	r3, r7, #14
 800c520:	4619      	mov	r1, r3
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f7ff fbd2 	bl	800bccc <VL53L0X_GetDeviceMode>
 800c528:	4603      	mov	r3, r0
 800c52a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c52c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d107      	bne.n	800c544 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c534:	7bbb      	ldrb	r3, [r7, #14]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d104      	bne.n	800c544 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 f898 	bl	800c670 <VL53L0X_StartMeasurement>
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c544:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d104      	bne.n	800c556 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f001 fb3f 	bl	800dbd0 <VL53L0X_measurement_poll_for_completion>
 800c552:	4603      	mov	r3, r0
 800c554:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c55e:	7bbb      	ldrb	r3, [r7, #14]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2203      	movs	r2, #3
 800c568:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800c56c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c570:	4618      	mov	r0, r3
 800c572:	3710      	adds	r7, #16
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b086      	sub	sp, #24
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	60b9      	str	r1, [r7, #8]
 800c582:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c584:	2300      	movs	r3, #0
 800c586:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c588:	2301      	movs	r3, #1
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	68b9      	ldr	r1, [r7, #8]
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f001 fae1 	bl	800db56 <VL53L0X_perform_ref_calibration>
 800c594:	4603      	mov	r3, r0
 800c596:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c598:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b086      	sub	sp, #24
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c5ba:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800c5bc:	7dbb      	ldrb	r3, [r7, #22]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d005      	beq.n	800c5ce <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c5c2:	7dbb      	ldrb	r3, [r7, #22]
 800c5c4:	2b02      	cmp	r3, #2
 800c5c6:	d002      	beq.n	800c5ce <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c5c8:	7dbb      	ldrb	r3, [r7, #22]
 800c5ca:	2b03      	cmp	r3, #3
 800c5cc:	d147      	bne.n	800c65e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c5ce:	f107 030c 	add.w	r3, r7, #12
 800c5d2:	f107 0210 	add.w	r2, r7, #16
 800c5d6:	2101      	movs	r1, #1
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 fbc3 	bl	800cd64 <VL53L0X_GetInterruptThresholds>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c5e8:	d803      	bhi.n	800c5f2 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800c5ea:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800c5ec:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c5f0:	d935      	bls.n	800c65e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800c5f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d131      	bne.n	800c65e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c5fa:	78fb      	ldrb	r3, [r7, #3]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d006      	beq.n	800c60e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c600:	491a      	ldr	r1, [pc, #104]	; (800c66c <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f002 ff56 	bl	800f4b4 <VL53L0X_load_tuning_settings>
 800c608:	4603      	mov	r3, r0
 800c60a:	75fb      	strb	r3, [r7, #23]
 800c60c:	e027      	b.n	800c65e <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c60e:	2204      	movs	r2, #4
 800c610:	21ff      	movs	r1, #255	; 0xff
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f003 fe64 	bl	80102e0 <VL53L0X_WrByte>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	7dfb      	ldrb	r3, [r7, #23]
 800c61e:	4313      	orrs	r3, r2
 800c620:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c622:	2200      	movs	r2, #0
 800c624:	2170      	movs	r1, #112	; 0x70
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f003 fe5a 	bl	80102e0 <VL53L0X_WrByte>
 800c62c:	4603      	mov	r3, r0
 800c62e:	461a      	mov	r2, r3
 800c630:	7dfb      	ldrb	r3, [r7, #23]
 800c632:	4313      	orrs	r3, r2
 800c634:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c636:	2200      	movs	r2, #0
 800c638:	21ff      	movs	r1, #255	; 0xff
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f003 fe50 	bl	80102e0 <VL53L0X_WrByte>
 800c640:	4603      	mov	r3, r0
 800c642:	461a      	mov	r2, r3
 800c644:	7dfb      	ldrb	r3, [r7, #23]
 800c646:	4313      	orrs	r3, r2
 800c648:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c64a:	2200      	movs	r2, #0
 800c64c:	2180      	movs	r1, #128	; 0x80
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f003 fe46 	bl	80102e0 <VL53L0X_WrByte>
 800c654:	4603      	mov	r3, r0
 800c656:	461a      	mov	r2, r3
 800c658:	7dfb      	ldrb	r3, [r7, #23]
 800c65a:	4313      	orrs	r3, r2
 800c65c:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800c65e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c662:	4618      	mov	r0, r3
 800c664:	3718      	adds	r7, #24
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}
 800c66a:	bf00      	nop
 800c66c:	2000006c 	.word	0x2000006c

0800c670 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b086      	sub	sp, #24
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c678:	2300      	movs	r3, #0
 800c67a:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c67c:	2301      	movs	r3, #1
 800c67e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c680:	f107 030e 	add.w	r3, r7, #14
 800c684:	4619      	mov	r1, r3
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff fb20 	bl	800bccc <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c68c:	2201      	movs	r2, #1
 800c68e:	2180      	movs	r1, #128	; 0x80
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f003 fe25 	bl	80102e0 <VL53L0X_WrByte>
 800c696:	4603      	mov	r3, r0
 800c698:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c69a:	2201      	movs	r2, #1
 800c69c:	21ff      	movs	r1, #255	; 0xff
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f003 fe1e 	bl	80102e0 <VL53L0X_WrByte>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f003 fe17 	bl	80102e0 <VL53L0X_WrByte>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c6bc:	461a      	mov	r2, r3
 800c6be:	2191      	movs	r1, #145	; 0x91
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f003 fe0d 	bl	80102e0 <VL53L0X_WrByte>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f003 fe06 	bl	80102e0 <VL53L0X_WrByte>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c6d8:	2200      	movs	r2, #0
 800c6da:	21ff      	movs	r1, #255	; 0xff
 800c6dc:	6878      	ldr	r0, [r7, #4]
 800c6de:	f003 fdff 	bl	80102e0 <VL53L0X_WrByte>
 800c6e2:	4603      	mov	r3, r0
 800c6e4:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	2180      	movs	r1, #128	; 0x80
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f003 fdf8 	bl	80102e0 <VL53L0X_WrByte>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800c6f4:	7bbb      	ldrb	r3, [r7, #14]
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d054      	beq.n	800c7a4 <VL53L0X_StartMeasurement+0x134>
 800c6fa:	2b03      	cmp	r3, #3
 800c6fc:	dc6c      	bgt.n	800c7d8 <VL53L0X_StartMeasurement+0x168>
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d002      	beq.n	800c708 <VL53L0X_StartMeasurement+0x98>
 800c702:	2b01      	cmp	r3, #1
 800c704:	d034      	beq.n	800c770 <VL53L0X_StartMeasurement+0x100>
 800c706:	e067      	b.n	800c7d8 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c708:	2201      	movs	r2, #1
 800c70a:	2100      	movs	r1, #0
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f003 fde7 	bl	80102e0 <VL53L0X_WrByte>
 800c712:	4603      	mov	r3, r0
 800c714:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800c716:	7bfb      	ldrb	r3, [r7, #15]
 800c718:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800c71a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d15d      	bne.n	800c7de <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c722:	2300      	movs	r3, #0
 800c724:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d008      	beq.n	800c73e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800c72c:	f107 030d 	add.w	r3, r7, #13
 800c730:	461a      	mov	r2, r3
 800c732:	2100      	movs	r1, #0
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f003 fe55 	bl	80103e4 <VL53L0X_RdByte>
 800c73a:	4603      	mov	r3, r0
 800c73c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3301      	adds	r3, #1
 800c742:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c744:	7b7a      	ldrb	r2, [r7, #13]
 800c746:	7bfb      	ldrb	r3, [r7, #15]
 800c748:	4013      	ands	r3, r2
 800c74a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c74c:	7bfa      	ldrb	r2, [r7, #15]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d107      	bne.n	800c762 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800c752:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d103      	bne.n	800c762 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c75a:	693b      	ldr	r3, [r7, #16]
 800c75c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c760:	d3e1      	bcc.n	800c726 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c768:	d339      	bcc.n	800c7de <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c76a:	23f9      	movs	r3, #249	; 0xf9
 800c76c:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800c76e:	e036      	b.n	800c7de <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c770:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d105      	bne.n	800c784 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c778:	2101      	movs	r1, #1
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f7ff ff12 	bl	800c5a4 <VL53L0X_CheckAndLoadInterruptSettings>
 800c780:	4603      	mov	r3, r0
 800c782:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c784:	2202      	movs	r2, #2
 800c786:	2100      	movs	r1, #0
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f003 fda9 	bl	80102e0 <VL53L0X_WrByte>
 800c78e:	4603      	mov	r3, r0
 800c790:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d123      	bne.n	800c7e2 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2204      	movs	r2, #4
 800c79e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c7a2:	e01e      	b.n	800c7e2 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d105      	bne.n	800c7b8 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c7ac:	2101      	movs	r1, #1
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff fef8 	bl	800c5a4 <VL53L0X_CheckAndLoadInterruptSettings>
 800c7b4:	4603      	mov	r3, r0
 800c7b6:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c7b8:	2204      	movs	r2, #4
 800c7ba:	2100      	movs	r1, #0
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f003 fd8f 	bl	80102e0 <VL53L0X_WrByte>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c7c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d10b      	bne.n	800c7e6 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2204      	movs	r2, #4
 800c7d2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c7d6:	e006      	b.n	800c7e6 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c7d8:	23f8      	movs	r3, #248	; 0xf8
 800c7da:	75fb      	strb	r3, [r7, #23]
 800c7dc:	e004      	b.n	800c7e8 <VL53L0X_StartMeasurement+0x178>
		break;
 800c7de:	bf00      	nop
 800c7e0:	e002      	b.n	800c7e8 <VL53L0X_StartMeasurement+0x178>
		break;
 800c7e2:	bf00      	nop
 800c7e4:	e000      	b.n	800c7e8 <VL53L0X_StartMeasurement+0x178>
		break;
 800c7e6:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c7e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3718      	adds	r7, #24
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c7fe:	2300      	movs	r3, #0
 800c800:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c808:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c80a:	7bbb      	ldrb	r3, [r7, #14]
 800c80c:	2b04      	cmp	r3, #4
 800c80e:	d112      	bne.n	800c836 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c810:	f107 0308 	add.w	r3, r7, #8
 800c814:	4619      	mov	r1, r3
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fb1a 	bl	800ce50 <VL53L0X_GetInterruptMaskStatus>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	2b04      	cmp	r3, #4
 800c824:	d103      	bne.n	800c82e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	2201      	movs	r2, #1
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	e01c      	b.n	800c868 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2200      	movs	r2, #0
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	e018      	b.n	800c868 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c836:	f107 030d 	add.w	r3, r7, #13
 800c83a:	461a      	mov	r2, r3
 800c83c:	2114      	movs	r1, #20
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f003 fdd0 	bl	80103e4 <VL53L0X_RdByte>
 800c844:	4603      	mov	r3, r0
 800c846:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d10b      	bne.n	800c868 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800c850:	7b7b      	ldrb	r3, [r7, #13]
 800c852:	f003 0301 	and.w	r3, r3, #1
 800c856:	2b00      	cmp	r3, #0
 800c858:	d003      	beq.n	800c862 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	2201      	movs	r2, #1
 800c85e:	701a      	strb	r2, [r3, #0]
 800c860:	e002      	b.n	800c868 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2200      	movs	r2, #0
 800c866:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c868:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c86c:	4618      	mov	r0, r3
 800c86e:	3710      	adds	r7, #16
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}

0800c874 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c874:	b5b0      	push	{r4, r5, r7, lr}
 800c876:	b096      	sub	sp, #88	; 0x58
 800c878:	af02      	add	r7, sp, #8
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c87e:	2300      	movs	r3, #0
 800c880:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c884:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c888:	230c      	movs	r3, #12
 800c88a:	2114      	movs	r1, #20
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f003 fcfb 	bl	8010288 <VL53L0X_ReadMulti>
 800c892:	4603      	mov	r3, r0
 800c894:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800c898:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	f040 80d1 	bne.w	800ca44 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c8a8:	683b      	ldr	r3, [r7, #0]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c8ae:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c8b2:	b29b      	uxth	r3, r3
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	b29a      	uxth	r2, r3
 800c8b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c8bc:	b29b      	uxth	r3, r3
 800c8be:	4413      	add	r3, r2
 800c8c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c8c4:	683b      	ldr	r3, [r7, #0]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c8ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	021b      	lsls	r3, r3, #8
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	4413      	add	r3, r2
 800c8dc:	b29b      	uxth	r3, r3
 800c8de:	025b      	lsls	r3, r3, #9
 800c8e0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8e6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c8e8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c8ec:	b29b      	uxth	r3, r3
 800c8ee:	021b      	lsls	r3, r3, #8
 800c8f0:	b29a      	uxth	r2, r3
 800c8f2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c8fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c902:	025b      	lsls	r3, r3, #9
 800c904:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c90a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c90e:	b29b      	uxth	r3, r3
 800c910:	021b      	lsls	r3, r3, #8
 800c912:	b29a      	uxth	r2, r3
 800c914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c918:	b29b      	uxth	r3, r3
 800c91a:	4413      	add	r3, r2
 800c91c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c926:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c928:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c92c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c936:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c93e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c942:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c944:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c948:	d046      	beq.n	800c9d8 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c94a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c94c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c950:	fb02 f303 	mul.w	r3, r2, r3
 800c954:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c958:	4a57      	ldr	r2, [pc, #348]	; (800cab8 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c95a:	fb82 1203 	smull	r1, r2, r2, r3
 800c95e:	1192      	asrs	r2, r2, #6
 800c960:	17db      	asrs	r3, r3, #31
 800c962:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c964:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	6a1b      	ldr	r3, [r3, #32]
 800c96c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7f1b      	ldrb	r3, [r3, #28]
 800c972:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d02c      	beq.n	800c9d8 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c97e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c980:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c984:	fb02 f303 	mul.w	r3, r2, r3
 800c988:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c98a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d10d      	bne.n	800c9ac <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c990:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c994:	2b00      	cmp	r3, #0
 800c996:	d004      	beq.n	800c9a2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c998:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c99c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c9a0:	e016      	b.n	800c9d0 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c9a2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c9a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c9aa:	e011      	b.n	800c9d0 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c9ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9b2:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c9b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c9b8:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c9bc:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c9c0:	121b      	asrs	r3, r3, #8
 800c9c2:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c9c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9c6:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c9c8:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c9cc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c9d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c9d4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c9d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d00d      	beq.n	800c9fc <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c9e0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c9e4:	089b      	lsrs	r3, r3, #2
 800c9e6:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c9ec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	019b      	lsls	r3, r3, #6
 800c9f4:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	75da      	strb	r2, [r3, #23]
 800c9fa:	e006      	b.n	800ca0a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800ca02:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2200      	movs	r2, #0
 800ca08:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800ca0a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800ca0e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800ca12:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800ca16:	9301      	str	r3, [sp, #4]
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	9300      	str	r3, [sp, #0]
 800ca1c:	4613      	mov	r3, r2
 800ca1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f003 f9e5 	bl	800fdf0 <VL53L0X_get_pal_range_status>
 800ca26:	4603      	mov	r3, r0
 800ca28:	461a      	mov	r2, r3
 800ca2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ca2e:	4313      	orrs	r3, r2
 800ca30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800ca34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d103      	bne.n	800ca44 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800ca3c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ca44:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d12f      	bne.n	800caac <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f107 040c 	add.w	r4, r7, #12
 800ca52:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800ca56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ca58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ca5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800ca66:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800ca6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800ca70:	683b      	ldr	r3, [r7, #0]
 800ca72:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800ca74:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800ca7a:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800ca80:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800ca86:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800ca8c:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800ca92:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800ca9c:	f107 050c 	add.w	r5, r7, #12
 800caa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800caa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800caa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800caa8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800caac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3750      	adds	r7, #80	; 0x50
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bdb0      	pop	{r4, r5, r7, pc}
 800cab8:	10624dd3 	.word	0x10624dd3

0800cabc <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800caca:	2100      	movs	r1, #0
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f7ff f8d1 	bl	800bc74 <VL53L0X_SetDeviceMode>
 800cad2:	4603      	mov	r3, r0
 800cad4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800cad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d104      	bne.n	800cae8 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff fd16 	bl	800c510 <VL53L0X_PerformSingleMeasurement>
 800cae4:	4603      	mov	r3, r0
 800cae6:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800cae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d105      	bne.n	800cafc <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f7ff febe 	bl	800c874 <VL53L0X_GetRangingMeasurementData>
 800caf8:	4603      	mov	r3, r0
 800cafa:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800cafc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d105      	bne.n	800cb10 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cb04:	2100      	movs	r1, #0
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f962 	bl	800cdd0 <VL53L0X_ClearInterruptMask>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800cb10:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	4608      	mov	r0, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	70fb      	strb	r3, [r7, #3]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	70bb      	strb	r3, [r7, #2]
 800cb32:	4613      	mov	r3, r2
 800cb34:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb36:	2300      	movs	r3, #0
 800cb38:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800cb3a:	78fb      	ldrb	r3, [r7, #3]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d002      	beq.n	800cb46 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800cb40:	23f6      	movs	r3, #246	; 0xf6
 800cb42:	73fb      	strb	r3, [r7, #15]
 800cb44:	e107      	b.n	800cd56 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800cb46:	78bb      	ldrb	r3, [r7, #2]
 800cb48:	2b14      	cmp	r3, #20
 800cb4a:	d110      	bne.n	800cb6e <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800cb4c:	7e3b      	ldrb	r3, [r7, #24]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d102      	bne.n	800cb58 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800cb52:	2310      	movs	r3, #16
 800cb54:	73bb      	strb	r3, [r7, #14]
 800cb56:	e001      	b.n	800cb5c <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800cb5c:	7bbb      	ldrb	r3, [r7, #14]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	2184      	movs	r1, #132	; 0x84
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f003 fbbc 	bl	80102e0 <VL53L0X_WrByte>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	73fb      	strb	r3, [r7, #15]
 800cb6c:	e0f3      	b.n	800cd56 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800cb6e:	78bb      	ldrb	r3, [r7, #2]
 800cb70:	2b15      	cmp	r3, #21
 800cb72:	f040 8097 	bne.w	800cca4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cb76:	2201      	movs	r2, #1
 800cb78:	21ff      	movs	r1, #255	; 0xff
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f003 fbb0 	bl	80102e0 <VL53L0X_WrByte>
 800cb80:	4603      	mov	r3, r0
 800cb82:	461a      	mov	r2, r3
 800cb84:	7bfb      	ldrb	r3, [r7, #15]
 800cb86:	4313      	orrs	r3, r2
 800cb88:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	2100      	movs	r1, #0
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f003 fba6 	bl	80102e0 <VL53L0X_WrByte>
 800cb94:	4603      	mov	r3, r0
 800cb96:	461a      	mov	r2, r3
 800cb98:	7bfb      	ldrb	r3, [r7, #15]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cb9e:	2200      	movs	r2, #0
 800cba0:	21ff      	movs	r1, #255	; 0xff
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f003 fb9c 	bl	80102e0 <VL53L0X_WrByte>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	461a      	mov	r2, r3
 800cbac:	7bfb      	ldrb	r3, [r7, #15]
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	2180      	movs	r1, #128	; 0x80
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f003 fb92 	bl	80102e0 <VL53L0X_WrByte>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800cbc6:	2202      	movs	r2, #2
 800cbc8:	2185      	movs	r1, #133	; 0x85
 800cbca:	6878      	ldr	r0, [r7, #4]
 800cbcc:	f003 fb88 	bl	80102e0 <VL53L0X_WrByte>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	7bfb      	ldrb	r3, [r7, #15]
 800cbd6:	4313      	orrs	r3, r2
 800cbd8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800cbda:	2204      	movs	r2, #4
 800cbdc:	21ff      	movs	r1, #255	; 0xff
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f003 fb7e 	bl	80102e0 <VL53L0X_WrByte>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	461a      	mov	r2, r3
 800cbe8:	7bfb      	ldrb	r3, [r7, #15]
 800cbea:	4313      	orrs	r3, r2
 800cbec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800cbee:	2200      	movs	r2, #0
 800cbf0:	21cd      	movs	r1, #205	; 0xcd
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f003 fb74 	bl	80102e0 <VL53L0X_WrByte>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	461a      	mov	r2, r3
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800cc02:	2211      	movs	r2, #17
 800cc04:	21cc      	movs	r1, #204	; 0xcc
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f003 fb6a 	bl	80102e0 <VL53L0X_WrByte>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	461a      	mov	r2, r3
 800cc10:	7bfb      	ldrb	r3, [r7, #15]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800cc16:	2207      	movs	r2, #7
 800cc18:	21ff      	movs	r1, #255	; 0xff
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	f003 fb60 	bl	80102e0 <VL53L0X_WrByte>
 800cc20:	4603      	mov	r3, r0
 800cc22:	461a      	mov	r2, r3
 800cc24:	7bfb      	ldrb	r3, [r7, #15]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	21be      	movs	r1, #190	; 0xbe
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f003 fb56 	bl	80102e0 <VL53L0X_WrByte>
 800cc34:	4603      	mov	r3, r0
 800cc36:	461a      	mov	r2, r3
 800cc38:	7bfb      	ldrb	r3, [r7, #15]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800cc3e:	2206      	movs	r2, #6
 800cc40:	21ff      	movs	r1, #255	; 0xff
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f003 fb4c 	bl	80102e0 <VL53L0X_WrByte>
 800cc48:	4603      	mov	r3, r0
 800cc4a:	461a      	mov	r2, r3
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800cc52:	2209      	movs	r2, #9
 800cc54:	21cc      	movs	r1, #204	; 0xcc
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f003 fb42 	bl	80102e0 <VL53L0X_WrByte>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	461a      	mov	r2, r3
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800cc66:	2200      	movs	r2, #0
 800cc68:	21ff      	movs	r1, #255	; 0xff
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f003 fb38 	bl	80102e0 <VL53L0X_WrByte>
 800cc70:	4603      	mov	r3, r0
 800cc72:	461a      	mov	r2, r3
 800cc74:	7bfb      	ldrb	r3, [r7, #15]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	21ff      	movs	r1, #255	; 0xff
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f003 fb2e 	bl	80102e0 <VL53L0X_WrByte>
 800cc84:	4603      	mov	r3, r0
 800cc86:	461a      	mov	r2, r3
 800cc88:	7bfb      	ldrb	r3, [r7, #15]
 800cc8a:	4313      	orrs	r3, r2
 800cc8c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800cc8e:	2200      	movs	r2, #0
 800cc90:	2100      	movs	r1, #0
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f003 fb24 	bl	80102e0 <VL53L0X_WrByte>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	7bfb      	ldrb	r3, [r7, #15]
 800cc9e:	4313      	orrs	r3, r2
 800cca0:	73fb      	strb	r3, [r7, #15]
 800cca2:	e058      	b.n	800cd56 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800cca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d121      	bne.n	800ccf0 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800ccac:	787b      	ldrb	r3, [r7, #1]
 800ccae:	2b04      	cmp	r3, #4
 800ccb0:	d81b      	bhi.n	800ccea <VL53L0X_SetGpioConfig+0x1ce>
 800ccb2:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <VL53L0X_SetGpioConfig+0x19c>)
 800ccb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb8:	0800cccd 	.word	0x0800cccd
 800ccbc:	0800ccd3 	.word	0x0800ccd3
 800ccc0:	0800ccd9 	.word	0x0800ccd9
 800ccc4:	0800ccdf 	.word	0x0800ccdf
 800ccc8:	0800cce5 	.word	0x0800cce5
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800cccc:	2300      	movs	r3, #0
 800ccce:	73bb      	strb	r3, [r7, #14]
				break;
 800ccd0:	e00f      	b.n	800ccf2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	73bb      	strb	r3, [r7, #14]
				break;
 800ccd6:	e00c      	b.n	800ccf2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800ccd8:	2302      	movs	r3, #2
 800ccda:	73bb      	strb	r3, [r7, #14]
				break;
 800ccdc:	e009      	b.n	800ccf2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800ccde:	2303      	movs	r3, #3
 800cce0:	73bb      	strb	r3, [r7, #14]
				break;
 800cce2:	e006      	b.n	800ccf2 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800cce4:	2304      	movs	r3, #4
 800cce6:	73bb      	strb	r3, [r7, #14]
				break;
 800cce8:	e003      	b.n	800ccf2 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800ccea:	23f5      	movs	r3, #245	; 0xf5
 800ccec:	73fb      	strb	r3, [r7, #15]
 800ccee:	e000      	b.n	800ccf2 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800ccf0:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800ccf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d107      	bne.n	800cd0a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800ccfa:	7bbb      	ldrb	r3, [r7, #14]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	210a      	movs	r1, #10
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f003 faed 	bl	80102e0 <VL53L0X_WrByte>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800cd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d10f      	bne.n	800cd32 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800cd12:	7e3b      	ldrb	r3, [r7, #24]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d102      	bne.n	800cd1e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800cd18:	2300      	movs	r3, #0
 800cd1a:	73bb      	strb	r3, [r7, #14]
 800cd1c:	e001      	b.n	800cd22 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800cd1e:	2310      	movs	r3, #16
 800cd20:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800cd22:	7bbb      	ldrb	r3, [r7, #14]
 800cd24:	22ef      	movs	r2, #239	; 0xef
 800cd26:	2184      	movs	r1, #132	; 0x84
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f003 fb27 	bl	801037c <VL53L0X_UpdateByte>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800cd32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d103      	bne.n	800cd42 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	787a      	ldrb	r2, [r7, #1]
 800cd3e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800cd42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d105      	bne.n	800cd56 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800cd4a:	2100      	movs	r1, #0
 800cd4c:	6878      	ldr	r0, [r7, #4]
 800cd4e:	f000 f83f 	bl	800cdd0 <VL53L0X_ClearInterruptMask>
 800cd52:	4603      	mov	r3, r0
 800cd54:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cd56:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop

0800cd64 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	460b      	mov	r3, r1
 800cd72:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd74:	2300      	movs	r3, #0
 800cd76:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800cd78:	f107 0314 	add.w	r3, r7, #20
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	210e      	movs	r1, #14
 800cd80:	68f8      	ldr	r0, [r7, #12]
 800cd82:	f003 fb59 	bl	8010438 <VL53L0X_RdWord>
 800cd86:	4603      	mov	r3, r0
 800cd88:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800cd8a:	8abb      	ldrh	r3, [r7, #20]
 800cd8c:	045b      	lsls	r3, r3, #17
 800cd8e:	461a      	mov	r2, r3
 800cd90:	4b0e      	ldr	r3, [pc, #56]	; (800cdcc <VL53L0X_GetInterruptThresholds+0x68>)
 800cd92:	4013      	ands	r3, r2
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800cd98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d10f      	bne.n	800cdc0 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800cda0:	f107 0314 	add.w	r3, r7, #20
 800cda4:	461a      	mov	r2, r3
 800cda6:	210c      	movs	r1, #12
 800cda8:	68f8      	ldr	r0, [r7, #12]
 800cdaa:	f003 fb45 	bl	8010438 <VL53L0X_RdWord>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800cdb2:	8abb      	ldrh	r3, [r7, #20]
 800cdb4:	045b      	lsls	r3, r3, #17
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	4b04      	ldr	r3, [pc, #16]	; (800cdcc <VL53L0X_GetInterruptThresholds+0x68>)
 800cdba:	4013      	ands	r3, r2
		*pThresholdHigh =
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cdc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3718      	adds	r7, #24
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	1ffe0000 	.word	0x1ffe0000

0800cdd0 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b084      	sub	sp, #16
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800cde2:	2201      	movs	r2, #1
 800cde4:	210b      	movs	r1, #11
 800cde6:	6878      	ldr	r0, [r7, #4]
 800cde8:	f003 fa7a 	bl	80102e0 <VL53L0X_WrByte>
 800cdec:	4603      	mov	r3, r0
 800cdee:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	210b      	movs	r1, #11
 800cdf4:	6878      	ldr	r0, [r7, #4]
 800cdf6:	f003 fa73 	bl	80102e0 <VL53L0X_WrByte>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	7bfb      	ldrb	r3, [r7, #15]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800ce04:	f107 030d 	add.w	r3, r7, #13
 800ce08:	461a      	mov	r2, r3
 800ce0a:	2113      	movs	r1, #19
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f003 fae9 	bl	80103e4 <VL53L0X_RdByte>
 800ce12:	4603      	mov	r3, r0
 800ce14:	461a      	mov	r2, r3
 800ce16:	7bfb      	ldrb	r3, [r7, #15]
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800ce22:	7b7b      	ldrb	r3, [r7, #13]
 800ce24:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d006      	beq.n	800ce3a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800ce2c:	7bbb      	ldrb	r3, [r7, #14]
 800ce2e:	2b02      	cmp	r3, #2
 800ce30:	d803      	bhi.n	800ce3a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800ce32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d0d3      	beq.n	800cde2 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800ce3a:	7bbb      	ldrb	r3, [r7, #14]
 800ce3c:	2b02      	cmp	r3, #2
 800ce3e:	d901      	bls.n	800ce44 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800ce40:	23f4      	movs	r3, #244	; 0xf4
 800ce42:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ce44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800ce5e:	f107 030e 	add.w	r3, r7, #14
 800ce62:	461a      	mov	r2, r3
 800ce64:	2113      	movs	r1, #19
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f003 fabc 	bl	80103e4 <VL53L0X_RdByte>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
 800ce72:	f003 0207 	and.w	r2, r3, #7
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
 800ce7c:	f003 0318 	and.w	r3, r3, #24
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800ce84:	23fa      	movs	r3, #250	; 0xfa
 800ce86:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ce88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3710      	adds	r7, #16
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}

0800ce94 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	60f8      	str	r0, [r7, #12]
 800ce9c:	60b9      	str	r1, [r7, #8]
 800ce9e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cea0:	2300      	movs	r3, #0
 800cea2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	68b9      	ldr	r1, [r7, #8]
 800cea8:	68f8      	ldr	r0, [r7, #12]
 800ceaa:	f000 fa03 	bl	800d2b4 <VL53L0X_perform_ref_spad_management>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800ceb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	3718      	adds	r7, #24
 800ceba:	46bd      	mov	sp, r7
 800cebc:	bd80      	pop	{r7, pc}

0800cebe <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	6078      	str	r0, [r7, #4]
 800cec6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cec8:	2300      	movs	r3, #0
 800ceca:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800cecc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800ced0:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800ced2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ced6:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800ced8:	f107 0308 	add.w	r3, r7, #8
 800cedc:	461a      	mov	r2, r3
 800cede:	2128      	movs	r1, #40	; 0x28
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f003 faa9 	bl	8010438 <VL53L0X_RdWord>
 800cee6:	4603      	mov	r3, r0
 800cee8:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800ceea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d11e      	bne.n	800cf30 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800cef2:	893b      	ldrh	r3, [r7, #8]
 800cef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cef8:	b29b      	uxth	r3, r3
 800cefa:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800cefc:	893b      	ldrh	r3, [r7, #8]
 800cefe:	461a      	mov	r2, r3
 800cf00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cf04:	429a      	cmp	r2, r3
 800cf06:	dd0b      	ble.n	800cf20 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800cf08:	893a      	ldrh	r2, [r7, #8]
 800cf0a:	897b      	ldrh	r3, [r7, #10]
 800cf0c:	1ad3      	subs	r3, r2, r3
 800cf0e:	b29b      	uxth	r3, r3
 800cf10:	b21b      	sxth	r3, r3
 800cf12:	461a      	mov	r2, r3
					* 250;
 800cf14:	23fa      	movs	r3, #250	; 0xfa
 800cf16:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	601a      	str	r2, [r3, #0]
 800cf1e:	e007      	b.n	800cf30 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800cf20:	893b      	ldrh	r3, [r7, #8]
 800cf22:	b21b      	sxth	r3, r3
 800cf24:	461a      	mov	r2, r3
 800cf26:	23fa      	movs	r3, #250	; 0xfa
 800cf28:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800cf30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3710      	adds	r7, #16
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b08b      	sub	sp, #44	; 0x2c
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
 800cf48:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800cf4a:	2308      	movs	r3, #8
 800cf4c:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cf58:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf62:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	69ba      	ldr	r2, [r7, #24]
 800cf68:	fbb3 f2f2 	udiv	r2, r3, r2
 800cf6c:	69b9      	ldr	r1, [r7, #24]
 800cf6e:	fb01 f202 	mul.w	r2, r1, r2
 800cf72:	1a9b      	subs	r3, r3, r2
 800cf74:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	627b      	str	r3, [r7, #36]	; 0x24
 800cf7a:	e030      	b.n	800cfde <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800cf7c:	2300      	movs	r3, #0
 800cf7e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf84:	4413      	add	r3, r2
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800cf8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	429a      	cmp	r2, r3
 800cf90:	d11e      	bne.n	800cfd0 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800cf92:	7ffa      	ldrb	r2, [r7, #31]
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	fa42 f303 	asr.w	r3, r2, r3
 800cf9a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800cf9c:	693b      	ldr	r3, [r7, #16]
 800cf9e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800cfa0:	e016      	b.n	800cfd0 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800cfa2:	7ffb      	ldrb	r3, [r7, #31]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00b      	beq.n	800cfc4 <get_next_good_spad+0x88>
				success = 1;
 800cfac:	2301      	movs	r3, #1
 800cfae:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb2:	69ba      	ldr	r2, [r7, #24]
 800cfb4:	fb03 f202 	mul.w	r2, r3, r2
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	4413      	add	r3, r2
 800cfbc:	461a      	mov	r2, r3
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	601a      	str	r2, [r3, #0]
				break;
 800cfc2:	e009      	b.n	800cfd8 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800cfc4:	7ffb      	ldrb	r3, [r7, #31]
 800cfc6:	085b      	lsrs	r3, r3, #1
 800cfc8:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800cfd0:	6a3a      	ldr	r2, [r7, #32]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d3e4      	bcc.n	800cfa2 <get_next_good_spad+0x66>
				coarseIndex++) {
 800cfd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfda:	3301      	adds	r3, #1
 800cfdc:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cfde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	429a      	cmp	r2, r3
 800cfe4:	d202      	bcs.n	800cfec <get_next_good_spad+0xb0>
 800cfe6:	7fbb      	ldrb	r3, [r7, #30]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d0c7      	beq.n	800cf7c <get_next_good_spad+0x40>
		}
	}
}
 800cfec:	bf00      	nop
 800cfee:	372c      	adds	r7, #44	; 0x2c
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr

0800cff8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800d000:	2301      	movs	r3, #1
 800d002:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	099b      	lsrs	r3, r3, #6
 800d008:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800d00a:	4a07      	ldr	r2, [pc, #28]	; (800d028 <is_aperture+0x30>)
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d101      	bne.n	800d01a <is_aperture+0x22>
		isAperture = 0;
 800d016:	2300      	movs	r3, #0
 800d018:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d026:	4770      	bx	lr
 800d028:	20000318 	.word	0x20000318

0800d02c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b089      	sub	sp, #36	; 0x24
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d038:	2300      	movs	r3, #0
 800d03a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800d03c:	2308      	movs	r3, #8
 800d03e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	69bb      	ldr	r3, [r7, #24]
 800d044:	fbb2 f3f3 	udiv	r3, r2, r3
 800d048:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	fbb3 f2f2 	udiv	r2, r3, r2
 800d052:	69b9      	ldr	r1, [r7, #24]
 800d054:	fb01 f202 	mul.w	r2, r1, r2
 800d058:	1a9b      	subs	r3, r3, r2
 800d05a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	429a      	cmp	r2, r3
 800d062:	d302      	bcc.n	800d06a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d064:	23ce      	movs	r3, #206	; 0xce
 800d066:	77fb      	strb	r3, [r7, #31]
 800d068:	e010      	b.n	800d08c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800d06a:	68fa      	ldr	r2, [r7, #12]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	4413      	add	r3, r2
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	b25a      	sxtb	r2, r3
 800d074:	2101      	movs	r1, #1
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	fa01 f303 	lsl.w	r3, r1, r3
 800d07c:	b25b      	sxtb	r3, r3
 800d07e:	4313      	orrs	r3, r2
 800d080:	b259      	sxtb	r1, r3
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	697b      	ldr	r3, [r7, #20]
 800d086:	4413      	add	r3, r2
 800d088:	b2ca      	uxtb	r2, r1
 800d08a:	701a      	strb	r2, [r3, #0]

	return status;
 800d08c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d090:	4618      	mov	r0, r3
 800d092:	3724      	adds	r7, #36	; 0x24
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
 800d0a4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800d0a6:	2306      	movs	r3, #6
 800d0a8:	683a      	ldr	r2, [r7, #0]
 800d0aa:	21b0      	movs	r1, #176	; 0xb0
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f003 f8bb 	bl	8010228 <VL53L0X_WriteMulti>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800d0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3710      	adds	r7, #16
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b084      	sub	sp, #16
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800d0cc:	2306      	movs	r3, #6
 800d0ce:	683a      	ldr	r2, [r7, #0]
 800d0d0:	21b0      	movs	r1, #176	; 0xb0
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	f003 f8d8 	bl	8010288 <VL53L0X_ReadMulti>
 800d0d8:	4603      	mov	r3, r0
 800d0da:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800d0dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3710      	adds	r7, #16
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08c      	sub	sp, #48	; 0x30
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	607a      	str	r2, [r7, #4]
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d0f8:	2300      	movs	r3, #0
 800d0fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d100:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800d102:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d104:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800d106:	2300      	movs	r3, #0
 800d108:	62bb      	str	r3, [r7, #40]	; 0x28
 800d10a:	e02b      	b.n	800d164 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800d10c:	f107 031c 	add.w	r3, r7, #28
 800d110:	6a3a      	ldr	r2, [r7, #32]
 800d112:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f7ff ff11 	bl	800cf3c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800d11a:	69fb      	ldr	r3, [r7, #28]
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d120:	d103      	bne.n	800d12a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d122:	23ce      	movs	r3, #206	; 0xce
 800d124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800d128:	e020      	b.n	800d16c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	461a      	mov	r2, r3
 800d12e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d130:	4413      	add	r3, r2
 800d132:	4618      	mov	r0, r3
 800d134:	f7ff ff60 	bl	800cff8 <is_aperture>
 800d138:	4603      	mov	r3, r0
 800d13a:	461a      	mov	r2, r3
 800d13c:	7afb      	ldrb	r3, [r7, #11]
 800d13e:	4293      	cmp	r3, r2
 800d140:	d003      	beq.n	800d14a <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d142:	23ce      	movs	r3, #206	; 0xce
 800d144:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800d148:	e010      	b.n	800d16c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800d14a:	69fb      	ldr	r3, [r7, #28]
 800d14c:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800d14e:	6a3a      	ldr	r2, [r7, #32]
 800d150:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d152:	6838      	ldr	r0, [r7, #0]
 800d154:	f7ff ff6a 	bl	800d02c <enable_spad_bit>
		currentSpad++;
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	3301      	adds	r3, #1
 800d15c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800d15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d160:	3301      	adds	r3, #1
 800d162:	62bb      	str	r3, [r7, #40]	; 0x28
 800d164:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d168:	429a      	cmp	r2, r3
 800d16a:	d3cf      	bcc.n	800d10c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800d16c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d16e:	6a3a      	ldr	r2, [r7, #32]
 800d170:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800d172:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d176:	2b00      	cmp	r3, #0
 800d178:	d106      	bne.n	800d188 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	68f8      	ldr	r0, [r7, #12]
 800d17e:	f7ff ff8d 	bl	800d09c <set_ref_spad_map>
 800d182:	4603      	mov	r3, r0
 800d184:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800d188:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d121      	bne.n	800d1d4 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800d190:	f107 0314 	add.w	r3, r7, #20
 800d194:	4619      	mov	r1, r3
 800d196:	68f8      	ldr	r0, [r7, #12]
 800d198:	f7ff ff93 	bl	800d0c2 <get_ref_spad_map>
 800d19c:	4603      	mov	r3, r0
 800d19e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800d1a6:	e011      	b.n	800d1cc <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	4413      	add	r3, r2
 800d1ae:	781a      	ldrb	r2, [r3, #0]
 800d1b0:	f107 0114 	add.w	r1, r7, #20
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	440b      	add	r3, r1
 800d1b8:	781b      	ldrb	r3, [r3, #0]
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d003      	beq.n	800d1c6 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d1be:	23ce      	movs	r3, #206	; 0xce
 800d1c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800d1c4:	e006      	b.n	800d1d4 <enable_ref_spads+0xec>
			}
			i++;
 800d1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c8:	3301      	adds	r3, #1
 800d1ca:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800d1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d3e9      	bcc.n	800d1a8 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800d1d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3730      	adds	r7, #48	; 0x30
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b08a      	sub	sp, #40	; 0x28
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
 800d1e8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d1fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800d200:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d204:	2b00      	cmp	r3, #0
 800d206:	d107      	bne.n	800d218 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800d208:	22c0      	movs	r2, #192	; 0xc0
 800d20a:	2101      	movs	r1, #1
 800d20c:	6878      	ldr	r0, [r7, #4]
 800d20e:	f003 f867 	bl	80102e0 <VL53L0X_WrByte>
 800d212:	4603      	mov	r3, r0
 800d214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800d218:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d108      	bne.n	800d232 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800d220:	f107 0308 	add.w	r3, r7, #8
 800d224:	4619      	mov	r1, r3
 800d226:	6878      	ldr	r0, [r7, #4]
 800d228:	f7ff fc48 	bl	800cabc <VL53L0X_PerformSingleRangingMeasurement>
 800d22c:	4603      	mov	r3, r0
 800d22e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800d232:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d236:	2b00      	cmp	r3, #0
 800d238:	d107      	bne.n	800d24a <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d23a:	2201      	movs	r2, #1
 800d23c:	21ff      	movs	r1, #255	; 0xff
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f003 f84e 	bl	80102e0 <VL53L0X_WrByte>
 800d244:	4603      	mov	r3, r0
 800d246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800d24a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d107      	bne.n	800d262 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800d252:	683a      	ldr	r2, [r7, #0]
 800d254:	21b6      	movs	r1, #182	; 0xb6
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	f003 f8ee 	bl	8010438 <VL53L0X_RdWord>
 800d25c:	4603      	mov	r3, r0
 800d25e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800d262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d266:	2b00      	cmp	r3, #0
 800d268:	d107      	bne.n	800d27a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d26a:	2200      	movs	r2, #0
 800d26c:	21ff      	movs	r1, #255	; 0xff
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f003 f836 	bl	80102e0 <VL53L0X_WrByte>
 800d274:	4603      	mov	r3, r0
 800d276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800d27a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d112      	bne.n	800d2a8 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d286:	461a      	mov	r2, r3
 800d288:	2101      	movs	r1, #1
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f003 f828 	bl	80102e0 <VL53L0X_WrByte>
 800d290:	4603      	mov	r3, r0
 800d292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800d296:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d104      	bne.n	800d2a8 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800d2a4:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800d2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	3728      	adds	r7, #40	; 0x28
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800d2b4:	b590      	push	{r4, r7, lr}
 800d2b6:	b09d      	sub	sp, #116	; 0x74
 800d2b8:	af06      	add	r7, sp, #24
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800d2c6:	23b4      	movs	r3, #180	; 0xb4
 800d2c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800d2cc:	2303      	movs	r3, #3
 800d2ce:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800d2d0:	232c      	movs	r3, #44	; 0x2c
 800d2d2:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800d2e0:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800d2e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800d2ee:	2306      	movs	r3, #6
 800d2f0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800d300:	2300      	movs	r3, #0
 800d302:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800d304:	2300      	movs	r3, #0
 800d306:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800d308:	2300      	movs	r3, #0
 800d30a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800d30c:	2300      	movs	r3, #0
 800d30e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800d318:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800d31a:	2300      	movs	r3, #0
 800d31c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d31e:	e009      	b.n	800d334 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d320:	68fa      	ldr	r2, [r7, #12]
 800d322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d324:	4413      	add	r3, r2
 800d326:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d32a:	2200      	movs	r2, #0
 800d32c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d32e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d330:	3301      	adds	r3, #1
 800d332:	64bb      	str	r3, [r7, #72]	; 0x48
 800d334:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d338:	429a      	cmp	r2, r3
 800d33a:	d3f1      	bcc.n	800d320 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d33c:	2201      	movs	r2, #1
 800d33e:	21ff      	movs	r1, #255	; 0xff
 800d340:	68f8      	ldr	r0, [r7, #12]
 800d342:	f002 ffcd 	bl	80102e0 <VL53L0X_WrByte>
 800d346:	4603      	mov	r3, r0
 800d348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d34c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d350:	2b00      	cmp	r3, #0
 800d352:	d107      	bne.n	800d364 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800d354:	2200      	movs	r2, #0
 800d356:	214f      	movs	r1, #79	; 0x4f
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f002 ffc1 	bl	80102e0 <VL53L0X_WrByte>
 800d35e:	4603      	mov	r3, r0
 800d360:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d364:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d107      	bne.n	800d37c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800d36c:	222c      	movs	r2, #44	; 0x2c
 800d36e:	214e      	movs	r1, #78	; 0x4e
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f002 ffb5 	bl	80102e0 <VL53L0X_WrByte>
 800d376:	4603      	mov	r3, r0
 800d378:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d37c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d380:	2b00      	cmp	r3, #0
 800d382:	d107      	bne.n	800d394 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d384:	2200      	movs	r2, #0
 800d386:	21ff      	movs	r1, #255	; 0xff
 800d388:	68f8      	ldr	r0, [r7, #12]
 800d38a:	f002 ffa9 	bl	80102e0 <VL53L0X_WrByte>
 800d38e:	4603      	mov	r3, r0
 800d390:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d394:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d109      	bne.n	800d3b0 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800d39c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d3a0:	461a      	mov	r2, r3
 800d3a2:	21b6      	movs	r1, #182	; 0xb6
 800d3a4:	68f8      	ldr	r0, [r7, #12]
 800d3a6:	f002 ff9b 	bl	80102e0 <VL53L0X_WrByte>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800d3b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d107      	bne.n	800d3c8 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	2180      	movs	r1, #128	; 0x80
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	f002 ff8f 	bl	80102e0 <VL53L0X_WrByte>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800d3c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d10a      	bne.n	800d3e6 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800d3d0:	f107 0210 	add.w	r2, r7, #16
 800d3d4:	f107 0111 	add.w	r1, r7, #17
 800d3d8:	2300      	movs	r3, #0
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	f000 fbbb 	bl	800db56 <VL53L0X_perform_ref_calibration>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800d3e6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d121      	bne.n	800d432 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800d3f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d3f4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800d3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d3fc:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800d40a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d40e:	f107 0218 	add.w	r2, r7, #24
 800d412:	9204      	str	r2, [sp, #16]
 800d414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d416:	9203      	str	r2, [sp, #12]
 800d418:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d41a:	9202      	str	r2, [sp, #8]
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d420:	9300      	str	r3, [sp, #0]
 800d422:	4623      	mov	r3, r4
 800d424:	4602      	mov	r2, r0
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff fe5e 	bl	800d0e8 <enable_ref_spads>
 800d42c:	4603      	mov	r3, r0
 800d42e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d432:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d436:	2b00      	cmp	r3, #0
 800d438:	d174      	bne.n	800d524 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800d43a:	69bb      	ldr	r3, [r7, #24]
 800d43c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800d43e:	f107 0312 	add.w	r3, r7, #18
 800d442:	4619      	mov	r1, r3
 800d444:	68f8      	ldr	r0, [r7, #12]
 800d446:	f7ff fecb 	bl	800d1e0 <perform_ref_signal_measurement>
 800d44a:	4603      	mov	r3, r0
 800d44c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d450:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d454:	2b00      	cmp	r3, #0
 800d456:	d161      	bne.n	800d51c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800d458:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d45a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d25d      	bcs.n	800d51c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800d460:	2300      	movs	r3, #0
 800d462:	64bb      	str	r3, [r7, #72]	; 0x48
 800d464:	e009      	b.n	800d47a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d466:	68fa      	ldr	r2, [r7, #12]
 800d468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d46a:	4413      	add	r3, r2
 800d46c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d470:	2200      	movs	r2, #0
 800d472:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800d474:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d476:	3301      	adds	r3, #1
 800d478:	64bb      	str	r3, [r7, #72]	; 0x48
 800d47a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d47e:	429a      	cmp	r2, r3
 800d480:	d3f1      	bcc.n	800d466 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800d482:	e002      	b.n	800d48a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800d484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d486:	3301      	adds	r3, #1
 800d488:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800d48a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d48e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d490:	4413      	add	r3, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7ff fdb0 	bl	800cff8 <is_aperture>
 800d498:	4603      	mov	r3, r0
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d103      	bne.n	800d4a6 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d49e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a2:	429a      	cmp	r2, r3
 800d4a4:	d3ee      	bcc.n	800d484 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800d4a6:	2301      	movs	r3, #1
 800d4a8:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d4aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4ac:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800d4ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d4be:	f107 0218 	add.w	r2, r7, #24
 800d4c2:	9204      	str	r2, [sp, #16]
 800d4c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4c6:	9203      	str	r2, [sp, #12]
 800d4c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d4ca:	9202      	str	r2, [sp, #8]
 800d4cc:	9301      	str	r3, [sp, #4]
 800d4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4d0:	9300      	str	r3, [sp, #0]
 800d4d2:	4623      	mov	r3, r4
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f7ff fe06 	bl	800d0e8 <enable_ref_spads>
 800d4dc:	4603      	mov	r3, r0
 800d4de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d4e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d11b      	bne.n	800d522 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d4ea:	69bb      	ldr	r3, [r7, #24]
 800d4ec:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d4ee:	f107 0312 	add.w	r3, r7, #18
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	68f8      	ldr	r0, [r7, #12]
 800d4f6:	f7ff fe73 	bl	800d1e0 <perform_ref_signal_measurement>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d500:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d504:	2b00      	cmp	r3, #0
 800d506:	d10c      	bne.n	800d522 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d508:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d50a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d208      	bcs.n	800d522 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d510:	2301      	movs	r3, #1
 800d512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d51a:	e002      	b.n	800d522 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d51c:	2300      	movs	r3, #0
 800d51e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d520:	e000      	b.n	800d524 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d522:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d524:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d528:	2b00      	cmp	r3, #0
 800d52a:	f040 80af 	bne.w	800d68c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d52e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d530:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d532:	429a      	cmp	r2, r3
 800d534:	f240 80aa 	bls.w	800d68c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d538:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d53a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d540:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d548:	f107 031c 	add.w	r3, r7, #28
 800d54c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d54e:	4618      	mov	r0, r3
 800d550:	f005 fd32 	bl	8012fb8 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d554:	8a7b      	ldrh	r3, [r7, #18]
 800d556:	461a      	mov	r2, r3
 800d558:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bfb8      	it	lt
 800d560:	425b      	neglt	r3, r3
 800d562:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d564:	2300      	movs	r3, #0
 800d566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d56a:	e086      	b.n	800d67a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800d572:	f107 0314 	add.w	r3, r7, #20
 800d576:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d578:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d57a:	f7ff fcdf 	bl	800cf3c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d584:	d103      	bne.n	800d58e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d586:	23ce      	movs	r3, #206	; 0xce
 800d588:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d58c:	e07e      	b.n	800d68c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d58e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d592:	697a      	ldr	r2, [r7, #20]
 800d594:	4413      	add	r3, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fd2e 	bl	800cff8 <is_aperture>
 800d59c:	4603      	mov	r3, r0
 800d59e:	461a      	mov	r2, r3
 800d5a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d003      	beq.n	800d5ae <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800d5ac:	e06e      	b.n	800d68c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800d5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d5b4:	697b      	ldr	r3, [r7, #20]
 800d5b6:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800d5be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff fd32 	bl	800d02c <enable_spad_bit>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d5ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d10c      	bne.n	800d5f0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800d5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5d8:	3301      	adds	r3, #1
 800d5da:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f7ff fd59 	bl	800d09c <set_ref_spad_map>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d5f0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d146      	bne.n	800d686 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d5f8:	f107 0312 	add.w	r3, r7, #18
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f7ff fdee 	bl	800d1e0 <perform_ref_signal_measurement>
 800d604:	4603      	mov	r3, r0
 800d606:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d60a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d13b      	bne.n	800d68a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d612:	8a7b      	ldrh	r3, [r7, #18]
 800d614:	461a      	mov	r2, r3
 800d616:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	bfb8      	it	lt
 800d61e:	425b      	neglt	r3, r3
 800d620:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d622:	8a7b      	ldrh	r3, [r7, #18]
 800d624:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d626:	429a      	cmp	r2, r3
 800d628:	d21c      	bcs.n	800d664 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d62a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d62c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d62e:	429a      	cmp	r2, r3
 800d630:	d914      	bls.n	800d65c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d632:	f107 031c 	add.w	r3, r7, #28
 800d636:	4619      	mov	r1, r3
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f7ff fd2f 	bl	800d09c <set_ref_spad_map>
 800d63e:	4603      	mov	r3, r0
 800d640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800d64a:	f107 011c 	add.w	r1, r7, #28
 800d64e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d650:	4618      	mov	r0, r3
 800d652:	f005 fcb1 	bl	8012fb8 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d658:	3b01      	subs	r3, #1
 800d65a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d65c:	2301      	movs	r3, #1
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e00a      	b.n	800d67a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d666:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800d66e:	f107 031c 	add.w	r3, r7, #28
 800d672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d674:	4618      	mov	r0, r3
 800d676:	f005 fc9f 	bl	8012fb8 <memcpy>
		while (!complete) {
 800d67a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d67e:	2b00      	cmp	r3, #0
 800d680:	f43f af74 	beq.w	800d56c <VL53L0X_perform_ref_spad_management+0x2b8>
 800d684:	e002      	b.n	800d68c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d686:	bf00      	nop
 800d688:	e000      	b.n	800d68c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d68a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d68c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d690:	2b00      	cmp	r3, #0
 800d692:	d115      	bne.n	800d6c0 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d698:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d6a0:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	b2da      	uxtb	r2, r3
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	781a      	ldrb	r2, [r3, #0]
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d6c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	375c      	adds	r7, #92	; 0x5c
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd90      	pop	{r4, r7, pc}

0800d6cc <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b093      	sub	sp, #76	; 0x4c
 800d6d0:	af06      	add	r7, sp, #24
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	4613      	mov	r3, r2
 800d6d8:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d6e4:	23b4      	movs	r3, #180	; 0xb4
 800d6e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800d6ea:	2306      	movs	r3, #6
 800d6ec:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d6ee:	232c      	movs	r3, #44	; 0x2c
 800d6f0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	21ff      	movs	r1, #255	; 0xff
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f002 fdf2 	bl	80102e0 <VL53L0X_WrByte>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d702:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d706:	2b00      	cmp	r3, #0
 800d708:	d107      	bne.n	800d71a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800d70a:	2200      	movs	r2, #0
 800d70c:	214f      	movs	r1, #79	; 0x4f
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f002 fde6 	bl	80102e0 <VL53L0X_WrByte>
 800d714:	4603      	mov	r3, r0
 800d716:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d71a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d107      	bne.n	800d732 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800d722:	222c      	movs	r2, #44	; 0x2c
 800d724:	214e      	movs	r1, #78	; 0x4e
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f002 fdda 	bl	80102e0 <VL53L0X_WrByte>
 800d72c:	4603      	mov	r3, r0
 800d72e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d732:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d736:	2b00      	cmp	r3, #0
 800d738:	d107      	bne.n	800d74a <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d73a:	2200      	movs	r2, #0
 800d73c:	21ff      	movs	r1, #255	; 0xff
 800d73e:	68f8      	ldr	r0, [r7, #12]
 800d740:	f002 fdce 	bl	80102e0 <VL53L0X_WrByte>
 800d744:	4603      	mov	r3, r0
 800d746:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d74a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d109      	bne.n	800d766 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800d752:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d756:	461a      	mov	r2, r3
 800d758:	21b6      	movs	r1, #182	; 0xb6
 800d75a:	68f8      	ldr	r0, [r7, #12]
 800d75c:	f002 fdc0 	bl	80102e0 <VL53L0X_WrByte>
 800d760:	4603      	mov	r3, r0
 800d762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d766:	2300      	movs	r3, #0
 800d768:	627b      	str	r3, [r7, #36]	; 0x24
 800d76a:	e009      	b.n	800d780 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d770:	4413      	add	r3, r2
 800d772:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d776:	2200      	movs	r2, #0
 800d778:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	3301      	adds	r3, #1
 800d77e:	627b      	str	r3, [r7, #36]	; 0x24
 800d780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	429a      	cmp	r2, r3
 800d786:	d3f1      	bcc.n	800d76c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800d788:	79fb      	ldrb	r3, [r7, #7]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d011      	beq.n	800d7b2 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d78e:	e002      	b.n	800d796 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d792:	3301      	adds	r3, #1
 800d794:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d796:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d79c:	4413      	add	r3, r2
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f7ff fc2a 	bl	800cff8 <is_aperture>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d103      	bne.n	800d7b2 <VL53L0X_set_reference_spads+0xe6>
 800d7aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7ac:	69bb      	ldr	r3, [r7, #24]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d3ee      	bcc.n	800d790 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800d7be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d7c2:	79f9      	ldrb	r1, [r7, #7]
 800d7c4:	f107 0214 	add.w	r2, r7, #20
 800d7c8:	9204      	str	r2, [sp, #16]
 800d7ca:	68ba      	ldr	r2, [r7, #8]
 800d7cc:	9203      	str	r2, [sp, #12]
 800d7ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d7d0:	9202      	str	r2, [sp, #8]
 800d7d2:	9301      	str	r3, [sp, #4]
 800d7d4:	69fb      	ldr	r3, [r7, #28]
 800d7d6:	9300      	str	r3, [sp, #0]
 800d7d8:	4623      	mov	r3, r4
 800d7da:	4602      	mov	r2, r0
 800d7dc:	68f8      	ldr	r0, [r7, #12]
 800d7de:	f7ff fc83 	bl	800d0e8 <enable_ref_spads>
 800d7e2:	4603      	mov	r3, r0
 800d7e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d7e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d10c      	bne.n	800d80a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	b2da      	uxtb	r2, r3
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	79fa      	ldrb	r2, [r7, #7]
 800d806:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d80a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3734      	adds	r7, #52	; 0x34
 800d812:	46bd      	mov	sp, r7
 800d814:	bd90      	pop	{r4, r7, pc}

0800d816 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b084      	sub	sp, #16
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	6078      	str	r0, [r7, #4]
 800d81e:	460b      	mov	r3, r1
 800d820:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d10a      	bne.n	800d844 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d82e:	78fb      	ldrb	r3, [r7, #3]
 800d830:	f043 0301 	orr.w	r3, r3, #1
 800d834:	b2db      	uxtb	r3, r3
 800d836:	461a      	mov	r2, r3
 800d838:	2100      	movs	r1, #0
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f002 fd50 	bl	80102e0 <VL53L0X_WrByte>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d844:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d104      	bne.n	800d856 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d84c:	6878      	ldr	r0, [r7, #4]
 800d84e:	f000 f9bf 	bl	800dbd0 <VL53L0X_measurement_poll_for_completion>
 800d852:	4603      	mov	r3, r0
 800d854:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d105      	bne.n	800d86a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d85e:	2100      	movs	r1, #0
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f7ff fab5 	bl	800cdd0 <VL53L0X_ClearInterruptMask>
 800d866:	4603      	mov	r3, r0
 800d868:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d106      	bne.n	800d880 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d872:	2200      	movs	r2, #0
 800d874:	2100      	movs	r1, #0
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f002 fd32 	bl	80102e0 <VL53L0X_WrByte>
 800d87c:	4603      	mov	r3, r0
 800d87e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800d880:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	4608      	mov	r0, r1
 800d896:	4611      	mov	r1, r2
 800d898:	461a      	mov	r2, r3
 800d89a:	4603      	mov	r3, r0
 800d89c:	70fb      	strb	r3, [r7, #3]
 800d89e:	460b      	mov	r3, r1
 800d8a0:	70bb      	strb	r3, [r7, #2]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d8ae:	2201      	movs	r2, #1
 800d8b0:	21ff      	movs	r1, #255	; 0xff
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f002 fd14 	bl	80102e0 <VL53L0X_WrByte>
 800d8b8:	4603      	mov	r3, r0
 800d8ba:	461a      	mov	r2, r3
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f002 fd0a 	bl	80102e0 <VL53L0X_WrByte>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	461a      	mov	r2, r3
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	4313      	orrs	r3, r2
 800d8d4:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	21ff      	movs	r1, #255	; 0xff
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f002 fd00 	bl	80102e0 <VL53L0X_WrByte>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	7bfb      	ldrb	r3, [r7, #15]
 800d8e6:	4313      	orrs	r3, r2
 800d8e8:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d8ea:	78fb      	ldrb	r3, [r7, #3]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d01e      	beq.n	800d92e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d8f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d009      	beq.n	800d90c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d8f8:	69ba      	ldr	r2, [r7, #24]
 800d8fa:	21cb      	movs	r1, #203	; 0xcb
 800d8fc:	6878      	ldr	r0, [r7, #4]
 800d8fe:	f002 fd71 	bl	80103e4 <VL53L0X_RdByte>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	7bfb      	ldrb	r3, [r7, #15]
 800d908:	4313      	orrs	r3, r2
 800d90a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d90c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d02a      	beq.n	800d96a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d914:	f107 030e 	add.w	r3, r7, #14
 800d918:	461a      	mov	r2, r3
 800d91a:	21ee      	movs	r1, #238	; 0xee
 800d91c:	6878      	ldr	r0, [r7, #4]
 800d91e:	f002 fd61 	bl	80103e4 <VL53L0X_RdByte>
 800d922:	4603      	mov	r3, r0
 800d924:	461a      	mov	r2, r3
 800d926:	7bfb      	ldrb	r3, [r7, #15]
 800d928:	4313      	orrs	r3, r2
 800d92a:	73fb      	strb	r3, [r7, #15]
 800d92c:	e01d      	b.n	800d96a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d92e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d00a      	beq.n	800d94c <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d936:	78bb      	ldrb	r3, [r7, #2]
 800d938:	461a      	mov	r2, r3
 800d93a:	21cb      	movs	r1, #203	; 0xcb
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f002 fccf 	bl	80102e0 <VL53L0X_WrByte>
 800d942:	4603      	mov	r3, r0
 800d944:	461a      	mov	r2, r3
 800d946:	7bfb      	ldrb	r3, [r7, #15]
 800d948:	4313      	orrs	r3, r2
 800d94a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d94c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d950:	2b00      	cmp	r3, #0
 800d952:	d00a      	beq.n	800d96a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d954:	787b      	ldrb	r3, [r7, #1]
 800d956:	2280      	movs	r2, #128	; 0x80
 800d958:	21ee      	movs	r1, #238	; 0xee
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f002 fd0e 	bl	801037c <VL53L0X_UpdateByte>
 800d960:	4603      	mov	r3, r0
 800d962:	461a      	mov	r2, r3
 800d964:	7bfb      	ldrb	r3, [r7, #15]
 800d966:	4313      	orrs	r3, r2
 800d968:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d96a:	2201      	movs	r2, #1
 800d96c:	21ff      	movs	r1, #255	; 0xff
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f002 fcb6 	bl	80102e0 <VL53L0X_WrByte>
 800d974:	4603      	mov	r3, r0
 800d976:	461a      	mov	r2, r3
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	4313      	orrs	r3, r2
 800d97c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d97e:	2201      	movs	r2, #1
 800d980:	2100      	movs	r1, #0
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f002 fcac 	bl	80102e0 <VL53L0X_WrByte>
 800d988:	4603      	mov	r3, r0
 800d98a:	461a      	mov	r2, r3
 800d98c:	7bfb      	ldrb	r3, [r7, #15]
 800d98e:	4313      	orrs	r3, r2
 800d990:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d992:	2200      	movs	r2, #0
 800d994:	21ff      	movs	r1, #255	; 0xff
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	f002 fca2 	bl	80102e0 <VL53L0X_WrByte>
 800d99c:	4603      	mov	r3, r0
 800d99e:	461a      	mov	r2, r3
 800d9a0:	7bfb      	ldrb	r3, [r7, #15]
 800d9a2:	4313      	orrs	r3, r2
 800d9a4:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d9a6:	7bbb      	ldrb	r3, [r7, #14]
 800d9a8:	f023 0310 	bic.w	r3, r3, #16
 800d9ac:	b2da      	uxtb	r2, r3
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	701a      	strb	r2, [r3, #0]

	return Status;
 800d9b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b08a      	sub	sp, #40	; 0x28
 800d9c2:	af04      	add	r7, sp, #16
 800d9c4:	60f8      	str	r0, [r7, #12]
 800d9c6:	60b9      	str	r1, [r7, #8]
 800d9c8:	4611      	mov	r1, r2
 800d9ca:	461a      	mov	r2, r3
 800d9cc:	460b      	mov	r3, r1
 800d9ce:	71fb      	strb	r3, [r7, #7]
 800d9d0:	4613      	mov	r3, r2
 800d9d2:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d9e8:	79bb      	ldrb	r3, [r7, #6]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d003      	beq.n	800d9f6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d9f4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	2101      	movs	r1, #1
 800d9fa:	68f8      	ldr	r0, [r7, #12]
 800d9fc:	f002 fc70 	bl	80102e0 <VL53L0X_WrByte>
 800da00:	4603      	mov	r3, r0
 800da02:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800da04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d105      	bne.n	800da18 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800da0c:	2140      	movs	r1, #64	; 0x40
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	f7ff ff01 	bl	800d816 <VL53L0X_perform_single_ref_calibration>
 800da14:	4603      	mov	r3, r0
 800da16:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800da18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d115      	bne.n	800da4c <VL53L0X_perform_vhv_calibration+0x8e>
 800da20:	79fb      	ldrb	r3, [r7, #7]
 800da22:	2b01      	cmp	r3, #1
 800da24:	d112      	bne.n	800da4c <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800da26:	7d39      	ldrb	r1, [r7, #20]
 800da28:	7d7a      	ldrb	r2, [r7, #21]
 800da2a:	2300      	movs	r3, #0
 800da2c:	9303      	str	r3, [sp, #12]
 800da2e:	2301      	movs	r3, #1
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	f107 0313 	add.w	r3, r7, #19
 800da36:	9301      	str	r3, [sp, #4]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	9300      	str	r3, [sp, #0]
 800da3c:	460b      	mov	r3, r1
 800da3e:	2101      	movs	r1, #1
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff ff23 	bl	800d88c <VL53L0X_ref_calibration_io>
 800da46:	4603      	mov	r3, r0
 800da48:	75fb      	strb	r3, [r7, #23]
 800da4a:	e002      	b.n	800da52 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	2200      	movs	r2, #0
 800da50:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800da52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d112      	bne.n	800da80 <VL53L0X_perform_vhv_calibration+0xc2>
 800da5a:	79bb      	ldrb	r3, [r7, #6]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d00f      	beq.n	800da80 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800da60:	7dbb      	ldrb	r3, [r7, #22]
 800da62:	461a      	mov	r2, r3
 800da64:	2101      	movs	r1, #1
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f002 fc3a 	bl	80102e0 <VL53L0X_WrByte>
 800da6c:	4603      	mov	r3, r0
 800da6e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800da70:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d103      	bne.n	800da80 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	7dba      	ldrb	r2, [r7, #22]
 800da7c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800da80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da84:	4618      	mov	r0, r3
 800da86:	3718      	adds	r7, #24
 800da88:	46bd      	mov	sp, r7
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08a      	sub	sp, #40	; 0x28
 800da90:	af04      	add	r7, sp, #16
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	4611      	mov	r1, r2
 800da98:	461a      	mov	r2, r3
 800da9a:	460b      	mov	r3, r1
 800da9c:	71fb      	strb	r3, [r7, #7]
 800da9e:	4613      	mov	r3, r2
 800daa0:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daa2:	2300      	movs	r3, #0
 800daa4:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800daa6:	2300      	movs	r3, #0
 800daa8:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800daaa:	2300      	movs	r3, #0
 800daac:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800daae:	2300      	movs	r3, #0
 800dab0:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800dab2:	79bb      	ldrb	r3, [r7, #6]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d003      	beq.n	800dac0 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800dabe:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800dac0:	2202      	movs	r2, #2
 800dac2:	2101      	movs	r1, #1
 800dac4:	68f8      	ldr	r0, [r7, #12]
 800dac6:	f002 fc0b 	bl	80102e0 <VL53L0X_WrByte>
 800daca:	4603      	mov	r3, r0
 800dacc:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800dace:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d105      	bne.n	800dae2 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800dad6:	2100      	movs	r1, #0
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7ff fe9c 	bl	800d816 <VL53L0X_perform_single_ref_calibration>
 800dade:	4603      	mov	r3, r0
 800dae0:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800dae2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d115      	bne.n	800db16 <VL53L0X_perform_phase_calibration+0x8a>
 800daea:	79fb      	ldrb	r3, [r7, #7]
 800daec:	2b01      	cmp	r3, #1
 800daee:	d112      	bne.n	800db16 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800daf0:	7d39      	ldrb	r1, [r7, #20]
 800daf2:	7d7a      	ldrb	r2, [r7, #21]
 800daf4:	2301      	movs	r3, #1
 800daf6:	9303      	str	r3, [sp, #12]
 800daf8:	2300      	movs	r3, #0
 800dafa:	9302      	str	r3, [sp, #8]
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	9301      	str	r3, [sp, #4]
 800db00:	f107 0313 	add.w	r3, r7, #19
 800db04:	9300      	str	r3, [sp, #0]
 800db06:	460b      	mov	r3, r1
 800db08:	2101      	movs	r1, #1
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7ff febe 	bl	800d88c <VL53L0X_ref_calibration_io>
 800db10:	4603      	mov	r3, r0
 800db12:	75fb      	strb	r3, [r7, #23]
 800db14:	e002      	b.n	800db1c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	2200      	movs	r2, #0
 800db1a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800db1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d112      	bne.n	800db4a <VL53L0X_perform_phase_calibration+0xbe>
 800db24:	79bb      	ldrb	r3, [r7, #6]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00f      	beq.n	800db4a <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800db2a:	7dbb      	ldrb	r3, [r7, #22]
 800db2c:	461a      	mov	r2, r3
 800db2e:	2101      	movs	r1, #1
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f002 fbd5 	bl	80102e0 <VL53L0X_WrByte>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800db3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d103      	bne.n	800db4a <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	7dba      	ldrb	r2, [r7, #22]
 800db46:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800db4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800db56:	b580      	push	{r7, lr}
 800db58:	b086      	sub	sp, #24
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	60f8      	str	r0, [r7, #12]
 800db5e:	60b9      	str	r1, [r7, #8]
 800db60:	607a      	str	r2, [r7, #4]
 800db62:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db64:	2300      	movs	r3, #0
 800db66:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800db68:	2300      	movs	r3, #0
 800db6a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800db72:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800db74:	78fa      	ldrb	r2, [r7, #3]
 800db76:	2300      	movs	r3, #0
 800db78:	68b9      	ldr	r1, [r7, #8]
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	f7ff ff1f 	bl	800d9be <VL53L0X_perform_vhv_calibration>
 800db80:	4603      	mov	r3, r0
 800db82:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800db84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d107      	bne.n	800db9c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800db8c:	78fa      	ldrb	r2, [r7, #3]
 800db8e:	2300      	movs	r3, #0
 800db90:	6879      	ldr	r1, [r7, #4]
 800db92:	68f8      	ldr	r0, [r7, #12]
 800db94:	f7ff ff7a 	bl	800da8c <VL53L0X_perform_phase_calibration>
 800db98:	4603      	mov	r3, r0
 800db9a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800db9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d10f      	bne.n	800dbc4 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800dba4:	7dbb      	ldrb	r3, [r7, #22]
 800dba6:	461a      	mov	r2, r3
 800dba8:	2101      	movs	r1, #1
 800dbaa:	68f8      	ldr	r0, [r7, #12]
 800dbac:	f002 fb98 	bl	80102e0 <VL53L0X_WrByte>
 800dbb0:	4603      	mov	r3, r0
 800dbb2:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800dbb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d103      	bne.n	800dbc4 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	7dba      	ldrb	r2, [r7, #22]
 800dbc0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800dbc4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3718      	adds	r7, #24
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800dbe4:	f107 030f 	add.w	r3, r7, #15
 800dbe8:	4619      	mov	r1, r3
 800dbea:	6878      	ldr	r0, [r7, #4]
 800dbec:	f7fe fe02 	bl	800c7f4 <VL53L0X_GetMeasurementDataReady>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800dbf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d110      	bne.n	800dc1e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d00f      	beq.n	800dc22 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	3301      	adds	r3, #1
 800dc06:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800dc0e:	d302      	bcc.n	800dc16 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800dc10:	23f9      	movs	r3, #249	; 0xf9
 800dc12:	75fb      	strb	r3, [r7, #23]
			break;
 800dc14:	e006      	b.n	800dc24 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f002 fc82 	bl	8010520 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800dc1c:	e7e2      	b.n	800dbe4 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800dc1e:	bf00      	nop
 800dc20:	e000      	b.n	800dc24 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800dc22:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800dc24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3718      	adds	r7, #24
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}

0800dc30 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b085      	sub	sp, #20
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800dc3e:	79fb      	ldrb	r3, [r7, #7]
 800dc40:	3301      	adds	r3, #1
 800dc42:	b2db      	uxtb	r3, r3
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800dc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3714      	adds	r7, #20
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800dc56:	b480      	push	{r7}
 800dc58:	b085      	sub	sp, #20
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800dc60:	2300      	movs	r3, #0
 800dc62:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800dc64:	79fb      	ldrb	r3, [r7, #7]
 800dc66:	085b      	lsrs	r3, r3, #1
 800dc68:	b2db      	uxtb	r3, r3
 800dc6a:	3b01      	subs	r3, #1
 800dc6c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800dc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b085      	sub	sp, #20
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800dc84:	2300      	movs	r3, #0
 800dc86:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800dc88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dc8c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800dc8e:	e002      	b.n	800dc96 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	089b      	lsrs	r3, r3, #2
 800dc94:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	429a      	cmp	r2, r3
 800dc9c:	d8f8      	bhi.n	800dc90 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800dc9e:	e017      	b.n	800dcd0 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	68bb      	ldr	r3, [r7, #8]
 800dca4:	4413      	add	r3, r2
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d30b      	bcc.n	800dcc4 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800dcac:	68fa      	ldr	r2, [r7, #12]
 800dcae:	68bb      	ldr	r3, [r7, #8]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	1ad3      	subs	r3, r2, r3
 800dcb6:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	085b      	lsrs	r3, r3, #1
 800dcbc:	68ba      	ldr	r2, [r7, #8]
 800dcbe:	4413      	add	r3, r2
 800dcc0:	60fb      	str	r3, [r7, #12]
 800dcc2:	e002      	b.n	800dcca <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	085b      	lsrs	r3, r3, #1
 800dcc8:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	089b      	lsrs	r3, r3, #2
 800dcce:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d1e4      	bne.n	800dca0 <VL53L0X_isqrt+0x24>
	}

	return res;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	3714      	adds	r7, #20
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce2:	4770      	bx	lr

0800dce4 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dcec:	2300      	movs	r3, #0
 800dcee:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	2183      	movs	r1, #131	; 0x83
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f002 faf3 	bl	80102e0 <VL53L0X_WrByte>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	7dfb      	ldrb	r3, [r7, #23]
 800dd00:	4313      	orrs	r3, r2
 800dd02:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800dd04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d11e      	bne.n	800dd4a <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800dd10:	f107 030f 	add.w	r3, r7, #15
 800dd14:	461a      	mov	r2, r3
 800dd16:	2183      	movs	r1, #131	; 0x83
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f002 fb63 	bl	80103e4 <VL53L0X_RdByte>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800dd22:	7bfb      	ldrb	r3, [r7, #15]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d10a      	bne.n	800dd3e <VL53L0X_device_read_strobe+0x5a>
 800dd28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d106      	bne.n	800dd3e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	3301      	adds	r3, #1
 800dd34:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800dd3c:	d3e8      	bcc.n	800dd10 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800dd3e:	693b      	ldr	r3, [r7, #16]
 800dd40:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800dd44:	d301      	bcc.n	800dd4a <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800dd46:	23f9      	movs	r3, #249	; 0xf9
 800dd48:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	2183      	movs	r1, #131	; 0x83
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f002 fac6 	bl	80102e0 <VL53L0X_WrByte>
 800dd54:	4603      	mov	r3, r0
 800dd56:	461a      	mov	r2, r3
 800dd58:	7dfb      	ldrb	r3, [r7, #23]
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800dd5e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}

0800dd6a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800dd6a:	b580      	push	{r7, lr}
 800dd6c:	b098      	sub	sp, #96	; 0x60
 800dd6e:	af00      	add	r7, sp, #0
 800dd70:	6078      	str	r0, [r7, #4]
 800dd72:	460b      	mov	r3, r1
 800dd74:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd76:	2300      	movs	r3, #0
 800dd78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800dd82:	2300      	movs	r3, #0
 800dd84:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800dd94:	2300      	movs	r3, #0
 800dd96:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800dd9a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800dd9e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800dda0:	2300      	movs	r3, #0
 800dda2:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800ddb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800ddb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddba:	2b07      	cmp	r3, #7
 800ddbc:	f000 8408 	beq.w	800e5d0 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800ddc0:	2201      	movs	r2, #1
 800ddc2:	2180      	movs	r1, #128	; 0x80
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f002 fa8b 	bl	80102e0 <VL53L0X_WrByte>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	461a      	mov	r2, r3
 800ddce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddd2:	4313      	orrs	r3, r2
 800ddd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ddd8:	2201      	movs	r2, #1
 800ddda:	21ff      	movs	r1, #255	; 0xff
 800dddc:	6878      	ldr	r0, [r7, #4]
 800ddde:	f002 fa7f 	bl	80102e0 <VL53L0X_WrByte>
 800dde2:	4603      	mov	r3, r0
 800dde4:	461a      	mov	r2, r3
 800dde6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddea:	4313      	orrs	r3, r2
 800ddec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800ddf0:	2200      	movs	r2, #0
 800ddf2:	2100      	movs	r1, #0
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f002 fa73 	bl	80102e0 <VL53L0X_WrByte>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de02:	4313      	orrs	r3, r2
 800de04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800de08:	2206      	movs	r2, #6
 800de0a:	21ff      	movs	r1, #255	; 0xff
 800de0c:	6878      	ldr	r0, [r7, #4]
 800de0e:	f002 fa67 	bl	80102e0 <VL53L0X_WrByte>
 800de12:	4603      	mov	r3, r0
 800de14:	461a      	mov	r2, r3
 800de16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de1a:	4313      	orrs	r3, r2
 800de1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800de20:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800de24:	461a      	mov	r2, r3
 800de26:	2183      	movs	r1, #131	; 0x83
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f002 fadb 	bl	80103e4 <VL53L0X_RdByte>
 800de2e:	4603      	mov	r3, r0
 800de30:	461a      	mov	r2, r3
 800de32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de36:	4313      	orrs	r3, r2
 800de38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800de3c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de40:	f043 0304 	orr.w	r3, r3, #4
 800de44:	b2db      	uxtb	r3, r3
 800de46:	461a      	mov	r2, r3
 800de48:	2183      	movs	r1, #131	; 0x83
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f002 fa48 	bl	80102e0 <VL53L0X_WrByte>
 800de50:	4603      	mov	r3, r0
 800de52:	461a      	mov	r2, r3
 800de54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de58:	4313      	orrs	r3, r2
 800de5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800de5e:	2207      	movs	r2, #7
 800de60:	21ff      	movs	r1, #255	; 0xff
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f002 fa3c 	bl	80102e0 <VL53L0X_WrByte>
 800de68:	4603      	mov	r3, r0
 800de6a:	461a      	mov	r2, r3
 800de6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de70:	4313      	orrs	r3, r2
 800de72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800de76:	2201      	movs	r2, #1
 800de78:	2181      	movs	r1, #129	; 0x81
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f002 fa30 	bl	80102e0 <VL53L0X_WrByte>
 800de80:	4603      	mov	r3, r0
 800de82:	461a      	mov	r2, r3
 800de84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de88:	4313      	orrs	r3, r2
 800de8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f002 fb46 	bl	8010520 <VL53L0X_PollingDelay>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de9c:	4313      	orrs	r3, r2
 800de9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800dea2:	2201      	movs	r2, #1
 800dea4:	2180      	movs	r1, #128	; 0x80
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f002 fa1a 	bl	80102e0 <VL53L0X_WrByte>
 800deac:	4603      	mov	r3, r0
 800deae:	461a      	mov	r2, r3
 800deb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deb4:	4313      	orrs	r3, r2
 800deb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800deba:	78fb      	ldrb	r3, [r7, #3]
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 8098 	beq.w	800dff6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800dec6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800deca:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f040 8091 	bne.w	800dff6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800ded4:	226b      	movs	r2, #107	; 0x6b
 800ded6:	2194      	movs	r1, #148	; 0x94
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f002 fa01 	bl	80102e0 <VL53L0X_WrByte>
 800dede:	4603      	mov	r3, r0
 800dee0:	461a      	mov	r2, r3
 800dee2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dee6:	4313      	orrs	r3, r2
 800dee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f7ff fef9 	bl	800dce4 <VL53L0X_device_read_strobe>
 800def2:	4603      	mov	r3, r0
 800def4:	461a      	mov	r2, r3
 800def6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800defa:	4313      	orrs	r3, r2
 800defc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df04:	461a      	mov	r2, r3
 800df06:	2190      	movs	r1, #144	; 0x90
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f002 facd 	bl	80104a8 <VL53L0X_RdDWord>
 800df0e:	4603      	mov	r3, r0
 800df10:	461a      	mov	r2, r3
 800df12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df16:	4313      	orrs	r3, r2
 800df18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800df1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df1e:	0a1b      	lsrs	r3, r3, #8
 800df20:	b2db      	uxtb	r3, r3
 800df22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df26:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800df2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2c:	0bdb      	lsrs	r3, r3, #15
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	f003 0301 	and.w	r3, r3, #1
 800df34:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800df38:	2224      	movs	r2, #36	; 0x24
 800df3a:	2194      	movs	r1, #148	; 0x94
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f002 f9cf 	bl	80102e0 <VL53L0X_WrByte>
 800df42:	4603      	mov	r3, r0
 800df44:	461a      	mov	r2, r3
 800df46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f7ff fec7 	bl	800dce4 <VL53L0X_device_read_strobe>
 800df56:	4603      	mov	r3, r0
 800df58:	461a      	mov	r2, r3
 800df5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df5e:	4313      	orrs	r3, r2
 800df60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df64:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df68:	461a      	mov	r2, r3
 800df6a:	2190      	movs	r1, #144	; 0x90
 800df6c:	6878      	ldr	r0, [r7, #4]
 800df6e:	f002 fa9b 	bl	80104a8 <VL53L0X_RdDWord>
 800df72:	4603      	mov	r3, r0
 800df74:	461a      	mov	r2, r3
 800df76:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df7a:	4313      	orrs	r3, r2
 800df7c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800df80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df82:	0e1b      	lsrs	r3, r3, #24
 800df84:	b2db      	uxtb	r3, r3
 800df86:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	0c1b      	lsrs	r3, r3, #16
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	0a1b      	lsrs	r3, r3, #8
 800df94:	b2db      	uxtb	r3, r3
 800df96:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800df98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800df9e:	2225      	movs	r2, #37	; 0x25
 800dfa0:	2194      	movs	r1, #148	; 0x94
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f002 f99c 	bl	80102e0 <VL53L0X_WrByte>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	461a      	mov	r2, r3
 800dfac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f7ff fe94 	bl	800dce4 <VL53L0X_device_read_strobe>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	461a      	mov	r2, r3
 800dfc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfc4:	4313      	orrs	r3, r2
 800dfc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dfca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dfce:	461a      	mov	r2, r3
 800dfd0:	2190      	movs	r1, #144	; 0x90
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f002 fa68 	bl	80104a8 <VL53L0X_RdDWord>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	461a      	mov	r2, r3
 800dfdc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800dfe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe8:	0e1b      	lsrs	r3, r3, #24
 800dfea:	b2db      	uxtb	r3, r3
 800dfec:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	0c1b      	lsrs	r3, r3, #16
 800dff2:	b2db      	uxtb	r3, r3
 800dff4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800dff6:	78fb      	ldrb	r3, [r7, #3]
 800dff8:	f003 0302 	and.w	r3, r3, #2
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f000 8189 	beq.w	800e314 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e002:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e006:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	f040 8182 	bne.w	800e314 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800e010:	2202      	movs	r2, #2
 800e012:	2194      	movs	r1, #148	; 0x94
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f002 f963 	bl	80102e0 <VL53L0X_WrByte>
 800e01a:	4603      	mov	r3, r0
 800e01c:	461a      	mov	r2, r3
 800e01e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e022:	4313      	orrs	r3, r2
 800e024:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e028:	6878      	ldr	r0, [r7, #4]
 800e02a:	f7ff fe5b 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e02e:	4603      	mov	r3, r0
 800e030:	461a      	mov	r2, r3
 800e032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e036:	4313      	orrs	r3, r2
 800e038:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800e03c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800e040:	461a      	mov	r2, r3
 800e042:	2190      	movs	r1, #144	; 0x90
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f002 f9cd 	bl	80103e4 <VL53L0X_RdByte>
 800e04a:	4603      	mov	r3, r0
 800e04c:	461a      	mov	r2, r3
 800e04e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e052:	4313      	orrs	r3, r2
 800e054:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e058:	227b      	movs	r2, #123	; 0x7b
 800e05a:	2194      	movs	r1, #148	; 0x94
 800e05c:	6878      	ldr	r0, [r7, #4]
 800e05e:	f002 f93f 	bl	80102e0 <VL53L0X_WrByte>
 800e062:	4603      	mov	r3, r0
 800e064:	461a      	mov	r2, r3
 800e066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e06a:	4313      	orrs	r3, r2
 800e06c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f7ff fe37 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e076:	4603      	mov	r3, r0
 800e078:	461a      	mov	r2, r3
 800e07a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e07e:	4313      	orrs	r3, r2
 800e080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800e084:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800e088:	461a      	mov	r2, r3
 800e08a:	2190      	movs	r1, #144	; 0x90
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f002 f9a9 	bl	80103e4 <VL53L0X_RdByte>
 800e092:	4603      	mov	r3, r0
 800e094:	461a      	mov	r2, r3
 800e096:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e09a:	4313      	orrs	r3, r2
 800e09c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800e0a0:	2277      	movs	r2, #119	; 0x77
 800e0a2:	2194      	movs	r1, #148	; 0x94
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f002 f91b 	bl	80102e0 <VL53L0X_WrByte>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7ff fe13 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0c6:	4313      	orrs	r3, r2
 800e0c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e0cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	2190      	movs	r1, #144	; 0x90
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f002 f9e7 	bl	80104a8 <VL53L0X_RdDWord>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	461a      	mov	r2, r3
 800e0de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0e2:	4313      	orrs	r3, r2
 800e0e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	0e5b      	lsrs	r3, r3, #25
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0f8:	0c9b      	lsrs	r3, r3, #18
 800e0fa:	b2db      	uxtb	r3, r3
 800e0fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e100:	b2db      	uxtb	r3, r3
 800e102:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800e104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e106:	0adb      	lsrs	r3, r3, #11
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800e112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e114:	091b      	lsrs	r3, r3, #4
 800e116:	b2db      	uxtb	r3, r3
 800e118:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800e120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e122:	b2db      	uxtb	r3, r3
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	b2db      	uxtb	r3, r3
 800e128:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800e12c:	b2db      	uxtb	r3, r3
 800e12e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800e132:	2278      	movs	r2, #120	; 0x78
 800e134:	2194      	movs	r1, #148	; 0x94
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f002 f8d2 	bl	80102e0 <VL53L0X_WrByte>
 800e13c:	4603      	mov	r3, r0
 800e13e:	461a      	mov	r2, r3
 800e140:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e144:	4313      	orrs	r3, r2
 800e146:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f7ff fdca 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e150:	4603      	mov	r3, r0
 800e152:	461a      	mov	r2, r3
 800e154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e158:	4313      	orrs	r3, r2
 800e15a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e15e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e162:	461a      	mov	r2, r3
 800e164:	2190      	movs	r1, #144	; 0x90
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f002 f99e 	bl	80104a8 <VL53L0X_RdDWord>
 800e16c:	4603      	mov	r3, r0
 800e16e:	461a      	mov	r2, r3
 800e170:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e174:	4313      	orrs	r3, r2
 800e176:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	0f5b      	lsrs	r3, r3, #29
 800e17e:	b2db      	uxtb	r3, r3
 800e180:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e184:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800e186:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e18a:	4413      	add	r3, r2
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800e190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e192:	0d9b      	lsrs	r3, r3, #22
 800e194:	b2db      	uxtb	r3, r3
 800e196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800e19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a0:	0bdb      	lsrs	r3, r3, #15
 800e1a2:	b2db      	uxtb	r3, r3
 800e1a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1a8:	b2db      	uxtb	r3, r3
 800e1aa:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ae:	0a1b      	lsrs	r3, r3, #8
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800e1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1bc:	085b      	lsrs	r3, r3, #1
 800e1be:	b2db      	uxtb	r3, r3
 800e1c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e1c4:	b2db      	uxtb	r3, r3
 800e1c6:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800e1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	019b      	lsls	r3, r3, #6
 800e1ce:	b2db      	uxtb	r3, r3
 800e1d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1d4:	b2db      	uxtb	r3, r3
 800e1d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800e1da:	2279      	movs	r2, #121	; 0x79
 800e1dc:	2194      	movs	r1, #148	; 0x94
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f002 f87e 	bl	80102e0 <VL53L0X_WrByte>
 800e1e4:	4603      	mov	r3, r0
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7ff fd76 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e200:	4313      	orrs	r3, r2
 800e202:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e206:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e20a:	461a      	mov	r2, r3
 800e20c:	2190      	movs	r1, #144	; 0x90
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f002 f94a 	bl	80104a8 <VL53L0X_RdDWord>
 800e214:	4603      	mov	r3, r0
 800e216:	461a      	mov	r2, r3
 800e218:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e21c:	4313      	orrs	r3, r2
 800e21e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800e222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e224:	0e9b      	lsrs	r3, r3, #26
 800e226:	b2db      	uxtb	r3, r3
 800e228:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e22c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800e22e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e232:	4413      	add	r3, r2
 800e234:	b2db      	uxtb	r3, r3
 800e236:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800e238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e23a:	0cdb      	lsrs	r3, r3, #19
 800e23c:	b2db      	uxtb	r3, r3
 800e23e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e242:	b2db      	uxtb	r3, r3
 800e244:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800e246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e248:	0b1b      	lsrs	r3, r3, #12
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e250:	b2db      	uxtb	r3, r3
 800e252:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800e254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e256:	095b      	lsrs	r3, r3, #5
 800e258:	b2db      	uxtb	r3, r3
 800e25a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800e262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e264:	b2db      	uxtb	r3, r3
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800e274:	227a      	movs	r2, #122	; 0x7a
 800e276:	2194      	movs	r1, #148	; 0x94
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f002 f831 	bl	80102e0 <VL53L0X_WrByte>
 800e27e:	4603      	mov	r3, r0
 800e280:	461a      	mov	r2, r3
 800e282:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e286:	4313      	orrs	r3, r2
 800e288:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f7ff fd29 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e292:	4603      	mov	r3, r0
 800e294:	461a      	mov	r2, r3
 800e296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e29a:	4313      	orrs	r3, r2
 800e29c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e2a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e2a4:	461a      	mov	r2, r3
 800e2a6:	2190      	movs	r1, #144	; 0x90
 800e2a8:	6878      	ldr	r0, [r7, #4]
 800e2aa:	f002 f8fd 	bl	80104a8 <VL53L0X_RdDWord>
 800e2ae:	4603      	mov	r3, r0
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e2b6:	4313      	orrs	r3, r2
 800e2b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800e2bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2be:	0f9b      	lsrs	r3, r3, #30
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2c6:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800e2c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e2cc:	4413      	add	r3, r2
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800e2d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d4:	0ddb      	lsrs	r3, r3, #23
 800e2d6:	b2db      	uxtb	r3, r3
 800e2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2dc:	b2db      	uxtb	r3, r3
 800e2de:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800e2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2e2:	0c1b      	lsrs	r3, r3, #16
 800e2e4:	b2db      	uxtb	r3, r3
 800e2e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2ea:	b2db      	uxtb	r3, r3
 800e2ec:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800e2ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f0:	0a5b      	lsrs	r3, r3, #9
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e2f8:	b2db      	uxtb	r3, r3
 800e2fa:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	089b      	lsrs	r3, r3, #2
 800e302:	b2db      	uxtb	r3, r3
 800e304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e308:	b2db      	uxtb	r3, r3
 800e30a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800e30e:	2300      	movs	r3, #0
 800e310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800e314:	78fb      	ldrb	r3, [r7, #3]
 800e316:	f003 0304 	and.w	r3, r3, #4
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	f000 80f1 	beq.w	800e502 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e320:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e324:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f040 80ea 	bne.w	800e502 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800e32e:	227b      	movs	r2, #123	; 0x7b
 800e330:	2194      	movs	r1, #148	; 0x94
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f001 ffd4 	bl	80102e0 <VL53L0X_WrByte>
 800e338:	4603      	mov	r3, r0
 800e33a:	461a      	mov	r2, r3
 800e33c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e340:	4313      	orrs	r3, r2
 800e342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff fccc 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e34c:	4603      	mov	r3, r0
 800e34e:	461a      	mov	r2, r3
 800e350:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e354:	4313      	orrs	r3, r2
 800e356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800e35a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e35e:	461a      	mov	r2, r3
 800e360:	2190      	movs	r1, #144	; 0x90
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f002 f8a0 	bl	80104a8 <VL53L0X_RdDWord>
 800e368:	4603      	mov	r3, r0
 800e36a:	461a      	mov	r2, r3
 800e36c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e370:	4313      	orrs	r3, r2
 800e372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800e376:	227c      	movs	r2, #124	; 0x7c
 800e378:	2194      	movs	r1, #148	; 0x94
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f001 ffb0 	bl	80102e0 <VL53L0X_WrByte>
 800e380:	4603      	mov	r3, r0
 800e382:	461a      	mov	r2, r3
 800e384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e388:	4313      	orrs	r3, r2
 800e38a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f7ff fca8 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e394:	4603      	mov	r3, r0
 800e396:	461a      	mov	r2, r3
 800e398:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e39c:	4313      	orrs	r3, r2
 800e39e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800e3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	2190      	movs	r1, #144	; 0x90
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f002 f87c 	bl	80104a8 <VL53L0X_RdDWord>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3b8:	4313      	orrs	r3, r2
 800e3ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800e3be:	2273      	movs	r2, #115	; 0x73
 800e3c0:	2194      	movs	r1, #148	; 0x94
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f001 ff8c 	bl	80102e0 <VL53L0X_WrByte>
 800e3c8:	4603      	mov	r3, r0
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3d0:	4313      	orrs	r3, r2
 800e3d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7ff fc84 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	461a      	mov	r2, r3
 800e3e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e3e4:	4313      	orrs	r3, r2
 800e3e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e3ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	2190      	movs	r1, #144	; 0x90
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f002 f858 	bl	80104a8 <VL53L0X_RdDWord>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e400:	4313      	orrs	r3, r2
 800e402:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800e406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e408:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800e40a:	b29b      	uxth	r3, r3
 800e40c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800e40e:	2274      	movs	r2, #116	; 0x74
 800e410:	2194      	movs	r1, #148	; 0x94
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f001 ff64 	bl	80102e0 <VL53L0X_WrByte>
 800e418:	4603      	mov	r3, r0
 800e41a:	461a      	mov	r2, r3
 800e41c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e420:	4313      	orrs	r3, r2
 800e422:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7ff fc5c 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e42c:	4603      	mov	r3, r0
 800e42e:	461a      	mov	r2, r3
 800e430:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e434:	4313      	orrs	r3, r2
 800e436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e43a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e43e:	461a      	mov	r2, r3
 800e440:	2190      	movs	r1, #144	; 0x90
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f002 f830 	bl	80104a8 <VL53L0X_RdDWord>
 800e448:	4603      	mov	r3, r0
 800e44a:	461a      	mov	r2, r3
 800e44c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e450:	4313      	orrs	r3, r2
 800e452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800e456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e458:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e45a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e45c:	4313      	orrs	r3, r2
 800e45e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e460:	2275      	movs	r2, #117	; 0x75
 800e462:	2194      	movs	r1, #148	; 0x94
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f001 ff3b 	bl	80102e0 <VL53L0X_WrByte>
 800e46a:	4603      	mov	r3, r0
 800e46c:	461a      	mov	r2, r3
 800e46e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e472:	4313      	orrs	r3, r2
 800e474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e478:	6878      	ldr	r0, [r7, #4]
 800e47a:	f7ff fc33 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e47e:	4603      	mov	r3, r0
 800e480:	461a      	mov	r2, r3
 800e482:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e486:	4313      	orrs	r3, r2
 800e488:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e48c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e490:	461a      	mov	r2, r3
 800e492:	2190      	movs	r1, #144	; 0x90
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f002 f807 	bl	80104a8 <VL53L0X_RdDWord>
 800e49a:	4603      	mov	r3, r0
 800e49c:	461a      	mov	r2, r3
 800e49e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4a2:	4313      	orrs	r3, r2
 800e4a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e4a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4aa:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e4ac:	b29b      	uxth	r3, r3
 800e4ae:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e4b0:	2276      	movs	r2, #118	; 0x76
 800e4b2:	2194      	movs	r1, #148	; 0x94
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f001 ff13 	bl	80102e0 <VL53L0X_WrByte>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	461a      	mov	r2, r3
 800e4be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4c2:	4313      	orrs	r3, r2
 800e4c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f7ff fc0b 	bl	800dce4 <VL53L0X_device_read_strobe>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	461a      	mov	r2, r3
 800e4d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4d6:	4313      	orrs	r3, r2
 800e4d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e4dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e4e0:	461a      	mov	r2, r3
 800e4e2:	2190      	movs	r1, #144	; 0x90
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f001 ffdf 	bl	80104a8 <VL53L0X_RdDWord>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	461a      	mov	r2, r3
 800e4ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e4f2:	4313      	orrs	r3, r2
 800e4f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4fa:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e4fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e4fe:	4313      	orrs	r3, r2
 800e500:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e502:	2200      	movs	r2, #0
 800e504:	2181      	movs	r1, #129	; 0x81
 800e506:	6878      	ldr	r0, [r7, #4]
 800e508:	f001 feea 	bl	80102e0 <VL53L0X_WrByte>
 800e50c:	4603      	mov	r3, r0
 800e50e:	461a      	mov	r2, r3
 800e510:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e514:	4313      	orrs	r3, r2
 800e516:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e51a:	2206      	movs	r2, #6
 800e51c:	21ff      	movs	r1, #255	; 0xff
 800e51e:	6878      	ldr	r0, [r7, #4]
 800e520:	f001 fede 	bl	80102e0 <VL53L0X_WrByte>
 800e524:	4603      	mov	r3, r0
 800e526:	461a      	mov	r2, r3
 800e528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e52c:	4313      	orrs	r3, r2
 800e52e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e532:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e536:	461a      	mov	r2, r3
 800e538:	2183      	movs	r1, #131	; 0x83
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f001 ff52 	bl	80103e4 <VL53L0X_RdByte>
 800e540:	4603      	mov	r3, r0
 800e542:	461a      	mov	r2, r3
 800e544:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e548:	4313      	orrs	r3, r2
 800e54a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e54e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e552:	f023 0304 	bic.w	r3, r3, #4
 800e556:	b2db      	uxtb	r3, r3
 800e558:	461a      	mov	r2, r3
 800e55a:	2183      	movs	r1, #131	; 0x83
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f001 febf 	bl	80102e0 <VL53L0X_WrByte>
 800e562:	4603      	mov	r3, r0
 800e564:	461a      	mov	r2, r3
 800e566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e56a:	4313      	orrs	r3, r2
 800e56c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e570:	2201      	movs	r2, #1
 800e572:	21ff      	movs	r1, #255	; 0xff
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f001 feb3 	bl	80102e0 <VL53L0X_WrByte>
 800e57a:	4603      	mov	r3, r0
 800e57c:	461a      	mov	r2, r3
 800e57e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e582:	4313      	orrs	r3, r2
 800e584:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e588:	2201      	movs	r2, #1
 800e58a:	2100      	movs	r1, #0
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f001 fea7 	bl	80102e0 <VL53L0X_WrByte>
 800e592:	4603      	mov	r3, r0
 800e594:	461a      	mov	r2, r3
 800e596:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e59a:	4313      	orrs	r3, r2
 800e59c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	21ff      	movs	r1, #255	; 0xff
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	f001 fe9b 	bl	80102e0 <VL53L0X_WrByte>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	461a      	mov	r2, r3
 800e5ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5b2:	4313      	orrs	r3, r2
 800e5b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	2180      	movs	r1, #128	; 0x80
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f001 fe8f 	bl	80102e0 <VL53L0X_WrByte>
 800e5c2:	4603      	mov	r3, r0
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e5d0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	f040 808f 	bne.w	800e6f8 <VL53L0X_get_info_from_device+0x98e>
 800e5da:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5de:	2b07      	cmp	r3, #7
 800e5e0:	f000 808a 	beq.w	800e6f8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e5e4:	78fb      	ldrb	r3, [r7, #3]
 800e5e6:	f003 0301 	and.w	r3, r3, #1
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d024      	beq.n	800e638 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e5ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e5f2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d11e      	bne.n	800e638 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800e600:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800e60a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e60e:	2300      	movs	r3, #0
 800e610:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e612:	e00e      	b.n	800e632 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e614:	f107 0208 	add.w	r2, r7, #8
 800e618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e61a:	4413      	add	r3, r2
 800e61c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e61e:	687a      	ldr	r2, [r7, #4]
 800e620:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e622:	4413      	add	r3, r2
 800e624:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e628:	460a      	mov	r2, r1
 800e62a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e62c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e62e:	3301      	adds	r3, #1
 800e630:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e634:	2b05      	cmp	r3, #5
 800e636:	dded      	ble.n	800e614 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800e638:	78fb      	ldrb	r3, [r7, #3]
 800e63a:	f003 0302 	and.w	r3, r3, #2
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d018      	beq.n	800e674 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e642:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e646:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d112      	bne.n	800e674 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e64e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e658:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	33f3      	adds	r3, #243	; 0xf3
 800e666:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e668:	f107 0310 	add.w	r3, r7, #16
 800e66c:	4619      	mov	r1, r3
 800e66e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e670:	f004 fcd8 	bl	8013024 <strcpy>

		}

		if (((option & 4) == 4) &&
 800e674:	78fb      	ldrb	r3, [r7, #3]
 800e676:	f003 0304 	and.w	r3, r3, #4
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d030      	beq.n	800e6e0 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e67e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e682:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e686:	2b00      	cmp	r3, #0
 800e688:	d12a      	bne.n	800e6e0 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e68a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e69a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e69c:	025b      	lsls	r3, r3, #9
 800e69e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e6a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800e6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d011      	beq.n	800e6d8 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800e6b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e6b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e6bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e6be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6c2:	fb02 f303 	mul.w	r3, r2, r3
 800e6c6:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e6c8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800e6cc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e6d0:	425b      	negs	r3, r3
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800e6d8:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e6e0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e6e4:	78fb      	ldrb	r3, [r7, #3]
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	b2db      	uxtb	r3, r3
 800e6ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e6ee:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e6f8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3760      	adds	r7, #96	; 0x60
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e704:	b480      	push	{r7}
 800e706:	b087      	sub	sp, #28
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	460b      	mov	r3, r1
 800e70e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e710:	f240 6277 	movw	r2, #1655	; 0x677
 800e714:	f04f 0300 	mov.w	r3, #0
 800e718:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800e71c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e720:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e722:	78fb      	ldrb	r3, [r7, #3]
 800e724:	68fa      	ldr	r2, [r7, #12]
 800e726:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e72a:	693a      	ldr	r2, [r7, #16]
 800e72c:	fb02 f303 	mul.w	r3, r2, r3
 800e730:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e732:	68bb      	ldr	r3, [r7, #8]
}
 800e734:	4618      	mov	r0, r3
 800e736:	371c      	adds	r7, #28
 800e738:	46bd      	mov	sp, r7
 800e73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73e:	4770      	bx	lr

0800e740 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e740:	b480      	push	{r7}
 800e742:	b087      	sub	sp, #28
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e750:	2300      	movs	r3, #0
 800e752:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d017      	beq.n	800e78a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	3b01      	subs	r3, #1
 800e75e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e760:	e005      	b.n	800e76e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e762:	693b      	ldr	r3, [r7, #16]
 800e764:	085b      	lsrs	r3, r3, #1
 800e766:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e768:	89fb      	ldrh	r3, [r7, #14]
 800e76a:	3301      	adds	r3, #1
 800e76c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e76e:	693b      	ldr	r3, [r7, #16]
 800e770:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e774:	2b00      	cmp	r3, #0
 800e776:	d1f4      	bne.n	800e762 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e778:	89fb      	ldrh	r3, [r7, #14]
 800e77a:	021b      	lsls	r3, r3, #8
 800e77c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	b29b      	uxth	r3, r3
 800e782:	b2db      	uxtb	r3, r3
 800e784:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e786:	4413      	add	r3, r2
 800e788:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e78a:	8afb      	ldrh	r3, [r7, #22]

}
 800e78c:	4618      	mov	r0, r3
 800e78e:	371c      	adds	r7, #28
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e798:	b480      	push	{r7}
 800e79a:	b085      	sub	sp, #20
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	4603      	mov	r3, r0
 800e7a0:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e7a6:	88fb      	ldrh	r3, [r7, #6]
 800e7a8:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e7aa:	88fa      	ldrh	r2, [r7, #6]
 800e7ac:	0a12      	lsrs	r2, r2, #8
 800e7ae:	b292      	uxth	r2, r2
 800e7b0:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3714      	adds	r7, #20
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b088      	sub	sp, #32
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e7d6:	79fb      	ldrb	r3, [r7, #7]
 800e7d8:	4619      	mov	r1, r3
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f7ff ff92 	bl	800e704 <VL53L0X_calc_macro_period_ps>
 800e7e0:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e7e8:	4a0a      	ldr	r2, [pc, #40]	; (800e814 <VL53L0X_calc_timeout_mclks+0x50>)
 800e7ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e7ee:	099b      	lsrs	r3, r3, #6
 800e7f0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e7f8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e7fc:	697b      	ldr	r3, [r7, #20]
 800e7fe:	085b      	lsrs	r3, r3, #1
 800e800:	441a      	add	r2, r3
	timeout_period_mclks =
 800e802:	697b      	ldr	r3, [r7, #20]
 800e804:	fbb2 f3f3 	udiv	r3, r2, r3
 800e808:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e80a:	69fb      	ldr	r3, [r7, #28]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3720      	adds	r7, #32
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	10624dd3 	.word	0x10624dd3

0800e818 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b086      	sub	sp, #24
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	807b      	strh	r3, [r7, #2]
 800e824:	4613      	mov	r3, r2
 800e826:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e828:	2300      	movs	r3, #0
 800e82a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e82c:	787b      	ldrb	r3, [r7, #1]
 800e82e:	4619      	mov	r1, r3
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f7ff ff67 	bl	800e704 <VL53L0X_calc_macro_period_ps>
 800e836:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e838:	693b      	ldr	r3, [r7, #16]
 800e83a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e83e:	4a0a      	ldr	r2, [pc, #40]	; (800e868 <VL53L0X_calc_timeout_us+0x50>)
 800e840:	fba2 2303 	umull	r2, r3, r2, r3
 800e844:	099b      	lsrs	r3, r3, #6
 800e846:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e848:	887b      	ldrh	r3, [r7, #2]
 800e84a:	68fa      	ldr	r2, [r7, #12]
 800e84c:	fb02 f303 	mul.w	r3, r2, r3
 800e850:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800e854:	4a04      	ldr	r2, [pc, #16]	; (800e868 <VL53L0X_calc_timeout_us+0x50>)
 800e856:	fba2 2303 	umull	r2, r3, r2, r3
 800e85a:	099b      	lsrs	r3, r3, #6
 800e85c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e85e:	697b      	ldr	r3, [r7, #20]
}
 800e860:	4618      	mov	r0, r3
 800e862:	3718      	adds	r7, #24
 800e864:	46bd      	mov	sp, r7
 800e866:	bd80      	pop	{r7, pc}
 800e868:	10624dd3 	.word	0x10624dd3

0800e86c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b08c      	sub	sp, #48	; 0x30
 800e870:	af00      	add	r7, sp, #0
 800e872:	60f8      	str	r0, [r7, #12]
 800e874:	460b      	mov	r3, r1
 800e876:	607a      	str	r2, [r7, #4]
 800e878:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e87a:	2300      	movs	r3, #0
 800e87c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e880:	2300      	movs	r3, #0
 800e882:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e88a:	2300      	movs	r3, #0
 800e88c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e892:	7afb      	ldrb	r3, [r7, #11]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d005      	beq.n	800e8a4 <get_sequence_step_timeout+0x38>
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	2b01      	cmp	r3, #1
 800e89c:	d002      	beq.n	800e8a4 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e89e:	7afb      	ldrb	r3, [r7, #11]
 800e8a0:	2b02      	cmp	r3, #2
 800e8a2:	d128      	bne.n	800e8f6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e8a4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e8a8:	461a      	mov	r2, r3
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	f7fd fa7d 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800e8b2:	4603      	mov	r3, r0
 800e8b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e8b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d109      	bne.n	800e8d4 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e8c0:	f107 0320 	add.w	r3, r7, #32
 800e8c4:	461a      	mov	r2, r3
 800e8c6:	2146      	movs	r1, #70	; 0x46
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f001 fd8b 	bl	80103e4 <VL53L0X_RdByte>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e8d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8d8:	b29b      	uxth	r3, r3
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7ff ff5c 	bl	800e798 <VL53L0X_decode_timeout>
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e8e4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e8e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8ea:	4619      	mov	r1, r3
 800e8ec:	68f8      	ldr	r0, [r7, #12]
 800e8ee:	f7ff ff93 	bl	800e818 <VL53L0X_calc_timeout_us>
 800e8f2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e8f4:	e092      	b.n	800ea1c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e8f6:	7afb      	ldrb	r3, [r7, #11]
 800e8f8:	2b03      	cmp	r3, #3
 800e8fa:	d135      	bne.n	800e968 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e8fc:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e900:	461a      	mov	r2, r3
 800e902:	2100      	movs	r1, #0
 800e904:	68f8      	ldr	r0, [r7, #12]
 800e906:	f7fd fa51 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800e90a:	4603      	mov	r3, r0
 800e90c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e910:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e914:	2b00      	cmp	r3, #0
 800e916:	f040 8081 	bne.w	800ea1c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e91a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e91e:	461a      	mov	r2, r3
 800e920:	2100      	movs	r1, #0
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f7fd fa42 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800e928:	4603      	mov	r3, r0
 800e92a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e92e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e932:	2b00      	cmp	r3, #0
 800e934:	d109      	bne.n	800e94a <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e936:	f107 031e 	add.w	r3, r7, #30
 800e93a:	461a      	mov	r2, r3
 800e93c:	2151      	movs	r1, #81	; 0x51
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f001 fd7a 	bl	8010438 <VL53L0X_RdWord>
 800e944:	4603      	mov	r3, r0
 800e946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e94a:	8bfb      	ldrh	r3, [r7, #30]
 800e94c:	4618      	mov	r0, r3
 800e94e:	f7ff ff23 	bl	800e798 <VL53L0X_decode_timeout>
 800e952:	4603      	mov	r3, r0
 800e954:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e956:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e95a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e95c:	4619      	mov	r1, r3
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f7ff ff5a 	bl	800e818 <VL53L0X_calc_timeout_us>
 800e964:	62b8      	str	r0, [r7, #40]	; 0x28
 800e966:	e059      	b.n	800ea1c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e968:	7afb      	ldrb	r3, [r7, #11]
 800e96a:	2b04      	cmp	r3, #4
 800e96c:	d156      	bne.n	800ea1c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e96e:	f107 0314 	add.w	r3, r7, #20
 800e972:	4619      	mov	r1, r3
 800e974:	68f8      	ldr	r0, [r7, #12]
 800e976:	f7fd fb25 	bl	800bfc4 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e97e:	7dfb      	ldrb	r3, [r7, #23]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d01d      	beq.n	800e9c0 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e984:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e988:	461a      	mov	r2, r3
 800e98a:	2100      	movs	r1, #0
 800e98c:	68f8      	ldr	r0, [r7, #12]
 800e98e:	f7fd fa0d 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800e992:	4603      	mov	r3, r0
 800e994:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e998:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d10f      	bne.n	800e9c0 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e9a0:	f107 031e 	add.w	r3, r7, #30
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	2151      	movs	r1, #81	; 0x51
 800e9a8:	68f8      	ldr	r0, [r7, #12]
 800e9aa:	f001 fd45 	bl	8010438 <VL53L0X_RdWord>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e9b4:	8bfb      	ldrh	r3, [r7, #30]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7ff feee 	bl	800e798 <VL53L0X_decode_timeout>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e9c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d109      	bne.n	800e9dc <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e9c8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	2101      	movs	r1, #1
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7fd f9eb 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e9dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10f      	bne.n	800ea04 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e9e4:	f107 031c 	add.w	r3, r7, #28
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	2171      	movs	r1, #113	; 0x71
 800e9ec:	68f8      	ldr	r0, [r7, #12]
 800e9ee:	f001 fd23 	bl	8010438 <VL53L0X_RdWord>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e9f8:	8bbb      	ldrh	r3, [r7, #28]
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f7ff fecc 	bl	800e798 <VL53L0X_decode_timeout>
 800ea00:	4603      	mov	r3, r0
 800ea02:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800ea04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea08:	1ad3      	subs	r3, r2, r3
 800ea0a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ea0c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ea10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea12:	4619      	mov	r1, r3
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7ff feff 	bl	800e818 <VL53L0X_calc_timeout_us>
 800ea1a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea20:	601a      	str	r2, [r3, #0]

	return Status;
 800ea22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3730      	adds	r7, #48	; 0x30
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}

0800ea2e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800ea2e:	b580      	push	{r7, lr}
 800ea30:	b08a      	sub	sp, #40	; 0x28
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	60f8      	str	r0, [r7, #12]
 800ea36:	460b      	mov	r3, r1
 800ea38:	607a      	str	r2, [r7, #4]
 800ea3a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800ea42:	7afb      	ldrb	r3, [r7, #11]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d005      	beq.n	800ea54 <set_sequence_step_timeout+0x26>
 800ea48:	7afb      	ldrb	r3, [r7, #11]
 800ea4a:	2b01      	cmp	r3, #1
 800ea4c:	d002      	beq.n	800ea54 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800ea4e:	7afb      	ldrb	r3, [r7, #11]
 800ea50:	2b02      	cmp	r3, #2
 800ea52:	d138      	bne.n	800eac6 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ea54:	f107 031b 	add.w	r3, r7, #27
 800ea58:	461a      	mov	r2, r3
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	68f8      	ldr	r0, [r7, #12]
 800ea5e:	f7fd f9a5 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800ea62:	4603      	mov	r3, r0
 800ea64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800ea68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d11a      	bne.n	800eaa6 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800ea70:	7efb      	ldrb	r3, [r7, #27]
 800ea72:	461a      	mov	r2, r3
 800ea74:	6879      	ldr	r1, [r7, #4]
 800ea76:	68f8      	ldr	r0, [r7, #12]
 800ea78:	f7ff fea4 	bl	800e7c4 <VL53L0X_calc_timeout_mclks>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800ea80:	8bbb      	ldrh	r3, [r7, #28]
 800ea82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea86:	d903      	bls.n	800ea90 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800ea88:	23ff      	movs	r3, #255	; 0xff
 800ea8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ea8e:	e004      	b.n	800ea9a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800ea90:	8bbb      	ldrh	r3, [r7, #28]
 800ea92:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800ea94:	3b01      	subs	r3, #1
 800ea96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ea9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800eaa6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	f040 80ab 	bne.w	800ec06 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800eab0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eab4:	461a      	mov	r2, r3
 800eab6:	2146      	movs	r1, #70	; 0x46
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	f001 fc11 	bl	80102e0 <VL53L0X_WrByte>
 800eabe:	4603      	mov	r3, r0
 800eac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800eac4:	e09f      	b.n	800ec06 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800eac6:	7afb      	ldrb	r3, [r7, #11]
 800eac8:	2b03      	cmp	r3, #3
 800eaca:	d135      	bne.n	800eb38 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800eacc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d11b      	bne.n	800eb0c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ead4:	f107 031b 	add.w	r3, r7, #27
 800ead8:	461a      	mov	r2, r3
 800eada:	2100      	movs	r1, #0
 800eadc:	68f8      	ldr	r0, [r7, #12]
 800eade:	f7fd f965 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800eae2:	4603      	mov	r3, r0
 800eae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800eae8:	7efb      	ldrb	r3, [r7, #27]
 800eaea:	461a      	mov	r2, r3
 800eaec:	6879      	ldr	r1, [r7, #4]
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f7ff fe68 	bl	800e7c4 <VL53L0X_calc_timeout_mclks>
 800eaf4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800eaf6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800eaf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7ff fe20 	bl	800e740 <VL53L0X_encode_timeout>
 800eb00:	4603      	mov	r3, r0
 800eb02:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800eb04:	8b3a      	ldrh	r2, [r7, #24]
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800eb0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb10:	2b00      	cmp	r3, #0
 800eb12:	d108      	bne.n	800eb26 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800eb14:	8b3b      	ldrh	r3, [r7, #24]
 800eb16:	461a      	mov	r2, r3
 800eb18:	2151      	movs	r1, #81	; 0x51
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f001 fc04 	bl	8010328 <VL53L0X_WrWord>
 800eb20:	4603      	mov	r3, r0
 800eb22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800eb26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d16b      	bne.n	800ec06 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800eb36:	e066      	b.n	800ec06 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800eb38:	7afb      	ldrb	r3, [r7, #11]
 800eb3a:	2b04      	cmp	r3, #4
 800eb3c:	d160      	bne.n	800ec00 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800eb3e:	f107 0310 	add.w	r3, r7, #16
 800eb42:	4619      	mov	r1, r3
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f7fd fa3d 	bl	800bfc4 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800eb4e:	7cfb      	ldrb	r3, [r7, #19]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01d      	beq.n	800eb90 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800eb54:	f107 031b 	add.w	r3, r7, #27
 800eb58:	461a      	mov	r2, r3
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	68f8      	ldr	r0, [r7, #12]
 800eb5e:	f7fd f925 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800eb62:	4603      	mov	r3, r0
 800eb64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800eb68:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d10f      	bne.n	800eb90 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800eb70:	f107 0318 	add.w	r3, r7, #24
 800eb74:	461a      	mov	r2, r3
 800eb76:	2151      	movs	r1, #81	; 0x51
 800eb78:	68f8      	ldr	r0, [r7, #12]
 800eb7a:	f001 fc5d 	bl	8010438 <VL53L0X_RdWord>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800eb84:	8b3b      	ldrh	r3, [r7, #24]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7ff fe06 	bl	800e798 <VL53L0X_decode_timeout>
 800eb8c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800eb8e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800eb90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d109      	bne.n	800ebac <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800eb98:	f107 031b 	add.w	r3, r7, #27
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	2101      	movs	r1, #1
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f7fd f903 	bl	800bdac <VL53L0X_GetVcselPulsePeriod>
 800eba6:	4603      	mov	r3, r0
 800eba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800ebac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d128      	bne.n	800ec06 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800ebb4:	7efb      	ldrb	r3, [r7, #27]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	6879      	ldr	r1, [r7, #4]
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f7ff fe02 	bl	800e7c4 <VL53L0X_calc_timeout_mclks>
 800ebc0:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800ebc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebc4:	6a3a      	ldr	r2, [r7, #32]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800ebca:	6a38      	ldr	r0, [r7, #32]
 800ebcc:	f7ff fdb8 	bl	800e740 <VL53L0X_encode_timeout>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800ebd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d108      	bne.n	800ebee <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800ebdc:	8bfb      	ldrh	r3, [r7, #30]
 800ebde:	461a      	mov	r2, r3
 800ebe0:	2171      	movs	r1, #113	; 0x71
 800ebe2:	68f8      	ldr	r0, [r7, #12]
 800ebe4:	f001 fba0 	bl	8010328 <VL53L0X_WrWord>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800ebee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d107      	bne.n	800ec06 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800ebfe:	e002      	b.n	800ec06 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec00:	23fc      	movs	r3, #252	; 0xfc
 800ec02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800ec06:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3728      	adds	r7, #40	; 0x28
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b08a      	sub	sp, #40	; 0x28
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	70fb      	strb	r3, [r7, #3]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ec22:	2300      	movs	r3, #0
 800ec24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800ec28:	230c      	movs	r3, #12
 800ec2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800ec2e:	2312      	movs	r3, #18
 800ec30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800ec34:	2308      	movs	r3, #8
 800ec36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800ec3a:	230e      	movs	r3, #14
 800ec3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800ec44:	78bb      	ldrb	r3, [r7, #2]
 800ec46:	f003 0301 	and.w	r3, r3, #1
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d003      	beq.n	800ec58 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec50:	23fc      	movs	r3, #252	; 0xfc
 800ec52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec56:	e020      	b.n	800ec9a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800ec58:	78fb      	ldrb	r3, [r7, #3]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d10d      	bne.n	800ec7a <VL53L0X_set_vcsel_pulse_period+0x68>
 800ec5e:	78ba      	ldrb	r2, [r7, #2]
 800ec60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d304      	bcc.n	800ec72 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800ec68:	78ba      	ldrb	r2, [r7, #2]
 800ec6a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d903      	bls.n	800ec7a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec72:	23fc      	movs	r3, #252	; 0xfc
 800ec74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ec78:	e00f      	b.n	800ec9a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800ec7a:	78fb      	ldrb	r3, [r7, #3]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d10c      	bne.n	800ec9a <VL53L0X_set_vcsel_pulse_period+0x88>
 800ec80:	78ba      	ldrb	r2, [r7, #2]
 800ec82:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ec86:	429a      	cmp	r2, r3
 800ec88:	d304      	bcc.n	800ec94 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800ec8a:	78ba      	ldrb	r2, [r7, #2]
 800ec8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d902      	bls.n	800ec9a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ec94:	23fc      	movs	r3, #252	; 0xfc
 800ec96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800ec9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800eca2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800eca6:	e239      	b.n	800f11c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800eca8:	78fb      	ldrb	r3, [r7, #3]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d150      	bne.n	800ed50 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800ecae:	78bb      	ldrb	r3, [r7, #2]
 800ecb0:	2b0c      	cmp	r3, #12
 800ecb2:	d110      	bne.n	800ecd6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800ecb4:	2218      	movs	r2, #24
 800ecb6:	2157      	movs	r1, #87	; 0x57
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f001 fb11 	bl	80102e0 <VL53L0X_WrByte>
 800ecbe:	4603      	mov	r3, r0
 800ecc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800ecc4:	2208      	movs	r2, #8
 800ecc6:	2156      	movs	r1, #86	; 0x56
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f001 fb09 	bl	80102e0 <VL53L0X_WrByte>
 800ecce:	4603      	mov	r3, r0
 800ecd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecd4:	e17f      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ecd6:	78bb      	ldrb	r3, [r7, #2]
 800ecd8:	2b0e      	cmp	r3, #14
 800ecda:	d110      	bne.n	800ecfe <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800ecdc:	2230      	movs	r2, #48	; 0x30
 800ecde:	2157      	movs	r1, #87	; 0x57
 800ece0:	6878      	ldr	r0, [r7, #4]
 800ece2:	f001 fafd 	bl	80102e0 <VL53L0X_WrByte>
 800ece6:	4603      	mov	r3, r0
 800ece8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800ecec:	2208      	movs	r2, #8
 800ecee:	2156      	movs	r1, #86	; 0x56
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f001 faf5 	bl	80102e0 <VL53L0X_WrByte>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ecfc:	e16b      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800ecfe:	78bb      	ldrb	r3, [r7, #2]
 800ed00:	2b10      	cmp	r3, #16
 800ed02:	d110      	bne.n	800ed26 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800ed04:	2240      	movs	r2, #64	; 0x40
 800ed06:	2157      	movs	r1, #87	; 0x57
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f001 fae9 	bl	80102e0 <VL53L0X_WrByte>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800ed14:	2208      	movs	r2, #8
 800ed16:	2156      	movs	r1, #86	; 0x56
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f001 fae1 	bl	80102e0 <VL53L0X_WrByte>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed24:	e157      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800ed26:	78bb      	ldrb	r3, [r7, #2]
 800ed28:	2b12      	cmp	r3, #18
 800ed2a:	f040 8154 	bne.w	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ed2e:	2250      	movs	r2, #80	; 0x50
 800ed30:	2157      	movs	r1, #87	; 0x57
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f001 fad4 	bl	80102e0 <VL53L0X_WrByte>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800ed3e:	2208      	movs	r2, #8
 800ed40:	2156      	movs	r1, #86	; 0x56
 800ed42:	6878      	ldr	r0, [r7, #4]
 800ed44:	f001 facc 	bl	80102e0 <VL53L0X_WrByte>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed4e:	e142      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800ed50:	78fb      	ldrb	r3, [r7, #3]
 800ed52:	2b01      	cmp	r3, #1
 800ed54:	f040 813f 	bne.w	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800ed58:	78bb      	ldrb	r3, [r7, #2]
 800ed5a:	2b08      	cmp	r3, #8
 800ed5c:	d14c      	bne.n	800edf8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800ed5e:	2210      	movs	r2, #16
 800ed60:	2148      	movs	r1, #72	; 0x48
 800ed62:	6878      	ldr	r0, [r7, #4]
 800ed64:	f001 fabc 	bl	80102e0 <VL53L0X_WrByte>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ed6e:	2208      	movs	r2, #8
 800ed70:	2147      	movs	r1, #71	; 0x47
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f001 fab4 	bl	80102e0 <VL53L0X_WrByte>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ed7e:	2202      	movs	r2, #2
 800ed80:	2132      	movs	r1, #50	; 0x32
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f001 faac 	bl	80102e0 <VL53L0X_WrByte>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed90:	4313      	orrs	r3, r2
 800ed92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ed96:	220c      	movs	r2, #12
 800ed98:	2130      	movs	r1, #48	; 0x30
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f001 faa0 	bl	80102e0 <VL53L0X_WrByte>
 800eda0:	4603      	mov	r3, r0
 800eda2:	461a      	mov	r2, r3
 800eda4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eda8:	4313      	orrs	r3, r2
 800edaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800edae:	2201      	movs	r2, #1
 800edb0:	21ff      	movs	r1, #255	; 0xff
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f001 fa94 	bl	80102e0 <VL53L0X_WrByte>
 800edb8:	4603      	mov	r3, r0
 800edba:	461a      	mov	r2, r3
 800edbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc0:	4313      	orrs	r3, r2
 800edc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800edc6:	2230      	movs	r2, #48	; 0x30
 800edc8:	2130      	movs	r1, #48	; 0x30
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f001 fa88 	bl	80102e0 <VL53L0X_WrByte>
 800edd0:	4603      	mov	r3, r0
 800edd2:	461a      	mov	r2, r3
 800edd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edd8:	4313      	orrs	r3, r2
 800edda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800edde:	2200      	movs	r2, #0
 800ede0:	21ff      	movs	r1, #255	; 0xff
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f001 fa7c 	bl	80102e0 <VL53L0X_WrByte>
 800ede8:	4603      	mov	r3, r0
 800edea:	461a      	mov	r2, r3
 800edec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edf0:	4313      	orrs	r3, r2
 800edf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edf6:	e0ee      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800edf8:	78bb      	ldrb	r3, [r7, #2]
 800edfa:	2b0a      	cmp	r3, #10
 800edfc:	d14c      	bne.n	800ee98 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800edfe:	2228      	movs	r2, #40	; 0x28
 800ee00:	2148      	movs	r1, #72	; 0x48
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f001 fa6c 	bl	80102e0 <VL53L0X_WrByte>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800ee0e:	2208      	movs	r2, #8
 800ee10:	2147      	movs	r1, #71	; 0x47
 800ee12:	6878      	ldr	r0, [r7, #4]
 800ee14:	f001 fa64 	bl	80102e0 <VL53L0X_WrByte>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ee1e:	2203      	movs	r2, #3
 800ee20:	2132      	movs	r1, #50	; 0x32
 800ee22:	6878      	ldr	r0, [r7, #4]
 800ee24:	f001 fa5c 	bl	80102e0 <VL53L0X_WrByte>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	461a      	mov	r2, r3
 800ee2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee30:	4313      	orrs	r3, r2
 800ee32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ee36:	2209      	movs	r2, #9
 800ee38:	2130      	movs	r1, #48	; 0x30
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f001 fa50 	bl	80102e0 <VL53L0X_WrByte>
 800ee40:	4603      	mov	r3, r0
 800ee42:	461a      	mov	r2, r3
 800ee44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ee4e:	2201      	movs	r2, #1
 800ee50:	21ff      	movs	r1, #255	; 0xff
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f001 fa44 	bl	80102e0 <VL53L0X_WrByte>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	461a      	mov	r2, r3
 800ee5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee60:	4313      	orrs	r3, r2
 800ee62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ee66:	2220      	movs	r2, #32
 800ee68:	2130      	movs	r1, #48	; 0x30
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f001 fa38 	bl	80102e0 <VL53L0X_WrByte>
 800ee70:	4603      	mov	r3, r0
 800ee72:	461a      	mov	r2, r3
 800ee74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee78:	4313      	orrs	r3, r2
 800ee7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ee7e:	2200      	movs	r2, #0
 800ee80:	21ff      	movs	r1, #255	; 0xff
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	f001 fa2c 	bl	80102e0 <VL53L0X_WrByte>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee90:	4313      	orrs	r3, r2
 800ee92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ee96:	e09e      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800ee98:	78bb      	ldrb	r3, [r7, #2]
 800ee9a:	2b0c      	cmp	r3, #12
 800ee9c:	d14c      	bne.n	800ef38 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800ee9e:	2238      	movs	r2, #56	; 0x38
 800eea0:	2148      	movs	r1, #72	; 0x48
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f001 fa1c 	bl	80102e0 <VL53L0X_WrByte>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800eeae:	2208      	movs	r2, #8
 800eeb0:	2147      	movs	r1, #71	; 0x47
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f001 fa14 	bl	80102e0 <VL53L0X_WrByte>
 800eeb8:	4603      	mov	r3, r0
 800eeba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800eebe:	2203      	movs	r2, #3
 800eec0:	2132      	movs	r1, #50	; 0x32
 800eec2:	6878      	ldr	r0, [r7, #4]
 800eec4:	f001 fa0c 	bl	80102e0 <VL53L0X_WrByte>
 800eec8:	4603      	mov	r3, r0
 800eeca:	461a      	mov	r2, r3
 800eecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eed0:	4313      	orrs	r3, r2
 800eed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800eed6:	2208      	movs	r2, #8
 800eed8:	2130      	movs	r1, #48	; 0x30
 800eeda:	6878      	ldr	r0, [r7, #4]
 800eedc:	f001 fa00 	bl	80102e0 <VL53L0X_WrByte>
 800eee0:	4603      	mov	r3, r0
 800eee2:	461a      	mov	r2, r3
 800eee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eee8:	4313      	orrs	r3, r2
 800eeea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eeee:	2201      	movs	r2, #1
 800eef0:	21ff      	movs	r1, #255	; 0xff
 800eef2:	6878      	ldr	r0, [r7, #4]
 800eef4:	f001 f9f4 	bl	80102e0 <VL53L0X_WrByte>
 800eef8:	4603      	mov	r3, r0
 800eefa:	461a      	mov	r2, r3
 800eefc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef00:	4313      	orrs	r3, r2
 800ef02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ef06:	2220      	movs	r2, #32
 800ef08:	2130      	movs	r1, #48	; 0x30
 800ef0a:	6878      	ldr	r0, [r7, #4]
 800ef0c:	f001 f9e8 	bl	80102e0 <VL53L0X_WrByte>
 800ef10:	4603      	mov	r3, r0
 800ef12:	461a      	mov	r2, r3
 800ef14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ef1e:	2200      	movs	r2, #0
 800ef20:	21ff      	movs	r1, #255	; 0xff
 800ef22:	6878      	ldr	r0, [r7, #4]
 800ef24:	f001 f9dc 	bl	80102e0 <VL53L0X_WrByte>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	461a      	mov	r2, r3
 800ef2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef30:	4313      	orrs	r3, r2
 800ef32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ef36:	e04e      	b.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ef38:	78bb      	ldrb	r3, [r7, #2]
 800ef3a:	2b0e      	cmp	r3, #14
 800ef3c:	d14b      	bne.n	800efd6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ef3e:	2248      	movs	r2, #72	; 0x48
 800ef40:	2148      	movs	r1, #72	; 0x48
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f001 f9cc 	bl	80102e0 <VL53L0X_WrByte>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ef4e:	2208      	movs	r2, #8
 800ef50:	2147      	movs	r1, #71	; 0x47
 800ef52:	6878      	ldr	r0, [r7, #4]
 800ef54:	f001 f9c4 	bl	80102e0 <VL53L0X_WrByte>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ef5e:	2203      	movs	r2, #3
 800ef60:	2132      	movs	r1, #50	; 0x32
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f001 f9bc 	bl	80102e0 <VL53L0X_WrByte>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef70:	4313      	orrs	r3, r2
 800ef72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ef76:	2207      	movs	r2, #7
 800ef78:	2130      	movs	r1, #48	; 0x30
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f001 f9b0 	bl	80102e0 <VL53L0X_WrByte>
 800ef80:	4603      	mov	r3, r0
 800ef82:	461a      	mov	r2, r3
 800ef84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ef88:	4313      	orrs	r3, r2
 800ef8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ef8e:	2201      	movs	r2, #1
 800ef90:	21ff      	movs	r1, #255	; 0xff
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f001 f9a4 	bl	80102e0 <VL53L0X_WrByte>
 800ef98:	4603      	mov	r3, r0
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efa0:	4313      	orrs	r3, r2
 800efa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800efa6:	2220      	movs	r2, #32
 800efa8:	2130      	movs	r1, #48	; 0x30
 800efaa:	6878      	ldr	r0, [r7, #4]
 800efac:	f001 f998 	bl	80102e0 <VL53L0X_WrByte>
 800efb0:	4603      	mov	r3, r0
 800efb2:	461a      	mov	r2, r3
 800efb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efb8:	4313      	orrs	r3, r2
 800efba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800efbe:	2200      	movs	r2, #0
 800efc0:	21ff      	movs	r1, #255	; 0xff
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f001 f98c 	bl	80102e0 <VL53L0X_WrByte>
 800efc8:	4603      	mov	r3, r0
 800efca:	461a      	mov	r2, r3
 800efcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800efd0:	4313      	orrs	r3, r2
 800efd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800efd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d17f      	bne.n	800f0de <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800efde:	78bb      	ldrb	r3, [r7, #2]
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7fe fe38 	bl	800dc56 <VL53L0X_encode_vcsel_period>
 800efe6:	4603      	mov	r3, r0
 800efe8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800efec:	78fb      	ldrb	r3, [r7, #3]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d002      	beq.n	800eff8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d045      	beq.n	800f082 <VL53L0X_set_vcsel_pulse_period+0x470>
 800eff6:	e06e      	b.n	800f0d6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800eff8:	f107 0314 	add.w	r3, r7, #20
 800effc:	461a      	mov	r2, r3
 800effe:	2103      	movs	r1, #3
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff fc33 	bl	800e86c <get_sequence_step_timeout>
 800f006:	4603      	mov	r3, r0
 800f008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800f00c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f010:	2b00      	cmp	r3, #0
 800f012:	d109      	bne.n	800f028 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800f014:	f107 0310 	add.w	r3, r7, #16
 800f018:	461a      	mov	r2, r3
 800f01a:	2102      	movs	r1, #2
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f7ff fc25 	bl	800e86c <get_sequence_step_timeout>
 800f022:	4603      	mov	r3, r0
 800f024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800f028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d109      	bne.n	800f044 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800f030:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f034:	461a      	mov	r2, r3
 800f036:	2150      	movs	r1, #80	; 0x50
 800f038:	6878      	ldr	r0, [r7, #4]
 800f03a:	f001 f951 	bl	80102e0 <VL53L0X_WrByte>
 800f03e:	4603      	mov	r3, r0
 800f040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800f044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d108      	bne.n	800f05e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	461a      	mov	r2, r3
 800f050:	2103      	movs	r1, #3
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff fceb 	bl	800ea2e <set_sequence_step_timeout>
 800f058:	4603      	mov	r3, r0
 800f05a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800f05e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f062:	2b00      	cmp	r3, #0
 800f064:	d108      	bne.n	800f078 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800f066:	693b      	ldr	r3, [r7, #16]
 800f068:	461a      	mov	r2, r3
 800f06a:	2102      	movs	r1, #2
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f7ff fcde 	bl	800ea2e <set_sequence_step_timeout>
 800f072:	4603      	mov	r3, r0
 800f074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	78ba      	ldrb	r2, [r7, #2]
 800f07c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800f080:	e02e      	b.n	800f0e0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800f082:	f107 0318 	add.w	r3, r7, #24
 800f086:	461a      	mov	r2, r3
 800f088:	2104      	movs	r1, #4
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff fbee 	bl	800e86c <get_sequence_step_timeout>
 800f090:	4603      	mov	r3, r0
 800f092:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800f096:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d109      	bne.n	800f0b2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800f09e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	2170      	movs	r1, #112	; 0x70
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f001 f91a 	bl	80102e0 <VL53L0X_WrByte>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800f0b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d108      	bne.n	800f0cc <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	461a      	mov	r2, r3
 800f0be:	2104      	movs	r1, #4
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f7ff fcb4 	bl	800ea2e <set_sequence_step_timeout>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	78ba      	ldrb	r2, [r7, #2]
 800f0d0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800f0d4:	e004      	b.n	800f0e0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f0d6:	23fc      	movs	r3, #252	; 0xfc
 800f0d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0dc:	e000      	b.n	800f0e0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800f0de:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800f0e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d109      	bne.n	800f0fc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800f0ee:	69f9      	ldr	r1, [r7, #28]
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7fc fe1d 	bl	800bd30 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800f0fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f100:	2b00      	cmp	r3, #0
 800f102:	d109      	bne.n	800f118 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800f104:	f107 010f 	add.w	r1, r7, #15
 800f108:	2301      	movs	r3, #1
 800f10a:	2200      	movs	r2, #0
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f7fe fcbd 	bl	800da8c <VL53L0X_perform_phase_calibration>
 800f112:	4603      	mov	r3, r0
 800f114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800f118:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	3728      	adds	r7, #40	; 0x28
 800f120:	46bd      	mov	sp, r7
 800f122:	bd80      	pop	{r7, pc}

0800f124 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b086      	sub	sp, #24
 800f128:	af00      	add	r7, sp, #0
 800f12a:	60f8      	str	r0, [r7, #12]
 800f12c:	460b      	mov	r3, r1
 800f12e:	607a      	str	r2, [r7, #4]
 800f130:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f132:	2300      	movs	r3, #0
 800f134:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800f136:	7afb      	ldrb	r3, [r7, #11]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d002      	beq.n	800f142 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d00a      	beq.n	800f156 <VL53L0X_get_vcsel_pulse_period+0x32>
 800f140:	e013      	b.n	800f16a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800f142:	f107 0316 	add.w	r3, r7, #22
 800f146:	461a      	mov	r2, r3
 800f148:	2150      	movs	r1, #80	; 0x50
 800f14a:	68f8      	ldr	r0, [r7, #12]
 800f14c:	f001 f94a 	bl	80103e4 <VL53L0X_RdByte>
 800f150:	4603      	mov	r3, r0
 800f152:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800f154:	e00b      	b.n	800f16e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800f156:	f107 0316 	add.w	r3, r7, #22
 800f15a:	461a      	mov	r2, r3
 800f15c:	2170      	movs	r1, #112	; 0x70
 800f15e:	68f8      	ldr	r0, [r7, #12]
 800f160:	f001 f940 	bl	80103e4 <VL53L0X_RdByte>
 800f164:	4603      	mov	r3, r0
 800f166:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800f168:	e001      	b.n	800f16e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f16a:	23fc      	movs	r3, #252	; 0xfc
 800f16c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800f16e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d107      	bne.n	800f186 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800f176:	7dbb      	ldrb	r3, [r7, #22]
 800f178:	4618      	mov	r0, r3
 800f17a:	f7fe fd59 	bl	800dc30 <VL53L0X_decode_vcsel_period>
 800f17e:	4603      	mov	r3, r0
 800f180:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	701a      	strb	r2, [r3, #0]

	return Status;
 800f186:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3718      	adds	r7, #24
 800f18e:	46bd      	mov	sp, r7
 800f190:	bd80      	pop	{r7, pc}

0800f192 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800f192:	b580      	push	{r7, lr}
 800f194:	b092      	sub	sp, #72	; 0x48
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
 800f19a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f19c:	2300      	movs	r3, #0
 800f19e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f1a2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f1a6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f1a8:	f240 7376 	movw	r3, #1910	; 0x776
 800f1ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800f1ae:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f1b2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f1b4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f1b8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800f1ba:	f240 234e 	movw	r3, #590	; 0x24e
 800f1be:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800f1c0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f1c6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f1ca:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f1cc:	f240 2326 	movw	r3, #550	; 0x226
 800f1d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800f1d6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800f1da:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800f1e0:	683a      	ldr	r2, [r7, #0]
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d205      	bcs.n	800f1f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f1e8:	23fc      	movs	r3, #252	; 0xfc
 800f1ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800f1ee:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f1f2:	e0aa      	b.n	800f34a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800f1f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800f1fa:	683a      	ldr	r2, [r7, #0]
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f200:	f107 0314 	add.w	r3, r7, #20
 800f204:	4619      	mov	r1, r3
 800f206:	6878      	ldr	r0, [r7, #4]
 800f208:	f7fc fedc 	bl	800bfc4 <VL53L0X_GetSequenceStepEnables>
 800f20c:	4603      	mov	r3, r0
 800f20e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800f212:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f216:	2b00      	cmp	r3, #0
 800f218:	d15b      	bne.n	800f2d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800f21a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d105      	bne.n	800f22c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800f220:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800f226:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d052      	beq.n	800f2d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800f22c:	f107 0310 	add.w	r3, r7, #16
 800f230:	461a      	mov	r2, r3
 800f232:	2102      	movs	r1, #2
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f7ff fb19 	bl	800e86c <get_sequence_step_timeout>
 800f23a:	4603      	mov	r3, r0
 800f23c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800f240:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f244:	2b00      	cmp	r3, #0
 800f246:	d002      	beq.n	800f24e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800f248:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f24c:	e07d      	b.n	800f34a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800f24e:	7d3b      	ldrb	r3, [r7, #20]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00f      	beq.n	800f274 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800f254:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800f256:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f258:	4413      	add	r3, r2
 800f25a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800f25c:	69fa      	ldr	r2, [r7, #28]
 800f25e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f260:	429a      	cmp	r2, r3
 800f262:	d204      	bcs.n	800f26e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800f264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	1ad3      	subs	r3, r2, r3
 800f26a:	643b      	str	r3, [r7, #64]	; 0x40
 800f26c:	e002      	b.n	800f274 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f26e:	23fc      	movs	r3, #252	; 0xfc
 800f270:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800f274:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d002      	beq.n	800f282 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800f27c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f280:	e063      	b.n	800f34a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800f282:	7dbb      	ldrb	r3, [r7, #22]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d011      	beq.n	800f2ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800f288:	693a      	ldr	r2, [r7, #16]
 800f28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f28c:	4413      	add	r3, r2
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f292:	69fa      	ldr	r2, [r7, #28]
 800f294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f296:	429a      	cmp	r2, r3
 800f298:	d204      	bcs.n	800f2a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f29a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	1ad3      	subs	r3, r2, r3
 800f2a0:	643b      	str	r3, [r7, #64]	; 0x40
 800f2a2:	e016      	b.n	800f2d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f2a4:	23fc      	movs	r3, #252	; 0xfc
 800f2a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800f2aa:	e012      	b.n	800f2d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800f2ac:	7d7b      	ldrb	r3, [r7, #21]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d00f      	beq.n	800f2d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800f2b2:	693b      	ldr	r3, [r7, #16]
 800f2b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f2b6:	4413      	add	r3, r2
 800f2b8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f2ba:	69fa      	ldr	r2, [r7, #28]
 800f2bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	d204      	bcs.n	800f2cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800f2c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	1ad3      	subs	r3, r2, r3
 800f2c8:	643b      	str	r3, [r7, #64]	; 0x40
 800f2ca:	e002      	b.n	800f2d2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f2cc:	23fc      	movs	r3, #252	; 0xfc
 800f2ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f2d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d002      	beq.n	800f2e0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800f2da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f2de:	e034      	b.n	800f34a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800f2e0:	7dfb      	ldrb	r3, [r7, #23]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d019      	beq.n	800f31a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800f2e6:	f107 030c 	add.w	r3, r7, #12
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	2103      	movs	r1, #3
 800f2ee:	6878      	ldr	r0, [r7, #4]
 800f2f0:	f7ff fabc 	bl	800e86c <get_sequence_step_timeout>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2fe:	4413      	add	r3, r2
 800f300:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800f302:	69fa      	ldr	r2, [r7, #28]
 800f304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f306:	429a      	cmp	r2, r3
 800f308:	d204      	bcs.n	800f314 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800f30a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f30c:	69fb      	ldr	r3, [r7, #28]
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	643b      	str	r3, [r7, #64]	; 0x40
 800f312:	e002      	b.n	800f31a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f314:	23fc      	movs	r3, #252	; 0xfc
 800f316:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800f31a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d111      	bne.n	800f346 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800f322:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800f324:	2b00      	cmp	r3, #0
 800f326:	d00e      	beq.n	800f346 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800f328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f32a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f32c:	1ad3      	subs	r3, r2, r3
 800f32e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800f330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f332:	2104      	movs	r1, #4
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff fb7a 	bl	800ea2e <set_sequence_step_timeout>
 800f33a:	4603      	mov	r3, r0
 800f33c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	683a      	ldr	r2, [r7, #0]
 800f344:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800f346:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800f34a:	4618      	mov	r0, r3
 800f34c:	3748      	adds	r7, #72	; 0x48
 800f34e:	46bd      	mov	sp, r7
 800f350:	bd80      	pop	{r7, pc}

0800f352 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800f352:	b580      	push	{r7, lr}
 800f354:	b090      	sub	sp, #64	; 0x40
 800f356:	af00      	add	r7, sp, #0
 800f358:	6078      	str	r0, [r7, #4]
 800f35a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f35c:	2300      	movs	r3, #0
 800f35e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f362:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f366:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f368:	f240 7376 	movw	r3, #1910	; 0x776
 800f36c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800f36e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f372:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f374:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f378:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800f37a:	f240 234e 	movw	r3, #590	; 0x24e
 800f37e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800f380:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f384:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f386:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f38a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f38c:	f240 2326 	movw	r3, #550	; 0x226
 800f390:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f392:	2300      	movs	r3, #0
 800f394:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800f396:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f39a:	441a      	add	r2, r3
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f3a0:	f107 0318 	add.w	r3, r7, #24
 800f3a4:	4619      	mov	r1, r3
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	f7fc fe0c 	bl	800bfc4 <VL53L0X_GetSequenceStepEnables>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800f3b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d002      	beq.n	800f3c0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800f3ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f3be:	e075      	b.n	800f4ac <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800f3c0:	7e3b      	ldrb	r3, [r7, #24]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d105      	bne.n	800f3d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800f3c6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d102      	bne.n	800f3d2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800f3cc:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d030      	beq.n	800f434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800f3d2:	f107 0310 	add.w	r3, r7, #16
 800f3d6:	461a      	mov	r2, r3
 800f3d8:	2102      	movs	r1, #2
 800f3da:	6878      	ldr	r0, [r7, #4]
 800f3dc:	f7ff fa46 	bl	800e86c <get_sequence_step_timeout>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800f3e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d122      	bne.n	800f434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800f3ee:	7e3b      	ldrb	r3, [r7, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d007      	beq.n	800f404 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f3f8:	6939      	ldr	r1, [r7, #16]
 800f3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3fc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f3fe:	441a      	add	r2, r3
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800f404:	7ebb      	ldrb	r3, [r7, #26]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d009      	beq.n	800f41e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f40a:	683b      	ldr	r3, [r7, #0]
 800f40c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800f40e:	6939      	ldr	r1, [r7, #16]
 800f410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f412:	440b      	add	r3, r1
 800f414:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f416:	441a      	add	r2, r3
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	601a      	str	r2, [r3, #0]
 800f41c:	e00a      	b.n	800f434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800f41e:	7e7b      	ldrb	r3, [r7, #25]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d007      	beq.n	800f434 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f428:	6939      	ldr	r1, [r7, #16]
 800f42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f42e:	441a      	add	r2, r3
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f434:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d114      	bne.n	800f466 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800f43c:	7efb      	ldrb	r3, [r7, #27]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d011      	beq.n	800f466 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800f442:	f107 030c 	add.w	r3, r7, #12
 800f446:	461a      	mov	r2, r3
 800f448:	2103      	movs	r1, #3
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff fa0e 	bl	800e86c <get_sequence_step_timeout>
 800f450:	4603      	mov	r3, r0
 800f452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f45a:	68f9      	ldr	r1, [r7, #12]
 800f45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f45e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f460:	441a      	add	r2, r3
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f466:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d114      	bne.n	800f498 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f46e:	7f3b      	ldrb	r3, [r7, #28]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d011      	beq.n	800f498 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800f474:	f107 0314 	add.w	r3, r7, #20
 800f478:	461a      	mov	r2, r3
 800f47a:	2104      	movs	r1, #4
 800f47c:	6878      	ldr	r0, [r7, #4]
 800f47e:	f7ff f9f5 	bl	800e86c <get_sequence_step_timeout>
 800f482:	4603      	mov	r3, r0
 800f484:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f48c:	6979      	ldr	r1, [r7, #20]
 800f48e:	6a3b      	ldr	r3, [r7, #32]
 800f490:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f492:	441a      	add	r2, r3
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f498:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d103      	bne.n	800f4a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f4a0:	683b      	ldr	r3, [r7, #0]
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f4a8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3740      	adds	r7, #64	; 0x40
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b088      	sub	sp, #32
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f4c6:	e0c6      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f4c8:	697b      	ldr	r3, [r7, #20]
 800f4ca:	683a      	ldr	r2, [r7, #0]
 800f4cc:	4413      	add	r3, r2
 800f4ce:	781b      	ldrb	r3, [r3, #0]
 800f4d0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f4d2:	697b      	ldr	r3, [r7, #20]
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f4d8:	7cfb      	ldrb	r3, [r7, #19]
 800f4da:	2bff      	cmp	r3, #255	; 0xff
 800f4dc:	f040 808d 	bne.w	800f5fa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f4e0:	697b      	ldr	r3, [r7, #20]
 800f4e2:	683a      	ldr	r2, [r7, #0]
 800f4e4:	4413      	add	r3, r2
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	747b      	strb	r3, [r7, #17]
			Index++;
 800f4ea:	697b      	ldr	r3, [r7, #20]
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f4f0:	7c7b      	ldrb	r3, [r7, #17]
 800f4f2:	2b03      	cmp	r3, #3
 800f4f4:	d87e      	bhi.n	800f5f4 <VL53L0X_load_tuning_settings+0x140>
 800f4f6:	a201      	add	r2, pc, #4	; (adr r2, 800f4fc <VL53L0X_load_tuning_settings+0x48>)
 800f4f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4fc:	0800f50d 	.word	0x0800f50d
 800f500:	0800f547 	.word	0x0800f547
 800f504:	0800f581 	.word	0x0800f581
 800f508:	0800f5bb 	.word	0x0800f5bb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	4413      	add	r3, r2
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	743b      	strb	r3, [r7, #16]
				Index++;
 800f516:	697b      	ldr	r3, [r7, #20]
 800f518:	3301      	adds	r3, #1
 800f51a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	683a      	ldr	r2, [r7, #0]
 800f520:	4413      	add	r3, r2
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	3301      	adds	r3, #1
 800f52a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f52c:	7c3b      	ldrb	r3, [r7, #16]
 800f52e:	b29b      	uxth	r3, r3
 800f530:	021b      	lsls	r3, r3, #8
 800f532:	b29a      	uxth	r2, r3
 800f534:	7bfb      	ldrb	r3, [r7, #15]
 800f536:	b29b      	uxth	r3, r3
 800f538:	4413      	add	r3, r2
 800f53a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	89ba      	ldrh	r2, [r7, #12]
 800f540:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800f544:	e087      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f546:	697b      	ldr	r3, [r7, #20]
 800f548:	683a      	ldr	r2, [r7, #0]
 800f54a:	4413      	add	r3, r2
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	743b      	strb	r3, [r7, #16]
				Index++;
 800f550:	697b      	ldr	r3, [r7, #20]
 800f552:	3301      	adds	r3, #1
 800f554:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	4413      	add	r3, r2
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	3301      	adds	r3, #1
 800f564:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f566:	7c3b      	ldrb	r3, [r7, #16]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	021b      	lsls	r3, r3, #8
 800f56c:	b29a      	uxth	r2, r3
 800f56e:	7bfb      	ldrb	r3, [r7, #15]
 800f570:	b29b      	uxth	r3, r3
 800f572:	4413      	add	r3, r2
 800f574:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	89ba      	ldrh	r2, [r7, #12]
 800f57a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800f57e:	e06a      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f580:	697b      	ldr	r3, [r7, #20]
 800f582:	683a      	ldr	r2, [r7, #0]
 800f584:	4413      	add	r3, r2
 800f586:	781b      	ldrb	r3, [r3, #0]
 800f588:	743b      	strb	r3, [r7, #16]
				Index++;
 800f58a:	697b      	ldr	r3, [r7, #20]
 800f58c:	3301      	adds	r3, #1
 800f58e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f590:	697b      	ldr	r3, [r7, #20]
 800f592:	683a      	ldr	r2, [r7, #0]
 800f594:	4413      	add	r3, r2
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	3301      	adds	r3, #1
 800f59e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f5a0:	7c3b      	ldrb	r3, [r7, #16]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	021b      	lsls	r3, r3, #8
 800f5a6:	b29a      	uxth	r2, r3
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	4413      	add	r3, r2
 800f5ae:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	89ba      	ldrh	r2, [r7, #12]
 800f5b4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800f5b8:	e04d      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f5ba:	697b      	ldr	r3, [r7, #20]
 800f5bc:	683a      	ldr	r2, [r7, #0]
 800f5be:	4413      	add	r3, r2
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	743b      	strb	r3, [r7, #16]
				Index++;
 800f5c4:	697b      	ldr	r3, [r7, #20]
 800f5c6:	3301      	adds	r3, #1
 800f5c8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	683a      	ldr	r2, [r7, #0]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	781b      	ldrb	r3, [r3, #0]
 800f5d2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f5d4:	697b      	ldr	r3, [r7, #20]
 800f5d6:	3301      	adds	r3, #1
 800f5d8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f5da:	7c3b      	ldrb	r3, [r7, #16]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	021b      	lsls	r3, r3, #8
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	7bfb      	ldrb	r3, [r7, #15]
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	4413      	add	r3, r2
 800f5e8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	89ba      	ldrh	r2, [r7, #12]
 800f5ee:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800f5f2:	e030      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f5f4:	23fc      	movs	r3, #252	; 0xfc
 800f5f6:	77fb      	strb	r3, [r7, #31]
 800f5f8:	e02d      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f5fa:	7cfb      	ldrb	r3, [r7, #19]
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	d828      	bhi.n	800f652 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f600:	697b      	ldr	r3, [r7, #20]
 800f602:	683a      	ldr	r2, [r7, #0]
 800f604:	4413      	add	r3, r2
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f60a:	697b      	ldr	r3, [r7, #20]
 800f60c:	3301      	adds	r3, #1
 800f60e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f610:	2300      	movs	r3, #0
 800f612:	61bb      	str	r3, [r7, #24]
 800f614:	e00f      	b.n	800f636 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	4413      	add	r3, r2
 800f61c:	7819      	ldrb	r1, [r3, #0]
 800f61e:	f107 0208 	add.w	r2, r7, #8
 800f622:	69bb      	ldr	r3, [r7, #24]
 800f624:	4413      	add	r3, r2
 800f626:	460a      	mov	r2, r1
 800f628:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f62a:	697b      	ldr	r3, [r7, #20]
 800f62c:	3301      	adds	r3, #1
 800f62e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f630:	69bb      	ldr	r3, [r7, #24]
 800f632:	3301      	adds	r3, #1
 800f634:	61bb      	str	r3, [r7, #24]
 800f636:	7cfb      	ldrb	r3, [r7, #19]
 800f638:	69ba      	ldr	r2, [r7, #24]
 800f63a:	429a      	cmp	r2, r3
 800f63c:	dbeb      	blt.n	800f616 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f63e:	7cfb      	ldrb	r3, [r7, #19]
 800f640:	f107 0208 	add.w	r2, r7, #8
 800f644:	7cb9      	ldrb	r1, [r7, #18]
 800f646:	6878      	ldr	r0, [r7, #4]
 800f648:	f000 fdee 	bl	8010228 <VL53L0X_WriteMulti>
 800f64c:	4603      	mov	r3, r0
 800f64e:	77fb      	strb	r3, [r7, #31]
 800f650:	e001      	b.n	800f656 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f652:	23fc      	movs	r3, #252	; 0xfc
 800f654:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	683a      	ldr	r2, [r7, #0]
 800f65a:	4413      	add	r3, r2
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <VL53L0X_load_tuning_settings+0x1b8>
 800f662:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f666:	2b00      	cmp	r3, #0
 800f668:	f43f af2e 	beq.w	800f4c8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f66c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b088      	sub	sp, #32
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	60f8      	str	r0, [r7, #12]
 800f680:	60b9      	str	r1, [r7, #8]
 800f682:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f684:	2300      	movs	r3, #0
 800f686:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2200      	movs	r2, #0
 800f68c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f68e:	f107 0313 	add.w	r3, r7, #19
 800f692:	4619      	mov	r1, r3
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f7fc fd21 	bl	800c0dc <VL53L0X_GetXTalkCompensationEnable>
 800f69a:	4603      	mov	r3, r0
 800f69c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f69e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d111      	bne.n	800f6ca <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f6a6:	7cfb      	ldrb	r3, [r7, #19]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d00e      	beq.n	800f6ca <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f6b2:	68bb      	ldr	r3, [r7, #8]
 800f6b4:	8a9b      	ldrh	r3, [r3, #20]
 800f6b6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f6b8:	69bb      	ldr	r3, [r7, #24]
 800f6ba:	fb02 f303 	mul.w	r3, r2, r3
 800f6be:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	3380      	adds	r3, #128	; 0x80
 800f6c4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f6ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3720      	adds	r7, #32
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b086      	sub	sp, #24
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	60f8      	str	r0, [r7, #12]
 800f6de:	60b9      	str	r1, [r7, #8]
 800f6e0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f6ee:	f107 0310 	add.w	r3, r7, #16
 800f6f2:	461a      	mov	r2, r3
 800f6f4:	68b9      	ldr	r1, [r7, #8]
 800f6f6:	68f8      	ldr	r0, [r7, #12]
 800f6f8:	f7ff ffbe 	bl	800f678 <VL53L0X_get_total_xtalk_rate>
 800f6fc:	4603      	mov	r3, r0
 800f6fe:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f700:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d105      	bne.n	800f714 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	693b      	ldr	r3, [r7, #16]
 800f70e:	441a      	add	r2, r3
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	601a      	str	r2, [r3, #0]

	return Status;
 800f714:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f718:	4618      	mov	r0, r3
 800f71a:	3718      	adds	r7, #24
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}

0800f720 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b09a      	sub	sp, #104	; 0x68
 800f724:	af00      	add	r7, sp, #0
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
 800f72c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800f72e:	2312      	movs	r3, #18
 800f730:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800f732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f736:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800f738:	2342      	movs	r3, #66	; 0x42
 800f73a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f73c:	2306      	movs	r3, #6
 800f73e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800f740:	2307      	movs	r3, #7
 800f742:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f744:	2300      	movs	r3, #0
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800f750:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f758:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f75a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f75c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f75e:	fb02 f303 	mul.w	r3, r2, r3
 800f762:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f766:	3380      	adds	r3, #128	; 0x80
 800f768:	0a1b      	lsrs	r3, r3, #8
 800f76a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800f76c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f76e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f770:	fb02 f303 	mul.w	r3, r2, r3
 800f774:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800f776:	2300      	movs	r3, #0
 800f778:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d01a      	beq.n	800f7b6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f780:	68bb      	ldr	r3, [r7, #8]
 800f782:	029b      	lsls	r3, r3, #10
 800f784:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800f78a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f78c:	4413      	add	r3, r2
 800f78e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f790:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	fbb2 f3f3 	udiv	r3, r2, r3
 800f798:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800f79a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f79c:	4613      	mov	r3, r2
 800f79e:	005b      	lsls	r3, r3, #1
 800f7a0:	4413      	add	r3, r2
 800f7a2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f7a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7a6:	fb03 f303 	mul.w	r3, r3, r3
 800f7aa:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f7ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7ae:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f7b2:	0c1b      	lsrs	r3, r3, #16
 800f7b4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f7ba:	fb02 f303 	mul.w	r3, r2, r3
 800f7be:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7c2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f7c6:	0c1b      	lsrs	r3, r3, #16
 800f7c8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7cc:	fb03 f303 	mul.w	r3, r3, r3
 800f7d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f7d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f7d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f7d8:	0c1b      	lsrs	r3, r3, #16
 800f7da:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800f7dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7de:	085a      	lsrs	r2, r3, #1
 800f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e2:	441a      	add	r2, r3
 800f7e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f7e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f7ea:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f7f0:	fb02 f303 	mul.w	r3, r2, r3
 800f7f4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800f7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f7fc:	d302      	bcc.n	800f804 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800f7fe:	4b54      	ldr	r3, [pc, #336]	; (800f950 <VL53L0X_calc_dmax+0x230>)
 800f800:	663b      	str	r3, [r7, #96]	; 0x60
 800f802:	e015      	b.n	800f830 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800f804:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f806:	085a      	lsrs	r2, r3, #1
 800f808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f80a:	441a      	add	r2, r3
 800f80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f812:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f814:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f818:	fb02 f303 	mul.w	r3, r2, r3
 800f81c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f81e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f820:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f824:	0c1b      	lsrs	r3, r3, #16
 800f826:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f828:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f82a:	fb03 f303 	mul.w	r3, r3, r3
 800f82e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f832:	039b      	lsls	r3, r3, #14
 800f834:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f838:	4a46      	ldr	r2, [pc, #280]	; (800f954 <VL53L0X_calc_dmax+0x234>)
 800f83a:	fba2 2303 	umull	r2, r3, r2, r3
 800f83e:	099b      	lsrs	r3, r3, #6
 800f840:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800f842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f844:	fb03 f303 	mul.w	r3, r3, r3
 800f848:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f84a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f84c:	fb03 f303 	mul.w	r3, r3, r3
 800f850:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	3308      	adds	r3, #8
 800f856:	091b      	lsrs	r3, r3, #4
 800f858:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800f85a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f864:	4613      	mov	r3, r2
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	4413      	add	r3, r2
 800f86a:	011b      	lsls	r3, r3, #4
 800f86c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f874:	0b9b      	lsrs	r3, r3, #14
 800f876:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f87a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f87c:	4413      	add	r3, r2
 800f87e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f882:	085b      	lsrs	r3, r3, #1
 800f884:	69ba      	ldr	r2, [r7, #24]
 800f886:	4413      	add	r3, r2
 800f888:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f88a:	69ba      	ldr	r2, [r7, #24]
 800f88c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f88e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f892:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f894:	69bb      	ldr	r3, [r7, #24]
 800f896:	039b      	lsls	r3, r3, #14
 800f898:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	085b      	lsrs	r3, r3, #1
 800f89e:	69ba      	ldr	r2, [r7, #24]
 800f8a0:	4413      	add	r3, r2
 800f8a2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f8a4:	69ba      	ldr	r2, [r7, #24]
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8ac:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f8b2:	fb02 f303 	mul.w	r3, r2, r3
 800f8b6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f8b8:	69bb      	ldr	r3, [r7, #24]
 800f8ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f8be:	4a25      	ldr	r2, [pc, #148]	; (800f954 <VL53L0X_calc_dmax+0x234>)
 800f8c0:	fba2 2303 	umull	r2, r3, r2, r3
 800f8c4:	099b      	lsrs	r3, r3, #6
 800f8c6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	011b      	lsls	r3, r3, #4
 800f8cc:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f8ce:	69bb      	ldr	r3, [r7, #24]
 800f8d0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f8d4:	4a1f      	ldr	r2, [pc, #124]	; (800f954 <VL53L0X_calc_dmax+0x234>)
 800f8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800f8da:	099b      	lsrs	r3, r3, #6
 800f8dc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f8de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8e0:	3380      	adds	r3, #128	; 0x80
 800f8e2:	0a1b      	lsrs	r3, r3, #8
 800f8e4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d008      	beq.n	800f8fe <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	085a      	lsrs	r2, r3, #1
 800f8f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8f2:	441a      	add	r2, r3
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8fa:	65bb      	str	r3, [r7, #88]	; 0x58
 800f8fc:	e001      	b.n	800f902 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f8fe:	2300      	movs	r3, #0
 800f900:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f902:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f904:	f7fe f9ba 	bl	800dc7c <VL53L0X_isqrt>
 800f908:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f90a:	69bb      	ldr	r3, [r7, #24]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d008      	beq.n	800f922 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	085a      	lsrs	r2, r3, #1
 800f914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f916:	441a      	add	r2, r3
 800f918:	69bb      	ldr	r3, [r7, #24]
 800f91a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f91e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f920:	e001      	b.n	800f926 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f926:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f928:	f7fe f9a8 	bl	800dc7c <VL53L0X_isqrt>
 800f92c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f92e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f930:	693a      	ldr	r2, [r7, #16]
 800f932:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f934:	693a      	ldr	r2, [r7, #16]
 800f936:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f938:	429a      	cmp	r2, r3
 800f93a:	d902      	bls.n	800f942 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f93c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f93e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f940:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f942:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f946:	4618      	mov	r0, r3
 800f948:	3768      	adds	r7, #104	; 0x68
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	fff00000 	.word	0xfff00000
 800f954:	10624dd3 	.word	0x10624dd3

0800f958 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f958:	b580      	push	{r7, lr}
 800f95a:	b0b4      	sub	sp, #208	; 0xd0
 800f95c:	af04      	add	r7, sp, #16
 800f95e:	60f8      	str	r0, [r7, #12]
 800f960:	60b9      	str	r1, [r7, #8]
 800f962:	607a      	str	r2, [r7, #4]
 800f964:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f966:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f96a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f96e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f976:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f97a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f97e:	f241 235c 	movw	r3, #4700	; 0x125c
 800f982:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f986:	4b9e      	ldr	r3, [pc, #632]	; (800fc00 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f98c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f990:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f992:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f996:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f99a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f99e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f9a0:	4b98      	ldr	r3, [pc, #608]	; (800fc04 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f9a2:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f9a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f9a8:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f9aa:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f9ae:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f9b0:	f240 6377 	movw	r3, #1655	; 0x677
 800f9b4:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	6a1b      	ldr	r3, [r3, #32]
 800f9c0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	691b      	ldr	r3, [r3, #16]
 800f9c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f9ca:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f9ce:	0c1b      	lsrs	r3, r3, #16
 800f9d0:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	68db      	ldr	r3, [r3, #12]
 800f9d6:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f9d8:	f107 0310 	add.w	r3, r7, #16
 800f9dc:	461a      	mov	r2, r3
 800f9de:	68b9      	ldr	r1, [r7, #8]
 800f9e0:	68f8      	ldr	r0, [r7, #12]
 800f9e2:	f7ff fe78 	bl	800f6d6 <VL53L0X_get_total_signal_rate>
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f9ec:	f107 0314 	add.w	r3, r7, #20
 800f9f0:	461a      	mov	r2, r3
 800f9f2:	68b9      	ldr	r1, [r7, #8]
 800f9f4:	68f8      	ldr	r0, [r7, #12]
 800f9f6:	f7ff fe3f 	bl	800f678 <VL53L0X_get_total_xtalk_rate>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800fa00:	693b      	ldr	r3, [r7, #16]
 800fa02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa06:	fb02 f303 	mul.w	r3, r2, r3
 800fa0a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800fa0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa0e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fa12:	0c1b      	lsrs	r3, r3, #16
 800fa14:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa1c:	fb02 f303 	mul.w	r3, r2, r3
 800fa20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800fa24:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fa28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d902      	bls.n	800fa34 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800fa2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800fa34:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d168      	bne.n	800fb0e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800fa42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800fa4c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800fa50:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800fa54:	461a      	mov	r2, r3
 800fa56:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800fa5a:	68f8      	ldr	r0, [r7, #12]
 800fa5c:	f7fe feb2 	bl	800e7c4 <VL53L0X_calc_timeout_mclks>
 800fa60:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800fa68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800fa72:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800fa76:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800fa7a:	461a      	mov	r2, r3
 800fa7c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800fa80:	68f8      	ldr	r0, [r7, #12]
 800fa82:	f7fe fe9f 	bl	800e7c4 <VL53L0X_calc_timeout_mclks>
 800fa86:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800fa88:	2303      	movs	r3, #3
 800fa8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800fa8e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800fa92:	2b08      	cmp	r3, #8
 800fa94:	d102      	bne.n	800fa9c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800fa96:	2302      	movs	r3, #2
 800fa98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800fa9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fa9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800faa0:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800faa2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800faa6:	fb02 f303 	mul.w	r3, r2, r3
 800faaa:	02db      	lsls	r3, r3, #11
 800faac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800fab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fab4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fab8:	4a53      	ldr	r2, [pc, #332]	; (800fc08 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800faba:	fba2 2303 	umull	r2, r3, r2, r3
 800fabe:	099b      	lsrs	r3, r3, #6
 800fac0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800fac4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fac8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800faca:	fb02 f303 	mul.w	r3, r2, r3
 800face:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800fad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fad6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fada:	4a4b      	ldr	r2, [pc, #300]	; (800fc08 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800fadc:	fba2 2303 	umull	r2, r3, r2, r3
 800fae0:	099b      	lsrs	r3, r3, #6
 800fae2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800fae6:	693b      	ldr	r3, [r7, #16]
 800fae8:	3380      	adds	r3, #128	; 0x80
 800faea:	0a1b      	lsrs	r3, r3, #8
 800faec:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800faee:	693a      	ldr	r2, [r7, #16]
 800faf0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800faf4:	fb02 f303 	mul.w	r3, r2, r3
 800faf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800fafc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fb00:	3380      	adds	r3, #128	; 0x80
 800fb02:	0a1b      	lsrs	r3, r3, #8
 800fb04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	021b      	lsls	r3, r3, #8
 800fb0c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800fb0e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800fb16:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800fb1a:	e15e      	b.n	800fdda <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800fb1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d10c      	bne.n	800fb3c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb28:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fb30:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	2200      	movs	r2, #0
 800fb38:	601a      	str	r2, [r3, #0]
 800fb3a:	e14c      	b.n	800fdd6 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800fb3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d102      	bne.n	800fb4a <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800fb44:	2301      	movs	r3, #1
 800fb46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800fb4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fb4e:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800fb50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fb52:	041a      	lsls	r2, r3, #16
 800fb54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fb56:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800fb5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fb62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb64:	429a      	cmp	r2, r3
 800fb66:	d902      	bls.n	800fb6e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800fb68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800fb6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fb72:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fb76:	fb02 f303 	mul.w	r3, r2, r3
 800fb7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800fb7e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fb82:	4613      	mov	r3, r2
 800fb84:	005b      	lsls	r3, r3, #1
 800fb86:	4413      	add	r3, r2
 800fb88:	009b      	lsls	r3, r3, #2
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe f876 	bl	800dc7c <VL53L0X_isqrt>
 800fb90:	4603      	mov	r3, r0
 800fb92:	005b      	lsls	r3, r3, #1
 800fb94:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	891b      	ldrh	r3, [r3, #8]
 800fb9a:	461a      	mov	r2, r3
 800fb9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fb9e:	fb02 f303 	mul.w	r3, r2, r3
 800fba2:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fba6:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800fba8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fbac:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fbae:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800fbb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800fbb4:	4a14      	ldr	r2, [pc, #80]	; (800fc08 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800fbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800fbba:	099b      	lsrs	r3, r3, #6
 800fbbc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800fbbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fbc0:	041b      	lsls	r3, r3, #16
 800fbc2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fbc6:	4a10      	ldr	r2, [pc, #64]	; (800fc08 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800fbc8:	fba2 2303 	umull	r2, r3, r2, r3
 800fbcc:	099b      	lsrs	r3, r3, #6
 800fbce:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800fbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbd2:	021b      	lsls	r3, r3, #8
 800fbd4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800fbd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbda:	fbb2 f3f3 	udiv	r3, r2, r3
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	bfb8      	it	lt
 800fbe2:	425b      	neglt	r3, r3
 800fbe4:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800fbe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe8:	021b      	lsls	r3, r3, #8
 800fbea:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	7e1b      	ldrb	r3, [r3, #24]
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d00b      	beq.n	800fc0c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800fbf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800fbf8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fbfc:	e033      	b.n	800fc66 <VL53L0X_calc_sigma_estimate+0x30e>
 800fbfe:	bf00      	nop
 800fc00:	028f87ae 	.word	0x028f87ae
 800fc04:	0006999a 	.word	0x0006999a
 800fc08:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800fc0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fc0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc12:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800fc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800fc20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc24:	fb02 f303 	mul.w	r3, r2, r3
 800fc28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800fc2c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800fc30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc32:	4413      	add	r3, r2
 800fc34:	0c1b      	lsrs	r3, r3, #16
 800fc36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800fc3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc3e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800fc42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800fc46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc4a:	085b      	lsrs	r3, r3, #1
 800fc4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800fc50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc54:	fb03 f303 	mul.w	r3, r3, r3
 800fc58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800fc5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc60:	0b9b      	lsrs	r3, r3, #14
 800fc62:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800fc66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fc6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc6c:	fb02 f303 	mul.w	r3, r2, r3
 800fc70:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800fc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc74:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fc78:	0c1b      	lsrs	r3, r3, #16
 800fc7a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	fb03 f303 	mul.w	r3, r3, r3
 800fc82:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800fc84:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fc88:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800fc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800fc90:	0c1b      	lsrs	r3, r3, #16
 800fc92:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800fc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc96:	fb03 f303 	mul.w	r3, r3, r3
 800fc9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800fc9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca0:	4413      	add	r3, r2
 800fca2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800fca4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fca6:	f7fd ffe9 	bl	800dc7c <VL53L0X_isqrt>
 800fcaa:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800fcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcae:	041b      	lsls	r3, r3, #16
 800fcb0:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800fcb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcb4:	3332      	adds	r3, #50	; 0x32
 800fcb6:	4a4b      	ldr	r2, [pc, #300]	; (800fde4 <VL53L0X_calc_sigma_estimate+0x48c>)
 800fcb8:	fba2 2303 	umull	r2, r3, r2, r3
 800fcbc:	095a      	lsrs	r2, r3, #5
 800fcbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800fcc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fccc:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800fcd0:	fb02 f303 	mul.w	r3, r2, r3
 800fcd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800fcd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcdc:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800fce0:	3308      	adds	r3, #8
 800fce2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800fce6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fcea:	4a3f      	ldr	r2, [pc, #252]	; (800fde8 <VL53L0X_calc_sigma_estimate+0x490>)
 800fcec:	fba2 2303 	umull	r2, r3, r2, r3
 800fcf0:	0b5b      	lsrs	r3, r3, #13
 800fcf2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800fcf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fcfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d902      	bls.n	800fd06 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800fd00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fd02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800fd06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800fd0a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fd0e:	4413      	add	r3, r2
 800fd10:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800fd14:	4a35      	ldr	r2, [pc, #212]	; (800fdec <VL53L0X_calc_sigma_estimate+0x494>)
 800fd16:	fba2 2303 	umull	r2, r3, r2, r3
 800fd1a:	099b      	lsrs	r3, r3, #6
 800fd1c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800fd22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fd26:	441a      	add	r2, r3
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fd ffa4 	bl	800dc7c <VL53L0X_isqrt>
 800fd34:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800fd36:	69fb      	ldr	r3, [r7, #28]
 800fd38:	021b      	lsls	r3, r3, #8
 800fd3a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800fd3c:	69fb      	ldr	r3, [r7, #28]
 800fd3e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800fd42:	4a2a      	ldr	r2, [pc, #168]	; (800fdec <VL53L0X_calc_sigma_estimate+0x494>)
 800fd44:	fba2 2303 	umull	r2, r3, r2, r3
 800fd48:	099b      	lsrs	r3, r3, #6
 800fd4a:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800fd4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fd50:	fb03 f303 	mul.w	r3, r3, r3
 800fd54:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800fd56:	69fb      	ldr	r3, [r7, #28]
 800fd58:	fb03 f303 	mul.w	r3, r3, r3
 800fd5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800fd5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd62:	4413      	add	r3, r2
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fd ff89 	bl	800dc7c <VL53L0X_isqrt>
 800fd6a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800fd6c:	69bb      	ldr	r3, [r7, #24]
 800fd6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fd72:	fb02 f303 	mul.w	r3, r2, r3
 800fd76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800fd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d009      	beq.n	800fd94 <VL53L0X_calc_sigma_estimate+0x43c>
 800fd80:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d005      	beq.n	800fd94 <VL53L0X_calc_sigma_estimate+0x43c>
 800fd88:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fd8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d903      	bls.n	800fd9c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800fd94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fd98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fda2:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	681a      	ldr	r2, [r3, #0]
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800fdae:	6939      	ldr	r1, [r7, #16]
 800fdb0:	683b      	ldr	r3, [r7, #0]
 800fdb2:	9303      	str	r3, [sp, #12]
 800fdb4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fdb8:	9302      	str	r3, [sp, #8]
 800fdba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fdbe:	9301      	str	r3, [sp, #4]
 800fdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdc2:	9300      	str	r3, [sp, #0]
 800fdc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fdc8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fdca:	68f8      	ldr	r0, [r7, #12]
 800fdcc:	f7ff fca8 	bl	800f720 <VL53L0X_calc_dmax>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fdd6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800fdda:	4618      	mov	r0, r3
 800fddc:	37c0      	adds	r7, #192	; 0xc0
 800fdde:	46bd      	mov	sp, r7
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	51eb851f 	.word	0x51eb851f
 800fde8:	d1b71759 	.word	0xd1b71759
 800fdec:	10624dd3 	.word	0x10624dd3

0800fdf0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b090      	sub	sp, #64	; 0x40
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	60f8      	str	r0, [r7, #12]
 800fdf8:	607a      	str	r2, [r7, #4]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	460b      	mov	r3, r1
 800fdfe:	72fb      	strb	r3, [r7, #11]
 800fe00:	4613      	mov	r3, r2
 800fe02:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fe04:	2300      	movs	r3, #0
 800fe06:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800fe10:	2300      	movs	r3, #0
 800fe12:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800fe16:	2300      	movs	r3, #0
 800fe18:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800fe22:	2300      	movs	r3, #0
 800fe24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800fe34:	2300      	movs	r3, #0
 800fe36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800fe3e:	2300      	movs	r3, #0
 800fe40:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800fe42:	7afb      	ldrb	r3, [r7, #11]
 800fe44:	10db      	asrs	r3, r3, #3
 800fe46:	b2db      	uxtb	r3, r3
 800fe48:	f003 030f 	and.w	r3, r3, #15
 800fe4c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800fe50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d017      	beq.n	800fe88 <VL53L0X_get_pal_range_status+0x98>
 800fe58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe5c:	2b05      	cmp	r3, #5
 800fe5e:	d013      	beq.n	800fe88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800fe60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe64:	2b07      	cmp	r3, #7
 800fe66:	d00f      	beq.n	800fe88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800fe68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe6c:	2b0c      	cmp	r3, #12
 800fe6e:	d00b      	beq.n	800fe88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800fe70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe74:	2b0d      	cmp	r3, #13
 800fe76:	d007      	beq.n	800fe88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fe78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe7c:	2b0e      	cmp	r3, #14
 800fe7e:	d003      	beq.n	800fe88 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fe80:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fe84:	2b0f      	cmp	r3, #15
 800fe86:	d103      	bne.n	800fe90 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fe88:	2301      	movs	r3, #1
 800fe8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fe8e:	e002      	b.n	800fe96 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fe90:	2300      	movs	r3, #0
 800fe92:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fe96:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d109      	bne.n	800feb2 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fe9e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fea2:	461a      	mov	r2, r3
 800fea4:	2100      	movs	r1, #0
 800fea6:	68f8      	ldr	r0, [r7, #12]
 800fea8:	f7fc f9ec 	bl	800c284 <VL53L0X_GetLimitCheckEnable>
 800feac:	4603      	mov	r3, r0
 800feae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800feb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d02e      	beq.n	800ff18 <VL53L0X_get_pal_range_status+0x128>
 800feba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d12a      	bne.n	800ff18 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fec2:	f107 0310 	add.w	r3, r7, #16
 800fec6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800feca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fecc:	68f8      	ldr	r0, [r7, #12]
 800fece:	f7ff fd43 	bl	800f958 <VL53L0X_calc_sigma_estimate>
 800fed2:	4603      	mov	r3, r0
 800fed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fed8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d103      	bne.n	800fee8 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fee0:	693b      	ldr	r3, [r7, #16]
 800fee2:	b29a      	uxth	r2, r3
 800fee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fee6:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fee8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800feec:	2b00      	cmp	r3, #0
 800feee:	d113      	bne.n	800ff18 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800fef0:	f107 0320 	add.w	r3, r7, #32
 800fef4:	461a      	mov	r2, r3
 800fef6:	2100      	movs	r1, #0
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f7fc fa49 	bl	800c390 <VL53L0X_GetLimitCheckValue>
 800fefe:	4603      	mov	r3, r0
 800ff00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800ff04:	6a3b      	ldr	r3, [r7, #32]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d006      	beq.n	800ff18 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ff0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff0c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ff0e:	429a      	cmp	r2, r3
 800ff10:	d902      	bls.n	800ff18 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ff12:	2301      	movs	r3, #1
 800ff14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ff18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d109      	bne.n	800ff34 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ff20:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ff24:	461a      	mov	r2, r3
 800ff26:	2102      	movs	r1, #2
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f7fc f9ab 	bl	800c284 <VL53L0X_GetLimitCheckEnable>
 800ff2e:	4603      	mov	r3, r0
 800ff30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ff34:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d044      	beq.n	800ffc6 <VL53L0X_get_pal_range_status+0x1d6>
 800ff3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d140      	bne.n	800ffc6 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ff44:	f107 031c 	add.w	r3, r7, #28
 800ff48:	461a      	mov	r2, r3
 800ff4a:	2102      	movs	r1, #2
 800ff4c:	68f8      	ldr	r0, [r7, #12]
 800ff4e:	f7fc fa1f 	bl	800c390 <VL53L0X_GetLimitCheckValue>
 800ff52:	4603      	mov	r3, r0
 800ff54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ff58:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d107      	bne.n	800ff70 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ff60:	2201      	movs	r2, #1
 800ff62:	21ff      	movs	r1, #255	; 0xff
 800ff64:	68f8      	ldr	r0, [r7, #12]
 800ff66:	f000 f9bb 	bl	80102e0 <VL53L0X_WrByte>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800ff70:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d109      	bne.n	800ff8c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800ff78:	f107 0316 	add.w	r3, r7, #22
 800ff7c:	461a      	mov	r2, r3
 800ff7e:	21b6      	movs	r1, #182	; 0xb6
 800ff80:	68f8      	ldr	r0, [r7, #12]
 800ff82:	f000 fa59 	bl	8010438 <VL53L0X_RdWord>
 800ff86:	4603      	mov	r3, r0
 800ff88:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800ff8c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d107      	bne.n	800ffa4 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ff94:	2200      	movs	r2, #0
 800ff96:	21ff      	movs	r1, #255	; 0xff
 800ff98:	68f8      	ldr	r0, [r7, #12]
 800ff9a:	f000 f9a1 	bl	80102e0 <VL53L0X_WrByte>
 800ff9e:	4603      	mov	r3, r0
 800ffa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ffa4:	8afb      	ldrh	r3, [r7, #22]
 800ffa6:	025b      	lsls	r3, r3, #9
 800ffa8:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffae:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800ffb2:	69fb      	ldr	r3, [r7, #28]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d006      	beq.n	800ffc6 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800ffb8:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800ffba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d902      	bls.n	800ffc6 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ffc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d109      	bne.n	800ffe2 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ffce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	2103      	movs	r1, #3
 800ffd6:	68f8      	ldr	r0, [r7, #12]
 800ffd8:	f7fc f954 	bl	800c284 <VL53L0X_GetLimitCheckEnable>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800ffe2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d023      	beq.n	8010032 <VL53L0X_get_pal_range_status+0x242>
 800ffea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d11f      	bne.n	8010032 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fff2:	893b      	ldrh	r3, [r7, #8]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d102      	bne.n	800fffe <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800fff8:	2300      	movs	r3, #0
 800fffa:	637b      	str	r3, [r7, #52]	; 0x34
 800fffc:	e005      	b.n	801000a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	021a      	lsls	r2, r3, #8
 8010002:	893b      	ldrh	r3, [r7, #8]
 8010004:	fbb2 f3f3 	udiv	r3, r2, r3
 8010008:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 801000a:	f107 0318 	add.w	r3, r7, #24
 801000e:	461a      	mov	r2, r3
 8010010:	2103      	movs	r1, #3
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	f7fc f9bc 	bl	800c390 <VL53L0X_GetLimitCheckValue>
 8010018:	4603      	mov	r3, r0
 801001a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d006      	beq.n	8010032 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 8010024:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 8010026:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010028:	429a      	cmp	r2, r3
 801002a:	d202      	bcs.n	8010032 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 801002c:	2301      	movs	r3, #1
 801002e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8010032:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010036:	2b00      	cmp	r3, #0
 8010038:	d14a      	bne.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 801003a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801003e:	2b01      	cmp	r3, #1
 8010040:	d103      	bne.n	801004a <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 8010042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010044:	22ff      	movs	r2, #255	; 0xff
 8010046:	701a      	strb	r2, [r3, #0]
 8010048:	e042      	b.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 801004a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801004e:	2b01      	cmp	r3, #1
 8010050:	d007      	beq.n	8010062 <VL53L0X_get_pal_range_status+0x272>
 8010052:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010056:	2b02      	cmp	r3, #2
 8010058:	d003      	beq.n	8010062 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 801005a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801005e:	2b03      	cmp	r3, #3
 8010060:	d103      	bne.n	801006a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8010062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010064:	2205      	movs	r2, #5
 8010066:	701a      	strb	r2, [r3, #0]
 8010068:	e032      	b.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 801006a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801006e:	2b06      	cmp	r3, #6
 8010070:	d003      	beq.n	801007a <VL53L0X_get_pal_range_status+0x28a>
 8010072:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010076:	2b09      	cmp	r3, #9
 8010078:	d103      	bne.n	8010082 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 801007a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801007c:	2204      	movs	r2, #4
 801007e:	701a      	strb	r2, [r3, #0]
 8010080:	e026      	b.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8010082:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010086:	2b08      	cmp	r3, #8
 8010088:	d007      	beq.n	801009a <VL53L0X_get_pal_range_status+0x2aa>
 801008a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 801008e:	2b0a      	cmp	r3, #10
 8010090:	d003      	beq.n	801009a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8010092:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010096:	2b01      	cmp	r3, #1
 8010098:	d103      	bne.n	80100a2 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 801009a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801009c:	2203      	movs	r2, #3
 801009e:	701a      	strb	r2, [r3, #0]
 80100a0:	e016      	b.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 80100a2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80100a6:	2b04      	cmp	r3, #4
 80100a8:	d003      	beq.n	80100b2 <VL53L0X_get_pal_range_status+0x2c2>
 80100aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80100ae:	2b01      	cmp	r3, #1
 80100b0:	d103      	bne.n	80100ba <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 80100b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100b4:	2202      	movs	r2, #2
 80100b6:	701a      	strb	r2, [r3, #0]
 80100b8:	e00a      	b.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 80100ba:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d103      	bne.n	80100ca <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 80100c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100c4:	2201      	movs	r2, #1
 80100c6:	701a      	strb	r2, [r3, #0]
 80100c8:	e002      	b.n	80100d0 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 80100ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100cc:	2200      	movs	r2, #0
 80100ce:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 80100d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d2:	781b      	ldrb	r3, [r3, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d102      	bne.n	80100de <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 80100d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80100da:	2200      	movs	r2, #0
 80100dc:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80100de:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 80100e2:	461a      	mov	r2, r3
 80100e4:	2101      	movs	r1, #1
 80100e6:	68f8      	ldr	r0, [r7, #12]
 80100e8:	f7fc f8cc 	bl	800c284 <VL53L0X_GetLimitCheckEnable>
 80100ec:	4603      	mov	r3, r0
 80100ee:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 80100f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d14f      	bne.n	801019a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 80100fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d003      	beq.n	801010a <VL53L0X_get_pal_range_status+0x31a>
 8010102:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010106:	2b01      	cmp	r3, #1
 8010108:	d103      	bne.n	8010112 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 801010a:	2301      	movs	r3, #1
 801010c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010110:	e002      	b.n	8010118 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 8010112:	2300      	movs	r3, #0
 8010114:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801011e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 8010122:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8010126:	2b04      	cmp	r3, #4
 8010128:	d003      	beq.n	8010132 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 801012a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 801012e:	2b00      	cmp	r3, #0
 8010130:	d103      	bne.n	801013a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 8010132:	2301      	movs	r3, #1
 8010134:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010138:	e002      	b.n	8010140 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 801013a:	2300      	movs	r3, #0
 801013c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8010146:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 801014a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 801014e:	2b00      	cmp	r3, #0
 8010150:	d003      	beq.n	801015a <VL53L0X_get_pal_range_status+0x36a>
 8010152:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010156:	2b01      	cmp	r3, #1
 8010158:	d103      	bne.n	8010162 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 801015a:	2301      	movs	r3, #1
 801015c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010160:	e002      	b.n	8010168 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8010162:	2300      	movs	r3, #0
 8010164:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 801016e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8010172:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010176:	2b00      	cmp	r3, #0
 8010178:	d003      	beq.n	8010182 <VL53L0X_get_pal_range_status+0x392>
 801017a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801017e:	2b01      	cmp	r3, #1
 8010180:	d103      	bne.n	801018a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8010182:	2301      	movs	r3, #1
 8010184:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010188:	e002      	b.n	8010190 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 801018a:	2300      	movs	r3, #0
 801018c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8010196:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 801019a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 801019e:	4618      	mov	r0, r3
 80101a0:	3740      	adds	r7, #64	; 0x40
 80101a2:	46bd      	mov	sp, r7
 80101a4:	bd80      	pop	{r7, pc}

080101a6 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80101a6:	b580      	push	{r7, lr}
 80101a8:	b088      	sub	sp, #32
 80101aa:	af02      	add	r7, sp, #8
 80101ac:	60f8      	str	r0, [r7, #12]
 80101ae:	60b9      	str	r1, [r7, #8]
 80101b0:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	330a      	adds	r3, #10
 80101b6:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80101c4:	b299      	uxth	r1, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	b29a      	uxth	r2, r3
 80101ca:	697b      	ldr	r3, [r7, #20]
 80101cc:	9300      	str	r3, [sp, #0]
 80101ce:	4613      	mov	r3, r2
 80101d0:	68ba      	ldr	r2, [r7, #8]
 80101d2:	f7f3 fb63 	bl	800389c <HAL_I2C_Master_Transmit>
 80101d6:	4603      	mov	r3, r0
 80101d8:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80101da:	693b      	ldr	r3, [r7, #16]
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3718      	adds	r7, #24
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b088      	sub	sp, #32
 80101e8:	af02      	add	r7, sp, #8
 80101ea:	60f8      	str	r0, [r7, #12]
 80101ec:	60b9      	str	r1, [r7, #8]
 80101ee:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	330a      	adds	r3, #10
 80101f4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8010202:	f043 0301 	orr.w	r3, r3, #1
 8010206:	b2db      	uxtb	r3, r3
 8010208:	b299      	uxth	r1, r3
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	b29a      	uxth	r2, r3
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	9300      	str	r3, [sp, #0]
 8010212:	4613      	mov	r3, r2
 8010214:	68ba      	ldr	r2, [r7, #8]
 8010216:	f7f3 fc3f 	bl	8003a98 <HAL_I2C_Master_Receive>
 801021a:	4603      	mov	r3, r0
 801021c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 801021e:	693b      	ldr	r3, [r7, #16]
}
 8010220:	4618      	mov	r0, r3
 8010222:	3718      	adds	r7, #24
 8010224:	46bd      	mov	sp, r7
 8010226:	bd80      	pop	{r7, pc}

08010228 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8010228:	b580      	push	{r7, lr}
 801022a:	b086      	sub	sp, #24
 801022c:	af00      	add	r7, sp, #0
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	607a      	str	r2, [r7, #4]
 8010232:	603b      	str	r3, [r7, #0]
 8010234:	460b      	mov	r3, r1
 8010236:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010238:	2300      	movs	r3, #0
 801023a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	2b3f      	cmp	r3, #63	; 0x3f
 8010240:	d902      	bls.n	8010248 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8010242:	f06f 0303 	mvn.w	r3, #3
 8010246:	e016      	b.n	8010276 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 8010248:	4a0d      	ldr	r2, [pc, #52]	; (8010280 <VL53L0X_WriteMulti+0x58>)
 801024a:	7afb      	ldrb	r3, [r7, #11]
 801024c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 801024e:	683a      	ldr	r2, [r7, #0]
 8010250:	6879      	ldr	r1, [r7, #4]
 8010252:	480c      	ldr	r0, [pc, #48]	; (8010284 <VL53L0X_WriteMulti+0x5c>)
 8010254:	f002 feb0 	bl	8012fb8 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	3301      	adds	r3, #1
 801025c:	461a      	mov	r2, r3
 801025e:	4908      	ldr	r1, [pc, #32]	; (8010280 <VL53L0X_WriteMulti+0x58>)
 8010260:	68f8      	ldr	r0, [r7, #12]
 8010262:	f7ff ffa0 	bl	80101a6 <_I2CWrite>
 8010266:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010268:	693b      	ldr	r3, [r7, #16]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d001      	beq.n	8010272 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801026e:	23ec      	movs	r3, #236	; 0xec
 8010270:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8010272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010276:	4618      	mov	r0, r3
 8010278:	3718      	adds	r7, #24
 801027a:	46bd      	mov	sp, r7
 801027c:	bd80      	pop	{r7, pc}
 801027e:	bf00      	nop
 8010280:	20001390 	.word	0x20001390
 8010284:	20001391 	.word	0x20001391

08010288 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8010288:	b580      	push	{r7, lr}
 801028a:	b086      	sub	sp, #24
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	607a      	str	r2, [r7, #4]
 8010292:	603b      	str	r3, [r7, #0]
 8010294:	460b      	mov	r3, r1
 8010296:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010298:	2300      	movs	r3, #0
 801029a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801029c:	f107 030b 	add.w	r3, r7, #11
 80102a0:	2201      	movs	r2, #1
 80102a2:	4619      	mov	r1, r3
 80102a4:	68f8      	ldr	r0, [r7, #12]
 80102a6:	f7ff ff7e 	bl	80101a6 <_I2CWrite>
 80102aa:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d002      	beq.n	80102b8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80102b2:	23ec      	movs	r3, #236	; 0xec
 80102b4:	75fb      	strb	r3, [r7, #23]
        goto done;
 80102b6:	e00c      	b.n	80102d2 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 80102b8:	683a      	ldr	r2, [r7, #0]
 80102ba:	6879      	ldr	r1, [r7, #4]
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f7ff ff91 	bl	80101e4 <_I2CRead>
 80102c2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80102c4:	693b      	ldr	r3, [r7, #16]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d002      	beq.n	80102d0 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80102ca:	23ec      	movs	r3, #236	; 0xec
 80102cc:	75fb      	strb	r3, [r7, #23]
 80102ce:	e000      	b.n	80102d2 <VL53L0X_ReadMulti+0x4a>
    }
done:
 80102d0:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80102d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80102d6:	4618      	mov	r0, r3
 80102d8:	3718      	adds	r7, #24
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}
	...

080102e0 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	6078      	str	r0, [r7, #4]
 80102e8:	460b      	mov	r3, r1
 80102ea:	70fb      	strb	r3, [r7, #3]
 80102ec:	4613      	mov	r3, r2
 80102ee:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80102f0:	2300      	movs	r3, #0
 80102f2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80102f4:	4a0b      	ldr	r2, [pc, #44]	; (8010324 <VL53L0X_WrByte+0x44>)
 80102f6:	78fb      	ldrb	r3, [r7, #3]
 80102f8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 80102fa:	4a0a      	ldr	r2, [pc, #40]	; (8010324 <VL53L0X_WrByte+0x44>)
 80102fc:	78bb      	ldrb	r3, [r7, #2]
 80102fe:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8010300:	2202      	movs	r2, #2
 8010302:	4908      	ldr	r1, [pc, #32]	; (8010324 <VL53L0X_WrByte+0x44>)
 8010304:	6878      	ldr	r0, [r7, #4]
 8010306:	f7ff ff4e 	bl	80101a6 <_I2CWrite>
 801030a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 801030c:	68bb      	ldr	r3, [r7, #8]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d001      	beq.n	8010316 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010312:	23ec      	movs	r3, #236	; 0xec
 8010314:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8010316:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3710      	adds	r7, #16
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	20001390 	.word	0x20001390

08010328 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	460b      	mov	r3, r1
 8010332:	70fb      	strb	r3, [r7, #3]
 8010334:	4613      	mov	r3, r2
 8010336:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010338:	2300      	movs	r3, #0
 801033a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 801033c:	4a0e      	ldr	r2, [pc, #56]	; (8010378 <VL53L0X_WrWord+0x50>)
 801033e:	78fb      	ldrb	r3, [r7, #3]
 8010340:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8010342:	883b      	ldrh	r3, [r7, #0]
 8010344:	0a1b      	lsrs	r3, r3, #8
 8010346:	b29b      	uxth	r3, r3
 8010348:	b2da      	uxtb	r2, r3
 801034a:	4b0b      	ldr	r3, [pc, #44]	; (8010378 <VL53L0X_WrWord+0x50>)
 801034c:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 801034e:	883b      	ldrh	r3, [r7, #0]
 8010350:	b2da      	uxtb	r2, r3
 8010352:	4b09      	ldr	r3, [pc, #36]	; (8010378 <VL53L0X_WrWord+0x50>)
 8010354:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010356:	2203      	movs	r2, #3
 8010358:	4907      	ldr	r1, [pc, #28]	; (8010378 <VL53L0X_WrWord+0x50>)
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f7ff ff23 	bl	80101a6 <_I2CWrite>
 8010360:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d001      	beq.n	801036c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010368:	23ec      	movs	r3, #236	; 0xec
 801036a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 801036c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010370:	4618      	mov	r0, r3
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	20001390 	.word	0x20001390

0801037c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	4608      	mov	r0, r1
 8010386:	4611      	mov	r1, r2
 8010388:	461a      	mov	r2, r3
 801038a:	4603      	mov	r3, r0
 801038c:	70fb      	strb	r3, [r7, #3]
 801038e:	460b      	mov	r3, r1
 8010390:	70bb      	strb	r3, [r7, #2]
 8010392:	4613      	mov	r3, r2
 8010394:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010396:	2300      	movs	r3, #0
 8010398:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 801039a:	f107 020e 	add.w	r2, r7, #14
 801039e:	78fb      	ldrb	r3, [r7, #3]
 80103a0:	4619      	mov	r1, r3
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f000 f81e 	bl	80103e4 <VL53L0X_RdByte>
 80103a8:	4603      	mov	r3, r0
 80103aa:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 80103ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d110      	bne.n	80103d6 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 80103b4:	7bba      	ldrb	r2, [r7, #14]
 80103b6:	78bb      	ldrb	r3, [r7, #2]
 80103b8:	4013      	ands	r3, r2
 80103ba:	b2da      	uxtb	r2, r3
 80103bc:	787b      	ldrb	r3, [r7, #1]
 80103be:	4313      	orrs	r3, r2
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 80103c4:	7bba      	ldrb	r2, [r7, #14]
 80103c6:	78fb      	ldrb	r3, [r7, #3]
 80103c8:	4619      	mov	r1, r3
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f7ff ff88 	bl	80102e0 <VL53L0X_WrByte>
 80103d0:	4603      	mov	r3, r0
 80103d2:	73fb      	strb	r3, [r7, #15]
 80103d4:	e000      	b.n	80103d8 <VL53L0X_UpdateByte+0x5c>
        goto done;
 80103d6:	bf00      	nop
done:
    return Status;
 80103d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103dc:	4618      	mov	r0, r3
 80103de:	3710      	adds	r7, #16
 80103e0:	46bd      	mov	sp, r7
 80103e2:	bd80      	pop	{r7, pc}

080103e4 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b086      	sub	sp, #24
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	60f8      	str	r0, [r7, #12]
 80103ec:	460b      	mov	r3, r1
 80103ee:	607a      	str	r2, [r7, #4]
 80103f0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80103f2:	2300      	movs	r3, #0
 80103f4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80103f6:	f107 030b 	add.w	r3, r7, #11
 80103fa:	2201      	movs	r2, #1
 80103fc:	4619      	mov	r1, r3
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f7ff fed1 	bl	80101a6 <_I2CWrite>
 8010404:	6138      	str	r0, [r7, #16]
    if( status_int ){
 8010406:	693b      	ldr	r3, [r7, #16]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d002      	beq.n	8010412 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 801040c:	23ec      	movs	r3, #236	; 0xec
 801040e:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010410:	e00c      	b.n	801042c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 8010412:	2201      	movs	r2, #1
 8010414:	6879      	ldr	r1, [r7, #4]
 8010416:	68f8      	ldr	r0, [r7, #12]
 8010418:	f7ff fee4 	bl	80101e4 <_I2CRead>
 801041c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010424:	23ec      	movs	r3, #236	; 0xec
 8010426:	75fb      	strb	r3, [r7, #23]
 8010428:	e000      	b.n	801042c <VL53L0X_RdByte+0x48>
    }
done:
 801042a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 801042c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3718      	adds	r7, #24
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8010438:	b580      	push	{r7, lr}
 801043a:	b086      	sub	sp, #24
 801043c:	af00      	add	r7, sp, #0
 801043e:	60f8      	str	r0, [r7, #12]
 8010440:	460b      	mov	r3, r1
 8010442:	607a      	str	r2, [r7, #4]
 8010444:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010446:	2300      	movs	r3, #0
 8010448:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801044a:	f107 030b 	add.w	r3, r7, #11
 801044e:	2201      	movs	r2, #1
 8010450:	4619      	mov	r1, r3
 8010452:	68f8      	ldr	r0, [r7, #12]
 8010454:	f7ff fea7 	bl	80101a6 <_I2CWrite>
 8010458:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d002      	beq.n	8010466 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010460:	23ec      	movs	r3, #236	; 0xec
 8010462:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010464:	e017      	b.n	8010496 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010466:	2202      	movs	r2, #2
 8010468:	490e      	ldr	r1, [pc, #56]	; (80104a4 <VL53L0X_RdWord+0x6c>)
 801046a:	68f8      	ldr	r0, [r7, #12]
 801046c:	f7ff feba 	bl	80101e4 <_I2CRead>
 8010470:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	2b00      	cmp	r3, #0
 8010476:	d002      	beq.n	801047e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010478:	23ec      	movs	r3, #236	; 0xec
 801047a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801047c:	e00b      	b.n	8010496 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801047e:	4b09      	ldr	r3, [pc, #36]	; (80104a4 <VL53L0X_RdWord+0x6c>)
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	b29b      	uxth	r3, r3
 8010484:	021b      	lsls	r3, r3, #8
 8010486:	b29a      	uxth	r2, r3
 8010488:	4b06      	ldr	r3, [pc, #24]	; (80104a4 <VL53L0X_RdWord+0x6c>)
 801048a:	785b      	ldrb	r3, [r3, #1]
 801048c:	b29b      	uxth	r3, r3
 801048e:	4413      	add	r3, r2
 8010490:	b29a      	uxth	r2, r3
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8010496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801049a:	4618      	mov	r0, r3
 801049c:	3718      	adds	r7, #24
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	20001390 	.word	0x20001390

080104a8 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 80104a8:	b580      	push	{r7, lr}
 80104aa:	b086      	sub	sp, #24
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	60f8      	str	r0, [r7, #12]
 80104b0:	460b      	mov	r3, r1
 80104b2:	607a      	str	r2, [r7, #4]
 80104b4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80104b6:	2300      	movs	r3, #0
 80104b8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80104ba:	f107 030b 	add.w	r3, r7, #11
 80104be:	2201      	movs	r2, #1
 80104c0:	4619      	mov	r1, r3
 80104c2:	68f8      	ldr	r0, [r7, #12]
 80104c4:	f7ff fe6f 	bl	80101a6 <_I2CWrite>
 80104c8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80104ca:	693b      	ldr	r3, [r7, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d002      	beq.n	80104d6 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80104d0:	23ec      	movs	r3, #236	; 0xec
 80104d2:	75fb      	strb	r3, [r7, #23]
        goto done;
 80104d4:	e01b      	b.n	801050e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 80104d6:	2204      	movs	r2, #4
 80104d8:	4910      	ldr	r1, [pc, #64]	; (801051c <VL53L0X_RdDWord+0x74>)
 80104da:	68f8      	ldr	r0, [r7, #12]
 80104dc:	f7ff fe82 	bl	80101e4 <_I2CRead>
 80104e0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80104e2:	693b      	ldr	r3, [r7, #16]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d002      	beq.n	80104ee <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80104e8:	23ec      	movs	r3, #236	; 0xec
 80104ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 80104ec:	e00f      	b.n	801050e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 80104ee:	4b0b      	ldr	r3, [pc, #44]	; (801051c <VL53L0X_RdDWord+0x74>)
 80104f0:	781b      	ldrb	r3, [r3, #0]
 80104f2:	061a      	lsls	r2, r3, #24
 80104f4:	4b09      	ldr	r3, [pc, #36]	; (801051c <VL53L0X_RdDWord+0x74>)
 80104f6:	785b      	ldrb	r3, [r3, #1]
 80104f8:	041b      	lsls	r3, r3, #16
 80104fa:	441a      	add	r2, r3
 80104fc:	4b07      	ldr	r3, [pc, #28]	; (801051c <VL53L0X_RdDWord+0x74>)
 80104fe:	789b      	ldrb	r3, [r3, #2]
 8010500:	021b      	lsls	r3, r3, #8
 8010502:	4413      	add	r3, r2
 8010504:	4a05      	ldr	r2, [pc, #20]	; (801051c <VL53L0X_RdDWord+0x74>)
 8010506:	78d2      	ldrb	r2, [r2, #3]
 8010508:	441a      	add	r2, r3
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 801050e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010512:	4618      	mov	r0, r3
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	20001390 	.word	0x20001390

08010520 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8010528:	2300      	movs	r3, #0
 801052a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 801052c:	2002      	movs	r0, #2
 801052e:	f7f2 f98f 	bl	8002850 <HAL_Delay>
    return status;
 8010532:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010536:	4618      	mov	r0, r3
 8010538:	3710      	adds	r7, #16
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}
	...

08010540 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010540:	b580      	push	{r7, lr}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
 8010548:	460b      	mov	r3, r1
 801054a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801054c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8010550:	f002 fcc4 	bl	8012edc <USBD_static_malloc>
 8010554:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d109      	bne.n	8010570 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	32b0      	adds	r2, #176	; 0xb0
 8010566:	2100      	movs	r1, #0
 8010568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801056c:	2302      	movs	r3, #2
 801056e:	e0d4      	b.n	801071a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010570:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8010574:	2100      	movs	r1, #0
 8010576:	68f8      	ldr	r0, [r7, #12]
 8010578:	f002 fd2c 	bl	8012fd4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	32b0      	adds	r2, #176	; 0xb0
 8010586:	68f9      	ldr	r1, [r7, #12]
 8010588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	32b0      	adds	r2, #176	; 0xb0
 8010596:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	7c1b      	ldrb	r3, [r3, #16]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d138      	bne.n	801061a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80105a8:	4b5e      	ldr	r3, [pc, #376]	; (8010724 <USBD_CDC_Init+0x1e4>)
 80105aa:	7819      	ldrb	r1, [r3, #0]
 80105ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105b0:	2202      	movs	r2, #2
 80105b2:	6878      	ldr	r0, [r7, #4]
 80105b4:	f002 fb6f 	bl	8012c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80105b8:	4b5a      	ldr	r3, [pc, #360]	; (8010724 <USBD_CDC_Init+0x1e4>)
 80105ba:	781b      	ldrb	r3, [r3, #0]
 80105bc:	f003 020f 	and.w	r2, r3, #15
 80105c0:	6879      	ldr	r1, [r7, #4]
 80105c2:	4613      	mov	r3, r2
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	4413      	add	r3, r2
 80105c8:	009b      	lsls	r3, r3, #2
 80105ca:	440b      	add	r3, r1
 80105cc:	3324      	adds	r3, #36	; 0x24
 80105ce:	2201      	movs	r2, #1
 80105d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80105d2:	4b55      	ldr	r3, [pc, #340]	; (8010728 <USBD_CDC_Init+0x1e8>)
 80105d4:	7819      	ldrb	r1, [r3, #0]
 80105d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105da:	2202      	movs	r2, #2
 80105dc:	6878      	ldr	r0, [r7, #4]
 80105de:	f002 fb5a 	bl	8012c96 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80105e2:	4b51      	ldr	r3, [pc, #324]	; (8010728 <USBD_CDC_Init+0x1e8>)
 80105e4:	781b      	ldrb	r3, [r3, #0]
 80105e6:	f003 020f 	and.w	r2, r3, #15
 80105ea:	6879      	ldr	r1, [r7, #4]
 80105ec:	4613      	mov	r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	4413      	add	r3, r2
 80105f2:	009b      	lsls	r3, r3, #2
 80105f4:	440b      	add	r3, r1
 80105f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80105fa:	2201      	movs	r2, #1
 80105fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80105fe:	4b4b      	ldr	r3, [pc, #300]	; (801072c <USBD_CDC_Init+0x1ec>)
 8010600:	781b      	ldrb	r3, [r3, #0]
 8010602:	f003 020f 	and.w	r2, r3, #15
 8010606:	6879      	ldr	r1, [r7, #4]
 8010608:	4613      	mov	r3, r2
 801060a:	009b      	lsls	r3, r3, #2
 801060c:	4413      	add	r3, r2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	440b      	add	r3, r1
 8010612:	3326      	adds	r3, #38	; 0x26
 8010614:	2210      	movs	r2, #16
 8010616:	801a      	strh	r2, [r3, #0]
 8010618:	e035      	b.n	8010686 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801061a:	4b42      	ldr	r3, [pc, #264]	; (8010724 <USBD_CDC_Init+0x1e4>)
 801061c:	7819      	ldrb	r1, [r3, #0]
 801061e:	2340      	movs	r3, #64	; 0x40
 8010620:	2202      	movs	r2, #2
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f002 fb37 	bl	8012c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010628:	4b3e      	ldr	r3, [pc, #248]	; (8010724 <USBD_CDC_Init+0x1e4>)
 801062a:	781b      	ldrb	r3, [r3, #0]
 801062c:	f003 020f 	and.w	r2, r3, #15
 8010630:	6879      	ldr	r1, [r7, #4]
 8010632:	4613      	mov	r3, r2
 8010634:	009b      	lsls	r3, r3, #2
 8010636:	4413      	add	r3, r2
 8010638:	009b      	lsls	r3, r3, #2
 801063a:	440b      	add	r3, r1
 801063c:	3324      	adds	r3, #36	; 0x24
 801063e:	2201      	movs	r2, #1
 8010640:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010642:	4b39      	ldr	r3, [pc, #228]	; (8010728 <USBD_CDC_Init+0x1e8>)
 8010644:	7819      	ldrb	r1, [r3, #0]
 8010646:	2340      	movs	r3, #64	; 0x40
 8010648:	2202      	movs	r2, #2
 801064a:	6878      	ldr	r0, [r7, #4]
 801064c:	f002 fb23 	bl	8012c96 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010650:	4b35      	ldr	r3, [pc, #212]	; (8010728 <USBD_CDC_Init+0x1e8>)
 8010652:	781b      	ldrb	r3, [r3, #0]
 8010654:	f003 020f 	and.w	r2, r3, #15
 8010658:	6879      	ldr	r1, [r7, #4]
 801065a:	4613      	mov	r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	4413      	add	r3, r2
 8010660:	009b      	lsls	r3, r3, #2
 8010662:	440b      	add	r3, r1
 8010664:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010668:	2201      	movs	r2, #1
 801066a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801066c:	4b2f      	ldr	r3, [pc, #188]	; (801072c <USBD_CDC_Init+0x1ec>)
 801066e:	781b      	ldrb	r3, [r3, #0]
 8010670:	f003 020f 	and.w	r2, r3, #15
 8010674:	6879      	ldr	r1, [r7, #4]
 8010676:	4613      	mov	r3, r2
 8010678:	009b      	lsls	r3, r3, #2
 801067a:	4413      	add	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	440b      	add	r3, r1
 8010680:	3326      	adds	r3, #38	; 0x26
 8010682:	2210      	movs	r2, #16
 8010684:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010686:	4b29      	ldr	r3, [pc, #164]	; (801072c <USBD_CDC_Init+0x1ec>)
 8010688:	7819      	ldrb	r1, [r3, #0]
 801068a:	2308      	movs	r3, #8
 801068c:	2203      	movs	r2, #3
 801068e:	6878      	ldr	r0, [r7, #4]
 8010690:	f002 fb01 	bl	8012c96 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010694:	4b25      	ldr	r3, [pc, #148]	; (801072c <USBD_CDC_Init+0x1ec>)
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	f003 020f 	and.w	r2, r3, #15
 801069c:	6879      	ldr	r1, [r7, #4]
 801069e:	4613      	mov	r3, r2
 80106a0:	009b      	lsls	r3, r3, #2
 80106a2:	4413      	add	r3, r2
 80106a4:	009b      	lsls	r3, r3, #2
 80106a6:	440b      	add	r3, r1
 80106a8:	3324      	adds	r3, #36	; 0x24
 80106aa:	2201      	movs	r2, #1
 80106ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2200      	movs	r2, #0
 80106b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	33b0      	adds	r3, #176	; 0xb0
 80106c0:	009b      	lsls	r3, r3, #2
 80106c2:	4413      	add	r3, r2
 80106c4:	685b      	ldr	r3, [r3, #4]
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	2200      	movs	r2, #0
 80106ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	2200      	movs	r2, #0
 80106d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d101      	bne.n	80106e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80106e4:	2302      	movs	r3, #2
 80106e6:	e018      	b.n	801071a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	7c1b      	ldrb	r3, [r3, #16]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d10a      	bne.n	8010706 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80106f0:	4b0d      	ldr	r3, [pc, #52]	; (8010728 <USBD_CDC_Init+0x1e8>)
 80106f2:	7819      	ldrb	r1, [r3, #0]
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80106fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	f002 fbb8 	bl	8012e74 <USBD_LL_PrepareReceive>
 8010704:	e008      	b.n	8010718 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010706:	4b08      	ldr	r3, [pc, #32]	; (8010728 <USBD_CDC_Init+0x1e8>)
 8010708:	7819      	ldrb	r1, [r3, #0]
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010710:	2340      	movs	r3, #64	; 0x40
 8010712:	6878      	ldr	r0, [r7, #4]
 8010714:	f002 fbae 	bl	8012e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3710      	adds	r7, #16
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	200003af 	.word	0x200003af
 8010728:	200003b0 	.word	0x200003b0
 801072c:	200003b1 	.word	0x200003b1

08010730 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b082      	sub	sp, #8
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
 8010738:	460b      	mov	r3, r1
 801073a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801073c:	4b3a      	ldr	r3, [pc, #232]	; (8010828 <USBD_CDC_DeInit+0xf8>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f002 facd 	bl	8012ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010748:	4b37      	ldr	r3, [pc, #220]	; (8010828 <USBD_CDC_DeInit+0xf8>)
 801074a:	781b      	ldrb	r3, [r3, #0]
 801074c:	f003 020f 	and.w	r2, r3, #15
 8010750:	6879      	ldr	r1, [r7, #4]
 8010752:	4613      	mov	r3, r2
 8010754:	009b      	lsls	r3, r3, #2
 8010756:	4413      	add	r3, r2
 8010758:	009b      	lsls	r3, r3, #2
 801075a:	440b      	add	r3, r1
 801075c:	3324      	adds	r3, #36	; 0x24
 801075e:	2200      	movs	r2, #0
 8010760:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010762:	4b32      	ldr	r3, [pc, #200]	; (801082c <USBD_CDC_DeInit+0xfc>)
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	4619      	mov	r1, r3
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f002 faba 	bl	8012ce2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801076e:	4b2f      	ldr	r3, [pc, #188]	; (801082c <USBD_CDC_DeInit+0xfc>)
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	f003 020f 	and.w	r2, r3, #15
 8010776:	6879      	ldr	r1, [r7, #4]
 8010778:	4613      	mov	r3, r2
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	4413      	add	r3, r2
 801077e:	009b      	lsls	r3, r3, #2
 8010780:	440b      	add	r3, r1
 8010782:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010786:	2200      	movs	r2, #0
 8010788:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801078a:	4b29      	ldr	r3, [pc, #164]	; (8010830 <USBD_CDC_DeInit+0x100>)
 801078c:	781b      	ldrb	r3, [r3, #0]
 801078e:	4619      	mov	r1, r3
 8010790:	6878      	ldr	r0, [r7, #4]
 8010792:	f002 faa6 	bl	8012ce2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010796:	4b26      	ldr	r3, [pc, #152]	; (8010830 <USBD_CDC_DeInit+0x100>)
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	f003 020f 	and.w	r2, r3, #15
 801079e:	6879      	ldr	r1, [r7, #4]
 80107a0:	4613      	mov	r3, r2
 80107a2:	009b      	lsls	r3, r3, #2
 80107a4:	4413      	add	r3, r2
 80107a6:	009b      	lsls	r3, r3, #2
 80107a8:	440b      	add	r3, r1
 80107aa:	3324      	adds	r3, #36	; 0x24
 80107ac:	2200      	movs	r2, #0
 80107ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80107b0:	4b1f      	ldr	r3, [pc, #124]	; (8010830 <USBD_CDC_DeInit+0x100>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	f003 020f 	and.w	r2, r3, #15
 80107b8:	6879      	ldr	r1, [r7, #4]
 80107ba:	4613      	mov	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	4413      	add	r3, r2
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	440b      	add	r3, r1
 80107c4:	3326      	adds	r3, #38	; 0x26
 80107c6:	2200      	movs	r2, #0
 80107c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	32b0      	adds	r2, #176	; 0xb0
 80107d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d01f      	beq.n	801081c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80107e2:	687a      	ldr	r2, [r7, #4]
 80107e4:	33b0      	adds	r3, #176	; 0xb0
 80107e6:	009b      	lsls	r3, r3, #2
 80107e8:	4413      	add	r3, r2
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	32b0      	adds	r2, #176	; 0xb0
 80107fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107fe:	4618      	mov	r0, r3
 8010800:	f002 fb7a 	bl	8012ef8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	32b0      	adds	r2, #176	; 0xb0
 801080e:	2100      	movs	r1, #0
 8010810:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2200      	movs	r2, #0
 8010818:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801081c:	2300      	movs	r3, #0
}
 801081e:	4618      	mov	r0, r3
 8010820:	3708      	adds	r7, #8
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	200003af 	.word	0x200003af
 801082c:	200003b0 	.word	0x200003b0
 8010830:	200003b1 	.word	0x200003b1

08010834 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010834:	b580      	push	{r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	32b0      	adds	r2, #176	; 0xb0
 8010848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801084c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801084e:	2300      	movs	r3, #0
 8010850:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010852:	2300      	movs	r3, #0
 8010854:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010856:	2300      	movs	r3, #0
 8010858:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d101      	bne.n	8010864 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010860:	2303      	movs	r3, #3
 8010862:	e0bf      	b.n	80109e4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	781b      	ldrb	r3, [r3, #0]
 8010868:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801086c:	2b00      	cmp	r3, #0
 801086e:	d050      	beq.n	8010912 <USBD_CDC_Setup+0xde>
 8010870:	2b20      	cmp	r3, #32
 8010872:	f040 80af 	bne.w	80109d4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010876:	683b      	ldr	r3, [r7, #0]
 8010878:	88db      	ldrh	r3, [r3, #6]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d03a      	beq.n	80108f4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	781b      	ldrb	r3, [r3, #0]
 8010882:	b25b      	sxtb	r3, r3
 8010884:	2b00      	cmp	r3, #0
 8010886:	da1b      	bge.n	80108c0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	33b0      	adds	r3, #176	; 0xb0
 8010892:	009b      	lsls	r3, r3, #2
 8010894:	4413      	add	r3, r2
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	689b      	ldr	r3, [r3, #8]
 801089a:	683a      	ldr	r2, [r7, #0]
 801089c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801089e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80108a0:	683a      	ldr	r2, [r7, #0]
 80108a2:	88d2      	ldrh	r2, [r2, #6]
 80108a4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80108a6:	683b      	ldr	r3, [r7, #0]
 80108a8:	88db      	ldrh	r3, [r3, #6]
 80108aa:	2b07      	cmp	r3, #7
 80108ac:	bf28      	it	cs
 80108ae:	2307      	movcs	r3, #7
 80108b0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	89fa      	ldrh	r2, [r7, #14]
 80108b6:	4619      	mov	r1, r3
 80108b8:	6878      	ldr	r0, [r7, #4]
 80108ba:	f001 fd89 	bl	80123d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80108be:	e090      	b.n	80109e2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80108c0:	683b      	ldr	r3, [r7, #0]
 80108c2:	785a      	ldrb	r2, [r3, #1]
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	88db      	ldrh	r3, [r3, #6]
 80108ce:	2b3f      	cmp	r3, #63	; 0x3f
 80108d0:	d803      	bhi.n	80108da <USBD_CDC_Setup+0xa6>
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	88db      	ldrh	r3, [r3, #6]
 80108d6:	b2da      	uxtb	r2, r3
 80108d8:	e000      	b.n	80108dc <USBD_CDC_Setup+0xa8>
 80108da:	2240      	movs	r2, #64	; 0x40
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80108e2:	6939      	ldr	r1, [r7, #16]
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80108ea:	461a      	mov	r2, r3
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f001 fd9b 	bl	8012428 <USBD_CtlPrepareRx>
      break;
 80108f2:	e076      	b.n	80109e2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80108fa:	687a      	ldr	r2, [r7, #4]
 80108fc:	33b0      	adds	r3, #176	; 0xb0
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	4413      	add	r3, r2
 8010902:	685b      	ldr	r3, [r3, #4]
 8010904:	689b      	ldr	r3, [r3, #8]
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	7850      	ldrb	r0, [r2, #1]
 801090a:	2200      	movs	r2, #0
 801090c:	6839      	ldr	r1, [r7, #0]
 801090e:	4798      	blx	r3
      break;
 8010910:	e067      	b.n	80109e2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	785b      	ldrb	r3, [r3, #1]
 8010916:	2b0b      	cmp	r3, #11
 8010918:	d851      	bhi.n	80109be <USBD_CDC_Setup+0x18a>
 801091a:	a201      	add	r2, pc, #4	; (adr r2, 8010920 <USBD_CDC_Setup+0xec>)
 801091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010920:	08010951 	.word	0x08010951
 8010924:	080109cd 	.word	0x080109cd
 8010928:	080109bf 	.word	0x080109bf
 801092c:	080109bf 	.word	0x080109bf
 8010930:	080109bf 	.word	0x080109bf
 8010934:	080109bf 	.word	0x080109bf
 8010938:	080109bf 	.word	0x080109bf
 801093c:	080109bf 	.word	0x080109bf
 8010940:	080109bf 	.word	0x080109bf
 8010944:	080109bf 	.word	0x080109bf
 8010948:	0801097b 	.word	0x0801097b
 801094c:	080109a5 	.word	0x080109a5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010956:	b2db      	uxtb	r3, r3
 8010958:	2b03      	cmp	r3, #3
 801095a:	d107      	bne.n	801096c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801095c:	f107 030a 	add.w	r3, r7, #10
 8010960:	2202      	movs	r2, #2
 8010962:	4619      	mov	r1, r3
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	f001 fd33 	bl	80123d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801096a:	e032      	b.n	80109d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801096c:	6839      	ldr	r1, [r7, #0]
 801096e:	6878      	ldr	r0, [r7, #4]
 8010970:	f001 fcbd 	bl	80122ee <USBD_CtlError>
            ret = USBD_FAIL;
 8010974:	2303      	movs	r3, #3
 8010976:	75fb      	strb	r3, [r7, #23]
          break;
 8010978:	e02b      	b.n	80109d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010980:	b2db      	uxtb	r3, r3
 8010982:	2b03      	cmp	r3, #3
 8010984:	d107      	bne.n	8010996 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010986:	f107 030d 	add.w	r3, r7, #13
 801098a:	2201      	movs	r2, #1
 801098c:	4619      	mov	r1, r3
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f001 fd1e 	bl	80123d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010994:	e01d      	b.n	80109d2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010996:	6839      	ldr	r1, [r7, #0]
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f001 fca8 	bl	80122ee <USBD_CtlError>
            ret = USBD_FAIL;
 801099e:	2303      	movs	r3, #3
 80109a0:	75fb      	strb	r3, [r7, #23]
          break;
 80109a2:	e016      	b.n	80109d2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	2b03      	cmp	r3, #3
 80109ae:	d00f      	beq.n	80109d0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f001 fc9b 	bl	80122ee <USBD_CtlError>
            ret = USBD_FAIL;
 80109b8:	2303      	movs	r3, #3
 80109ba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80109bc:	e008      	b.n	80109d0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80109be:	6839      	ldr	r1, [r7, #0]
 80109c0:	6878      	ldr	r0, [r7, #4]
 80109c2:	f001 fc94 	bl	80122ee <USBD_CtlError>
          ret = USBD_FAIL;
 80109c6:	2303      	movs	r3, #3
 80109c8:	75fb      	strb	r3, [r7, #23]
          break;
 80109ca:	e002      	b.n	80109d2 <USBD_CDC_Setup+0x19e>
          break;
 80109cc:	bf00      	nop
 80109ce:	e008      	b.n	80109e2 <USBD_CDC_Setup+0x1ae>
          break;
 80109d0:	bf00      	nop
      }
      break;
 80109d2:	e006      	b.n	80109e2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80109d4:	6839      	ldr	r1, [r7, #0]
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f001 fc89 	bl	80122ee <USBD_CtlError>
      ret = USBD_FAIL;
 80109dc:	2303      	movs	r3, #3
 80109de:	75fb      	strb	r3, [r7, #23]
      break;
 80109e0:	bf00      	nop
  }

  return (uint8_t)ret;
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80109e4:	4618      	mov	r0, r3
 80109e6:	3718      	adds	r7, #24
 80109e8:	46bd      	mov	sp, r7
 80109ea:	bd80      	pop	{r7, pc}

080109ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b084      	sub	sp, #16
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	460b      	mov	r3, r1
 80109f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80109fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	32b0      	adds	r2, #176	; 0xb0
 8010a0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d101      	bne.n	8010a16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010a12:	2303      	movs	r3, #3
 8010a14:	e065      	b.n	8010ae2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	32b0      	adds	r2, #176	; 0xb0
 8010a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010a26:	78fb      	ldrb	r3, [r7, #3]
 8010a28:	f003 020f 	and.w	r2, r3, #15
 8010a2c:	6879      	ldr	r1, [r7, #4]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	4413      	add	r3, r2
 8010a34:	009b      	lsls	r3, r3, #2
 8010a36:	440b      	add	r3, r1
 8010a38:	3318      	adds	r3, #24
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d02f      	beq.n	8010aa0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010a40:	78fb      	ldrb	r3, [r7, #3]
 8010a42:	f003 020f 	and.w	r2, r3, #15
 8010a46:	6879      	ldr	r1, [r7, #4]
 8010a48:	4613      	mov	r3, r2
 8010a4a:	009b      	lsls	r3, r3, #2
 8010a4c:	4413      	add	r3, r2
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	440b      	add	r3, r1
 8010a52:	3318      	adds	r3, #24
 8010a54:	681a      	ldr	r2, [r3, #0]
 8010a56:	78fb      	ldrb	r3, [r7, #3]
 8010a58:	f003 010f 	and.w	r1, r3, #15
 8010a5c:	68f8      	ldr	r0, [r7, #12]
 8010a5e:	460b      	mov	r3, r1
 8010a60:	00db      	lsls	r3, r3, #3
 8010a62:	440b      	add	r3, r1
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	4403      	add	r3, r0
 8010a68:	3348      	adds	r3, #72	; 0x48
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8010a70:	fb01 f303 	mul.w	r3, r1, r3
 8010a74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d112      	bne.n	8010aa0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010a7a:	78fb      	ldrb	r3, [r7, #3]
 8010a7c:	f003 020f 	and.w	r2, r3, #15
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	4613      	mov	r3, r2
 8010a84:	009b      	lsls	r3, r3, #2
 8010a86:	4413      	add	r3, r2
 8010a88:	009b      	lsls	r3, r3, #2
 8010a8a:	440b      	add	r3, r1
 8010a8c:	3318      	adds	r3, #24
 8010a8e:	2200      	movs	r2, #0
 8010a90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010a92:	78f9      	ldrb	r1, [r7, #3]
 8010a94:	2300      	movs	r3, #0
 8010a96:	2200      	movs	r2, #0
 8010a98:	6878      	ldr	r0, [r7, #4]
 8010a9a:	f002 f9ca 	bl	8012e32 <USBD_LL_Transmit>
 8010a9e:	e01f      	b.n	8010ae0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010aa0:	68bb      	ldr	r3, [r7, #8]
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	33b0      	adds	r3, #176	; 0xb0
 8010ab2:	009b      	lsls	r3, r3, #2
 8010ab4:	4413      	add	r3, r2
 8010ab6:	685b      	ldr	r3, [r3, #4]
 8010ab8:	691b      	ldr	r3, [r3, #16]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d010      	beq.n	8010ae0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010ac4:	687a      	ldr	r2, [r7, #4]
 8010ac6:	33b0      	adds	r3, #176	; 0xb0
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4413      	add	r3, r2
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	691b      	ldr	r3, [r3, #16]
 8010ad0:	68ba      	ldr	r2, [r7, #8]
 8010ad2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8010adc:	78fa      	ldrb	r2, [r7, #3]
 8010ade:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}

08010aea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010aea:	b580      	push	{r7, lr}
 8010aec:	b084      	sub	sp, #16
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	460b      	mov	r3, r1
 8010af4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	32b0      	adds	r2, #176	; 0xb0
 8010b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	32b0      	adds	r2, #176	; 0xb0
 8010b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d101      	bne.n	8010b1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010b18:	2303      	movs	r3, #3
 8010b1a:	e01a      	b.n	8010b52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010b1c:	78fb      	ldrb	r3, [r7, #3]
 8010b1e:	4619      	mov	r1, r3
 8010b20:	6878      	ldr	r0, [r7, #4]
 8010b22:	f002 f9c8 	bl	8012eb6 <USBD_LL_GetRxDataSize>
 8010b26:	4602      	mov	r2, r0
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	33b0      	adds	r3, #176	; 0xb0
 8010b38:	009b      	lsls	r3, r3, #2
 8010b3a:	4413      	add	r3, r2
 8010b3c:	685b      	ldr	r3, [r3, #4]
 8010b3e:	68db      	ldr	r3, [r3, #12]
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8010b46:	68fa      	ldr	r2, [r7, #12]
 8010b48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8010b4c:	4611      	mov	r1, r2
 8010b4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010b50:	2300      	movs	r3, #0
}
 8010b52:	4618      	mov	r0, r3
 8010b54:	3710      	adds	r7, #16
 8010b56:	46bd      	mov	sp, r7
 8010b58:	bd80      	pop	{r7, pc}

08010b5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010b5a:	b580      	push	{r7, lr}
 8010b5c:	b084      	sub	sp, #16
 8010b5e:	af00      	add	r7, sp, #0
 8010b60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	32b0      	adds	r2, #176	; 0xb0
 8010b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d101      	bne.n	8010b7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010b78:	2303      	movs	r3, #3
 8010b7a:	e025      	b.n	8010bc8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	33b0      	adds	r3, #176	; 0xb0
 8010b86:	009b      	lsls	r3, r3, #2
 8010b88:	4413      	add	r3, r2
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d01a      	beq.n	8010bc6 <USBD_CDC_EP0_RxReady+0x6c>
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010b96:	2bff      	cmp	r3, #255	; 0xff
 8010b98:	d015      	beq.n	8010bc6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010ba0:	687a      	ldr	r2, [r7, #4]
 8010ba2:	33b0      	adds	r3, #176	; 0xb0
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	4413      	add	r3, r2
 8010ba8:	685b      	ldr	r3, [r3, #4]
 8010baa:	689b      	ldr	r3, [r3, #8]
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8010bb2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010bb4:	68fa      	ldr	r2, [r7, #12]
 8010bb6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010bba:	b292      	uxth	r2, r2
 8010bbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	22ff      	movs	r2, #255	; 0xff
 8010bc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8010bc6:	2300      	movs	r3, #0
}
 8010bc8:	4618      	mov	r0, r3
 8010bca:	3710      	adds	r7, #16
 8010bcc:	46bd      	mov	sp, r7
 8010bce:	bd80      	pop	{r7, pc}

08010bd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010bd0:	b580      	push	{r7, lr}
 8010bd2:	b086      	sub	sp, #24
 8010bd4:	af00      	add	r7, sp, #0
 8010bd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010bd8:	2182      	movs	r1, #130	; 0x82
 8010bda:	4818      	ldr	r0, [pc, #96]	; (8010c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010bdc:	f000 fd4f 	bl	801167e <USBD_GetEpDesc>
 8010be0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010be2:	2101      	movs	r1, #1
 8010be4:	4815      	ldr	r0, [pc, #84]	; (8010c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010be6:	f000 fd4a 	bl	801167e <USBD_GetEpDesc>
 8010bea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010bec:	2181      	movs	r1, #129	; 0x81
 8010bee:	4813      	ldr	r0, [pc, #76]	; (8010c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010bf0:	f000 fd45 	bl	801167e <USBD_GetEpDesc>
 8010bf4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d002      	beq.n	8010c02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	2210      	movs	r2, #16
 8010c00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010c02:	693b      	ldr	r3, [r7, #16]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d006      	beq.n	8010c16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010c08:	693b      	ldr	r3, [r7, #16]
 8010c0a:	2200      	movs	r2, #0
 8010c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c10:	711a      	strb	r2, [r3, #4]
 8010c12:	2200      	movs	r2, #0
 8010c14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010c16:	68fb      	ldr	r3, [r7, #12]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d006      	beq.n	8010c2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	2200      	movs	r2, #0
 8010c20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010c24:	711a      	strb	r2, [r3, #4]
 8010c26:	2200      	movs	r2, #0
 8010c28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	2243      	movs	r2, #67	; 0x43
 8010c2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010c30:	4b02      	ldr	r3, [pc, #8]	; (8010c3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3718      	adds	r7, #24
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	2000036c 	.word	0x2000036c

08010c40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b086      	sub	sp, #24
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010c48:	2182      	movs	r1, #130	; 0x82
 8010c4a:	4818      	ldr	r0, [pc, #96]	; (8010cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010c4c:	f000 fd17 	bl	801167e <USBD_GetEpDesc>
 8010c50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010c52:	2101      	movs	r1, #1
 8010c54:	4815      	ldr	r0, [pc, #84]	; (8010cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010c56:	f000 fd12 	bl	801167e <USBD_GetEpDesc>
 8010c5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010c5c:	2181      	movs	r1, #129	; 0x81
 8010c5e:	4813      	ldr	r0, [pc, #76]	; (8010cac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010c60:	f000 fd0d 	bl	801167e <USBD_GetEpDesc>
 8010c64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d002      	beq.n	8010c72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010c6c:	697b      	ldr	r3, [r7, #20]
 8010c6e:	2210      	movs	r2, #16
 8010c70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d006      	beq.n	8010c86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010c78:	693b      	ldr	r3, [r7, #16]
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	711a      	strb	r2, [r3, #4]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	f042 0202 	orr.w	r2, r2, #2
 8010c84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d006      	beq.n	8010c9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2200      	movs	r2, #0
 8010c90:	711a      	strb	r2, [r3, #4]
 8010c92:	2200      	movs	r2, #0
 8010c94:	f042 0202 	orr.w	r2, r2, #2
 8010c98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	2243      	movs	r2, #67	; 0x43
 8010c9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010ca0:	4b02      	ldr	r3, [pc, #8]	; (8010cac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010ca2:	4618      	mov	r0, r3
 8010ca4:	3718      	adds	r7, #24
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	2000036c 	.word	0x2000036c

08010cb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b086      	sub	sp, #24
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010cb8:	2182      	movs	r1, #130	; 0x82
 8010cba:	4818      	ldr	r0, [pc, #96]	; (8010d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010cbc:	f000 fcdf 	bl	801167e <USBD_GetEpDesc>
 8010cc0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010cc2:	2101      	movs	r1, #1
 8010cc4:	4815      	ldr	r0, [pc, #84]	; (8010d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010cc6:	f000 fcda 	bl	801167e <USBD_GetEpDesc>
 8010cca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010ccc:	2181      	movs	r1, #129	; 0x81
 8010cce:	4813      	ldr	r0, [pc, #76]	; (8010d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010cd0:	f000 fcd5 	bl	801167e <USBD_GetEpDesc>
 8010cd4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d002      	beq.n	8010ce2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010cdc:	697b      	ldr	r3, [r7, #20]
 8010cde:	2210      	movs	r2, #16
 8010ce0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d006      	beq.n	8010cf6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010ce8:	693b      	ldr	r3, [r7, #16]
 8010cea:	2200      	movs	r2, #0
 8010cec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010cf0:	711a      	strb	r2, [r3, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d006      	beq.n	8010d0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	2200      	movs	r2, #0
 8010d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d04:	711a      	strb	r2, [r3, #4]
 8010d06:	2200      	movs	r2, #0
 8010d08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	2243      	movs	r2, #67	; 0x43
 8010d0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010d10:	4b02      	ldr	r3, [pc, #8]	; (8010d1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010d12:	4618      	mov	r0, r3
 8010d14:	3718      	adds	r7, #24
 8010d16:	46bd      	mov	sp, r7
 8010d18:	bd80      	pop	{r7, pc}
 8010d1a:	bf00      	nop
 8010d1c:	2000036c 	.word	0x2000036c

08010d20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010d20:	b480      	push	{r7}
 8010d22:	b083      	sub	sp, #12
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	220a      	movs	r2, #10
 8010d2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010d2e:	4b03      	ldr	r3, [pc, #12]	; (8010d3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	20000328 	.word	0x20000328

08010d40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010d40:	b480      	push	{r7}
 8010d42:	b083      	sub	sp, #12
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d101      	bne.n	8010d54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010d50:	2303      	movs	r3, #3
 8010d52:	e009      	b.n	8010d68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	33b0      	adds	r3, #176	; 0xb0
 8010d5e:	009b      	lsls	r3, r3, #2
 8010d60:	4413      	add	r3, r2
 8010d62:	683a      	ldr	r2, [r7, #0]
 8010d64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010d66:	2300      	movs	r3, #0
}
 8010d68:	4618      	mov	r0, r3
 8010d6a:	370c      	adds	r7, #12
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d72:	4770      	bx	lr

08010d74 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010d74:	b480      	push	{r7}
 8010d76:	b087      	sub	sp, #28
 8010d78:	af00      	add	r7, sp, #0
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	32b0      	adds	r2, #176	; 0xb0
 8010d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d8e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8010d90:	697b      	ldr	r3, [r7, #20]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d101      	bne.n	8010d9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010d96:	2303      	movs	r3, #3
 8010d98:	e008      	b.n	8010dac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010d9a:	697b      	ldr	r3, [r7, #20]
 8010d9c:	68ba      	ldr	r2, [r7, #8]
 8010d9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	687a      	ldr	r2, [r7, #4]
 8010da6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	371c      	adds	r7, #28
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr

08010db8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	32b0      	adds	r2, #176	; 0xb0
 8010dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d101      	bne.n	8010ddc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010dd8:	2303      	movs	r3, #3
 8010dda:	e004      	b.n	8010de6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	683a      	ldr	r2, [r7, #0]
 8010de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8010de4:	2300      	movs	r3, #0
}
 8010de6:	4618      	mov	r0, r3
 8010de8:	3714      	adds	r7, #20
 8010dea:	46bd      	mov	sp, r7
 8010dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df0:	4770      	bx	lr
	...

08010df4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8010df4:	b580      	push	{r7, lr}
 8010df6:	b084      	sub	sp, #16
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	32b0      	adds	r2, #176	; 0xb0
 8010e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e0a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	32b0      	adds	r2, #176	; 0xb0
 8010e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d101      	bne.n	8010e26 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010e22:	2303      	movs	r3, #3
 8010e24:	e025      	b.n	8010e72 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8010e26:	68bb      	ldr	r3, [r7, #8]
 8010e28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d11f      	bne.n	8010e70 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	2201      	movs	r2, #1
 8010e34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010e38:	4b10      	ldr	r3, [pc, #64]	; (8010e7c <USBD_CDC_TransmitPacket+0x88>)
 8010e3a:	781b      	ldrb	r3, [r3, #0]
 8010e3c:	f003 020f 	and.w	r2, r3, #15
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	4613      	mov	r3, r2
 8010e4a:	009b      	lsls	r3, r3, #2
 8010e4c:	4413      	add	r3, r2
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	4403      	add	r3, r0
 8010e52:	3318      	adds	r3, #24
 8010e54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010e56:	4b09      	ldr	r3, [pc, #36]	; (8010e7c <USBD_CDC_TransmitPacket+0x88>)
 8010e58:	7819      	ldrb	r1, [r3, #0]
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010e60:	68bb      	ldr	r3, [r7, #8]
 8010e62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f001 ffe3 	bl	8012e32 <USBD_LL_Transmit>

    ret = USBD_OK;
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8010e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3710      	adds	r7, #16
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	200003af 	.word	0x200003af

08010e80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b084      	sub	sp, #16
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	32b0      	adds	r2, #176	; 0xb0
 8010e92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	32b0      	adds	r2, #176	; 0xb0
 8010ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d101      	bne.n	8010eae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010eaa:	2303      	movs	r3, #3
 8010eac:	e018      	b.n	8010ee0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	7c1b      	ldrb	r3, [r3, #16]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d10a      	bne.n	8010ecc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010eb6:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <USBD_CDC_ReceivePacket+0x68>)
 8010eb8:	7819      	ldrb	r1, [r3, #0]
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f001 ffd5 	bl	8012e74 <USBD_LL_PrepareReceive>
 8010eca:	e008      	b.n	8010ede <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010ecc:	4b06      	ldr	r3, [pc, #24]	; (8010ee8 <USBD_CDC_ReceivePacket+0x68>)
 8010ece:	7819      	ldrb	r1, [r3, #0]
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8010ed6:	2340      	movs	r3, #64	; 0x40
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f001 ffcb 	bl	8012e74 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010ede:	2300      	movs	r3, #0
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3710      	adds	r7, #16
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	bd80      	pop	{r7, pc}
 8010ee8:	200003b0 	.word	0x200003b0

08010eec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010eec:	b580      	push	{r7, lr}
 8010eee:	b086      	sub	sp, #24
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	60f8      	str	r0, [r7, #12]
 8010ef4:	60b9      	str	r1, [r7, #8]
 8010ef6:	4613      	mov	r3, r2
 8010ef8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d101      	bne.n	8010f04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010f00:	2303      	movs	r3, #3
 8010f02:	e01f      	b.n	8010f44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2200      	movs	r2, #0
 8010f18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8010f1c:	68bb      	ldr	r3, [r7, #8]
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d003      	beq.n	8010f2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	68ba      	ldr	r2, [r7, #8]
 8010f26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	79fa      	ldrb	r2, [r7, #7]
 8010f36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010f38:	68f8      	ldr	r0, [r7, #12]
 8010f3a:	f001 fe45 	bl	8012bc8 <USBD_LL_Init>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f44:	4618      	mov	r0, r3
 8010f46:	3718      	adds	r7, #24
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}

08010f4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
 8010f54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010f56:	2300      	movs	r3, #0
 8010f58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010f5a:	683b      	ldr	r3, [r7, #0]
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d101      	bne.n	8010f64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010f60:	2303      	movs	r3, #3
 8010f62:	e025      	b.n	8010fb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	683a      	ldr	r2, [r7, #0]
 8010f68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	32ae      	adds	r2, #174	; 0xae
 8010f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d00f      	beq.n	8010fa0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	32ae      	adds	r2, #174	; 0xae
 8010f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f90:	f107 020e 	add.w	r2, r7, #14
 8010f94:	4610      	mov	r0, r2
 8010f96:	4798      	blx	r3
 8010f98:	4602      	mov	r2, r0
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8010fa6:	1c5a      	adds	r2, r3, #1
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b082      	sub	sp, #8
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f001 fe4d 	bl	8012c60 <USBD_LL_Start>
 8010fc6:	4603      	mov	r3, r0
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3708      	adds	r7, #8
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}

08010fd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010fd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	370c      	adds	r7, #12
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr

08010fe6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010fe6:	b580      	push	{r7, lr}
 8010fe8:	b084      	sub	sp, #16
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	460b      	mov	r3, r1
 8010ff0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d009      	beq.n	8011014 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	78fa      	ldrb	r2, [r7, #3]
 801100a:	4611      	mov	r1, r2
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	4798      	blx	r3
 8011010:	4603      	mov	r3, r0
 8011012:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011014:	7bfb      	ldrb	r3, [r7, #15]
}
 8011016:	4618      	mov	r0, r3
 8011018:	3710      	adds	r7, #16
 801101a:	46bd      	mov	sp, r7
 801101c:	bd80      	pop	{r7, pc}

0801101e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801101e:	b580      	push	{r7, lr}
 8011020:	b084      	sub	sp, #16
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
 8011026:	460b      	mov	r3, r1
 8011028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801102a:	2300      	movs	r3, #0
 801102c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	78fa      	ldrb	r2, [r7, #3]
 8011038:	4611      	mov	r1, r2
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	4798      	blx	r3
 801103e:	4603      	mov	r3, r0
 8011040:	2b00      	cmp	r3, #0
 8011042:	d001      	beq.n	8011048 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011044:	2303      	movs	r3, #3
 8011046:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011048:	7bfb      	ldrb	r3, [r7, #15]
}
 801104a:	4618      	mov	r0, r3
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}

08011052 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011052:	b580      	push	{r7, lr}
 8011054:	b084      	sub	sp, #16
 8011056:	af00      	add	r7, sp, #0
 8011058:	6078      	str	r0, [r7, #4]
 801105a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	4618      	mov	r0, r3
 8011066:	f001 f908 	bl	801227a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2201      	movs	r2, #1
 801106e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011078:	461a      	mov	r2, r3
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011086:	f003 031f 	and.w	r3, r3, #31
 801108a:	2b02      	cmp	r3, #2
 801108c:	d01a      	beq.n	80110c4 <USBD_LL_SetupStage+0x72>
 801108e:	2b02      	cmp	r3, #2
 8011090:	d822      	bhi.n	80110d8 <USBD_LL_SetupStage+0x86>
 8011092:	2b00      	cmp	r3, #0
 8011094:	d002      	beq.n	801109c <USBD_LL_SetupStage+0x4a>
 8011096:	2b01      	cmp	r3, #1
 8011098:	d00a      	beq.n	80110b0 <USBD_LL_SetupStage+0x5e>
 801109a:	e01d      	b.n	80110d8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80110a2:	4619      	mov	r1, r3
 80110a4:	6878      	ldr	r0, [r7, #4]
 80110a6:	f000 fb5f 	bl	8011768 <USBD_StdDevReq>
 80110aa:	4603      	mov	r3, r0
 80110ac:	73fb      	strb	r3, [r7, #15]
      break;
 80110ae:	e020      	b.n	80110f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80110b6:	4619      	mov	r1, r3
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 fbc7 	bl	801184c <USBD_StdItfReq>
 80110be:	4603      	mov	r3, r0
 80110c0:	73fb      	strb	r3, [r7, #15]
      break;
 80110c2:	e016      	b.n	80110f2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80110ca:	4619      	mov	r1, r3
 80110cc:	6878      	ldr	r0, [r7, #4]
 80110ce:	f000 fc29 	bl	8011924 <USBD_StdEPReq>
 80110d2:	4603      	mov	r3, r0
 80110d4:	73fb      	strb	r3, [r7, #15]
      break;
 80110d6:	e00c      	b.n	80110f2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80110de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	4619      	mov	r1, r3
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f001 fe1a 	bl	8012d20 <USBD_LL_StallEP>
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]
      break;
 80110f0:	bf00      	nop
  }

  return ret;
 80110f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3710      	adds	r7, #16
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}

080110fc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b086      	sub	sp, #24
 8011100:	af00      	add	r7, sp, #0
 8011102:	60f8      	str	r0, [r7, #12]
 8011104:	460b      	mov	r3, r1
 8011106:	607a      	str	r2, [r7, #4]
 8011108:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801110a:	2300      	movs	r3, #0
 801110c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801110e:	7afb      	ldrb	r3, [r7, #11]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d16e      	bne.n	80111f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801111a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011122:	2b03      	cmp	r3, #3
 8011124:	f040 8098 	bne.w	8011258 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	689a      	ldr	r2, [r3, #8]
 801112c:	693b      	ldr	r3, [r7, #16]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	429a      	cmp	r2, r3
 8011132:	d913      	bls.n	801115c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011134:	693b      	ldr	r3, [r7, #16]
 8011136:	689a      	ldr	r2, [r3, #8]
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	68db      	ldr	r3, [r3, #12]
 801113c:	1ad2      	subs	r2, r2, r3
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	68da      	ldr	r2, [r3, #12]
 8011146:	693b      	ldr	r3, [r7, #16]
 8011148:	689b      	ldr	r3, [r3, #8]
 801114a:	4293      	cmp	r3, r2
 801114c:	bf28      	it	cs
 801114e:	4613      	movcs	r3, r2
 8011150:	461a      	mov	r2, r3
 8011152:	6879      	ldr	r1, [r7, #4]
 8011154:	68f8      	ldr	r0, [r7, #12]
 8011156:	f001 f984 	bl	8012462 <USBD_CtlContinueRx>
 801115a:	e07d      	b.n	8011258 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011162:	f003 031f 	and.w	r3, r3, #31
 8011166:	2b02      	cmp	r3, #2
 8011168:	d014      	beq.n	8011194 <USBD_LL_DataOutStage+0x98>
 801116a:	2b02      	cmp	r3, #2
 801116c:	d81d      	bhi.n	80111aa <USBD_LL_DataOutStage+0xae>
 801116e:	2b00      	cmp	r3, #0
 8011170:	d002      	beq.n	8011178 <USBD_LL_DataOutStage+0x7c>
 8011172:	2b01      	cmp	r3, #1
 8011174:	d003      	beq.n	801117e <USBD_LL_DataOutStage+0x82>
 8011176:	e018      	b.n	80111aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011178:	2300      	movs	r3, #0
 801117a:	75bb      	strb	r3, [r7, #22]
            break;
 801117c:	e018      	b.n	80111b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011184:	b2db      	uxtb	r3, r3
 8011186:	4619      	mov	r1, r3
 8011188:	68f8      	ldr	r0, [r7, #12]
 801118a:	f000 fa5e 	bl	801164a <USBD_CoreFindIF>
 801118e:	4603      	mov	r3, r0
 8011190:	75bb      	strb	r3, [r7, #22]
            break;
 8011192:	e00d      	b.n	80111b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801119a:	b2db      	uxtb	r3, r3
 801119c:	4619      	mov	r1, r3
 801119e:	68f8      	ldr	r0, [r7, #12]
 80111a0:	f000 fa60 	bl	8011664 <USBD_CoreFindEP>
 80111a4:	4603      	mov	r3, r0
 80111a6:	75bb      	strb	r3, [r7, #22]
            break;
 80111a8:	e002      	b.n	80111b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80111aa:	2300      	movs	r3, #0
 80111ac:	75bb      	strb	r3, [r7, #22]
            break;
 80111ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80111b0:	7dbb      	ldrb	r3, [r7, #22]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d119      	bne.n	80111ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111b6:	68fb      	ldr	r3, [r7, #12]
 80111b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	2b03      	cmp	r3, #3
 80111c0:	d113      	bne.n	80111ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80111c2:	7dba      	ldrb	r2, [r7, #22]
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	32ae      	adds	r2, #174	; 0xae
 80111c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111cc:	691b      	ldr	r3, [r3, #16]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d00b      	beq.n	80111ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80111d2:	7dba      	ldrb	r2, [r7, #22]
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80111da:	7dba      	ldrb	r2, [r7, #22]
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	32ae      	adds	r2, #174	; 0xae
 80111e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111e4:	691b      	ldr	r3, [r3, #16]
 80111e6:	68f8      	ldr	r0, [r7, #12]
 80111e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80111ea:	68f8      	ldr	r0, [r7, #12]
 80111ec:	f001 f94a 	bl	8012484 <USBD_CtlSendStatus>
 80111f0:	e032      	b.n	8011258 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80111f2:	7afb      	ldrb	r3, [r7, #11]
 80111f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111f8:	b2db      	uxtb	r3, r3
 80111fa:	4619      	mov	r1, r3
 80111fc:	68f8      	ldr	r0, [r7, #12]
 80111fe:	f000 fa31 	bl	8011664 <USBD_CoreFindEP>
 8011202:	4603      	mov	r3, r0
 8011204:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011206:	7dbb      	ldrb	r3, [r7, #22]
 8011208:	2bff      	cmp	r3, #255	; 0xff
 801120a:	d025      	beq.n	8011258 <USBD_LL_DataOutStage+0x15c>
 801120c:	7dbb      	ldrb	r3, [r7, #22]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d122      	bne.n	8011258 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011218:	b2db      	uxtb	r3, r3
 801121a:	2b03      	cmp	r3, #3
 801121c:	d117      	bne.n	801124e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801121e:	7dba      	ldrb	r2, [r7, #22]
 8011220:	68fb      	ldr	r3, [r7, #12]
 8011222:	32ae      	adds	r2, #174	; 0xae
 8011224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011228:	699b      	ldr	r3, [r3, #24]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d00f      	beq.n	801124e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801122e:	7dba      	ldrb	r2, [r7, #22]
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011236:	7dba      	ldrb	r2, [r7, #22]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	32ae      	adds	r2, #174	; 0xae
 801123c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011240:	699b      	ldr	r3, [r3, #24]
 8011242:	7afa      	ldrb	r2, [r7, #11]
 8011244:	4611      	mov	r1, r2
 8011246:	68f8      	ldr	r0, [r7, #12]
 8011248:	4798      	blx	r3
 801124a:	4603      	mov	r3, r0
 801124c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801124e:	7dfb      	ldrb	r3, [r7, #23]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d001      	beq.n	8011258 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011254:	7dfb      	ldrb	r3, [r7, #23]
 8011256:	e000      	b.n	801125a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011258:	2300      	movs	r3, #0
}
 801125a:	4618      	mov	r0, r3
 801125c:	3718      	adds	r7, #24
 801125e:	46bd      	mov	sp, r7
 8011260:	bd80      	pop	{r7, pc}

08011262 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011262:	b580      	push	{r7, lr}
 8011264:	b086      	sub	sp, #24
 8011266:	af00      	add	r7, sp, #0
 8011268:	60f8      	str	r0, [r7, #12]
 801126a:	460b      	mov	r3, r1
 801126c:	607a      	str	r2, [r7, #4]
 801126e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011270:	7afb      	ldrb	r3, [r7, #11]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d16f      	bne.n	8011356 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	3314      	adds	r3, #20
 801127a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011282:	2b02      	cmp	r3, #2
 8011284:	d15a      	bne.n	801133c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	689a      	ldr	r2, [r3, #8]
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	68db      	ldr	r3, [r3, #12]
 801128e:	429a      	cmp	r2, r3
 8011290:	d914      	bls.n	80112bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011292:	693b      	ldr	r3, [r7, #16]
 8011294:	689a      	ldr	r2, [r3, #8]
 8011296:	693b      	ldr	r3, [r7, #16]
 8011298:	68db      	ldr	r3, [r3, #12]
 801129a:	1ad2      	subs	r2, r2, r3
 801129c:	693b      	ldr	r3, [r7, #16]
 801129e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80112a0:	693b      	ldr	r3, [r7, #16]
 80112a2:	689b      	ldr	r3, [r3, #8]
 80112a4:	461a      	mov	r2, r3
 80112a6:	6879      	ldr	r1, [r7, #4]
 80112a8:	68f8      	ldr	r0, [r7, #12]
 80112aa:	f001 f8ac 	bl	8012406 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112ae:	2300      	movs	r3, #0
 80112b0:	2200      	movs	r2, #0
 80112b2:	2100      	movs	r1, #0
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	f001 fddd 	bl	8012e74 <USBD_LL_PrepareReceive>
 80112ba:	e03f      	b.n	801133c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80112bc:	693b      	ldr	r3, [r7, #16]
 80112be:	68da      	ldr	r2, [r3, #12]
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	689b      	ldr	r3, [r3, #8]
 80112c4:	429a      	cmp	r2, r3
 80112c6:	d11c      	bne.n	8011302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80112c8:	693b      	ldr	r3, [r7, #16]
 80112ca:	685a      	ldr	r2, [r3, #4]
 80112cc:	693b      	ldr	r3, [r7, #16]
 80112ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d316      	bcc.n	8011302 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80112d4:	693b      	ldr	r3, [r7, #16]
 80112d6:	685a      	ldr	r2, [r3, #4]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80112de:	429a      	cmp	r2, r3
 80112e0:	d20f      	bcs.n	8011302 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80112e2:	2200      	movs	r2, #0
 80112e4:	2100      	movs	r1, #0
 80112e6:	68f8      	ldr	r0, [r7, #12]
 80112e8:	f001 f88d 	bl	8012406 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2200      	movs	r2, #0
 80112f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112f4:	2300      	movs	r3, #0
 80112f6:	2200      	movs	r2, #0
 80112f8:	2100      	movs	r1, #0
 80112fa:	68f8      	ldr	r0, [r7, #12]
 80112fc:	f001 fdba 	bl	8012e74 <USBD_LL_PrepareReceive>
 8011300:	e01c      	b.n	801133c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011308:	b2db      	uxtb	r3, r3
 801130a:	2b03      	cmp	r3, #3
 801130c:	d10f      	bne.n	801132e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011314:	68db      	ldr	r3, [r3, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d009      	beq.n	801132e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	2200      	movs	r2, #0
 801131e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011328:	68db      	ldr	r3, [r3, #12]
 801132a:	68f8      	ldr	r0, [r7, #12]
 801132c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801132e:	2180      	movs	r1, #128	; 0x80
 8011330:	68f8      	ldr	r0, [r7, #12]
 8011332:	f001 fcf5 	bl	8012d20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011336:	68f8      	ldr	r0, [r7, #12]
 8011338:	f001 f8b7 	bl	80124aa <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011342:	2b00      	cmp	r3, #0
 8011344:	d03a      	beq.n	80113bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f7ff fe42 	bl	8010fd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2200      	movs	r2, #0
 8011350:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011354:	e032      	b.n	80113bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011356:	7afb      	ldrb	r3, [r7, #11]
 8011358:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801135c:	b2db      	uxtb	r3, r3
 801135e:	4619      	mov	r1, r3
 8011360:	68f8      	ldr	r0, [r7, #12]
 8011362:	f000 f97f 	bl	8011664 <USBD_CoreFindEP>
 8011366:	4603      	mov	r3, r0
 8011368:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801136a:	7dfb      	ldrb	r3, [r7, #23]
 801136c:	2bff      	cmp	r3, #255	; 0xff
 801136e:	d025      	beq.n	80113bc <USBD_LL_DataInStage+0x15a>
 8011370:	7dfb      	ldrb	r3, [r7, #23]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d122      	bne.n	80113bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801137c:	b2db      	uxtb	r3, r3
 801137e:	2b03      	cmp	r3, #3
 8011380:	d11c      	bne.n	80113bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011382:	7dfa      	ldrb	r2, [r7, #23]
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	32ae      	adds	r2, #174	; 0xae
 8011388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801138c:	695b      	ldr	r3, [r3, #20]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d014      	beq.n	80113bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011392:	7dfa      	ldrb	r2, [r7, #23]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801139a:	7dfa      	ldrb	r2, [r7, #23]
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	32ae      	adds	r2, #174	; 0xae
 80113a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113a4:	695b      	ldr	r3, [r3, #20]
 80113a6:	7afa      	ldrb	r2, [r7, #11]
 80113a8:	4611      	mov	r1, r2
 80113aa:	68f8      	ldr	r0, [r7, #12]
 80113ac:	4798      	blx	r3
 80113ae:	4603      	mov	r3, r0
 80113b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80113b2:	7dbb      	ldrb	r3, [r7, #22]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d001      	beq.n	80113bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80113b8:	7dbb      	ldrb	r3, [r7, #22]
 80113ba:	e000      	b.n	80113be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80113bc:	2300      	movs	r3, #0
}
 80113be:	4618      	mov	r0, r3
 80113c0:	3718      	adds	r7, #24
 80113c2:	46bd      	mov	sp, r7
 80113c4:	bd80      	pop	{r7, pc}

080113c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80113c6:	b580      	push	{r7, lr}
 80113c8:	b084      	sub	sp, #16
 80113ca:	af00      	add	r7, sp, #0
 80113cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80113ce:	2300      	movs	r3, #0
 80113d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	2201      	movs	r2, #1
 80113d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2200      	movs	r2, #0
 80113de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	2200      	movs	r2, #0
 80113e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2200      	movs	r2, #0
 80113ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d014      	beq.n	801142c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011408:	685b      	ldr	r3, [r3, #4]
 801140a:	2b00      	cmp	r3, #0
 801140c:	d00e      	beq.n	801142c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011414:	685b      	ldr	r3, [r3, #4]
 8011416:	687a      	ldr	r2, [r7, #4]
 8011418:	6852      	ldr	r2, [r2, #4]
 801141a:	b2d2      	uxtb	r2, r2
 801141c:	4611      	mov	r1, r2
 801141e:	6878      	ldr	r0, [r7, #4]
 8011420:	4798      	blx	r3
 8011422:	4603      	mov	r3, r0
 8011424:	2b00      	cmp	r3, #0
 8011426:	d001      	beq.n	801142c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011428:	2303      	movs	r3, #3
 801142a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801142c:	2340      	movs	r3, #64	; 0x40
 801142e:	2200      	movs	r2, #0
 8011430:	2100      	movs	r1, #0
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f001 fc2f 	bl	8012c96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	2201      	movs	r2, #1
 801143c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2240      	movs	r2, #64	; 0x40
 8011444:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011448:	2340      	movs	r3, #64	; 0x40
 801144a:	2200      	movs	r2, #0
 801144c:	2180      	movs	r1, #128	; 0x80
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f001 fc21 	bl	8012c96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2201      	movs	r2, #1
 8011458:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2240      	movs	r2, #64	; 0x40
 801145e:	621a      	str	r2, [r3, #32]

  return ret;
 8011460:	7bfb      	ldrb	r3, [r7, #15]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3710      	adds	r7, #16
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801146a:	b480      	push	{r7}
 801146c:	b083      	sub	sp, #12
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	460b      	mov	r3, r1
 8011474:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	78fa      	ldrb	r2, [r7, #3]
 801147a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801147c:	2300      	movs	r3, #0
}
 801147e:	4618      	mov	r0, r3
 8011480:	370c      	adds	r7, #12
 8011482:	46bd      	mov	sp, r7
 8011484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011488:	4770      	bx	lr

0801148a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801148a:	b480      	push	{r7}
 801148c:	b083      	sub	sp, #12
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011498:	b2da      	uxtb	r2, r3
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	2204      	movs	r2, #4
 80114a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80114a8:	2300      	movs	r3, #0
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	370c      	adds	r7, #12
 80114ae:	46bd      	mov	sp, r7
 80114b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b4:	4770      	bx	lr

080114b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80114b6:	b480      	push	{r7}
 80114b8:	b083      	sub	sp, #12
 80114ba:	af00      	add	r7, sp, #0
 80114bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b04      	cmp	r3, #4
 80114c8:	d106      	bne.n	80114d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80114d0:	b2da      	uxtb	r2, r3
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80114d8:	2300      	movs	r3, #0
}
 80114da:	4618      	mov	r0, r3
 80114dc:	370c      	adds	r7, #12
 80114de:	46bd      	mov	sp, r7
 80114e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e4:	4770      	bx	lr

080114e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80114e6:	b580      	push	{r7, lr}
 80114e8:	b082      	sub	sp, #8
 80114ea:	af00      	add	r7, sp, #0
 80114ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80114f4:	b2db      	uxtb	r3, r3
 80114f6:	2b03      	cmp	r3, #3
 80114f8:	d110      	bne.n	801151c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011500:	2b00      	cmp	r3, #0
 8011502:	d00b      	beq.n	801151c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801150a:	69db      	ldr	r3, [r3, #28]
 801150c:	2b00      	cmp	r3, #0
 801150e:	d005      	beq.n	801151c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011516:	69db      	ldr	r3, [r3, #28]
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3708      	adds	r7, #8
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}

08011526 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011526:	b580      	push	{r7, lr}
 8011528:	b082      	sub	sp, #8
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	460b      	mov	r3, r1
 8011530:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	32ae      	adds	r2, #174	; 0xae
 801153c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d101      	bne.n	8011548 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011544:	2303      	movs	r3, #3
 8011546:	e01c      	b.n	8011582 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801154e:	b2db      	uxtb	r3, r3
 8011550:	2b03      	cmp	r3, #3
 8011552:	d115      	bne.n	8011580 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	32ae      	adds	r2, #174	; 0xae
 801155e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011562:	6a1b      	ldr	r3, [r3, #32]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00b      	beq.n	8011580 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	32ae      	adds	r2, #174	; 0xae
 8011572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011576:	6a1b      	ldr	r3, [r3, #32]
 8011578:	78fa      	ldrb	r2, [r7, #3]
 801157a:	4611      	mov	r1, r2
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011580:	2300      	movs	r3, #0
}
 8011582:	4618      	mov	r0, r3
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}

0801158a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801158a:	b580      	push	{r7, lr}
 801158c:	b082      	sub	sp, #8
 801158e:	af00      	add	r7, sp, #0
 8011590:	6078      	str	r0, [r7, #4]
 8011592:	460b      	mov	r3, r1
 8011594:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	32ae      	adds	r2, #174	; 0xae
 80115a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d101      	bne.n	80115ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80115a8:	2303      	movs	r3, #3
 80115aa:	e01c      	b.n	80115e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115b2:	b2db      	uxtb	r3, r3
 80115b4:	2b03      	cmp	r3, #3
 80115b6:	d115      	bne.n	80115e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	32ae      	adds	r2, #174	; 0xae
 80115c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d00b      	beq.n	80115e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	32ae      	adds	r2, #174	; 0xae
 80115d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115dc:	78fa      	ldrb	r2, [r7, #3]
 80115de:	4611      	mov	r1, r2
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80115e4:	2300      	movs	r3, #0
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80115ee:	b480      	push	{r7}
 80115f0:	b083      	sub	sp, #12
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80115f6:	2300      	movs	r3, #0
}
 80115f8:	4618      	mov	r0, r3
 80115fa:	370c      	adds	r7, #12
 80115fc:	46bd      	mov	sp, r7
 80115fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011602:	4770      	bx	lr

08011604 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801160c:	2300      	movs	r3, #0
 801160e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	2201      	movs	r2, #1
 8011614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801161e:	2b00      	cmp	r3, #0
 8011620:	d00e      	beq.n	8011640 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011628:	685b      	ldr	r3, [r3, #4]
 801162a:	687a      	ldr	r2, [r7, #4]
 801162c:	6852      	ldr	r2, [r2, #4]
 801162e:	b2d2      	uxtb	r2, r2
 8011630:	4611      	mov	r1, r2
 8011632:	6878      	ldr	r0, [r7, #4]
 8011634:	4798      	blx	r3
 8011636:	4603      	mov	r3, r0
 8011638:	2b00      	cmp	r3, #0
 801163a:	d001      	beq.n	8011640 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801163c:	2303      	movs	r3, #3
 801163e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011640:	7bfb      	ldrb	r3, [r7, #15]
}
 8011642:	4618      	mov	r0, r3
 8011644:	3710      	adds	r7, #16
 8011646:	46bd      	mov	sp, r7
 8011648:	bd80      	pop	{r7, pc}

0801164a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801164a:	b480      	push	{r7}
 801164c:	b083      	sub	sp, #12
 801164e:	af00      	add	r7, sp, #0
 8011650:	6078      	str	r0, [r7, #4]
 8011652:	460b      	mov	r3, r1
 8011654:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011656:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011658:	4618      	mov	r0, r3
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011664:	b480      	push	{r7}
 8011666:	b083      	sub	sp, #12
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011670:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011672:	4618      	mov	r0, r3
 8011674:	370c      	adds	r7, #12
 8011676:	46bd      	mov	sp, r7
 8011678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801167c:	4770      	bx	lr

0801167e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801167e:	b580      	push	{r7, lr}
 8011680:	b086      	sub	sp, #24
 8011682:	af00      	add	r7, sp, #0
 8011684:	6078      	str	r0, [r7, #4]
 8011686:	460b      	mov	r3, r1
 8011688:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011692:	2300      	movs	r3, #0
 8011694:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	885b      	ldrh	r3, [r3, #2]
 801169a:	b29a      	uxth	r2, r3
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	781b      	ldrb	r3, [r3, #0]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d920      	bls.n	80116e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	781b      	ldrb	r3, [r3, #0]
 80116aa:	b29b      	uxth	r3, r3
 80116ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80116ae:	e013      	b.n	80116d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80116b0:	f107 030a 	add.w	r3, r7, #10
 80116b4:	4619      	mov	r1, r3
 80116b6:	6978      	ldr	r0, [r7, #20]
 80116b8:	f000 f81b 	bl	80116f2 <USBD_GetNextDesc>
 80116bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	785b      	ldrb	r3, [r3, #1]
 80116c2:	2b05      	cmp	r3, #5
 80116c4:	d108      	bne.n	80116d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	789b      	ldrb	r3, [r3, #2]
 80116ce:	78fa      	ldrb	r2, [r7, #3]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d008      	beq.n	80116e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80116d4:	2300      	movs	r3, #0
 80116d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	885b      	ldrh	r3, [r3, #2]
 80116dc:	b29a      	uxth	r2, r3
 80116de:	897b      	ldrh	r3, [r7, #10]
 80116e0:	429a      	cmp	r2, r3
 80116e2:	d8e5      	bhi.n	80116b0 <USBD_GetEpDesc+0x32>
 80116e4:	e000      	b.n	80116e8 <USBD_GetEpDesc+0x6a>
          break;
 80116e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80116e8:	693b      	ldr	r3, [r7, #16]
}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3718      	adds	r7, #24
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}

080116f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80116f2:	b480      	push	{r7}
 80116f4:	b085      	sub	sp, #20
 80116f6:	af00      	add	r7, sp, #0
 80116f8:	6078      	str	r0, [r7, #4]
 80116fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	881a      	ldrh	r2, [r3, #0]
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	b29b      	uxth	r3, r3
 801170a:	4413      	add	r3, r2
 801170c:	b29a      	uxth	r2, r3
 801170e:	683b      	ldr	r3, [r7, #0]
 8011710:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	781b      	ldrb	r3, [r3, #0]
 8011716:	461a      	mov	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	4413      	add	r3, r2
 801171c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801171e:	68fb      	ldr	r3, [r7, #12]
}
 8011720:	4618      	mov	r0, r3
 8011722:	3714      	adds	r7, #20
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801172c:	b480      	push	{r7}
 801172e:	b087      	sub	sp, #28
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011738:	697b      	ldr	r3, [r7, #20]
 801173a:	781b      	ldrb	r3, [r3, #0]
 801173c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801173e:	697b      	ldr	r3, [r7, #20]
 8011740:	3301      	adds	r3, #1
 8011742:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011744:	697b      	ldr	r3, [r7, #20]
 8011746:	781b      	ldrb	r3, [r3, #0]
 8011748:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801174a:	8a3b      	ldrh	r3, [r7, #16]
 801174c:	021b      	lsls	r3, r3, #8
 801174e:	b21a      	sxth	r2, r3
 8011750:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011754:	4313      	orrs	r3, r2
 8011756:	b21b      	sxth	r3, r3
 8011758:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801175a:	89fb      	ldrh	r3, [r7, #14]
}
 801175c:	4618      	mov	r0, r3
 801175e:	371c      	adds	r7, #28
 8011760:	46bd      	mov	sp, r7
 8011762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011766:	4770      	bx	lr

08011768 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011772:	2300      	movs	r3, #0
 8011774:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801177e:	2b40      	cmp	r3, #64	; 0x40
 8011780:	d005      	beq.n	801178e <USBD_StdDevReq+0x26>
 8011782:	2b40      	cmp	r3, #64	; 0x40
 8011784:	d857      	bhi.n	8011836 <USBD_StdDevReq+0xce>
 8011786:	2b00      	cmp	r3, #0
 8011788:	d00f      	beq.n	80117aa <USBD_StdDevReq+0x42>
 801178a:	2b20      	cmp	r3, #32
 801178c:	d153      	bne.n	8011836 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	32ae      	adds	r2, #174	; 0xae
 8011798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801179c:	689b      	ldr	r3, [r3, #8]
 801179e:	6839      	ldr	r1, [r7, #0]
 80117a0:	6878      	ldr	r0, [r7, #4]
 80117a2:	4798      	blx	r3
 80117a4:	4603      	mov	r3, r0
 80117a6:	73fb      	strb	r3, [r7, #15]
      break;
 80117a8:	e04a      	b.n	8011840 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	785b      	ldrb	r3, [r3, #1]
 80117ae:	2b09      	cmp	r3, #9
 80117b0:	d83b      	bhi.n	801182a <USBD_StdDevReq+0xc2>
 80117b2:	a201      	add	r2, pc, #4	; (adr r2, 80117b8 <USBD_StdDevReq+0x50>)
 80117b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117b8:	0801180d 	.word	0x0801180d
 80117bc:	08011821 	.word	0x08011821
 80117c0:	0801182b 	.word	0x0801182b
 80117c4:	08011817 	.word	0x08011817
 80117c8:	0801182b 	.word	0x0801182b
 80117cc:	080117eb 	.word	0x080117eb
 80117d0:	080117e1 	.word	0x080117e1
 80117d4:	0801182b 	.word	0x0801182b
 80117d8:	08011803 	.word	0x08011803
 80117dc:	080117f5 	.word	0x080117f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80117e0:	6839      	ldr	r1, [r7, #0]
 80117e2:	6878      	ldr	r0, [r7, #4]
 80117e4:	f000 fa3c 	bl	8011c60 <USBD_GetDescriptor>
          break;
 80117e8:	e024      	b.n	8011834 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80117ea:	6839      	ldr	r1, [r7, #0]
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f000 fba1 	bl	8011f34 <USBD_SetAddress>
          break;
 80117f2:	e01f      	b.n	8011834 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80117f4:	6839      	ldr	r1, [r7, #0]
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 fbe0 	bl	8011fbc <USBD_SetConfig>
 80117fc:	4603      	mov	r3, r0
 80117fe:	73fb      	strb	r3, [r7, #15]
          break;
 8011800:	e018      	b.n	8011834 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011802:	6839      	ldr	r1, [r7, #0]
 8011804:	6878      	ldr	r0, [r7, #4]
 8011806:	f000 fc83 	bl	8012110 <USBD_GetConfig>
          break;
 801180a:	e013      	b.n	8011834 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801180c:	6839      	ldr	r1, [r7, #0]
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 fcb4 	bl	801217c <USBD_GetStatus>
          break;
 8011814:	e00e      	b.n	8011834 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011816:	6839      	ldr	r1, [r7, #0]
 8011818:	6878      	ldr	r0, [r7, #4]
 801181a:	f000 fce3 	bl	80121e4 <USBD_SetFeature>
          break;
 801181e:	e009      	b.n	8011834 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011820:	6839      	ldr	r1, [r7, #0]
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f000 fd07 	bl	8012236 <USBD_ClrFeature>
          break;
 8011828:	e004      	b.n	8011834 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801182a:	6839      	ldr	r1, [r7, #0]
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f000 fd5e 	bl	80122ee <USBD_CtlError>
          break;
 8011832:	bf00      	nop
      }
      break;
 8011834:	e004      	b.n	8011840 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011836:	6839      	ldr	r1, [r7, #0]
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f000 fd58 	bl	80122ee <USBD_CtlError>
      break;
 801183e:	bf00      	nop
  }

  return ret;
 8011840:	7bfb      	ldrb	r3, [r7, #15]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3710      	adds	r7, #16
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}
 801184a:	bf00      	nop

0801184c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b084      	sub	sp, #16
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011856:	2300      	movs	r3, #0
 8011858:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011862:	2b40      	cmp	r3, #64	; 0x40
 8011864:	d005      	beq.n	8011872 <USBD_StdItfReq+0x26>
 8011866:	2b40      	cmp	r3, #64	; 0x40
 8011868:	d852      	bhi.n	8011910 <USBD_StdItfReq+0xc4>
 801186a:	2b00      	cmp	r3, #0
 801186c:	d001      	beq.n	8011872 <USBD_StdItfReq+0x26>
 801186e:	2b20      	cmp	r3, #32
 8011870:	d14e      	bne.n	8011910 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011878:	b2db      	uxtb	r3, r3
 801187a:	3b01      	subs	r3, #1
 801187c:	2b02      	cmp	r3, #2
 801187e:	d840      	bhi.n	8011902 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	889b      	ldrh	r3, [r3, #4]
 8011884:	b2db      	uxtb	r3, r3
 8011886:	2b01      	cmp	r3, #1
 8011888:	d836      	bhi.n	80118f8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	889b      	ldrh	r3, [r3, #4]
 801188e:	b2db      	uxtb	r3, r3
 8011890:	4619      	mov	r1, r3
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f7ff fed9 	bl	801164a <USBD_CoreFindIF>
 8011898:	4603      	mov	r3, r0
 801189a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801189c:	7bbb      	ldrb	r3, [r7, #14]
 801189e:	2bff      	cmp	r3, #255	; 0xff
 80118a0:	d01d      	beq.n	80118de <USBD_StdItfReq+0x92>
 80118a2:	7bbb      	ldrb	r3, [r7, #14]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d11a      	bne.n	80118de <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80118a8:	7bba      	ldrb	r2, [r7, #14]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	32ae      	adds	r2, #174	; 0xae
 80118ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118b2:	689b      	ldr	r3, [r3, #8]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d00f      	beq.n	80118d8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80118b8:	7bba      	ldrb	r2, [r7, #14]
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80118c0:	7bba      	ldrb	r2, [r7, #14]
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	32ae      	adds	r2, #174	; 0xae
 80118c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80118ca:	689b      	ldr	r3, [r3, #8]
 80118cc:	6839      	ldr	r1, [r7, #0]
 80118ce:	6878      	ldr	r0, [r7, #4]
 80118d0:	4798      	blx	r3
 80118d2:	4603      	mov	r3, r0
 80118d4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80118d6:	e004      	b.n	80118e2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80118d8:	2303      	movs	r3, #3
 80118da:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80118dc:	e001      	b.n	80118e2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80118de:	2303      	movs	r3, #3
 80118e0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80118e2:	683b      	ldr	r3, [r7, #0]
 80118e4:	88db      	ldrh	r3, [r3, #6]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d110      	bne.n	801190c <USBD_StdItfReq+0xc0>
 80118ea:	7bfb      	ldrb	r3, [r7, #15]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d10d      	bne.n	801190c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80118f0:	6878      	ldr	r0, [r7, #4]
 80118f2:	f000 fdc7 	bl	8012484 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80118f6:	e009      	b.n	801190c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80118f8:	6839      	ldr	r1, [r7, #0]
 80118fa:	6878      	ldr	r0, [r7, #4]
 80118fc:	f000 fcf7 	bl	80122ee <USBD_CtlError>
          break;
 8011900:	e004      	b.n	801190c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011902:	6839      	ldr	r1, [r7, #0]
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f000 fcf2 	bl	80122ee <USBD_CtlError>
          break;
 801190a:	e000      	b.n	801190e <USBD_StdItfReq+0xc2>
          break;
 801190c:	bf00      	nop
      }
      break;
 801190e:	e004      	b.n	801191a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011910:	6839      	ldr	r1, [r7, #0]
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f000 fceb 	bl	80122ee <USBD_CtlError>
      break;
 8011918:	bf00      	nop
  }

  return ret;
 801191a:	7bfb      	ldrb	r3, [r7, #15]
}
 801191c:	4618      	mov	r0, r3
 801191e:	3710      	adds	r7, #16
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b084      	sub	sp, #16
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
 801192c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801192e:	2300      	movs	r3, #0
 8011930:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011932:	683b      	ldr	r3, [r7, #0]
 8011934:	889b      	ldrh	r3, [r3, #4]
 8011936:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	781b      	ldrb	r3, [r3, #0]
 801193c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011940:	2b40      	cmp	r3, #64	; 0x40
 8011942:	d007      	beq.n	8011954 <USBD_StdEPReq+0x30>
 8011944:	2b40      	cmp	r3, #64	; 0x40
 8011946:	f200 817f 	bhi.w	8011c48 <USBD_StdEPReq+0x324>
 801194a:	2b00      	cmp	r3, #0
 801194c:	d02a      	beq.n	80119a4 <USBD_StdEPReq+0x80>
 801194e:	2b20      	cmp	r3, #32
 8011950:	f040 817a 	bne.w	8011c48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011954:	7bbb      	ldrb	r3, [r7, #14]
 8011956:	4619      	mov	r1, r3
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7ff fe83 	bl	8011664 <USBD_CoreFindEP>
 801195e:	4603      	mov	r3, r0
 8011960:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011962:	7b7b      	ldrb	r3, [r7, #13]
 8011964:	2bff      	cmp	r3, #255	; 0xff
 8011966:	f000 8174 	beq.w	8011c52 <USBD_StdEPReq+0x32e>
 801196a:	7b7b      	ldrb	r3, [r7, #13]
 801196c:	2b00      	cmp	r3, #0
 801196e:	f040 8170 	bne.w	8011c52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011972:	7b7a      	ldrb	r2, [r7, #13]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801197a:	7b7a      	ldrb	r2, [r7, #13]
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	32ae      	adds	r2, #174	; 0xae
 8011980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011984:	689b      	ldr	r3, [r3, #8]
 8011986:	2b00      	cmp	r3, #0
 8011988:	f000 8163 	beq.w	8011c52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801198c:	7b7a      	ldrb	r2, [r7, #13]
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	32ae      	adds	r2, #174	; 0xae
 8011992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011996:	689b      	ldr	r3, [r3, #8]
 8011998:	6839      	ldr	r1, [r7, #0]
 801199a:	6878      	ldr	r0, [r7, #4]
 801199c:	4798      	blx	r3
 801199e:	4603      	mov	r3, r0
 80119a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80119a2:	e156      	b.n	8011c52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119a4:	683b      	ldr	r3, [r7, #0]
 80119a6:	785b      	ldrb	r3, [r3, #1]
 80119a8:	2b03      	cmp	r3, #3
 80119aa:	d008      	beq.n	80119be <USBD_StdEPReq+0x9a>
 80119ac:	2b03      	cmp	r3, #3
 80119ae:	f300 8145 	bgt.w	8011c3c <USBD_StdEPReq+0x318>
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f000 809b 	beq.w	8011aee <USBD_StdEPReq+0x1ca>
 80119b8:	2b01      	cmp	r3, #1
 80119ba:	d03c      	beq.n	8011a36 <USBD_StdEPReq+0x112>
 80119bc:	e13e      	b.n	8011c3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80119c4:	b2db      	uxtb	r3, r3
 80119c6:	2b02      	cmp	r3, #2
 80119c8:	d002      	beq.n	80119d0 <USBD_StdEPReq+0xac>
 80119ca:	2b03      	cmp	r3, #3
 80119cc:	d016      	beq.n	80119fc <USBD_StdEPReq+0xd8>
 80119ce:	e02c      	b.n	8011a2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80119d0:	7bbb      	ldrb	r3, [r7, #14]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d00d      	beq.n	80119f2 <USBD_StdEPReq+0xce>
 80119d6:	7bbb      	ldrb	r3, [r7, #14]
 80119d8:	2b80      	cmp	r3, #128	; 0x80
 80119da:	d00a      	beq.n	80119f2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80119dc:	7bbb      	ldrb	r3, [r7, #14]
 80119de:	4619      	mov	r1, r3
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f001 f99d 	bl	8012d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80119e6:	2180      	movs	r1, #128	; 0x80
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f001 f999 	bl	8012d20 <USBD_LL_StallEP>
 80119ee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80119f0:	e020      	b.n	8011a34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	f000 fc7a 	bl	80122ee <USBD_CtlError>
              break;
 80119fa:	e01b      	b.n	8011a34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80119fc:	683b      	ldr	r3, [r7, #0]
 80119fe:	885b      	ldrh	r3, [r3, #2]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d10e      	bne.n	8011a22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011a04:	7bbb      	ldrb	r3, [r7, #14]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d00b      	beq.n	8011a22 <USBD_StdEPReq+0xfe>
 8011a0a:	7bbb      	ldrb	r3, [r7, #14]
 8011a0c:	2b80      	cmp	r3, #128	; 0x80
 8011a0e:	d008      	beq.n	8011a22 <USBD_StdEPReq+0xfe>
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	88db      	ldrh	r3, [r3, #6]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d104      	bne.n	8011a22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a18:	7bbb      	ldrb	r3, [r7, #14]
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	6878      	ldr	r0, [r7, #4]
 8011a1e:	f001 f97f 	bl	8012d20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011a22:	6878      	ldr	r0, [r7, #4]
 8011a24:	f000 fd2e 	bl	8012484 <USBD_CtlSendStatus>

              break;
 8011a28:	e004      	b.n	8011a34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011a2a:	6839      	ldr	r1, [r7, #0]
 8011a2c:	6878      	ldr	r0, [r7, #4]
 8011a2e:	f000 fc5e 	bl	80122ee <USBD_CtlError>
              break;
 8011a32:	bf00      	nop
          }
          break;
 8011a34:	e107      	b.n	8011c46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	2b02      	cmp	r3, #2
 8011a40:	d002      	beq.n	8011a48 <USBD_StdEPReq+0x124>
 8011a42:	2b03      	cmp	r3, #3
 8011a44:	d016      	beq.n	8011a74 <USBD_StdEPReq+0x150>
 8011a46:	e04b      	b.n	8011ae0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011a48:	7bbb      	ldrb	r3, [r7, #14]
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	d00d      	beq.n	8011a6a <USBD_StdEPReq+0x146>
 8011a4e:	7bbb      	ldrb	r3, [r7, #14]
 8011a50:	2b80      	cmp	r3, #128	; 0x80
 8011a52:	d00a      	beq.n	8011a6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011a54:	7bbb      	ldrb	r3, [r7, #14]
 8011a56:	4619      	mov	r1, r3
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f001 f961 	bl	8012d20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011a5e:	2180      	movs	r1, #128	; 0x80
 8011a60:	6878      	ldr	r0, [r7, #4]
 8011a62:	f001 f95d 	bl	8012d20 <USBD_LL_StallEP>
 8011a66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011a68:	e040      	b.n	8011aec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011a6a:	6839      	ldr	r1, [r7, #0]
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f000 fc3e 	bl	80122ee <USBD_CtlError>
              break;
 8011a72:	e03b      	b.n	8011aec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011a74:	683b      	ldr	r3, [r7, #0]
 8011a76:	885b      	ldrh	r3, [r3, #2]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d136      	bne.n	8011aea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011a7c:	7bbb      	ldrb	r3, [r7, #14]
 8011a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d004      	beq.n	8011a90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011a86:	7bbb      	ldrb	r3, [r7, #14]
 8011a88:	4619      	mov	r1, r3
 8011a8a:	6878      	ldr	r0, [r7, #4]
 8011a8c:	f001 f967 	bl	8012d5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011a90:	6878      	ldr	r0, [r7, #4]
 8011a92:	f000 fcf7 	bl	8012484 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011a96:	7bbb      	ldrb	r3, [r7, #14]
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7ff fde2 	bl	8011664 <USBD_CoreFindEP>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011aa4:	7b7b      	ldrb	r3, [r7, #13]
 8011aa6:	2bff      	cmp	r3, #255	; 0xff
 8011aa8:	d01f      	beq.n	8011aea <USBD_StdEPReq+0x1c6>
 8011aaa:	7b7b      	ldrb	r3, [r7, #13]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d11c      	bne.n	8011aea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011ab0:	7b7a      	ldrb	r2, [r7, #13]
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011ab8:	7b7a      	ldrb	r2, [r7, #13]
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	32ae      	adds	r2, #174	; 0xae
 8011abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d010      	beq.n	8011aea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011ac8:	7b7a      	ldrb	r2, [r7, #13]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	32ae      	adds	r2, #174	; 0xae
 8011ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad2:	689b      	ldr	r3, [r3, #8]
 8011ad4:	6839      	ldr	r1, [r7, #0]
 8011ad6:	6878      	ldr	r0, [r7, #4]
 8011ad8:	4798      	blx	r3
 8011ada:	4603      	mov	r3, r0
 8011adc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011ade:	e004      	b.n	8011aea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f000 fc03 	bl	80122ee <USBD_CtlError>
              break;
 8011ae8:	e000      	b.n	8011aec <USBD_StdEPReq+0x1c8>
              break;
 8011aea:	bf00      	nop
          }
          break;
 8011aec:	e0ab      	b.n	8011c46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011af4:	b2db      	uxtb	r3, r3
 8011af6:	2b02      	cmp	r3, #2
 8011af8:	d002      	beq.n	8011b00 <USBD_StdEPReq+0x1dc>
 8011afa:	2b03      	cmp	r3, #3
 8011afc:	d032      	beq.n	8011b64 <USBD_StdEPReq+0x240>
 8011afe:	e097      	b.n	8011c30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011b00:	7bbb      	ldrb	r3, [r7, #14]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d007      	beq.n	8011b16 <USBD_StdEPReq+0x1f2>
 8011b06:	7bbb      	ldrb	r3, [r7, #14]
 8011b08:	2b80      	cmp	r3, #128	; 0x80
 8011b0a:	d004      	beq.n	8011b16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011b0c:	6839      	ldr	r1, [r7, #0]
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f000 fbed 	bl	80122ee <USBD_CtlError>
                break;
 8011b14:	e091      	b.n	8011c3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	da0b      	bge.n	8011b36 <USBD_StdEPReq+0x212>
 8011b1e:	7bbb      	ldrb	r3, [r7, #14]
 8011b20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b24:	4613      	mov	r3, r2
 8011b26:	009b      	lsls	r3, r3, #2
 8011b28:	4413      	add	r3, r2
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	3310      	adds	r3, #16
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	4413      	add	r3, r2
 8011b32:	3304      	adds	r3, #4
 8011b34:	e00b      	b.n	8011b4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011b36:	7bbb      	ldrb	r3, [r7, #14]
 8011b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	4413      	add	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011b48:	687a      	ldr	r2, [r7, #4]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	3304      	adds	r3, #4
 8011b4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011b50:	68bb      	ldr	r3, [r7, #8]
 8011b52:	2200      	movs	r2, #0
 8011b54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011b56:	68bb      	ldr	r3, [r7, #8]
 8011b58:	2202      	movs	r2, #2
 8011b5a:	4619      	mov	r1, r3
 8011b5c:	6878      	ldr	r0, [r7, #4]
 8011b5e:	f000 fc37 	bl	80123d0 <USBD_CtlSendData>
              break;
 8011b62:	e06a      	b.n	8011c3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	da11      	bge.n	8011b90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011b6c:	7bbb      	ldrb	r3, [r7, #14]
 8011b6e:	f003 020f 	and.w	r2, r3, #15
 8011b72:	6879      	ldr	r1, [r7, #4]
 8011b74:	4613      	mov	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	4413      	add	r3, r2
 8011b7a:	009b      	lsls	r3, r3, #2
 8011b7c:	440b      	add	r3, r1
 8011b7e:	3324      	adds	r3, #36	; 0x24
 8011b80:	881b      	ldrh	r3, [r3, #0]
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d117      	bne.n	8011bb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011b86:	6839      	ldr	r1, [r7, #0]
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f000 fbb0 	bl	80122ee <USBD_CtlError>
                  break;
 8011b8e:	e054      	b.n	8011c3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011b90:	7bbb      	ldrb	r3, [r7, #14]
 8011b92:	f003 020f 	and.w	r2, r3, #15
 8011b96:	6879      	ldr	r1, [r7, #4]
 8011b98:	4613      	mov	r3, r2
 8011b9a:	009b      	lsls	r3, r3, #2
 8011b9c:	4413      	add	r3, r2
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	440b      	add	r3, r1
 8011ba2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011ba6:	881b      	ldrh	r3, [r3, #0]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d104      	bne.n	8011bb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011bac:	6839      	ldr	r1, [r7, #0]
 8011bae:	6878      	ldr	r0, [r7, #4]
 8011bb0:	f000 fb9d 	bl	80122ee <USBD_CtlError>
                  break;
 8011bb4:	e041      	b.n	8011c3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	da0b      	bge.n	8011bd6 <USBD_StdEPReq+0x2b2>
 8011bbe:	7bbb      	ldrb	r3, [r7, #14]
 8011bc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011bc4:	4613      	mov	r3, r2
 8011bc6:	009b      	lsls	r3, r3, #2
 8011bc8:	4413      	add	r3, r2
 8011bca:	009b      	lsls	r3, r3, #2
 8011bcc:	3310      	adds	r3, #16
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	4413      	add	r3, r2
 8011bd2:	3304      	adds	r3, #4
 8011bd4:	e00b      	b.n	8011bee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011bd6:	7bbb      	ldrb	r3, [r7, #14]
 8011bd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011bdc:	4613      	mov	r3, r2
 8011bde:	009b      	lsls	r3, r3, #2
 8011be0:	4413      	add	r3, r2
 8011be2:	009b      	lsls	r3, r3, #2
 8011be4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	4413      	add	r3, r2
 8011bec:	3304      	adds	r3, #4
 8011bee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011bf0:	7bbb      	ldrb	r3, [r7, #14]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d002      	beq.n	8011bfc <USBD_StdEPReq+0x2d8>
 8011bf6:	7bbb      	ldrb	r3, [r7, #14]
 8011bf8:	2b80      	cmp	r3, #128	; 0x80
 8011bfa:	d103      	bne.n	8011c04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	2200      	movs	r2, #0
 8011c00:	601a      	str	r2, [r3, #0]
 8011c02:	e00e      	b.n	8011c22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011c04:	7bbb      	ldrb	r3, [r7, #14]
 8011c06:	4619      	mov	r1, r3
 8011c08:	6878      	ldr	r0, [r7, #4]
 8011c0a:	f001 f8c7 	bl	8012d9c <USBD_LL_IsStallEP>
 8011c0e:	4603      	mov	r3, r0
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d003      	beq.n	8011c1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011c14:	68bb      	ldr	r3, [r7, #8]
 8011c16:	2201      	movs	r2, #1
 8011c18:	601a      	str	r2, [r3, #0]
 8011c1a:	e002      	b.n	8011c22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011c1c:	68bb      	ldr	r3, [r7, #8]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011c22:	68bb      	ldr	r3, [r7, #8]
 8011c24:	2202      	movs	r2, #2
 8011c26:	4619      	mov	r1, r3
 8011c28:	6878      	ldr	r0, [r7, #4]
 8011c2a:	f000 fbd1 	bl	80123d0 <USBD_CtlSendData>
              break;
 8011c2e:	e004      	b.n	8011c3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011c30:	6839      	ldr	r1, [r7, #0]
 8011c32:	6878      	ldr	r0, [r7, #4]
 8011c34:	f000 fb5b 	bl	80122ee <USBD_CtlError>
              break;
 8011c38:	bf00      	nop
          }
          break;
 8011c3a:	e004      	b.n	8011c46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011c3c:	6839      	ldr	r1, [r7, #0]
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f000 fb55 	bl	80122ee <USBD_CtlError>
          break;
 8011c44:	bf00      	nop
      }
      break;
 8011c46:	e005      	b.n	8011c54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f000 fb4f 	bl	80122ee <USBD_CtlError>
      break;
 8011c50:	e000      	b.n	8011c54 <USBD_StdEPReq+0x330>
      break;
 8011c52:	bf00      	nop
  }

  return ret;
 8011c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c56:	4618      	mov	r0, r3
 8011c58:	3710      	adds	r7, #16
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
	...

08011c60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c60:	b580      	push	{r7, lr}
 8011c62:	b084      	sub	sp, #16
 8011c64:	af00      	add	r7, sp, #0
 8011c66:	6078      	str	r0, [r7, #4]
 8011c68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011c6e:	2300      	movs	r3, #0
 8011c70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011c72:	2300      	movs	r3, #0
 8011c74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011c76:	683b      	ldr	r3, [r7, #0]
 8011c78:	885b      	ldrh	r3, [r3, #2]
 8011c7a:	0a1b      	lsrs	r3, r3, #8
 8011c7c:	b29b      	uxth	r3, r3
 8011c7e:	3b01      	subs	r3, #1
 8011c80:	2b06      	cmp	r3, #6
 8011c82:	f200 8128 	bhi.w	8011ed6 <USBD_GetDescriptor+0x276>
 8011c86:	a201      	add	r2, pc, #4	; (adr r2, 8011c8c <USBD_GetDescriptor+0x2c>)
 8011c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c8c:	08011ca9 	.word	0x08011ca9
 8011c90:	08011cc1 	.word	0x08011cc1
 8011c94:	08011d01 	.word	0x08011d01
 8011c98:	08011ed7 	.word	0x08011ed7
 8011c9c:	08011ed7 	.word	0x08011ed7
 8011ca0:	08011e77 	.word	0x08011e77
 8011ca4:	08011ea3 	.word	0x08011ea3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	687a      	ldr	r2, [r7, #4]
 8011cb2:	7c12      	ldrb	r2, [r2, #16]
 8011cb4:	f107 0108 	add.w	r1, r7, #8
 8011cb8:	4610      	mov	r0, r2
 8011cba:	4798      	blx	r3
 8011cbc:	60f8      	str	r0, [r7, #12]
      break;
 8011cbe:	e112      	b.n	8011ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	7c1b      	ldrb	r3, [r3, #16]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d10d      	bne.n	8011ce4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cd0:	f107 0208 	add.w	r2, r7, #8
 8011cd4:	4610      	mov	r0, r2
 8011cd6:	4798      	blx	r3
 8011cd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	2202      	movs	r2, #2
 8011ce0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011ce2:	e100      	b.n	8011ee6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cec:	f107 0208 	add.w	r2, r7, #8
 8011cf0:	4610      	mov	r0, r2
 8011cf2:	4798      	blx	r3
 8011cf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	3301      	adds	r3, #1
 8011cfa:	2202      	movs	r2, #2
 8011cfc:	701a      	strb	r2, [r3, #0]
      break;
 8011cfe:	e0f2      	b.n	8011ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011d00:	683b      	ldr	r3, [r7, #0]
 8011d02:	885b      	ldrh	r3, [r3, #2]
 8011d04:	b2db      	uxtb	r3, r3
 8011d06:	2b05      	cmp	r3, #5
 8011d08:	f200 80ac 	bhi.w	8011e64 <USBD_GetDescriptor+0x204>
 8011d0c:	a201      	add	r2, pc, #4	; (adr r2, 8011d14 <USBD_GetDescriptor+0xb4>)
 8011d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d12:	bf00      	nop
 8011d14:	08011d2d 	.word	0x08011d2d
 8011d18:	08011d61 	.word	0x08011d61
 8011d1c:	08011d95 	.word	0x08011d95
 8011d20:	08011dc9 	.word	0x08011dc9
 8011d24:	08011dfd 	.word	0x08011dfd
 8011d28:	08011e31 	.word	0x08011e31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d32:	685b      	ldr	r3, [r3, #4]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d00b      	beq.n	8011d50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d3e:	685b      	ldr	r3, [r3, #4]
 8011d40:	687a      	ldr	r2, [r7, #4]
 8011d42:	7c12      	ldrb	r2, [r2, #16]
 8011d44:	f107 0108 	add.w	r1, r7, #8
 8011d48:	4610      	mov	r0, r2
 8011d4a:	4798      	blx	r3
 8011d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d4e:	e091      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d50:	6839      	ldr	r1, [r7, #0]
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f000 facb 	bl	80122ee <USBD_CtlError>
            err++;
 8011d58:	7afb      	ldrb	r3, [r7, #11]
 8011d5a:	3301      	adds	r3, #1
 8011d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8011d5e:	e089      	b.n	8011e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d66:	689b      	ldr	r3, [r3, #8]
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d00b      	beq.n	8011d84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d72:	689b      	ldr	r3, [r3, #8]
 8011d74:	687a      	ldr	r2, [r7, #4]
 8011d76:	7c12      	ldrb	r2, [r2, #16]
 8011d78:	f107 0108 	add.w	r1, r7, #8
 8011d7c:	4610      	mov	r0, r2
 8011d7e:	4798      	blx	r3
 8011d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011d82:	e077      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011d84:	6839      	ldr	r1, [r7, #0]
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f000 fab1 	bl	80122ee <USBD_CtlError>
            err++;
 8011d8c:	7afb      	ldrb	r3, [r7, #11]
 8011d8e:	3301      	adds	r3, #1
 8011d90:	72fb      	strb	r3, [r7, #11]
          break;
 8011d92:	e06f      	b.n	8011e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011d9a:	68db      	ldr	r3, [r3, #12]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00b      	beq.n	8011db8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	687a      	ldr	r2, [r7, #4]
 8011daa:	7c12      	ldrb	r2, [r2, #16]
 8011dac:	f107 0108 	add.w	r1, r7, #8
 8011db0:	4610      	mov	r0, r2
 8011db2:	4798      	blx	r3
 8011db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011db6:	e05d      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011db8:	6839      	ldr	r1, [r7, #0]
 8011dba:	6878      	ldr	r0, [r7, #4]
 8011dbc:	f000 fa97 	bl	80122ee <USBD_CtlError>
            err++;
 8011dc0:	7afb      	ldrb	r3, [r7, #11]
 8011dc2:	3301      	adds	r3, #1
 8011dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8011dc6:	e055      	b.n	8011e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dce:	691b      	ldr	r3, [r3, #16]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d00b      	beq.n	8011dec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011dda:	691b      	ldr	r3, [r3, #16]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	7c12      	ldrb	r2, [r2, #16]
 8011de0:	f107 0108 	add.w	r1, r7, #8
 8011de4:	4610      	mov	r0, r2
 8011de6:	4798      	blx	r3
 8011de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011dea:	e043      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011dec:	6839      	ldr	r1, [r7, #0]
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f000 fa7d 	bl	80122ee <USBD_CtlError>
            err++;
 8011df4:	7afb      	ldrb	r3, [r7, #11]
 8011df6:	3301      	adds	r3, #1
 8011df8:	72fb      	strb	r3, [r7, #11]
          break;
 8011dfa:	e03b      	b.n	8011e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e02:	695b      	ldr	r3, [r3, #20]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00b      	beq.n	8011e20 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e0e:	695b      	ldr	r3, [r3, #20]
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	7c12      	ldrb	r2, [r2, #16]
 8011e14:	f107 0108 	add.w	r1, r7, #8
 8011e18:	4610      	mov	r0, r2
 8011e1a:	4798      	blx	r3
 8011e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e1e:	e029      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e20:	6839      	ldr	r1, [r7, #0]
 8011e22:	6878      	ldr	r0, [r7, #4]
 8011e24:	f000 fa63 	bl	80122ee <USBD_CtlError>
            err++;
 8011e28:	7afb      	ldrb	r3, [r7, #11]
 8011e2a:	3301      	adds	r3, #1
 8011e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8011e2e:	e021      	b.n	8011e74 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e36:	699b      	ldr	r3, [r3, #24]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00b      	beq.n	8011e54 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8011e42:	699b      	ldr	r3, [r3, #24]
 8011e44:	687a      	ldr	r2, [r7, #4]
 8011e46:	7c12      	ldrb	r2, [r2, #16]
 8011e48:	f107 0108 	add.w	r1, r7, #8
 8011e4c:	4610      	mov	r0, r2
 8011e4e:	4798      	blx	r3
 8011e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011e52:	e00f      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8011e54:	6839      	ldr	r1, [r7, #0]
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f000 fa49 	bl	80122ee <USBD_CtlError>
            err++;
 8011e5c:	7afb      	ldrb	r3, [r7, #11]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	72fb      	strb	r3, [r7, #11]
          break;
 8011e62:	e007      	b.n	8011e74 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8011e64:	6839      	ldr	r1, [r7, #0]
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f000 fa41 	bl	80122ee <USBD_CtlError>
          err++;
 8011e6c:	7afb      	ldrb	r3, [r7, #11]
 8011e6e:	3301      	adds	r3, #1
 8011e70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8011e72:	bf00      	nop
      }
      break;
 8011e74:	e037      	b.n	8011ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	7c1b      	ldrb	r3, [r3, #16]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d109      	bne.n	8011e92 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e86:	f107 0208 	add.w	r2, r7, #8
 8011e8a:	4610      	mov	r0, r2
 8011e8c:	4798      	blx	r3
 8011e8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011e90:	e029      	b.n	8011ee6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011e92:	6839      	ldr	r1, [r7, #0]
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f000 fa2a 	bl	80122ee <USBD_CtlError>
        err++;
 8011e9a:	7afb      	ldrb	r3, [r7, #11]
 8011e9c:	3301      	adds	r3, #1
 8011e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8011ea0:	e021      	b.n	8011ee6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	7c1b      	ldrb	r3, [r3, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d10d      	bne.n	8011ec6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eb2:	f107 0208 	add.w	r2, r7, #8
 8011eb6:	4610      	mov	r0, r2
 8011eb8:	4798      	blx	r3
 8011eba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
 8011ebe:	3301      	adds	r3, #1
 8011ec0:	2207      	movs	r2, #7
 8011ec2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011ec4:	e00f      	b.n	8011ee6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8011ec6:	6839      	ldr	r1, [r7, #0]
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 fa10 	bl	80122ee <USBD_CtlError>
        err++;
 8011ece:	7afb      	ldrb	r3, [r7, #11]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8011ed4:	e007      	b.n	8011ee6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8011ed6:	6839      	ldr	r1, [r7, #0]
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f000 fa08 	bl	80122ee <USBD_CtlError>
      err++;
 8011ede:	7afb      	ldrb	r3, [r7, #11]
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8011ee4:	bf00      	nop
  }

  if (err != 0U)
 8011ee6:	7afb      	ldrb	r3, [r7, #11]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d11e      	bne.n	8011f2a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	88db      	ldrh	r3, [r3, #6]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d016      	beq.n	8011f22 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8011ef4:	893b      	ldrh	r3, [r7, #8]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d00e      	beq.n	8011f18 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	88da      	ldrh	r2, [r3, #6]
 8011efe:	893b      	ldrh	r3, [r7, #8]
 8011f00:	4293      	cmp	r3, r2
 8011f02:	bf28      	it	cs
 8011f04:	4613      	movcs	r3, r2
 8011f06:	b29b      	uxth	r3, r3
 8011f08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011f0a:	893b      	ldrh	r3, [r7, #8]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	68f9      	ldr	r1, [r7, #12]
 8011f10:	6878      	ldr	r0, [r7, #4]
 8011f12:	f000 fa5d 	bl	80123d0 <USBD_CtlSendData>
 8011f16:	e009      	b.n	8011f2c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011f18:	6839      	ldr	r1, [r7, #0]
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f000 f9e7 	bl	80122ee <USBD_CtlError>
 8011f20:	e004      	b.n	8011f2c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8011f22:	6878      	ldr	r0, [r7, #4]
 8011f24:	f000 faae 	bl	8012484 <USBD_CtlSendStatus>
 8011f28:	e000      	b.n	8011f2c <USBD_GetDescriptor+0x2cc>
    return;
 8011f2a:	bf00      	nop
  }
}
 8011f2c:	3710      	adds	r7, #16
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd80      	pop	{r7, pc}
 8011f32:	bf00      	nop

08011f34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	b084      	sub	sp, #16
 8011f38:	af00      	add	r7, sp, #0
 8011f3a:	6078      	str	r0, [r7, #4]
 8011f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	889b      	ldrh	r3, [r3, #4]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d131      	bne.n	8011faa <USBD_SetAddress+0x76>
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	88db      	ldrh	r3, [r3, #6]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d12d      	bne.n	8011faa <USBD_SetAddress+0x76>
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	885b      	ldrh	r3, [r3, #2]
 8011f52:	2b7f      	cmp	r3, #127	; 0x7f
 8011f54:	d829      	bhi.n	8011faa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	885b      	ldrh	r3, [r3, #2]
 8011f5a:	b2db      	uxtb	r3, r3
 8011f5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f68:	b2db      	uxtb	r3, r3
 8011f6a:	2b03      	cmp	r3, #3
 8011f6c:	d104      	bne.n	8011f78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8011f6e:	6839      	ldr	r1, [r7, #0]
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f000 f9bc 	bl	80122ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f76:	e01d      	b.n	8011fb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	7bfa      	ldrb	r2, [r7, #15]
 8011f7c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8011f80:	7bfb      	ldrb	r3, [r7, #15]
 8011f82:	4619      	mov	r1, r3
 8011f84:	6878      	ldr	r0, [r7, #4]
 8011f86:	f000 ff35 	bl	8012df4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011f8a:	6878      	ldr	r0, [r7, #4]
 8011f8c:	f000 fa7a 	bl	8012484 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8011f90:	7bfb      	ldrb	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d004      	beq.n	8011fa0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011f96:	687b      	ldr	r3, [r7, #4]
 8011f98:	2202      	movs	r2, #2
 8011f9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f9e:	e009      	b.n	8011fb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	2201      	movs	r2, #1
 8011fa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fa8:	e004      	b.n	8011fb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011faa:	6839      	ldr	r1, [r7, #0]
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f000 f99e 	bl	80122ee <USBD_CtlError>
  }
}
 8011fb2:	bf00      	nop
 8011fb4:	bf00      	nop
 8011fb6:	3710      	adds	r7, #16
 8011fb8:	46bd      	mov	sp, r7
 8011fba:	bd80      	pop	{r7, pc}

08011fbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fbc:	b580      	push	{r7, lr}
 8011fbe:	b084      	sub	sp, #16
 8011fc0:	af00      	add	r7, sp, #0
 8011fc2:	6078      	str	r0, [r7, #4]
 8011fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011fca:	683b      	ldr	r3, [r7, #0]
 8011fcc:	885b      	ldrh	r3, [r3, #2]
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	4b4e      	ldr	r3, [pc, #312]	; (801210c <USBD_SetConfig+0x150>)
 8011fd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011fd4:	4b4d      	ldr	r3, [pc, #308]	; (801210c <USBD_SetConfig+0x150>)
 8011fd6:	781b      	ldrb	r3, [r3, #0]
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d905      	bls.n	8011fe8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011fdc:	6839      	ldr	r1, [r7, #0]
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f000 f985 	bl	80122ee <USBD_CtlError>
    return USBD_FAIL;
 8011fe4:	2303      	movs	r3, #3
 8011fe6:	e08c      	b.n	8012102 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fee:	b2db      	uxtb	r3, r3
 8011ff0:	2b02      	cmp	r3, #2
 8011ff2:	d002      	beq.n	8011ffa <USBD_SetConfig+0x3e>
 8011ff4:	2b03      	cmp	r3, #3
 8011ff6:	d029      	beq.n	801204c <USBD_SetConfig+0x90>
 8011ff8:	e075      	b.n	80120e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011ffa:	4b44      	ldr	r3, [pc, #272]	; (801210c <USBD_SetConfig+0x150>)
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d020      	beq.n	8012044 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012002:	4b42      	ldr	r3, [pc, #264]	; (801210c <USBD_SetConfig+0x150>)
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	461a      	mov	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801200c:	4b3f      	ldr	r3, [pc, #252]	; (801210c <USBD_SetConfig+0x150>)
 801200e:	781b      	ldrb	r3, [r3, #0]
 8012010:	4619      	mov	r1, r3
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f7fe ffe7 	bl	8010fe6 <USBD_SetClassConfig>
 8012018:	4603      	mov	r3, r0
 801201a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801201c:	7bfb      	ldrb	r3, [r7, #15]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d008      	beq.n	8012034 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012022:	6839      	ldr	r1, [r7, #0]
 8012024:	6878      	ldr	r0, [r7, #4]
 8012026:	f000 f962 	bl	80122ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2202      	movs	r2, #2
 801202e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012032:	e065      	b.n	8012100 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012034:	6878      	ldr	r0, [r7, #4]
 8012036:	f000 fa25 	bl	8012484 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	2203      	movs	r2, #3
 801203e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012042:	e05d      	b.n	8012100 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 fa1d 	bl	8012484 <USBD_CtlSendStatus>
      break;
 801204a:	e059      	b.n	8012100 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801204c:	4b2f      	ldr	r3, [pc, #188]	; (801210c <USBD_SetConfig+0x150>)
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d112      	bne.n	801207a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2202      	movs	r2, #2
 8012058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801205c:	4b2b      	ldr	r3, [pc, #172]	; (801210c <USBD_SetConfig+0x150>)
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	461a      	mov	r2, r3
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012066:	4b29      	ldr	r3, [pc, #164]	; (801210c <USBD_SetConfig+0x150>)
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	4619      	mov	r1, r3
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	f7fe ffd6 	bl	801101e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f000 fa06 	bl	8012484 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012078:	e042      	b.n	8012100 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801207a:	4b24      	ldr	r3, [pc, #144]	; (801210c <USBD_SetConfig+0x150>)
 801207c:	781b      	ldrb	r3, [r3, #0]
 801207e:	461a      	mov	r2, r3
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	685b      	ldr	r3, [r3, #4]
 8012084:	429a      	cmp	r2, r3
 8012086:	d02a      	beq.n	80120de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	685b      	ldr	r3, [r3, #4]
 801208c:	b2db      	uxtb	r3, r3
 801208e:	4619      	mov	r1, r3
 8012090:	6878      	ldr	r0, [r7, #4]
 8012092:	f7fe ffc4 	bl	801101e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012096:	4b1d      	ldr	r3, [pc, #116]	; (801210c <USBD_SetConfig+0x150>)
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	461a      	mov	r2, r3
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80120a0:	4b1a      	ldr	r3, [pc, #104]	; (801210c <USBD_SetConfig+0x150>)
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	4619      	mov	r1, r3
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7fe ff9d 	bl	8010fe6 <USBD_SetClassConfig>
 80120ac:	4603      	mov	r3, r0
 80120ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80120b0:	7bfb      	ldrb	r3, [r7, #15]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d00f      	beq.n	80120d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80120b6:	6839      	ldr	r1, [r7, #0]
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f000 f918 	bl	80122ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	685b      	ldr	r3, [r3, #4]
 80120c2:	b2db      	uxtb	r3, r3
 80120c4:	4619      	mov	r1, r3
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7fe ffa9 	bl	801101e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	2202      	movs	r2, #2
 80120d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80120d4:	e014      	b.n	8012100 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 f9d4 	bl	8012484 <USBD_CtlSendStatus>
      break;
 80120dc:	e010      	b.n	8012100 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	f000 f9d0 	bl	8012484 <USBD_CtlSendStatus>
      break;
 80120e4:	e00c      	b.n	8012100 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80120e6:	6839      	ldr	r1, [r7, #0]
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 f900 	bl	80122ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80120ee:	4b07      	ldr	r3, [pc, #28]	; (801210c <USBD_SetConfig+0x150>)
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	4619      	mov	r1, r3
 80120f4:	6878      	ldr	r0, [r7, #4]
 80120f6:	f7fe ff92 	bl	801101e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80120fa:	2303      	movs	r3, #3
 80120fc:	73fb      	strb	r3, [r7, #15]
      break;
 80120fe:	bf00      	nop
  }

  return ret;
 8012100:	7bfb      	ldrb	r3, [r7, #15]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	200013d0 	.word	0x200013d0

08012110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	88db      	ldrh	r3, [r3, #6]
 801211e:	2b01      	cmp	r3, #1
 8012120:	d004      	beq.n	801212c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012122:	6839      	ldr	r1, [r7, #0]
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f000 f8e2 	bl	80122ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801212a:	e023      	b.n	8012174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b02      	cmp	r3, #2
 8012136:	dc02      	bgt.n	801213e <USBD_GetConfig+0x2e>
 8012138:	2b00      	cmp	r3, #0
 801213a:	dc03      	bgt.n	8012144 <USBD_GetConfig+0x34>
 801213c:	e015      	b.n	801216a <USBD_GetConfig+0x5a>
 801213e:	2b03      	cmp	r3, #3
 8012140:	d00b      	beq.n	801215a <USBD_GetConfig+0x4a>
 8012142:	e012      	b.n	801216a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2200      	movs	r2, #0
 8012148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	3308      	adds	r3, #8
 801214e:	2201      	movs	r2, #1
 8012150:	4619      	mov	r1, r3
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 f93c 	bl	80123d0 <USBD_CtlSendData>
        break;
 8012158:	e00c      	b.n	8012174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	3304      	adds	r3, #4
 801215e:	2201      	movs	r2, #1
 8012160:	4619      	mov	r1, r3
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	f000 f934 	bl	80123d0 <USBD_CtlSendData>
        break;
 8012168:	e004      	b.n	8012174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801216a:	6839      	ldr	r1, [r7, #0]
 801216c:	6878      	ldr	r0, [r7, #4]
 801216e:	f000 f8be 	bl	80122ee <USBD_CtlError>
        break;
 8012172:	bf00      	nop
}
 8012174:	bf00      	nop
 8012176:	3708      	adds	r7, #8
 8012178:	46bd      	mov	sp, r7
 801217a:	bd80      	pop	{r7, pc}

0801217c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
 8012184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801218c:	b2db      	uxtb	r3, r3
 801218e:	3b01      	subs	r3, #1
 8012190:	2b02      	cmp	r3, #2
 8012192:	d81e      	bhi.n	80121d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	88db      	ldrh	r3, [r3, #6]
 8012198:	2b02      	cmp	r3, #2
 801219a:	d004      	beq.n	80121a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801219c:	6839      	ldr	r1, [r7, #0]
 801219e:	6878      	ldr	r0, [r7, #4]
 80121a0:	f000 f8a5 	bl	80122ee <USBD_CtlError>
        break;
 80121a4:	e01a      	b.n	80121dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	2201      	movs	r2, #1
 80121aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d005      	beq.n	80121c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	68db      	ldr	r3, [r3, #12]
 80121ba:	f043 0202 	orr.w	r2, r3, #2
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	330c      	adds	r3, #12
 80121c6:	2202      	movs	r2, #2
 80121c8:	4619      	mov	r1, r3
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f000 f900 	bl	80123d0 <USBD_CtlSendData>
      break;
 80121d0:	e004      	b.n	80121dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80121d2:	6839      	ldr	r1, [r7, #0]
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f000 f88a 	bl	80122ee <USBD_CtlError>
      break;
 80121da:	bf00      	nop
  }
}
 80121dc:	bf00      	nop
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}

080121e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	885b      	ldrh	r3, [r3, #2]
 80121f2:	2b01      	cmp	r3, #1
 80121f4:	d107      	bne.n	8012206 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2201      	movs	r2, #1
 80121fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 f940 	bl	8012484 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012204:	e013      	b.n	801222e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	885b      	ldrh	r3, [r3, #2]
 801220a:	2b02      	cmp	r3, #2
 801220c:	d10b      	bne.n	8012226 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	889b      	ldrh	r3, [r3, #4]
 8012212:	0a1b      	lsrs	r3, r3, #8
 8012214:	b29b      	uxth	r3, r3
 8012216:	b2da      	uxtb	r2, r3
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801221e:	6878      	ldr	r0, [r7, #4]
 8012220:	f000 f930 	bl	8012484 <USBD_CtlSendStatus>
}
 8012224:	e003      	b.n	801222e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012226:	6839      	ldr	r1, [r7, #0]
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f000 f860 	bl	80122ee <USBD_CtlError>
}
 801222e:	bf00      	nop
 8012230:	3708      	adds	r7, #8
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}

08012236 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012236:	b580      	push	{r7, lr}
 8012238:	b082      	sub	sp, #8
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
 801223e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012246:	b2db      	uxtb	r3, r3
 8012248:	3b01      	subs	r3, #1
 801224a:	2b02      	cmp	r3, #2
 801224c:	d80b      	bhi.n	8012266 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	885b      	ldrh	r3, [r3, #2]
 8012252:	2b01      	cmp	r3, #1
 8012254:	d10c      	bne.n	8012270 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	2200      	movs	r2, #0
 801225a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 f910 	bl	8012484 <USBD_CtlSendStatus>
      }
      break;
 8012264:	e004      	b.n	8012270 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012266:	6839      	ldr	r1, [r7, #0]
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f000 f840 	bl	80122ee <USBD_CtlError>
      break;
 801226e:	e000      	b.n	8012272 <USBD_ClrFeature+0x3c>
      break;
 8012270:	bf00      	nop
  }
}
 8012272:	bf00      	nop
 8012274:	3708      	adds	r7, #8
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801227a:	b580      	push	{r7, lr}
 801227c:	b084      	sub	sp, #16
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012284:	683b      	ldr	r3, [r7, #0]
 8012286:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	781a      	ldrb	r2, [r3, #0]
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	3301      	adds	r3, #1
 8012294:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	781a      	ldrb	r2, [r3, #0]
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	3301      	adds	r3, #1
 80122a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80122a4:	68f8      	ldr	r0, [r7, #12]
 80122a6:	f7ff fa41 	bl	801172c <SWAPBYTE>
 80122aa:	4603      	mov	r3, r0
 80122ac:	461a      	mov	r2, r3
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	3301      	adds	r3, #1
 80122b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	3301      	adds	r3, #1
 80122bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80122be:	68f8      	ldr	r0, [r7, #12]
 80122c0:	f7ff fa34 	bl	801172c <SWAPBYTE>
 80122c4:	4603      	mov	r3, r0
 80122c6:	461a      	mov	r2, r3
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	3301      	adds	r3, #1
 80122d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	3301      	adds	r3, #1
 80122d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f7ff fa27 	bl	801172c <SWAPBYTE>
 80122de:	4603      	mov	r3, r0
 80122e0:	461a      	mov	r2, r3
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	80da      	strh	r2, [r3, #6]
}
 80122e6:	bf00      	nop
 80122e8:	3710      	adds	r7, #16
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b082      	sub	sp, #8
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
 80122f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80122f8:	2180      	movs	r1, #128	; 0x80
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f000 fd10 	bl	8012d20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012300:	2100      	movs	r1, #0
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f000 fd0c 	bl	8012d20 <USBD_LL_StallEP>
}
 8012308:	bf00      	nop
 801230a:	3708      	adds	r7, #8
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012310:	b580      	push	{r7, lr}
 8012312:	b086      	sub	sp, #24
 8012314:	af00      	add	r7, sp, #0
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801231c:	2300      	movs	r3, #0
 801231e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d036      	beq.n	8012394 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801232a:	6938      	ldr	r0, [r7, #16]
 801232c:	f000 f836 	bl	801239c <USBD_GetLen>
 8012330:	4603      	mov	r3, r0
 8012332:	3301      	adds	r3, #1
 8012334:	b29b      	uxth	r3, r3
 8012336:	005b      	lsls	r3, r3, #1
 8012338:	b29a      	uxth	r2, r3
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801233e:	7dfb      	ldrb	r3, [r7, #23]
 8012340:	68ba      	ldr	r2, [r7, #8]
 8012342:	4413      	add	r3, r2
 8012344:	687a      	ldr	r2, [r7, #4]
 8012346:	7812      	ldrb	r2, [r2, #0]
 8012348:	701a      	strb	r2, [r3, #0]
  idx++;
 801234a:	7dfb      	ldrb	r3, [r7, #23]
 801234c:	3301      	adds	r3, #1
 801234e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012350:	7dfb      	ldrb	r3, [r7, #23]
 8012352:	68ba      	ldr	r2, [r7, #8]
 8012354:	4413      	add	r3, r2
 8012356:	2203      	movs	r2, #3
 8012358:	701a      	strb	r2, [r3, #0]
  idx++;
 801235a:	7dfb      	ldrb	r3, [r7, #23]
 801235c:	3301      	adds	r3, #1
 801235e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012360:	e013      	b.n	801238a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012362:	7dfb      	ldrb	r3, [r7, #23]
 8012364:	68ba      	ldr	r2, [r7, #8]
 8012366:	4413      	add	r3, r2
 8012368:	693a      	ldr	r2, [r7, #16]
 801236a:	7812      	ldrb	r2, [r2, #0]
 801236c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	3301      	adds	r3, #1
 8012372:	613b      	str	r3, [r7, #16]
    idx++;
 8012374:	7dfb      	ldrb	r3, [r7, #23]
 8012376:	3301      	adds	r3, #1
 8012378:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801237a:	7dfb      	ldrb	r3, [r7, #23]
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	4413      	add	r3, r2
 8012380:	2200      	movs	r2, #0
 8012382:	701a      	strb	r2, [r3, #0]
    idx++;
 8012384:	7dfb      	ldrb	r3, [r7, #23]
 8012386:	3301      	adds	r3, #1
 8012388:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	781b      	ldrb	r3, [r3, #0]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d1e7      	bne.n	8012362 <USBD_GetString+0x52>
 8012392:	e000      	b.n	8012396 <USBD_GetString+0x86>
    return;
 8012394:	bf00      	nop
  }
}
 8012396:	3718      	adds	r7, #24
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80123a4:	2300      	movs	r3, #0
 80123a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80123ac:	e005      	b.n	80123ba <USBD_GetLen+0x1e>
  {
    len++;
 80123ae:	7bfb      	ldrb	r3, [r7, #15]
 80123b0:	3301      	adds	r3, #1
 80123b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80123b4:	68bb      	ldr	r3, [r7, #8]
 80123b6:	3301      	adds	r3, #1
 80123b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d1f5      	bne.n	80123ae <USBD_GetLen+0x12>
  }

  return len;
 80123c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2202      	movs	r2, #2
 80123e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	68ba      	ldr	r2, [r7, #8]
 80123f4:	2100      	movs	r1, #0
 80123f6:	68f8      	ldr	r0, [r7, #12]
 80123f8:	f000 fd1b 	bl	8012e32 <USBD_LL_Transmit>

  return USBD_OK;
 80123fc:	2300      	movs	r3, #0
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3710      	adds	r7, #16
 8012402:	46bd      	mov	sp, r7
 8012404:	bd80      	pop	{r7, pc}

08012406 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012406:	b580      	push	{r7, lr}
 8012408:	b084      	sub	sp, #16
 801240a:	af00      	add	r7, sp, #0
 801240c:	60f8      	str	r0, [r7, #12]
 801240e:	60b9      	str	r1, [r7, #8]
 8012410:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	68ba      	ldr	r2, [r7, #8]
 8012416:	2100      	movs	r1, #0
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f000 fd0a 	bl	8012e32 <USBD_LL_Transmit>

  return USBD_OK;
 801241e:	2300      	movs	r3, #0
}
 8012420:	4618      	mov	r0, r3
 8012422:	3710      	adds	r7, #16
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	60f8      	str	r0, [r7, #12]
 8012430:	60b9      	str	r1, [r7, #8]
 8012432:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	2203      	movs	r2, #3
 8012438:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	687a      	ldr	r2, [r7, #4]
 8012440:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	687a      	ldr	r2, [r7, #4]
 8012448:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	68ba      	ldr	r2, [r7, #8]
 8012450:	2100      	movs	r1, #0
 8012452:	68f8      	ldr	r0, [r7, #12]
 8012454:	f000 fd0e 	bl	8012e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012458:	2300      	movs	r3, #0
}
 801245a:	4618      	mov	r0, r3
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b084      	sub	sp, #16
 8012466:	af00      	add	r7, sp, #0
 8012468:	60f8      	str	r0, [r7, #12]
 801246a:	60b9      	str	r1, [r7, #8]
 801246c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	68ba      	ldr	r2, [r7, #8]
 8012472:	2100      	movs	r1, #0
 8012474:	68f8      	ldr	r0, [r7, #12]
 8012476:	f000 fcfd 	bl	8012e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801247a:	2300      	movs	r3, #0
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2204      	movs	r2, #4
 8012490:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012494:	2300      	movs	r3, #0
 8012496:	2200      	movs	r2, #0
 8012498:	2100      	movs	r1, #0
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fcc9 	bl	8012e32 <USBD_LL_Transmit>

  return USBD_OK;
 80124a0:	2300      	movs	r3, #0
}
 80124a2:	4618      	mov	r0, r3
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}

080124aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80124aa:	b580      	push	{r7, lr}
 80124ac:	b082      	sub	sp, #8
 80124ae:	af00      	add	r7, sp, #0
 80124b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	2205      	movs	r2, #5
 80124b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80124ba:	2300      	movs	r3, #0
 80124bc:	2200      	movs	r2, #0
 80124be:	2100      	movs	r1, #0
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 fcd7 	bl	8012e74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80124c6:	2300      	movs	r3, #0
}
 80124c8:	4618      	mov	r0, r3
 80124ca:	3708      	adds	r7, #8
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}

080124d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80124d4:	2200      	movs	r2, #0
 80124d6:	4912      	ldr	r1, [pc, #72]	; (8012520 <MX_USB_DEVICE_Init+0x50>)
 80124d8:	4812      	ldr	r0, [pc, #72]	; (8012524 <MX_USB_DEVICE_Init+0x54>)
 80124da:	f7fe fd07 	bl	8010eec <USBD_Init>
 80124de:	4603      	mov	r3, r0
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d001      	beq.n	80124e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80124e4:	f7ef fd5a 	bl	8001f9c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80124e8:	490f      	ldr	r1, [pc, #60]	; (8012528 <MX_USB_DEVICE_Init+0x58>)
 80124ea:	480e      	ldr	r0, [pc, #56]	; (8012524 <MX_USB_DEVICE_Init+0x54>)
 80124ec:	f7fe fd2e 	bl	8010f4c <USBD_RegisterClass>
 80124f0:	4603      	mov	r3, r0
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d001      	beq.n	80124fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80124f6:	f7ef fd51 	bl	8001f9c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80124fa:	490c      	ldr	r1, [pc, #48]	; (801252c <MX_USB_DEVICE_Init+0x5c>)
 80124fc:	4809      	ldr	r0, [pc, #36]	; (8012524 <MX_USB_DEVICE_Init+0x54>)
 80124fe:	f7fe fc1f 	bl	8010d40 <USBD_CDC_RegisterInterface>
 8012502:	4603      	mov	r3, r0
 8012504:	2b00      	cmp	r3, #0
 8012506:	d001      	beq.n	801250c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012508:	f7ef fd48 	bl	8001f9c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801250c:	4805      	ldr	r0, [pc, #20]	; (8012524 <MX_USB_DEVICE_Init+0x54>)
 801250e:	f7fe fd53 	bl	8010fb8 <USBD_Start>
 8012512:	4603      	mov	r3, r0
 8012514:	2b00      	cmp	r3, #0
 8012516:	d001      	beq.n	801251c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012518:	f7ef fd40 	bl	8001f9c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801251c:	bf00      	nop
 801251e:	bd80      	pop	{r7, pc}
 8012520:	200003c8 	.word	0x200003c8
 8012524:	200013d4 	.word	0x200013d4
 8012528:	20000334 	.word	0x20000334
 801252c:	200003b4 	.word	0x200003b4

08012530 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8012534:	2200      	movs	r2, #0
 8012536:	4905      	ldr	r1, [pc, #20]	; (801254c <CDC_Init_FS+0x1c>)
 8012538:	4805      	ldr	r0, [pc, #20]	; (8012550 <CDC_Init_FS+0x20>)
 801253a:	f7fe fc1b 	bl	8010d74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801253e:	4905      	ldr	r1, [pc, #20]	; (8012554 <CDC_Init_FS+0x24>)
 8012540:	4803      	ldr	r0, [pc, #12]	; (8012550 <CDC_Init_FS+0x20>)
 8012542:	f7fe fc39 	bl	8010db8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012546:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8012548:	4618      	mov	r0, r3
 801254a:	bd80      	pop	{r7, pc}
 801254c:	20001eb0 	.word	0x20001eb0
 8012550:	200013d4 	.word	0x200013d4
 8012554:	200016b0 	.word	0x200016b0

08012558 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8012558:	b480      	push	{r7}
 801255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801255c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801255e:	4618      	mov	r0, r3
 8012560:	46bd      	mov	sp, r7
 8012562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012566:	4770      	bx	lr

08012568 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012568:	b480      	push	{r7}
 801256a:	b083      	sub	sp, #12
 801256c:	af00      	add	r7, sp, #0
 801256e:	4603      	mov	r3, r0
 8012570:	6039      	str	r1, [r7, #0]
 8012572:	71fb      	strb	r3, [r7, #7]
 8012574:	4613      	mov	r3, r2
 8012576:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8012578:	79fb      	ldrb	r3, [r7, #7]
 801257a:	2b23      	cmp	r3, #35	; 0x23
 801257c:	d84a      	bhi.n	8012614 <CDC_Control_FS+0xac>
 801257e:	a201      	add	r2, pc, #4	; (adr r2, 8012584 <CDC_Control_FS+0x1c>)
 8012580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012584:	08012615 	.word	0x08012615
 8012588:	08012615 	.word	0x08012615
 801258c:	08012615 	.word	0x08012615
 8012590:	08012615 	.word	0x08012615
 8012594:	08012615 	.word	0x08012615
 8012598:	08012615 	.word	0x08012615
 801259c:	08012615 	.word	0x08012615
 80125a0:	08012615 	.word	0x08012615
 80125a4:	08012615 	.word	0x08012615
 80125a8:	08012615 	.word	0x08012615
 80125ac:	08012615 	.word	0x08012615
 80125b0:	08012615 	.word	0x08012615
 80125b4:	08012615 	.word	0x08012615
 80125b8:	08012615 	.word	0x08012615
 80125bc:	08012615 	.word	0x08012615
 80125c0:	08012615 	.word	0x08012615
 80125c4:	08012615 	.word	0x08012615
 80125c8:	08012615 	.word	0x08012615
 80125cc:	08012615 	.word	0x08012615
 80125d0:	08012615 	.word	0x08012615
 80125d4:	08012615 	.word	0x08012615
 80125d8:	08012615 	.word	0x08012615
 80125dc:	08012615 	.word	0x08012615
 80125e0:	08012615 	.word	0x08012615
 80125e4:	08012615 	.word	0x08012615
 80125e8:	08012615 	.word	0x08012615
 80125ec:	08012615 	.word	0x08012615
 80125f0:	08012615 	.word	0x08012615
 80125f4:	08012615 	.word	0x08012615
 80125f8:	08012615 	.word	0x08012615
 80125fc:	08012615 	.word	0x08012615
 8012600:	08012615 	.word	0x08012615
 8012604:	08012615 	.word	0x08012615
 8012608:	08012615 	.word	0x08012615
 801260c:	08012615 	.word	0x08012615
 8012610:	08012615 	.word	0x08012615
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012614:	bf00      	nop
  }

  return (USBD_OK);
 8012616:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012618:	4618      	mov	r0, r3
 801261a:	370c      	adds	r7, #12
 801261c:	46bd      	mov	sp, r7
 801261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012622:	4770      	bx	lr

08012624 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
 801262c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801262e:	6879      	ldr	r1, [r7, #4]
 8012630:	4813      	ldr	r0, [pc, #76]	; (8012680 <CDC_Receive_FS+0x5c>)
 8012632:	f7fe fbc1 	bl	8010db8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8012636:	4812      	ldr	r0, [pc, #72]	; (8012680 <CDC_Receive_FS+0x5c>)
 8012638:	f7fe fc22 	bl	8010e80 <USBD_CDC_ReceivePacket>
  memset(ResBuffer, '\0', 64); //Clear the buffer
 801263c:	2240      	movs	r2, #64	; 0x40
 801263e:	2100      	movs	r1, #0
 8012640:	4810      	ldr	r0, [pc, #64]	; (8012684 <CDC_Receive_FS+0x60>)
 8012642:	f000 fcc7 	bl	8012fd4 <memset>
  uint8_t len = (uint8_t)*Len;
 8012646:	683b      	ldr	r3, [r7, #0]
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	73fb      	strb	r3, [r7, #15]
  memcpy(ResBuffer, Buf, len); //Copy the data to buffer
 801264c:	7bfb      	ldrb	r3, [r7, #15]
 801264e:	461a      	mov	r2, r3
 8012650:	6879      	ldr	r1, [r7, #4]
 8012652:	480c      	ldr	r0, [pc, #48]	; (8012684 <CDC_Receive_FS+0x60>)
 8012654:	f000 fcb0 	bl	8012fb8 <memcpy>
  memset(Buf, '\0', len); //Clear Buf
 8012658:	7bfb      	ldrb	r3, [r7, #15]
 801265a:	461a      	mov	r2, r3
 801265c:	2100      	movs	r1, #0
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f000 fcb8 	bl	8012fd4 <memset>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8012664:	2201      	movs	r2, #1
 8012666:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801266a:	4807      	ldr	r0, [pc, #28]	; (8012688 <CDC_Receive_FS+0x64>)
 801266c:	f7f0 ffb8 	bl	80035e0 <HAL_GPIO_WritePin>
  ReceiveFlag = 1;
 8012670:	4b06      	ldr	r3, [pc, #24]	; (801268c <CDC_Receive_FS+0x68>)
 8012672:	2201      	movs	r2, #1
 8012674:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 8012676:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8012678:	4618      	mov	r0, r3
 801267a:	3710      	adds	r7, #16
 801267c:	46bd      	mov	sp, r7
 801267e:	bd80      	pop	{r7, pc}
 8012680:	200013d4 	.word	0x200013d4
 8012684:	2000089c 	.word	0x2000089c
 8012688:	40020800 	.word	0x40020800
 801268c:	200008dc 	.word	0x200008dc

08012690 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	460b      	mov	r3, r1
 801269a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801269c:	2300      	movs	r3, #0
 801269e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80126a0:	4b0d      	ldr	r3, [pc, #52]	; (80126d8 <CDC_Transmit_FS+0x48>)
 80126a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80126a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d001      	beq.n	80126b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80126b2:	2301      	movs	r3, #1
 80126b4:	e00b      	b.n	80126ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80126b6:	887b      	ldrh	r3, [r7, #2]
 80126b8:	461a      	mov	r2, r3
 80126ba:	6879      	ldr	r1, [r7, #4]
 80126bc:	4806      	ldr	r0, [pc, #24]	; (80126d8 <CDC_Transmit_FS+0x48>)
 80126be:	f7fe fb59 	bl	8010d74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80126c2:	4805      	ldr	r0, [pc, #20]	; (80126d8 <CDC_Transmit_FS+0x48>)
 80126c4:	f7fe fb96 	bl	8010df4 <USBD_CDC_TransmitPacket>
 80126c8:	4603      	mov	r3, r0
 80126ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80126cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3710      	adds	r7, #16
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}
 80126d6:	bf00      	nop
 80126d8:	200013d4 	.word	0x200013d4

080126dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80126dc:	b480      	push	{r7}
 80126de:	b087      	sub	sp, #28
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	60f8      	str	r0, [r7, #12]
 80126e4:	60b9      	str	r1, [r7, #8]
 80126e6:	4613      	mov	r3, r2
 80126e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80126ea:	2300      	movs	r3, #0
 80126ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80126ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80126f2:	4618      	mov	r0, r3
 80126f4:	371c      	adds	r7, #28
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr
	...

08012700 <CDC_getReady>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
uint8_t CDC_getReady(void)
{
 8012700:	b480      	push	{r7}
 8012702:	b083      	sub	sp, #12
 8012704:	af00      	add	r7, sp, #0
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *) hUsbDeviceFS.pClassData;
 8012706:	4b09      	ldr	r3, [pc, #36]	; (801272c <CDC_getReady+0x2c>)
 8012708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801270c:	607b      	str	r3, [r7, #4]
	if(hcdc -> TxState != 0)
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8012714:	2b00      	cmp	r3, #0
 8012716:	d001      	beq.n	801271c <CDC_getReady+0x1c>
	{
		return USBD_BUSY;
 8012718:	2301      	movs	r3, #1
 801271a:	e000      	b.n	801271e <CDC_getReady+0x1e>
	}
	else
	{
		return USBD_OK;
 801271c:	2300      	movs	r3, #0
	}
}
 801271e:	4618      	mov	r0, r3
 8012720:	370c      	adds	r7, #12
 8012722:	46bd      	mov	sp, r7
 8012724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	200013d4 	.word	0x200013d4

08012730 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012730:	b480      	push	{r7}
 8012732:	b083      	sub	sp, #12
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	6039      	str	r1, [r7, #0]
 801273a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	2212      	movs	r2, #18
 8012740:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012742:	4b03      	ldr	r3, [pc, #12]	; (8012750 <USBD_FS_DeviceDescriptor+0x20>)
}
 8012744:	4618      	mov	r0, r3
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr
 8012750:	200003e4 	.word	0x200003e4

08012754 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012754:	b480      	push	{r7}
 8012756:	b083      	sub	sp, #12
 8012758:	af00      	add	r7, sp, #0
 801275a:	4603      	mov	r3, r0
 801275c:	6039      	str	r1, [r7, #0]
 801275e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012760:	683b      	ldr	r3, [r7, #0]
 8012762:	2204      	movs	r2, #4
 8012764:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012766:	4b03      	ldr	r3, [pc, #12]	; (8012774 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012768:	4618      	mov	r0, r3
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	200003f8 	.word	0x200003f8

08012778 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012778:	b580      	push	{r7, lr}
 801277a:	b082      	sub	sp, #8
 801277c:	af00      	add	r7, sp, #0
 801277e:	4603      	mov	r3, r0
 8012780:	6039      	str	r1, [r7, #0]
 8012782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012784:	79fb      	ldrb	r3, [r7, #7]
 8012786:	2b00      	cmp	r3, #0
 8012788:	d105      	bne.n	8012796 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801278a:	683a      	ldr	r2, [r7, #0]
 801278c:	4907      	ldr	r1, [pc, #28]	; (80127ac <USBD_FS_ProductStrDescriptor+0x34>)
 801278e:	4808      	ldr	r0, [pc, #32]	; (80127b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8012790:	f7ff fdbe 	bl	8012310 <USBD_GetString>
 8012794:	e004      	b.n	80127a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012796:	683a      	ldr	r2, [r7, #0]
 8012798:	4904      	ldr	r1, [pc, #16]	; (80127ac <USBD_FS_ProductStrDescriptor+0x34>)
 801279a:	4805      	ldr	r0, [pc, #20]	; (80127b0 <USBD_FS_ProductStrDescriptor+0x38>)
 801279c:	f7ff fdb8 	bl	8012310 <USBD_GetString>
  }
  return USBD_StrDesc;
 80127a0:	4b02      	ldr	r3, [pc, #8]	; (80127ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	200026b0 	.word	0x200026b0
 80127b0:	080138e4 	.word	0x080138e4

080127b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b082      	sub	sp, #8
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	4603      	mov	r3, r0
 80127bc:	6039      	str	r1, [r7, #0]
 80127be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80127c0:	683a      	ldr	r2, [r7, #0]
 80127c2:	4904      	ldr	r1, [pc, #16]	; (80127d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80127c4:	4804      	ldr	r0, [pc, #16]	; (80127d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80127c6:	f7ff fda3 	bl	8012310 <USBD_GetString>
  return USBD_StrDesc;
 80127ca:	4b02      	ldr	r3, [pc, #8]	; (80127d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3708      	adds	r7, #8
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	200026b0 	.word	0x200026b0
 80127d8:	080138fc 	.word	0x080138fc

080127dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b082      	sub	sp, #8
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	4603      	mov	r3, r0
 80127e4:	6039      	str	r1, [r7, #0]
 80127e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80127e8:	683b      	ldr	r3, [r7, #0]
 80127ea:	221a      	movs	r2, #26
 80127ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80127ee:	f000 f843 	bl	8012878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80127f2:	4b02      	ldr	r3, [pc, #8]	; (80127fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3708      	adds	r7, #8
 80127f8:	46bd      	mov	sp, r7
 80127fa:	bd80      	pop	{r7, pc}
 80127fc:	200003fc 	.word	0x200003fc

08012800 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b082      	sub	sp, #8
 8012804:	af00      	add	r7, sp, #0
 8012806:	4603      	mov	r3, r0
 8012808:	6039      	str	r1, [r7, #0]
 801280a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801280c:	79fb      	ldrb	r3, [r7, #7]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d105      	bne.n	801281e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012812:	683a      	ldr	r2, [r7, #0]
 8012814:	4907      	ldr	r1, [pc, #28]	; (8012834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012816:	4808      	ldr	r0, [pc, #32]	; (8012838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012818:	f7ff fd7a 	bl	8012310 <USBD_GetString>
 801281c:	e004      	b.n	8012828 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801281e:	683a      	ldr	r2, [r7, #0]
 8012820:	4904      	ldr	r1, [pc, #16]	; (8012834 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012822:	4805      	ldr	r0, [pc, #20]	; (8012838 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012824:	f7ff fd74 	bl	8012310 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012828:	4b02      	ldr	r3, [pc, #8]	; (8012834 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801282a:	4618      	mov	r0, r3
 801282c:	3708      	adds	r7, #8
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	200026b0 	.word	0x200026b0
 8012838:	08013910 	.word	0x08013910

0801283c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
 8012842:	4603      	mov	r3, r0
 8012844:	6039      	str	r1, [r7, #0]
 8012846:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012848:	79fb      	ldrb	r3, [r7, #7]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d105      	bne.n	801285a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	4907      	ldr	r1, [pc, #28]	; (8012870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012852:	4808      	ldr	r0, [pc, #32]	; (8012874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012854:	f7ff fd5c 	bl	8012310 <USBD_GetString>
 8012858:	e004      	b.n	8012864 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	4904      	ldr	r1, [pc, #16]	; (8012870 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801285e:	4805      	ldr	r0, [pc, #20]	; (8012874 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012860:	f7ff fd56 	bl	8012310 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012864:	4b02      	ldr	r3, [pc, #8]	; (8012870 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012866:	4618      	mov	r0, r3
 8012868:	3708      	adds	r7, #8
 801286a:	46bd      	mov	sp, r7
 801286c:	bd80      	pop	{r7, pc}
 801286e:	bf00      	nop
 8012870:	200026b0 	.word	0x200026b0
 8012874:	0801391c 	.word	0x0801391c

08012878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801287e:	4b0f      	ldr	r3, [pc, #60]	; (80128bc <Get_SerialNum+0x44>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012884:	4b0e      	ldr	r3, [pc, #56]	; (80128c0 <Get_SerialNum+0x48>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801288a:	4b0e      	ldr	r3, [pc, #56]	; (80128c4 <Get_SerialNum+0x4c>)
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012890:	68fa      	ldr	r2, [r7, #12]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	4413      	add	r3, r2
 8012896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d009      	beq.n	80128b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801289e:	2208      	movs	r2, #8
 80128a0:	4909      	ldr	r1, [pc, #36]	; (80128c8 <Get_SerialNum+0x50>)
 80128a2:	68f8      	ldr	r0, [r7, #12]
 80128a4:	f000 f814 	bl	80128d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80128a8:	2204      	movs	r2, #4
 80128aa:	4908      	ldr	r1, [pc, #32]	; (80128cc <Get_SerialNum+0x54>)
 80128ac:	68b8      	ldr	r0, [r7, #8]
 80128ae:	f000 f80f 	bl	80128d0 <IntToUnicode>
  }
}
 80128b2:	bf00      	nop
 80128b4:	3710      	adds	r7, #16
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
 80128ba:	bf00      	nop
 80128bc:	1fff7a10 	.word	0x1fff7a10
 80128c0:	1fff7a14 	.word	0x1fff7a14
 80128c4:	1fff7a18 	.word	0x1fff7a18
 80128c8:	200003fe 	.word	0x200003fe
 80128cc:	2000040e 	.word	0x2000040e

080128d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80128d0:	b480      	push	{r7}
 80128d2:	b087      	sub	sp, #28
 80128d4:	af00      	add	r7, sp, #0
 80128d6:	60f8      	str	r0, [r7, #12]
 80128d8:	60b9      	str	r1, [r7, #8]
 80128da:	4613      	mov	r3, r2
 80128dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80128de:	2300      	movs	r3, #0
 80128e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80128e2:	2300      	movs	r3, #0
 80128e4:	75fb      	strb	r3, [r7, #23]
 80128e6:	e027      	b.n	8012938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	0f1b      	lsrs	r3, r3, #28
 80128ec:	2b09      	cmp	r3, #9
 80128ee:	d80b      	bhi.n	8012908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	0f1b      	lsrs	r3, r3, #28
 80128f4:	b2da      	uxtb	r2, r3
 80128f6:	7dfb      	ldrb	r3, [r7, #23]
 80128f8:	005b      	lsls	r3, r3, #1
 80128fa:	4619      	mov	r1, r3
 80128fc:	68bb      	ldr	r3, [r7, #8]
 80128fe:	440b      	add	r3, r1
 8012900:	3230      	adds	r2, #48	; 0x30
 8012902:	b2d2      	uxtb	r2, r2
 8012904:	701a      	strb	r2, [r3, #0]
 8012906:	e00a      	b.n	801291e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012908:	68fb      	ldr	r3, [r7, #12]
 801290a:	0f1b      	lsrs	r3, r3, #28
 801290c:	b2da      	uxtb	r2, r3
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	005b      	lsls	r3, r3, #1
 8012912:	4619      	mov	r1, r3
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	440b      	add	r3, r1
 8012918:	3237      	adds	r2, #55	; 0x37
 801291a:	b2d2      	uxtb	r2, r2
 801291c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	011b      	lsls	r3, r3, #4
 8012922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012924:	7dfb      	ldrb	r3, [r7, #23]
 8012926:	005b      	lsls	r3, r3, #1
 8012928:	3301      	adds	r3, #1
 801292a:	68ba      	ldr	r2, [r7, #8]
 801292c:	4413      	add	r3, r2
 801292e:	2200      	movs	r2, #0
 8012930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012932:	7dfb      	ldrb	r3, [r7, #23]
 8012934:	3301      	adds	r3, #1
 8012936:	75fb      	strb	r3, [r7, #23]
 8012938:	7dfa      	ldrb	r2, [r7, #23]
 801293a:	79fb      	ldrb	r3, [r7, #7]
 801293c:	429a      	cmp	r2, r3
 801293e:	d3d3      	bcc.n	80128e8 <IntToUnicode+0x18>
  }
}
 8012940:	bf00      	nop
 8012942:	bf00      	nop
 8012944:	371c      	adds	r7, #28
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
	...

08012950 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012950:	b580      	push	{r7, lr}
 8012952:	b08a      	sub	sp, #40	; 0x28
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012958:	f107 0314 	add.w	r3, r7, #20
 801295c:	2200      	movs	r2, #0
 801295e:	601a      	str	r2, [r3, #0]
 8012960:	605a      	str	r2, [r3, #4]
 8012962:	609a      	str	r2, [r3, #8]
 8012964:	60da      	str	r2, [r3, #12]
 8012966:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012970:	d13a      	bne.n	80129e8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012972:	2300      	movs	r3, #0
 8012974:	613b      	str	r3, [r7, #16]
 8012976:	4b1e      	ldr	r3, [pc, #120]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 8012978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801297a:	4a1d      	ldr	r2, [pc, #116]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 801297c:	f043 0301 	orr.w	r3, r3, #1
 8012980:	6313      	str	r3, [r2, #48]	; 0x30
 8012982:	4b1b      	ldr	r3, [pc, #108]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 8012984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	613b      	str	r3, [r7, #16]
 801298c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801298e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012994:	2302      	movs	r3, #2
 8012996:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012998:	2300      	movs	r3, #0
 801299a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801299c:	2303      	movs	r3, #3
 801299e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80129a0:	230a      	movs	r3, #10
 80129a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129a4:	f107 0314 	add.w	r3, r7, #20
 80129a8:	4619      	mov	r1, r3
 80129aa:	4812      	ldr	r0, [pc, #72]	; (80129f4 <HAL_PCD_MspInit+0xa4>)
 80129ac:	f7f0 fc94 	bl	80032d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80129b0:	4b0f      	ldr	r3, [pc, #60]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 80129b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80129b4:	4a0e      	ldr	r2, [pc, #56]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 80129b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80129ba:	6353      	str	r3, [r2, #52]	; 0x34
 80129bc:	2300      	movs	r3, #0
 80129be:	60fb      	str	r3, [r7, #12]
 80129c0:	4b0b      	ldr	r3, [pc, #44]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 80129c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129c4:	4a0a      	ldr	r2, [pc, #40]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 80129c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80129ca:	6453      	str	r3, [r2, #68]	; 0x44
 80129cc:	4b08      	ldr	r3, [pc, #32]	; (80129f0 <HAL_PCD_MspInit+0xa0>)
 80129ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80129d4:	60fb      	str	r3, [r7, #12]
 80129d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80129d8:	2200      	movs	r2, #0
 80129da:	2100      	movs	r1, #0
 80129dc:	2043      	movs	r0, #67	; 0x43
 80129de:	f7f0 f836 	bl	8002a4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80129e2:	2043      	movs	r0, #67	; 0x43
 80129e4:	f7f0 f84f 	bl	8002a86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80129e8:	bf00      	nop
 80129ea:	3728      	adds	r7, #40	; 0x28
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}
 80129f0:	40023800 	.word	0x40023800
 80129f4:	40020000 	.word	0x40020000

080129f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	b082      	sub	sp, #8
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	4610      	mov	r0, r2
 8012a10:	f7fe fb1f 	bl	8011052 <USBD_LL_SetupStage>
}
 8012a14:	bf00      	nop
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}

08012a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a1c:	b580      	push	{r7, lr}
 8012a1e:	b082      	sub	sp, #8
 8012a20:	af00      	add	r7, sp, #0
 8012a22:	6078      	str	r0, [r7, #4]
 8012a24:	460b      	mov	r3, r1
 8012a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012a2e:	78fa      	ldrb	r2, [r7, #3]
 8012a30:	6879      	ldr	r1, [r7, #4]
 8012a32:	4613      	mov	r3, r2
 8012a34:	00db      	lsls	r3, r3, #3
 8012a36:	4413      	add	r3, r2
 8012a38:	009b      	lsls	r3, r3, #2
 8012a3a:	440b      	add	r3, r1
 8012a3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	78fb      	ldrb	r3, [r7, #3]
 8012a44:	4619      	mov	r1, r3
 8012a46:	f7fe fb59 	bl	80110fc <USBD_LL_DataOutStage>
}
 8012a4a:	bf00      	nop
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}

08012a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a52:	b580      	push	{r7, lr}
 8012a54:	b082      	sub	sp, #8
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
 8012a5a:	460b      	mov	r3, r1
 8012a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8012a64:	78fa      	ldrb	r2, [r7, #3]
 8012a66:	6879      	ldr	r1, [r7, #4]
 8012a68:	4613      	mov	r3, r2
 8012a6a:	00db      	lsls	r3, r3, #3
 8012a6c:	4413      	add	r3, r2
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	440b      	add	r3, r1
 8012a72:	334c      	adds	r3, #76	; 0x4c
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	78fb      	ldrb	r3, [r7, #3]
 8012a78:	4619      	mov	r1, r3
 8012a7a:	f7fe fbf2 	bl	8011262 <USBD_LL_DataInStage>
}
 8012a7e:	bf00      	nop
 8012a80:	3708      	adds	r7, #8
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b082      	sub	sp, #8
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7fe fd26 	bl	80114e6 <USBD_LL_SOF>
}
 8012a9a:	bf00      	nop
 8012a9c:	3708      	adds	r7, #8
 8012a9e:	46bd      	mov	sp, r7
 8012aa0:	bd80      	pop	{r7, pc}

08012aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012aa2:	b580      	push	{r7, lr}
 8012aa4:	b084      	sub	sp, #16
 8012aa6:	af00      	add	r7, sp, #0
 8012aa8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012aaa:	2301      	movs	r3, #1
 8012aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	68db      	ldr	r3, [r3, #12]
 8012ab2:	2b02      	cmp	r3, #2
 8012ab4:	d001      	beq.n	8012aba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012ab6:	f7ef fa71 	bl	8001f9c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ac0:	7bfa      	ldrb	r2, [r7, #15]
 8012ac2:	4611      	mov	r1, r2
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7fe fcd0 	bl	801146a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7fe fc78 	bl	80113c6 <USBD_LL_Reset>
}
 8012ad6:	bf00      	nop
 8012ad8:	3710      	adds	r7, #16
 8012ada:	46bd      	mov	sp, r7
 8012adc:	bd80      	pop	{r7, pc}
	...

08012ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012ae0:	b580      	push	{r7, lr}
 8012ae2:	b082      	sub	sp, #8
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012aee:	4618      	mov	r0, r3
 8012af0:	f7fe fccb 	bl	801148a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012af4:	687b      	ldr	r3, [r7, #4]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	687a      	ldr	r2, [r7, #4]
 8012b00:	6812      	ldr	r2, [r2, #0]
 8012b02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012b06:	f043 0301 	orr.w	r3, r3, #1
 8012b0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	6a1b      	ldr	r3, [r3, #32]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d005      	beq.n	8012b20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012b14:	4b04      	ldr	r3, [pc, #16]	; (8012b28 <HAL_PCD_SuspendCallback+0x48>)
 8012b16:	691b      	ldr	r3, [r3, #16]
 8012b18:	4a03      	ldr	r2, [pc, #12]	; (8012b28 <HAL_PCD_SuspendCallback+0x48>)
 8012b1a:	f043 0306 	orr.w	r3, r3, #6
 8012b1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	e000ed00 	.word	0xe000ed00

08012b2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b2c:	b580      	push	{r7, lr}
 8012b2e:	b082      	sub	sp, #8
 8012b30:	af00      	add	r7, sp, #0
 8012b32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b3a:	4618      	mov	r0, r3
 8012b3c:	f7fe fcbb 	bl	80114b6 <USBD_LL_Resume>
}
 8012b40:	bf00      	nop
 8012b42:	3708      	adds	r7, #8
 8012b44:	46bd      	mov	sp, r7
 8012b46:	bd80      	pop	{r7, pc}

08012b48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b082      	sub	sp, #8
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	460b      	mov	r3, r1
 8012b52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b5a:	78fa      	ldrb	r2, [r7, #3]
 8012b5c:	4611      	mov	r1, r2
 8012b5e:	4618      	mov	r0, r3
 8012b60:	f7fe fd13 	bl	801158a <USBD_LL_IsoOUTIncomplete>
}
 8012b64:	bf00      	nop
 8012b66:	3708      	adds	r7, #8
 8012b68:	46bd      	mov	sp, r7
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	b082      	sub	sp, #8
 8012b70:	af00      	add	r7, sp, #0
 8012b72:	6078      	str	r0, [r7, #4]
 8012b74:	460b      	mov	r3, r1
 8012b76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b7e:	78fa      	ldrb	r2, [r7, #3]
 8012b80:	4611      	mov	r1, r2
 8012b82:	4618      	mov	r0, r3
 8012b84:	f7fe fccf 	bl	8011526 <USBD_LL_IsoINIncomplete>
}
 8012b88:	bf00      	nop
 8012b8a:	3708      	adds	r7, #8
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}

08012b90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	b082      	sub	sp, #8
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7fe fd25 	bl	80115ee <USBD_LL_DevConnected>
}
 8012ba4:	bf00      	nop
 8012ba6:	3708      	adds	r7, #8
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	bd80      	pop	{r7, pc}

08012bac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b082      	sub	sp, #8
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8012bba:	4618      	mov	r0, r3
 8012bbc:	f7fe fd22 	bl	8011604 <USBD_LL_DevDisconnected>
}
 8012bc0:	bf00      	nop
 8012bc2:	3708      	adds	r7, #8
 8012bc4:	46bd      	mov	sp, r7
 8012bc6:	bd80      	pop	{r7, pc}

08012bc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b082      	sub	sp, #8
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	781b      	ldrb	r3, [r3, #0]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d13c      	bne.n	8012c52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8012bd8:	4a20      	ldr	r2, [pc, #128]	; (8012c5c <USBD_LL_Init+0x94>)
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	4a1e      	ldr	r2, [pc, #120]	; (8012c5c <USBD_LL_Init+0x94>)
 8012be4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012be8:	4b1c      	ldr	r3, [pc, #112]	; (8012c5c <USBD_LL_Init+0x94>)
 8012bea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012bee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8012bf0:	4b1a      	ldr	r3, [pc, #104]	; (8012c5c <USBD_LL_Init+0x94>)
 8012bf2:	2204      	movs	r2, #4
 8012bf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8012bf6:	4b19      	ldr	r3, [pc, #100]	; (8012c5c <USBD_LL_Init+0x94>)
 8012bf8:	2202      	movs	r2, #2
 8012bfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012bfc:	4b17      	ldr	r3, [pc, #92]	; (8012c5c <USBD_LL_Init+0x94>)
 8012bfe:	2200      	movs	r2, #0
 8012c00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8012c02:	4b16      	ldr	r3, [pc, #88]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c04:	2202      	movs	r2, #2
 8012c06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012c08:	4b14      	ldr	r3, [pc, #80]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8012c0e:	4b13      	ldr	r3, [pc, #76]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c10:	2200      	movs	r2, #0
 8012c12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8012c14:	4b11      	ldr	r3, [pc, #68]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c16:	2200      	movs	r2, #0
 8012c18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8012c1a:	4b10      	ldr	r3, [pc, #64]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8012c20:	4b0e      	ldr	r3, [pc, #56]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c22:	2200      	movs	r2, #0
 8012c24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8012c26:	480d      	ldr	r0, [pc, #52]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c28:	f7f2 fac1 	bl	80051ae <HAL_PCD_Init>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d001      	beq.n	8012c36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8012c32:	f7ef f9b3 	bl	8001f9c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8012c36:	2180      	movs	r1, #128	; 0x80
 8012c38:	4808      	ldr	r0, [pc, #32]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c3a:	f7f3 fd18 	bl	800666e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8012c3e:	2240      	movs	r2, #64	; 0x40
 8012c40:	2100      	movs	r1, #0
 8012c42:	4806      	ldr	r0, [pc, #24]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c44:	f7f3 fccc 	bl	80065e0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8012c48:	2280      	movs	r2, #128	; 0x80
 8012c4a:	2101      	movs	r1, #1
 8012c4c:	4803      	ldr	r0, [pc, #12]	; (8012c5c <USBD_LL_Init+0x94>)
 8012c4e:	f7f3 fcc7 	bl	80065e0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8012c52:	2300      	movs	r3, #0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}
 8012c5c:	200028b0 	.word	0x200028b0

08012c60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012c68:	2300      	movs	r3, #0
 8012c6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012c76:	4618      	mov	r0, r3
 8012c78:	f7f2 fbb6 	bl	80053e8 <HAL_PCD_Start>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012c80:	7bfb      	ldrb	r3, [r7, #15]
 8012c82:	4618      	mov	r0, r3
 8012c84:	f000 f942 	bl	8012f0c <USBD_Get_USB_Status>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012c8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3710      	adds	r7, #16
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}

08012c96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012c96:	b580      	push	{r7, lr}
 8012c98:	b084      	sub	sp, #16
 8012c9a:	af00      	add	r7, sp, #0
 8012c9c:	6078      	str	r0, [r7, #4]
 8012c9e:	4608      	mov	r0, r1
 8012ca0:	4611      	mov	r1, r2
 8012ca2:	461a      	mov	r2, r3
 8012ca4:	4603      	mov	r3, r0
 8012ca6:	70fb      	strb	r3, [r7, #3]
 8012ca8:	460b      	mov	r3, r1
 8012caa:	70bb      	strb	r3, [r7, #2]
 8012cac:	4613      	mov	r3, r2
 8012cae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cb0:	2300      	movs	r3, #0
 8012cb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cb4:	2300      	movs	r3, #0
 8012cb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012cbe:	78bb      	ldrb	r3, [r7, #2]
 8012cc0:	883a      	ldrh	r2, [r7, #0]
 8012cc2:	78f9      	ldrb	r1, [r7, #3]
 8012cc4:	f7f3 f887 	bl	8005dd6 <HAL_PCD_EP_Open>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ccc:	7bfb      	ldrb	r3, [r7, #15]
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f000 f91c 	bl	8012f0c <USBD_Get_USB_Status>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012cd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3710      	adds	r7, #16
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}

08012ce2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ce2:	b580      	push	{r7, lr}
 8012ce4:	b084      	sub	sp, #16
 8012ce6:	af00      	add	r7, sp, #0
 8012ce8:	6078      	str	r0, [r7, #4]
 8012cea:	460b      	mov	r3, r1
 8012cec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012cf2:	2300      	movs	r3, #0
 8012cf4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012cfc:	78fa      	ldrb	r2, [r7, #3]
 8012cfe:	4611      	mov	r1, r2
 8012d00:	4618      	mov	r0, r3
 8012d02:	f7f3 f8d0 	bl	8005ea6 <HAL_PCD_EP_Close>
 8012d06:	4603      	mov	r3, r0
 8012d08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d0a:	7bfb      	ldrb	r3, [r7, #15]
 8012d0c:	4618      	mov	r0, r3
 8012d0e:	f000 f8fd 	bl	8012f0c <USBD_Get_USB_Status>
 8012d12:	4603      	mov	r3, r0
 8012d14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d16:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d18:	4618      	mov	r0, r3
 8012d1a:	3710      	adds	r7, #16
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	bd80      	pop	{r7, pc}

08012d20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d20:	b580      	push	{r7, lr}
 8012d22:	b084      	sub	sp, #16
 8012d24:	af00      	add	r7, sp, #0
 8012d26:	6078      	str	r0, [r7, #4]
 8012d28:	460b      	mov	r3, r1
 8012d2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d2c:	2300      	movs	r3, #0
 8012d2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d30:	2300      	movs	r3, #0
 8012d32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012d3a:	78fa      	ldrb	r2, [r7, #3]
 8012d3c:	4611      	mov	r1, r2
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7f3 f9a8 	bl	8006094 <HAL_PCD_EP_SetStall>
 8012d44:	4603      	mov	r3, r0
 8012d46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d48:	7bfb      	ldrb	r3, [r7, #15]
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	f000 f8de 	bl	8012f0c <USBD_Get_USB_Status>
 8012d50:	4603      	mov	r3, r0
 8012d52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d54:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b084      	sub	sp, #16
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
 8012d66:	460b      	mov	r3, r1
 8012d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012d78:	78fa      	ldrb	r2, [r7, #3]
 8012d7a:	4611      	mov	r1, r2
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7f3 f9ed 	bl	800615c <HAL_PCD_EP_ClrStall>
 8012d82:	4603      	mov	r3, r0
 8012d84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012d86:	7bfb      	ldrb	r3, [r7, #15]
 8012d88:	4618      	mov	r0, r3
 8012d8a:	f000 f8bf 	bl	8012f0c <USBD_Get_USB_Status>
 8012d8e:	4603      	mov	r3, r0
 8012d90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012d92:	7bbb      	ldrb	r3, [r7, #14]
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3710      	adds	r7, #16
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}

08012d9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b085      	sub	sp, #20
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	6078      	str	r0, [r7, #4]
 8012da4:	460b      	mov	r3, r1
 8012da6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012dae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012db0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	da0b      	bge.n	8012dd0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012db8:	78fb      	ldrb	r3, [r7, #3]
 8012dba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012dbe:	68f9      	ldr	r1, [r7, #12]
 8012dc0:	4613      	mov	r3, r2
 8012dc2:	00db      	lsls	r3, r3, #3
 8012dc4:	4413      	add	r3, r2
 8012dc6:	009b      	lsls	r3, r3, #2
 8012dc8:	440b      	add	r3, r1
 8012dca:	333e      	adds	r3, #62	; 0x3e
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	e00b      	b.n	8012de8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012dd0:	78fb      	ldrb	r3, [r7, #3]
 8012dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012dd6:	68f9      	ldr	r1, [r7, #12]
 8012dd8:	4613      	mov	r3, r2
 8012dda:	00db      	lsls	r3, r3, #3
 8012ddc:	4413      	add	r3, r2
 8012dde:	009b      	lsls	r3, r3, #2
 8012de0:	440b      	add	r3, r1
 8012de2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8012de6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3714      	adds	r7, #20
 8012dec:	46bd      	mov	sp, r7
 8012dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df2:	4770      	bx	lr

08012df4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b084      	sub	sp, #16
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	460b      	mov	r3, r1
 8012dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e00:	2300      	movs	r3, #0
 8012e02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e04:	2300      	movs	r3, #0
 8012e06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012e0e:	78fa      	ldrb	r2, [r7, #3]
 8012e10:	4611      	mov	r1, r2
 8012e12:	4618      	mov	r0, r3
 8012e14:	f7f2 ffba 	bl	8005d8c <HAL_PCD_SetAddress>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e1c:	7bfb      	ldrb	r3, [r7, #15]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f000 f874 	bl	8012f0c <USBD_Get_USB_Status>
 8012e24:	4603      	mov	r3, r0
 8012e26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e28:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3710      	adds	r7, #16
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	bd80      	pop	{r7, pc}

08012e32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e32:	b580      	push	{r7, lr}
 8012e34:	b086      	sub	sp, #24
 8012e36:	af00      	add	r7, sp, #0
 8012e38:	60f8      	str	r0, [r7, #12]
 8012e3a:	607a      	str	r2, [r7, #4]
 8012e3c:	603b      	str	r3, [r7, #0]
 8012e3e:	460b      	mov	r3, r1
 8012e40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e42:	2300      	movs	r3, #0
 8012e44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e46:	2300      	movs	r3, #0
 8012e48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e50:	7af9      	ldrb	r1, [r7, #11]
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	687a      	ldr	r2, [r7, #4]
 8012e56:	f7f3 f8d3 	bl	8006000 <HAL_PCD_EP_Transmit>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012e5e:	7dfb      	ldrb	r3, [r7, #23]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f000 f853 	bl	8012f0c <USBD_Get_USB_Status>
 8012e66:	4603      	mov	r3, r0
 8012e68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012e6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3718      	adds	r7, #24
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}

08012e74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b086      	sub	sp, #24
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	60f8      	str	r0, [r7, #12]
 8012e7c:	607a      	str	r2, [r7, #4]
 8012e7e:	603b      	str	r3, [r7, #0]
 8012e80:	460b      	mov	r3, r1
 8012e82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012e92:	7af9      	ldrb	r1, [r7, #11]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	687a      	ldr	r2, [r7, #4]
 8012e98:	f7f3 f84f 	bl	8005f3a <HAL_PCD_EP_Receive>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012ea0:	7dfb      	ldrb	r3, [r7, #23]
 8012ea2:	4618      	mov	r0, r3
 8012ea4:	f000 f832 	bl	8012f0c <USBD_Get_USB_Status>
 8012ea8:	4603      	mov	r3, r0
 8012eaa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012eac:	7dbb      	ldrb	r3, [r7, #22]
}
 8012eae:	4618      	mov	r0, r3
 8012eb0:	3718      	adds	r7, #24
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}

08012eb6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012eb6:	b580      	push	{r7, lr}
 8012eb8:	b082      	sub	sp, #8
 8012eba:	af00      	add	r7, sp, #0
 8012ebc:	6078      	str	r0, [r7, #4]
 8012ebe:	460b      	mov	r3, r1
 8012ec0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012ec8:	78fa      	ldrb	r2, [r7, #3]
 8012eca:	4611      	mov	r1, r2
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f7f3 f87f 	bl	8005fd0 <HAL_PCD_EP_GetRxCount>
 8012ed2:	4603      	mov	r3, r0
}
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	3708      	adds	r7, #8
 8012ed8:	46bd      	mov	sp, r7
 8012eda:	bd80      	pop	{r7, pc}

08012edc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012edc:	b480      	push	{r7}
 8012ede:	b083      	sub	sp, #12
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012ee4:	4b03      	ldr	r3, [pc, #12]	; (8012ef4 <USBD_static_malloc+0x18>)
}
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	370c      	adds	r7, #12
 8012eea:	46bd      	mov	sp, r7
 8012eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef0:	4770      	bx	lr
 8012ef2:	bf00      	nop
 8012ef4:	20002dbc 	.word	0x20002dbc

08012ef8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b083      	sub	sp, #12
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]

}
 8012f00:	bf00      	nop
 8012f02:	370c      	adds	r7, #12
 8012f04:	46bd      	mov	sp, r7
 8012f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f0a:	4770      	bx	lr

08012f0c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012f0c:	b480      	push	{r7}
 8012f0e:	b085      	sub	sp, #20
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	4603      	mov	r3, r0
 8012f14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f16:	2300      	movs	r3, #0
 8012f18:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012f1a:	79fb      	ldrb	r3, [r7, #7]
 8012f1c:	2b03      	cmp	r3, #3
 8012f1e:	d817      	bhi.n	8012f50 <USBD_Get_USB_Status+0x44>
 8012f20:	a201      	add	r2, pc, #4	; (adr r2, 8012f28 <USBD_Get_USB_Status+0x1c>)
 8012f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f26:	bf00      	nop
 8012f28:	08012f39 	.word	0x08012f39
 8012f2c:	08012f3f 	.word	0x08012f3f
 8012f30:	08012f45 	.word	0x08012f45
 8012f34:	08012f4b 	.word	0x08012f4b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f3c:	e00b      	b.n	8012f56 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012f3e:	2303      	movs	r3, #3
 8012f40:	73fb      	strb	r3, [r7, #15]
    break;
 8012f42:	e008      	b.n	8012f56 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012f44:	2301      	movs	r3, #1
 8012f46:	73fb      	strb	r3, [r7, #15]
    break;
 8012f48:	e005      	b.n	8012f56 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012f4a:	2303      	movs	r3, #3
 8012f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f4e:	e002      	b.n	8012f56 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8012f50:	2303      	movs	r3, #3
 8012f52:	73fb      	strb	r3, [r7, #15]
    break;
 8012f54:	bf00      	nop
  }
  return usb_status;
 8012f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3714      	adds	r7, #20
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f62:	4770      	bx	lr

08012f64 <__errno>:
 8012f64:	4b01      	ldr	r3, [pc, #4]	; (8012f6c <__errno+0x8>)
 8012f66:	6818      	ldr	r0, [r3, #0]
 8012f68:	4770      	bx	lr
 8012f6a:	bf00      	nop
 8012f6c:	20000418 	.word	0x20000418

08012f70 <__libc_init_array>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	4d0d      	ldr	r5, [pc, #52]	; (8012fa8 <__libc_init_array+0x38>)
 8012f74:	4c0d      	ldr	r4, [pc, #52]	; (8012fac <__libc_init_array+0x3c>)
 8012f76:	1b64      	subs	r4, r4, r5
 8012f78:	10a4      	asrs	r4, r4, #2
 8012f7a:	2600      	movs	r6, #0
 8012f7c:	42a6      	cmp	r6, r4
 8012f7e:	d109      	bne.n	8012f94 <__libc_init_array+0x24>
 8012f80:	4d0b      	ldr	r5, [pc, #44]	; (8012fb0 <__libc_init_array+0x40>)
 8012f82:	4c0c      	ldr	r4, [pc, #48]	; (8012fb4 <__libc_init_array+0x44>)
 8012f84:	f000 fc96 	bl	80138b4 <_init>
 8012f88:	1b64      	subs	r4, r4, r5
 8012f8a:	10a4      	asrs	r4, r4, #2
 8012f8c:	2600      	movs	r6, #0
 8012f8e:	42a6      	cmp	r6, r4
 8012f90:	d105      	bne.n	8012f9e <__libc_init_array+0x2e>
 8012f92:	bd70      	pop	{r4, r5, r6, pc}
 8012f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8012f98:	4798      	blx	r3
 8012f9a:	3601      	adds	r6, #1
 8012f9c:	e7ee      	b.n	8012f7c <__libc_init_array+0xc>
 8012f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012fa2:	4798      	blx	r3
 8012fa4:	3601      	adds	r6, #1
 8012fa6:	e7f2      	b.n	8012f8e <__libc_init_array+0x1e>
 8012fa8:	08013988 	.word	0x08013988
 8012fac:	08013988 	.word	0x08013988
 8012fb0:	08013988 	.word	0x08013988
 8012fb4:	0801398c 	.word	0x0801398c

08012fb8 <memcpy>:
 8012fb8:	440a      	add	r2, r1
 8012fba:	4291      	cmp	r1, r2
 8012fbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012fc0:	d100      	bne.n	8012fc4 <memcpy+0xc>
 8012fc2:	4770      	bx	lr
 8012fc4:	b510      	push	{r4, lr}
 8012fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012fce:	4291      	cmp	r1, r2
 8012fd0:	d1f9      	bne.n	8012fc6 <memcpy+0xe>
 8012fd2:	bd10      	pop	{r4, pc}

08012fd4 <memset>:
 8012fd4:	4402      	add	r2, r0
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	4293      	cmp	r3, r2
 8012fda:	d100      	bne.n	8012fde <memset+0xa>
 8012fdc:	4770      	bx	lr
 8012fde:	f803 1b01 	strb.w	r1, [r3], #1
 8012fe2:	e7f9      	b.n	8012fd8 <memset+0x4>

08012fe4 <siprintf>:
 8012fe4:	b40e      	push	{r1, r2, r3}
 8012fe6:	b500      	push	{lr}
 8012fe8:	b09c      	sub	sp, #112	; 0x70
 8012fea:	ab1d      	add	r3, sp, #116	; 0x74
 8012fec:	9002      	str	r0, [sp, #8]
 8012fee:	9006      	str	r0, [sp, #24]
 8012ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ff4:	4809      	ldr	r0, [pc, #36]	; (801301c <siprintf+0x38>)
 8012ff6:	9107      	str	r1, [sp, #28]
 8012ff8:	9104      	str	r1, [sp, #16]
 8012ffa:	4909      	ldr	r1, [pc, #36]	; (8013020 <siprintf+0x3c>)
 8012ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8013000:	9105      	str	r1, [sp, #20]
 8013002:	6800      	ldr	r0, [r0, #0]
 8013004:	9301      	str	r3, [sp, #4]
 8013006:	a902      	add	r1, sp, #8
 8013008:	f000 f870 	bl	80130ec <_svfiprintf_r>
 801300c:	9b02      	ldr	r3, [sp, #8]
 801300e:	2200      	movs	r2, #0
 8013010:	701a      	strb	r2, [r3, #0]
 8013012:	b01c      	add	sp, #112	; 0x70
 8013014:	f85d eb04 	ldr.w	lr, [sp], #4
 8013018:	b003      	add	sp, #12
 801301a:	4770      	bx	lr
 801301c:	20000418 	.word	0x20000418
 8013020:	ffff0208 	.word	0xffff0208

08013024 <strcpy>:
 8013024:	4603      	mov	r3, r0
 8013026:	f811 2b01 	ldrb.w	r2, [r1], #1
 801302a:	f803 2b01 	strb.w	r2, [r3], #1
 801302e:	2a00      	cmp	r2, #0
 8013030:	d1f9      	bne.n	8013026 <strcpy+0x2>
 8013032:	4770      	bx	lr

08013034 <__ssputs_r>:
 8013034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013038:	688e      	ldr	r6, [r1, #8]
 801303a:	429e      	cmp	r6, r3
 801303c:	4682      	mov	sl, r0
 801303e:	460c      	mov	r4, r1
 8013040:	4690      	mov	r8, r2
 8013042:	461f      	mov	r7, r3
 8013044:	d838      	bhi.n	80130b8 <__ssputs_r+0x84>
 8013046:	898a      	ldrh	r2, [r1, #12]
 8013048:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801304c:	d032      	beq.n	80130b4 <__ssputs_r+0x80>
 801304e:	6825      	ldr	r5, [r4, #0]
 8013050:	6909      	ldr	r1, [r1, #16]
 8013052:	eba5 0901 	sub.w	r9, r5, r1
 8013056:	6965      	ldr	r5, [r4, #20]
 8013058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801305c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013060:	3301      	adds	r3, #1
 8013062:	444b      	add	r3, r9
 8013064:	106d      	asrs	r5, r5, #1
 8013066:	429d      	cmp	r5, r3
 8013068:	bf38      	it	cc
 801306a:	461d      	movcc	r5, r3
 801306c:	0553      	lsls	r3, r2, #21
 801306e:	d531      	bpl.n	80130d4 <__ssputs_r+0xa0>
 8013070:	4629      	mov	r1, r5
 8013072:	f000 fb55 	bl	8013720 <_malloc_r>
 8013076:	4606      	mov	r6, r0
 8013078:	b950      	cbnz	r0, 8013090 <__ssputs_r+0x5c>
 801307a:	230c      	movs	r3, #12
 801307c:	f8ca 3000 	str.w	r3, [sl]
 8013080:	89a3      	ldrh	r3, [r4, #12]
 8013082:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013086:	81a3      	strh	r3, [r4, #12]
 8013088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013090:	6921      	ldr	r1, [r4, #16]
 8013092:	464a      	mov	r2, r9
 8013094:	f7ff ff90 	bl	8012fb8 <memcpy>
 8013098:	89a3      	ldrh	r3, [r4, #12]
 801309a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801309e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130a2:	81a3      	strh	r3, [r4, #12]
 80130a4:	6126      	str	r6, [r4, #16]
 80130a6:	6165      	str	r5, [r4, #20]
 80130a8:	444e      	add	r6, r9
 80130aa:	eba5 0509 	sub.w	r5, r5, r9
 80130ae:	6026      	str	r6, [r4, #0]
 80130b0:	60a5      	str	r5, [r4, #8]
 80130b2:	463e      	mov	r6, r7
 80130b4:	42be      	cmp	r6, r7
 80130b6:	d900      	bls.n	80130ba <__ssputs_r+0x86>
 80130b8:	463e      	mov	r6, r7
 80130ba:	6820      	ldr	r0, [r4, #0]
 80130bc:	4632      	mov	r2, r6
 80130be:	4641      	mov	r1, r8
 80130c0:	f000 faa8 	bl	8013614 <memmove>
 80130c4:	68a3      	ldr	r3, [r4, #8]
 80130c6:	1b9b      	subs	r3, r3, r6
 80130c8:	60a3      	str	r3, [r4, #8]
 80130ca:	6823      	ldr	r3, [r4, #0]
 80130cc:	4433      	add	r3, r6
 80130ce:	6023      	str	r3, [r4, #0]
 80130d0:	2000      	movs	r0, #0
 80130d2:	e7db      	b.n	801308c <__ssputs_r+0x58>
 80130d4:	462a      	mov	r2, r5
 80130d6:	f000 fb97 	bl	8013808 <_realloc_r>
 80130da:	4606      	mov	r6, r0
 80130dc:	2800      	cmp	r0, #0
 80130de:	d1e1      	bne.n	80130a4 <__ssputs_r+0x70>
 80130e0:	6921      	ldr	r1, [r4, #16]
 80130e2:	4650      	mov	r0, sl
 80130e4:	f000 fab0 	bl	8013648 <_free_r>
 80130e8:	e7c7      	b.n	801307a <__ssputs_r+0x46>
	...

080130ec <_svfiprintf_r>:
 80130ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130f0:	4698      	mov	r8, r3
 80130f2:	898b      	ldrh	r3, [r1, #12]
 80130f4:	061b      	lsls	r3, r3, #24
 80130f6:	b09d      	sub	sp, #116	; 0x74
 80130f8:	4607      	mov	r7, r0
 80130fa:	460d      	mov	r5, r1
 80130fc:	4614      	mov	r4, r2
 80130fe:	d50e      	bpl.n	801311e <_svfiprintf_r+0x32>
 8013100:	690b      	ldr	r3, [r1, #16]
 8013102:	b963      	cbnz	r3, 801311e <_svfiprintf_r+0x32>
 8013104:	2140      	movs	r1, #64	; 0x40
 8013106:	f000 fb0b 	bl	8013720 <_malloc_r>
 801310a:	6028      	str	r0, [r5, #0]
 801310c:	6128      	str	r0, [r5, #16]
 801310e:	b920      	cbnz	r0, 801311a <_svfiprintf_r+0x2e>
 8013110:	230c      	movs	r3, #12
 8013112:	603b      	str	r3, [r7, #0]
 8013114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013118:	e0d1      	b.n	80132be <_svfiprintf_r+0x1d2>
 801311a:	2340      	movs	r3, #64	; 0x40
 801311c:	616b      	str	r3, [r5, #20]
 801311e:	2300      	movs	r3, #0
 8013120:	9309      	str	r3, [sp, #36]	; 0x24
 8013122:	2320      	movs	r3, #32
 8013124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013128:	f8cd 800c 	str.w	r8, [sp, #12]
 801312c:	2330      	movs	r3, #48	; 0x30
 801312e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80132d8 <_svfiprintf_r+0x1ec>
 8013132:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013136:	f04f 0901 	mov.w	r9, #1
 801313a:	4623      	mov	r3, r4
 801313c:	469a      	mov	sl, r3
 801313e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013142:	b10a      	cbz	r2, 8013148 <_svfiprintf_r+0x5c>
 8013144:	2a25      	cmp	r2, #37	; 0x25
 8013146:	d1f9      	bne.n	801313c <_svfiprintf_r+0x50>
 8013148:	ebba 0b04 	subs.w	fp, sl, r4
 801314c:	d00b      	beq.n	8013166 <_svfiprintf_r+0x7a>
 801314e:	465b      	mov	r3, fp
 8013150:	4622      	mov	r2, r4
 8013152:	4629      	mov	r1, r5
 8013154:	4638      	mov	r0, r7
 8013156:	f7ff ff6d 	bl	8013034 <__ssputs_r>
 801315a:	3001      	adds	r0, #1
 801315c:	f000 80aa 	beq.w	80132b4 <_svfiprintf_r+0x1c8>
 8013160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013162:	445a      	add	r2, fp
 8013164:	9209      	str	r2, [sp, #36]	; 0x24
 8013166:	f89a 3000 	ldrb.w	r3, [sl]
 801316a:	2b00      	cmp	r3, #0
 801316c:	f000 80a2 	beq.w	80132b4 <_svfiprintf_r+0x1c8>
 8013170:	2300      	movs	r3, #0
 8013172:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801317a:	f10a 0a01 	add.w	sl, sl, #1
 801317e:	9304      	str	r3, [sp, #16]
 8013180:	9307      	str	r3, [sp, #28]
 8013182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013186:	931a      	str	r3, [sp, #104]	; 0x68
 8013188:	4654      	mov	r4, sl
 801318a:	2205      	movs	r2, #5
 801318c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013190:	4851      	ldr	r0, [pc, #324]	; (80132d8 <_svfiprintf_r+0x1ec>)
 8013192:	f7ed f83d 	bl	8000210 <memchr>
 8013196:	9a04      	ldr	r2, [sp, #16]
 8013198:	b9d8      	cbnz	r0, 80131d2 <_svfiprintf_r+0xe6>
 801319a:	06d0      	lsls	r0, r2, #27
 801319c:	bf44      	itt	mi
 801319e:	2320      	movmi	r3, #32
 80131a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131a4:	0711      	lsls	r1, r2, #28
 80131a6:	bf44      	itt	mi
 80131a8:	232b      	movmi	r3, #43	; 0x2b
 80131aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80131ae:	f89a 3000 	ldrb.w	r3, [sl]
 80131b2:	2b2a      	cmp	r3, #42	; 0x2a
 80131b4:	d015      	beq.n	80131e2 <_svfiprintf_r+0xf6>
 80131b6:	9a07      	ldr	r2, [sp, #28]
 80131b8:	4654      	mov	r4, sl
 80131ba:	2000      	movs	r0, #0
 80131bc:	f04f 0c0a 	mov.w	ip, #10
 80131c0:	4621      	mov	r1, r4
 80131c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131c6:	3b30      	subs	r3, #48	; 0x30
 80131c8:	2b09      	cmp	r3, #9
 80131ca:	d94e      	bls.n	801326a <_svfiprintf_r+0x17e>
 80131cc:	b1b0      	cbz	r0, 80131fc <_svfiprintf_r+0x110>
 80131ce:	9207      	str	r2, [sp, #28]
 80131d0:	e014      	b.n	80131fc <_svfiprintf_r+0x110>
 80131d2:	eba0 0308 	sub.w	r3, r0, r8
 80131d6:	fa09 f303 	lsl.w	r3, r9, r3
 80131da:	4313      	orrs	r3, r2
 80131dc:	9304      	str	r3, [sp, #16]
 80131de:	46a2      	mov	sl, r4
 80131e0:	e7d2      	b.n	8013188 <_svfiprintf_r+0x9c>
 80131e2:	9b03      	ldr	r3, [sp, #12]
 80131e4:	1d19      	adds	r1, r3, #4
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	9103      	str	r1, [sp, #12]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	bfbb      	ittet	lt
 80131ee:	425b      	neglt	r3, r3
 80131f0:	f042 0202 	orrlt.w	r2, r2, #2
 80131f4:	9307      	strge	r3, [sp, #28]
 80131f6:	9307      	strlt	r3, [sp, #28]
 80131f8:	bfb8      	it	lt
 80131fa:	9204      	strlt	r2, [sp, #16]
 80131fc:	7823      	ldrb	r3, [r4, #0]
 80131fe:	2b2e      	cmp	r3, #46	; 0x2e
 8013200:	d10c      	bne.n	801321c <_svfiprintf_r+0x130>
 8013202:	7863      	ldrb	r3, [r4, #1]
 8013204:	2b2a      	cmp	r3, #42	; 0x2a
 8013206:	d135      	bne.n	8013274 <_svfiprintf_r+0x188>
 8013208:	9b03      	ldr	r3, [sp, #12]
 801320a:	1d1a      	adds	r2, r3, #4
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	9203      	str	r2, [sp, #12]
 8013210:	2b00      	cmp	r3, #0
 8013212:	bfb8      	it	lt
 8013214:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013218:	3402      	adds	r4, #2
 801321a:	9305      	str	r3, [sp, #20]
 801321c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80132e8 <_svfiprintf_r+0x1fc>
 8013220:	7821      	ldrb	r1, [r4, #0]
 8013222:	2203      	movs	r2, #3
 8013224:	4650      	mov	r0, sl
 8013226:	f7ec fff3 	bl	8000210 <memchr>
 801322a:	b140      	cbz	r0, 801323e <_svfiprintf_r+0x152>
 801322c:	2340      	movs	r3, #64	; 0x40
 801322e:	eba0 000a 	sub.w	r0, r0, sl
 8013232:	fa03 f000 	lsl.w	r0, r3, r0
 8013236:	9b04      	ldr	r3, [sp, #16]
 8013238:	4303      	orrs	r3, r0
 801323a:	3401      	adds	r4, #1
 801323c:	9304      	str	r3, [sp, #16]
 801323e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013242:	4826      	ldr	r0, [pc, #152]	; (80132dc <_svfiprintf_r+0x1f0>)
 8013244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013248:	2206      	movs	r2, #6
 801324a:	f7ec ffe1 	bl	8000210 <memchr>
 801324e:	2800      	cmp	r0, #0
 8013250:	d038      	beq.n	80132c4 <_svfiprintf_r+0x1d8>
 8013252:	4b23      	ldr	r3, [pc, #140]	; (80132e0 <_svfiprintf_r+0x1f4>)
 8013254:	bb1b      	cbnz	r3, 801329e <_svfiprintf_r+0x1b2>
 8013256:	9b03      	ldr	r3, [sp, #12]
 8013258:	3307      	adds	r3, #7
 801325a:	f023 0307 	bic.w	r3, r3, #7
 801325e:	3308      	adds	r3, #8
 8013260:	9303      	str	r3, [sp, #12]
 8013262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013264:	4433      	add	r3, r6
 8013266:	9309      	str	r3, [sp, #36]	; 0x24
 8013268:	e767      	b.n	801313a <_svfiprintf_r+0x4e>
 801326a:	fb0c 3202 	mla	r2, ip, r2, r3
 801326e:	460c      	mov	r4, r1
 8013270:	2001      	movs	r0, #1
 8013272:	e7a5      	b.n	80131c0 <_svfiprintf_r+0xd4>
 8013274:	2300      	movs	r3, #0
 8013276:	3401      	adds	r4, #1
 8013278:	9305      	str	r3, [sp, #20]
 801327a:	4619      	mov	r1, r3
 801327c:	f04f 0c0a 	mov.w	ip, #10
 8013280:	4620      	mov	r0, r4
 8013282:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013286:	3a30      	subs	r2, #48	; 0x30
 8013288:	2a09      	cmp	r2, #9
 801328a:	d903      	bls.n	8013294 <_svfiprintf_r+0x1a8>
 801328c:	2b00      	cmp	r3, #0
 801328e:	d0c5      	beq.n	801321c <_svfiprintf_r+0x130>
 8013290:	9105      	str	r1, [sp, #20]
 8013292:	e7c3      	b.n	801321c <_svfiprintf_r+0x130>
 8013294:	fb0c 2101 	mla	r1, ip, r1, r2
 8013298:	4604      	mov	r4, r0
 801329a:	2301      	movs	r3, #1
 801329c:	e7f0      	b.n	8013280 <_svfiprintf_r+0x194>
 801329e:	ab03      	add	r3, sp, #12
 80132a0:	9300      	str	r3, [sp, #0]
 80132a2:	462a      	mov	r2, r5
 80132a4:	4b0f      	ldr	r3, [pc, #60]	; (80132e4 <_svfiprintf_r+0x1f8>)
 80132a6:	a904      	add	r1, sp, #16
 80132a8:	4638      	mov	r0, r7
 80132aa:	f3af 8000 	nop.w
 80132ae:	1c42      	adds	r2, r0, #1
 80132b0:	4606      	mov	r6, r0
 80132b2:	d1d6      	bne.n	8013262 <_svfiprintf_r+0x176>
 80132b4:	89ab      	ldrh	r3, [r5, #12]
 80132b6:	065b      	lsls	r3, r3, #25
 80132b8:	f53f af2c 	bmi.w	8013114 <_svfiprintf_r+0x28>
 80132bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80132be:	b01d      	add	sp, #116	; 0x74
 80132c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80132c4:	ab03      	add	r3, sp, #12
 80132c6:	9300      	str	r3, [sp, #0]
 80132c8:	462a      	mov	r2, r5
 80132ca:	4b06      	ldr	r3, [pc, #24]	; (80132e4 <_svfiprintf_r+0x1f8>)
 80132cc:	a904      	add	r1, sp, #16
 80132ce:	4638      	mov	r0, r7
 80132d0:	f000 f87a 	bl	80133c8 <_printf_i>
 80132d4:	e7eb      	b.n	80132ae <_svfiprintf_r+0x1c2>
 80132d6:	bf00      	nop
 80132d8:	0801394c 	.word	0x0801394c
 80132dc:	08013956 	.word	0x08013956
 80132e0:	00000000 	.word	0x00000000
 80132e4:	08013035 	.word	0x08013035
 80132e8:	08013952 	.word	0x08013952

080132ec <_printf_common>:
 80132ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80132f0:	4616      	mov	r6, r2
 80132f2:	4699      	mov	r9, r3
 80132f4:	688a      	ldr	r2, [r1, #8]
 80132f6:	690b      	ldr	r3, [r1, #16]
 80132f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80132fc:	4293      	cmp	r3, r2
 80132fe:	bfb8      	it	lt
 8013300:	4613      	movlt	r3, r2
 8013302:	6033      	str	r3, [r6, #0]
 8013304:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013308:	4607      	mov	r7, r0
 801330a:	460c      	mov	r4, r1
 801330c:	b10a      	cbz	r2, 8013312 <_printf_common+0x26>
 801330e:	3301      	adds	r3, #1
 8013310:	6033      	str	r3, [r6, #0]
 8013312:	6823      	ldr	r3, [r4, #0]
 8013314:	0699      	lsls	r1, r3, #26
 8013316:	bf42      	ittt	mi
 8013318:	6833      	ldrmi	r3, [r6, #0]
 801331a:	3302      	addmi	r3, #2
 801331c:	6033      	strmi	r3, [r6, #0]
 801331e:	6825      	ldr	r5, [r4, #0]
 8013320:	f015 0506 	ands.w	r5, r5, #6
 8013324:	d106      	bne.n	8013334 <_printf_common+0x48>
 8013326:	f104 0a19 	add.w	sl, r4, #25
 801332a:	68e3      	ldr	r3, [r4, #12]
 801332c:	6832      	ldr	r2, [r6, #0]
 801332e:	1a9b      	subs	r3, r3, r2
 8013330:	42ab      	cmp	r3, r5
 8013332:	dc26      	bgt.n	8013382 <_printf_common+0x96>
 8013334:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013338:	1e13      	subs	r3, r2, #0
 801333a:	6822      	ldr	r2, [r4, #0]
 801333c:	bf18      	it	ne
 801333e:	2301      	movne	r3, #1
 8013340:	0692      	lsls	r2, r2, #26
 8013342:	d42b      	bmi.n	801339c <_printf_common+0xb0>
 8013344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013348:	4649      	mov	r1, r9
 801334a:	4638      	mov	r0, r7
 801334c:	47c0      	blx	r8
 801334e:	3001      	adds	r0, #1
 8013350:	d01e      	beq.n	8013390 <_printf_common+0xa4>
 8013352:	6823      	ldr	r3, [r4, #0]
 8013354:	68e5      	ldr	r5, [r4, #12]
 8013356:	6832      	ldr	r2, [r6, #0]
 8013358:	f003 0306 	and.w	r3, r3, #6
 801335c:	2b04      	cmp	r3, #4
 801335e:	bf08      	it	eq
 8013360:	1aad      	subeq	r5, r5, r2
 8013362:	68a3      	ldr	r3, [r4, #8]
 8013364:	6922      	ldr	r2, [r4, #16]
 8013366:	bf0c      	ite	eq
 8013368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801336c:	2500      	movne	r5, #0
 801336e:	4293      	cmp	r3, r2
 8013370:	bfc4      	itt	gt
 8013372:	1a9b      	subgt	r3, r3, r2
 8013374:	18ed      	addgt	r5, r5, r3
 8013376:	2600      	movs	r6, #0
 8013378:	341a      	adds	r4, #26
 801337a:	42b5      	cmp	r5, r6
 801337c:	d11a      	bne.n	80133b4 <_printf_common+0xc8>
 801337e:	2000      	movs	r0, #0
 8013380:	e008      	b.n	8013394 <_printf_common+0xa8>
 8013382:	2301      	movs	r3, #1
 8013384:	4652      	mov	r2, sl
 8013386:	4649      	mov	r1, r9
 8013388:	4638      	mov	r0, r7
 801338a:	47c0      	blx	r8
 801338c:	3001      	adds	r0, #1
 801338e:	d103      	bne.n	8013398 <_printf_common+0xac>
 8013390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013398:	3501      	adds	r5, #1
 801339a:	e7c6      	b.n	801332a <_printf_common+0x3e>
 801339c:	18e1      	adds	r1, r4, r3
 801339e:	1c5a      	adds	r2, r3, #1
 80133a0:	2030      	movs	r0, #48	; 0x30
 80133a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80133a6:	4422      	add	r2, r4
 80133a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80133ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80133b0:	3302      	adds	r3, #2
 80133b2:	e7c7      	b.n	8013344 <_printf_common+0x58>
 80133b4:	2301      	movs	r3, #1
 80133b6:	4622      	mov	r2, r4
 80133b8:	4649      	mov	r1, r9
 80133ba:	4638      	mov	r0, r7
 80133bc:	47c0      	blx	r8
 80133be:	3001      	adds	r0, #1
 80133c0:	d0e6      	beq.n	8013390 <_printf_common+0xa4>
 80133c2:	3601      	adds	r6, #1
 80133c4:	e7d9      	b.n	801337a <_printf_common+0x8e>
	...

080133c8 <_printf_i>:
 80133c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133cc:	7e0f      	ldrb	r7, [r1, #24]
 80133ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80133d0:	2f78      	cmp	r7, #120	; 0x78
 80133d2:	4691      	mov	r9, r2
 80133d4:	4680      	mov	r8, r0
 80133d6:	460c      	mov	r4, r1
 80133d8:	469a      	mov	sl, r3
 80133da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80133de:	d807      	bhi.n	80133f0 <_printf_i+0x28>
 80133e0:	2f62      	cmp	r7, #98	; 0x62
 80133e2:	d80a      	bhi.n	80133fa <_printf_i+0x32>
 80133e4:	2f00      	cmp	r7, #0
 80133e6:	f000 80d8 	beq.w	801359a <_printf_i+0x1d2>
 80133ea:	2f58      	cmp	r7, #88	; 0x58
 80133ec:	f000 80a3 	beq.w	8013536 <_printf_i+0x16e>
 80133f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80133f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80133f8:	e03a      	b.n	8013470 <_printf_i+0xa8>
 80133fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80133fe:	2b15      	cmp	r3, #21
 8013400:	d8f6      	bhi.n	80133f0 <_printf_i+0x28>
 8013402:	a101      	add	r1, pc, #4	; (adr r1, 8013408 <_printf_i+0x40>)
 8013404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013408:	08013461 	.word	0x08013461
 801340c:	08013475 	.word	0x08013475
 8013410:	080133f1 	.word	0x080133f1
 8013414:	080133f1 	.word	0x080133f1
 8013418:	080133f1 	.word	0x080133f1
 801341c:	080133f1 	.word	0x080133f1
 8013420:	08013475 	.word	0x08013475
 8013424:	080133f1 	.word	0x080133f1
 8013428:	080133f1 	.word	0x080133f1
 801342c:	080133f1 	.word	0x080133f1
 8013430:	080133f1 	.word	0x080133f1
 8013434:	08013581 	.word	0x08013581
 8013438:	080134a5 	.word	0x080134a5
 801343c:	08013563 	.word	0x08013563
 8013440:	080133f1 	.word	0x080133f1
 8013444:	080133f1 	.word	0x080133f1
 8013448:	080135a3 	.word	0x080135a3
 801344c:	080133f1 	.word	0x080133f1
 8013450:	080134a5 	.word	0x080134a5
 8013454:	080133f1 	.word	0x080133f1
 8013458:	080133f1 	.word	0x080133f1
 801345c:	0801356b 	.word	0x0801356b
 8013460:	682b      	ldr	r3, [r5, #0]
 8013462:	1d1a      	adds	r2, r3, #4
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	602a      	str	r2, [r5, #0]
 8013468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801346c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013470:	2301      	movs	r3, #1
 8013472:	e0a3      	b.n	80135bc <_printf_i+0x1f4>
 8013474:	6820      	ldr	r0, [r4, #0]
 8013476:	6829      	ldr	r1, [r5, #0]
 8013478:	0606      	lsls	r6, r0, #24
 801347a:	f101 0304 	add.w	r3, r1, #4
 801347e:	d50a      	bpl.n	8013496 <_printf_i+0xce>
 8013480:	680e      	ldr	r6, [r1, #0]
 8013482:	602b      	str	r3, [r5, #0]
 8013484:	2e00      	cmp	r6, #0
 8013486:	da03      	bge.n	8013490 <_printf_i+0xc8>
 8013488:	232d      	movs	r3, #45	; 0x2d
 801348a:	4276      	negs	r6, r6
 801348c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013490:	485e      	ldr	r0, [pc, #376]	; (801360c <_printf_i+0x244>)
 8013492:	230a      	movs	r3, #10
 8013494:	e019      	b.n	80134ca <_printf_i+0x102>
 8013496:	680e      	ldr	r6, [r1, #0]
 8013498:	602b      	str	r3, [r5, #0]
 801349a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801349e:	bf18      	it	ne
 80134a0:	b236      	sxthne	r6, r6
 80134a2:	e7ef      	b.n	8013484 <_printf_i+0xbc>
 80134a4:	682b      	ldr	r3, [r5, #0]
 80134a6:	6820      	ldr	r0, [r4, #0]
 80134a8:	1d19      	adds	r1, r3, #4
 80134aa:	6029      	str	r1, [r5, #0]
 80134ac:	0601      	lsls	r1, r0, #24
 80134ae:	d501      	bpl.n	80134b4 <_printf_i+0xec>
 80134b0:	681e      	ldr	r6, [r3, #0]
 80134b2:	e002      	b.n	80134ba <_printf_i+0xf2>
 80134b4:	0646      	lsls	r6, r0, #25
 80134b6:	d5fb      	bpl.n	80134b0 <_printf_i+0xe8>
 80134b8:	881e      	ldrh	r6, [r3, #0]
 80134ba:	4854      	ldr	r0, [pc, #336]	; (801360c <_printf_i+0x244>)
 80134bc:	2f6f      	cmp	r7, #111	; 0x6f
 80134be:	bf0c      	ite	eq
 80134c0:	2308      	moveq	r3, #8
 80134c2:	230a      	movne	r3, #10
 80134c4:	2100      	movs	r1, #0
 80134c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80134ca:	6865      	ldr	r5, [r4, #4]
 80134cc:	60a5      	str	r5, [r4, #8]
 80134ce:	2d00      	cmp	r5, #0
 80134d0:	bfa2      	ittt	ge
 80134d2:	6821      	ldrge	r1, [r4, #0]
 80134d4:	f021 0104 	bicge.w	r1, r1, #4
 80134d8:	6021      	strge	r1, [r4, #0]
 80134da:	b90e      	cbnz	r6, 80134e0 <_printf_i+0x118>
 80134dc:	2d00      	cmp	r5, #0
 80134de:	d04d      	beq.n	801357c <_printf_i+0x1b4>
 80134e0:	4615      	mov	r5, r2
 80134e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80134e6:	fb03 6711 	mls	r7, r3, r1, r6
 80134ea:	5dc7      	ldrb	r7, [r0, r7]
 80134ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80134f0:	4637      	mov	r7, r6
 80134f2:	42bb      	cmp	r3, r7
 80134f4:	460e      	mov	r6, r1
 80134f6:	d9f4      	bls.n	80134e2 <_printf_i+0x11a>
 80134f8:	2b08      	cmp	r3, #8
 80134fa:	d10b      	bne.n	8013514 <_printf_i+0x14c>
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	07de      	lsls	r6, r3, #31
 8013500:	d508      	bpl.n	8013514 <_printf_i+0x14c>
 8013502:	6923      	ldr	r3, [r4, #16]
 8013504:	6861      	ldr	r1, [r4, #4]
 8013506:	4299      	cmp	r1, r3
 8013508:	bfde      	ittt	le
 801350a:	2330      	movle	r3, #48	; 0x30
 801350c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013510:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013514:	1b52      	subs	r2, r2, r5
 8013516:	6122      	str	r2, [r4, #16]
 8013518:	f8cd a000 	str.w	sl, [sp]
 801351c:	464b      	mov	r3, r9
 801351e:	aa03      	add	r2, sp, #12
 8013520:	4621      	mov	r1, r4
 8013522:	4640      	mov	r0, r8
 8013524:	f7ff fee2 	bl	80132ec <_printf_common>
 8013528:	3001      	adds	r0, #1
 801352a:	d14c      	bne.n	80135c6 <_printf_i+0x1fe>
 801352c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013530:	b004      	add	sp, #16
 8013532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013536:	4835      	ldr	r0, [pc, #212]	; (801360c <_printf_i+0x244>)
 8013538:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801353c:	6829      	ldr	r1, [r5, #0]
 801353e:	6823      	ldr	r3, [r4, #0]
 8013540:	f851 6b04 	ldr.w	r6, [r1], #4
 8013544:	6029      	str	r1, [r5, #0]
 8013546:	061d      	lsls	r5, r3, #24
 8013548:	d514      	bpl.n	8013574 <_printf_i+0x1ac>
 801354a:	07df      	lsls	r7, r3, #31
 801354c:	bf44      	itt	mi
 801354e:	f043 0320 	orrmi.w	r3, r3, #32
 8013552:	6023      	strmi	r3, [r4, #0]
 8013554:	b91e      	cbnz	r6, 801355e <_printf_i+0x196>
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	f023 0320 	bic.w	r3, r3, #32
 801355c:	6023      	str	r3, [r4, #0]
 801355e:	2310      	movs	r3, #16
 8013560:	e7b0      	b.n	80134c4 <_printf_i+0xfc>
 8013562:	6823      	ldr	r3, [r4, #0]
 8013564:	f043 0320 	orr.w	r3, r3, #32
 8013568:	6023      	str	r3, [r4, #0]
 801356a:	2378      	movs	r3, #120	; 0x78
 801356c:	4828      	ldr	r0, [pc, #160]	; (8013610 <_printf_i+0x248>)
 801356e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013572:	e7e3      	b.n	801353c <_printf_i+0x174>
 8013574:	0659      	lsls	r1, r3, #25
 8013576:	bf48      	it	mi
 8013578:	b2b6      	uxthmi	r6, r6
 801357a:	e7e6      	b.n	801354a <_printf_i+0x182>
 801357c:	4615      	mov	r5, r2
 801357e:	e7bb      	b.n	80134f8 <_printf_i+0x130>
 8013580:	682b      	ldr	r3, [r5, #0]
 8013582:	6826      	ldr	r6, [r4, #0]
 8013584:	6961      	ldr	r1, [r4, #20]
 8013586:	1d18      	adds	r0, r3, #4
 8013588:	6028      	str	r0, [r5, #0]
 801358a:	0635      	lsls	r5, r6, #24
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	d501      	bpl.n	8013594 <_printf_i+0x1cc>
 8013590:	6019      	str	r1, [r3, #0]
 8013592:	e002      	b.n	801359a <_printf_i+0x1d2>
 8013594:	0670      	lsls	r0, r6, #25
 8013596:	d5fb      	bpl.n	8013590 <_printf_i+0x1c8>
 8013598:	8019      	strh	r1, [r3, #0]
 801359a:	2300      	movs	r3, #0
 801359c:	6123      	str	r3, [r4, #16]
 801359e:	4615      	mov	r5, r2
 80135a0:	e7ba      	b.n	8013518 <_printf_i+0x150>
 80135a2:	682b      	ldr	r3, [r5, #0]
 80135a4:	1d1a      	adds	r2, r3, #4
 80135a6:	602a      	str	r2, [r5, #0]
 80135a8:	681d      	ldr	r5, [r3, #0]
 80135aa:	6862      	ldr	r2, [r4, #4]
 80135ac:	2100      	movs	r1, #0
 80135ae:	4628      	mov	r0, r5
 80135b0:	f7ec fe2e 	bl	8000210 <memchr>
 80135b4:	b108      	cbz	r0, 80135ba <_printf_i+0x1f2>
 80135b6:	1b40      	subs	r0, r0, r5
 80135b8:	6060      	str	r0, [r4, #4]
 80135ba:	6863      	ldr	r3, [r4, #4]
 80135bc:	6123      	str	r3, [r4, #16]
 80135be:	2300      	movs	r3, #0
 80135c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80135c4:	e7a8      	b.n	8013518 <_printf_i+0x150>
 80135c6:	6923      	ldr	r3, [r4, #16]
 80135c8:	462a      	mov	r2, r5
 80135ca:	4649      	mov	r1, r9
 80135cc:	4640      	mov	r0, r8
 80135ce:	47d0      	blx	sl
 80135d0:	3001      	adds	r0, #1
 80135d2:	d0ab      	beq.n	801352c <_printf_i+0x164>
 80135d4:	6823      	ldr	r3, [r4, #0]
 80135d6:	079b      	lsls	r3, r3, #30
 80135d8:	d413      	bmi.n	8013602 <_printf_i+0x23a>
 80135da:	68e0      	ldr	r0, [r4, #12]
 80135dc:	9b03      	ldr	r3, [sp, #12]
 80135de:	4298      	cmp	r0, r3
 80135e0:	bfb8      	it	lt
 80135e2:	4618      	movlt	r0, r3
 80135e4:	e7a4      	b.n	8013530 <_printf_i+0x168>
 80135e6:	2301      	movs	r3, #1
 80135e8:	4632      	mov	r2, r6
 80135ea:	4649      	mov	r1, r9
 80135ec:	4640      	mov	r0, r8
 80135ee:	47d0      	blx	sl
 80135f0:	3001      	adds	r0, #1
 80135f2:	d09b      	beq.n	801352c <_printf_i+0x164>
 80135f4:	3501      	adds	r5, #1
 80135f6:	68e3      	ldr	r3, [r4, #12]
 80135f8:	9903      	ldr	r1, [sp, #12]
 80135fa:	1a5b      	subs	r3, r3, r1
 80135fc:	42ab      	cmp	r3, r5
 80135fe:	dcf2      	bgt.n	80135e6 <_printf_i+0x21e>
 8013600:	e7eb      	b.n	80135da <_printf_i+0x212>
 8013602:	2500      	movs	r5, #0
 8013604:	f104 0619 	add.w	r6, r4, #25
 8013608:	e7f5      	b.n	80135f6 <_printf_i+0x22e>
 801360a:	bf00      	nop
 801360c:	0801395d 	.word	0x0801395d
 8013610:	0801396e 	.word	0x0801396e

08013614 <memmove>:
 8013614:	4288      	cmp	r0, r1
 8013616:	b510      	push	{r4, lr}
 8013618:	eb01 0402 	add.w	r4, r1, r2
 801361c:	d902      	bls.n	8013624 <memmove+0x10>
 801361e:	4284      	cmp	r4, r0
 8013620:	4623      	mov	r3, r4
 8013622:	d807      	bhi.n	8013634 <memmove+0x20>
 8013624:	1e43      	subs	r3, r0, #1
 8013626:	42a1      	cmp	r1, r4
 8013628:	d008      	beq.n	801363c <memmove+0x28>
 801362a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801362e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013632:	e7f8      	b.n	8013626 <memmove+0x12>
 8013634:	4402      	add	r2, r0
 8013636:	4601      	mov	r1, r0
 8013638:	428a      	cmp	r2, r1
 801363a:	d100      	bne.n	801363e <memmove+0x2a>
 801363c:	bd10      	pop	{r4, pc}
 801363e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013646:	e7f7      	b.n	8013638 <memmove+0x24>

08013648 <_free_r>:
 8013648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801364a:	2900      	cmp	r1, #0
 801364c:	d044      	beq.n	80136d8 <_free_r+0x90>
 801364e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013652:	9001      	str	r0, [sp, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f1a1 0404 	sub.w	r4, r1, #4
 801365a:	bfb8      	it	lt
 801365c:	18e4      	addlt	r4, r4, r3
 801365e:	f000 f913 	bl	8013888 <__malloc_lock>
 8013662:	4a1e      	ldr	r2, [pc, #120]	; (80136dc <_free_r+0x94>)
 8013664:	9801      	ldr	r0, [sp, #4]
 8013666:	6813      	ldr	r3, [r2, #0]
 8013668:	b933      	cbnz	r3, 8013678 <_free_r+0x30>
 801366a:	6063      	str	r3, [r4, #4]
 801366c:	6014      	str	r4, [r2, #0]
 801366e:	b003      	add	sp, #12
 8013670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013674:	f000 b90e 	b.w	8013894 <__malloc_unlock>
 8013678:	42a3      	cmp	r3, r4
 801367a:	d908      	bls.n	801368e <_free_r+0x46>
 801367c:	6825      	ldr	r5, [r4, #0]
 801367e:	1961      	adds	r1, r4, r5
 8013680:	428b      	cmp	r3, r1
 8013682:	bf01      	itttt	eq
 8013684:	6819      	ldreq	r1, [r3, #0]
 8013686:	685b      	ldreq	r3, [r3, #4]
 8013688:	1949      	addeq	r1, r1, r5
 801368a:	6021      	streq	r1, [r4, #0]
 801368c:	e7ed      	b.n	801366a <_free_r+0x22>
 801368e:	461a      	mov	r2, r3
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	b10b      	cbz	r3, 8013698 <_free_r+0x50>
 8013694:	42a3      	cmp	r3, r4
 8013696:	d9fa      	bls.n	801368e <_free_r+0x46>
 8013698:	6811      	ldr	r1, [r2, #0]
 801369a:	1855      	adds	r5, r2, r1
 801369c:	42a5      	cmp	r5, r4
 801369e:	d10b      	bne.n	80136b8 <_free_r+0x70>
 80136a0:	6824      	ldr	r4, [r4, #0]
 80136a2:	4421      	add	r1, r4
 80136a4:	1854      	adds	r4, r2, r1
 80136a6:	42a3      	cmp	r3, r4
 80136a8:	6011      	str	r1, [r2, #0]
 80136aa:	d1e0      	bne.n	801366e <_free_r+0x26>
 80136ac:	681c      	ldr	r4, [r3, #0]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	6053      	str	r3, [r2, #4]
 80136b2:	4421      	add	r1, r4
 80136b4:	6011      	str	r1, [r2, #0]
 80136b6:	e7da      	b.n	801366e <_free_r+0x26>
 80136b8:	d902      	bls.n	80136c0 <_free_r+0x78>
 80136ba:	230c      	movs	r3, #12
 80136bc:	6003      	str	r3, [r0, #0]
 80136be:	e7d6      	b.n	801366e <_free_r+0x26>
 80136c0:	6825      	ldr	r5, [r4, #0]
 80136c2:	1961      	adds	r1, r4, r5
 80136c4:	428b      	cmp	r3, r1
 80136c6:	bf04      	itt	eq
 80136c8:	6819      	ldreq	r1, [r3, #0]
 80136ca:	685b      	ldreq	r3, [r3, #4]
 80136cc:	6063      	str	r3, [r4, #4]
 80136ce:	bf04      	itt	eq
 80136d0:	1949      	addeq	r1, r1, r5
 80136d2:	6021      	streq	r1, [r4, #0]
 80136d4:	6054      	str	r4, [r2, #4]
 80136d6:	e7ca      	b.n	801366e <_free_r+0x26>
 80136d8:	b003      	add	sp, #12
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	20002fdc 	.word	0x20002fdc

080136e0 <sbrk_aligned>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	4e0e      	ldr	r6, [pc, #56]	; (801371c <sbrk_aligned+0x3c>)
 80136e4:	460c      	mov	r4, r1
 80136e6:	6831      	ldr	r1, [r6, #0]
 80136e8:	4605      	mov	r5, r0
 80136ea:	b911      	cbnz	r1, 80136f2 <sbrk_aligned+0x12>
 80136ec:	f000 f8bc 	bl	8013868 <_sbrk_r>
 80136f0:	6030      	str	r0, [r6, #0]
 80136f2:	4621      	mov	r1, r4
 80136f4:	4628      	mov	r0, r5
 80136f6:	f000 f8b7 	bl	8013868 <_sbrk_r>
 80136fa:	1c43      	adds	r3, r0, #1
 80136fc:	d00a      	beq.n	8013714 <sbrk_aligned+0x34>
 80136fe:	1cc4      	adds	r4, r0, #3
 8013700:	f024 0403 	bic.w	r4, r4, #3
 8013704:	42a0      	cmp	r0, r4
 8013706:	d007      	beq.n	8013718 <sbrk_aligned+0x38>
 8013708:	1a21      	subs	r1, r4, r0
 801370a:	4628      	mov	r0, r5
 801370c:	f000 f8ac 	bl	8013868 <_sbrk_r>
 8013710:	3001      	adds	r0, #1
 8013712:	d101      	bne.n	8013718 <sbrk_aligned+0x38>
 8013714:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013718:	4620      	mov	r0, r4
 801371a:	bd70      	pop	{r4, r5, r6, pc}
 801371c:	20002fe0 	.word	0x20002fe0

08013720 <_malloc_r>:
 8013720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013724:	1ccd      	adds	r5, r1, #3
 8013726:	f025 0503 	bic.w	r5, r5, #3
 801372a:	3508      	adds	r5, #8
 801372c:	2d0c      	cmp	r5, #12
 801372e:	bf38      	it	cc
 8013730:	250c      	movcc	r5, #12
 8013732:	2d00      	cmp	r5, #0
 8013734:	4607      	mov	r7, r0
 8013736:	db01      	blt.n	801373c <_malloc_r+0x1c>
 8013738:	42a9      	cmp	r1, r5
 801373a:	d905      	bls.n	8013748 <_malloc_r+0x28>
 801373c:	230c      	movs	r3, #12
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	2600      	movs	r6, #0
 8013742:	4630      	mov	r0, r6
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	4e2e      	ldr	r6, [pc, #184]	; (8013804 <_malloc_r+0xe4>)
 801374a:	f000 f89d 	bl	8013888 <__malloc_lock>
 801374e:	6833      	ldr	r3, [r6, #0]
 8013750:	461c      	mov	r4, r3
 8013752:	bb34      	cbnz	r4, 80137a2 <_malloc_r+0x82>
 8013754:	4629      	mov	r1, r5
 8013756:	4638      	mov	r0, r7
 8013758:	f7ff ffc2 	bl	80136e0 <sbrk_aligned>
 801375c:	1c43      	adds	r3, r0, #1
 801375e:	4604      	mov	r4, r0
 8013760:	d14d      	bne.n	80137fe <_malloc_r+0xde>
 8013762:	6834      	ldr	r4, [r6, #0]
 8013764:	4626      	mov	r6, r4
 8013766:	2e00      	cmp	r6, #0
 8013768:	d140      	bne.n	80137ec <_malloc_r+0xcc>
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	4631      	mov	r1, r6
 801376e:	4638      	mov	r0, r7
 8013770:	eb04 0803 	add.w	r8, r4, r3
 8013774:	f000 f878 	bl	8013868 <_sbrk_r>
 8013778:	4580      	cmp	r8, r0
 801377a:	d13a      	bne.n	80137f2 <_malloc_r+0xd2>
 801377c:	6821      	ldr	r1, [r4, #0]
 801377e:	3503      	adds	r5, #3
 8013780:	1a6d      	subs	r5, r5, r1
 8013782:	f025 0503 	bic.w	r5, r5, #3
 8013786:	3508      	adds	r5, #8
 8013788:	2d0c      	cmp	r5, #12
 801378a:	bf38      	it	cc
 801378c:	250c      	movcc	r5, #12
 801378e:	4629      	mov	r1, r5
 8013790:	4638      	mov	r0, r7
 8013792:	f7ff ffa5 	bl	80136e0 <sbrk_aligned>
 8013796:	3001      	adds	r0, #1
 8013798:	d02b      	beq.n	80137f2 <_malloc_r+0xd2>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	442b      	add	r3, r5
 801379e:	6023      	str	r3, [r4, #0]
 80137a0:	e00e      	b.n	80137c0 <_malloc_r+0xa0>
 80137a2:	6822      	ldr	r2, [r4, #0]
 80137a4:	1b52      	subs	r2, r2, r5
 80137a6:	d41e      	bmi.n	80137e6 <_malloc_r+0xc6>
 80137a8:	2a0b      	cmp	r2, #11
 80137aa:	d916      	bls.n	80137da <_malloc_r+0xba>
 80137ac:	1961      	adds	r1, r4, r5
 80137ae:	42a3      	cmp	r3, r4
 80137b0:	6025      	str	r5, [r4, #0]
 80137b2:	bf18      	it	ne
 80137b4:	6059      	strne	r1, [r3, #4]
 80137b6:	6863      	ldr	r3, [r4, #4]
 80137b8:	bf08      	it	eq
 80137ba:	6031      	streq	r1, [r6, #0]
 80137bc:	5162      	str	r2, [r4, r5]
 80137be:	604b      	str	r3, [r1, #4]
 80137c0:	4638      	mov	r0, r7
 80137c2:	f104 060b 	add.w	r6, r4, #11
 80137c6:	f000 f865 	bl	8013894 <__malloc_unlock>
 80137ca:	f026 0607 	bic.w	r6, r6, #7
 80137ce:	1d23      	adds	r3, r4, #4
 80137d0:	1af2      	subs	r2, r6, r3
 80137d2:	d0b6      	beq.n	8013742 <_malloc_r+0x22>
 80137d4:	1b9b      	subs	r3, r3, r6
 80137d6:	50a3      	str	r3, [r4, r2]
 80137d8:	e7b3      	b.n	8013742 <_malloc_r+0x22>
 80137da:	6862      	ldr	r2, [r4, #4]
 80137dc:	42a3      	cmp	r3, r4
 80137de:	bf0c      	ite	eq
 80137e0:	6032      	streq	r2, [r6, #0]
 80137e2:	605a      	strne	r2, [r3, #4]
 80137e4:	e7ec      	b.n	80137c0 <_malloc_r+0xa0>
 80137e6:	4623      	mov	r3, r4
 80137e8:	6864      	ldr	r4, [r4, #4]
 80137ea:	e7b2      	b.n	8013752 <_malloc_r+0x32>
 80137ec:	4634      	mov	r4, r6
 80137ee:	6876      	ldr	r6, [r6, #4]
 80137f0:	e7b9      	b.n	8013766 <_malloc_r+0x46>
 80137f2:	230c      	movs	r3, #12
 80137f4:	603b      	str	r3, [r7, #0]
 80137f6:	4638      	mov	r0, r7
 80137f8:	f000 f84c 	bl	8013894 <__malloc_unlock>
 80137fc:	e7a1      	b.n	8013742 <_malloc_r+0x22>
 80137fe:	6025      	str	r5, [r4, #0]
 8013800:	e7de      	b.n	80137c0 <_malloc_r+0xa0>
 8013802:	bf00      	nop
 8013804:	20002fdc 	.word	0x20002fdc

08013808 <_realloc_r>:
 8013808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801380c:	4680      	mov	r8, r0
 801380e:	4614      	mov	r4, r2
 8013810:	460e      	mov	r6, r1
 8013812:	b921      	cbnz	r1, 801381e <_realloc_r+0x16>
 8013814:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013818:	4611      	mov	r1, r2
 801381a:	f7ff bf81 	b.w	8013720 <_malloc_r>
 801381e:	b92a      	cbnz	r2, 801382c <_realloc_r+0x24>
 8013820:	f7ff ff12 	bl	8013648 <_free_r>
 8013824:	4625      	mov	r5, r4
 8013826:	4628      	mov	r0, r5
 8013828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801382c:	f000 f838 	bl	80138a0 <_malloc_usable_size_r>
 8013830:	4284      	cmp	r4, r0
 8013832:	4607      	mov	r7, r0
 8013834:	d802      	bhi.n	801383c <_realloc_r+0x34>
 8013836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801383a:	d812      	bhi.n	8013862 <_realloc_r+0x5a>
 801383c:	4621      	mov	r1, r4
 801383e:	4640      	mov	r0, r8
 8013840:	f7ff ff6e 	bl	8013720 <_malloc_r>
 8013844:	4605      	mov	r5, r0
 8013846:	2800      	cmp	r0, #0
 8013848:	d0ed      	beq.n	8013826 <_realloc_r+0x1e>
 801384a:	42bc      	cmp	r4, r7
 801384c:	4622      	mov	r2, r4
 801384e:	4631      	mov	r1, r6
 8013850:	bf28      	it	cs
 8013852:	463a      	movcs	r2, r7
 8013854:	f7ff fbb0 	bl	8012fb8 <memcpy>
 8013858:	4631      	mov	r1, r6
 801385a:	4640      	mov	r0, r8
 801385c:	f7ff fef4 	bl	8013648 <_free_r>
 8013860:	e7e1      	b.n	8013826 <_realloc_r+0x1e>
 8013862:	4635      	mov	r5, r6
 8013864:	e7df      	b.n	8013826 <_realloc_r+0x1e>
	...

08013868 <_sbrk_r>:
 8013868:	b538      	push	{r3, r4, r5, lr}
 801386a:	4d06      	ldr	r5, [pc, #24]	; (8013884 <_sbrk_r+0x1c>)
 801386c:	2300      	movs	r3, #0
 801386e:	4604      	mov	r4, r0
 8013870:	4608      	mov	r0, r1
 8013872:	602b      	str	r3, [r5, #0]
 8013874:	f7ee ff08 	bl	8002688 <_sbrk>
 8013878:	1c43      	adds	r3, r0, #1
 801387a:	d102      	bne.n	8013882 <_sbrk_r+0x1a>
 801387c:	682b      	ldr	r3, [r5, #0]
 801387e:	b103      	cbz	r3, 8013882 <_sbrk_r+0x1a>
 8013880:	6023      	str	r3, [r4, #0]
 8013882:	bd38      	pop	{r3, r4, r5, pc}
 8013884:	20002fe4 	.word	0x20002fe4

08013888 <__malloc_lock>:
 8013888:	4801      	ldr	r0, [pc, #4]	; (8013890 <__malloc_lock+0x8>)
 801388a:	f000 b811 	b.w	80138b0 <__retarget_lock_acquire_recursive>
 801388e:	bf00      	nop
 8013890:	20002fe8 	.word	0x20002fe8

08013894 <__malloc_unlock>:
 8013894:	4801      	ldr	r0, [pc, #4]	; (801389c <__malloc_unlock+0x8>)
 8013896:	f000 b80c 	b.w	80138b2 <__retarget_lock_release_recursive>
 801389a:	bf00      	nop
 801389c:	20002fe8 	.word	0x20002fe8

080138a0 <_malloc_usable_size_r>:
 80138a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80138a4:	1f18      	subs	r0, r3, #4
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	bfbc      	itt	lt
 80138aa:	580b      	ldrlt	r3, [r1, r0]
 80138ac:	18c0      	addlt	r0, r0, r3
 80138ae:	4770      	bx	lr

080138b0 <__retarget_lock_acquire_recursive>:
 80138b0:	4770      	bx	lr

080138b2 <__retarget_lock_release_recursive>:
 80138b2:	4770      	bx	lr

080138b4 <_init>:
 80138b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138b6:	bf00      	nop
 80138b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138ba:	bc08      	pop	{r3}
 80138bc:	469e      	mov	lr, r3
 80138be:	4770      	bx	lr

080138c0 <_fini>:
 80138c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138c2:	bf00      	nop
 80138c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80138c6:	bc08      	pop	{r3}
 80138c8:	469e      	mov	lr, r3
 80138ca:	4770      	bx	lr
