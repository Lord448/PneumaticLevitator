
Daughterboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d39c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f550  0800d53c  0800d53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ca8c  0802ca8c  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802ca8c  0802ca8c  0003ca8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ca94  0802ca94  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ca94  0802ca94  0003ca94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ca98  0802ca98  0003ca98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802ca9c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ea8  20000090  0802cb2c  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004f38  0802cb2c  00044f38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022d60  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000460f  00000000  00000000  00062e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ce0  00000000  00000000  00067430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b18  00000000  00000000  00069110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000060bb  00000000  00000000  0006ac28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fbb6  00000000  00000000  00070ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ec1d  00000000  00000000  00090899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f98  00000000  00000000  0012f508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d524 	.word	0x0800d524

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800d524 	.word	0x0800d524

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 ff10 	bl	80023ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f870 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9f6 	bl	8000980 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f98e 	bl	80008b4 <MX_DMA_Init>
  MX_SPI1_Init();
 8000598:	f000 f8d2 	bl	8000740 <MX_SPI1_Init>
  MX_TIM1_Init();
 800059c:	f000 f906 	bl	80007ac <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f95c 	bl	800085c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f008 fe66 	bl	8009274 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreDMAComplete */
  xSemaphoreDMACompleteHandle = osSemaphoreNew(1, 1, &xSemaphoreDMAComplete_attributes);
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <main+0x9c>)
 80005aa:	2101      	movs	r1, #1
 80005ac:	2001      	movs	r0, #1
 80005ae:	f008 ff58 	bl	8009462 <osSemaphoreNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a1b      	ldr	r2, [pc, #108]	; (8000624 <main+0xa0>)
 80005b6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskIdle */
  TaskIdleHandle = osThreadNew(vTaskIdle, NULL, &TaskIdle_attributes);
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <main+0xa4>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	481b      	ldr	r0, [pc, #108]	; (800062c <main+0xa8>)
 80005be:	f008 fea3 	bl	8009308 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a1a      	ldr	r2, [pc, #104]	; (8000630 <main+0xac>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of TaskUI */
  TaskUIHandle = osThreadNew(vTaskUI, NULL, &TaskUI_attributes);
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <main+0xb0>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	481a      	ldr	r0, [pc, #104]	; (8000638 <main+0xb4>)
 80005ce:	f008 fe9b 	bl	8009308 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a19      	ldr	r2, [pc, #100]	; (800063c <main+0xb8>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlink */
  TaskBlinkHandle = osThreadNew(vTaskBlink, NULL, &TaskBlink_attributes);
 80005d8:	4a19      	ldr	r2, [pc, #100]	; (8000640 <main+0xbc>)
 80005da:	2100      	movs	r1, #0
 80005dc:	4819      	ldr	r0, [pc, #100]	; (8000644 <main+0xc0>)
 80005de:	f008 fe93 	bl	8009308 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a18      	ldr	r2, [pc, #96]	; (8000648 <main+0xc4>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLeds */
  TaskLedsHandle = osThreadNew(vTaskLeds, NULL, &TaskLeds_attributes);
 80005e8:	4a18      	ldr	r2, [pc, #96]	; (800064c <main+0xc8>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	4818      	ldr	r0, [pc, #96]	; (8000650 <main+0xcc>)
 80005ee:	f008 fe8b 	bl	8009308 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a17      	ldr	r2, [pc, #92]	; (8000654 <main+0xd0>)
 80005f6:	6013      	str	r3, [r2, #0]

  /* creation of TaskWdgM */
  TaskWdgMHandle = osThreadNew(vTaskWdgM, NULL, &TaskWdgM_attributes);
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <main+0xd4>)
 80005fa:	2100      	movs	r1, #0
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <main+0xd8>)
 80005fe:	f008 fe83 	bl	8009308 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a16      	ldr	r2, [pc, #88]	; (8000660 <main+0xdc>)
 8000606:	6013      	str	r3, [r2, #0]

  /* creation of TaskCOM */
  TaskCOMHandle = osThreadNew(vTaskCOM, NULL, &TaskCOM_attributes);
 8000608:	4a16      	ldr	r2, [pc, #88]	; (8000664 <main+0xe0>)
 800060a:	2100      	movs	r1, #0
 800060c:	4816      	ldr	r0, [pc, #88]	; (8000668 <main+0xe4>)
 800060e:	f008 fe7b 	bl	8009308 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a15      	ldr	r2, [pc, #84]	; (800066c <main+0xe8>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f008 fe50 	bl	80092bc <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	e7fe      	b.n	800061c <main+0x98>
 800061e:	bf00      	nop
 8000620:	0800d7a4 	.word	0x0800d7a4
 8000624:	200002c8 	.word	0x200002c8
 8000628:	0800d6cc 	.word	0x0800d6cc
 800062c:	08000b49 	.word	0x08000b49
 8000630:	200002b0 	.word	0x200002b0
 8000634:	0800d6f0 	.word	0x0800d6f0
 8000638:	0800c7fd 	.word	0x0800c7fd
 800063c:	200002b4 	.word	0x200002b4
 8000640:	0800d714 	.word	0x0800d714
 8000644:	08000b59 	.word	0x08000b59
 8000648:	200002b8 	.word	0x200002b8
 800064c:	0800d738 	.word	0x0800d738
 8000650:	08000b79 	.word	0x08000b79
 8000654:	200002bc 	.word	0x200002bc
 8000658:	0800d75c 	.word	0x0800d75c
 800065c:	08000bb9 	.word	0x08000bb9
 8000660:	200002c0 	.word	0x200002c0
 8000664:	0800d780 	.word	0x0800d780
 8000668:	0800c7ed 	.word	0x0800c7ed
 800066c:	200002c4 	.word	0x200002c4

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2230      	movs	r2, #48	; 0x30
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f00c fa64 	bl	800cb4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000694:	2300      	movs	r3, #0
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	4b27      	ldr	r3, [pc, #156]	; (8000738 <SystemClock_Config+0xc8>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069c:	4a26      	ldr	r2, [pc, #152]	; (8000738 <SystemClock_Config+0xc8>)
 800069e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006a2:	6413      	str	r3, [r2, #64]	; 0x40
 80006a4:	4b24      	ldr	r3, [pc, #144]	; (8000738 <SystemClock_Config+0xc8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ac:	60bb      	str	r3, [r7, #8]
 80006ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2300      	movs	r3, #0
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	4b21      	ldr	r3, [pc, #132]	; (800073c <SystemClock_Config+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	4a20      	ldr	r2, [pc, #128]	; (800073c <SystemClock_Config+0xcc>)
 80006ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006be:	6013      	str	r3, [r2, #0]
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <SystemClock_Config+0xcc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006cc:	2301      	movs	r3, #1
 80006ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006e0:	230c      	movs	r3, #12
 80006e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006e4:	2360      	movs	r3, #96	; 0x60
 80006e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ec:	2304      	movs	r3, #4
 80006ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f002 fe41 	bl	800337c <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000700:	f000 fa62 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000708:	2302      	movs	r3, #2
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000714:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2103      	movs	r1, #3
 8000720:	4618      	mov	r0, r3
 8000722:	f003 f8a3 	bl	800386c <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800072c:	f000 fa4c 	bl	8000bc8 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000744:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000746:	4a18      	ldr	r2, [pc, #96]	; (80007a8 <MX_SPI1_Init+0x68>)
 8000748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800074a:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI1_Init+0x64>)
 800074c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000758:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <MX_SPI1_Init+0x64>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000760:	2202      	movs	r2, #2
 8000762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000766:	2200      	movs	r2, #0
 8000768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI1_Init+0x64>)
 800076c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000774:	2200      	movs	r2, #0
 8000776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000778:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <MX_SPI1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800077e:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000784:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800078a:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI1_Init+0x64>)
 800078c:	220a      	movs	r2, #10
 800078e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <MX_SPI1_Init+0x64>)
 8000792:	f003 fa4b 	bl	8003c2c <HAL_SPI_Init>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800079c:	f000 fa14 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	200000ac 	.word	0x200000ac
 80007a8:	40013000 	.word	0x40013000

080007ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2224      	movs	r2, #36	; 0x24
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f00c f9c6 	bl	800cb4c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b22      	ldr	r3, [pc, #136]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007ca:	4a23      	ldr	r2, [pc, #140]	; (8000858 <MX_TIM1_Init+0xac>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_TIM1_Init+0xa8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007f4:	2301      	movs	r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007f8:	2300      	movs	r3, #0
 80007fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007fc:	2301      	movs	r3, #1
 80007fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800080c:	2301      	movs	r3, #1
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_TIM1_Init+0xa8>)
 8000820:	f003 fdea 	bl	80043f8 <HAL_TIM_Encoder_Init>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800082a:	f000 f9cd 	bl	8000bc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_TIM1_Init+0xa8>)
 800083c:	f003 ff02 	bl	8004644 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000846:	f000 f9bf 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3730      	adds	r7, #48	; 0x30
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000164 	.word	0x20000164
 8000858:	40010000 	.word	0x40010000

0800085c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000862:	4a13      	ldr	r2, [pc, #76]	; (80008b0 <MX_USART1_UART_Init+0x54>)
 8000864:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000868:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800086c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000870:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000874:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000878:	2200      	movs	r2, #0
 800087a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USART1_UART_Init+0x50>)
 800087e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000882:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000886:	220c      	movs	r2, #12
 8000888:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USART1_UART_Init+0x50>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USART1_UART_Init+0x50>)
 8000898:	f003 ff42 	bl	8004720 <HAL_UART_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 80008a2:	f000 f991 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	200001ac 	.word	0x200001ac
 80008b0:	40011000 	.word	0x40011000

080008b4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_DMA_Init+0xc0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a2c      	ldr	r2, [pc, #176]	; (8000974 <MX_DMA_Init+0xc0>)
 80008c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_DMA_Init+0xc0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 80008d6:	4b28      	ldr	r3, [pc, #160]	; (8000978 <MX_DMA_Init+0xc4>)
 80008d8:	4a28      	ldr	r2, [pc, #160]	; (800097c <MX_DMA_Init+0xc8>)
 80008da:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 80008dc:	4b26      	ldr	r3, [pc, #152]	; (8000978 <MX_DMA_Init+0xc4>)
 80008de:	2200      	movs	r2, #0
 80008e0:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80008e2:	4b25      	ldr	r3, [pc, #148]	; (8000978 <MX_DMA_Init+0xc4>)
 80008e4:	2280      	movs	r2, #128	; 0x80
 80008e6:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <MX_DMA_Init+0xc4>)
 80008ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ee:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_DMA_Init+0xc4>)
 80008f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_DMA_Init+0xc4>)
 80008fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008fe:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_DMA_Init+0xc4>)
 8000902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000906:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_DMA_Init+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_DMA_Init+0xc4>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_DMA_Init+0xc4>)
 8000916:	2204      	movs	r2, #4
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800091a:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_DMA_Init+0xc4>)
 800091c:	2203      	movs	r2, #3
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	; (8000978 <MX_DMA_Init+0xc4>)
 8000922:	2200      	movs	r2, #0
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_DMA_Init+0xc4>)
 8000928:	2200      	movs	r2, #0
 800092a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <MX_DMA_Init+0xc4>)
 800092e:	f001 fee5 	bl	80026fc <HAL_DMA_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 8000938:	f000 f946 	bl	8000bc8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800093c:	2200      	movs	r2, #0
 800093e:	2105      	movs	r1, #5
 8000940:	2039      	movs	r0, #57	; 0x39
 8000942:	f001 fea4 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000946:	2039      	movs	r0, #57	; 0x39
 8000948:	f001 febd 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2105      	movs	r1, #5
 8000950:	203a      	movs	r0, #58	; 0x3a
 8000952:	f001 fe9c 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000956:	203a      	movs	r0, #58	; 0x3a
 8000958:	f001 feb5 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800095c:	2200      	movs	r2, #0
 800095e:	2105      	movs	r1, #5
 8000960:	2046      	movs	r0, #70	; 0x46
 8000962:	f001 fe94 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000966:	2046      	movs	r0, #70	; 0x46
 8000968:	f001 fead 	bl	80026c6 <HAL_NVIC_EnableIRQ>

}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800
 8000978:	20000250 	.word	0x20000250
 800097c:	40026428 	.word	0x40026428

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	4b67      	ldr	r3, [pc, #412]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a66      	ldr	r2, [pc, #408]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b64      	ldr	r3, [pc, #400]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b60      	ldr	r3, [pc, #384]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a5f      	ldr	r2, [pc, #380]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b5d      	ldr	r3, [pc, #372]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	4b59      	ldr	r3, [pc, #356]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a58      	ldr	r2, [pc, #352]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b56      	ldr	r3, [pc, #344]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	607b      	str	r3, [r7, #4]
 80009ee:	4b52      	ldr	r3, [pc, #328]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a51      	ldr	r2, [pc, #324]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009f4:	f043 0302 	orr.w	r3, r3, #2
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b4f      	ldr	r3, [pc, #316]	; (8000b38 <MX_GPIO_Init+0x1b8>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GP_GPIO_Port, LED_GP_Pin, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a0c:	484b      	ldr	r0, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x1bc>)
 8000a0e:	f002 fc5d 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2150      	movs	r1, #80	; 0x50
 8000a16:	484a      	ldr	r0, [pc, #296]	; (8000b40 <MX_GPIO_Init+0x1c0>)
 8000a18:	f002 fc58 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	2103      	movs	r1, #3
 8000a20:	4848      	ldr	r0, [pc, #288]	; (8000b44 <MX_GPIO_Init+0x1c4>)
 8000a22:	f002 fc53 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000a2c:	4845      	ldr	r0, [pc, #276]	; (8000b44 <MX_GPIO_Init+0x1c4>)
 8000a2e:	f002 fc4d 	bl	80032cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GP_Pin */
  GPIO_InitStruct.Pin = LED_GP_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GP_GPIO_Port, &GPIO_InitStruct);
 8000a44:	f107 0314 	add.w	r3, r7, #20
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483c      	ldr	r0, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x1bc>)
 8000a4c:	f002 faba 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 8000a50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4835      	ldr	r0, [pc, #212]	; (8000b3c <MX_GPIO_Init+0x1bc>)
 8000a68:	f002 faac 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000a6c:	f240 430f 	movw	r3, #1039	; 0x40f
 8000a70:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a72:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a78:	2301      	movs	r3, #1
 8000a7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x1c0>)
 8000a84:	f002 fa9e 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000a88:	2350      	movs	r3, #80	; 0x50
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	4828      	ldr	r0, [pc, #160]	; (8000b40 <MX_GPIO_Init+0x1c0>)
 8000aa0:	f002 fa90 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4822      	ldr	r0, [pc, #136]	; (8000b44 <MX_GPIO_Init+0x1c4>)
 8000abc:	f002 fa82 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_COMM_Pin LED_USB_Pin LED_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin;
 8000ac0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481a      	ldr	r0, [pc, #104]	; (8000b44 <MX_GPIO_Init+0x1c4>)
 8000ada:	f002 fa73 	bl	8002fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	2105      	movs	r1, #5
 8000ae2:	2006      	movs	r0, #6
 8000ae4:	f001 fdd3 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ae8:	2006      	movs	r0, #6
 8000aea:	f001 fdec 	bl	80026c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2105      	movs	r1, #5
 8000af2:	2007      	movs	r0, #7
 8000af4:	f001 fdcb 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000af8:	2007      	movs	r0, #7
 8000afa:	f001 fde4 	bl	80026c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2105      	movs	r1, #5
 8000b02:	2008      	movs	r0, #8
 8000b04:	f001 fdc3 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000b08:	2008      	movs	r0, #8
 8000b0a:	f001 fddc 	bl	80026c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2105      	movs	r1, #5
 8000b12:	2009      	movs	r0, #9
 8000b14:	f001 fdbb 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000b18:	2009      	movs	r0, #9
 8000b1a:	f001 fdd4 	bl	80026c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2105      	movs	r1, #5
 8000b22:	2028      	movs	r0, #40	; 0x28
 8000b24:	f001 fdb3 	bl	800268e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b28:	2028      	movs	r0, #40	; 0x28
 8000b2a:	f001 fdcc 	bl	80026c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2e:	bf00      	nop
 8000b30:	3728      	adds	r7, #40	; 0x28
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40020000 	.word	0x40020000
 8000b44:	40020400 	.word	0x40020400

08000b48 <vTaskIdle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskIdle */
__weak void vTaskIdle(void *argument)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b50:	2001      	movs	r0, #1
 8000b52:	f008 fc6b 	bl	800942c <osDelay>
 8000b56:	e7fb      	b.n	8000b50 <vTaskIdle+0x8>

08000b58 <vTaskBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskBlink */
void vTaskBlink(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskBlink */

  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	4803      	ldr	r0, [pc, #12]	; (8000b74 <vTaskBlink+0x1c>)
 8000b66:	f002 fbca 	bl	80032fe <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(250));
 8000b6a:	20fa      	movs	r0, #250	; 0xfa
 8000b6c:	f008 fc5e 	bl	800942c <osDelay>
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000b70:	e7f6      	b.n	8000b60 <vTaskBlink+0x8>
 8000b72:	bf00      	nop
 8000b74:	40020800 	.word	0x40020800

08000b78 <vTaskLeds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLeds */
void vTaskLeds(void *argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLeds */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000b80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b84:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <vTaskLeds+0x3c>)
 8000b86:	f002 fbba 	bl	80032fe <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f008 fc4e 	bl	800942c <osDelay>
    HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <vTaskLeds+0x3c>)
 8000b96:	f002 fbb2 	bl	80032fe <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000b9a:	2064      	movs	r0, #100	; 0x64
 8000b9c:	f008 fc46 	bl	800942c <osDelay>
    HAL_GPIO_TogglePin(LED_CONTROL_GPIO_Port, LED_CONTROL_Pin);
 8000ba0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <vTaskLeds+0x3c>)
 8000ba6:	f002 fbaa 	bl	80032fe <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000baa:	2064      	movs	r0, #100	; 0x64
 8000bac:	f008 fc3e 	bl	800942c <osDelay>
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000bb0:	e7e6      	b.n	8000b80 <vTaskLeds+0x8>
 8000bb2:	bf00      	nop
 8000bb4:	40020400 	.word	0x40020400

08000bb8 <vTaskWdgM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskWdgM */
void vTaskWdgM(void *argument)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskWdgM */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f008 fc33 	bl	800942c <osDelay>
 8000bc6:	e7fb      	b.n	8000bc0 <vTaskWdgM+0x8>

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <HAL_MspInit+0x54>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	4a11      	ldr	r2, [pc, #68]	; (8000c28 <HAL_MspInit+0x54>)
 8000be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x54>)
 8000bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	603b      	str	r3, [r7, #0]
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_MspInit+0x54>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a0a      	ldr	r2, [pc, #40]	; (8000c28 <HAL_MspInit+0x54>)
 8000c00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_MspInit+0x54>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c12:	2200      	movs	r2, #0
 8000c14:	210f      	movs	r1, #15
 8000c16:	f06f 0001 	mvn.w	r0, #1
 8000c1a:	f001 fd38 	bl	800268e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40023800 	.word	0x40023800

08000c2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b08a      	sub	sp, #40	; 0x28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2200      	movs	r2, #0
 8000c3a:	601a      	str	r2, [r3, #0]
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	609a      	str	r2, [r3, #8]
 8000c40:	60da      	str	r2, [r3, #12]
 8000c42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <HAL_SPI_MspInit+0xe0>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d15a      	bne.n	8000d04 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	4b2f      	ldr	r3, [pc, #188]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a2e      	ldr	r2, [pc, #184]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000c58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b2c      	ldr	r3, [pc, #176]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <HAL_SPI_MspInit+0xe4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c96:	2305      	movs	r3, #5
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9a:	f107 0314 	add.w	r3, r7, #20
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	481c      	ldr	r0, [pc, #112]	; (8000d14 <HAL_SPI_MspInit+0xe8>)
 8000ca2:	f002 f98f 	bl	8002fc4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000ca8:	4a1c      	ldr	r2, [pc, #112]	; (8000d1c <HAL_SPI_MspInit+0xf0>)
 8000caa:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000cb2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cb4:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cb6:	2240      	movs	r2, #64	; 0x40
 8000cb8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cba:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cc6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cce:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cdc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ce0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000ce8:	480b      	ldr	r0, [pc, #44]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cea:	f001 fd07 	bl	80026fc <HAL_DMA_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000cf4:	f7ff ff68 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000cfc:	649a      	str	r2, [r3, #72]	; 0x48
 8000cfe:	4a06      	ldr	r2, [pc, #24]	; (8000d18 <HAL_SPI_MspInit+0xec>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013000 	.word	0x40013000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40020000 	.word	0x40020000
 8000d18:	20000104 	.word	0x20000104
 8000d1c:	40026440 	.word	0x40026440

08000d20 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	; 0x28
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a19      	ldr	r2, [pc, #100]	; (8000da4 <HAL_TIM_Encoder_MspInit+0x84>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d12c      	bne.n	8000d9c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	4b18      	ldr	r3, [pc, #96]	; (8000da8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d4c:	f043 0301 	orr.w	r3, r3, #1
 8000d50:	6453      	str	r3, [r2, #68]	; 0x44
 8000d52:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a10      	ldr	r2, [pc, #64]	; (8000da8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	4619      	mov	r1, r3
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_TIM_Encoder_MspInit+0x8c>)
 8000d98:	f002 f914 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d9c:	bf00      	nop
 8000d9e:	3728      	adds	r7, #40	; 0x28
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40010000 	.word	0x40010000
 8000da8:	40023800 	.word	0x40023800
 8000dac:	40020000 	.word	0x40020000

08000db0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b08a      	sub	sp, #40	; 0x28
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a44      	ldr	r2, [pc, #272]	; (8000ee0 <HAL_UART_MspInit+0x130>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	f040 8081 	bne.w	8000ed6 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	4b42      	ldr	r3, [pc, #264]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ddc:	4a41      	ldr	r2, [pc, #260]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	6453      	str	r3, [r2, #68]	; 0x44
 8000de4:	4b3f      	ldr	r3, [pc, #252]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	2300      	movs	r3, #0
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	4b3b      	ldr	r3, [pc, #236]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df8:	4a3a      	ldr	r2, [pc, #232]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8000e00:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	f003 0301 	and.w	r3, r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e14:	4a33      	ldr	r2, [pc, #204]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <HAL_UART_MspInit+0x134>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4828      	ldr	r0, [pc, #160]	; (8000ee8 <HAL_UART_MspInit+0x138>)
 8000e46:	f002 f8bd 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4a:	2308      	movs	r3, #8
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4821      	ldr	r0, [pc, #132]	; (8000eec <HAL_UART_MspInit+0x13c>)
 8000e66:	f002 f8ad 	bl	8002fc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e6a:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e6c:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <HAL_UART_MspInit+0x144>)
 8000e6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000e70:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e76:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e7a:	2240      	movs	r2, #64	; 0x40
 8000e7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000eac:	f001 fc26 	bl	80026fc <HAL_DMA_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000eb6:	f7ff fe87 	bl	8000bc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34
 8000ec0:	4a0b      	ldr	r2, [pc, #44]	; (8000ef0 <HAL_UART_MspInit+0x140>)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2105      	movs	r1, #5
 8000eca:	2025      	movs	r0, #37	; 0x25
 8000ecc:	f001 fbdf 	bl	800268e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ed0:	2025      	movs	r0, #37	; 0x25
 8000ed2:	f001 fbf8 	bl	80026c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40011000 	.word	0x40011000
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400
 8000ef0:	200001f0 	.word	0x200001f0
 8000ef4:	400264b8 	.word	0x400264b8

08000ef8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <NMI_Handler+0x4>

08000efe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <HardFault_Handler+0x4>

08000f04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <MemManage_Handler+0x4>

08000f0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <BusFault_Handler+0x4>

08000f10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <UsageFault_Handler+0x4>

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f001 fa92 	bl	8002450 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f2c:	f00a faf6 	bl	800b51c <xTaskGetSchedulerState>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d001      	beq.n	8000f3a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f36:	f00b f9df 	bl	800c2f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8000f42:	2001      	movs	r0, #1
 8000f44:	f002 f9f6 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 8000f50:	2002      	movs	r0, #2
 8000f52:	f002 f9ef 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 8000f5e:	2004      	movs	r0, #4
 8000f60:	f002 f9e8 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 8000f6c:	2008      	movs	r0, #8
 8000f6e:	f002 f9e1 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <USART1_IRQHandler+0x10>)
 8000f7e:	f003 fc1d 	bl	80047bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200001ac 	.word	0x200001ac

08000f8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 8000f90:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f94:	f002 f9ce 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 8000f98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f9c:	f002 f9ca 	bl	8003334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream1);
 8000fa8:	4802      	ldr	r0, [pc, #8]	; (8000fb4 <DMA2_Stream1_IRQHandler+0x10>)
 8000faa:	f001 fd3f 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000250 	.word	0x20000250

08000fb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000fbc:	4802      	ldr	r0, [pc, #8]	; (8000fc8 <DMA2_Stream2_IRQHandler+0x10>)
 8000fbe:	f001 fd35 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000104 	.word	0x20000104

08000fcc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000fd0:	4802      	ldr	r0, [pc, #8]	; (8000fdc <DMA2_Stream7_IRQHandler+0x10>)
 8000fd2:	f001 fd2b 	bl	8002a2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001f0 	.word	0x200001f0

08000fe0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <_sbrk+0x5c>)
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <_sbrk+0x60>)
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <_sbrk+0x64>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d102      	bne.n	8001002 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <_sbrk+0x64>)
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <_sbrk+0x68>)
 8001000:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <_sbrk+0x64>)
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	429a      	cmp	r2, r3
 800100e:	d207      	bcs.n	8001020 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001010:	f00b fd4a 	bl	800caa8 <__errno>
 8001014:	4603      	mov	r3, r0
 8001016:	220c      	movs	r2, #12
 8001018:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101e:	e009      	b.n	8001034 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <_sbrk+0x64>)
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4413      	add	r3, r2
 800102e:	4a05      	ldr	r2, [pc, #20]	; (8001044 <_sbrk+0x64>)
 8001030:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001032:	68fb      	ldr	r3, [r7, #12]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20020000 	.word	0x20020000
 8001040:	00000400 	.word	0x00000400
 8001044:	200002cc 	.word	0x200002cc
 8001048:	20004f38 	.word	0x20004f38

0800104c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001050:	4b06      	ldr	r3, [pc, #24]	; (800106c <SystemInit+0x20>)
 8001052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001056:	4a05      	ldr	r2, [pc, #20]	; (800106c <SystemInit+0x20>)
 8001058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109a:	f7ff ffd7 	bl	800104c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f00b fd09 	bl	800cab4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fa6f 	bl	8000584 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80010b4:	0802ca9c 	.word	0x0802ca9c
  ldr r2, =_sbss
 80010b8:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80010bc:	20004f38 	.word	0x20004f38

080010c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC_IRQHandler>
	...

080010c4 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <setSPI_Size+0x84>)
 80010d0:	f993 3000 	ldrsb.w	r3, [r3]
 80010d4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d02e      	beq.n	800113a <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <setSPI_Size+0x88>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	4b1a      	ldr	r3, [pc, #104]	; (800114c <setSPI_Size+0x88>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ea:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 80010ec:	4a16      	ldr	r2, [pc, #88]	; (8001148 <setSPI_Size+0x84>)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d10c      	bne.n	8001114 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <setSPI_Size+0x88>)
 80010fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001100:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <setSPI_Size+0x88>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b10      	ldr	r3, [pc, #64]	; (800114c <setSPI_Size+0x88>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	e00a      	b.n	800112a <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <setSPI_Size+0x88>)
 8001116:	2200      	movs	r2, #0
 8001118:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <setSPI_Size+0x88>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b0a      	ldr	r3, [pc, #40]	; (800114c <setSPI_Size+0x88>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001128:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <setSPI_Size+0x88>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <setSPI_Size+0x88>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001138:	601a      	str	r2, [r3, #0]
  }
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	20000004 	.word	0x20000004
 800114c:	200000ac 	.word	0x200000ac

08001150 <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	460a      	mov	r2, r1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	4613      	mov	r3, r2
 800115e:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 8001160:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ffad 	bl	80010c4 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <setDMAMemMode+0x120>)
 800116c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001170:	461a      	mov	r2, r3
 8001172:	79bb      	ldrb	r3, [r7, #6]
 8001174:	429a      	cmp	r2, r3
 8001176:	d106      	bne.n	8001186 <setDMAMemMode+0x36>
 8001178:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <setDMAMemMode+0x120>)
 800117a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800117e:	461a      	mov	r2, r3
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	429a      	cmp	r2, r3
 8001184:	d06f      	beq.n	8001266 <setDMAMemMode+0x116>
    config.dma_sz =size;
 8001186:	f997 2006 	ldrsb.w	r2, [r7, #6]
 800118a:	4b39      	ldr	r3, [pc, #228]	; (8001270 <setDMAMemMode+0x120>)
 800118c:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800118e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001192:	4b37      	ldr	r3, [pc, #220]	; (8001270 <setDMAMemMode+0x120>)
 8001194:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 8001196:	4b37      	ldr	r3, [pc, #220]	; (8001274 <setDMAMemMode+0x124>)
 8001198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <setDMAMemMode+0x124>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0201 	bic.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 80011aa:	bf00      	nop
 80011ac:	4b31      	ldr	r3, [pc, #196]	; (8001274 <setDMAMemMode+0x124>)
 80011ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1f7      	bne.n	80011ac <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d10f      	bne.n	80011e2 <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <setDMAMemMode+0x124>)
 80011c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011ca:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <setDMAMemMode+0x124>)
 80011ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <setDMAMemMode+0x124>)
 80011d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e00d      	b.n	80011fe <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <setDMAMemMode+0x124>)
 80011e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <setDMAMemMode+0x124>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <setDMAMemMode+0x124>)
 80011f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011fc:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d116      	bne.n	8001232 <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <setDMAMemMode+0x124>)
 8001206:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800120c:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <setDMAMemMode+0x124>)
 8001210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001212:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001216:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <setDMAMemMode+0x124>)
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001224:	4b13      	ldr	r3, [pc, #76]	; (8001274 <setDMAMemMode+0x124>)
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	e011      	b.n	8001256 <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <setDMAMemMode+0x124>)
 8001234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <setDMAMemMode+0x124>)
 800123c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 8001242:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <setDMAMemMode+0x124>)
 8001244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <setDMAMemMode+0x124>)
 800124c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001254:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <setDMAMemMode+0x124>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <setDMAMemMode+0x124>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001264:	601a      	str	r2, [r3, #0]
  }
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000004 	.word	0x20000004
 8001274:	200000ac 	.word	0x200000ac

08001278 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	460b      	mov	r3, r1
 8001282:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff ff1d 	bl	80010c4 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 800128a:	4b12      	ldr	r3, [pc, #72]	; (80012d4 <LCD_WriteCommand+0x5c>)
 800128c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001290:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 8001292:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <LCD_WriteCommand+0x60>)
 8001294:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001298:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800129a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800129e:	2201      	movs	r2, #1
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <LCD_WriteCommand+0x64>)
 80012a4:	f002 fd4b 	bl	8003d3e <HAL_SPI_Transmit>
  if(argc){
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 80012ae:	4b09      	ldr	r3, [pc, #36]	; (80012d4 <LCD_WriteCommand+0x5c>)
 80012b0:	2210      	movs	r2, #16
 80012b2:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	1c59      	adds	r1, r3, #1
 80012b8:	78fb      	ldrb	r3, [r7, #3]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012c0:	4806      	ldr	r0, [pc, #24]	; (80012dc <LCD_WriteCommand+0x64>)
 80012c2:	f002 fd3c 	bl	8003d3e <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <LCD_WriteCommand+0x60>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	619a      	str	r2, [r3, #24]
#endif
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40020000 	.word	0x40020000
 80012d8:	40020400 	.word	0x40020400
 80012dc:	200000ac 	.word	0x200000ac

080012e0 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 80012ea:	4b2e      	ldr	r3, [pc, #184]	; (80013a4 <LCD_WriteData+0xc4>)
 80012ec:	2210      	movs	r2, #16
 80012ee:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	; (80013a8 <LCD_WriteData+0xc8>)
 80012f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012f6:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80012f8:	e049      	b.n	800138e <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001300:	4293      	cmp	r3, r2
 8001302:	bf28      	it	cs
 8001304:	4613      	movcs	r3, r2
 8001306:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d924      	bls.n	8001358 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	461a      	mov	r2, r3
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4825      	ldr	r0, [pc, #148]	; (80013ac <LCD_WriteData+0xcc>)
 8001316:	f002 fe4f 	bl	8003fb8 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 800131a:	bf00      	nop
 800131c:	4b23      	ldr	r3, [pc, #140]	; (80013ac <LCD_WriteData+0xcc>)
 800131e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001320:	4618      	mov	r0, r3
 8001322:	f001 fd61 	bl	8002de8 <HAL_DMA_GetState>
 8001326:	4603      	mov	r3, r0
 8001328:	2b01      	cmp	r3, #1
 800132a:	d1f7      	bne.n	800131c <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <LCD_WriteData+0xd0>)
 800132e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d127      	bne.n	8001386 <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <LCD_WriteData+0xd0>)
 8001338:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d104      	bne.n	800134a <LCD_WriteData+0x6a>
          buff += chunk_size;
 8001340:	89fb      	ldrh	r3, [r7, #14]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	607b      	str	r3, [r7, #4]
 8001348:	e01d      	b.n	8001386 <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	461a      	mov	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	607b      	str	r3, [r7, #4]
 8001356:	e016      	b.n	8001386 <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001358:	89fa      	ldrh	r2, [r7, #14]
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	4812      	ldr	r0, [pc, #72]	; (80013ac <LCD_WriteData+0xcc>)
 8001362:	f002 fcec 	bl	8003d3e <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001366:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <LCD_WriteData+0xd0>)
 8001368:	f993 3000 	ldrsb.w	r3, [r3]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d104      	bne.n	800137a <LCD_WriteData+0x9a>
        buff += chunk_size;
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	e005      	b.n	8001386 <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 800137a:	89fb      	ldrh	r3, [r7, #14]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	461a      	mov	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001386:	89fb      	ldrh	r3, [r7, #14]
 8001388:	683a      	ldr	r2, [r7, #0]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d1b2      	bne.n	80012fa <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <LCD_WriteData+0xc8>)
 8001396:	2201      	movs	r2, #1
 8001398:	619a      	str	r2, [r3, #24]
#endif
}
 800139a:	bf00      	nop
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	200000ac 	.word	0x200000ac
 80013b0:	20000004 	.word	0x20000004

080013b4 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b08b      	sub	sp, #44	; 0x2c
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4604      	mov	r4, r0
 80013bc:	4608      	mov	r0, r1
 80013be:	4611      	mov	r1, r2
 80013c0:	461a      	mov	r2, r3
 80013c2:	4623      	mov	r3, r4
 80013c4:	80fb      	strh	r3, [r7, #6]
 80013c6:	4603      	mov	r3, r0
 80013c8:	80bb      	strh	r3, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80013d2:	88fb      	ldrh	r3, [r7, #6]
 80013d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80013d6:	887b      	ldrh	r3, [r7, #2]
 80013d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80013da:	88bb      	ldrh	r3, [r7, #4]
 80013dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80013de:	883b      	ldrh	r3, [r7, #0]
 80013e0:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80013e2:	232a      	movs	r3, #42	; 0x2a
 80013e4:	763b      	strb	r3, [r7, #24]
 80013e6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013ea:	121b      	asrs	r3, r3, #8
 80013ec:	b21b      	sxth	r3, r3
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	767b      	strb	r3, [r7, #25]
 80013f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	76bb      	strb	r3, [r7, #26]
 80013f8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013fc:	121b      	asrs	r3, r3, #8
 80013fe:	b21b      	sxth	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	76fb      	strb	r3, [r7, #27]
 8001404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001406:	b2db      	uxtb	r3, r3
 8001408:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	2104      	movs	r1, #4
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff31 	bl	8001278 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 8001416:	232b      	movs	r3, #43	; 0x2b
 8001418:	743b      	strb	r3, [r7, #16]
 800141a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800141e:	121b      	asrs	r3, r3, #8
 8001420:	b21b      	sxth	r3, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	747b      	strb	r3, [r7, #17]
 8001426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001428:	b2db      	uxtb	r3, r3
 800142a:	74bb      	strb	r3, [r7, #18]
 800142c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001430:	121b      	asrs	r3, r3, #8
 8001432:	b21b      	sxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	74fb      	strb	r3, [r7, #19]
 8001438:	8c3b      	ldrh	r3, [r7, #32]
 800143a:	b2db      	uxtb	r3, r3
 800143c:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800143e:	f107 0310 	add.w	r3, r7, #16
 8001442:	2104      	movs	r1, #4
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff17 	bl	8001278 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800144a:	232c      	movs	r3, #44	; 0x2c
 800144c:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800144e:	f107 030c 	add.w	r3, r7, #12
 8001452:	2100      	movs	r1, #0
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff0f 	bl	8001278 <LCD_WriteCommand>
  }
}
 800145a:	bf00      	nop
 800145c:	372c      	adds	r7, #44	; 0x2c
 800145e:	46bd      	mov	sp, r7
 8001460:	bd90      	pop	{r4, r7, pc}
	...

08001464 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
 800146e:	460b      	mov	r3, r1
 8001470:	80bb      	strh	r3, [r7, #4]
 8001472:	4613      	mov	r3, r2
 8001474:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147a:	2b00      	cmp	r3, #0
 800147c:	db30      	blt.n	80014e0 <LCD_DrawPixel+0x7c>
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	2bef      	cmp	r3, #239	; 0xef
 8001484:	dc2c      	bgt.n	80014e0 <LCD_DrawPixel+0x7c>
 8001486:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db28      	blt.n	80014e0 <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 800148e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001492:	2bef      	cmp	r3, #239	; 0xef
 8001494:	dc24      	bgt.n	80014e0 <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001496:	887b      	ldrh	r3, [r7, #2]
 8001498:	0a1b      	lsrs	r3, r3, #8
 800149a:	b29b      	uxth	r3, r3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	733b      	strb	r3, [r7, #12]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 80014a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80014ae:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014b2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014b6:	f7ff ff7d 	bl	80013b4 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 80014ba:	4b0b      	ldr	r3, [pc, #44]	; (80014e8 <LCD_DrawPixel+0x84>)
 80014bc:	2210      	movs	r2, #16
 80014be:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <LCD_DrawPixel+0x88>)
 80014c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014c6:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80014c8:	f107 010c 	add.w	r1, r7, #12
 80014cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014d0:	2202      	movs	r2, #2
 80014d2:	4807      	ldr	r0, [pc, #28]	; (80014f0 <LCD_DrawPixel+0x8c>)
 80014d4:	f002 fc33 	bl	8003d3e <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <LCD_DrawPixel+0x88>)
 80014da:	2201      	movs	r2, #1
 80014dc:	619a      	str	r2, [r3, #24]
 80014de:	e000      	b.n	80014e2 <LCD_DrawPixel+0x7e>
    return;
 80014e0:	bf00      	nop
#endif
}
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	200000ac 	.word	0x200000ac

080014f4 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b0a4      	sub	sp, #144	; 0x90
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d905      	bls.n	8001512 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 8001506:	1cbb      	adds	r3, r7, #2
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fee8 	bl	80012e0 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8001510:	e02f      	b.n	8001572 <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 8001512:	2300      	movs	r3, #0
 8001514:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001518:	e00c      	b.n	8001534 <LCD_FillPixels+0x40>
      fill[t]=color;
 800151a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	3390      	adds	r3, #144	; 0x90
 8001524:	443b      	add	r3, r7
 8001526:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 800152a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800152e:	3301      	adds	r3, #1
 8001530:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001534:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b40      	cmp	r3, #64	; 0x40
 800153c:	bf28      	it	cs
 800153e:	2340      	movcs	r3, #64	; 0x40
 8001540:	429a      	cmp	r2, r3
 8001542:	d3ea      	bcc.n	800151a <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001544:	e012      	b.n	800156c <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b40      	cmp	r3, #64	; 0x40
 800154a:	bf28      	it	cs
 800154c:	2340      	movcs	r3, #64	; 0x40
 800154e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 8001552:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff febf 	bl	80012e0 <LCD_WriteData>
      pixels-=sz;
 8001562:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1e9      	bne.n	8001546 <LCD_FillPixels+0x52>
}
 8001572:	bf00      	nop
 8001574:	3790      	adds	r7, #144	; 0x90
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 800157c:	b590      	push	{r4, r7, lr}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4604      	mov	r4, r0
 8001584:	4608      	mov	r0, r1
 8001586:	4611      	mov	r1, r2
 8001588:	461a      	mov	r2, r3
 800158a:	4623      	mov	r3, r4
 800158c:	80fb      	strh	r3, [r7, #6]
 800158e:	4603      	mov	r3, r0
 8001590:	80bb      	strh	r3, [r7, #4]
 8001592:	460b      	mov	r3, r1
 8001594:	807b      	strh	r3, [r7, #2]
 8001596:	4613      	mov	r3, r2
 8001598:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800159a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800159e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015a2:	d105      	bne.n	80015b0 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 80015a4:	2100      	movs	r1, #0
 80015a6:	2001      	movs	r0, #1
 80015a8:	f7ff fdd2 	bl	8001150 <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e011      	b.n	80015d4 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80015b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015b4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015b8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015bc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015c0:	f7ff fef8 	bl	80013b4 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 80015c4:	2101      	movs	r1, #1
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fdc2 	bl	8001150 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 80015cc:	4b03      	ldr	r3, [pc, #12]	; (80015dc <LCD_FillArea+0x60>)
 80015ce:	2210      	movs	r2, #16
 80015d0:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 80015d2:	4b03      	ldr	r3, [pc, #12]	; (80015e0 <LCD_FillArea+0x64>)
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd90      	pop	{r4, r7, pc}
 80015dc:	40020000 	.word	0x40020000
 80015e0:	080014f5 	.word	0x080014f5

080015e4 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80015e4:	b590      	push	{r4, r7, lr}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4604      	mov	r4, r0
 80015ec:	4608      	mov	r0, r1
 80015ee:	4611      	mov	r1, r2
 80015f0:	461a      	mov	r2, r3
 80015f2:	4623      	mov	r3, r4
 80015f4:	80fb      	strh	r3, [r7, #6]
 80015f6:	4603      	mov	r3, r0
 80015f8:	80bb      	strh	r3, [r7, #4]
 80015fa:	460b      	mov	r3, r1
 80015fc:	807b      	strh	r3, [r7, #2]
 80015fe:	4613      	mov	r3, r2
 8001600:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	88fb      	ldrh	r3, [r7, #6]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	3301      	adds	r3, #1
 800160a:	4619      	mov	r1, r3
 800160c:	883a      	ldrh	r2, [r7, #0]
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	3301      	adds	r3, #1
 8001614:	fb01 f303 	mul.w	r3, r1, r3
 8001618:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 800161a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800161e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001622:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001626:	f9b7 3000 	ldrsh.w	r3, [r7]
 800162a:	f7ff fec3 	bl	80013b4 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 800162e:	2101      	movs	r1, #1
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fd8d 	bl	8001150 <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 8001636:	8c3b      	ldrh	r3, [r7, #32]
 8001638:	4619      	mov	r1, r3
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff ff5a 	bl	80014f4 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 8001640:	2100      	movs	r1, #0
 8001642:	2001      	movs	r0, #1
 8001644:	f7ff fd84 	bl	8001150 <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}

08001652 <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 8001652:	b590      	push	{r4, r7, lr}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	603a      	str	r2, [r7, #0]
 800165c:	80fb      	strh	r3, [r7, #6]
 800165e:	460b      	mov	r3, r1
 8001660:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	88db      	ldrh	r3, [r3, #6]
 800166c:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	2bef      	cmp	r3, #239	; 0xef
 8001672:	d837      	bhi.n	80016e4 <LCD_DrawImage+0x92>
 8001674:	88bb      	ldrh	r3, [r7, #4]
 8001676:	2bef      	cmp	r3, #239	; 0xef
 8001678:	d834      	bhi.n	80016e4 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 800167a:	88fa      	ldrh	r2, [r7, #6]
 800167c:	89fb      	ldrh	r3, [r7, #14]
 800167e:	4413      	add	r3, r2
 8001680:	2bf0      	cmp	r3, #240	; 0xf0
 8001682:	dc31      	bgt.n	80016e8 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001684:	88ba      	ldrh	r2, [r7, #4]
 8001686:	89bb      	ldrh	r3, [r7, #12]
 8001688:	4413      	add	r3, r2
 800168a:	2bf0      	cmp	r3, #240	; 0xf0
 800168c:	dc2e      	bgt.n	80016ec <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7a1b      	ldrb	r3, [r3, #8]
 8001692:	2b10      	cmp	r3, #16
 8001694:	d12c      	bne.n	80016f0 <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001696:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800169a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800169e:	88fa      	ldrh	r2, [r7, #6]
 80016a0:	89fb      	ldrh	r3, [r7, #14]
 80016a2:	4413      	add	r3, r2
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	3b01      	subs	r3, #1
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	b21c      	sxth	r4, r3
 80016ac:	88ba      	ldrh	r2, [r7, #4]
 80016ae:	89bb      	ldrh	r3, [r7, #12]
 80016b0:	4413      	add	r3, r2
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	4622      	mov	r2, r4
 80016bc:	f7ff fe7a 	bl	80013b4 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 80016c0:	2101      	movs	r1, #1
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff fd44 	bl	8001150 <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	89ba      	ldrh	r2, [r7, #12]
 80016d0:	fb02 f303 	mul.w	r3, r2, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff fe03 	bl	80012e0 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80016da:	2100      	movs	r1, #0
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fd37 	bl	8001150 <setDMAMemMode>
 80016e2:	e006      	b.n	80016f2 <LCD_DrawImage+0xa0>
    return;
 80016e4:	bf00      	nop
 80016e6:	e004      	b.n	80016f2 <LCD_DrawImage+0xa0>
    return;
 80016e8:	bf00      	nop
 80016ea:	e002      	b.n	80016f2 <LCD_DrawImage+0xa0>
    return;
 80016ec:	bf00      	nop
 80016ee:	e000      	b.n	80016f2 <LCD_DrawImage+0xa0>
    return;
 80016f0:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd90      	pop	{r4, r7, pc}

080016f8 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	4604      	mov	r4, r0
 8001700:	4608      	mov	r0, r1
 8001702:	4611      	mov	r1, r2
 8001704:	461a      	mov	r2, r3
 8001706:	4623      	mov	r3, r4
 8001708:	80fb      	strh	r3, [r7, #6]
 800170a:	4603      	mov	r3, r0
 800170c:	80bb      	strh	r3, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]
 8001712:	4613      	mov	r3, r2
 8001714:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8001716:	88fa      	ldrh	r2, [r7, #6]
 8001718:	887b      	ldrh	r3, [r7, #2]
 800171a:	429a      	cmp	r2, r3
 800171c:	d10a      	bne.n	8001734 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800171e:	88ba      	ldrh	r2, [r7, #4]
 8001720:	883b      	ldrh	r3, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d918      	bls.n	8001758 <LCD_DrawLine+0x60>
 8001726:	88bb      	ldrh	r3, [r7, #4]
 8001728:	81bb      	strh	r3, [r7, #12]
 800172a:	883b      	ldrh	r3, [r7, #0]
 800172c:	80bb      	strh	r3, [r7, #4]
 800172e:	89bb      	ldrh	r3, [r7, #12]
 8001730:	803b      	strh	r3, [r7, #0]
 8001732:	e011      	b.n	8001758 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8001734:	88ba      	ldrh	r2, [r7, #4]
 8001736:	883b      	ldrh	r3, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d10a      	bne.n	8001752 <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 800173c:	88fa      	ldrh	r2, [r7, #6]
 800173e:	887b      	ldrh	r3, [r7, #2]
 8001740:	429a      	cmp	r2, r3
 8001742:	d909      	bls.n	8001758 <LCD_DrawLine+0x60>
 8001744:	88fb      	ldrh	r3, [r7, #6]
 8001746:	81fb      	strh	r3, [r7, #14]
 8001748:	887b      	ldrh	r3, [r7, #2]
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	807b      	strh	r3, [r7, #2]
 8001750:	e002      	b.n	8001758 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001756:	e009      	b.n	800176c <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001758:	883c      	ldrh	r4, [r7, #0]
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	88b9      	ldrh	r1, [r7, #4]
 800175e:	88f8      	ldrh	r0, [r7, #6]
 8001760:	8c3b      	ldrh	r3, [r7, #32]
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4623      	mov	r3, r4
 8001766:	f7ff ff3d 	bl	80015e4 <LCD_Fill>
  return UG_RESULT_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3714      	adds	r7, #20
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}

08001774 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4603      	mov	r3, r0
 8001780:	81fb      	strh	r3, [r7, #14]
 8001782:	460b      	mov	r3, r1
 8001784:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f003 ff68 	bl	800565c <UG_FontSelect>
  UG_SetForecolor(color);
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	4618      	mov	r0, r3
 8001790:	f004 fdac 	bl	80062ec <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001794:	8bbb      	ldrh	r3, [r7, #28]
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fdba 	bl	8006310 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 800179c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a0:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f004 fd18 	bl	80061dc <UG_PutString>
}
 80017ac:	bf00      	nop
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <LCD_setPower+0x14>
 80017c4:	2329      	movs	r3, #41	; 0x29
 80017c6:	e000      	b.n	80017ca <LCD_setPower+0x16>
 80017c8:	2328      	movs	r3, #40	; 0x28
 80017ca:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80017cc:	f107 030c 	add.w	r3, r7, #12
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7ff fd50 	bl	8001278 <LCD_WriteCommand>
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <LCD_Update>:

static void LCD_Update(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80017e4:	2100      	movs	r1, #0
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fcb2 	bl	8001150 <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80017f6:	4b28      	ldr	r3, [pc, #160]	; (8001898 <LCD_init+0xa8>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 80017fc:	4b27      	ldr	r3, [pc, #156]	; (800189c <LCD_init+0xac>)
 80017fe:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001802:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 8001804:	2019      	movs	r0, #25
 8001806:	f000 fe43 	bl	8002490 <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 800180a:	4b24      	ldr	r3, [pc, #144]	; (800189c <LCD_init+0xac>)
 800180c:	2240      	movs	r2, #64	; 0x40
 800180e:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 8001810:	20c8      	movs	r0, #200	; 0xc8
 8001812:	f000 fe3d 	bl	8002490 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8001816:	4922      	ldr	r1, [pc, #136]	; (80018a0 <LCD_init+0xb0>)
 8001818:	4822      	ldr	r0, [pc, #136]	; (80018a4 <LCD_init+0xb4>)
 800181a:	f003 fead 	bl	8005578 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 800181e:	4922      	ldr	r1, [pc, #136]	; (80018a8 <LCD_init+0xb8>)
 8001820:	2000      	movs	r0, #0
 8001822:	f005 fd35 	bl	8007290 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8001826:	4921      	ldr	r1, [pc, #132]	; (80018ac <LCD_init+0xbc>)
 8001828:	2001      	movs	r0, #1
 800182a:	f005 fd31 	bl	8007290 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 800182e:	4920      	ldr	r1, [pc, #128]	; (80018b0 <LCD_init+0xc0>)
 8001830:	2002      	movs	r0, #2
 8001832:	f005 fd2d 	bl	8007290 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8001836:	491f      	ldr	r1, [pc, #124]	; (80018b4 <LCD_init+0xc4>)
 8001838:	2003      	movs	r0, #3
 800183a:	f005 fd29 	bl	8007290 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 800183e:	2000      	movs	r0, #0
 8001840:	f004 fd94 	bl	800636c <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001844:	2000      	movs	r0, #0
 8001846:	f004 fda5 	bl	8006394 <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 800184a:	2300      	movs	r3, #0
 800184c:	80fb      	strh	r3, [r7, #6]
 800184e:	e013      	b.n	8001878 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	3301      	adds	r3, #1
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <LCD_init+0xc8>)
 8001856:	441a      	add	r2, r3
 8001858:	88fb      	ldrh	r3, [r7, #6]
 800185a:	4917      	ldr	r1, [pc, #92]	; (80018b8 <LCD_init+0xc8>)
 800185c:	5ccb      	ldrb	r3, [r1, r3]
 800185e:	4619      	mov	r1, r3
 8001860:	4610      	mov	r0, r2
 8001862:	f7ff fd09 	bl	8001278 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <LCD_init+0xc8>)
 800186a:	5cd3      	ldrb	r3, [r2, r3]
 800186c:	b29a      	uxth	r2, r3
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	4413      	add	r3, r2
 8001872:	b29b      	uxth	r3, r3
 8001874:	3302      	adds	r3, #2
 8001876:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	2b4b      	cmp	r3, #75	; 0x4b
 800187c:	d9e8      	bls.n	8001850 <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 800187e:	2000      	movs	r0, #0
 8001880:	f003 fefc 	bl	800567c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ff95 	bl	80017b4 <LCD_setPower>
  UG_Update();
 800188a:	f005 fd23 	bl	80072d4 <UG_Update>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40020400 	.word	0x40020400
 800189c:	40020000 	.word	0x40020000
 80018a0:	20000008 	.word	0x20000008
 80018a4:	200002f0 	.word	0x200002f0
 80018a8:	080016f9 	.word	0x080016f9
 80018ac:	080015e5 	.word	0x080015e5
 80018b0:	0800157d 	.word	0x0800157d
 80018b4:	08001653 	.word	0x08001653
 80018b8:	0800d7cc 	.word	0x0800d7cc

080018bc <clearTime>:


#define DEFAULT_FONT FONT_6X8

static uint32_t draw_time=0;
static void clearTime(void){
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  draw_time=HAL_GetTick();
 80018c0:	f000 fdda 	bl	8002478 <HAL_GetTick>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4a02      	ldr	r2, [pc, #8]	; (80018d0 <clearTime+0x14>)
 80018c8:	6013      	str	r3, [r2, #0]
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	2000034c 	.word	0x2000034c

080018d4 <printTime>:
static void printTime(void){
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
  char str[8];
  uint8_t t = UG_FontGetTransparency();
 80018da:	f004 fd81 	bl	80063e0 <UG_FontGetTransparency>
 80018de:	4603      	mov	r3, r0
 80018e0:	73fb      	strb	r3, [r7, #15]
  sprintf(str,"%lums",HAL_GetTick()-draw_time);
 80018e2:	f000 fdc9 	bl	8002478 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	4b12      	ldr	r3, [pc, #72]	; (8001934 <printTime+0x60>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	1ad2      	subs	r2, r2, r3
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4911      	ldr	r1, [pc, #68]	; (8001938 <printTime+0x64>)
 80018f2:	4618      	mov	r0, r3
 80018f4:	f00b faaa 	bl	800ce4c <siprintf>
  UG_FontSelect(DEFAULT_FONT);
 80018f8:	4810      	ldr	r0, [pc, #64]	; (800193c <printTime+0x68>)
 80018fa:	f003 feaf 	bl	800565c <UG_FontSelect>
  UG_SetForecolor(C_YELLOW);
 80018fe:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001902:	f004 fcf3 	bl	80062ec <UG_SetForecolor>
  UG_SetBackcolor(C_BLACK);
 8001906:	2000      	movs	r0, #0
 8001908:	f004 fd02 	bl	8006310 <UG_SetBackcolor>
  UG_FontSetTransparency(0);
 800190c:	2000      	movs	r0, #0
 800190e:	f004 fd55 	bl	80063bc <UG_FontSetTransparency>
  UG_PutString(10, 15, str);
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	461a      	mov	r2, r3
 8001916:	210f      	movs	r1, #15
 8001918:	200a      	movs	r0, #10
 800191a:	f004 fc5f 	bl	80061dc <UG_PutString>
  UG_FontSetTransparency(t);
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fd4b 	bl	80063bc <UG_FontSetTransparency>
  UG_Update();
 8001926:	f005 fcd5 	bl	80072d4 <UG_Update>
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	2000034c 	.word	0x2000034c
 8001938:	0800d594 	.word	0x0800d594
 800193c:	08020114 	.word	0x08020114

08001940 <LCD_Test>:
static UG_BUTTON button_1;
static UG_TEXTBOX textbox_1;
static UG_OBJECT obj_buff_wnd_1[MAX_OBJECTS];
static UG_PROGRESS pgb;
void LCD_Test(void)
{
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b091      	sub	sp, #68	; 0x44
 8001944:	af04      	add	r7, sp, #16

  int16_t x=40,y=40,rad=20,count=0;
 8001946:	2328      	movs	r3, #40	; 0x28
 8001948:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800194a:	2328      	movs	r3, #40	; 0x28
 800194c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800194e:	2314      	movs	r3, #20
 8001950:	827b      	strh	r3, [r7, #18]
 8001952:	2300      	movs	r3, #0
 8001954:	857b      	strh	r3, [r7, #42]	; 0x2a
  int8_t xadd=2,yadd=2,dstep=2;
 8001956:	2302      	movs	r3, #2
 8001958:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800195c:	2302      	movs	r3, #2
 800195e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001962:	2302      	movs	r3, #2
 8001964:	747b      	strb	r3, [r7, #17]
  uint8_t r=0,g=0,b=0, t;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t start, show;

  UG_FontSetTransparency(1);
 8001978:	2001      	movs	r0, #1
 800197a:	f004 fd1f 	bl	80063bc <UG_FontSetTransparency>

  UG_FillScreen(C_BLACK);
 800197e:	2000      	movs	r0, #0
 8001980:	f003 fe7c 	bl	800567c <UG_FillScreen>

  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001984:	2300      	movs	r3, #0
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	4bc0      	ldr	r3, [pc, #768]	; (8001c90 <LCD_Test+0x350>)
 8001990:	4ac0      	ldr	r2, [pc, #768]	; (8001c94 <LCD_Test+0x354>)
 8001992:	2138      	movs	r1, #56	; 0x38
 8001994:	2032      	movs	r0, #50	; 0x32
 8001996:	f7ff feed 	bl	8001774 <LCD_PutStr>
  HAL_Delay(500);
 800199a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800199e:	f000 fd77 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 80019a2:	2000      	movs	r0, #0
 80019a4:	f003 fe6a 	bl	800567c <UG_FillScreen>
  show=start=HAL_GetTick();
 80019a8:	f000 fd66 	bl	8002478 <HAL_GetTick>
 80019ac:	60f8      	str	r0, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	623b      	str	r3, [r7, #32]
  t = UG_FontGetTransparency();
 80019b2:	f004 fd15 	bl	80063e0 <UG_FontGetTransparency>
 80019b6:	4603      	mov	r3, r0
 80019b8:	72fb      	strb	r3, [r7, #11]
  while(HAL_GetTick()-start<4000){
 80019ba:	e0a8      	b.n	8001b0e <LCD_Test+0x1ce>
    UG_FillFrame(x-rad, y-rad, x+rad, y+rad, C_BLACK);
 80019bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80019be:	8a7b      	ldrh	r3, [r7, #18]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	b218      	sxth	r0, r3
 80019c6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019c8:	8a7b      	ldrh	r3, [r7, #18]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	b219      	sxth	r1, r3
 80019d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80019d2:	8a7b      	ldrh	r3, [r7, #18]
 80019d4:	4413      	add	r3, r2
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	b21c      	sxth	r4, r3
 80019da:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80019dc:	8a7b      	ldrh	r3, [r7, #18]
 80019de:	4413      	add	r3, r2
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	b21b      	sxth	r3, r3
 80019e4:	2200      	movs	r2, #0
 80019e6:	9200      	str	r2, [sp, #0]
 80019e8:	4622      	mov	r2, r4
 80019ea:	f003 fe6b 	bl	80056c4 <UG_FillFrame>
    x+=xadd;
 80019ee:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019f6:	4413      	add	r3, r2
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y+=yadd;
 80019fc:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a04:	4413      	add	r3, r2
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x-rad<1){
 8001a0a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	dc0a      	bgt.n	8001a2e <LCD_Test+0xee>
      xadd=dstep;
 8001a18:	7c7b      	ldrb	r3, [r7, #17]
 8001a1a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001a1e:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001a2c:	e012      	b.n	8001a54 <LCD_Test+0x114>
    }
    else if(x+rad>(LCD_WIDTH-1)){
 8001a2e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8001a32:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a36:	4413      	add	r3, r2
 8001a38:	2bef      	cmp	r3, #239	; 0xef
 8001a3a:	dd0b      	ble.n	8001a54 <LCD_Test+0x114>
      xadd=-dstep;
 8001a3c:	7c7b      	ldrb	r3, [r7, #17]
 8001a3e:	425b      	negs	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001a46:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a4a:	b29a      	uxth	r2, r3
 8001a4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a4e:	4413      	add	r3, r2
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if(y-rad<1){
 8001a54:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001a58:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	dc0a      	bgt.n	8001a78 <LCD_Test+0x138>
      yadd=dstep;
 8001a62:	7c7b      	ldrb	r3, [r7, #17]
 8001a64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001a68:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a70:	4413      	add	r3, r2
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001a76:	e012      	b.n	8001a9e <LCD_Test+0x15e>
    }
    else if(y+rad>(LCD_HEIGHT-1)){
 8001a78:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001a7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a80:	4413      	add	r3, r2
 8001a82:	2bef      	cmp	r3, #239	; 0xef
 8001a84:	dd0b      	ble.n	8001a9e <LCD_Test+0x15e>
      yadd=-dstep;
 8001a86:	7c7b      	ldrb	r3, [r7, #17]
 8001a88:	425b      	negs	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001a90:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a98:	4413      	add	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    UG_FillCircle(x, y, rad, C_WHITE);
 8001a9e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001aa2:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001aa6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001aaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aae:	f004 f839 	bl	8005b24 <UG_FillCircle>
    UG_FontSetTransparency(0);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f004 fc82 	bl	80063bc <UG_FontSetTransparency>
    LCD_PutStr(0, 0, str, DEFAULT_FONT, C_RED, C_BLACK);
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ac0:	9300      	str	r3, [sp, #0]
 8001ac2:	4b73      	ldr	r3, [pc, #460]	; (8001c90 <LCD_Test+0x350>)
 8001ac4:	4a74      	ldr	r2, [pc, #464]	; (8001c98 <LCD_Test+0x358>)
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff fe53 	bl	8001774 <LCD_PutStr>
    UG_FontSetTransparency(t);
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f004 fc73 	bl	80063bc <UG_FontSetTransparency>
    UG_Update();
 8001ad6:	f005 fbfd 	bl	80072d4 <UG_Update>
    count++;
 8001ada:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(HAL_GetTick()-show>999){
 8001ae6:	f000 fcc7 	bl	8002478 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001af4:	d30b      	bcc.n	8001b0e <LCD_Test+0x1ce>
      show=HAL_GetTick();
 8001af6:	f000 fcbf 	bl	8002478 <HAL_GetTick>
 8001afa:	6238      	str	r0, [r7, #32]
      sprintf(str,"%dFPS",count);
 8001afc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b00:	461a      	mov	r2, r3
 8001b02:	4966      	ldr	r1, [pc, #408]	; (8001c9c <LCD_Test+0x35c>)
 8001b04:	4864      	ldr	r0, [pc, #400]	; (8001c98 <LCD_Test+0x358>)
 8001b06:	f00b f9a1 	bl	800ce4c <siprintf>
      count=0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	857b      	strh	r3, [r7, #42]	; 0x2a
  while(HAL_GetTick()-start<4000){
 8001b0e:	f000 fcb3 	bl	8002478 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001b1c:	f4ff af4e 	bcc.w	80019bc <LCD_Test+0x7c>
    }
  }

  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b26:	e019      	b.n	8001b5c <LCD_Test+0x21c>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b2c:	02db      	lsls	r3, r3, #11
 8001b2e:	b21a      	sxth	r2, r3
 8001b30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b34:	015b      	lsls	r3, r3, #5
 8001b36:	b21b      	sxth	r3, r3
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	b21a      	sxth	r2, r3
 8001b3c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b40:	b21b      	sxth	r3, r3
 8001b42:	4313      	orrs	r3, r2
 8001b44:	b21b      	sxth	r3, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f003 fd97 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001b4e:	f005 fbc1 	bl	80072d4 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001b52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b56:	3301      	adds	r3, #1
 8001b58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b60:	2b1f      	cmp	r3, #31
 8001b62:	d9e1      	bls.n	8001b28 <LCD_Test+0x1e8>
  }
  r=31;
 8001b64:	231f      	movs	r3, #31
 8001b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b70:	e019      	b.n	8001ba6 <LCD_Test+0x266>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001b72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b76:	02db      	lsls	r3, r3, #11
 8001b78:	b21a      	sxth	r2, r3
 8001b7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b7e:	015b      	lsls	r3, r3, #5
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	4313      	orrs	r3, r2
 8001b84:	b21a      	sxth	r2, r3
 8001b86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b8a:	b21b      	sxth	r3, r3
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	b21b      	sxth	r3, r3
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f003 fd72 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001b98:	f005 fb9c 	bl	80072d4 <UG_Update>
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001baa:	2b3f      	cmp	r3, #63	; 0x3f
 8001bac:	d9e1      	bls.n	8001b72 <LCD_Test+0x232>
  }
  g=63;
 8001bae:	233f      	movs	r3, #63	; 0x3f
 8001bb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001bb4:	231c      	movs	r3, #28
 8001bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bba:	e019      	b.n	8001bf0 <LCD_Test+0x2b0>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bc0:	02db      	lsls	r3, r3, #11
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fd4d 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001be2:	f005 fb77 	bl	80072d4 <UG_Update>
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001be6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bea:	3b01      	subs	r3, #1
 8001bec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1e1      	bne.n	8001bbc <LCD_Test+0x27c>
  }
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001bfe:	e019      	b.n	8001c34 <LCD_Test+0x2f4>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c04:	02db      	lsls	r3, r3, #11
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	4313      	orrs	r3, r2
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c18:	b21b      	sxth	r3, r3
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	b21b      	sxth	r3, r3
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fd2b 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001c26:	f005 fb55 	bl	80072d4 <UG_Update>
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001c2a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001c34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c38:	2b1f      	cmp	r3, #31
 8001c3a:	d9e1      	bls.n	8001c00 <LCD_Test+0x2c0>
  }
  b=31;
 8001c3c:	231f      	movs	r3, #31
 8001c3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001c42:	2338      	movs	r3, #56	; 0x38
 8001c44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c48:	e019      	b.n	8001c7e <LCD_Test+0x33e>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c4e:	02db      	lsls	r3, r3, #11
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	b21b      	sxth	r3, r3
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	b21a      	sxth	r2, r3
 8001c5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b21b      	sxth	r3, r3
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fd06 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001c70:	f005 fb30 	bl	80072d4 <UG_Update>
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c78:	3b02      	subs	r3, #2
 8001c7a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1e1      	bne.n	8001c4a <LCD_Test+0x30a>
  }
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001c86:	2300      	movs	r3, #0
 8001c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c8c:	e022      	b.n	8001cd4 <LCD_Test+0x394>
 8001c8e:	bf00      	nop
 8001c90:	08020114 	.word	0x08020114
 8001c94:	0800d59c 	.word	0x0800d59c
 8001c98:	200002d0 	.word	0x200002d0
 8001c9c:	0800d5ac 	.word	0x0800d5ac
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ca4:	02db      	lsls	r3, r3, #11
 8001ca6:	b21a      	sxth	r2, r3
 8001ca8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cac:	015b      	lsls	r3, r3, #5
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	b21a      	sxth	r2, r3
 8001cb4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cb8:	b21b      	sxth	r3, r3
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	b21b      	sxth	r3, r3
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fcdb 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001cc6:	f005 fb05 	bl	80072d4 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001cca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cce:	3301      	adds	r3, #1
 8001cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001cd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd8:	2b1f      	cmp	r3, #31
 8001cda:	d9e1      	bls.n	8001ca0 <LCD_Test+0x360>
  }
  r=31;
 8001cdc:	231f      	movs	r3, #31
 8001cde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ce8:	e019      	b.n	8001d1e <LCD_Test+0x3de>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cee:	02db      	lsls	r3, r3, #11
 8001cf0:	b21a      	sxth	r2, r3
 8001cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cf6:	015b      	lsls	r3, r3, #5
 8001cf8:	b21b      	sxth	r3, r3
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b21a      	sxth	r2, r3
 8001cfe:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001d02:	b21b      	sxth	r3, r3
 8001d04:	4313      	orrs	r3, r2
 8001d06:	b21b      	sxth	r3, r3
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fcb6 	bl	800567c <UG_FillScreen>
    UG_Update();
 8001d10:	f005 fae0 	bl	80072d4 <UG_Update>
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001d14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d1e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d22:	2b3f      	cmp	r3, #63	; 0x3f
 8001d24:	d9e1      	bls.n	8001cea <LCD_Test+0x3aa>
  }


  UG_FillScreen(C_RED);
 8001d26:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001d2a:	f003 fca7 	bl	800567c <UG_FillScreen>
  UG_Update();
 8001d2e:	f005 fad1 	bl	80072d4 <UG_Update>
  HAL_Delay(500);
 8001d32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d36:	f000 fbab 	bl	8002490 <HAL_Delay>
  UG_FillScreen(C_GREEN);
 8001d3a:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001d3e:	f003 fc9d 	bl	800567c <UG_FillScreen>
  UG_Update();
 8001d42:	f005 fac7 	bl	80072d4 <UG_Update>
  HAL_Delay(500);
 8001d46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d4a:	f000 fba1 	bl	8002490 <HAL_Delay>
  UG_FillScreen(C_BLUE);
 8001d4e:	201f      	movs	r0, #31
 8001d50:	f003 fc94 	bl	800567c <UG_FillScreen>
  UG_Update();
 8001d54:	f005 fabe 	bl	80072d4 <UG_Update>
  HAL_Delay(500);
 8001d58:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d5c:	f000 fb98 	bl	8002490 <HAL_Delay>
  UG_FillScreen(C_BLACK);
 8001d60:	2000      	movs	r0, #0
 8001d62:	f003 fc8b 	bl	800567c <UG_FillScreen>
  UG_Update();
 8001d66:	f005 fab5 	bl	80072d4 <UG_Update>
  HAL_Delay(500);
 8001d6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d6e:	f000 fb8f 	bl	8002490 <HAL_Delay>

  clearTime();
 8001d72:	f7ff fda3 	bl	80018bc <clearTime>
  UG_FillScreen(C_WHITE);
 8001d76:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d7a:	f003 fc7f 	bl	800567c <UG_FillScreen>
  printTime();
 8001d7e:	f7ff fda9 	bl	80018d4 <printTime>
  LCD_PutStr(10, 5, "Fill", DEFAULT_FONT, C_RED, C_WHITE);
 8001d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	4bd6      	ldr	r3, [pc, #856]	; (80020e8 <LCD_Test+0x7a8>)
 8001d90:	4ad6      	ldr	r2, [pc, #856]	; (80020ec <LCD_Test+0x7ac>)
 8001d92:	2105      	movs	r1, #5
 8001d94:	200a      	movs	r0, #10
 8001d96:	f7ff fced 	bl	8001774 <LCD_PutStr>
  UG_Update();
 8001d9a:	f005 fa9b 	bl	80072d4 <UG_Update>
  HAL_Delay(1000);
 8001d9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001da2:	f000 fb75 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001da6:	2000      	movs	r0, #0
 8001da8:	f003 fc68 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Font", DEFAULT_FONT, C_RED, C_BLACK);
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	4bcc      	ldr	r3, [pc, #816]	; (80020e8 <LCD_Test+0x7a8>)
 8001db8:	4acd      	ldr	r2, [pc, #820]	; (80020f0 <LCD_Test+0x7b0>)
 8001dba:	2105      	movs	r1, #5
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f7ff fcd9 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001dc2:	f7ff fd7b 	bl	80018bc <clearTime>
  LCD_PutStr(10, 35, "Hello Steve!", DEFAULT_FONT, C_CYAN, C_BLACK);
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	9301      	str	r3, [sp, #4]
 8001dca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	4bc5      	ldr	r3, [pc, #788]	; (80020e8 <LCD_Test+0x7a8>)
 8001dd2:	4ac8      	ldr	r2, [pc, #800]	; (80020f4 <LCD_Test+0x7b4>)
 8001dd4:	2123      	movs	r1, #35	; 0x23
 8001dd6:	200a      	movs	r0, #10
 8001dd8:	f7ff fccc 	bl	8001774 <LCD_PutStr>
  LCD_PutStr(10, 55, "Hello Steve!", DEFAULT_FONT, C_ORANGE_RED, C_BLACK);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9301      	str	r3, [sp, #4]
 8001de0:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4bc0      	ldr	r3, [pc, #768]	; (80020e8 <LCD_Test+0x7a8>)
 8001de8:	4ac2      	ldr	r2, [pc, #776]	; (80020f4 <LCD_Test+0x7b4>)
 8001dea:	2137      	movs	r1, #55	; 0x37
 8001dec:	200a      	movs	r0, #10
 8001dee:	f7ff fcc1 	bl	8001774 <LCD_PutStr>
  LCD_PutStr(10, 75, "Hello Steve!", DEFAULT_FONT, C_LIME_GREEN, C_BLACK);
 8001df2:	2300      	movs	r3, #0
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f243 6366 	movw	r3, #13926	; 0x3666
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	4bba      	ldr	r3, [pc, #744]	; (80020e8 <LCD_Test+0x7a8>)
 8001dfe:	4abd      	ldr	r2, [pc, #756]	; (80020f4 <LCD_Test+0x7b4>)
 8001e00:	214b      	movs	r1, #75	; 0x4b
 8001e02:	200a      	movs	r0, #10
 8001e04:	f7ff fcb6 	bl	8001774 <LCD_PutStr>
  LCD_PutStr(10, 95, "Hello Steve!", DEFAULT_FONT, C_HOT_PINK, C_BLACK);
 8001e08:	2300      	movs	r3, #0
 8001e0a:	9301      	str	r3, [sp, #4]
 8001e0c:	f64f 3356 	movw	r3, #64342	; 0xfb56
 8001e10:	9300      	str	r3, [sp, #0]
 8001e12:	4bb5      	ldr	r3, [pc, #724]	; (80020e8 <LCD_Test+0x7a8>)
 8001e14:	4ab7      	ldr	r2, [pc, #732]	; (80020f4 <LCD_Test+0x7b4>)
 8001e16:	215f      	movs	r1, #95	; 0x5f
 8001e18:	200a      	movs	r0, #10
 8001e1a:	f7ff fcab 	bl	8001774 <LCD_PutStr>
  UG_Update();
 8001e1e:	f005 fa59 	bl	80072d4 <UG_Update>
  printTime();
 8001e22:	f7ff fd57 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8001e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e2a:	f000 fb31 	bl	8002490 <HAL_Delay>

#if DEMO_FLASH_KB >=128
  UG_FillScreen(C_BLACK);
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f003 fc24 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Big font", DEFAULT_FONT, C_RED, C_BLACK);
 8001e34:	2300      	movs	r3, #0
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	4baa      	ldr	r3, [pc, #680]	; (80020e8 <LCD_Test+0x7a8>)
 8001e40:	4aad      	ldr	r2, [pc, #692]	; (80020f8 <LCD_Test+0x7b8>)
 8001e42:	2105      	movs	r1, #5
 8001e44:	200a      	movs	r0, #10
 8001e46:	f7ff fc95 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001e4a:	f7ff fd37 	bl	80018bc <clearTime>
  LCD_PutStr(10, 35, "Hello", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4ba8      	ldr	r3, [pc, #672]	; (80020fc <LCD_Test+0x7bc>)
 8001e5a:	4aa9      	ldr	r2, [pc, #676]	; (8002100 <LCD_Test+0x7c0>)
 8001e5c:	2123      	movs	r1, #35	; 0x23
 8001e5e:	200a      	movs	r0, #10
 8001e60:	f7ff fc88 	bl	8001774 <LCD_PutStr>
  LCD_PutStr(10, 80, "Steve!", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001e64:	2300      	movs	r3, #0
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	4ba3      	ldr	r3, [pc, #652]	; (80020fc <LCD_Test+0x7bc>)
 8001e70:	4aa4      	ldr	r2, [pc, #656]	; (8002104 <LCD_Test+0x7c4>)
 8001e72:	2150      	movs	r1, #80	; 0x50
 8001e74:	200a      	movs	r0, #10
 8001e76:	f7ff fc7d 	bl	8001774 <LCD_PutStr>
  UG_Update();
 8001e7a:	f005 fa2b 	bl	80072d4 <UG_Update>
  printTime();
 8001e7e:	f7ff fd29 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8001e82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e86:	f000 fb03 	bl	8002490 <HAL_Delay>
#endif

  UG_FillScreen(C_RED);
 8001e8a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e8e:	f003 fbf5 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Line", DEFAULT_FONT, C_YELLOW, C_RED);
 8001e92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e96:	9301      	str	r3, [sp, #4]
 8001e98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4b92      	ldr	r3, [pc, #584]	; (80020e8 <LCD_Test+0x7a8>)
 8001ea0:	4a99      	ldr	r2, [pc, #612]	; (8002108 <LCD_Test+0x7c8>)
 8001ea2:	2105      	movs	r1, #5
 8001ea4:	200a      	movs	r0, #10
 8001ea6:	f7ff fc65 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001eaa:	f7ff fd07 	bl	80018bc <clearTime>
  UG_DrawLine(10, 30, 10, 100, C_WHITE);
 8001eae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	220a      	movs	r2, #10
 8001eb8:	211e      	movs	r1, #30
 8001eba:	200a      	movs	r0, #10
 8001ebc:	f003 ff0c 	bl	8005cd8 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 30, C_WHITE);
 8001ec0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	231e      	movs	r3, #30
 8001ec8:	2264      	movs	r2, #100	; 0x64
 8001eca:	211e      	movs	r1, #30
 8001ecc:	200a      	movs	r0, #10
 8001ece:	f003 ff03 	bl	8005cd8 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 100, C_WHITE);
 8001ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	2364      	movs	r3, #100	; 0x64
 8001eda:	2264      	movs	r2, #100	; 0x64
 8001edc:	211e      	movs	r1, #30
 8001ede:	200a      	movs	r0, #10
 8001ee0:	f003 fefa 	bl	8005cd8 <UG_DrawLine>
  UG_Update();
 8001ee4:	f005 f9f6 	bl	80072d4 <UG_Update>
  printTime();
 8001ee8:	f7ff fcf4 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8001eec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef0:	f000 face 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001ef4:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ef8:	f003 fbc0 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001efc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	4b77      	ldr	r3, [pc, #476]	; (80020e8 <LCD_Test+0x7a8>)
 8001f0a:	4a80      	ldr	r2, [pc, #512]	; (800210c <LCD_Test+0x7cc>)
 8001f0c:	2105      	movs	r1, #5
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f7ff fc30 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001f14:	f7ff fcd2 	bl	80018bc <clearTime>
  UG_DrawFrame(10, 30, 100, 100, C_WHITE);
 8001f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	2364      	movs	r3, #100	; 0x64
 8001f20:	2264      	movs	r2, #100	; 0x64
 8001f22:	211e      	movs	r1, #30
 8001f24:	200a      	movs	r0, #10
 8001f26:	f003 fcb6 	bl	8005896 <UG_DrawFrame>
  UG_Update();
 8001f2a:	f005 f9d3 	bl	80072d4 <UG_Update>
  printTime();
 8001f2e:	f7ff fcd1 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8001f32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f36:	f000 faab 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f3a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f3e:	f003 fb9d 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f42:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f46:	9301      	str	r3, [sp, #4]
 8001f48:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4b66      	ldr	r3, [pc, #408]	; (80020e8 <LCD_Test+0x7a8>)
 8001f50:	4a6f      	ldr	r2, [pc, #444]	; (8002110 <LCD_Test+0x7d0>)
 8001f52:	2105      	movs	r1, #5
 8001f54:	200a      	movs	r0, #10
 8001f56:	f7ff fc0d 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001f5a:	f7ff fcaf 	bl	80018bc <clearTime>
  UG_FillFrame(10, 30, 100, 100, C_WHITE);
 8001f5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f62:	9300      	str	r3, [sp, #0]
 8001f64:	2364      	movs	r3, #100	; 0x64
 8001f66:	2264      	movs	r2, #100	; 0x64
 8001f68:	211e      	movs	r1, #30
 8001f6a:	200a      	movs	r0, #10
 8001f6c:	f003 fbaa 	bl	80056c4 <UG_FillFrame>
  UG_Update();
 8001f70:	f005 f9b0 	bl	80072d4 <UG_Update>
  printTime();
 8001f74:	f7ff fcae 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8001f78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f7c:	f000 fa88 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f80:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f84:	f003 fb7a 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Mesh.", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f88:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4b54      	ldr	r3, [pc, #336]	; (80020e8 <LCD_Test+0x7a8>)
 8001f96:	4a5f      	ldr	r2, [pc, #380]	; (8002114 <LCD_Test+0x7d4>)
 8001f98:	2105      	movs	r1, #5
 8001f9a:	200a      	movs	r0, #10
 8001f9c:	f7ff fbea 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001fa0:	f7ff fc8c 	bl	80018bc <clearTime>
  UG_DrawMesh(10, 30, 100, 100, 5, C_WHITE);
 8001fa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa8:	9301      	str	r3, [sp, #4]
 8001faa:	2305      	movs	r3, #5
 8001fac:	9300      	str	r3, [sp, #0]
 8001fae:	2364      	movs	r3, #100	; 0x64
 8001fb0:	2264      	movs	r2, #100	; 0x64
 8001fb2:	211e      	movs	r1, #30
 8001fb4:	200a      	movs	r0, #10
 8001fb6:	f003 fbf7 	bl	80057a8 <UG_DrawMesh>
  UG_Update();
 8001fba:	f005 f98b 	bl	80072d4 <UG_Update>
  printTime();
 8001fbe:	f7ff fc89 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8001fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fc6:	f000 fa63 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 8001fca:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001fce:	f003 fb55 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8001fd2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <LCD_Test+0x7a8>)
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	; (8002118 <LCD_Test+0x7d8>)
 8001fe2:	2105      	movs	r1, #5
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f7ff fbc5 	bl	8001774 <LCD_PutStr>
  clearTime();
 8001fea:	f7ff fc67 	bl	80018bc <clearTime>
  UG_DrawCircle(45, 65, 30, C_WHITE);
 8001fee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff2:	221e      	movs	r2, #30
 8001ff4:	2141      	movs	r1, #65	; 0x41
 8001ff6:	202d      	movs	r0, #45	; 0x2d
 8001ff8:	f003 fcae 	bl	8005958 <UG_DrawCircle>
  UG_Update();
 8001ffc:	f005 f96a 	bl	80072d4 <UG_Update>
  printTime();
 8002000:	f7ff fc68 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8002004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002008:	f000 fa42 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 800200c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002010:	f003 fb34 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002014:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002018:	9301      	str	r3, [sp, #4]
 800201a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <LCD_Test+0x7a8>)
 8002022:	4a3e      	ldr	r2, [pc, #248]	; (800211c <LCD_Test+0x7dc>)
 8002024:	2105      	movs	r1, #5
 8002026:	200a      	movs	r0, #10
 8002028:	f7ff fba4 	bl	8001774 <LCD_PutStr>
  UG_Update();
 800202c:	f005 f952 	bl	80072d4 <UG_Update>
  clearTime();
 8002030:	f7ff fc44 	bl	80018bc <clearTime>
  UG_FillCircle(45, 65, 30, C_WHITE);
 8002034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002038:	221e      	movs	r2, #30
 800203a:	2141      	movs	r1, #65	; 0x41
 800203c:	202d      	movs	r0, #45	; 0x2d
 800203e:	f003 fd71 	bl	8005b24 <UG_FillCircle>
  UG_Update();
 8002042:	f005 f947 	bl	80072d4 <UG_Update>
  printTime();
 8002046:	f7ff fc45 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 800204a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800204e:	f000 fa1f 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 8002052:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002056:	f003 fb11 	bl	800567c <UG_FillScreen>
  LCD_PutStr(10, 5, "Triangle", DEFAULT_FONT, C_YELLOW, C_RED);
 800205a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	4b20      	ldr	r3, [pc, #128]	; (80020e8 <LCD_Test+0x7a8>)
 8002068:	4a2d      	ldr	r2, [pc, #180]	; (8002120 <LCD_Test+0x7e0>)
 800206a:	2105      	movs	r1, #5
 800206c:	200a      	movs	r0, #10
 800206e:	f7ff fb81 	bl	8001774 <LCD_PutStr>
  clearTime();
 8002072:	f7ff fc23 	bl	80018bc <clearTime>
  UG_DrawTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 8002076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800207a:	9302      	str	r3, [sp, #8]
 800207c:	2364      	movs	r3, #100	; 0x64
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2332      	movs	r3, #50	; 0x32
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	231e      	movs	r3, #30
 8002086:	2264      	movs	r2, #100	; 0x64
 8002088:	211e      	movs	r1, #30
 800208a:	200a      	movs	r0, #10
 800208c:	f003 ff04 	bl	8005e98 <UG_DrawTriangle>
  UG_Update();
 8002090:	f005 f920 	bl	80072d4 <UG_Update>
  printTime();
 8002094:	f7ff fc1e 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8002098:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800209c:	f000 f9f8 	bl	8002490 <HAL_Delay>

  UG_FillScreen(C_RED);
 80020a0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80020a4:	f003 faea 	bl	800567c <UG_FillScreen>
  clearTime();
 80020a8:	f7ff fc08 	bl	80018bc <clearTime>
  LCD_PutStr(10, 5, "Filled Tri.", DEFAULT_FONT, C_YELLOW, C_RED);
 80020ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <LCD_Test+0x7a8>)
 80020ba:	4a1a      	ldr	r2, [pc, #104]	; (8002124 <LCD_Test+0x7e4>)
 80020bc:	2105      	movs	r1, #5
 80020be:	200a      	movs	r0, #10
 80020c0:	f7ff fb58 	bl	8001774 <LCD_PutStr>
  UG_FillTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 80020c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	2364      	movs	r3, #100	; 0x64
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2332      	movs	r3, #50	; 0x32
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	231e      	movs	r3, #30
 80020d4:	2264      	movs	r2, #100	; 0x64
 80020d6:	211e      	movs	r1, #30
 80020d8:	200a      	movs	r0, #10
 80020da:	f003 ff17 	bl	8005f0c <UG_FillTriangle>
  UG_Update();
 80020de:	f005 f8f9 	bl	80072d4 <UG_Update>
  printTime();
 80020e2:	f7ff fbf7 	bl	80018d4 <printTime>
 80020e6:	e01f      	b.n	8002128 <LCD_Test+0x7e8>
 80020e8:	08020114 	.word	0x08020114
 80020ec:	0800d5b4 	.word	0x0800d5b4
 80020f0:	0800d5bc 	.word	0x0800d5bc
 80020f4:	0800d5c4 	.word	0x0800d5c4
 80020f8:	0800d5d4 	.word	0x0800d5d4
 80020fc:	0800d820 	.word	0x0800d820
 8002100:	0800d5e0 	.word	0x0800d5e0
 8002104:	0800d5e8 	.word	0x0800d5e8
 8002108:	0800d5f0 	.word	0x0800d5f0
 800210c:	0800d5f8 	.word	0x0800d5f8
 8002110:	0800d600 	.word	0x0800d600
 8002114:	0800d60c 	.word	0x0800d60c
 8002118:	0800d614 	.word	0x0800d614
 800211c:	0800d61c 	.word	0x0800d61c
 8002120:	0800d62c 	.word	0x0800d62c
 8002124:	0800d638 	.word	0x0800d638
  HAL_Delay(1000);
 8002128:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800212c:	f000 f9b0 	bl	8002490 <HAL_Delay>

  clearTime();
 8002130:	f7ff fbc4 	bl	80018bc <clearTime>
  // Create the window
  UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);
 8002134:	4b8b      	ldr	r3, [pc, #556]	; (8002364 <LCD_Test+0xa24>)
 8002136:	220a      	movs	r2, #10
 8002138:	498b      	ldr	r1, [pc, #556]	; (8002368 <LCD_Test+0xa28>)
 800213a:	488c      	ldr	r0, [pc, #560]	; (800236c <LCD_Test+0xa2c>)
 800213c:	f005 faaa 	bl	8007694 <UG_WindowCreate>
  // Window Title
  UG_WindowSetTitleText(&window_1, "Test Window");
 8002140:	498b      	ldr	r1, [pc, #556]	; (8002370 <LCD_Test+0xa30>)
 8002142:	488a      	ldr	r0, [pc, #552]	; (800236c <LCD_Test+0xa2c>)
 8002144:	f005 fcfc 	bl	8007b40 <UG_WindowSetTitleText>
  UG_WindowSetTitleTextFont(&window_1, DEFAULT_FONT);
 8002148:	498a      	ldr	r1, [pc, #552]	; (8002374 <LCD_Test+0xa34>)
 800214a:	4888      	ldr	r0, [pc, #544]	; (800236c <LCD_Test+0xa2c>)
 800214c:	f005 fd1a 	bl	8007b84 <UG_WindowSetTitleTextFont>
  UG_WindowSetTitleHeight(&window_1, 15);
 8002150:	210f      	movs	r1, #15
 8002152:	4886      	ldr	r0, [pc, #536]	; (800236c <LCD_Test+0xa2c>)
 8002154:	f005 fd51 	bl	8007bfa <UG_WindowSetTitleHeight>
  UG_WindowSetXStart(&window_1, 0);
 8002158:	2100      	movs	r1, #0
 800215a:	4884      	ldr	r0, [pc, #528]	; (800236c <LCD_Test+0xa2c>)
 800215c:	f005 fd78 	bl	8007c50 <UG_WindowSetXStart>
  UG_WindowSetYStart(&window_1, 0);
 8002160:	2100      	movs	r1, #0
 8002162:	4882      	ldr	r0, [pc, #520]	; (800236c <LCD_Test+0xa2c>)
 8002164:	f005 fda6 	bl	8007cb4 <UG_WindowSetYStart>
  UG_WindowSetXEnd(&window_1, LCD_WIDTH-1);
 8002168:	21ef      	movs	r1, #239	; 0xef
 800216a:	4880      	ldr	r0, [pc, #512]	; (800236c <LCD_Test+0xa2c>)
 800216c:	f005 fdd4 	bl	8007d18 <UG_WindowSetXEnd>
  UG_WindowSetYEnd(&window_1, LCD_HEIGHT-1);
 8002170:	21ef      	movs	r1, #239	; 0xef
 8002172:	487e      	ldr	r0, [pc, #504]	; (800236c <LCD_Test+0xa2c>)
 8002174:	f005 fe02 	bl	8007d7c <UG_WindowSetYEnd>

  // Create Buttons
  UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 5, 5, 70, 35);
 8002178:	2323      	movs	r3, #35	; 0x23
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2346      	movs	r3, #70	; 0x46
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	2305      	movs	r3, #5
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2305      	movs	r3, #5
 8002186:	2200      	movs	r2, #0
 8002188:	497b      	ldr	r1, [pc, #492]	; (8002378 <LCD_Test+0xa38>)
 800218a:	4878      	ldr	r0, [pc, #480]	; (800236c <LCD_Test+0xa2c>)
 800218c:	f006 f850 	bl	8008230 <UG_ButtonCreate>
  //Label Buttons
  UG_ButtonSetFont(&window_1,BTN_ID_0,DEFAULT_FONT);
 8002190:	4a78      	ldr	r2, [pc, #480]	; (8002374 <LCD_Test+0xa34>)
 8002192:	2100      	movs	r1, #0
 8002194:	4875      	ldr	r0, [pc, #468]	; (800236c <LCD_Test+0xa2c>)
 8002196:	f006 f94b 	bl	8008430 <UG_ButtonSetFont>
  UG_ButtonSetForeColor(&window_1,BTN_ID_0, C_BLACK);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	4873      	ldr	r0, [pc, #460]	; (800236c <LCD_Test+0xa2c>)
 80021a0:	f006 f8c6 	bl	8008330 <UG_ButtonSetForeColor>
  UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_LIGHT_GRAY);
 80021a4:	f24d 629a 	movw	r2, #54938	; 0xd69a
 80021a8:	2100      	movs	r1, #0
 80021aa:	4870      	ldr	r0, [pc, #448]	; (800236c <LCD_Test+0xa2c>)
 80021ac:	f006 f8eb 	bl	8008386 <UG_ButtonSetBackColor>
  UG_ButtonSetText(&window_1,BTN_ID_0,"3D Btn");
 80021b0:	4a72      	ldr	r2, [pc, #456]	; (800237c <LCD_Test+0xa3c>)
 80021b2:	2100      	movs	r1, #0
 80021b4:	486d      	ldr	r0, [pc, #436]	; (800236c <LCD_Test+0xa2c>)
 80021b6:	f006 f911 	bl	80083dc <UG_ButtonSetText>

  // Create Textbox
  UG_TextboxCreate(&window_1, &textbox_1, TXB_ID_0, 10, 40, LCD_WIDTH-20, 65);
 80021ba:	2341      	movs	r3, #65	; 0x41
 80021bc:	9302      	str	r3, [sp, #8]
 80021be:	23dc      	movs	r3, #220	; 0xdc
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	2328      	movs	r3, #40	; 0x28
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	230a      	movs	r3, #10
 80021c8:	2200      	movs	r2, #0
 80021ca:	496d      	ldr	r1, [pc, #436]	; (8002380 <LCD_Test+0xa40>)
 80021cc:	4867      	ldr	r0, [pc, #412]	; (800236c <LCD_Test+0xa2c>)
 80021ce:	f006 fe03 	bl	8008dd8 <UG_TextboxCreate>
  UG_TextboxSetFont(&window_1, TXB_ID_0, DEFAULT_FONT);
 80021d2:	4a68      	ldr	r2, [pc, #416]	; (8002374 <LCD_Test+0xa34>)
 80021d4:	2100      	movs	r1, #0
 80021d6:	4865      	ldr	r0, [pc, #404]	; (800236c <LCD_Test+0xa2c>)
 80021d8:	f006 fef8 	bl	8008fcc <UG_TextboxSetFont>
  UG_TextboxSetText(&window_1, TXB_ID_0, "Some Text");
 80021dc:	4a69      	ldr	r2, [pc, #420]	; (8002384 <LCD_Test+0xa44>)
 80021de:	2100      	movs	r1, #0
 80021e0:	4862      	ldr	r0, [pc, #392]	; (800236c <LCD_Test+0xa2c>)
 80021e2:	f006 fec9 	bl	8008f78 <UG_TextboxSetText>
  UG_TextboxSetBackColor(&window_1, TXB_ID_0, C_LIGHT_YELLOW);
 80021e6:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80021ea:	2100      	movs	r1, #0
 80021ec:	485f      	ldr	r0, [pc, #380]	; (800236c <LCD_Test+0xa2c>)
 80021ee:	f006 fe98 	bl	8008f22 <UG_TextboxSetBackColor>
  UG_TextboxSetForeColor(&window_1, TXB_ID_0, C_BLACK);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2100      	movs	r1, #0
 80021f6:	485d      	ldr	r0, [pc, #372]	; (800236c <LCD_Test+0xa2c>)
 80021f8:	f006 fe68 	bl	8008ecc <UG_TextboxSetForeColor>
  UG_TextboxSetAlignment(&window_1, TXB_ID_0, ALIGN_CENTER);
 80021fc:	2212      	movs	r2, #18
 80021fe:	2100      	movs	r1, #0
 8002200:	485a      	ldr	r0, [pc, #360]	; (800236c <LCD_Test+0xa2c>)
 8002202:	f006 ff0d 	bl	8009020 <UG_TextboxSetAlignment>

  // Create progress bar
  UG_ProgressCreate(&window_1, &pgb, PGB_ID_0, 10, 72, LCD_WIDTH-20, 85);
 8002206:	2355      	movs	r3, #85	; 0x55
 8002208:	9302      	str	r3, [sp, #8]
 800220a:	23dc      	movs	r3, #220	; 0xdc
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2348      	movs	r3, #72	; 0x48
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	230a      	movs	r3, #10
 8002214:	2200      	movs	r2, #0
 8002216:	495c      	ldr	r1, [pc, #368]	; (8002388 <LCD_Test+0xa48>)
 8002218:	4854      	ldr	r0, [pc, #336]	; (800236c <LCD_Test+0xa2c>)
 800221a:	f006 fb51 	bl	80088c0 <UG_ProgressCreate>
  UG_ProgressSetForeColor(&window_1, PGB_ID_0, C_ROYAL_BLUE);
 800221e:	f244 325b 	movw	r2, #17243	; 0x435b
 8002222:	2100      	movs	r1, #0
 8002224:	4851      	ldr	r0, [pc, #324]	; (800236c <LCD_Test+0xa2c>)
 8002226:	f006 fbaf 	bl	8008988 <UG_ProgressSetForeColor>

  UG_WindowShow(&window_1);
 800222a:	4850      	ldr	r0, [pc, #320]	; (800236c <LCD_Test+0xa2c>)
 800222c:	f005 fb00 	bl	8007830 <UG_WindowShow>
  UG_Update();
 8002230:	f005 f850 	bl	80072d4 <UG_Update>
  printTime();
 8002234:	f7ff fb4e 	bl	80018d4 <printTime>
  HAL_Delay(1000);
 8002238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800223c:	f000 f928 	bl	8002490 <HAL_Delay>
  uint32_t btn_time,progress_time,now;
  uint8_t i=0, j=0,u=0;
 8002240:	2300      	movs	r3, #0
 8002242:	75fb      	strb	r3, [r7, #23]
 8002244:	2300      	movs	r3, #0
 8002246:	75bb      	strb	r3, [r7, #22]
 8002248:	2300      	movs	r3, #0
 800224a:	757b      	strb	r3, [r7, #21]
  btn_time = progress_time = HAL_GetTick();
 800224c:	f000 f914 	bl	8002478 <HAL_GetTick>
 8002250:	61b8      	str	r0, [r7, #24]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	61fb      	str	r3, [r7, #28]
  while(1){
    now=HAL_GetTick();
 8002256:	f000 f90f 	bl	8002478 <HAL_GetTick>
 800225a:	6078      	str	r0, [r7, #4]
    if(now-btn_time>199){
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2bc7      	cmp	r3, #199	; 0xc7
 8002264:	d916      	bls.n	8002294 <LCD_Test+0x954>
      btn_time=now;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	61fb      	str	r3, [r7, #28]
      u=1;
 800226a:	2301      	movs	r3, #1
 800226c:	757b      	strb	r3, [r7, #21]
      i++;
 800226e:	7dfb      	ldrb	r3, [r7, #23]
 8002270:	3301      	adds	r3, #1
 8002272:	75fb      	strb	r3, [r7, #23]
      //UG_TouchUpdate((i&1 ? 10 : -1), (i&1 ? 31 : -1), OBJ_TOUCH_STATE_CHANGED | (i&1 ? OBJ_TOUCH_STATE_IS_PRESSED : 0));
      if(i==9){
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b09      	cmp	r3, #9
 8002278:	d109      	bne.n	800228e <LCD_Test+0x94e>
        UG_ButtonSetText(&window_1,BTN_ID_0,"2D Btn");
 800227a:	4a44      	ldr	r2, [pc, #272]	; (800238c <LCD_Test+0xa4c>)
 800227c:	2100      	movs	r1, #0
 800227e:	483b      	ldr	r0, [pc, #236]	; (800236c <LCD_Test+0xa2c>)
 8002280:	f006 f8ac 	bl	80083dc <UG_ButtonSetText>
        UG_ButtonSetStyle(&window_1, BTN_ID_0, BTN_STYLE_2D);
 8002284:	2200      	movs	r2, #0
 8002286:	2100      	movs	r1, #0
 8002288:	4838      	ldr	r0, [pc, #224]	; (800236c <LCD_Test+0xa2c>)
 800228a:	f006 f8fb 	bl	8008484 <UG_ButtonSetStyle>
      }
      if(i>19){
 800228e:	7dfb      	ldrb	r3, [r7, #23]
 8002290:	2b13      	cmp	r3, #19
 8002292:	d81e      	bhi.n	80022d2 <LCD_Test+0x992>
        break;
      }
    }
    if(now-progress_time>19){
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b13      	cmp	r3, #19
 800229c:	d911      	bls.n	80022c2 <LCD_Test+0x982>
      progress_time=now;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	61bb      	str	r3, [r7, #24]
      u=1;
 80022a2:	2301      	movs	r3, #1
 80022a4:	757b      	strb	r3, [r7, #21]
      if(++j>100)
 80022a6:	7dbb      	ldrb	r3, [r7, #22]
 80022a8:	3301      	adds	r3, #1
 80022aa:	75bb      	strb	r3, [r7, #22]
 80022ac:	7dbb      	ldrb	r3, [r7, #22]
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <LCD_Test+0x976>
        j=0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	75bb      	strb	r3, [r7, #22]
      UG_ProgressSetProgress(&window_1, PGB_ID_0, j);
 80022b6:	7dbb      	ldrb	r3, [r7, #22]
 80022b8:	461a      	mov	r2, r3
 80022ba:	2100      	movs	r1, #0
 80022bc:	482b      	ldr	r0, [pc, #172]	; (800236c <LCD_Test+0xa2c>)
 80022be:	f006 fb8e 	bl	80089de <UG_ProgressSetProgress>
    }
    if(u){
 80022c2:	7d7b      	ldrb	r3, [r7, #21]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0c6      	beq.n	8002256 <LCD_Test+0x916>
      u=0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	757b      	strb	r3, [r7, #21]
      UG_Update();
 80022cc:	f005 f802 	bl	80072d4 <UG_Update>
    now=HAL_GetTick();
 80022d0:	e7c1      	b.n	8002256 <LCD_Test+0x916>
        break;
 80022d2:	bf00      	nop
    }
  }
  UG_WindowHide(&window_1);
 80022d4:	4825      	ldr	r0, [pc, #148]	; (800236c <LCD_Test+0xa2c>)
 80022d6:	f005 fad1 	bl	800787c <UG_WindowHide>
  UG_WindowDelete(&window_1);
 80022da:	4824      	ldr	r0, [pc, #144]	; (800236c <LCD_Test+0xa2c>)
 80022dc:	f005 fa6a 	bl	80077b4 <UG_WindowDelete>
  UG_Update();
 80022e0:	f004 fff8 	bl	80072d4 <UG_Update>
  t = UG_FontGetTransparency();
 80022e4:	f004 f87c 	bl	80063e0 <UG_FontGetTransparency>
 80022e8:	4603      	mov	r3, r0
 80022ea:	72fb      	strb	r3, [r7, #11]
#if DEMO_FLASH_KB >=64
  UG_FillScreen(0x4b10);
 80022ec:	f644 3010 	movw	r0, #19216	; 0x4b10
 80022f0:	f003 f9c4 	bl	800567c <UG_FillScreen>
  clearTime();
 80022f4:	f7ff fae2 	bl	80018bc <clearTime>
  UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogo);
 80022f8:	4b25      	ldr	r3, [pc, #148]	; (8002390 <LCD_Test+0xa50>)
 80022fa:	889b      	ldrh	r3, [r3, #4]
 80022fc:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002300:	0fda      	lsrs	r2, r3, #31
 8002302:	4413      	add	r3, r2
 8002304:	105b      	asrs	r3, r3, #1
 8002306:	b218      	sxth	r0, r3
 8002308:	4b21      	ldr	r3, [pc, #132]	; (8002390 <LCD_Test+0xa50>)
 800230a:	88db      	ldrh	r3, [r3, #6]
 800230c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8002310:	0fda      	lsrs	r2, r3, #31
 8002312:	4413      	add	r3, r2
 8002314:	105b      	asrs	r3, r3, #1
 8002316:	b21b      	sxth	r3, r3
 8002318:	4a1d      	ldr	r2, [pc, #116]	; (8002390 <LCD_Test+0xa50>)
 800231a:	4619      	mov	r1, r3
 800231c:	f005 f89a 	bl	8007454 <UG_DrawBMP>
  UG_Update();
 8002320:	f004 ffd8 	bl	80072d4 <UG_Update>
  printTime();
 8002324:	f7ff fad6 	bl	80018d4 <printTime>
  UG_FontSetTransparency(0);
 8002328:	2000      	movs	r0, #0
 800232a:	f004 f847 	bl	80063bc <UG_FontSetTransparency>
  LCD_PutStr(10, 5, "Image", DEFAULT_FONT, C_YELLOW, C_RED);
 800232e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002332:	9301      	str	r3, [sp, #4]
 8002334:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <LCD_Test+0xa34>)
 800233c:	4a15      	ldr	r2, [pc, #84]	; (8002394 <LCD_Test+0xa54>)
 800233e:	2105      	movs	r1, #5
 8002340:	200a      	movs	r0, #10
 8002342:	f7ff fa17 	bl	8001774 <LCD_PutStr>
  UG_Update();
 8002346:	f004 ffc5 	bl	80072d4 <UG_Update>
  UG_FontSetTransparency(t);
 800234a:	7afb      	ldrb	r3, [r7, #11]
 800234c:	4618      	mov	r0, r3
 800234e:	f004 f835 	bl	80063bc <UG_FontSetTransparency>
#endif
  HAL_Delay(1000);
 8002352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002356:	f000 f89b 	bl	8002490 <HAL_Delay>
}
 800235a:	bf00      	nop
 800235c:	3734      	adds	r7, #52	; 0x34
 800235e:	46bd      	mov	sp, r7
 8002360:	bd90      	pop	{r4, r7, pc}
 8002362:	bf00      	nop
 8002364:	08002399 	.word	0x08002399
 8002368:	200003b0 	.word	0x200003b0
 800236c:	20000350 	.word	0x20000350
 8002370:	0800d644 	.word	0x0800d644
 8002374:	08020114 	.word	0x08020114
 8002378:	20000384 	.word	0x20000384
 800237c:	0800d650 	.word	0x0800d650
 8002380:	2000039c 	.word	0x2000039c
 8002384:	0800d658 	.word	0x0800d658
 8002388:	200004f0 	.word	0x200004f0
 800238c:	0800d664 	.word	0x0800d664
 8002390:	20000020 	.word	0x20000020
 8002394:	0800d66c 	.word	0x0800d66c

08002398 <window_1_callback>:


static void window_1_callback(UG_MESSAGE *msg)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }
*/
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_Init+0x40>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_Init+0x40>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_Init+0x40>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f94f 	bl	8002678 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	200f      	movs	r0, #15
 80023dc:	f000 f808 	bl	80023f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7fe fbf8 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_InitTick+0x54>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	4b12      	ldr	r3, [pc, #72]	; (8002448 <HAL_InitTick+0x58>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4619      	mov	r1, r3
 8002402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002406:	fbb3 f3f1 	udiv	r3, r3, r1
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f967 	bl	80026e2 <HAL_SYSTICK_Config>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e00e      	b.n	800243c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d80a      	bhi.n	800243a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800242c:	f000 f92f 	bl	800268e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002430:	4a06      	ldr	r2, [pc, #24]	; (800244c <HAL_InitTick+0x5c>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e000      	b.n	800243c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	20000000 	.word	0x20000000
 8002448:	20000018 	.word	0x20000018
 800244c:	20000014 	.word	0x20000014

08002450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002454:	4b06      	ldr	r3, [pc, #24]	; (8002470 <HAL_IncTick+0x20>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	461a      	mov	r2, r3
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_IncTick+0x24>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4413      	add	r3, r2
 8002460:	4a04      	ldr	r2, [pc, #16]	; (8002474 <HAL_IncTick+0x24>)
 8002462:	6013      	str	r3, [r2, #0]
}
 8002464:	bf00      	nop
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20000018 	.word	0x20000018
 8002474:	200004f8 	.word	0x200004f8

08002478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return uwTick;
 800247c:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_GetTick+0x14>)
 800247e:	681b      	ldr	r3, [r3, #0]
}
 8002480:	4618      	mov	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	200004f8 	.word	0x200004f8

08002490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff ffee 	bl	8002478 <HAL_GetTick>
 800249c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024a8:	d005      	beq.n	80024b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024aa:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <HAL_Delay+0x44>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	4413      	add	r3, r2
 80024b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024b6:	bf00      	nop
 80024b8:	f7ff ffde 	bl	8002478 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d8f7      	bhi.n	80024b8 <HAL_Delay+0x28>
  {
  }
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000018 	.word	0x20000018

080024d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f003 0307 	and.w	r3, r3, #7
 80024e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ee:	68ba      	ldr	r2, [r7, #8]
 80024f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024f4:	4013      	ands	r3, r2
 80024f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002500:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002508:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250a:	4a04      	ldr	r2, [pc, #16]	; (800251c <__NVIC_SetPriorityGrouping+0x44>)
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	60d3      	str	r3, [r2, #12]
}
 8002510:	bf00      	nop
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000ed00 	.word	0xe000ed00

08002520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002524:	4b04      	ldr	r3, [pc, #16]	; (8002538 <__NVIC_GetPriorityGrouping+0x18>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	f003 0307 	and.w	r3, r3, #7
}
 800252e:	4618      	mov	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	db0b      	blt.n	8002566 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	f003 021f 	and.w	r2, r3, #31
 8002554:	4907      	ldr	r1, [pc, #28]	; (8002574 <__NVIC_EnableIRQ+0x38>)
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	2001      	movs	r0, #1
 800255e:	fa00 f202 	lsl.w	r2, r0, r2
 8002562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000e100 	.word	0xe000e100

08002578 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	6039      	str	r1, [r7, #0]
 8002582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db0a      	blt.n	80025a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	b2da      	uxtb	r2, r3
 8002590:	490c      	ldr	r1, [pc, #48]	; (80025c4 <__NVIC_SetPriority+0x4c>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	440b      	add	r3, r1
 800259c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a0:	e00a      	b.n	80025b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4908      	ldr	r1, [pc, #32]	; (80025c8 <__NVIC_SetPriority+0x50>)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	3b04      	subs	r3, #4
 80025b0:	0112      	lsls	r2, r2, #4
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	440b      	add	r3, r1
 80025b6:	761a      	strb	r2, [r3, #24]
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000e100 	.word	0xe000e100
 80025c8:	e000ed00 	.word	0xe000ed00

080025cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b089      	sub	sp, #36	; 0x24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0307 	and.w	r3, r3, #7
 80025de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	f1c3 0307 	rsb	r3, r3, #7
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	bf28      	it	cs
 80025ea:	2304      	movcs	r3, #4
 80025ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3304      	adds	r3, #4
 80025f2:	2b06      	cmp	r3, #6
 80025f4:	d902      	bls.n	80025fc <NVIC_EncodePriority+0x30>
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3b03      	subs	r3, #3
 80025fa:	e000      	b.n	80025fe <NVIC_EncodePriority+0x32>
 80025fc:	2300      	movs	r3, #0
 80025fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002600:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43da      	mvns	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	401a      	ands	r2, r3
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002614:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	43d9      	mvns	r1, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	4313      	orrs	r3, r2
         );
}
 8002626:	4618      	mov	r0, r3
 8002628:	3724      	adds	r7, #36	; 0x24
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
	...

08002634 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002644:	d301      	bcc.n	800264a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002646:	2301      	movs	r3, #1
 8002648:	e00f      	b.n	800266a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800264a:	4a0a      	ldr	r2, [pc, #40]	; (8002674 <SysTick_Config+0x40>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3b01      	subs	r3, #1
 8002650:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002652:	210f      	movs	r1, #15
 8002654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002658:	f7ff ff8e 	bl	8002578 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <SysTick_Config+0x40>)
 800265e:	2200      	movs	r2, #0
 8002660:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <SysTick_Config+0x40>)
 8002664:	2207      	movs	r2, #7
 8002666:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	e000e010 	.word	0xe000e010

08002678 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f7ff ff29 	bl	80024d8 <__NVIC_SetPriorityGrouping>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800268e:	b580      	push	{r7, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af00      	add	r7, sp, #0
 8002694:	4603      	mov	r3, r0
 8002696:	60b9      	str	r1, [r7, #8]
 8002698:	607a      	str	r2, [r7, #4]
 800269a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800269c:	2300      	movs	r3, #0
 800269e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a0:	f7ff ff3e 	bl	8002520 <__NVIC_GetPriorityGrouping>
 80026a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff8e 	bl	80025cc <NVIC_EncodePriority>
 80026b0:	4602      	mov	r2, r0
 80026b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff ff5d 	bl	8002578 <__NVIC_SetPriority>
}
 80026be:	bf00      	nop
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}

080026c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c6:	b580      	push	{r7, lr}
 80026c8:	b082      	sub	sp, #8
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	4603      	mov	r3, r0
 80026ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff31 	bl	800253c <__NVIC_EnableIRQ>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff ffa2 	bl	8002634 <SysTick_Config>
 80026f0:	4603      	mov	r3, r0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002708:	f7ff feb6 	bl	8002478 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d101      	bne.n	8002718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e099      	b.n	800284c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002738:	e00f      	b.n	800275a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800273a:	f7ff fe9d 	bl	8002478 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b05      	cmp	r3, #5
 8002746:	d908      	bls.n	800275a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2220      	movs	r2, #32
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2203      	movs	r2, #3
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e078      	b.n	800284c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d1e8      	bne.n	800273a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	4b38      	ldr	r3, [pc, #224]	; (8002854 <HAL_DMA_Init+0x158>)
 8002774:	4013      	ands	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	4313      	orrs	r3, r2
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f023 0307 	bic.w	r3, r3, #7
 80027da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d117      	bne.n	800281e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 fb63 	bl	8002ecc <DMA_CheckFifoParam>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d008      	beq.n	800281e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800281a:	2301      	movs	r3, #1
 800281c:	e016      	b.n	800284c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fb1a 	bl	8002e60 <DMA_CalcBaseAndBitshift>
 800282c:	4603      	mov	r3, r0
 800282e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	223f      	movs	r2, #63	; 0x3f
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2201      	movs	r2, #1
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	f010803f 	.word	0xf010803f

08002858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
 8002864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002866:	2300      	movs	r3, #0
 8002868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_DMA_Start_IT+0x26>
 800287a:	2302      	movs	r3, #2
 800287c:	e040      	b.n	8002900 <HAL_DMA_Start_IT+0xa8>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b01      	cmp	r3, #1
 8002890:	d12f      	bne.n	80028f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2202      	movs	r2, #2
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 faac 	bl	8002e04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b0:	223f      	movs	r2, #63	; 0x3f
 80028b2:	409a      	lsls	r2, r3
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0216 	orr.w	r2, r2, #22
 80028c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0208 	orr.w	r2, r2, #8
 80028de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f042 0201 	orr.w	r2, r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	e005      	b.n	80028fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028fa:	2302      	movs	r3, #2
 80028fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3718      	adds	r7, #24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002916:	f7ff fdaf 	bl	8002478 <HAL_GetTick>
 800291a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d008      	beq.n	800293a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2280      	movs	r2, #128	; 0x80
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e052      	b.n	80029e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0216 	bic.w	r2, r2, #22
 8002948:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695a      	ldr	r2, [r3, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002958:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	2b00      	cmp	r3, #0
 8002960:	d103      	bne.n	800296a <HAL_DMA_Abort+0x62>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	2b00      	cmp	r3, #0
 8002968:	d007      	beq.n	800297a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0208 	bic.w	r2, r2, #8
 8002978:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800298a:	e013      	b.n	80029b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800298c:	f7ff fd74 	bl	8002478 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b05      	cmp	r3, #5
 8002998:	d90c      	bls.n	80029b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2203      	movs	r2, #3
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e015      	b.n	80029e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e4      	bne.n	800298c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	223f      	movs	r2, #63	; 0x3f
 80029c8:	409a      	lsls	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d004      	beq.n	8002a06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2280      	movs	r2, #128	; 0x80
 8002a00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e00c      	b.n	8002a20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2205      	movs	r2, #5
 8002a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a38:	4b8e      	ldr	r3, [pc, #568]	; (8002c74 <HAL_DMA_IRQHandler+0x248>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a8e      	ldr	r2, [pc, #568]	; (8002c78 <HAL_DMA_IRQHandler+0x24c>)
 8002a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a42:	0a9b      	lsrs	r3, r3, #10
 8002a44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	2208      	movs	r2, #8
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d01a      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d013      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0204 	bic.w	r2, r2, #4
 8002a7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a84:	2208      	movs	r2, #8
 8002a86:	409a      	lsls	r2, r3
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a90:	f043 0201 	orr.w	r2, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00b      	beq.n	8002ace <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	2201      	movs	r2, #1
 8002abc:	409a      	lsls	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f043 0202 	orr.w	r2, r3, #2
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d012      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00b      	beq.n	8002b04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2204      	movs	r2, #4
 8002af2:	409a      	lsls	r2, r3
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afc:	f043 0204 	orr.w	r2, r3, #4
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b08:	2210      	movs	r2, #16
 8002b0a:	409a      	lsls	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d043      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d03c      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2210      	movs	r2, #16
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d018      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d108      	bne.n	8002b5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d024      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	4798      	blx	r3
 8002b5a:	e01f      	b.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01b      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e016      	b.n	8002b9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d107      	bne.n	8002b8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0208 	bic.w	r2, r2, #8
 8002b8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	409a      	lsls	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 808f 	beq.w	8002ccc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0310 	and.w	r3, r3, #16
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8087 	beq.w	8002ccc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc2:	2220      	movs	r2, #32
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d136      	bne.n	8002c44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0216 	bic.w	r2, r2, #22
 8002be4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x1da>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d007      	beq.n	8002c16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0208 	bic.w	r2, r2, #8
 8002c14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1a:	223f      	movs	r2, #63	; 0x3f
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d07e      	beq.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
        }
        return;
 8002c42:	e079      	b.n	8002d38 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01d      	beq.n	8002c8e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10d      	bne.n	8002c7c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d031      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	4798      	blx	r3
 8002c70:	e02c      	b.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
 8002c72:	bf00      	nop
 8002c74:	20000000 	.word	0x20000000
 8002c78:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d023      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4798      	blx	r3
 8002c8c:	e01e      	b.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10f      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0210 	bic.w	r2, r2, #16
 8002caa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d032      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d022      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0201 	bic.w	r2, r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d307      	bcc.n	8002d14 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f2      	bne.n	8002cf8 <HAL_DMA_IRQHandler+0x2cc>
 8002d12:	e000      	b.n	8002d16 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d14:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d005      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	4798      	blx	r3
 8002d36:	e000      	b.n	8002d3a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d38:	bf00      	nop
    }
  }
}
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8002d40:	b480      	push	{r7}
 8002d42:	b087      	sub	sp, #28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	607a      	str	r2, [r7, #4]
 8002d4c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_DMA_RegisterCallback+0x20>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e03d      	b.n	8002ddc <HAL_DMA_RegisterCallback+0x9c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d12c      	bne.n	8002dce <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 8002d74:	7afb      	ldrb	r3, [r7, #11]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d826      	bhi.n	8002dc8 <HAL_DMA_RegisterCallback+0x88>
 8002d7a:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <HAL_DMA_RegisterCallback+0x40>)
 8002d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d80:	08002d99 	.word	0x08002d99
 8002d84:	08002da1 	.word	0x08002da1
 8002d88:	08002da9 	.word	0x08002da9
 8002d8c:	08002db1 	.word	0x08002db1
 8002d90:	08002db9 	.word	0x08002db9
 8002d94:	08002dc1 	.word	0x08002dc1
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8002d9e:	e018      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8002da6:	e014      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8002dae:	e010      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8002db6:	e00c      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8002dbe:	e008      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8002dc6:	e004      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>

    default:
      /* Return error status */
      status =  HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	75fb      	strb	r3, [r7, #23]
      break;
 8002dcc:	e001      	b.n	8002dd2 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	371c      	adds	r7, #28
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002df6:	b2db      	uxtb	r3, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d108      	bne.n	8002e44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e42:	e007      	b.n	8002e54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3b10      	subs	r3, #16
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d909      	bls.n	8002ea2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea0:	e007      	b.n	8002eb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	aaaaaaab 	.word	0xaaaaaaab
 8002ec8:	0800d818 	.word	0x0800d818

08002ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d856      	bhi.n	8002f9a <DMA_CheckFifoParam+0xce>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <DMA_CheckFifoParam+0x28>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f9b 	.word	0x08002f9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e043      	b.n	8002f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f1e:	d140      	bne.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e03d      	b.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	d121      	bne.n	8002f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d837      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xda>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <DMA_CheckFifoParam+0x70>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f53 	.word	0x08002f53
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002f65 	.word	0x08002f65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e030      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d025      	beq.n	8002faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e022      	b.n	8002faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f72:	e01c      	b.n	8002fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d903      	bls.n	8002f82 <DMA_CheckFifoParam+0xb6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f80:	e018      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      break;
 8002f86:	e015      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e00b      	b.n	8002fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e00a      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e008      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e006      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e159      	b.n	8003294 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 8148 	bne.w	800328e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	2b02      	cmp	r3, #2
 8003014:	d130      	bne.n	8003078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80a2 	beq.w	800328e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b57      	ldr	r3, [pc, #348]	; (80032ac <HAL_GPIO_Init+0x2e8>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a56      	ldr	r2, [pc, #344]	; (80032ac <HAL_GPIO_Init+0x2e8>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b54      	ldr	r3, [pc, #336]	; (80032ac <HAL_GPIO_Init+0x2e8>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a52      	ldr	r2, [pc, #328]	; (80032b0 <HAL_GPIO_Init+0x2ec>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a49      	ldr	r2, [pc, #292]	; (80032b4 <HAL_GPIO_Init+0x2f0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d019      	beq.n	80031c6 <HAL_GPIO_Init+0x202>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a48      	ldr	r2, [pc, #288]	; (80032b8 <HAL_GPIO_Init+0x2f4>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <HAL_GPIO_Init+0x1fe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_GPIO_Init+0x2f8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00d      	beq.n	80031be <HAL_GPIO_Init+0x1fa>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a46      	ldr	r2, [pc, #280]	; (80032c0 <HAL_GPIO_Init+0x2fc>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <HAL_GPIO_Init+0x1f6>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a45      	ldr	r2, [pc, #276]	; (80032c4 <HAL_GPIO_Init+0x300>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d101      	bne.n	80031b6 <HAL_GPIO_Init+0x1f2>
 80031b2:	2304      	movs	r3, #4
 80031b4:	e008      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031b6:	2307      	movs	r3, #7
 80031b8:	e006      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031ba:	2303      	movs	r3, #3
 80031bc:	e004      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031be:	2302      	movs	r3, #2
 80031c0:	e002      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <HAL_GPIO_Init+0x204>
 80031c6:	2300      	movs	r3, #0
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f002 0203 	and.w	r2, r2, #3
 80031ce:	0092      	lsls	r2, r2, #2
 80031d0:	4093      	lsls	r3, r2
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031d8:	4935      	ldr	r1, [pc, #212]	; (80032b0 <HAL_GPIO_Init+0x2ec>)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	089b      	lsrs	r3, r3, #2
 80031de:	3302      	adds	r3, #2
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031e6:	4b38      	ldr	r3, [pc, #224]	; (80032c8 <HAL_GPIO_Init+0x304>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800320a:	4a2f      	ldr	r2, [pc, #188]	; (80032c8 <HAL_GPIO_Init+0x304>)
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003210:	4b2d      	ldr	r3, [pc, #180]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	43db      	mvns	r3, r3
 800321a:	69ba      	ldr	r2, [r7, #24]
 800321c:	4013      	ands	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d003      	beq.n	8003234 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003234:	4a24      	ldr	r2, [pc, #144]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <HAL_GPIO_Init+0x304>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	43db      	mvns	r3, r3
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	4013      	ands	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800325e:	4a1a      	ldr	r2, [pc, #104]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <HAL_GPIO_Init+0x304>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	43db      	mvns	r3, r3
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	4013      	ands	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	4313      	orrs	r3, r2
 8003286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003288:	4a0f      	ldr	r2, [pc, #60]	; (80032c8 <HAL_GPIO_Init+0x304>)
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	3301      	adds	r3, #1
 8003292:	61fb      	str	r3, [r7, #28]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	2b0f      	cmp	r3, #15
 8003298:	f67f aea2 	bls.w	8002fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40013800 	.word	0x40013800
 80032b4:	40020000 	.word	0x40020000
 80032b8:	40020400 	.word	0x40020400
 80032bc:	40020800 	.word	0x40020800
 80032c0:	40020c00 	.word	0x40020c00
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40013c00 	.word	0x40013c00

080032cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	807b      	strh	r3, [r7, #2]
 80032d8:	4613      	mov	r3, r2
 80032da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032dc:	787b      	ldrb	r3, [r7, #1]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032e2:	887a      	ldrh	r2, [r7, #2]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032e8:	e003      	b.n	80032f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ea:	887b      	ldrh	r3, [r7, #2]
 80032ec:	041a      	lsls	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	619a      	str	r2, [r3, #24]
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003310:	887a      	ldrh	r2, [r7, #2]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4013      	ands	r3, r2
 8003316:	041a      	lsls	r2, r3, #16
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	43d9      	mvns	r1, r3
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	400b      	ands	r3, r1
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	619a      	str	r2, [r3, #24]
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
	...

08003334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	4603      	mov	r3, r0
 800333c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	695a      	ldr	r2, [r3, #20]
 8003342:	88fb      	ldrh	r3, [r7, #6]
 8003344:	4013      	ands	r3, r2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d006      	beq.n	8003358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334a:	4a05      	ldr	r2, [pc, #20]	; (8003360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	4618      	mov	r0, r3
 8003354:	f000 f806 	bl	8003364 <HAL_GPIO_EXTI_Callback>
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40013c00 	.word	0x40013c00

08003364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e267      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d075      	beq.n	8003486 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800339a:	4b88      	ldr	r3, [pc, #544]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	f003 030c 	and.w	r3, r3, #12
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d00c      	beq.n	80033c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033a6:	4b85      	ldr	r3, [pc, #532]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ae:	2b08      	cmp	r3, #8
 80033b0:	d112      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b2:	4b82      	ldr	r3, [pc, #520]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033be:	d10b      	bne.n	80033d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c0:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d05b      	beq.n	8003484 <HAL_RCC_OscConfig+0x108>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d157      	bne.n	8003484 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e242      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e0:	d106      	bne.n	80033f0 <HAL_RCC_OscConfig+0x74>
 80033e2:	4b76      	ldr	r3, [pc, #472]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a75      	ldr	r2, [pc, #468]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80033e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	e01d      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f8:	d10c      	bne.n	8003414 <HAL_RCC_OscConfig+0x98>
 80033fa:	4b70      	ldr	r3, [pc, #448]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a6f      	ldr	r2, [pc, #444]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003400:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	4b6d      	ldr	r3, [pc, #436]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a6c      	ldr	r2, [pc, #432]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 800340c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	e00b      	b.n	800342c <HAL_RCC_OscConfig+0xb0>
 8003414:	4b69      	ldr	r3, [pc, #420]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a68      	ldr	r2, [pc, #416]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 800341a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341e:	6013      	str	r3, [r2, #0]
 8003420:	4b66      	ldr	r3, [pc, #408]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a65      	ldr	r2, [pc, #404]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003426:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d013      	beq.n	800345c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff f820 	bl	8002478 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800343c:	f7ff f81c 	bl	8002478 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	; 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e207      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b5b      	ldr	r3, [pc, #364]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0f0      	beq.n	800343c <HAL_RCC_OscConfig+0xc0>
 800345a:	e014      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7ff f80c 	bl	8002478 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003464:	f7ff f808 	bl	8002478 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e1f3      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	4b51      	ldr	r3, [pc, #324]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0xe8>
 8003482:	e000      	b.n	8003486 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d063      	beq.n	800355a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003492:	4b4a      	ldr	r3, [pc, #296]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 030c 	and.w	r3, r3, #12
 800349a:	2b00      	cmp	r3, #0
 800349c:	d00b      	beq.n	80034b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800349e:	4b47      	ldr	r3, [pc, #284]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d11c      	bne.n	80034e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034aa:	4b44      	ldr	r3, [pc, #272]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d116      	bne.n	80034e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b6:	4b41      	ldr	r3, [pc, #260]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_RCC_OscConfig+0x152>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d001      	beq.n	80034ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e1c7      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ce:	4b3b      	ldr	r3, [pc, #236]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4937      	ldr	r1, [pc, #220]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e2:	e03a      	b.n	800355a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d020      	beq.n	800352e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ec:	4b34      	ldr	r3, [pc, #208]	; (80035c0 <HAL_RCC_OscConfig+0x244>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f2:	f7fe ffc1 	bl	8002478 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034fa:	f7fe ffbd 	bl	8002478 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e1a8      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	4b2b      	ldr	r3, [pc, #172]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0302 	and.w	r3, r3, #2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003518:	4b28      	ldr	r3, [pc, #160]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4925      	ldr	r1, [pc, #148]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003528:	4313      	orrs	r3, r2
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	e015      	b.n	800355a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_OscConfig+0x244>)
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe ffa0 	bl	8002478 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800353c:	f7fe ff9c 	bl	8002478 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e187      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	4b1b      	ldr	r3, [pc, #108]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f0      	bne.n	800353c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d036      	beq.n	80035d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d016      	beq.n	800359c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356e:	4b15      	ldr	r3, [pc, #84]	; (80035c4 <HAL_RCC_OscConfig+0x248>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003574:	f7fe ff80 	bl	8002478 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800357c:	f7fe ff7c 	bl	8002478 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e167      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <HAL_RCC_OscConfig+0x240>)
 8003590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCC_OscConfig+0x200>
 800359a:	e01b      	b.n	80035d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x248>)
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a2:	f7fe ff69 	bl	8002478 <HAL_GetTick>
 80035a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	e00e      	b.n	80035c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035aa:	f7fe ff65 	bl	8002478 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d907      	bls.n	80035c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e150      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
 80035bc:	40023800 	.word	0x40023800
 80035c0:	42470000 	.word	0x42470000
 80035c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c8:	4b88      	ldr	r3, [pc, #544]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80035ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ea      	bne.n	80035aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0304 	and.w	r3, r3, #4
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 8097 	beq.w	8003710 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e2:	2300      	movs	r3, #0
 80035e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035e6:	4b81      	ldr	r3, [pc, #516]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10f      	bne.n	8003612 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60bb      	str	r3, [r7, #8]
 80035f6:	4b7d      	ldr	r3, [pc, #500]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	4a7c      	ldr	r2, [pc, #496]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	6413      	str	r3, [r2, #64]	; 0x40
 8003602:	4b7a      	ldr	r3, [pc, #488]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b77      	ldr	r3, [pc, #476]	; (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b74      	ldr	r3, [pc, #464]	; (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a73      	ldr	r2, [pc, #460]	; (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe ff25 	bl	8002478 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fe ff21 	bl	8002478 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e10c      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b6a      	ldr	r3, [pc, #424]	; (80037f0 <HAL_RCC_OscConfig+0x474>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x2ea>
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a63      	ldr	r2, [pc, #396]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6713      	str	r3, [r2, #112]	; 0x70
 8003664:	e01c      	b.n	80036a0 <HAL_RCC_OscConfig+0x324>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b05      	cmp	r3, #5
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x30c>
 800366e:	4b5f      	ldr	r3, [pc, #380]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003672:	4a5e      	ldr	r2, [pc, #376]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	6713      	str	r3, [r2, #112]	; 0x70
 800367a:	4b5c      	ldr	r3, [pc, #368]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	4a5b      	ldr	r2, [pc, #364]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6713      	str	r3, [r2, #112]	; 0x70
 8003686:	e00b      	b.n	80036a0 <HAL_RCC_OscConfig+0x324>
 8003688:	4b58      	ldr	r3, [pc, #352]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800368a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368c:	4a57      	ldr	r2, [pc, #348]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800368e:	f023 0301 	bic.w	r3, r3, #1
 8003692:	6713      	str	r3, [r2, #112]	; 0x70
 8003694:	4b55      	ldr	r3, [pc, #340]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	4a54      	ldr	r2, [pc, #336]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800369a:	f023 0304 	bic.w	r3, r3, #4
 800369e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d015      	beq.n	80036d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe fee6 	bl	8002478 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ae:	e00a      	b.n	80036c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036b0:	f7fe fee2 	bl	8002478 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80036be:	4293      	cmp	r3, r2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0cb      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c6:	4b49      	ldr	r3, [pc, #292]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0ee      	beq.n	80036b0 <HAL_RCC_OscConfig+0x334>
 80036d2:	e014      	b.n	80036fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d4:	f7fe fed0 	bl	8002478 <HAL_GetTick>
 80036d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036da:	e00a      	b.n	80036f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036dc:	f7fe fecc 	bl	8002478 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e0b5      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f2:	4b3e      	ldr	r3, [pc, #248]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f6:	f003 0302 	and.w	r3, r3, #2
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1ee      	bne.n	80036dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b39      	ldr	r3, [pc, #228]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	4a38      	ldr	r2, [pc, #224]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80a1 	beq.w	800385c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800371a:	4b34      	ldr	r3, [pc, #208]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b08      	cmp	r3, #8
 8003724:	d05c      	beq.n	80037e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d141      	bne.n	80037b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372e:	4b31      	ldr	r3, [pc, #196]	; (80037f4 <HAL_RCC_OscConfig+0x478>)
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fe fea0 	bl	8002478 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7fe fe9c 	bl	8002478 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e087      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	4b27      	ldr	r3, [pc, #156]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	431a      	orrs	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	019b      	lsls	r3, r3, #6
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003770:	085b      	lsrs	r3, r3, #1
 8003772:	3b01      	subs	r3, #1
 8003774:	041b      	lsls	r3, r3, #16
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800377c:	061b      	lsls	r3, r3, #24
 800377e:	491b      	ldr	r1, [pc, #108]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x478>)
 8003786:	2201      	movs	r2, #1
 8003788:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800378a:	f7fe fe75 	bl	8002478 <HAL_GetTick>
 800378e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003790:	e008      	b.n	80037a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003792:	f7fe fe71 	bl	8002478 <HAL_GetTick>
 8003796:	4602      	mov	r2, r0
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	2b02      	cmp	r3, #2
 800379e:	d901      	bls.n	80037a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e05c      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a4:	4b11      	ldr	r3, [pc, #68]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0f0      	beq.n	8003792 <HAL_RCC_OscConfig+0x416>
 80037b0:	e054      	b.n	800385c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_RCC_OscConfig+0x478>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7fe fe5e 	bl	8002478 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037c0:	f7fe fe5a 	bl	8002478 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e045      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b06      	ldr	r3, [pc, #24]	; (80037ec <HAL_RCC_OscConfig+0x470>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x444>
 80037de:	e03d      	b.n	800385c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e038      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
 80037ec:	40023800 	.word	0x40023800
 80037f0:	40007000 	.word	0x40007000
 80037f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80037f8:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <HAL_RCC_OscConfig+0x4ec>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d028      	beq.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003810:	429a      	cmp	r2, r3
 8003812:	d121      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d11a      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003828:	4013      	ands	r3, r2
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800382e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003830:	4293      	cmp	r3, r2
 8003832:	d111      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	085b      	lsrs	r3, r3, #1
 8003840:	3b01      	subs	r3, #1
 8003842:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003844:	429a      	cmp	r2, r3
 8003846:	d107      	bne.n	8003858 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003852:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003854:	429a      	cmp	r2, r3
 8003856:	d001      	beq.n	800385c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e000      	b.n	800385e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800

0800386c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0cc      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b68      	ldr	r3, [pc, #416]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0307 	and.w	r3, r3, #7
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d90c      	bls.n	80038a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b65      	ldr	r3, [pc, #404]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	b2d2      	uxtb	r2, r2
 8003894:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b63      	ldr	r3, [pc, #396]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d001      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e0b8      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d020      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0304 	and.w	r3, r3, #4
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c0:	4b59      	ldr	r3, [pc, #356]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	4a58      	ldr	r2, [pc, #352]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d005      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038d8:	4b53      	ldr	r3, [pc, #332]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	4a52      	ldr	r2, [pc, #328]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b50      	ldr	r3, [pc, #320]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	494d      	ldr	r1, [pc, #308]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d044      	beq.n	800398c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390a:	4b47      	ldr	r3, [pc, #284]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d119      	bne.n	800394a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e07f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d003      	beq.n	800392a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003926:	2b03      	cmp	r3, #3
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	4b3f      	ldr	r3, [pc, #252]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e06f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	4b3b      	ldr	r3, [pc, #236]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e067      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b37      	ldr	r3, [pc, #220]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4934      	ldr	r1, [pc, #208]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800395c:	f7fe fd8c 	bl	8002478 <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fd88 	bl	8002478 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e04f      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b2b      	ldr	r3, [pc, #172]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b25      	ldr	r3, [pc, #148]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0307 	and.w	r3, r3, #7
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d20c      	bcs.n	80039b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a2:	4b20      	ldr	r3, [pc, #128]	; (8003a24 <HAL_RCC_ClockConfig+0x1b8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0307 	and.w	r3, r3, #7
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e032      	b.n	8003a1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d008      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c0:	4b19      	ldr	r3, [pc, #100]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4916      	ldr	r1, [pc, #88]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039de:	4b12      	ldr	r3, [pc, #72]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	490e      	ldr	r1, [pc, #56]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80039f2:	f000 f821 	bl	8003a38 <HAL_RCC_GetSysClockFreq>
 80039f6:	4602      	mov	r2, r0
 80039f8:	4b0b      	ldr	r3, [pc, #44]	; (8003a28 <HAL_RCC_ClockConfig+0x1bc>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	091b      	lsrs	r3, r3, #4
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	490a      	ldr	r1, [pc, #40]	; (8003a2c <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	5ccb      	ldrb	r3, [r1, r3]
 8003a06:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0a:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a0e:	4b09      	ldr	r3, [pc, #36]	; (8003a34 <HAL_RCC_ClockConfig+0x1c8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe fcec 	bl	80023f0 <HAL_InitTick>

  return HAL_OK;
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	40023c00 	.word	0x40023c00
 8003a28:	40023800 	.word	0x40023800
 8003a2c:	0800d7b4 	.word	0x0800d7b4
 8003a30:	20000000 	.word	0x20000000
 8003a34:	20000014 	.word	0x20000014

08003a38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b090      	sub	sp, #64	; 0x40
 8003a3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	637b      	str	r3, [r7, #52]	; 0x34
 8003a44:	2300      	movs	r3, #0
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a48:	2300      	movs	r3, #0
 8003a4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a50:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d00d      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	f200 80a1 	bhi.w	8003ba4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0x34>
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d003      	beq.n	8003a72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a6a:	e09b      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a6c:	4b53      	ldr	r3, [pc, #332]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003a6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003a70:	e09b      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a72:	4b53      	ldr	r3, [pc, #332]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a76:	e098      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a78:	4b4f      	ldr	r3, [pc, #316]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a82:	4b4d      	ldr	r3, [pc, #308]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d028      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	099b      	lsrs	r3, r3, #6
 8003a94:	2200      	movs	r2, #0
 8003a96:	623b      	str	r3, [r7, #32]
 8003a98:	627a      	str	r2, [r7, #36]	; 0x24
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4b47      	ldr	r3, [pc, #284]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003aa4:	fb03 f201 	mul.w	r2, r3, r1
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	fb00 f303 	mul.w	r3, r0, r3
 8003aae:	4413      	add	r3, r2
 8003ab0:	4a43      	ldr	r2, [pc, #268]	; (8003bc0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab2:	fba0 1202 	umull	r1, r2, r0, r2
 8003ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ab8:	460a      	mov	r2, r1
 8003aba:	62ba      	str	r2, [r7, #40]	; 0x28
 8003abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003abe:	4413      	add	r3, r2
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	61bb      	str	r3, [r7, #24]
 8003ac8:	61fa      	str	r2, [r7, #28]
 8003aca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ace:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ad2:	f7fc fbd5 	bl	8000280 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ade:	e053      	b.n	8003b88 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae0:	4b35      	ldr	r3, [pc, #212]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	099b      	lsrs	r3, r3, #6
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	617a      	str	r2, [r7, #20]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003af2:	f04f 0b00 	mov.w	fp, #0
 8003af6:	4652      	mov	r2, sl
 8003af8:	465b      	mov	r3, fp
 8003afa:	f04f 0000 	mov.w	r0, #0
 8003afe:	f04f 0100 	mov.w	r1, #0
 8003b02:	0159      	lsls	r1, r3, #5
 8003b04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b08:	0150      	lsls	r0, r2, #5
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	ebb2 080a 	subs.w	r8, r2, sl
 8003b12:	eb63 090b 	sbc.w	r9, r3, fp
 8003b16:	f04f 0200 	mov.w	r2, #0
 8003b1a:	f04f 0300 	mov.w	r3, #0
 8003b1e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b22:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b26:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b2a:	ebb2 0408 	subs.w	r4, r2, r8
 8003b2e:	eb63 0509 	sbc.w	r5, r3, r9
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	00eb      	lsls	r3, r5, #3
 8003b3c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b40:	00e2      	lsls	r2, r4, #3
 8003b42:	4614      	mov	r4, r2
 8003b44:	461d      	mov	r5, r3
 8003b46:	eb14 030a 	adds.w	r3, r4, sl
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	eb45 030b 	adc.w	r3, r5, fp
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b5e:	4629      	mov	r1, r5
 8003b60:	028b      	lsls	r3, r1, #10
 8003b62:	4621      	mov	r1, r4
 8003b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b68:	4621      	mov	r1, r4
 8003b6a:	028a      	lsls	r2, r1, #10
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b72:	2200      	movs	r2, #0
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	60fa      	str	r2, [r7, #12]
 8003b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b7c:	f7fc fb80 	bl	8000280 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4613      	mov	r3, r2
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	0c1b      	lsrs	r3, r3, #16
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	3301      	adds	r3, #1
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba2:	e002      	b.n	8003baa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ba4:	4b05      	ldr	r3, [pc, #20]	; (8003bbc <HAL_RCC_GetSysClockFreq+0x184>)
 8003ba6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ba8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3740      	adds	r7, #64	; 0x40
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	00f42400 	.word	0x00f42400
 8003bc0:	017d7840 	.word	0x017d7840

08003bc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bc8:	4b03      	ldr	r3, [pc, #12]	; (8003bd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003bca:	681b      	ldr	r3, [r3, #0]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000000 	.word	0x20000000

08003bdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003be0:	f7ff fff0 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003be4:	4602      	mov	r2, r0
 8003be6:	4b05      	ldr	r3, [pc, #20]	; (8003bfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	0a9b      	lsrs	r3, r3, #10
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	4903      	ldr	r1, [pc, #12]	; (8003c00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bf2:	5ccb      	ldrb	r3, [r1, r3]
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800d7c4 	.word	0x0800d7c4

08003c04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c08:	f7ff ffdc 	bl	8003bc4 <HAL_RCC_GetHCLKFreq>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	0b5b      	lsrs	r3, r3, #13
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	4903      	ldr	r1, [pc, #12]	; (8003c28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c1a:	5ccb      	ldrb	r3, [r1, r3]
 8003c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40023800 	.word	0x40023800
 8003c28:	0800d7c4 	.word	0x0800d7c4

08003c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d101      	bne.n	8003c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e07b      	b.n	8003d36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d108      	bne.n	8003c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c4e:	d009      	beq.n	8003c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
 8003c56:	e005      	b.n	8003c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fc ffd4 	bl	8000c2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	ea42 0103 	orr.w	r1, r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0104 	and.w	r1, r3, #4
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0210 	and.w	r2, r3, #16
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	69da      	ldr	r2, [r3, #28]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b088      	sub	sp, #32
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	603b      	str	r3, [r7, #0]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d101      	bne.n	8003d60 <HAL_SPI_Transmit+0x22>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	e126      	b.n	8003fae <HAL_SPI_Transmit+0x270>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d68:	f7fe fb86 	bl	8002478 <HAL_GetTick>
 8003d6c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d002      	beq.n	8003d84 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d82:	e10b      	b.n	8003f9c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Transmit+0x52>
 8003d8a:	88fb      	ldrh	r3, [r7, #6]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d102      	bne.n	8003d96 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d94:	e102      	b.n	8003f9c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2203      	movs	r2, #3
 8003d9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	88fa      	ldrh	r2, [r7, #6]
 8003dae:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	88fa      	ldrh	r2, [r7, #6]
 8003db4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ddc:	d10f      	bne.n	8003dfe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e08:	2b40      	cmp	r3, #64	; 0x40
 8003e0a:	d007      	beq.n	8003e1c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e1a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e24:	d14b      	bne.n	8003ebe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d002      	beq.n	8003e34 <HAL_SPI_Transmit+0xf6>
 8003e2e:	8afb      	ldrh	r3, [r7, #22]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d13e      	bne.n	8003eb2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	881a      	ldrh	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e44:	1c9a      	adds	r2, r3, #2
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	3b01      	subs	r3, #1
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e58:	e02b      	b.n	8003eb2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d112      	bne.n	8003e8e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	881a      	ldrh	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	1c9a      	adds	r2, r3, #2
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e8c:	e011      	b.n	8003eb2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8e:	f7fe faf3 	bl	8002478 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d803      	bhi.n	8003ea6 <HAL_SPI_Transmit+0x168>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea4:	d102      	bne.n	8003eac <HAL_SPI_Transmit+0x16e>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eb0:	e074      	b.n	8003f9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1ce      	bne.n	8003e5a <HAL_SPI_Transmit+0x11c>
 8003ebc:	e04c      	b.n	8003f58 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d002      	beq.n	8003ecc <HAL_SPI_Transmit+0x18e>
 8003ec6:	8afb      	ldrh	r3, [r7, #22]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d140      	bne.n	8003f4e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	330c      	adds	r3, #12
 8003ed6:	7812      	ldrb	r2, [r2, #0]
 8003ed8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ede:	1c5a      	adds	r2, r3, #1
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ef2:	e02c      	b.n	8003f4e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 0302 	and.w	r3, r3, #2
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d113      	bne.n	8003f2a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	3b01      	subs	r3, #1
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f28:	e011      	b.n	8003f4e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f2a:	f7fe faa5 	bl	8002478 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	683a      	ldr	r2, [r7, #0]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d803      	bhi.n	8003f42 <HAL_SPI_Transmit+0x204>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f40:	d102      	bne.n	8003f48 <HAL_SPI_Transmit+0x20a>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d102      	bne.n	8003f4e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f4c:	e026      	b.n	8003f9c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1cd      	bne.n	8003ef4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa09 	bl	8004374 <SPI_EndRxTxTransaction>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10a      	bne.n	8003f8c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f76:	2300      	movs	r3, #0
 8003f78:	613b      	str	r3, [r7, #16]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	613b      	str	r3, [r7, #16]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	613b      	str	r3, [r7, #16]
 8003f8a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d002      	beq.n	8003f9a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e000      	b.n	8003f9c <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
	...

08003fb8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_SPI_Transmit_DMA+0x20>
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	e09b      	b.n	8004110 <HAL_SPI_Transmit_DMA+0x158>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d002      	beq.n	8003ff2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003fec:	2302      	movs	r3, #2
 8003fee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ff0:	e089      	b.n	8004106 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d002      	beq.n	8003ffe <HAL_SPI_Transmit_DMA+0x46>
 8003ff8:	88fb      	ldrh	r3, [r7, #6]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d102      	bne.n	8004004 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004002:	e080      	b.n	8004106 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2203      	movs	r2, #3
 8004008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68ba      	ldr	r2, [r7, #8]
 8004016:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	88fa      	ldrh	r2, [r7, #6]
 8004022:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2200      	movs	r2, #0
 8004040:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404a:	d10f      	bne.n	800406c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800405a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800406a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <HAL_SPI_Transmit_DMA+0x160>)
 8004072:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	4a28      	ldr	r2, [pc, #160]	; (800411c <HAL_SPI_Transmit_DMA+0x164>)
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004080:	4a27      	ldr	r2, [pc, #156]	; (8004120 <HAL_SPI_Transmit_DMA+0x168>)
 8004082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004088:	2200      	movs	r2, #0
 800408a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	4619      	mov	r1, r3
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	330c      	adds	r3, #12
 800409c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80040a4:	f7fe fbd8 	bl	8002858 <HAL_DMA_Start_IT>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00c      	beq.n	80040c8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040c6:	e01e      	b.n	8004106 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d007      	beq.n	80040e6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0220 	orr.w	r2, r2, #32
 80040f4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	685a      	ldr	r2, [r3, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f042 0202 	orr.w	r2, r2, #2
 8004104:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800410e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004110:	4618      	mov	r0, r3
 8004112:	3718      	adds	r7, #24
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	08004209 	.word	0x08004209
 800411c:	08004161 	.word	0x08004161
 8004120:	08004225 	.word	0x08004225

08004124 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800416e:	f7fe f983 	bl	8002478 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800417e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004182:	d03b      	beq.n	80041fc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0220 	bic.w	r2, r2, #32
 8004192:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0202 	bic.w	r2, r2, #2
 80041a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041a4:	693a      	ldr	r2, [r7, #16]
 80041a6:	2164      	movs	r1, #100	; 0x64
 80041a8:	6978      	ldr	r0, [r7, #20]
 80041aa:	f000 f8e3 	bl	8004374 <SPI_EndRxTxTransaction>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0220 	orr.w	r2, r3, #32
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80041f4:	6978      	ldr	r0, [r7, #20]
 80041f6:	f7ff ffa9 	bl	800414c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80041fa:	e002      	b.n	8004202 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	f7ff ff91 	bl	8004124 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004214:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f7ff ff8e 	bl	8004138 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800421c:	bf00      	nop
 800421e:	3710      	adds	r7, #16
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004230:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0203 	bic.w	r2, r2, #3
 8004240:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f043 0210 	orr.w	r2, r3, #16
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004256:	68f8      	ldr	r0, [r7, #12]
 8004258:	f7ff ff78 	bl	800414c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	4613      	mov	r3, r2
 8004272:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004274:	f7fe f900 	bl	8002478 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	1a9b      	subs	r3, r3, r2
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	4413      	add	r3, r2
 8004282:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004284:	f7fe f8f8 	bl	8002478 <HAL_GetTick>
 8004288:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800428a:	4b39      	ldr	r3, [pc, #228]	; (8004370 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	015b      	lsls	r3, r3, #5
 8004290:	0d1b      	lsrs	r3, r3, #20
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	fb02 f303 	mul.w	r3, r2, r3
 8004298:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800429a:	e054      	b.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a2:	d050      	beq.n	8004346 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042a4:	f7fe f8e8 	bl	8002478 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d902      	bls.n	80042ba <SPI_WaitFlagStateUntilTimeout+0x56>
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d13d      	bne.n	8004336 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042c8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042d2:	d111      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d004      	beq.n	80042e8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042e6:	d107      	bne.n	80042f8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004300:	d10f      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004320:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e017      	b.n	8004366 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3b01      	subs	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4013      	ands	r3, r2
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	429a      	cmp	r2, r3
 8004354:	bf0c      	ite	eq
 8004356:	2301      	moveq	r3, #1
 8004358:	2300      	movne	r3, #0
 800435a:	b2db      	uxtb	r3, r3
 800435c:	461a      	mov	r2, r3
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	429a      	cmp	r2, r3
 8004362:	d19b      	bne.n	800429c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	20000000 	.word	0x20000000

08004374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b088      	sub	sp, #32
 8004378:	af02      	add	r7, sp, #8
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	60b9      	str	r1, [r7, #8]
 800437e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004380:	4b1b      	ldr	r3, [pc, #108]	; (80043f0 <SPI_EndRxTxTransaction+0x7c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a1b      	ldr	r2, [pc, #108]	; (80043f4 <SPI_EndRxTxTransaction+0x80>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	0d5b      	lsrs	r3, r3, #21
 800438c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800439e:	d112      	bne.n	80043c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2200      	movs	r2, #0
 80043a8:	2180      	movs	r1, #128	; 0x80
 80043aa:	68f8      	ldr	r0, [r7, #12]
 80043ac:	f7ff ff5a 	bl	8004264 <SPI_WaitFlagStateUntilTimeout>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d016      	beq.n	80043e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	f043 0220 	orr.w	r2, r3, #32
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e00f      	b.n	80043e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	3b01      	subs	r3, #1
 80043d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043dc:	2b80      	cmp	r3, #128	; 0x80
 80043de:	d0f2      	beq.n	80043c6 <SPI_EndRxTxTransaction+0x52>
 80043e0:	e000      	b.n	80043e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80043e2:	bf00      	nop
  }

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20000000 	.word	0x20000000
 80043f4:	165e9f81 	.word	0x165e9f81

080043f8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e097      	b.n	800453c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fc fc7d 	bl	8000d20 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800443c:	f023 0307 	bic.w	r3, r3, #7
 8004440:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	3304      	adds	r3, #4
 800444a:	4619      	mov	r1, r3
 800444c:	4610      	mov	r0, r2
 800444e:	f000 f879 	bl	8004544 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	699b      	ldr	r3, [r3, #24]
 8004460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	689a      	ldr	r2, [r3, #8]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	4313      	orrs	r3, r2
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	4313      	orrs	r3, r2
 8004490:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004498:	f023 030c 	bic.w	r3, r3, #12
 800449c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68da      	ldr	r2, [r3, #12]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	4313      	orrs	r3, r2
 80044b6:	693a      	ldr	r2, [r7, #16]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	011a      	lsls	r2, r3, #4
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	031b      	lsls	r3, r3, #12
 80044c8:	4313      	orrs	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044d6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	4313      	orrs	r3, r2
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a34      	ldr	r2, [pc, #208]	; (8004628 <TIM_Base_SetConfig+0xe4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00f      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004562:	d00b      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a31      	ldr	r2, [pc, #196]	; (800462c <TIM_Base_SetConfig+0xe8>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d007      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	4a30      	ldr	r2, [pc, #192]	; (8004630 <TIM_Base_SetConfig+0xec>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d003      	beq.n	800457c <TIM_Base_SetConfig+0x38>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a2f      	ldr	r2, [pc, #188]	; (8004634 <TIM_Base_SetConfig+0xf0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d108      	bne.n	800458e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	4313      	orrs	r3, r2
 800458c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a25      	ldr	r2, [pc, #148]	; (8004628 <TIM_Base_SetConfig+0xe4>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01b      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800459c:	d017      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a22      	ldr	r2, [pc, #136]	; (800462c <TIM_Base_SetConfig+0xe8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a21      	ldr	r2, [pc, #132]	; (8004630 <TIM_Base_SetConfig+0xec>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a20      	ldr	r2, [pc, #128]	; (8004634 <TIM_Base_SetConfig+0xf0>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a1f      	ldr	r2, [pc, #124]	; (8004638 <TIM_Base_SetConfig+0xf4>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a1e      	ldr	r2, [pc, #120]	; (800463c <TIM_Base_SetConfig+0xf8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0x8a>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <TIM_Base_SetConfig+0xfc>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a08      	ldr	r2, [pc, #32]	; (8004628 <TIM_Base_SetConfig+0xe4>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d103      	bne.n	8004614 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	691a      	ldr	r2, [r3, #16]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	615a      	str	r2, [r3, #20]
}
 800461a:	bf00      	nop
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40010000 	.word	0x40010000
 800462c:	40000400 	.word	0x40000400
 8004630:	40000800 	.word	0x40000800
 8004634:	40000c00 	.word	0x40000c00
 8004638:	40014000 	.word	0x40014000
 800463c:	40014400 	.word	0x40014400
 8004640:	40014800 	.word	0x40014800

08004644 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e050      	b.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004682:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1c      	ldr	r2, [pc, #112]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046a8:	d013      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a18      	ldr	r2, [pc, #96]	; (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a16      	ldr	r2, [pc, #88]	; (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a15      	ldr	r2, [pc, #84]	; (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d10c      	bne.n	80046ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40014000 	.word	0x40014000

08004720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e03f      	b.n	80047b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d106      	bne.n	800474c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7fc fb32 	bl	8000db0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2224      	movs	r2, #36	; 0x24
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 fc7b 	bl	8005060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	691a      	ldr	r2, [r3, #16]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2220      	movs	r2, #32
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b0ba      	sub	sp, #232	; 0xe8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047e2:	2300      	movs	r3, #0
 80047e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10f      	bne.n	8004822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d009      	beq.n	8004822 <HAL_UART_IRQHandler+0x66>
 800480e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 fb65 	bl	8004eea <UART_Receive_IT>
      return;
 8004820:	e256      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004826:	2b00      	cmp	r3, #0
 8004828:	f000 80de 	beq.w	80049e8 <HAL_UART_IRQHandler+0x22c>
 800482c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800483c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 80d1 	beq.w	80049e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <HAL_UART_IRQHandler+0xae>
 8004852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0201 	orr.w	r2, r3, #1
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800486a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00b      	beq.n	800488e <HAL_UART_IRQHandler+0xd2>
 8004876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d005      	beq.n	800488e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f043 0202 	orr.w	r2, r3, #2
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004892:	f003 0302 	and.w	r3, r3, #2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_UART_IRQHandler+0xf6>
 800489a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f043 0204 	orr.w	r2, r3, #4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d011      	beq.n	80048e2 <HAL_UART_IRQHandler+0x126>
 80048be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d105      	bne.n	80048d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	f043 0208 	orr.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	f000 81ed 	beq.w	8004cc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <HAL_UART_IRQHandler+0x14e>
 80048f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f000 faf0 	bl	8004eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f003 0308 	and.w	r3, r3, #8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <HAL_UART_IRQHandler+0x17a>
 800492e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004932:	2b00      	cmp	r3, #0
 8004934:	d04f      	beq.n	80049d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f9f8 	bl	8004d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d141      	bne.n	80049ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3314      	adds	r3, #20
 8004950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800497a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800498e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1d9      	bne.n	800494a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	2b00      	cmp	r3, #0
 800499c:	d013      	beq.n	80049c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	4a7d      	ldr	r2, [pc, #500]	; (8004b98 <HAL_UART_IRQHandler+0x3dc>)
 80049a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fe f81c 	bl	80029e8 <HAL_DMA_Abort_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d016      	beq.n	80049e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049c0:	4610      	mov	r0, r2
 80049c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e00e      	b.n	80049e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f99a 	bl	8004d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049cc:	e00a      	b.n	80049e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f996 	bl	8004d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	e006      	b.n	80049e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f992 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049e2:	e170      	b.n	8004cc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e4:	bf00      	nop
    return;
 80049e6:	e16e      	b.n	8004cc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	f040 814a 	bne.w	8004c86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f6:	f003 0310 	and.w	r3, r3, #16
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f000 8143 	beq.w	8004c86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a04:	f003 0310 	and.w	r3, r3, #16
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 813c 	beq.w	8004c86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60bb      	str	r3, [r7, #8]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	60bb      	str	r3, [r7, #8]
 8004a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	f040 80b4 	bne.w	8004b9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8140 	beq.w	8004cca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a52:	429a      	cmp	r2, r3
 8004a54:	f080 8139 	bcs.w	8004cca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a64:	69db      	ldr	r3, [r3, #28]
 8004a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6a:	f000 8088 	beq.w	8004b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	330c      	adds	r3, #12
 8004a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	330c      	adds	r3, #12
 8004a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1d9      	bne.n	8004a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004acc:	f023 0301 	bic.w	r3, r3, #1
 8004ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3314      	adds	r3, #20
 8004ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004aea:	e841 2300 	strex	r3, r2, [r1]
 8004aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1e1      	bne.n	8004aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3314      	adds	r3, #20
 8004afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b00:	e853 3f00 	ldrex	r3, [r3]
 8004b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3314      	adds	r3, #20
 8004b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e3      	bne.n	8004af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	330c      	adds	r3, #12
 8004b42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b46:	e853 3f00 	ldrex	r3, [r3]
 8004b4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b4e:	f023 0310 	bic.w	r3, r3, #16
 8004b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	330c      	adds	r3, #12
 8004b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e3      	bne.n	8004b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7fd fec5 	bl	8002908 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f8c0 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b94:	e099      	b.n	8004cca <HAL_UART_IRQHandler+0x50e>
 8004b96:	bf00      	nop
 8004b98:	08004df3 	.word	0x08004df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 808b 	beq.w	8004cce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f000 8086 	beq.w	8004cce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	330c      	adds	r3, #12
 8004bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	330c      	adds	r3, #12
 8004be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004be6:	647a      	str	r2, [r7, #68]	; 0x44
 8004be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e3      	bne.n	8004bc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	3314      	adds	r3, #20
 8004c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c04:	e853 3f00 	ldrex	r3, [r3]
 8004c08:	623b      	str	r3, [r7, #32]
   return(result);
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	f023 0301 	bic.w	r3, r3, #1
 8004c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c1e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e3      	bne.n	8004bfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	330c      	adds	r3, #12
 8004c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	e853 3f00 	ldrex	r3, [r3]
 8004c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 0310 	bic.w	r3, r3, #16
 8004c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c64:	61fa      	str	r2, [r7, #28]
 8004c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c68:	69b9      	ldr	r1, [r7, #24]
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	e841 2300 	strex	r3, r2, [r1]
 8004c70:	617b      	str	r3, [r7, #20]
   return(result);
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1e3      	bne.n	8004c40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f848 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c84:	e023      	b.n	8004cce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x4ea>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f8bb 	bl	8004e1a <UART_Transmit_IT>
    return;
 8004ca4:	e014      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00e      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x514>
 8004cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8fb 	bl	8004eba <UART_EndTransmit_IT>
    return;
 8004cc4:	e004      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
    return;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cce:	bf00      	nop
  }
}
 8004cd0:	37e8      	adds	r7, #232	; 0xe8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop

08004cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr

08004d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b095      	sub	sp, #84	; 0x54
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	330c      	adds	r3, #12
 8004d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	330c      	adds	r3, #12
 8004d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d54:	643a      	str	r2, [r7, #64]	; 0x40
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3314      	adds	r3, #20
 8004d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	6a3b      	ldr	r3, [r7, #32]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	3314      	adds	r3, #20
 8004d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e5      	bne.n	8004d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d119      	bne.n	8004dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	330c      	adds	r3, #12
 8004daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f023 0310 	bic.w	r3, r3, #16
 8004dba:	647b      	str	r3, [r7, #68]	; 0x44
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	330c      	adds	r3, #12
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004dc4:	61ba      	str	r2, [r7, #24]
 8004dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6979      	ldr	r1, [r7, #20]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004de6:	bf00      	nop
 8004de8:	3754      	adds	r7, #84	; 0x54
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b084      	sub	sp, #16
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f7ff ff77 	bl	8004d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}

08004e1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b085      	sub	sp, #20
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b21      	cmp	r3, #33	; 0x21
 8004e2c:	d13e      	bne.n	8004eac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e36:	d114      	bne.n	8004e62 <UART_Transmit_IT+0x48>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d110      	bne.n	8004e62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	881b      	ldrh	r3, [r3, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	1c9a      	adds	r2, r3, #2
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	621a      	str	r2, [r3, #32]
 8004e60:	e008      	b.n	8004e74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	1c59      	adds	r1, r3, #1
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	6211      	str	r1, [r2, #32]
 8004e6c:	781a      	ldrb	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	3b01      	subs	r3, #1
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4619      	mov	r1, r3
 8004e82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10f      	bne.n	8004ea8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ea6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	e000      	b.n	8004eae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004eac:	2302      	movs	r3, #2
  }
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b082      	sub	sp, #8
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f7ff fefc 	bl	8004cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b08c      	sub	sp, #48	; 0x30
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b22      	cmp	r3, #34	; 0x22
 8004efc:	f040 80ab 	bne.w	8005056 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f08:	d117      	bne.n	8004f3a <UART_Receive_IT+0x50>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691b      	ldr	r3, [r3, #16]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d113      	bne.n	8004f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f32:	1c9a      	adds	r2, r3, #2
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28
 8004f38:	e026      	b.n	8004f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f4c:	d007      	beq.n	8004f5e <UART_Receive_IT+0x74>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10a      	bne.n	8004f6c <UART_Receive_IT+0x82>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	b2da      	uxtb	r2, r3
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	701a      	strb	r2, [r3, #0]
 8004f6a:	e008      	b.n	8004f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	687a      	ldr	r2, [r7, #4]
 8004f94:	4619      	mov	r1, r3
 8004f96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d15a      	bne.n	8005052 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0220 	bic.w	r2, r2, #32
 8004faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68da      	ldr	r2, [r3, #12]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d135      	bne.n	8005048 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f023 0310 	bic.w	r3, r3, #16
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005002:	623a      	str	r2, [r7, #32]
 8005004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	69f9      	ldr	r1, [r7, #28]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0310 	and.w	r3, r3, #16
 8005020:	2b10      	cmp	r3, #16
 8005022:	d10a      	bne.n	800503a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005024:	2300      	movs	r3, #0
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60fb      	str	r3, [r7, #12]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	60fb      	str	r3, [r7, #12]
 8005038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800503e:	4619      	mov	r1, r3
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff fe67 	bl	8004d14 <HAL_UARTEx_RxEventCallback>
 8005046:	e002      	b.n	800504e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fe4f 	bl	8004cec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	e002      	b.n	8005058 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005052:	2300      	movs	r3, #0
 8005054:	e000      	b.n	8005058 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005056:	2302      	movs	r3, #2
  }
}
 8005058:	4618      	mov	r0, r3
 800505a:	3730      	adds	r7, #48	; 0x30
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005064:	b0c0      	sub	sp, #256	; 0x100
 8005066:	af00      	add	r7, sp, #0
 8005068:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507c:	68d9      	ldr	r1, [r3, #12]
 800507e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	ea40 0301 	orr.w	r3, r0, r1
 8005088:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	431a      	orrs	r2, r3
 8005098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	431a      	orrs	r2, r3
 80050a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80050b8:	f021 010c 	bic.w	r1, r1, #12
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80050c6:	430b      	orrs	r3, r1
 80050c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050da:	6999      	ldr	r1, [r3, #24]
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	ea40 0301 	orr.w	r3, r0, r1
 80050e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	4b8f      	ldr	r3, [pc, #572]	; (800532c <UART_SetConfig+0x2cc>)
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d005      	beq.n	8005100 <UART_SetConfig+0xa0>
 80050f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	4b8d      	ldr	r3, [pc, #564]	; (8005330 <UART_SetConfig+0x2d0>)
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d104      	bne.n	800510a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005100:	f7fe fd80 	bl	8003c04 <HAL_RCC_GetPCLK2Freq>
 8005104:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005108:	e003      	b.n	8005112 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800510a:	f7fe fd67 	bl	8003bdc <HAL_RCC_GetPCLK1Freq>
 800510e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800511c:	f040 810c 	bne.w	8005338 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005120:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005124:	2200      	movs	r2, #0
 8005126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800512a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800512e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005132:	4622      	mov	r2, r4
 8005134:	462b      	mov	r3, r5
 8005136:	1891      	adds	r1, r2, r2
 8005138:	65b9      	str	r1, [r7, #88]	; 0x58
 800513a:	415b      	adcs	r3, r3
 800513c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800513e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005142:	4621      	mov	r1, r4
 8005144:	eb12 0801 	adds.w	r8, r2, r1
 8005148:	4629      	mov	r1, r5
 800514a:	eb43 0901 	adc.w	r9, r3, r1
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800515a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800515e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005162:	4690      	mov	r8, r2
 8005164:	4699      	mov	r9, r3
 8005166:	4623      	mov	r3, r4
 8005168:	eb18 0303 	adds.w	r3, r8, r3
 800516c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005170:	462b      	mov	r3, r5
 8005172:	eb49 0303 	adc.w	r3, r9, r3
 8005176:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800517a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005186:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800518a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800518e:	460b      	mov	r3, r1
 8005190:	18db      	adds	r3, r3, r3
 8005192:	653b      	str	r3, [r7, #80]	; 0x50
 8005194:	4613      	mov	r3, r2
 8005196:	eb42 0303 	adc.w	r3, r2, r3
 800519a:	657b      	str	r3, [r7, #84]	; 0x54
 800519c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80051a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80051a4:	f7fb f86c 	bl	8000280 <__aeabi_uldivmod>
 80051a8:	4602      	mov	r2, r0
 80051aa:	460b      	mov	r3, r1
 80051ac:	4b61      	ldr	r3, [pc, #388]	; (8005334 <UART_SetConfig+0x2d4>)
 80051ae:	fba3 2302 	umull	r2, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	011c      	lsls	r4, r3, #4
 80051b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ba:	2200      	movs	r2, #0
 80051bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80051c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80051c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80051c8:	4642      	mov	r2, r8
 80051ca:	464b      	mov	r3, r9
 80051cc:	1891      	adds	r1, r2, r2
 80051ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80051d0:	415b      	adcs	r3, r3
 80051d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051d8:	4641      	mov	r1, r8
 80051da:	eb12 0a01 	adds.w	sl, r2, r1
 80051de:	4649      	mov	r1, r9
 80051e0:	eb43 0b01 	adc.w	fp, r3, r1
 80051e4:	f04f 0200 	mov.w	r2, #0
 80051e8:	f04f 0300 	mov.w	r3, #0
 80051ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f8:	4692      	mov	sl, r2
 80051fa:	469b      	mov	fp, r3
 80051fc:	4643      	mov	r3, r8
 80051fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005202:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005206:	464b      	mov	r3, r9
 8005208:	eb4b 0303 	adc.w	r3, fp, r3
 800520c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800521c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005220:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005224:	460b      	mov	r3, r1
 8005226:	18db      	adds	r3, r3, r3
 8005228:	643b      	str	r3, [r7, #64]	; 0x40
 800522a:	4613      	mov	r3, r2
 800522c:	eb42 0303 	adc.w	r3, r2, r3
 8005230:	647b      	str	r3, [r7, #68]	; 0x44
 8005232:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005236:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800523a:	f7fb f821 	bl	8000280 <__aeabi_uldivmod>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	4611      	mov	r1, r2
 8005244:	4b3b      	ldr	r3, [pc, #236]	; (8005334 <UART_SetConfig+0x2d4>)
 8005246:	fba3 2301 	umull	r2, r3, r3, r1
 800524a:	095b      	lsrs	r3, r3, #5
 800524c:	2264      	movs	r2, #100	; 0x64
 800524e:	fb02 f303 	mul.w	r3, r2, r3
 8005252:	1acb      	subs	r3, r1, r3
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800525a:	4b36      	ldr	r3, [pc, #216]	; (8005334 <UART_SetConfig+0x2d4>)
 800525c:	fba3 2302 	umull	r2, r3, r3, r2
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005268:	441c      	add	r4, r3
 800526a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800526e:	2200      	movs	r2, #0
 8005270:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005274:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005278:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800527c:	4642      	mov	r2, r8
 800527e:	464b      	mov	r3, r9
 8005280:	1891      	adds	r1, r2, r2
 8005282:	63b9      	str	r1, [r7, #56]	; 0x38
 8005284:	415b      	adcs	r3, r3
 8005286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005288:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800528c:	4641      	mov	r1, r8
 800528e:	1851      	adds	r1, r2, r1
 8005290:	6339      	str	r1, [r7, #48]	; 0x30
 8005292:	4649      	mov	r1, r9
 8005294:	414b      	adcs	r3, r1
 8005296:	637b      	str	r3, [r7, #52]	; 0x34
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80052a4:	4659      	mov	r1, fp
 80052a6:	00cb      	lsls	r3, r1, #3
 80052a8:	4651      	mov	r1, sl
 80052aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ae:	4651      	mov	r1, sl
 80052b0:	00ca      	lsls	r2, r1, #3
 80052b2:	4610      	mov	r0, r2
 80052b4:	4619      	mov	r1, r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	4642      	mov	r2, r8
 80052ba:	189b      	adds	r3, r3, r2
 80052bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80052c0:	464b      	mov	r3, r9
 80052c2:	460a      	mov	r2, r1
 80052c4:	eb42 0303 	adc.w	r3, r2, r3
 80052c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052e0:	460b      	mov	r3, r1
 80052e2:	18db      	adds	r3, r3, r3
 80052e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052e6:	4613      	mov	r3, r2
 80052e8:	eb42 0303 	adc.w	r3, r2, r3
 80052ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052f6:	f7fa ffc3 	bl	8000280 <__aeabi_uldivmod>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <UART_SetConfig+0x2d4>)
 8005300:	fba3 1302 	umull	r1, r3, r3, r2
 8005304:	095b      	lsrs	r3, r3, #5
 8005306:	2164      	movs	r1, #100	; 0x64
 8005308:	fb01 f303 	mul.w	r3, r1, r3
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	3332      	adds	r3, #50	; 0x32
 8005312:	4a08      	ldr	r2, [pc, #32]	; (8005334 <UART_SetConfig+0x2d4>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	095b      	lsrs	r3, r3, #5
 800531a:	f003 0207 	and.w	r2, r3, #7
 800531e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4422      	add	r2, r4
 8005326:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005328:	e105      	b.n	8005536 <UART_SetConfig+0x4d6>
 800532a:	bf00      	nop
 800532c:	40011000 	.word	0x40011000
 8005330:	40011400 	.word	0x40011400
 8005334:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005338:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800533c:	2200      	movs	r2, #0
 800533e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005342:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005346:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800534a:	4642      	mov	r2, r8
 800534c:	464b      	mov	r3, r9
 800534e:	1891      	adds	r1, r2, r2
 8005350:	6239      	str	r1, [r7, #32]
 8005352:	415b      	adcs	r3, r3
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
 8005356:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800535a:	4641      	mov	r1, r8
 800535c:	1854      	adds	r4, r2, r1
 800535e:	4649      	mov	r1, r9
 8005360:	eb43 0501 	adc.w	r5, r3, r1
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	00eb      	lsls	r3, r5, #3
 800536e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005372:	00e2      	lsls	r2, r4, #3
 8005374:	4614      	mov	r4, r2
 8005376:	461d      	mov	r5, r3
 8005378:	4643      	mov	r3, r8
 800537a:	18e3      	adds	r3, r4, r3
 800537c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005380:	464b      	mov	r3, r9
 8005382:	eb45 0303 	adc.w	r3, r5, r3
 8005386:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800538a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005396:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	f04f 0300 	mov.w	r3, #0
 80053a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80053a6:	4629      	mov	r1, r5
 80053a8:	008b      	lsls	r3, r1, #2
 80053aa:	4621      	mov	r1, r4
 80053ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053b0:	4621      	mov	r1, r4
 80053b2:	008a      	lsls	r2, r1, #2
 80053b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80053b8:	f7fa ff62 	bl	8000280 <__aeabi_uldivmod>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4b60      	ldr	r3, [pc, #384]	; (8005544 <UART_SetConfig+0x4e4>)
 80053c2:	fba3 2302 	umull	r2, r3, r3, r2
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	011c      	lsls	r4, r3, #4
 80053ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80053d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053dc:	4642      	mov	r2, r8
 80053de:	464b      	mov	r3, r9
 80053e0:	1891      	adds	r1, r2, r2
 80053e2:	61b9      	str	r1, [r7, #24]
 80053e4:	415b      	adcs	r3, r3
 80053e6:	61fb      	str	r3, [r7, #28]
 80053e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ec:	4641      	mov	r1, r8
 80053ee:	1851      	adds	r1, r2, r1
 80053f0:	6139      	str	r1, [r7, #16]
 80053f2:	4649      	mov	r1, r9
 80053f4:	414b      	adcs	r3, r1
 80053f6:	617b      	str	r3, [r7, #20]
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005404:	4659      	mov	r1, fp
 8005406:	00cb      	lsls	r3, r1, #3
 8005408:	4651      	mov	r1, sl
 800540a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800540e:	4651      	mov	r1, sl
 8005410:	00ca      	lsls	r2, r1, #3
 8005412:	4610      	mov	r0, r2
 8005414:	4619      	mov	r1, r3
 8005416:	4603      	mov	r3, r0
 8005418:	4642      	mov	r2, r8
 800541a:	189b      	adds	r3, r3, r2
 800541c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005420:	464b      	mov	r3, r9
 8005422:	460a      	mov	r2, r1
 8005424:	eb42 0303 	adc.w	r3, r2, r3
 8005428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800542c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	67bb      	str	r3, [r7, #120]	; 0x78
 8005436:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005438:	f04f 0200 	mov.w	r2, #0
 800543c:	f04f 0300 	mov.w	r3, #0
 8005440:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005444:	4649      	mov	r1, r9
 8005446:	008b      	lsls	r3, r1, #2
 8005448:	4641      	mov	r1, r8
 800544a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800544e:	4641      	mov	r1, r8
 8005450:	008a      	lsls	r2, r1, #2
 8005452:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005456:	f7fa ff13 	bl	8000280 <__aeabi_uldivmod>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <UART_SetConfig+0x4e4>)
 8005460:	fba3 1302 	umull	r1, r3, r3, r2
 8005464:	095b      	lsrs	r3, r3, #5
 8005466:	2164      	movs	r1, #100	; 0x64
 8005468:	fb01 f303 	mul.w	r3, r1, r3
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	3332      	adds	r3, #50	; 0x32
 8005472:	4a34      	ldr	r2, [pc, #208]	; (8005544 <UART_SetConfig+0x4e4>)
 8005474:	fba2 2303 	umull	r2, r3, r2, r3
 8005478:	095b      	lsrs	r3, r3, #5
 800547a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800547e:	441c      	add	r4, r3
 8005480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005484:	2200      	movs	r2, #0
 8005486:	673b      	str	r3, [r7, #112]	; 0x70
 8005488:	677a      	str	r2, [r7, #116]	; 0x74
 800548a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800548e:	4642      	mov	r2, r8
 8005490:	464b      	mov	r3, r9
 8005492:	1891      	adds	r1, r2, r2
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	415b      	adcs	r3, r3
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800549e:	4641      	mov	r1, r8
 80054a0:	1851      	adds	r1, r2, r1
 80054a2:	6039      	str	r1, [r7, #0]
 80054a4:	4649      	mov	r1, r9
 80054a6:	414b      	adcs	r3, r1
 80054a8:	607b      	str	r3, [r7, #4]
 80054aa:	f04f 0200 	mov.w	r2, #0
 80054ae:	f04f 0300 	mov.w	r3, #0
 80054b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80054b6:	4659      	mov	r1, fp
 80054b8:	00cb      	lsls	r3, r1, #3
 80054ba:	4651      	mov	r1, sl
 80054bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054c0:	4651      	mov	r1, sl
 80054c2:	00ca      	lsls	r2, r1, #3
 80054c4:	4610      	mov	r0, r2
 80054c6:	4619      	mov	r1, r3
 80054c8:	4603      	mov	r3, r0
 80054ca:	4642      	mov	r2, r8
 80054cc:	189b      	adds	r3, r3, r2
 80054ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d0:	464b      	mov	r3, r9
 80054d2:	460a      	mov	r2, r1
 80054d4:	eb42 0303 	adc.w	r3, r2, r3
 80054d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	663b      	str	r3, [r7, #96]	; 0x60
 80054e4:	667a      	str	r2, [r7, #100]	; 0x64
 80054e6:	f04f 0200 	mov.w	r2, #0
 80054ea:	f04f 0300 	mov.w	r3, #0
 80054ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054f2:	4649      	mov	r1, r9
 80054f4:	008b      	lsls	r3, r1, #2
 80054f6:	4641      	mov	r1, r8
 80054f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054fc:	4641      	mov	r1, r8
 80054fe:	008a      	lsls	r2, r1, #2
 8005500:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005504:	f7fa febc 	bl	8000280 <__aeabi_uldivmod>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4b0d      	ldr	r3, [pc, #52]	; (8005544 <UART_SetConfig+0x4e4>)
 800550e:	fba3 1302 	umull	r1, r3, r3, r2
 8005512:	095b      	lsrs	r3, r3, #5
 8005514:	2164      	movs	r1, #100	; 0x64
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	3332      	adds	r3, #50	; 0x32
 8005520:	4a08      	ldr	r2, [pc, #32]	; (8005544 <UART_SetConfig+0x4e4>)
 8005522:	fba2 2303 	umull	r2, r3, r2, r3
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	f003 020f 	and.w	r2, r3, #15
 800552c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4422      	add	r2, r4
 8005534:	609a      	str	r2, [r3, #8]
}
 8005536:	bf00      	nop
 8005538:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800553c:	46bd      	mov	sp, r7
 800553e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005542:	bf00      	nop
 8005544:	51eb851f 	.word	0x51eb851f

08005548 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	607a      	str	r2, [r7, #4]
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 800555a:	89fb      	ldrh	r3, [r7, #14]
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	b21a      	sxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b21b      	sxth	r3, r3
 8005566:	4313      	orrs	r3, r2
 8005568:	b21b      	sxth	r3, r3
 800556a:	b29b      	uxth	r3, r3
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2201      	movs	r2, #1
 8005594:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80055da:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055e2:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	73fb      	strb	r3, [r7, #15]
 8005600:	e010      	b.n	8005624 <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 8005602:	7bfb      	ldrb	r3, [r7, #15]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	3307      	adds	r3, #7
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	2200      	movs	r2, #0
 800560e:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8005610:	7bfb      	ldrb	r3, [r7, #15]
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	3307      	adds	r3, #7
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	4413      	add	r3, r2
 800561a:	2200      	movs	r2, #0
 800561c:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800561e:	7bfb      	ldrb	r3, [r7, #15]
 8005620:	3301      	adds	r3, #1
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	2b03      	cmp	r3, #3
 8005628:	d9eb      	bls.n	8005602 <UG_Init+0x8a>
   }

   gui = g;
 800562a:	4a05      	ldr	r2, [pc, #20]	; (8005640 <UG_Init+0xc8>)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6013      	str	r3, [r2, #0]
   return 1;
 8005630:	2301      	movs	r3, #1
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	200004fc 	.word	0x200004fc

08005644 <UG_GetGUI>:
   gui = g;
   return 1;
}

UG_GUI* UG_GetGUI( void )
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
   return gui;
 8005648:	4b03      	ldr	r3, [pc, #12]	; (8005658 <UG_GetGUI+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	200004fc 	.word	0x200004fc

0800565c <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  gui->font = font;
 8005664:	4b04      	ldr	r3, [pc, #16]	; (8005678 <UG_FontSelect+0x1c>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	611a      	str	r2, [r3, #16]
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr
 8005678:	200004fc 	.word	0x200004fc

0800567c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af02      	add	r7, sp, #8
 8005682:	4603      	mov	r3, r0
 8005684:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8005686:	4b0e      	ldr	r3, [pc, #56]	; (80056c0 <UG_FillScreen+0x44>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	b21a      	sxth	r2, r3
 8005698:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <UG_FillScreen+0x44>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	b219      	sxth	r1, r3
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	460b      	mov	r3, r1
 80056b0:	2100      	movs	r1, #0
 80056b2:	2000      	movs	r0, #0
 80056b4:	f000 f806 	bl	80056c4 <UG_FillFrame>
}
 80056b8:	bf00      	nop
 80056ba:	3708      	adds	r7, #8
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	200004fc 	.word	0x200004fc

080056c4 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80056c4:	b5b0      	push	{r4, r5, r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	4604      	mov	r4, r0
 80056cc:	4608      	mov	r0, r1
 80056ce:	4611      	mov	r1, r2
 80056d0:	461a      	mov	r2, r3
 80056d2:	4623      	mov	r3, r4
 80056d4:	80fb      	strh	r3, [r7, #6]
 80056d6:	4603      	mov	r3, r0
 80056d8:	80bb      	strh	r3, [r7, #4]
 80056da:	460b      	mov	r3, r1
 80056dc:	807b      	strh	r3, [r7, #2]
 80056de:	4613      	mov	r3, r2
 80056e0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80056e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	da05      	bge.n	80056fa <UG_FillFrame+0x36>
     swap(x1,x2);
 80056ee:	88fb      	ldrh	r3, [r7, #6]
 80056f0:	817b      	strh	r3, [r7, #10]
 80056f2:	887b      	ldrh	r3, [r7, #2]
 80056f4:	80fb      	strh	r3, [r7, #6]
 80056f6:	897b      	ldrh	r3, [r7, #10]
 80056f8:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80056fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80056fe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005702:	429a      	cmp	r2, r3
 8005704:	da05      	bge.n	8005712 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8005706:	88bb      	ldrh	r3, [r7, #4]
 8005708:	813b      	strh	r3, [r7, #8]
 800570a:	883b      	ldrh	r3, [r7, #0]
 800570c:	80bb      	strh	r3, [r7, #4]
 800570e:	893b      	ldrh	r3, [r7, #8]
 8005710:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8005712:	4b24      	ldr	r3, [pc, #144]	; (80057a4 <UG_FillFrame+0xe0>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d012      	beq.n	8005748 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005722:	4b20      	ldr	r3, [pc, #128]	; (80057a4 <UG_FillFrame+0xe0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005728:	461d      	mov	r5, r3
 800572a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800572e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005732:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005736:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800573a:	8c3b      	ldrh	r3, [r7, #32]
 800573c:	9300      	str	r3, [sp, #0]
 800573e:	4623      	mov	r3, r4
 8005740:	47a8      	blx	r5
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d028      	beq.n	800579a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 8005748:	88bb      	ldrh	r3, [r7, #4]
 800574a:	81bb      	strh	r3, [r7, #12]
 800574c:	e01e      	b.n	800578c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	81fb      	strh	r3, [r7, #14]
 8005752:	e00f      	b.n	8005774 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 8005754:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <UG_FillFrame+0xe0>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	8c3a      	ldrh	r2, [r7, #32]
 800575e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8005762:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8005766:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8005768:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800576c:	b29b      	uxth	r3, r3
 800576e:	3301      	adds	r3, #1
 8005770:	b29b      	uxth	r3, r3
 8005772:	81fb      	strh	r3, [r7, #14]
 8005774:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005778:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800577c:	429a      	cmp	r2, r3
 800577e:	dde9      	ble.n	8005754 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8005780:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005784:	b29b      	uxth	r3, r3
 8005786:	3301      	adds	r3, #1
 8005788:	b29b      	uxth	r3, r3
 800578a:	81bb      	strh	r3, [r7, #12]
 800578c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005790:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005794:	429a      	cmp	r2, r3
 8005796:	ddda      	ble.n	800574e <UG_FillFrame+0x8a>
 8005798:	e000      	b.n	800579c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800579a:	bf00      	nop
      }
   }
}
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bdb0      	pop	{r4, r5, r7, pc}
 80057a2:	bf00      	nop
 80057a4:	200004fc 	.word	0x200004fc

080057a8 <UG_DrawMesh>:
     x++;
   }
}

void UG_DrawMesh( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_U16 spacing, UG_COLOR c )
{
 80057a8:	b590      	push	{r4, r7, lr}
 80057aa:	b087      	sub	sp, #28
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	4611      	mov	r1, r2
 80057b4:	461a      	mov	r2, r3
 80057b6:	4623      	mov	r3, r4
 80057b8:	80fb      	strh	r3, [r7, #6]
 80057ba:	4603      	mov	r3, r0
 80057bc:	80bb      	strh	r3, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	807b      	strh	r3, [r7, #2]
 80057c2:	4613      	mov	r3, r2
 80057c4:	803b      	strh	r3, [r7, #0]
   UG_U16 p;

   if ( x2 < x1 )
 80057c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	da05      	bge.n	80057de <UG_DrawMesh+0x36>
     swap(x1,x2);
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	81bb      	strh	r3, [r7, #12]
 80057d6:	887b      	ldrh	r3, [r7, #2]
 80057d8:	80fb      	strh	r3, [r7, #6]
 80057da:	89bb      	ldrh	r3, [r7, #12]
 80057dc:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 80057de:	f9b7 2000 	ldrsh.w	r2, [r7]
 80057e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	da05      	bge.n	80057f6 <UG_DrawMesh+0x4e>
     swap(y1,y2);
 80057ea:	88bb      	ldrh	r3, [r7, #4]
 80057ec:	817b      	strh	r3, [r7, #10]
 80057ee:	883b      	ldrh	r3, [r7, #0]
 80057f0:	80bb      	strh	r3, [r7, #4]
 80057f2:	897b      	ldrh	r3, [r7, #10]
 80057f4:	803b      	strh	r3, [r7, #0]

   for( p=y1; p<y2; p+=spacing )
 80057f6:	88bb      	ldrh	r3, [r7, #4]
 80057f8:	81fb      	strh	r3, [r7, #14]
 80057fa:	e010      	b.n	800581e <UG_DrawMesh+0x76>
   {
     UG_DrawLine(x1, p, x2, p, c);
 80057fc:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8005800:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005804:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005808:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800580c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	4623      	mov	r3, r4
 8005812:	f000 fa61 	bl	8005cd8 <UG_DrawLine>
   for( p=y1; p<y2; p+=spacing )
 8005816:	89fa      	ldrh	r2, [r7, #14]
 8005818:	8c3b      	ldrh	r3, [r7, #32]
 800581a:	4413      	add	r3, r2
 800581c:	81fb      	strh	r3, [r7, #14]
 800581e:	89fa      	ldrh	r2, [r7, #14]
 8005820:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005824:	429a      	cmp	r2, r3
 8005826:	dbe9      	blt.n	80057fc <UG_DrawMesh+0x54>
   }
   UG_DrawLine(x1, y2, x2, y2, c);
 8005828:	f9b7 4000 	ldrsh.w	r4, [r7]
 800582c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005830:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005834:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800583a:	9300      	str	r3, [sp, #0]
 800583c:	4623      	mov	r3, r4
 800583e:	f000 fa4b 	bl	8005cd8 <UG_DrawLine>

   for( p=x1; p<x2; p+=spacing )
 8005842:	88fb      	ldrh	r3, [r7, #6]
 8005844:	81fb      	strh	r3, [r7, #14]
 8005846:	e010      	b.n	800586a <UG_DrawMesh+0xc2>
   {
     UG_DrawLine(p, y1, p, y2, c);
 8005848:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800584c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005850:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005854:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005858:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	4623      	mov	r3, r4
 800585e:	f000 fa3b 	bl	8005cd8 <UG_DrawLine>
   for( p=x1; p<x2; p+=spacing )
 8005862:	89fa      	ldrh	r2, [r7, #14]
 8005864:	8c3b      	ldrh	r3, [r7, #32]
 8005866:	4413      	add	r3, r2
 8005868:	81fb      	strh	r3, [r7, #14]
 800586a:	89fa      	ldrh	r2, [r7, #14]
 800586c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005870:	429a      	cmp	r2, r3
 8005872:	dbe9      	blt.n	8005848 <UG_DrawMesh+0xa0>
   }
   UG_DrawLine(x2, y1, x2, y2, c);
 8005874:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005878:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800587c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005880:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005884:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4623      	mov	r3, r4
 800588a:	f000 fa25 	bl	8005cd8 <UG_DrawLine>
}
 800588e:	bf00      	nop
 8005890:	3714      	adds	r7, #20
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}

08005896 <UG_DrawFrame>:

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005896:	b590      	push	{r4, r7, lr}
 8005898:	b085      	sub	sp, #20
 800589a:	af02      	add	r7, sp, #8
 800589c:	4604      	mov	r4, r0
 800589e:	4608      	mov	r0, r1
 80058a0:	4611      	mov	r1, r2
 80058a2:	461a      	mov	r2, r3
 80058a4:	4623      	mov	r3, r4
 80058a6:	80fb      	strh	r3, [r7, #6]
 80058a8:	4603      	mov	r3, r0
 80058aa:	80bb      	strh	r3, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	807b      	strh	r3, [r7, #2]
 80058b0:	4613      	mov	r3, r2
 80058b2:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 80058b4:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80058b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058bc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058c4:	8b3b      	ldrh	r3, [r7, #24]
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	4623      	mov	r3, r4
 80058ca:	f000 fa05 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 80058ce:	f9b7 4000 	ldrsh.w	r4, [r7]
 80058d2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80058d6:	f9b7 1000 	ldrsh.w	r1, [r7]
 80058da:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058de:	8b3b      	ldrh	r3, [r7, #24]
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	4623      	mov	r3, r4
 80058e4:	f000 f9f8 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 80058e8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80058ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80058f0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058f4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058f8:	8b3b      	ldrh	r3, [r7, #24]
 80058fa:	9300      	str	r3, [sp, #0]
 80058fc:	4623      	mov	r3, r4
 80058fe:	f000 f9eb 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 8005902:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005906:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800590a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800590e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005912:	8b3b      	ldrh	r3, [r7, #24]
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	4623      	mov	r3, r4
 8005918:	f000 f9de 	bl	8005cd8 <UG_DrawLine>
}
 800591c:	bf00      	nop
 800591e:	370c      	adds	r7, #12
 8005920:	46bd      	mov	sp, r7
 8005922:	bd90      	pop	{r4, r7, pc}

08005924 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	80fb      	strh	r3, [r7, #6]
 800592e:	460b      	mov	r3, r1
 8005930:	80bb      	strh	r3, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 8005936:	4b07      	ldr	r3, [pc, #28]	; (8005954 <UG_DrawPixel+0x30>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	887a      	ldrh	r2, [r7, #2]
 8005940:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005944:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005948:	4798      	blx	r3
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	200004fc 	.word	0x200004fc

08005958 <UG_DrawCircle>:

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005958:	b590      	push	{r4, r7, lr}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	4604      	mov	r4, r0
 8005960:	4608      	mov	r0, r1
 8005962:	4611      	mov	r1, r2
 8005964:	461a      	mov	r2, r3
 8005966:	4623      	mov	r3, r4
 8005968:	80fb      	strh	r3, [r7, #6]
 800596a:	4603      	mov	r3, r0
 800596c:	80bb      	strh	r3, [r7, #4]
 800596e:	460b      	mov	r3, r1
 8005970:	807b      	strh	r3, [r7, #2]
 8005972:	4613      	mov	r3, r2
 8005974:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8005976:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f2c0 80c8 	blt.w	8005b10 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 8005980:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f2c0 80c5 	blt.w	8005b14 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 800598a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800598e:	2b00      	cmp	r3, #0
 8005990:	f340 80c2 	ble.w	8005b18 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	005b      	lsls	r3, r3, #1
 8005998:	b29b      	uxth	r3, r3
 800599a:	f1c3 0301 	rsb	r3, r3, #1
 800599e:	b29b      	uxth	r3, r3
 80059a0:	827b      	strh	r3, [r7, #18]
   yd = 0;
 80059a2:	2300      	movs	r3, #0
 80059a4:	823b      	strh	r3, [r7, #16]
   e = 0;
 80059a6:	2300      	movs	r3, #0
 80059a8:	81fb      	strh	r3, [r7, #14]
   x = r;
 80059aa:	887b      	ldrh	r3, [r7, #2]
 80059ac:	82fb      	strh	r3, [r7, #22]
   y = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 80059b2:	e0a5      	b.n	8005b00 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 80059b4:	4b5a      	ldr	r3, [pc, #360]	; (8005b20 <UG_DrawCircle+0x1c8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	88f9      	ldrh	r1, [r7, #6]
 80059be:	8afa      	ldrh	r2, [r7, #22]
 80059c0:	1a8a      	subs	r2, r1, r2
 80059c2:	b292      	uxth	r2, r2
 80059c4:	b210      	sxth	r0, r2
 80059c6:	88b9      	ldrh	r1, [r7, #4]
 80059c8:	8aba      	ldrh	r2, [r7, #20]
 80059ca:	440a      	add	r2, r1
 80059cc:	b292      	uxth	r2, r2
 80059ce:	b211      	sxth	r1, r2
 80059d0:	883a      	ldrh	r2, [r7, #0]
 80059d2:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 80059d4:	4b52      	ldr	r3, [pc, #328]	; (8005b20 <UG_DrawCircle+0x1c8>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	88f9      	ldrh	r1, [r7, #6]
 80059de:	8afa      	ldrh	r2, [r7, #22]
 80059e0:	1a8a      	subs	r2, r1, r2
 80059e2:	b292      	uxth	r2, r2
 80059e4:	b210      	sxth	r0, r2
 80059e6:	88b9      	ldrh	r1, [r7, #4]
 80059e8:	8aba      	ldrh	r2, [r7, #20]
 80059ea:	1a8a      	subs	r2, r1, r2
 80059ec:	b292      	uxth	r2, r2
 80059ee:	b211      	sxth	r1, r2
 80059f0:	883a      	ldrh	r2, [r7, #0]
 80059f2:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 80059f4:	4b4a      	ldr	r3, [pc, #296]	; (8005b20 <UG_DrawCircle+0x1c8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	88f9      	ldrh	r1, [r7, #6]
 80059fe:	8afa      	ldrh	r2, [r7, #22]
 8005a00:	440a      	add	r2, r1
 8005a02:	b292      	uxth	r2, r2
 8005a04:	b210      	sxth	r0, r2
 8005a06:	88b9      	ldrh	r1, [r7, #4]
 8005a08:	8aba      	ldrh	r2, [r7, #20]
 8005a0a:	440a      	add	r2, r1
 8005a0c:	b292      	uxth	r2, r2
 8005a0e:	b211      	sxth	r1, r2
 8005a10:	883a      	ldrh	r2, [r7, #0]
 8005a12:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8005a14:	4b42      	ldr	r3, [pc, #264]	; (8005b20 <UG_DrawCircle+0x1c8>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	88f9      	ldrh	r1, [r7, #6]
 8005a1e:	8afa      	ldrh	r2, [r7, #22]
 8005a20:	440a      	add	r2, r1
 8005a22:	b292      	uxth	r2, r2
 8005a24:	b210      	sxth	r0, r2
 8005a26:	88b9      	ldrh	r1, [r7, #4]
 8005a28:	8aba      	ldrh	r2, [r7, #20]
 8005a2a:	1a8a      	subs	r2, r1, r2
 8005a2c:	b292      	uxth	r2, r2
 8005a2e:	b211      	sxth	r1, r2
 8005a30:	883a      	ldrh	r2, [r7, #0]
 8005a32:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 8005a34:	4b3a      	ldr	r3, [pc, #232]	; (8005b20 <UG_DrawCircle+0x1c8>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	88f9      	ldrh	r1, [r7, #6]
 8005a3e:	8aba      	ldrh	r2, [r7, #20]
 8005a40:	1a8a      	subs	r2, r1, r2
 8005a42:	b292      	uxth	r2, r2
 8005a44:	b210      	sxth	r0, r2
 8005a46:	88b9      	ldrh	r1, [r7, #4]
 8005a48:	8afa      	ldrh	r2, [r7, #22]
 8005a4a:	440a      	add	r2, r1
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	b211      	sxth	r1, r2
 8005a50:	883a      	ldrh	r2, [r7, #0]
 8005a52:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 8005a54:	4b32      	ldr	r3, [pc, #200]	; (8005b20 <UG_DrawCircle+0x1c8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	88f9      	ldrh	r1, [r7, #6]
 8005a5e:	8aba      	ldrh	r2, [r7, #20]
 8005a60:	1a8a      	subs	r2, r1, r2
 8005a62:	b292      	uxth	r2, r2
 8005a64:	b210      	sxth	r0, r2
 8005a66:	88b9      	ldrh	r1, [r7, #4]
 8005a68:	8afa      	ldrh	r2, [r7, #22]
 8005a6a:	1a8a      	subs	r2, r1, r2
 8005a6c:	b292      	uxth	r2, r2
 8005a6e:	b211      	sxth	r1, r2
 8005a70:	883a      	ldrh	r2, [r7, #0]
 8005a72:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8005a74:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <UG_DrawCircle+0x1c8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	88f9      	ldrh	r1, [r7, #6]
 8005a7e:	8aba      	ldrh	r2, [r7, #20]
 8005a80:	440a      	add	r2, r1
 8005a82:	b292      	uxth	r2, r2
 8005a84:	b210      	sxth	r0, r2
 8005a86:	88b9      	ldrh	r1, [r7, #4]
 8005a88:	8afa      	ldrh	r2, [r7, #22]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	b292      	uxth	r2, r2
 8005a8e:	b211      	sxth	r1, r2
 8005a90:	883a      	ldrh	r2, [r7, #0]
 8005a92:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8005a94:	4b22      	ldr	r3, [pc, #136]	; (8005b20 <UG_DrawCircle+0x1c8>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	88f9      	ldrh	r1, [r7, #6]
 8005a9e:	8aba      	ldrh	r2, [r7, #20]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	b292      	uxth	r2, r2
 8005aa4:	b210      	sxth	r0, r2
 8005aa6:	88b9      	ldrh	r1, [r7, #4]
 8005aa8:	8afa      	ldrh	r2, [r7, #22]
 8005aaa:	1a8a      	subs	r2, r1, r2
 8005aac:	b292      	uxth	r2, r2
 8005aae:	b211      	sxth	r1, r2
 8005ab0:	883a      	ldrh	r2, [r7, #0]
 8005ab2:	4798      	blx	r3

      y++;
 8005ab4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005ab8:	b29b      	uxth	r3, r3
 8005aba:	3301      	adds	r3, #1
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005ac0:	89fa      	ldrh	r2, [r7, #14]
 8005ac2:	8a3b      	ldrh	r3, [r7, #16]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8005aca:	8a3b      	ldrh	r3, [r7, #16]
 8005acc:	3302      	adds	r3, #2
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005ad2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005ad6:	005a      	lsls	r2, r3, #1
 8005ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005adc:	4413      	add	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dd0e      	ble.n	8005b00 <UG_DrawCircle+0x1a8>
      {
         x--;
 8005ae2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	3b01      	subs	r3, #1
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005aee:	89fa      	ldrh	r2, [r7, #14]
 8005af0:	8a7b      	ldrh	r3, [r7, #18]
 8005af2:	4413      	add	r3, r2
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8005af8:	8a7b      	ldrh	r3, [r7, #18]
 8005afa:	3302      	adds	r3, #2
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005b00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005b04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	f6bf af53 	bge.w	80059b4 <UG_DrawCircle+0x5c>
 8005b0e:	e004      	b.n	8005b1a <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8005b10:	bf00      	nop
 8005b12:	e002      	b.n	8005b1a <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8005b14:	bf00      	nop
 8005b16:	e000      	b.n	8005b1a <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8005b18:	bf00      	nop
      }
   }
}
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd90      	pop	{r4, r7, pc}
 8005b20:	200004fc 	.word	0x200004fc

08005b24 <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4623      	mov	r3, r4
 8005b34:	80fb      	strh	r3, [r7, #6]
 8005b36:	4603      	mov	r3, r0
 8005b38:	80bb      	strh	r3, [r7, #4]
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	807b      	strh	r3, [r7, #2]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 8005b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f2c0 80bd 	blt.w	8005cc6 <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 8005b4c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f2c0 80ba 	blt.w	8005cca <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 8005b56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f340 80b7 	ble.w	8005cce <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 8005b60:	887b      	ldrh	r3, [r7, #2]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	f1c3 0303 	rsb	r3, r3, #3
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	817b      	strh	r3, [r7, #10]
   x = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	81fb      	strh	r3, [r7, #14]
   y = r;
 8005b72:	887b      	ldrh	r3, [r7, #2]
 8005b74:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 8005b76:	e095      	b.n	8005ca4 <UG_FillCircle+0x180>
   {
     if( y > 0 )
 8005b78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	dd33      	ble.n	8005be8 <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	89fb      	ldrh	r3, [r7, #14]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	b218      	sxth	r0, r3
 8005b8a:	88ba      	ldrh	r2, [r7, #4]
 8005b8c:	89bb      	ldrh	r3, [r7, #12]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	b219      	sxth	r1, r3
 8005b94:	88fa      	ldrh	r2, [r7, #6]
 8005b96:	89fb      	ldrh	r3, [r7, #14]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	b21c      	sxth	r4, r3
 8005b9e:	88ba      	ldrh	r2, [r7, #4]
 8005ba0:	89bb      	ldrh	r3, [r7, #12]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	b21a      	sxth	r2, r3
 8005ba8:	883b      	ldrh	r3, [r7, #0]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	4613      	mov	r3, r2
 8005bae:	4622      	mov	r2, r4
 8005bb0:	f000 f892 	bl	8005cd8 <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	89fb      	ldrh	r3, [r7, #14]
 8005bb8:	4413      	add	r3, r2
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	b218      	sxth	r0, r3
 8005bbe:	88ba      	ldrh	r2, [r7, #4]
 8005bc0:	89bb      	ldrh	r3, [r7, #12]
 8005bc2:	1ad3      	subs	r3, r2, r3
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	b219      	sxth	r1, r3
 8005bc8:	88fa      	ldrh	r2, [r7, #6]
 8005bca:	89fb      	ldrh	r3, [r7, #14]
 8005bcc:	4413      	add	r3, r2
 8005bce:	b29b      	uxth	r3, r3
 8005bd0:	b21c      	sxth	r4, r3
 8005bd2:	88ba      	ldrh	r2, [r7, #4]
 8005bd4:	89bb      	ldrh	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	b21a      	sxth	r2, r3
 8005bdc:	883b      	ldrh	r3, [r7, #0]
 8005bde:	9300      	str	r3, [sp, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	4622      	mov	r2, r4
 8005be4:	f000 f878 	bl	8005cd8 <UG_DrawLine>
     }
     if( x > 0 )
 8005be8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	dd33      	ble.n	8005c58 <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005bf0:	88fa      	ldrh	r2, [r7, #6]
 8005bf2:	89bb      	ldrh	r3, [r7, #12]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	b218      	sxth	r0, r3
 8005bfa:	88ba      	ldrh	r2, [r7, #4]
 8005bfc:	89fb      	ldrh	r3, [r7, #14]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	b219      	sxth	r1, r3
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	89bb      	ldrh	r3, [r7, #12]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	b21c      	sxth	r4, r3
 8005c0e:	88ba      	ldrh	r2, [r7, #4]
 8005c10:	89fb      	ldrh	r3, [r7, #14]
 8005c12:	4413      	add	r3, r2
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	b21a      	sxth	r2, r3
 8005c18:	883b      	ldrh	r3, [r7, #0]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	4622      	mov	r2, r4
 8005c20:	f000 f85a 	bl	8005cd8 <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	89bb      	ldrh	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	b218      	sxth	r0, r3
 8005c2e:	88ba      	ldrh	r2, [r7, #4]
 8005c30:	89fb      	ldrh	r3, [r7, #14]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	b219      	sxth	r1, r3
 8005c38:	88fa      	ldrh	r2, [r7, #6]
 8005c3a:	89bb      	ldrh	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	b21c      	sxth	r4, r3
 8005c42:	88ba      	ldrh	r2, [r7, #4]
 8005c44:	89fb      	ldrh	r3, [r7, #14]
 8005c46:	4413      	add	r3, r2
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	b21a      	sxth	r2, r3
 8005c4c:	883b      	ldrh	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	4613      	mov	r3, r2
 8005c52:	4622      	mov	r2, r4
 8005c54:	f000 f840 	bl	8005cd8 <UG_DrawLine>
     }
     if ( xd < 0 )
 8005c58:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	da09      	bge.n	8005c74 <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 8005c60:	89fb      	ldrh	r3, [r7, #14]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	897b      	ldrh	r3, [r7, #10]
 8005c68:	4413      	add	r3, r2
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3306      	adds	r3, #6
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	817b      	strh	r3, [r7, #10]
 8005c72:	e011      	b.n	8005c98 <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 8005c74:	89fa      	ldrh	r2, [r7, #14]
 8005c76:	89bb      	ldrh	r3, [r7, #12]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	897b      	ldrh	r3, [r7, #10]
 8005c82:	4413      	add	r3, r2
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	330a      	adds	r3, #10
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	817b      	strh	r3, [r7, #10]
        y--;
 8005c8c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	3b01      	subs	r3, #1
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 8005c98:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005ca4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005ca8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	f77f af63 	ble.w	8005b78 <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005cb2:	883b      	ldrh	r3, [r7, #0]
 8005cb4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005cb8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005cbc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005cc0:	f7ff fe4a 	bl	8005958 <UG_DrawCircle>
 8005cc4:	e004      	b.n	8005cd0 <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 8005cc6:	bf00      	nop
 8005cc8:	e002      	b.n	8005cd0 <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 8005cca:	bf00      	nop
 8005ccc:	e000      	b.n	8005cd0 <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005cce:	bf00      	nop
}
 8005cd0:	3714      	adds	r7, #20
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd90      	pop	{r4, r7, pc}
	...

08005cd8 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005cd8:	b5b0      	push	{r4, r5, r7, lr}
 8005cda:	b08a      	sub	sp, #40	; 0x28
 8005cdc:	af02      	add	r7, sp, #8
 8005cde:	4604      	mov	r4, r0
 8005ce0:	4608      	mov	r0, r1
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4623      	mov	r3, r4
 8005ce8:	80fb      	strh	r3, [r7, #6]
 8005cea:	4603      	mov	r3, r0
 8005cec:	80bb      	strh	r3, [r7, #4]
 8005cee:	460b      	mov	r3, r1
 8005cf0:	807b      	strh	r3, [r7, #2]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005cf6:	4b67      	ldr	r3, [pc, #412]	; (8005e94 <UG_DrawLine+0x1bc>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d013      	beq.n	8005d2e <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <UG_DrawLine+0x1bc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0c:	461d      	mov	r5, r3
 8005d0e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005d12:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005d16:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005d1a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005d1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005d20:	9300      	str	r3, [sp, #0]
 8005d22:	4623      	mov	r3, r4
 8005d24:	47a8      	blx	r5
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 80ae 	beq.w	8005e8a <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005d2e:	887a      	ldrh	r2, [r7, #2]
 8005d30:	88fb      	ldrh	r3, [r7, #6]
 8005d32:	1ad3      	subs	r3, r2, r3
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005d38:	883a      	ldrh	r2, [r7, #0]
 8005d3a:	88bb      	ldrh	r3, [r7, #4]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005d42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	bfb8      	it	lt
 8005d4a:	425b      	neglt	r3, r3
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005d50:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	bfb8      	it	lt
 8005d58:	425b      	neglt	r3, r3
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005d5e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	dd01      	ble.n	8005d6a <UG_DrawLine+0x92>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e001      	b.n	8005d6e <UG_DrawLine+0x96>
 8005d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d6e:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	dd01      	ble.n	8005d7c <UG_DrawLine+0xa4>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e001      	b.n	8005d80 <UG_DrawLine+0xa8>
 8005d7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d80:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005d82:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d86:	105b      	asrs	r3, r3, #1
 8005d88:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005d8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d8e:	105b      	asrs	r3, r3, #1
 8005d90:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005d92:	88fb      	ldrh	r3, [r7, #6]
 8005d94:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005d96:	88bb      	ldrh	r3, [r7, #4]
 8005d98:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005d9a:	4b3e      	ldr	r3, [pc, #248]	; (8005e94 <UG_DrawLine+0x1bc>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005da4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005da8:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005dac:	4798      	blx	r3

   if( dxabs >= dyabs )
 8005dae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	db33      	blt.n	8005e22 <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8005dba:	2300      	movs	r3, #0
 8005dbc:	83fb      	strh	r3, [r7, #30]
 8005dbe:	e029      	b.n	8005e14 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8005dc0:	8b7a      	ldrh	r2, [r7, #26]
 8005dc2:	89fb      	ldrh	r3, [r7, #14]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005dca:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005dce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	db09      	blt.n	8005dea <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005dd6:	8b7a      	ldrh	r2, [r7, #26]
 8005dd8:	8a3b      	ldrh	r3, [r7, #16]
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8005de0:	8afa      	ldrh	r2, [r7, #22]
 8005de2:	897b      	ldrh	r3, [r7, #10]
 8005de4:	4413      	add	r3, r2
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005dea:	8b3a      	ldrh	r2, [r7, #24]
 8005dec:	89bb      	ldrh	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <UG_DrawLine+0x1bc>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	685b      	ldr	r3, [r3, #4]
 8005dfc:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005dfe:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005e02:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e06:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005e08:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	3301      	adds	r3, #1
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	83fb      	strh	r3, [r7, #30]
 8005e14:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005e18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	dbcf      	blt.n	8005dc0 <UG_DrawLine+0xe8>
 8005e20:	e034      	b.n	8005e8c <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8005e22:	2300      	movs	r3, #0
 8005e24:	83fb      	strh	r3, [r7, #30]
 8005e26:	e029      	b.n	8005e7c <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005e28:	8bba      	ldrh	r2, [r7, #28]
 8005e2a:	8a3b      	ldrh	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005e32:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005e36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	db09      	blt.n	8005e52 <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8005e3e:	8bba      	ldrh	r2, [r7, #28]
 8005e40:	89fb      	ldrh	r3, [r7, #14]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005e48:	8b3a      	ldrh	r2, [r7, #24]
 8005e4a:	89bb      	ldrh	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005e52:	8afa      	ldrh	r2, [r7, #22]
 8005e54:	897b      	ldrh	r3, [r7, #10]
 8005e56:	4413      	add	r3, r2
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005e5c:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <UG_DrawLine+0x1bc>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005e66:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005e6a:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e6e:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8005e70:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	3301      	adds	r3, #1
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	83fb      	strh	r3, [r7, #30]
 8005e7c:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005e80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	dbcf      	blt.n	8005e28 <UG_DrawLine+0x150>
 8005e88:	e000      	b.n	8005e8c <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005e8a:	bf00      	nop
      }
   }  
}
 8005e8c:	3720      	adds	r7, #32
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bdb0      	pop	{r4, r5, r7, pc}
 8005e92:	bf00      	nop
 8005e94:	200004fc 	.word	0x200004fc

08005e98 <UG_DrawTriangle>:


/* Draw a triangle */
void UG_DrawTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	80fb      	strh	r3, [r7, #6]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80bb      	strh	r3, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	807b      	strh	r3, [r7, #2]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	803b      	strh	r3, [r7, #0]
  UG_DrawLine(x1, y1, x2, y2, c);
 8005eb6:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005eba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ebe:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ec2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005ec6:	8c3b      	ldrh	r3, [r7, #32]
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	4623      	mov	r3, r4
 8005ecc:	f7ff ff04 	bl	8005cd8 <UG_DrawLine>
  UG_DrawLine(x2, y2, x3, y3, c);
 8005ed0:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005ed4:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005ed8:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005edc:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005ee0:	8c3b      	ldrh	r3, [r7, #32]
 8005ee2:	9300      	str	r3, [sp, #0]
 8005ee4:	4623      	mov	r3, r4
 8005ee6:	f7ff fef7 	bl	8005cd8 <UG_DrawLine>
  UG_DrawLine(x3, y3, x1, y1, c);
 8005eea:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005eee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005ef2:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005ef6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005efa:	8c3b      	ldrh	r3, [r7, #32]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	4623      	mov	r3, r4
 8005f00:	f7ff feea 	bl	8005cd8 <UG_DrawLine>
}
 8005f04:	bf00      	nop
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd90      	pop	{r4, r7, pc}

08005f0c <UG_FillTriangle>:

/* Fill a triangle */
void UG_FillTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005f0c:	b590      	push	{r4, r7, lr}
 8005f0e:	b08f      	sub	sp, #60	; 0x3c
 8005f10:	af02      	add	r7, sp, #8
 8005f12:	4604      	mov	r4, r0
 8005f14:	4608      	mov	r0, r1
 8005f16:	4611      	mov	r1, r2
 8005f18:	461a      	mov	r2, r3
 8005f1a:	4623      	mov	r3, r4
 8005f1c:	80fb      	strh	r3, [r7, #6]
 8005f1e:	4603      	mov	r3, r0
 8005f20:	80bb      	strh	r3, [r7, #4]
 8005f22:	460b      	mov	r3, r1
 8005f24:	807b      	strh	r3, [r7, #2]
 8005f26:	4613      	mov	r3, r2
 8005f28:	803b      	strh	r3, [r7, #0]

  UG_S16 a, b, y, last;

  /* Sort coordinates by Y order (y3 >= y2 >= y1) */
  if (y1 > y2) {
 8005f2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f32:	429a      	cmp	r2, r3
 8005f34:	dd0b      	ble.n	8005f4e <UG_FillTriangle+0x42>
    swap(y1, y2); swap(x1, x2);
 8005f36:	88bb      	ldrh	r3, [r7, #4]
 8005f38:	847b      	strh	r3, [r7, #34]	; 0x22
 8005f3a:	883b      	ldrh	r3, [r7, #0]
 8005f3c:	80bb      	strh	r3, [r7, #4]
 8005f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f40:	803b      	strh	r3, [r7, #0]
 8005f42:	88fb      	ldrh	r3, [r7, #6]
 8005f44:	843b      	strh	r3, [r7, #32]
 8005f46:	887b      	ldrh	r3, [r7, #2]
 8005f48:	80fb      	strh	r3, [r7, #6]
 8005f4a:	8c3b      	ldrh	r3, [r7, #32]
 8005f4c:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 8005f4e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005f52:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005f56:	429a      	cmp	r2, r3
 8005f58:	dd0f      	ble.n	8005f7a <UG_FillTriangle+0x6e>
    swap(y3, y2); swap(x3, x2);
 8005f5a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005f5e:	83fb      	strh	r3, [r7, #30]
 8005f60:	883b      	ldrh	r3, [r7, #0]
 8005f62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005f66:	8bfb      	ldrh	r3, [r7, #30]
 8005f68:	803b      	strh	r3, [r7, #0]
 8005f6a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f6e:	83bb      	strh	r3, [r7, #28]
 8005f70:	887b      	ldrh	r3, [r7, #2]
 8005f72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f76:	8bbb      	ldrh	r3, [r7, #28]
 8005f78:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 8005f7a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f7e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	dd0b      	ble.n	8005f9e <UG_FillTriangle+0x92>
    swap(y1, y2); swap(x1, x2);
 8005f86:	88bb      	ldrh	r3, [r7, #4]
 8005f88:	837b      	strh	r3, [r7, #26]
 8005f8a:	883b      	ldrh	r3, [r7, #0]
 8005f8c:	80bb      	strh	r3, [r7, #4]
 8005f8e:	8b7b      	ldrh	r3, [r7, #26]
 8005f90:	803b      	strh	r3, [r7, #0]
 8005f92:	88fb      	ldrh	r3, [r7, #6]
 8005f94:	833b      	strh	r3, [r7, #24]
 8005f96:	887b      	ldrh	r3, [r7, #2]
 8005f98:	80fb      	strh	r3, [r7, #6]
 8005f9a:	8b3b      	ldrh	r3, [r7, #24]
 8005f9c:	807b      	strh	r3, [r7, #2]
  }

  /* Handle awkward all-on-same-line case as its own thing */
  if (y1 == y3) {
 8005f9e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005fa2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d138      	bne.n	800601c <UG_FillTriangle+0x110>
    a = b = x1;
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005fae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fb0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x2 < a) {
 8005fb2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fb6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	da02      	bge.n	8005fc4 <UG_FillTriangle+0xb8>
      a = x2;
 8005fbe:	887b      	ldrh	r3, [r7, #2]
 8005fc0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fc2:	e007      	b.n	8005fd4 <UG_FillTriangle+0xc8>
    } else if (x2 > b) {
 8005fc4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005fc8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	dd01      	ble.n	8005fd4 <UG_FillTriangle+0xc8>
      b = x2;
 8005fd0:	887b      	ldrh	r3, [r7, #2]
 8005fd2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if (x3 < a) {
 8005fd4:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8005fd8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	da03      	bge.n	8005fe8 <UG_FillTriangle+0xdc>
      a = x3;
 8005fe0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fe4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005fe6:	e008      	b.n	8005ffa <UG_FillTriangle+0xee>
    } else if (x3 > b) {
 8005fe8:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8005fec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	dd02      	ble.n	8005ffa <UG_FillTriangle+0xee>
      b = x3;
 8005ff4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ff8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y1, b + 1, y1, c);
 8005ffa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	b21a      	sxth	r2, r3
 8006002:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8006006:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800600a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800600e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006012:	9300      	str	r3, [sp, #0]
 8006014:	4623      	mov	r3, r4
 8006016:	f7ff fe5f 	bl	8005cd8 <UG_DrawLine>
    return;
 800601a:	e0dc      	b.n	80061d6 <UG_FillTriangle+0x2ca>
  }

  UG_S16
  dx01 = x2 - x1,
 800601c:	887a      	ldrh	r2, [r7, #2]
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	b29b      	uxth	r3, r3
 8006024:	82fb      	strh	r3, [r7, #22]
  dy01 = y2 - y1,
 8006026:	883a      	ldrh	r2, [r7, #0]
 8006028:	88bb      	ldrh	r3, [r7, #4]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	b29b      	uxth	r3, r3
 800602e:	82bb      	strh	r3, [r7, #20]
  dx02 = x3 - x1,
 8006030:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	1ad3      	subs	r3, r2, r3
 8006038:	b29b      	uxth	r3, r3
 800603a:	827b      	strh	r3, [r7, #18]
  dy02 = y3 - y1,
 800603c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006040:	88bb      	ldrh	r3, [r7, #4]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	b29b      	uxth	r3, r3
 8006046:	823b      	strh	r3, [r7, #16]
  dx12 = x3 - x2,
 8006048:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800604c:	887b      	ldrh	r3, [r7, #2]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	b29b      	uxth	r3, r3
 8006052:	81fb      	strh	r3, [r7, #14]
  dy12 = y3 - y2,
 8006054:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8006058:	883b      	ldrh	r3, [r7, #0]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8006060:	2300      	movs	r3, #0
 8006062:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8006064:	2300      	movs	r3, #0
 8006066:	84bb      	strh	r3, [r7, #36]	; 0x24
   * is included here (and second loop will be skipped, avoiding a /0
   * error there), otherwise scanline y2 is skipped here and handled
   * in the second loop...which also avoids a /0 error here if y1=y2
   * (flat-topped triangle).
   */
  if (y2 == y3) {
 8006068:	f9b7 2000 	ldrsh.w	r2, [r7]
 800606c:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8006070:	429a      	cmp	r2, r3
 8006072:	d102      	bne.n	800607a <UG_FillTriangle+0x16e>
    last = y2;   /* Include y2 scanline */
 8006074:	883b      	ldrh	r3, [r7, #0]
 8006076:	853b      	strh	r3, [r7, #40]	; 0x28
 8006078:	e003      	b.n	8006082 <UG_FillTriangle+0x176>
  } else {
    last = y2 - 1; /* Skip it */
 800607a:	883b      	ldrh	r3, [r7, #0]
 800607c:	3b01      	subs	r3, #1
 800607e:	b29b      	uxth	r3, r3
 8006080:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  for (y = y1; y <= last; y++) {
 8006082:	88bb      	ldrh	r3, [r7, #4]
 8006084:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006086:	e041      	b.n	800610c <UG_FillTriangle+0x200>
    a   = x1 + sa / dy01;
 8006088:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800608c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006090:	fb92 f3f3 	sdiv	r3, r2, r3
 8006094:	b29a      	uxth	r2, r3
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	4413      	add	r3, r2
 800609a:	b29b      	uxth	r3, r3
 800609c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 800609e:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80060a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80060aa:	b29a      	uxth	r2, r3
 80060ac:	88fb      	ldrh	r3, [r7, #6]
 80060ae:	4413      	add	r3, r2
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 80060b4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060b6:	8afb      	ldrh	r3, [r7, #22]
 80060b8:	4413      	add	r3, r2
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 80060be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060c0:	8a7b      	ldrh	r3, [r7, #18]
 80060c2:	4413      	add	r3, r2
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 80060c8:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80060cc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80060d0:	429a      	cmp	r2, r3
 80060d2:	dd05      	ble.n	80060e0 <UG_FillTriangle+0x1d4>
      swap(a, b);
 80060d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80060d6:	813b      	strh	r3, [r7, #8]
 80060d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060da:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80060dc:	893b      	ldrh	r3, [r7, #8]
 80060de:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 80060e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80060e2:	3301      	adds	r3, #1
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	b21a      	sxth	r2, r3
 80060e8:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 80060ec:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80060f0:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80060f4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80060f8:	9300      	str	r3, [sp, #0]
 80060fa:	4623      	mov	r3, r4
 80060fc:	f7ff fdec 	bl	8005cd8 <UG_DrawLine>
  for (y = y1; y <= last; y++) {
 8006100:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	3301      	adds	r3, #1
 8006108:	b29b      	uxth	r3, r3
 800610a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800610c:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006110:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006114:	429a      	cmp	r2, r3
 8006116:	ddb7      	ble.n	8006088 <UG_FillTriangle+0x17c>
  }

  /* For lower part of triangle, find scanline crossings for segments
   * 0-2 and 1-2.  This loop is skipped if y2=y3.
   */
  sa = dx12 * (y - y2);
 8006118:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800611c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	b29a      	uxth	r2, r3
 8006124:	89fb      	ldrh	r3, [r7, #14]
 8006126:	fb12 f303 	smulbb	r3, r2, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y1);
 800612e:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8006132:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006136:	1ad3      	subs	r3, r2, r3
 8006138:	b29a      	uxth	r2, r3
 800613a:	8a7b      	ldrh	r3, [r7, #18]
 800613c:	fb12 f303 	smulbb	r3, r2, r3
 8006140:	b29b      	uxth	r3, r3
 8006142:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y3; y++) {
 8006144:	e041      	b.n	80061ca <UG_FillTriangle+0x2be>
    a   = x2 + sa / dy12;
 8006146:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 800614a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800614e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006152:	b29a      	uxth	r2, r3
 8006154:	887b      	ldrh	r3, [r7, #2]
 8006156:	4413      	add	r3, r2
 8006158:	b29b      	uxth	r3, r3
 800615a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 800615c:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8006160:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006164:	fb92 f3f3 	sdiv	r3, r2, r3
 8006168:	b29a      	uxth	r2, r3
 800616a:	88fb      	ldrh	r3, [r7, #6]
 800616c:	4413      	add	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 8006172:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	4413      	add	r3, r2
 8006178:	b29b      	uxth	r3, r3
 800617a:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 800617c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800617e:	8a7b      	ldrh	r3, [r7, #18]
 8006180:	4413      	add	r3, r2
 8006182:	b29b      	uxth	r3, r3
 8006184:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 8006186:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800618a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800618e:	429a      	cmp	r2, r3
 8006190:	dd05      	ble.n	800619e <UG_FillTriangle+0x292>
      swap(a, b);
 8006192:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006194:	817b      	strh	r3, [r7, #10]
 8006196:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006198:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800619a:	897b      	ldrh	r3, [r7, #10]
 800619c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 800619e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061a0:	3301      	adds	r3, #1
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 80061aa:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 80061ae:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80061b2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80061b6:	9300      	str	r3, [sp, #0]
 80061b8:	4623      	mov	r3, r4
 80061ba:	f7ff fd8d 	bl	8005cd8 <UG_DrawLine>
  for (; y <= y3; y++) {
 80061be:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3301      	adds	r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80061ca:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80061ce:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80061d2:	429a      	cmp	r2, r3
 80061d4:	ddb7      	ble.n	8006146 <UG_FillTriangle+0x23a>
  }
}
 80061d6:	3734      	adds	r7, #52	; 0x34
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd90      	pop	{r4, r7, pc}

080061dc <UG_PutString>:

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 80061dc:	b590      	push	{r4, r7, lr}
 80061de:	b087      	sub	sp, #28
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	4603      	mov	r3, r0
 80061e4:	603a      	str	r2, [r7, #0]
 80061e6:	80fb      	strh	r3, [r7, #6]
 80061e8:	460b      	mov	r3, r1
 80061ea:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 80061ec:	88fb      	ldrh	r3, [r7, #6]
 80061ee:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80061f0:	88bb      	ldrh	r3, [r7, #4]
 80061f2:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 80061f4:	4b3c      	ldr	r3, [pc, #240]	; (80062e8 <UG_PutString+0x10c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fa4e 	bl	800669c <_UG_FontSelect>
   while ( *str != 0 )
 8006200:	e054      	b.n	80062ac <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	603a      	str	r2, [r7, #0]
 8006208:	781b      	ldrb	r3, [r3, #0]
 800620a:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 800620c:	7afb      	ldrb	r3, [r7, #11]
 800620e:	2b0a      	cmp	r3, #10
 8006210:	d105      	bne.n	800621e <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 8006212:	4b35      	ldr	r3, [pc, #212]	; (80062e8 <UG_PutString+0x10c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	881b      	ldrh	r3, [r3, #0]
 800621a:	81fb      	strh	r3, [r7, #14]
         continue;
 800621c:	e046      	b.n	80062ac <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 800621e:	7afb      	ldrb	r3, [r7, #11]
 8006220:	2100      	movs	r1, #0
 8006222:	4618      	mov	r0, r3
 8006224:	f000 f8ea 	bl	80063fc <_UG_GetCharData>
 8006228:	4603      	mov	r3, r0
 800622a:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 800622c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006230:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006234:	d100      	bne.n	8006238 <UG_PutString+0x5c>
 8006236:	e039      	b.n	80062ac <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 8006238:	4b2b      	ldr	r3, [pc, #172]	; (80062e8 <UG_PutString+0x10c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006242:	4619      	mov	r1, r3
 8006244:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8006248:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	4299      	cmp	r1, r3
 8006250:	dc11      	bgt.n	8006276 <UG_PutString+0x9a>
      {
         xp = x;
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 8006256:	4b24      	ldr	r3, [pc, #144]	; (80062e8 <UG_PutString+0x10c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	7ddb      	ldrb	r3, [r3, #23]
 800625c:	b21a      	sxth	r2, r3
 800625e:	4b22      	ldr	r3, [pc, #136]	; (80062e8 <UG_PutString+0x10c>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 8006266:	b21b      	sxth	r3, r3
 8006268:	4413      	add	r3, r2
 800626a:	b21b      	sxth	r3, r3
 800626c:	b29a      	uxth	r2, r3
 800626e:	89bb      	ldrh	r3, [r7, #12]
 8006270:	4413      	add	r3, r2
 8006272:	b29b      	uxth	r3, r3
 8006274:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8006276:	4b1c      	ldr	r3, [pc, #112]	; (80062e8 <UG_PutString+0x10c>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 800627c:	4b1a      	ldr	r3, [pc, #104]	; (80062e8 <UG_PutString+0x10c>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006282:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006286:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800628a:	7af8      	ldrb	r0, [r7, #11]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	4623      	mov	r3, r4
 8006290:	f000 fa82 	bl	8006798 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8006294:	4b14      	ldr	r3, [pc, #80]	; (80062e8 <UG_PutString+0x10c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 800629c:	b29a      	uxth	r2, r3
 800629e:	893b      	ldrh	r3, [r7, #8]
 80062a0:	4413      	add	r3, r2
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	89fb      	ldrh	r3, [r7, #14]
 80062a6:	4413      	add	r3, r2
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1a6      	bne.n	8006202 <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 80062b4:	4b0c      	ldr	r3, [pc, #48]	; (80062e8 <UG_PutString+0x10c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80062bc:	f003 0302 	and.w	r3, r3, #2
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00c      	beq.n	80062de <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 80062c4:	4b08      	ldr	r3, [pc, #32]	; (80062e8 <UG_PutString+0x10c>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062ca:	461c      	mov	r4, r3
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80062d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80062d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062dc:	47a0      	blx	r4
}
 80062de:	bf00      	nop
 80062e0:	3714      	adds	r7, #20
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd90      	pop	{r4, r7, pc}
 80062e6:	bf00      	nop
 80062e8:	200004fc 	.word	0x200004fc

080062ec <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	4603      	mov	r3, r0
 80062f4:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <UG_SetForecolor+0x20>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	88fa      	ldrh	r2, [r7, #6]
 80062fc:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	200004fc 	.word	0x200004fc

08006310 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	4603      	mov	r3, r0
 8006318:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800631a:	4b05      	ldr	r3, [pc, #20]	; (8006330 <UG_SetBackcolor+0x20>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	88fa      	ldrh	r2, [r7, #6]
 8006320:	86da      	strh	r2, [r3, #54]	; 0x36
}
 8006322:	bf00      	nop
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	200004fc 	.word	0x200004fc

08006334 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
   return gui->device->x_dim;
 8006338:	4b04      	ldr	r3, [pc, #16]	; (800634c <UG_GetXDim+0x18>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8006342:	4618      	mov	r0, r3
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr
 800634c:	200004fc 	.word	0x200004fc

08006350 <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
   return gui->device->y_dim;
 8006354:	4b04      	ldr	r3, [pc, #16]	; (8006368 <UG_GetYDim+0x18>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800635e:	4618      	mov	r0, r3
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	200004fc 	.word	0x200004fc

0800636c <UG_FontSetHSpace>:

void UG_FontSetHSpace( UG_U16 s )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	4603      	mov	r3, r0
 8006374:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8006376:	4b06      	ldr	r3, [pc, #24]	; (8006390 <UG_FontSetHSpace+0x24>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	88fa      	ldrh	r2, [r7, #6]
 800637c:	b252      	sxtb	r2, r2
 800637e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	200004fc 	.word	0x200004fc

08006394 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800639e:	4b06      	ldr	r3, [pc, #24]	; (80063b8 <UG_FontSetVSpace+0x24>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	88fa      	ldrh	r2, [r7, #6]
 80063a4:	b252      	sxtb	r2, r2
 80063a6:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	200004fc 	.word	0x200004fc

080063bc <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	4603      	mov	r3, r0
 80063c4:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 80063c6:	4b05      	ldr	r3, [pc, #20]	; (80063dc <UG_FontSetTransparency+0x20>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	79fa      	ldrb	r2, [r7, #7]
 80063cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	200004fc 	.word	0x200004fc

080063e0 <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 80063e4:	4b04      	ldr	r3, [pc, #16]	; (80063f8 <UG_FontGetTransparency+0x18>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	200004fc 	.word	0x200004fc

080063fc <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	6039      	str	r1, [r7, #0]
 8006406:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8006408:	2300      	movs	r3, #0
 800640a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 800640c:	2300      	movs	r3, #0
 800640e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8006410:	2300      	movs	r3, #0
 8006412:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8006414:	2300      	movs	r3, #0
 8006416:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8006418:	2300      	movs	r3, #0
 800641a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 800641c:	4b9a      	ldr	r3, [pc, #616]	; (8006688 <_UG_GetCharData+0x28c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006422:	4b9a      	ldr	r3, [pc, #616]	; (800668c <_UG_GetCharData+0x290>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	429a      	cmp	r2, r3
 8006428:	d10f      	bne.n	800644a <_UG_GetCharData+0x4e>
 800642a:	4b99      	ldr	r3, [pc, #612]	; (8006690 <_UG_GetCharData+0x294>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	79fa      	ldrb	r2, [r7, #7]
 8006430:	429a      	cmp	r2, r3
 8006432:	d10a      	bne.n	800644a <_UG_GetCharData+0x4e>
    if(p){
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d003      	beq.n	8006442 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 800643a:	4b96      	ldr	r3, [pc, #600]	; (8006694 <_UG_GetCharData+0x298>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8006442:	4b95      	ldr	r3, [pc, #596]	; (8006698 <_UG_GetCharData+0x29c>)
 8006444:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006448:	e119      	b.n	800667e <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 800644a:	4b8f      	ldr	r3, [pc, #572]	; (8006688 <_UG_GetCharData+0x28c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	7d5b      	ldrb	r3, [r3, #21]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d07d      	beq.n	8006550 <_UG_GetCharData+0x154>
    switch ( encoding )
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	2bfc      	cmp	r3, #252	; 0xfc
 8006458:	f300 80ce 	bgt.w	80065f8 <_UG_GetCharData+0x1fc>
 800645c:	2bd6      	cmp	r3, #214	; 0xd6
 800645e:	da09      	bge.n	8006474 <_UG_GetCharData+0x78>
 8006460:	2bc4      	cmp	r3, #196	; 0xc4
 8006462:	d06c      	beq.n	800653e <_UG_GetCharData+0x142>
 8006464:	2bc4      	cmp	r3, #196	; 0xc4
 8006466:	f300 80c7 	bgt.w	80065f8 <_UG_GetCharData+0x1fc>
 800646a:	2bb0      	cmp	r3, #176	; 0xb0
 800646c:	d06d      	beq.n	800654a <_UG_GetCharData+0x14e>
 800646e:	2bb5      	cmp	r3, #181	; 0xb5
 8006470:	d068      	beq.n	8006544 <_UG_GetCharData+0x148>
 8006472:	e06e      	b.n	8006552 <_UG_GetCharData+0x156>
 8006474:	3bd6      	subs	r3, #214	; 0xd6
 8006476:	2b26      	cmp	r3, #38	; 0x26
 8006478:	f200 80be 	bhi.w	80065f8 <_UG_GetCharData+0x1fc>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <_UG_GetCharData+0x88>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	08006527 	.word	0x08006527
 8006488:	080065f9 	.word	0x080065f9
 800648c:	080065f9 	.word	0x080065f9
 8006490:	080065f9 	.word	0x080065f9
 8006494:	080065f9 	.word	0x080065f9
 8006498:	080065f9 	.word	0x080065f9
 800649c:	08006533 	.word	0x08006533
 80064a0:	080065f9 	.word	0x080065f9
 80064a4:	080065f9 	.word	0x080065f9
 80064a8:	080065f9 	.word	0x080065f9
 80064ac:	080065f9 	.word	0x080065f9
 80064b0:	080065f9 	.word	0x080065f9
 80064b4:	080065f9 	.word	0x080065f9
 80064b8:	080065f9 	.word	0x080065f9
 80064bc:	08006539 	.word	0x08006539
 80064c0:	080065f9 	.word	0x080065f9
 80064c4:	080065f9 	.word	0x080065f9
 80064c8:	080065f9 	.word	0x080065f9
 80064cc:	080065f9 	.word	0x080065f9
 80064d0:	080065f9 	.word	0x080065f9
 80064d4:	080065f9 	.word	0x080065f9
 80064d8:	080065f9 	.word	0x080065f9
 80064dc:	080065f9 	.word	0x080065f9
 80064e0:	080065f9 	.word	0x080065f9
 80064e4:	080065f9 	.word	0x080065f9
 80064e8:	080065f9 	.word	0x080065f9
 80064ec:	080065f9 	.word	0x080065f9
 80064f0:	080065f9 	.word	0x080065f9
 80064f4:	080065f9 	.word	0x080065f9
 80064f8:	080065f9 	.word	0x080065f9
 80064fc:	080065f9 	.word	0x080065f9
 8006500:	080065f9 	.word	0x080065f9
 8006504:	08006521 	.word	0x08006521
 8006508:	080065f9 	.word	0x080065f9
 800650c:	080065f9 	.word	0x080065f9
 8006510:	080065f9 	.word	0x080065f9
 8006514:	080065f9 	.word	0x080065f9
 8006518:	080065f9 	.word	0x080065f9
 800651c:	0800652d 	.word	0x0800652d
    {
       case 0xF6: encoding = 0x94; break; // ö
 8006520:	2394      	movs	r3, #148	; 0x94
 8006522:	71fb      	strb	r3, [r7, #7]
 8006524:	e015      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 8006526:	2399      	movs	r3, #153	; 0x99
 8006528:	71fb      	strb	r3, [r7, #7]
 800652a:	e012      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 800652c:	2381      	movs	r3, #129	; 0x81
 800652e:	71fb      	strb	r3, [r7, #7]
 8006530:	e00f      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 8006532:	239a      	movs	r3, #154	; 0x9a
 8006534:	71fb      	strb	r3, [r7, #7]
 8006536:	e00c      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 8006538:	2384      	movs	r3, #132	; 0x84
 800653a:	71fb      	strb	r3, [r7, #7]
 800653c:	e009      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 800653e:	238e      	movs	r3, #142	; 0x8e
 8006540:	71fb      	strb	r3, [r7, #7]
 8006542:	e006      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 8006544:	23e6      	movs	r3, #230	; 0xe6
 8006546:	71fb      	strb	r3, [r7, #7]
 8006548:	e003      	b.n	8006552 <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 800654a:	23f8      	movs	r3, #248	; 0xf8
 800654c:	71fb      	strb	r3, [r7, #7]
 800654e:	e000      	b.n	8006552 <_UG_GetCharData+0x156>
    }
  }
 8006550:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8006552:	e051      	b.n	80065f8 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8006554:	4b4c      	ldr	r3, [pc, #304]	; (8006688 <_UG_GetCharData+0x28c>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	8a7a      	ldrh	r2, [r7, #18]
 800655c:	0052      	lsls	r2, r2, #1
 800655e:	4413      	add	r3, r2
 8006560:	4618      	mov	r0, r3
 8006562:	f7fe fff1 	bl	8005548 <ptr_8to16>
 8006566:	4603      	mov	r3, r0
 8006568:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 800656a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	da06      	bge.n	8006580 <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8006572:	89fb      	ldrh	r3, [r7, #14]
 8006574:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006578:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 800657a:	2301      	movs	r3, #1
 800657c:	747b      	strb	r3, [r7, #17]
 800657e:	e038      	b.n	80065f2 <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8006580:	7c7b      	ldrb	r3, [r7, #17]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d025      	beq.n	80065d2 <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	b29b      	uxth	r3, r3
 800658a:	8afa      	ldrh	r2, [r7, #22]
 800658c:	429a      	cmp	r2, r3
 800658e:	d80f      	bhi.n	80065b0 <_UG_GetCharData+0x1b4>
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	b29b      	uxth	r3, r3
 8006594:	89fa      	ldrh	r2, [r7, #14]
 8006596:	429a      	cmp	r2, r3
 8006598:	d30a      	bcc.n	80065b0 <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	b29a      	uxth	r2, r3
 800659e:	8afb      	ldrh	r3, [r7, #22]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	8abb      	ldrh	r3, [r7, #20]
 80065a6:	4413      	add	r3, r2
 80065a8:	82bb      	strh	r3, [r7, #20]
        found=1;
 80065aa:	2301      	movs	r3, #1
 80065ac:	743b      	strb	r3, [r7, #16]
        break;
 80065ae:	e02d      	b.n	800660c <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	8afa      	ldrh	r2, [r7, #22]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d825      	bhi.n	8006606 <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 80065ba:	89fa      	ldrh	r2, [r7, #14]
 80065bc:	8afb      	ldrh	r3, [r7, #22]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	b29a      	uxth	r2, r3
 80065c2:	8abb      	ldrh	r3, [r7, #20]
 80065c4:	4413      	add	r3, r2
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	3301      	adds	r3, #1
 80065ca:	82bb      	strh	r3, [r7, #20]
      range=0;
 80065cc:	2300      	movs	r3, #0
 80065ce:	747b      	strb	r3, [r7, #17]
 80065d0:	e00f      	b.n	80065f2 <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	89fa      	ldrh	r2, [r7, #14]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d102      	bne.n	80065e2 <_UG_GetCharData+0x1e6>
      {
        found=1;
 80065dc:	2301      	movs	r3, #1
 80065de:	743b      	strb	r3, [r7, #16]
        break;
 80065e0:	e014      	b.n	800660c <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 80065e2:	79fb      	ldrb	r3, [r7, #7]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	89fa      	ldrh	r2, [r7, #14]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d80e      	bhi.n	800660a <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 80065ec:	8abb      	ldrh	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80065f2:	8a7b      	ldrh	r3, [r7, #18]
 80065f4:	3301      	adds	r3, #1
 80065f6:	827b      	strh	r3, [r7, #18]
 80065f8:	4b23      	ldr	r3, [pc, #140]	; (8006688 <_UG_GetCharData+0x28c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	8b9b      	ldrh	r3, [r3, #28]
 80065fe:	8a7a      	ldrh	r2, [r7, #18]
 8006600:	429a      	cmp	r2, r3
 8006602:	d3a7      	bcc.n	8006554 <_UG_GetCharData+0x158>
 8006604:	e002      	b.n	800660c <_UG_GetCharData+0x210>
        break;
 8006606:	bf00      	nop
 8006608:	e000      	b.n	800660c <_UG_GetCharData+0x210>
        break;
 800660a:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 800660c:	7c3b      	ldrb	r3, [r7, #16]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d033      	beq.n	800667a <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8006612:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <_UG_GetCharData+0x28c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006618:	4a1c      	ldr	r2, [pc, #112]	; (800668c <_UG_GetCharData+0x290>)
 800661a:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 800661c:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <_UG_GetCharData+0x294>)
 800661e:	79fb      	ldrb	r3, [r7, #7]
 8006620:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8006622:	4b19      	ldr	r3, [pc, #100]	; (8006688 <_UG_GetCharData+0x28c>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	8aba      	ldrh	r2, [r7, #20]
 800662a:	4917      	ldr	r1, [pc, #92]	; (8006688 <_UG_GetCharData+0x28c>)
 800662c:	6809      	ldr	r1, [r1, #0]
 800662e:	8b09      	ldrh	r1, [r1, #24]
 8006630:	fb01 f202 	mul.w	r2, r1, r2
 8006634:	4413      	add	r3, r2
 8006636:	4a17      	ldr	r2, [pc, #92]	; (8006694 <_UG_GetCharData+0x298>)
 8006638:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 800663a:	4b13      	ldr	r3, [pc, #76]	; (8006688 <_UG_GetCharData+0x28c>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	6a1b      	ldr	r3, [r3, #32]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d009      	beq.n	8006658 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8006644:	4b10      	ldr	r3, [pc, #64]	; (8006688 <_UG_GetCharData+0x28c>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	8abb      	ldrh	r3, [r7, #20]
 800664c:	4413      	add	r3, r2
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	b21a      	sxth	r2, r3
 8006652:	4b11      	ldr	r3, [pc, #68]	; (8006698 <_UG_GetCharData+0x29c>)
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e005      	b.n	8006664 <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8006658:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <_UG_GetCharData+0x28c>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	7d9b      	ldrb	r3, [r3, #22]
 800665e:	b21a      	sxth	r2, r3
 8006660:	4b0d      	ldr	r3, [pc, #52]	; (8006698 <_UG_GetCharData+0x29c>)
 8006662:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d003      	beq.n	8006672 <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <_UG_GetCharData+0x298>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <_UG_GetCharData+0x29c>)
 8006674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006678:	e001      	b.n	800667e <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 800667a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200004fc 	.word	0x200004fc
 800668c:	20000500 	.word	0x20000500
 8006690:	20000504 	.word	0x20000504
 8006694:	20000508 	.word	0x20000508
 8006698:	2000050c 	.word	0x2000050c

0800669c <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 80066a4:	4b3b      	ldr	r3, [pc, #236]	; (8006794 <_UG_FontSelect+0xf8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d06c      	beq.n	800678a <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 80066b0:	4b38      	ldr	r3, [pc, #224]	; (8006794 <_UG_FontSelect+0xf8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	781a      	ldrb	r2, [r3, #0]
 80066bc:	4b35      	ldr	r3, [pc, #212]	; (8006794 <_UG_FontSelect+0xf8>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	b25b      	sxtb	r3, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	da01      	bge.n	80066da <_UG_FontSelect+0x3e>
 80066d6:	2201      	movs	r2, #1
 80066d8:	e000      	b.n	80066dc <_UG_FontSelect+0x40>
 80066da:	2200      	movs	r2, #0
 80066dc:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <_UG_FontSelect+0xf8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <_UG_FontSelect+0xf8>)
 80066ec:	6812      	ldr	r2, [r2, #0]
 80066ee:	781b      	ldrb	r3, [r3, #0]
 80066f0:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	607a      	str	r2, [r7, #4]
 80066f8:	4a26      	ldr	r2, [pc, #152]	; (8006794 <_UG_FontSelect+0xf8>)
 80066fa:	6812      	ldr	r2, [r2, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8006700:	4b24      	ldr	r3, [pc, #144]	; (8006794 <_UG_FontSelect+0xf8>)
 8006702:	681c      	ldr	r4, [r3, #0]
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fe ff1f 	bl	8005548 <ptr_8to16>
 800670a:	4603      	mov	r3, r0
 800670c:	8363      	strh	r3, [r4, #26]
  font+=2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3302      	adds	r3, #2
 8006712:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8006714:	4b1f      	ldr	r3, [pc, #124]	; (8006794 <_UG_FontSelect+0xf8>)
 8006716:	681c      	ldr	r4, [r3, #0]
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe ff15 	bl	8005548 <ptr_8to16>
 800671e:	4603      	mov	r3, r0
 8006720:	83a3      	strh	r3, [r4, #28]
  font+=2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	3302      	adds	r3, #2
 8006726:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8006728:	4b1a      	ldr	r3, [pc, #104]	; (8006794 <_UG_FontSelect+0xf8>)
 800672a:	681c      	ldr	r4, [r3, #0]
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f7fe ff0b 	bl	8005548 <ptr_8to16>
 8006732:	4603      	mov	r3, r0
 8006734:	8323      	strh	r3, [r4, #24]
  font+=2;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3302      	adds	r3, #2
 800673a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	607a      	str	r2, [r7, #4]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00b      	beq.n	8006760 <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8006748:	4b12      	ldr	r3, [pc, #72]	; (8006794 <_UG_FontSelect+0xf8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	687a      	ldr	r2, [r7, #4]
 800674e:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8006750:	4b10      	ldr	r3, [pc, #64]	; (8006794 <_UG_FontSelect+0xf8>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	8b5b      	ldrh	r3, [r3, #26]
 8006756:	461a      	mov	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4413      	add	r3, r2
 800675c:	607b      	str	r3, [r7, #4]
 800675e:	e003      	b.n	8006768 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8006760:	4b0c      	ldr	r3, [pc, #48]	; (8006794 <_UG_FontSelect+0xf8>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <_UG_FontSelect+0xf8>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8006770:	4b08      	ldr	r3, [pc, #32]	; (8006794 <_UG_FontSelect+0xf8>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	8b9b      	ldrh	r3, [r3, #28]
 8006776:	005b      	lsls	r3, r3, #1
 8006778:	461a      	mov	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4413      	add	r3, r2
 800677e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8006780:	4b04      	ldr	r3, [pc, #16]	; (8006794 <_UG_FontSelect+0xf8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	; 0x28
 8006788:	e000      	b.n	800678c <_UG_FontSelect+0xf0>
    return;
 800678a:	bf00      	nop
}
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	bd90      	pop	{r4, r7, pc}
 8006792:	bf00      	nop
 8006794:	200004fc 	.word	0x200004fc

08006798 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8006798:	b5b0      	push	{r4, r5, r7, lr}
 800679a:	b08c      	sub	sp, #48	; 0x30
 800679c:	af00      	add	r7, sp, #0
 800679e:	4604      	mov	r4, r0
 80067a0:	4608      	mov	r0, r1
 80067a2:	4611      	mov	r1, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4623      	mov	r3, r4
 80067a8:	71fb      	strb	r3, [r7, #7]
 80067aa:	4603      	mov	r3, r0
 80067ac:	80bb      	strh	r3, [r7, #4]
 80067ae:	460b      	mov	r3, r1
 80067b0:	807b      	strh	r3, [r7, #2]
 80067b2:	4613      	mov	r3, r2
 80067b4:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 80067b6:	2300      	movs	r3, #0
 80067b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80067ba:	2300      	movs	r3, #0
 80067bc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80067be:	2300      	movs	r3, #0
 80067c0:	847b      	strh	r3, [r7, #34]	; 0x22
 80067c2:	2300      	movs	r3, #0
 80067c4:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 80067c6:	4b8a      	ldr	r3, [pc, #552]	; (80069f0 <_UG_PutChar+0x258>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80067ce:	75fb      	strb	r3, [r7, #23]
 80067d0:	4b87      	ldr	r3, [pc, #540]	; (80069f0 <_UG_PutChar+0x258>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 80067e2:	f107 0208 	add.w	r2, r7, #8
 80067e6:	79fb      	ldrb	r3, [r7, #7]
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f7ff fe06 	bl	80063fc <_UG_GetCharData>
 80067f0:	4603      	mov	r3, r0
 80067f2:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 80067f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fc:	d102      	bne.n	8006804 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006802:	e21e      	b.n	8006c42 <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 8006804:	4b7a      	ldr	r3, [pc, #488]	; (80069f0 <_UG_PutChar+0x258>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	7d9b      	ldrb	r3, [r3, #22]
 800680a:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 800680c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	d101      	bne.n	8006816 <_UG_PutChar+0x7e>
     return 0;
 8006812:	2300      	movs	r3, #0
 8006814:	e215      	b.n	8006c42 <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 8006816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006818:	08db      	lsrs	r3, r3, #3
 800681a:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 800681c:	4b74      	ldr	r3, [pc, #464]	; (80069f0 <_UG_PutChar+0x258>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	7d9b      	ldrb	r3, [r3, #22]
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <_UG_PutChar+0x9a>
 800682c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800682e:	3301      	adds	r3, #1
 8006830:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8006832:	7dbb      	ldrb	r3, [r7, #22]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01c      	beq.n	8006872 <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8006838:	4b6d      	ldr	r3, [pc, #436]	; (80069f0 <_UG_PutChar+0x258>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683e:	461d      	mov	r5, r3
 8006840:	88ba      	ldrh	r2, [r7, #4]
 8006842:	8abb      	ldrh	r3, [r7, #20]
 8006844:	4413      	add	r3, r2
 8006846:	b29b      	uxth	r3, r3
 8006848:	3b01      	subs	r3, #1
 800684a:	b29b      	uxth	r3, r3
 800684c:	b21c      	sxth	r4, r3
 800684e:	4b68      	ldr	r3, [pc, #416]	; (80069f0 <_UG_PutChar+0x258>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	7ddb      	ldrb	r3, [r3, #23]
 8006854:	b29a      	uxth	r2, r3
 8006856:	887b      	ldrh	r3, [r7, #2]
 8006858:	4413      	add	r3, r2
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	b21b      	sxth	r3, r3
 8006862:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8006866:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800686a:	4622      	mov	r2, r4
 800686c:	47a8      	blx	r5
 800686e:	4603      	mov	r3, r0
 8006870:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8006872:	4b5f      	ldr	r3, [pc, #380]	; (80069f0 <_UG_PutChar+0x258>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	7d1b      	ldrb	r3, [r3, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 8171 	bne.w	8006b60 <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800687e:	2300      	movs	r3, #0
 8006880:	853b      	strh	r3, [r7, #40]	; 0x28
 8006882:	e0ec      	b.n	8006a5e <_UG_PutChar+0x2c6>
     {
       c=0;
 8006884:	2300      	movs	r3, #0
 8006886:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8006888:	2300      	movs	r3, #0
 800688a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800688c:	e0df      	b.n	8006a4e <_UG_PutChar+0x2b6>
       {
         b = *data++;
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	60ba      	str	r2, [r7, #8]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006898:	2300      	movs	r3, #0
 800689a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800689c:	e0ca      	b.n	8006a34 <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800689e:	7f7b      	ldrb	r3, [r7, #29]
 80068a0:	f003 0301 	and.w	r3, r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d033      	beq.n	8006910 <_UG_PutChar+0x178>
           {
             if(driver)
 80068a8:	7dbb      	ldrb	r3, [r7, #22]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01f      	beq.n	80068ee <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 80068ae:	8c3b      	ldrh	r3, [r7, #32]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <_UG_PutChar+0x132>
 80068b4:	7dfb      	ldrb	r3, [r7, #23]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d107      	bne.n	80068ca <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 80068ba:	8c3a      	ldrh	r2, [r7, #32]
 80068bc:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	4610      	mov	r0, r2
 80068c4:	4798      	blx	r3
                 bpixels=0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 80068ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <_UG_PutChar+0x14e>
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d007      	beq.n	80068e6 <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 80068d6:	88ba      	ldrh	r2, [r7, #4]
 80068d8:	8bfb      	ldrh	r3, [r7, #30]
 80068da:	4413      	add	r3, r2
 80068dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 80068de:	887a      	ldrh	r2, [r7, #2]
 80068e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80068e2:	4413      	add	r3, r2
 80068e4:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 80068e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068e8:	3301      	adds	r3, #1
 80068ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80068ec:	e096      	b.n	8006a1c <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 80068ee:	4b40      	ldr	r3, [pc, #256]	; (80069f0 <_UG_PutChar+0x258>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	88b9      	ldrh	r1, [r7, #4]
 80068f8:	8bfa      	ldrh	r2, [r7, #30]
 80068fa:	440a      	add	r2, r1
 80068fc:	b292      	uxth	r2, r2
 80068fe:	b210      	sxth	r0, r2
 8006900:	8879      	ldrh	r1, [r7, #2]
 8006902:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006904:	440a      	add	r2, r1
 8006906:	b292      	uxth	r2, r2
 8006908:	b211      	sxth	r1, r2
 800690a:	883a      	ldrh	r2, [r7, #0]
 800690c:	4798      	blx	r3
 800690e:	e085      	b.n	8006a1c <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8006910:	7dbb      	ldrb	r3, [r7, #22]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d06e      	beq.n	80069f4 <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8006916:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006918:	2b00      	cmp	r3, #0
 800691a:	d064      	beq.n	80069e6 <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 800691c:	7dfb      	ldrb	r3, [r7, #23]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d15e      	bne.n	80069e0 <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 8006922:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006924:	8839      	ldrh	r1, [r7, #0]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	4610      	mov	r0, r2
 800692a:	4798      	blx	r3
                   fpixels=0;
 800692c:	2300      	movs	r3, #0
 800692e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006930:	e059      	b.n	80069e6 <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8006932:	88ba      	ldrh	r2, [r7, #4]
 8006934:	8abb      	ldrh	r3, [r7, #20]
 8006936:	4413      	add	r3, r2
 8006938:	b29a      	uxth	r2, r3
 800693a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8006940:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006942:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006946:	429a      	cmp	r2, r3
 8006948:	d003      	beq.n	8006952 <_UG_PutChar+0x1ba>
 800694a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800694c:	89fb      	ldrh	r3, [r7, #14]
 800694e:	429a      	cmp	r2, r3
 8006950:	d224      	bcs.n	800699c <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006952:	4b27      	ldr	r3, [pc, #156]	; (80069f0 <_UG_PutChar+0x258>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006958:	461d      	mov	r5, r3
 800695a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800695e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006962:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006964:	89fb      	ldrh	r3, [r7, #14]
 8006966:	4413      	add	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	3b01      	subs	r3, #1
 800696c:	b29b      	uxth	r3, r3
 800696e:	b21c      	sxth	r4, r3
 8006970:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006972:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006976:	fb92 f3f3 	sdiv	r3, r2, r3
 800697a:	b29a      	uxth	r2, r3
 800697c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800697e:	4413      	add	r3, r2
 8006980:	b29b      	uxth	r3, r3
 8006982:	b21b      	sxth	r3, r3
 8006984:	4622      	mov	r2, r4
 8006986:	47a8      	blx	r5
 8006988:	4603      	mov	r3, r0
 800698a:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 800698c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800698e:	8839      	ldrh	r1, [r7, #0]
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	4610      	mov	r0, r2
 8006994:	4798      	blx	r3
                       fpixels=0;
 8006996:	2300      	movs	r3, #0
 8006998:	847b      	strh	r3, [r7, #34]	; 0x22
 800699a:	e021      	b.n	80069e0 <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <_UG_PutChar+0x258>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069a2:	461c      	mov	r4, r3
 80069a4:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80069a8:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80069ac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80069ae:	89fb      	ldrh	r3, [r7, #14]
 80069b0:	4413      	add	r3, r2
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3b01      	subs	r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	b21a      	sxth	r2, r3
 80069ba:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80069be:	47a0      	blx	r4
 80069c0:	4603      	mov	r3, r0
 80069c2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 80069c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069c6:	8839      	ldrh	r1, [r7, #0]
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	4610      	mov	r0, r2
 80069cc:	4798      	blx	r3
                       fpixels -= width;
 80069ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80069d0:	89fb      	ldrh	r3, [r7, #14]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 80069d6:	88bb      	ldrh	r3, [r7, #4]
 80069d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 80069da:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80069dc:	3301      	adds	r3, #1
 80069de:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 80069e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1a5      	bne.n	8006932 <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 80069e6:	8c3b      	ldrh	r3, [r7, #32]
 80069e8:	3301      	adds	r3, #1
 80069ea:	843b      	strh	r3, [r7, #32]
 80069ec:	e016      	b.n	8006a1c <_UG_PutChar+0x284>
 80069ee:	bf00      	nop
 80069f0:	200004fc 	.word	0x200004fc
             }
             else if(!trans)                           // Not accelerated output
 80069f4:	7dfb      	ldrb	r3, [r7, #23]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d110      	bne.n	8006a1c <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 80069fa:	4b94      	ldr	r3, [pc, #592]	; (8006c4c <_UG_PutChar+0x4b4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	88b9      	ldrh	r1, [r7, #4]
 8006a04:	8bfa      	ldrh	r2, [r7, #30]
 8006a06:	440a      	add	r2, r1
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	b210      	sxth	r0, r2
 8006a0c:	8879      	ldrh	r1, [r7, #2]
 8006a0e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a10:	440a      	add	r2, r1
 8006a12:	b292      	uxth	r2, r2
 8006a14:	b211      	sxth	r1, r2
 8006a16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8006a1a:	4798      	blx	r3
             }
           }
           b >>= 1;
 8006a1c:	7f7b      	ldrb	r3, [r7, #29]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	777b      	strb	r3, [r7, #29]
           c++;
 8006a22:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	3301      	adds	r3, #1
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006a2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a30:	3301      	adds	r3, #1
 8006a32:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006a34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a36:	2b07      	cmp	r3, #7
 8006a38:	d806      	bhi.n	8006a48 <_UG_PutChar+0x2b0>
 8006a3a:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8006a3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	f6ff af2b 	blt.w	800689e <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 8006a48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006a4e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a52:	429a      	cmp	r2, r3
 8006a54:	f4ff af1b 	bcc.w	800688e <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006a58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	853b      	strh	r3, [r7, #40]	; 0x28
 8006a5e:	4b7b      	ldr	r3, [pc, #492]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	7ddb      	ldrb	r3, [r3, #23]
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	f4ff af0b 	bcc.w	8006884 <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8006a6e:	7dbb      	ldrb	r3, [r7, #22]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80e4 	beq.w	8006c3e <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 8006a76:	8c3b      	ldrh	r3, [r7, #32]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <_UG_PutChar+0x2f8>
 8006a7c:	7dfb      	ldrb	r3, [r7, #23]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 8006a82:	8c3a      	ldrh	r2, [r7, #32]
 8006a84:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4798      	blx	r3
 8006a8e:	e0d6      	b.n	8006c3e <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 8006a90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 80d3 	beq.w	8006c3e <_UG_PutChar+0x4a6>
       {
         if(!trans)
 8006a98:	7dfb      	ldrb	r3, [r7, #23]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d15c      	bne.n	8006b58 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 8006a9e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006aa0:	8839      	ldrh	r1, [r7, #0]
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	4798      	blx	r3
 8006aa8:	e0c9      	b.n	8006c3e <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006aaa:	88ba      	ldrh	r2, [r7, #4]
 8006aac:	8abb      	ldrh	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ab4:	1ad3      	subs	r3, r2, r3
 8006ab6:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8006ab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006aba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d003      	beq.n	8006aca <_UG_PutChar+0x332>
 8006ac2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ac4:	8a3b      	ldrh	r3, [r7, #16]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d224      	bcs.n	8006b14 <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006aca:	4b60      	ldr	r3, [pc, #384]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad0:	461d      	mov	r5, r3
 8006ad2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006ad6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006ada:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006adc:	8a3b      	ldrh	r3, [r7, #16]
 8006ade:	4413      	add	r3, r2
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b21c      	sxth	r4, r3
 8006ae8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006aea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006aee:	fb92 f3f3 	sdiv	r3, r2, r3
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006af6:	4413      	add	r3, r2
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	b21b      	sxth	r3, r3
 8006afc:	4622      	mov	r2, r4
 8006afe:	47a8      	blx	r5
 8006b00:	4603      	mov	r3, r0
 8006b02:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006b04:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b06:	8839      	ldrh	r1, [r7, #0]
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	4610      	mov	r0, r2
 8006b0c:	4798      	blx	r3
               fpixels=0;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	847b      	strh	r3, [r7, #34]	; 0x22
 8006b12:	e021      	b.n	8006b58 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006b14:	4b4d      	ldr	r3, [pc, #308]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b1a:	461c      	mov	r4, r3
 8006b1c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006b20:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006b24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b26:	8a3b      	ldrh	r3, [r7, #16]
 8006b28:	4413      	add	r3, r2
 8006b2a:	b29b      	uxth	r3, r3
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	b21a      	sxth	r2, r3
 8006b32:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006b36:	47a0      	blx	r4
 8006b38:	4603      	mov	r3, r0
 8006b3a:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006b3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b3e:	8839      	ldrh	r1, [r7, #0]
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	4610      	mov	r0, r2
 8006b44:	4798      	blx	r3
               fpixels -= width;
 8006b46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006b48:	8a3b      	ldrh	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8006b4e:	88bb      	ldrh	r3, [r7, #4]
 8006b50:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8006b52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006b54:	3301      	adds	r3, #1
 8006b56:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8006b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1a5      	bne.n	8006aaa <_UG_PutChar+0x312>
 8006b5e:	e06e      	b.n	8006c3e <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006b60:	4b3a      	ldr	r3, [pc, #232]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	7d1b      	ldrb	r3, [r3, #20]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d169      	bne.n	8006c3e <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	853b      	strh	r3, [r7, #40]	; 0x28
 8006b6e:	e05f      	b.n	8006c30 <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8006b70:	2300      	movs	r3, #0
 8006b72:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b74:	e04a      	b.n	8006c0c <_UG_PutChar+0x474>
       {
         b = *data++;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	60ba      	str	r2, [r7, #8]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006b80:	883b      	ldrh	r3, [r7, #0]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	7f7a      	ldrb	r2, [r7, #29]
 8006b86:	fb03 f202 	mul.w	r2, r3, r2
 8006b8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	7f79      	ldrb	r1, [r7, #29]
 8006b92:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006b96:	fb01 f303 	mul.w	r3, r1, r3
 8006b9a:	4413      	add	r3, r2
 8006b9c:	121b      	asrs	r3, r3, #8
 8006b9e:	b21b      	sxth	r3, r3
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8006ba4:	883b      	ldrh	r3, [r7, #0]
 8006ba6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006baa:	7f79      	ldrb	r1, [r7, #29]
 8006bac:	fb03 f101 	mul.w	r1, r3, r1
 8006bb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006bb8:	7f78      	ldrb	r0, [r7, #29]
 8006bba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006bbe:	fb00 f303 	mul.w	r3, r0, r3
 8006bc2:	440b      	add	r3, r1
 8006bc4:	121b      	asrs	r3, r3, #8
 8006bc6:	b21b      	sxth	r3, r3
 8006bc8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006bcc:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	b21b      	sxth	r3, r3
 8006bd2:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006bd4:	7dbb      	ldrb	r3, [r7, #22]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d005      	beq.n	8006be6 <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006bda:	8a7a      	ldrh	r2, [r7, #18]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	4611      	mov	r1, r2
 8006be0:	2001      	movs	r0, #1
 8006be2:	4798      	blx	r3
 8006be4:	e00f      	b.n	8006c06 <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006be6:	4b19      	ldr	r3, [pc, #100]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	88b9      	ldrh	r1, [r7, #4]
 8006bf0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006bf2:	440a      	add	r2, r1
 8006bf4:	b292      	uxth	r2, r2
 8006bf6:	b210      	sxth	r0, r2
 8006bf8:	8879      	ldrh	r1, [r7, #2]
 8006bfa:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006bfc:	440a      	add	r2, r1
 8006bfe:	b292      	uxth	r2, r2
 8006c00:	b211      	sxth	r1, r2
 8006c02:	8a7a      	ldrh	r2, [r7, #18]
 8006c04:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006c06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c08:	3301      	adds	r3, #1
 8006c0a:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006c0c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006c0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	dbaf      	blt.n	8006b76 <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	4a0c      	ldr	r2, [pc, #48]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006c1a:	6812      	ldr	r2, [r2, #0]
 8006c1c:	7d92      	ldrb	r2, [r2, #22]
 8006c1e:	4611      	mov	r1, r2
 8006c20:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006c24:	1a8a      	subs	r2, r1, r2
 8006c26:	4413      	add	r3, r2
 8006c28:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006c2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <_UG_PutChar+0x4b4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	7ddb      	ldrb	r3, [r3, #23]
 8006c36:	b29b      	uxth	r3, r3
 8006c38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d398      	bcc.n	8006b70 <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8006c3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3730      	adds	r7, #48	; 0x30
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bdb0      	pop	{r4, r5, r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	200004fc 	.word	0x200004fc

08006c50 <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	82fb      	strh	r3, [r7, #22]
 8006c62:	e01f      	b.n	8006ca4 <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	8afb      	ldrh	r3, [r7, #22]
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	4413      	add	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10e      	bne.n	8006c9e <_UG_UpdateObjects+0x4e>
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d009      	beq.n	8006c9e <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d004      	beq.n	8006c9e <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	6939      	ldr	r1, [r7, #16]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006c9e:	8afb      	ldrh	r3, [r7, #22]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	82fb      	strh	r3, [r7, #22]
 8006ca4:	8afa      	ldrh	r2, [r7, #22]
 8006ca6:	8abb      	ldrh	r3, [r7, #20]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d3db      	bcc.n	8006c64 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
	...

08006cb8 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006cc0:	4b22      	ldr	r3, [pc, #136]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006cc6:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006cc8:	2202      	movs	r2, #2
 8006cca:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	82fb      	strh	r3, [r7, #22]
 8006cd6:	e02f      	b.n	8006d38 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685a      	ldr	r2, [r3, #4]
 8006cdc:	8afb      	ldrh	r3, [r7, #22]
 8006cde:	015b      	lsls	r3, r3, #5
 8006ce0:	4413      	add	r3, r2
 8006ce2:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	f003 0301 	and.w	r3, r3, #1
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11e      	bne.n	8006d32 <_UG_HandleEvents+0x7a>
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d019      	beq.n	8006d32 <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	7e9b      	ldrb	r3, [r3, #26]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d015      	beq.n	8006d32 <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8006d06:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	7e1a      	ldrb	r2, [r3, #24]
 8006d10:	4b0e      	ldr	r3, [pc, #56]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006d12:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	7e5a      	ldrb	r2, [r3, #25]
 8006d18:	4b0c      	ldr	r3, [pc, #48]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006d1a:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	7e9a      	ldrb	r2, [r3, #26]
 8006d20:	4b0a      	ldr	r3, [pc, #40]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006d22:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	4808      	ldr	r0, [pc, #32]	; (8006d4c <_UG_HandleEvents+0x94>)
 8006d2a:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006d32:	8afb      	ldrh	r3, [r7, #22]
 8006d34:	3301      	adds	r3, #1
 8006d36:	82fb      	strh	r3, [r7, #22]
 8006d38:	8afa      	ldrh	r2, [r7, #22]
 8006d3a:	8abb      	ldrh	r3, [r7, #20]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d3cb      	bcc.n	8006cd8 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20000510 	.word	0x20000510

08006d50 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b08f      	sub	sp, #60	; 0x3c
 8006d54:	af02      	add	r7, sp, #8
 8006d56:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	f000 8102 	beq.w	8006f66 <_UG_PutText+0x216>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80fd 	beq.w	8006f66 <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	89db      	ldrh	r3, [r3, #14]
 8006d70:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	895b      	ldrh	r3, [r3, #10]
 8006d76:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	3302      	adds	r3, #2
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 8006d82:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006d86:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006d8a:	1ad2      	subs	r2, r2, r3
 8006d8c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	f2c0 80ea 	blt.w	8006f6a <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	891b      	ldrh	r3, [r3, #8]
 8006d9a:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	899b      	ldrh	r3, [r3, #12]
 8006da0:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7d1b      	ldrb	r3, [r3, #20]
 8006da6:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	8adb      	ldrh	r3, [r3, #22]
 8006dac:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	8b1b      	ldrh	r3, [r3, #24]
 8006db2:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	623b      	str	r3, [r7, #32]
   char* c = str;
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff fc6a 	bl	800669c <_UG_FontSelect>

   rc=1;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8006dcc:	6a3b      	ldr	r3, [r7, #32]
 8006dce:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 8006dd0:	69fb      	ldr	r3, [r7, #28]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	61fa      	str	r2, [r7, #28]
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d006      	beq.n	8006dee <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8006de0:	7afb      	ldrb	r3, [r7, #11]
 8006de2:	2b0a      	cmp	r3, #10
 8006de4:	d1f4      	bne.n	8006dd0 <_UG_PutText+0x80>
 8006de6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006de8:	3301      	adds	r3, #1
 8006dea:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8006dec:	e7f0      	b.n	8006dd0 <_UG_PutText+0x80>
     if(!chr) break;
 8006dee:	bf00      	nop
   }

   yp = 0;
 8006df0:	2300      	movs	r3, #0
 8006df2:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006df4:	7c7b      	ldrb	r3, [r7, #17]
 8006df6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01f      	beq.n	8006e3e <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8006dfe:	8b7a      	ldrh	r2, [r7, #26]
 8006e00:	8b3b      	ldrh	r3, [r7, #24]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	3301      	adds	r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8006e0c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e0e:	8afb      	ldrh	r3, [r7, #22]
 8006e10:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006e12:	fb11 f303 	smulbb	r3, r1, r3
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8006e1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b299      	uxth	r1, r3
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	fb11 f303 	smulbb	r3, r1, r3
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8006e34:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f2c0 8098 	blt.w	8006f6e <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006e3e:	7c7b      	ldrb	r3, [r7, #17]
 8006e40:	f003 0310 	and.w	r3, r3, #16
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <_UG_PutText+0x100>
 8006e48:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006e4c:	105b      	asrs	r3, r3, #1
 8006e4e:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8006e50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006e52:	8b3b      	ldrh	r3, [r7, #24]
 8006e54:	4413      	add	r3, r2
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	61fa      	str	r2, [r7, #28]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 8006e70:	7afb      	ldrb	r3, [r7, #11]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01b      	beq.n	8006eae <_UG_PutText+0x15e>
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b0a      	cmp	r3, #10
 8006e7a:	d018      	beq.n	8006eae <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006e7c:	7afb      	ldrb	r3, [r7, #11]
 8006e7e:	2100      	movs	r1, #0
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fabb 	bl	80063fc <_UG_GetCharData>
 8006e86:	4603      	mov	r3, r0
 8006e88:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 8006e8a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e92:	d00a      	beq.n	8006eaa <_UG_PutText+0x15a>
         sl++;
 8006e94:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e96:	3301      	adds	r3, #1
 8006e98:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8006e9a:	893a      	ldrh	r2, [r7, #8]
 8006e9c:	89fb      	ldrh	r3, [r7, #14]
 8006e9e:	4413      	add	r3, r2
 8006ea0:	b29a      	uxth	r2, r3
 8006ea2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ea4:	4413      	add	r3, r2
 8006ea6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006ea8:	e7dd      	b.n	8006e66 <_UG_PutText+0x116>
         if (w == -1){continue;}
 8006eaa:	bf00      	nop
        chr = *c++;
 8006eac:	e7db      	b.n	8006e66 <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8006eae:	89fb      	ldrh	r3, [r7, #14]
 8006eb0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8006eb6:	8a7a      	ldrh	r2, [r7, #18]
 8006eb8:	8abb      	ldrh	r3, [r7, #20]
 8006eba:	1ad3      	subs	r3, r2, r3
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8006ec4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006ec6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8006ece:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	db4d      	blt.n	8006f72 <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006ed6:	7c7b      	ldrb	r3, [r7, #17]
 8006ed8:	f003 0301 	and.w	r3, r3, #1
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d002      	beq.n	8006ee6 <_UG_PutText+0x196>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	853b      	strh	r3, [r7, #40]	; 0x28
 8006ee4:	e008      	b.n	8006ef8 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006ee6:	7c7b      	ldrb	r3, [r7, #17]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <_UG_PutText+0x1a8>
 8006ef0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006ef4:	105b      	asrs	r3, r3, #1
 8006ef6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8006ef8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006efa:	8abb      	ldrh	r3, [r7, #20]
 8006efc:	4413      	add	r3, r2
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 8006f02:	6a3b      	ldr	r3, [r7, #32]
 8006f04:	1c5a      	adds	r2, r3, #1
 8006f06:	623a      	str	r2, [r7, #32]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8006f0c:	7afb      	ldrb	r3, [r7, #11]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d031      	beq.n	8006f76 <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	2b0a      	cmp	r3, #10
 8006f16:	d01c      	beq.n	8006f52 <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	8a1c      	ldrh	r4, [r3, #16]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8a5b      	ldrh	r3, [r3, #18]
 8006f20:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006f24:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8006f28:	7af8      	ldrb	r0, [r7, #11]
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	4623      	mov	r3, r4
 8006f2e:	f7ff fc33 	bl	8006798 <_UG_PutChar>
 8006f32:	4603      	mov	r3, r0
 8006f34:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 8006f36:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006f3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f3e:	d0e0      	beq.n	8006f02 <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8006f40:	893a      	ldrh	r2, [r7, #8]
 8006f42:	89fb      	ldrh	r3, [r7, #14]
 8006f44:	4413      	add	r3, r2
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006f4a:	4413      	add	r3, r2
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 8006f50:	e7d7      	b.n	8006f02 <_UG_PutText+0x1b2>
           break;
 8006f52:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006f54:	8afa      	ldrh	r2, [r7, #22]
 8006f56:	89bb      	ldrh	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006f5e:	4413      	add	r3, r2
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8006f64:	e779      	b.n	8006e5a <_UG_PutText+0x10a>
     return;
 8006f66:	bf00      	nop
 8006f68:	e006      	b.n	8006f78 <_UG_PutText+0x228>
     return;
 8006f6a:	bf00      	nop
 8006f6c:	e004      	b.n	8006f78 <_UG_PutText+0x228>
        return;
 8006f6e:	bf00      	nop
 8006f70:	e002      	b.n	8006f78 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 8006f72:	bf00      	nop
 8006f74:	e000      	b.n	8006f78 <_UG_PutText+0x228>
           return;
 8006f76:	bf00      	nop
   }
}
 8006f78:	3734      	adds	r7, #52	; 0x34
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd90      	pop	{r4, r7, pc}

08006f7e <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	460b      	mov	r3, r1
 8006f88:	70fb      	strb	r3, [r7, #3]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8006f94:	2300      	movs	r3, #0
 8006f96:	73fb      	strb	r3, [r7, #15]
 8006f98:	e020      	b.n	8006fdc <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685a      	ldr	r2, [r3, #4]
 8006f9e:	7bfb      	ldrb	r3, [r7, #15]
 8006fa0:	015b      	lsls	r3, r3, #5
 8006fa2:	4413      	add	r3, r2
 8006fa4:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	f003 0301 	and.w	r3, r3, #1
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d111      	bne.n	8006fd6 <_UG_SearchObject+0x58>
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	f003 0302 	and.w	r3, r3, #2
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d00b      	beq.n	8006fd6 <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	7e1b      	ldrb	r3, [r3, #24]
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d106      	bne.n	8006fd6 <_UG_SearchObject+0x58>
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	7e5b      	ldrb	r3, [r3, #25]
 8006fcc:	78ba      	ldrb	r2, [r7, #2]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d101      	bne.n	8006fd6 <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	e008      	b.n	8006fe8 <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	7bfa      	ldrb	r2, [r7, #15]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d3d9      	bcc.n	8006f9a <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8006ff4:	b5b0      	push	{r4, r5, r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af02      	add	r7, sp, #8
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	4611      	mov	r1, r2
 8007000:	461a      	mov	r2, r3
 8007002:	4623      	mov	r3, r4
 8007004:	80fb      	strh	r3, [r7, #6]
 8007006:	4603      	mov	r3, r0
 8007008:	80bb      	strh	r3, [r7, #4]
 800700a:	460b      	mov	r3, r1
 800700c:	807b      	strh	r3, [r7, #2]
 800700e:	4613      	mov	r3, r2
 8007010:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8007012:	887b      	ldrh	r3, [r7, #2]
 8007014:	3b01      	subs	r3, #1
 8007016:	b29b      	uxth	r3, r3
 8007018:	b21c      	sxth	r4, r3
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	1c9a      	adds	r2, r3, #2
 800701e:	61ba      	str	r2, [r7, #24]
 8007020:	881b      	ldrh	r3, [r3, #0]
 8007022:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8007026:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800702a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	4622      	mov	r2, r4
 8007034:	f7fe fe50 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8007038:	88bb      	ldrh	r3, [r7, #4]
 800703a:	3301      	adds	r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	b219      	sxth	r1, r3
 8007040:	883b      	ldrh	r3, [r7, #0]
 8007042:	3b01      	subs	r3, #1
 8007044:	b29b      	uxth	r3, r3
 8007046:	b21c      	sxth	r4, r3
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	1c9a      	adds	r2, r3, #2
 800704c:	61ba      	str	r2, [r7, #24]
 800704e:	881b      	ldrh	r3, [r3, #0]
 8007050:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007054:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	4623      	mov	r3, r4
 800705c:	f7fe fe3c 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	1c9a      	adds	r2, r3, #2
 8007064:	61ba      	str	r2, [r7, #24]
 8007066:	881b      	ldrh	r3, [r3, #0]
 8007068:	f9b7 4000 	ldrsh.w	r4, [r7]
 800706c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007070:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007074:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	4623      	mov	r3, r4
 800707c:	f7fe fe2c 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 8007080:	883b      	ldrh	r3, [r7, #0]
 8007082:	3b01      	subs	r3, #1
 8007084:	b29b      	uxth	r3, r3
 8007086:	b21c      	sxth	r4, r3
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	1c9a      	adds	r2, r3, #2
 800708c:	61ba      	str	r2, [r7, #24]
 800708e:	881b      	ldrh	r3, [r3, #0]
 8007090:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007094:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007098:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	4623      	mov	r3, r4
 80070a0:	f7fe fe1a 	bl	8005cd8 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 80070a4:	88fb      	ldrh	r3, [r7, #6]
 80070a6:	3301      	adds	r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	b218      	sxth	r0, r3
 80070ac:	88bb      	ldrh	r3, [r7, #4]
 80070ae:	3301      	adds	r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	b219      	sxth	r1, r3
 80070b4:	887b      	ldrh	r3, [r7, #2]
 80070b6:	3b02      	subs	r3, #2
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	b21c      	sxth	r4, r3
 80070bc:	88bb      	ldrh	r3, [r7, #4]
 80070be:	3301      	adds	r3, #1
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	b21d      	sxth	r5, r3
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	61ba      	str	r2, [r7, #24]
 80070ca:	881b      	ldrh	r3, [r3, #0]
 80070cc:	9300      	str	r3, [sp, #0]
 80070ce:	462b      	mov	r3, r5
 80070d0:	4622      	mov	r2, r4
 80070d2:	f7fe fe01 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 80070d6:	88fb      	ldrh	r3, [r7, #6]
 80070d8:	3301      	adds	r3, #1
 80070da:	b29b      	uxth	r3, r3
 80070dc:	b218      	sxth	r0, r3
 80070de:	88bb      	ldrh	r3, [r7, #4]
 80070e0:	3302      	adds	r3, #2
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	b219      	sxth	r1, r3
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	3301      	adds	r3, #1
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	b21c      	sxth	r4, r3
 80070ee:	883b      	ldrh	r3, [r7, #0]
 80070f0:	3b02      	subs	r3, #2
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	b21d      	sxth	r5, r3
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	1c9a      	adds	r2, r3, #2
 80070fa:	61ba      	str	r2, [r7, #24]
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	462b      	mov	r3, r5
 8007102:	4622      	mov	r2, r4
 8007104:	f7fe fde8 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007108:	88fb      	ldrh	r3, [r7, #6]
 800710a:	3301      	adds	r3, #1
 800710c:	b29b      	uxth	r3, r3
 800710e:	b218      	sxth	r0, r3
 8007110:	883b      	ldrh	r3, [r7, #0]
 8007112:	3b01      	subs	r3, #1
 8007114:	b29b      	uxth	r3, r3
 8007116:	b219      	sxth	r1, r3
 8007118:	887b      	ldrh	r3, [r7, #2]
 800711a:	3b01      	subs	r3, #1
 800711c:	b29b      	uxth	r3, r3
 800711e:	b21c      	sxth	r4, r3
 8007120:	883b      	ldrh	r3, [r7, #0]
 8007122:	3b01      	subs	r3, #1
 8007124:	b29b      	uxth	r3, r3
 8007126:	b21d      	sxth	r5, r3
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	1c9a      	adds	r2, r3, #2
 800712c:	61ba      	str	r2, [r7, #24]
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	462b      	mov	r3, r5
 8007134:	4622      	mov	r2, r4
 8007136:	f7fe fdcf 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 800713a:	887b      	ldrh	r3, [r7, #2]
 800713c:	3b01      	subs	r3, #1
 800713e:	b29b      	uxth	r3, r3
 8007140:	b218      	sxth	r0, r3
 8007142:	88bb      	ldrh	r3, [r7, #4]
 8007144:	3301      	adds	r3, #1
 8007146:	b29b      	uxth	r3, r3
 8007148:	b219      	sxth	r1, r3
 800714a:	887b      	ldrh	r3, [r7, #2]
 800714c:	3b01      	subs	r3, #1
 800714e:	b29b      	uxth	r3, r3
 8007150:	b21c      	sxth	r4, r3
 8007152:	883b      	ldrh	r3, [r7, #0]
 8007154:	3b02      	subs	r3, #2
 8007156:	b29b      	uxth	r3, r3
 8007158:	b21d      	sxth	r5, r3
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	1c9a      	adds	r2, r3, #2
 800715e:	61ba      	str	r2, [r7, #24]
 8007160:	881b      	ldrh	r3, [r3, #0]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	462b      	mov	r3, r5
 8007166:	4622      	mov	r2, r4
 8007168:	f7fe fdb6 	bl	8005cd8 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	3302      	adds	r3, #2
 8007170:	b29b      	uxth	r3, r3
 8007172:	b218      	sxth	r0, r3
 8007174:	88bb      	ldrh	r3, [r7, #4]
 8007176:	3302      	adds	r3, #2
 8007178:	b29b      	uxth	r3, r3
 800717a:	b219      	sxth	r1, r3
 800717c:	887b      	ldrh	r3, [r7, #2]
 800717e:	3b03      	subs	r3, #3
 8007180:	b29b      	uxth	r3, r3
 8007182:	b21c      	sxth	r4, r3
 8007184:	88bb      	ldrh	r3, [r7, #4]
 8007186:	3302      	adds	r3, #2
 8007188:	b29b      	uxth	r3, r3
 800718a:	b21d      	sxth	r5, r3
 800718c:	69bb      	ldr	r3, [r7, #24]
 800718e:	1c9a      	adds	r2, r3, #2
 8007190:	61ba      	str	r2, [r7, #24]
 8007192:	881b      	ldrh	r3, [r3, #0]
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	462b      	mov	r3, r5
 8007198:	4622      	mov	r2, r4
 800719a:	f7fe fd9d 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	3302      	adds	r3, #2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b218      	sxth	r0, r3
 80071a6:	88bb      	ldrh	r3, [r7, #4]
 80071a8:	3303      	adds	r3, #3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	b219      	sxth	r1, r3
 80071ae:	88fb      	ldrh	r3, [r7, #6]
 80071b0:	3302      	adds	r3, #2
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	b21c      	sxth	r4, r3
 80071b6:	883b      	ldrh	r3, [r7, #0]
 80071b8:	3b03      	subs	r3, #3
 80071ba:	b29b      	uxth	r3, r3
 80071bc:	b21d      	sxth	r5, r3
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	1c9a      	adds	r2, r3, #2
 80071c2:	61ba      	str	r2, [r7, #24]
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	462b      	mov	r3, r5
 80071ca:	4622      	mov	r2, r4
 80071cc:	f7fe fd84 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	3302      	adds	r3, #2
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	b218      	sxth	r0, r3
 80071d8:	883b      	ldrh	r3, [r7, #0]
 80071da:	3b02      	subs	r3, #2
 80071dc:	b29b      	uxth	r3, r3
 80071de:	b219      	sxth	r1, r3
 80071e0:	887b      	ldrh	r3, [r7, #2]
 80071e2:	3b02      	subs	r3, #2
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	b21c      	sxth	r4, r3
 80071e8:	883b      	ldrh	r3, [r7, #0]
 80071ea:	3b02      	subs	r3, #2
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	b21d      	sxth	r5, r3
 80071f0:	69bb      	ldr	r3, [r7, #24]
 80071f2:	1c9a      	adds	r2, r3, #2
 80071f4:	61ba      	str	r2, [r7, #24]
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	462b      	mov	r3, r5
 80071fc:	4622      	mov	r2, r4
 80071fe:	f7fe fd6b 	bl	8005cd8 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 8007202:	887b      	ldrh	r3, [r7, #2]
 8007204:	3b02      	subs	r3, #2
 8007206:	b29b      	uxth	r3, r3
 8007208:	b218      	sxth	r0, r3
 800720a:	88bb      	ldrh	r3, [r7, #4]
 800720c:	3302      	adds	r3, #2
 800720e:	b29b      	uxth	r3, r3
 8007210:	b219      	sxth	r1, r3
 8007212:	887b      	ldrh	r3, [r7, #2]
 8007214:	3b02      	subs	r3, #2
 8007216:	b29b      	uxth	r3, r3
 8007218:	b21a      	sxth	r2, r3
 800721a:	883b      	ldrh	r3, [r7, #0]
 800721c:	3b03      	subs	r3, #3
 800721e:	b29b      	uxth	r3, r3
 8007220:	b21c      	sxth	r4, r3
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	881b      	ldrh	r3, [r3, #0]
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	4623      	mov	r3, r4
 800722a:	f7fe fd55 	bl	8005cd8 <UG_DrawLine>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bdb0      	pop	{r4, r5, r7, pc}

08007236 <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8007244:	2300      	movs	r3, #0
 8007246:	73fb      	strb	r3, [r7, #15]
 8007248:	e016      	b.n	8007278 <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	015b      	lsls	r3, r3, #5
 8007252:	4413      	add	r3, r2
 8007254:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d007      	beq.n	8007272 <_UG_GetFreeObject+0x3c>
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	e008      	b.n	8007284 <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 8007272:	7bfb      	ldrb	r3, [r7, #15]
 8007274:	3301      	adds	r3, #1
 8007276:	73fb      	strb	r3, [r7, #15]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	7bfa      	ldrb	r2, [r7, #15]
 800727e:	429a      	cmp	r2, r3
 8007280:	d3e3      	bcc.n	800724a <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	4603      	mov	r3, r0
 8007298:	6039      	str	r1, [r7, #0]
 800729a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800729c:	79fb      	ldrb	r3, [r7, #7]
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d810      	bhi.n	80072c4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <UG_DriverRegister+0x40>)
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	79fb      	ldrb	r3, [r7, #7]
 80072a8:	3307      	adds	r3, #7
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80072b2:	4b07      	ldr	r3, [pc, #28]	; (80072d0 <UG_DriverRegister+0x40>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	79fb      	ldrb	r3, [r7, #7]
 80072b8:	3307      	adds	r3, #7
 80072ba:	00db      	lsls	r3, r3, #3
 80072bc:	4413      	add	r3, r2
 80072be:	2203      	movs	r2, #3
 80072c0:	721a      	strb	r2, [r3, #8]
 80072c2:	e000      	b.n	80072c6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80072c4:	bf00      	nop
}
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	200004fc 	.word	0x200004fc

080072d4 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b082      	sub	sp, #8
 80072d8:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 80072da:	4b5d      	ldr	r3, [pc, #372]	; (8007450 <UG_Update+0x17c>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80072e2:	f003 0301 	and.w	r3, r3, #1
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <UG_Update+0x2c>
 80072ea:	4b59      	ldr	r3, [pc, #356]	; (8007450 <UG_Update+0x17c>)
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 80072f2:	4b57      	ldr	r3, [pc, #348]	; (8007450 <UG_Update+0x17c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0201 	bic.w	r2, r2, #1
 80072fa:	b2d2      	uxtb	r2, r2
 80072fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8007300:	4b53      	ldr	r3, [pc, #332]	; (8007450 <UG_Update+0x17c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	4b52      	ldr	r3, [pc, #328]	; (8007450 <UG_Update+0x17c>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	429a      	cmp	r2, r3
 800730e:	d071      	beq.n	80073f4 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8007310:	4b4f      	ldr	r3, [pc, #316]	; (8007450 <UG_Update+0x17c>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d06c      	beq.n	80073f4 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 800731a:	4b4d      	ldr	r3, [pc, #308]	; (8007450 <UG_Update+0x17c>)
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	4b4c      	ldr	r3, [pc, #304]	; (8007450 <UG_Update+0x17c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6892      	ldr	r2, [r2, #8]
 8007324:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 8007326:	4b4a      	ldr	r3, [pc, #296]	; (8007450 <UG_Update+0x17c>)
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	4b49      	ldr	r3, [pc, #292]	; (8007450 <UG_Update+0x17c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	6852      	ldr	r2, [r2, #4]
 8007330:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007332:	4b47      	ldr	r3, [pc, #284]	; (8007450 <UG_Update+0x17c>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d045      	beq.n	80073c8 <UG_Update+0xf4>
 800733c:	4b44      	ldr	r3, [pc, #272]	; (8007450 <UG_Update+0x17c>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	7d9b      	ldrb	r3, [r3, #22]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b00      	cmp	r3, #0
 800734a:	d03d      	beq.n	80073c8 <UG_Update+0xf4>
 800734c:	4b40      	ldr	r3, [pc, #256]	; (8007450 <UG_Update+0x17c>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	7a1b      	ldrb	r3, [r3, #8]
 8007354:	f003 0308 	and.w	r3, r3, #8
 8007358:	2b00      	cmp	r3, #0
 800735a:	d035      	beq.n	80073c8 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 800735c:	4b3c      	ldr	r3, [pc, #240]	; (8007450 <UG_Update+0x17c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007366:	4b3a      	ldr	r3, [pc, #232]	; (8007450 <UG_Update+0x17c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007370:	429a      	cmp	r2, r3
 8007372:	d123      	bne.n	80073bc <UG_Update+0xe8>
 8007374:	4b36      	ldr	r3, [pc, #216]	; (8007450 <UG_Update+0x17c>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800737e:	4b34      	ldr	r3, [pc, #208]	; (8007450 <UG_Update+0x17c>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007388:	429a      	cmp	r2, r3
 800738a:	d117      	bne.n	80073bc <UG_Update+0xe8>
 800738c:	4b30      	ldr	r3, [pc, #192]	; (8007450 <UG_Update+0x17c>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007396:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <UG_Update+0x17c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d10b      	bne.n	80073bc <UG_Update+0xe8>
 80073a4:	4b2a      	ldr	r3, [pc, #168]	; (8007450 <UG_Update+0x17c>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80073ae:	4b28      	ldr	r3, [pc, #160]	; (8007450 <UG_Update+0x17c>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d005      	beq.n	80073c8 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 80073bc:	4b24      	ldr	r3, [pc, #144]	; (8007450 <UG_Update+0x17c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fd78 	bl	8007eb8 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80073c8:	4b21      	ldr	r3, [pc, #132]	; (8007450 <UG_Update+0x17c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	7a1a      	ldrb	r2, [r3, #8]
 80073d0:	4b1f      	ldr	r3, [pc, #124]	; (8007450 <UG_Update+0x17c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 80073de:	4b1c      	ldr	r3, [pc, #112]	; (8007450 <UG_Update+0x17c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	7a1a      	ldrb	r2, [r3, #8]
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <UG_Update+0x17c>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 80073f0:	b2d2      	uxtb	r2, r2
 80073f2:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 80073f4:	4b16      	ldr	r3, [pc, #88]	; (8007450 <UG_Update+0x17c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d018      	beq.n	8007430 <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <UG_Update+0x17c>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	7a1b      	ldrb	r3, [r3, #8]
 800740a:	f003 0320 	and.w	r3, r3, #32
 800740e:	2b00      	cmp	r3, #0
 8007410:	d002      	beq.n	8007418 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f000 fdfa 	bl	800800c <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	7a1b      	ldrb	r3, [r3, #8]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fc13 	bl	8006c50 <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f7ff fc44 	bl	8006cb8 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8007430:	4b07      	ldr	r3, [pc, #28]	; (8007450 <UG_Update+0x17c>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <UG_Update+0x172>
     gui->device->flush();
 800743c:	4b04      	ldr	r3, [pc, #16]	; (8007450 <UG_Update+0x17c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	4798      	blx	r3
   }
}
 8007446:	bf00      	nop
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	200004fc 	.word	0x200004fc

08007454 <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 8007454:	b5b0      	push	{r4, r5, r7, lr}
 8007456:	b08a      	sub	sp, #40	; 0x28
 8007458:	af00      	add	r7, sp, #0
 800745a:	4603      	mov	r3, r0
 800745c:	603a      	str	r2, [r7, #0]
 800745e:	80fb      	strh	r3, [r7, #6]
 8007460:	460b      	mov	r3, r1
 8007462:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	f000 810c 	beq.w	8007686 <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	7a1b      	ldrb	r3, [r3, #8]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d164      	bne.n	8007540 <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 800747c:	2300      	movs	r3, #0
 800747e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007480:	e057      	b.n	8007532 <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 8007482:	2300      	movs	r3, #0
 8007484:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007486:	e048      	b.n	800751a <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 8007488:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800748c:	2b00      	cmp	r3, #0
 800748e:	da00      	bge.n	8007492 <UG_DrawBMP+0x3e>
 8007490:	3307      	adds	r3, #7
 8007492:	10db      	asrs	r3, r3, #3
 8007494:	b21b      	sxth	r3, r3
 8007496:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 8007498:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800749c:	425a      	negs	r2, r3
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	f002 0207 	and.w	r2, r2, #7
 80074a6:	bf58      	it	pl
 80074a8:	4253      	negpl	r3, r2
 80074aa:	b21b      	sxth	r3, r3
 80074ac:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 80074ae:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	8889      	ldrh	r1, [r1, #4]
 80074b8:	fb01 f303 	mul.w	r3, r1, r3
 80074bc:	4413      	add	r3, r2
 80074be:	461a      	mov	r2, r3
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	4413      	add	r3, r2
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 80074c8:	7bbb      	ldrb	r3, [r7, #14]
 80074ca:	2201      	movs	r2, #1
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 80074d2:	7bba      	ldrb	r2, [r7, #14]
 80074d4:	7b7b      	ldrb	r3, [r7, #13]
 80074d6:	4013      	ands	r3, r2
 80074d8:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 80074da:	7bbb      	ldrb	r3, [r7, #14]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d004      	beq.n	80074ea <UG_DrawBMP+0x96>
 80074e0:	4b6b      	ldr	r3, [pc, #428]	; (8007690 <UG_DrawBMP+0x23c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80074e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074e8:	e003      	b.n	80074f2 <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 80074ea:	4b69      	ldr	r3, [pc, #420]	; (8007690 <UG_DrawBMP+0x23c>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074f0:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 80074f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074f4:	88fb      	ldrh	r3, [r7, #6]
 80074f6:	4413      	add	r3, r2
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	b218      	sxth	r0, r3
 80074fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80074fe:	88bb      	ldrh	r3, [r7, #4]
 8007500:	4413      	add	r3, r2
 8007502:	b29b      	uxth	r3, r3
 8007504:	b21b      	sxth	r3, r3
 8007506:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe fa0b 	bl	8005924 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 800750e:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007512:	b29b      	uxth	r3, r3
 8007514:	3301      	adds	r3, #1
 8007516:	b29b      	uxth	r3, r3
 8007518:	84bb      	strh	r3, [r7, #36]	; 0x24
 800751a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800751e:	683a      	ldr	r2, [r7, #0]
 8007520:	8892      	ldrh	r2, [r2, #4]
 8007522:	4293      	cmp	r3, r2
 8007524:	dbb0      	blt.n	8007488 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 8007526:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800752a:	b29b      	uxth	r3, r3
 800752c:	3301      	adds	r3, #1
 800752e:	b29b      	uxth	r3, r3
 8007530:	847b      	strh	r3, [r7, #34]	; 0x22
 8007532:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007536:	683a      	ldr	r2, [r7, #0]
 8007538:	88d2      	ldrh	r2, [r2, #6]
 800753a:	4293      	cmp	r3, r2
 800753c:	dba1      	blt.n	8007482 <UG_DrawBMP+0x2e>
         }
      }
     return;
 800753e:	e0a3      	b.n	8007688 <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	7a1b      	ldrb	r3, [r3, #8]
 8007544:	2b10      	cmp	r3, #16
 8007546:	f040 809f 	bne.w	8007688 <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 800754a:	4b51      	ldr	r3, [pc, #324]	; (8007690 <UG_DrawBMP+0x23c>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007552:	f003 0302 	and.w	r3, r3, #2
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 800755a:	4b4d      	ldr	r3, [pc, #308]	; (8007690 <UG_DrawBMP+0x23c>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007560:	461c      	mov	r4, r3
 8007562:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	47a0      	blx	r4
        return;
 8007570:	e08a      	b.n	8007688 <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 8007572:	4b47      	ldr	r3, [pc, #284]	; (8007690 <UG_DrawBMP+0x23c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800757a:	f003 0302 	and.w	r3, r3, #2
 800757e:	2b00      	cmp	r3, #0
 8007580:	d04b      	beq.n	800761a <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 8007582:	4b43      	ldr	r3, [pc, #268]	; (8007690 <UG_DrawBMP+0x23c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007588:	461d      	mov	r5, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	889a      	ldrh	r2, [r3, #4]
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	4413      	add	r3, r2
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29b      	uxth	r3, r3
 8007598:	b21c      	sxth	r4, r3
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	88da      	ldrh	r2, [r3, #6]
 800759e:	88bb      	ldrh	r3, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	b21b      	sxth	r3, r3
 80075aa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80075ae:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80075b2:	4622      	mov	r2, r4
 80075b4:	47a8      	blx	r5
 80075b6:	4603      	mov	r3, r0
 80075b8:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 80075c0:	2300      	movs	r3, #0
 80075c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80075c4:	e022      	b.n	800760c <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 80075c6:	2300      	movs	r3, #0
 80075c8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075ca:	e00d      	b.n	80075e8 <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	1c9a      	adds	r2, r3, #2
 80075d0:	61fa      	str	r2, [r7, #28]
 80075d2:	881a      	ldrh	r2, [r3, #0]
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	4611      	mov	r1, r2
 80075d8:	2001      	movs	r0, #1
 80075da:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 80075dc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	3301      	adds	r3, #1
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075e8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075ec:	683a      	ldr	r2, [r7, #0]
 80075ee:	8892      	ldrh	r2, [r2, #4]
 80075f0:	4293      	cmp	r3, r2
 80075f2:	dbeb      	blt.n	80075cc <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 80075f4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3301      	adds	r3, #1
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 8007600:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007604:	b29b      	uxth	r3, r3
 8007606:	3301      	adds	r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	847b      	strh	r3, [r7, #34]	; 0x22
 800760c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007610:	683a      	ldr	r2, [r7, #0]
 8007612:	88d2      	ldrh	r2, [r2, #6]
 8007614:	4293      	cmp	r3, r2
 8007616:	dbd6      	blt.n	80075c6 <UG_DrawBMP+0x172>
         }
         return;
 8007618:	e036      	b.n	8007688 <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 8007620:	2300      	movs	r3, #0
 8007622:	847b      	strh	r3, [r7, #34]	; 0x22
 8007624:	e028      	b.n	8007678 <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 8007626:	2300      	movs	r3, #0
 8007628:	84bb      	strh	r3, [r7, #36]	; 0x24
 800762a:	e013      	b.n	8007654 <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 800762c:	88fa      	ldrh	r2, [r7, #6]
 800762e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007630:	4413      	add	r3, r2
 8007632:	b29b      	uxth	r3, r3
 8007634:	b218      	sxth	r0, r3
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	1c9a      	adds	r2, r3, #2
 800763a:	61ba      	str	r2, [r7, #24]
 800763c:	881a      	ldrh	r2, [r3, #0]
 800763e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007642:	4619      	mov	r1, r3
 8007644:	f7fe f96e 	bl	8005924 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 8007648:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800764c:	b29b      	uxth	r3, r3
 800764e:	3301      	adds	r3, #1
 8007650:	b29b      	uxth	r3, r3
 8007652:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007654:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	8892      	ldrh	r2, [r2, #4]
 800765c:	4293      	cmp	r3, r2
 800765e:	dbe5      	blt.n	800762c <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 8007660:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007664:	b29b      	uxth	r3, r3
 8007666:	3301      	adds	r3, #1
 8007668:	b29b      	uxth	r3, r3
 800766a:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 800766c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007670:	b29b      	uxth	r3, r3
 8007672:	3301      	adds	r3, #1
 8007674:	b29b      	uxth	r3, r3
 8007676:	847b      	strh	r3, [r7, #34]	; 0x22
 8007678:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	88d2      	ldrh	r2, [r2, #6]
 8007680:	4293      	cmp	r3, r2
 8007682:	dbd0      	blt.n	8007626 <UG_DrawBMP+0x1d2>
 8007684:	e000      	b.n	8007688 <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 8007686:	bf00      	nop
     }
   }
   #endif
}
 8007688:	3728      	adds	r7, #40	; 0x28
 800768a:	46bd      	mov	sp, r7
 800768c:	bdb0      	pop	{r4, r5, r7, pc}
 800768e:	bf00      	nop
 8007690:	200004fc 	.word	0x200004fc

08007694 <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	603b      	str	r3, [r7, #0]
 80076a0:	4613      	mov	r3, r2
 80076a2:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 80076a4:	2300      	movs	r3, #0
 80076a6:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d005      	beq.n	80076ba <UG_WindowCreate+0x26>
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d002      	beq.n	80076ba <UG_WindowCreate+0x26>
 80076b4:	79fb      	ldrb	r3, [r7, #7]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d102      	bne.n	80076c0 <UG_WindowCreate+0x2c>
 80076ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80076be:	e072      	b.n	80077a6 <UG_WindowCreate+0x112>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 80076c0:	2300      	movs	r3, #0
 80076c2:	75fb      	strb	r3, [r7, #23]
 80076c4:	e00d      	b.n	80076e2 <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	015b      	lsls	r3, r3, #5
 80076ca:	68ba      	ldr	r2, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	2203      	movs	r2, #3
 80076d4:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	2200      	movs	r2, #0
 80076da:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	3301      	adds	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
 80076e2:	7dfa      	ldrb	r2, [r7, #23]
 80076e4:	79fb      	ldrb	r3, [r7, #7]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d3ed      	bcc.n	80076c6 <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	79fa      	ldrb	r2, [r7, #7]
 80076ee:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	68ba      	ldr	r2, [r7, #8]
 80076f4:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2202      	movs	r2, #2
 80076fa:	721a      	strb	r2, [r3, #8]
   wnd->fc = C_FORE_COLOR;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	815a      	strh	r2, [r3, #10]
   wnd->bc = C_BACK_COLOR;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f64e 727d 	movw	r2, #61309	; 0xef7d
 8007708:	819a      	strh	r2, [r3, #12]
   wnd->xs = 0;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 8007716:	f7fe fe0d 	bl	8006334 <UG_GetXDim>
 800771a:	4603      	mov	r3, r0
 800771c:	b29b      	uxth	r3, r3
 800771e:	3b01      	subs	r3, #1
 8007720:	b29b      	uxth	r3, r3
 8007722:	b21a      	sxth	r2, r3
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 8007728:	f7fe fe12 	bl	8006350 <UG_GetYDim>
 800772c:	4603      	mov	r3, r0
 800772e:	b29b      	uxth	r3, r3
 8007730:	3b01      	subs	r3, #1
 8007732:	b29b      	uxth	r3, r3
 8007734:	b21a      	sxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	683a      	ldr	r2, [r7, #0]
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	2203      	movs	r2, #3
 8007744:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = gui->font;
 800774c:	4b18      	ldr	r3, [pc, #96]	; (80077b0 <UG_WindowCreate+0x11c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <UG_WindowCreate+0xcc>
 8007754:	4b16      	ldr	r3, [pc, #88]	; (80077b0 <UG_WindowCreate+0x11c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	691a      	ldr	r2, [r3, #16]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	61da      	str	r2, [r3, #28]
 800775e:	e002      	b.n	8007766 <UG_WindowCreate+0xd2>
   else wnd->title.font = NULL;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2202      	movs	r2, #2
 800776a:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2202      	movs	r2, #2
 8007772:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2211      	movs	r2, #17
 800777a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_TITLE_FORE_COLOR;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007784:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_TITLE_BACK_COLOR;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	221f      	movs	r2, #31
 800778a:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_INACTIVE_TITLE_FORE_COLOR;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007792:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_INACTIVE_TITLE_BACK_COLOR;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f248 4210 	movw	r2, #33808	; 0x8410
 800779a:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	220f      	movs	r2, #15
 80077a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200004fc 	.word	0x200004fc

080077b4 <UG_WindowDelete>:

UG_RESULT UG_WindowDelete( UG_WINDOW* wnd )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
   if ( wnd == gui->active_window ) return UG_RESULT_FAIL;
 80077bc:	4b1b      	ldr	r3, [pc, #108]	; (800782c <UG_WindowDelete+0x78>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d102      	bne.n	80077ce <UG_WindowDelete+0x1a>
 80077c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80077cc:	e027      	b.n	800781e <UG_WindowDelete+0x6a>

   /* Only delete valid windows */
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d022      	beq.n	800781a <UG_WindowDelete+0x66>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	7a1b      	ldrb	r3, [r3, #8]
 80077d8:	f003 0302 	and.w	r3, r3, #2
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d01c      	beq.n	800781a <UG_WindowDelete+0x66>
   {
      wnd->state = 0;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	721a      	strb	r2, [r3, #8]
      wnd->cb = NULL;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	631a      	str	r2, [r3, #48]	; 0x30
      wnd->objcnt = 0;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2200      	movs	r2, #0
 80077f0:	701a      	strb	r2, [r3, #0]
      wnd->objlst = NULL;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
      wnd->xs = 0;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	81da      	strh	r2, [r3, #14]
      wnd->ys = 0;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2200      	movs	r2, #0
 8007802:	821a      	strh	r2, [r3, #16]
      wnd->xe = 0;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	825a      	strh	r2, [r3, #18]
      wnd->ye = 0;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	829a      	strh	r2, [r3, #20]
      wnd->style = 0;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	759a      	strb	r2, [r3, #22]
      return UG_RESULT_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	e001      	b.n	800781e <UG_WindowDelete+0x6a>
   }
   return UG_RESULT_FAIL;
 800781a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800781e:	4618      	mov	r0, r3
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr
 800782a:	bf00      	nop
 800782c:	200004fc 	.word	0x200004fc

08007830 <UG_WindowShow>:

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 8007830:	b480      	push	{r7}
 8007832:	b083      	sub	sp, #12
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d013      	beq.n	8007866 <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	7a1b      	ldrb	r3, [r3, #8]
 8007842:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8007846:	b2da      	uxtb	r2, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	7a1b      	ldrb	r3, [r3, #8]
 8007850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007854:	b2da      	uxtb	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 800785a:	4b07      	ldr	r3, [pc, #28]	; (8007878 <UG_WindowShow+0x48>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	605a      	str	r2, [r3, #4]
      return UG_RESULT_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	e001      	b.n	800786a <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 8007866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr
 8007876:	bf00      	nop
 8007878:	200004fc 	.word	0x200004fc

0800787c <UG_WindowHide>:

UG_RESULT UG_WindowHide( UG_WINDOW* wnd )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d060      	beq.n	800794c <UG_WindowHide+0xd0>
   {
      if ( wnd == gui->active_window )
 800788a:	4b33      	ldr	r3, [pc, #204]	; (8007958 <UG_WindowHide+0xdc>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	429a      	cmp	r2, r3
 8007894:	d155      	bne.n	8007942 <UG_WindowHide+0xc6>
      {
         /* Is there an old window which just lost the focus? */
         if ( (gui->last_window != NULL) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007896:	4b30      	ldr	r3, [pc, #192]	; (8007958 <UG_WindowHide+0xdc>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68db      	ldr	r3, [r3, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d039      	beq.n	8007914 <UG_WindowHide+0x98>
 80078a0:	4b2d      	ldr	r3, [pc, #180]	; (8007958 <UG_WindowHide+0xdc>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	7a1b      	ldrb	r3, [r3, #8]
 80078a8:	f003 0308 	and.w	r3, r3, #8
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d031      	beq.n	8007914 <UG_WindowHide+0x98>
         {
            if ( (gui->last_window->xs > wnd->xs) || (gui->last_window->ys > wnd->ys) || (gui->last_window->xe < wnd->xe) || (gui->last_window->ye < wnd->ye) )
 80078b0:	4b29      	ldr	r3, [pc, #164]	; (8007958 <UG_WindowHide+0xdc>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	dc1d      	bgt.n	8007900 <UG_WindowHide+0x84>
 80078c4:	4b24      	ldr	r3, [pc, #144]	; (8007958 <UG_WindowHide+0xdc>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	dc13      	bgt.n	8007900 <UG_WindowHide+0x84>
 80078d8:	4b1f      	ldr	r3, [pc, #124]	; (8007958 <UG_WindowHide+0xdc>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	db09      	blt.n	8007900 <UG_WindowHide+0x84>
 80078ec:	4b1a      	ldr	r3, [pc, #104]	; (8007958 <UG_WindowHide+0xdc>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80078fc:	429a      	cmp	r2, r3
 80078fe:	da02      	bge.n	8007906 <UG_WindowHide+0x8a>
            {
               _UG_WindowClear( wnd );
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fc3f 	bl	8008184 <_UG_WindowClear>
            }
            gui->next_window = gui->last_window;
 8007906:	4b14      	ldr	r3, [pc, #80]	; (8007958 <UG_WindowHide+0xdc>)
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	4b13      	ldr	r3, [pc, #76]	; (8007958 <UG_WindowHide+0xdc>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68d2      	ldr	r2, [r2, #12]
 8007910:	605a      	str	r2, [r3, #4]
 8007912:	e019      	b.n	8007948 <UG_WindowHide+0xcc>
         }
         else
         {
            gui->active_window->state &= ~WND_STATE_VISIBLE;
 8007914:	4b10      	ldr	r3, [pc, #64]	; (8007958 <UG_WindowHide+0xdc>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	7a1a      	ldrb	r2, [r3, #8]
 800791c:	4b0e      	ldr	r3, [pc, #56]	; (8007958 <UG_WindowHide+0xdc>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f022 0208 	bic.w	r2, r2, #8
 8007926:	b2d2      	uxtb	r2, r2
 8007928:	721a      	strb	r2, [r3, #8]
            gui->active_window->state |= WND_STATE_UPDATE;
 800792a:	4b0b      	ldr	r3, [pc, #44]	; (8007958 <UG_WindowHide+0xdc>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	7a1a      	ldrb	r2, [r3, #8]
 8007932:	4b09      	ldr	r3, [pc, #36]	; (8007958 <UG_WindowHide+0xdc>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f042 0220 	orr.w	r2, r2, #32
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	721a      	strb	r2, [r3, #8]
 8007940:	e002      	b.n	8007948 <UG_WindowHide+0xcc>
         }
      }
      else
      {
         /* If the old window is visible, clear it! */
         _UG_WindowClear( wnd );
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fc1e 	bl	8008184 <_UG_WindowClear>
      }
      return UG_RESULT_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	e001      	b.n	8007950 <UG_WindowHide+0xd4>
   }
   return UG_RESULT_FAIL;
 800794c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007950:	4618      	mov	r0, r3
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}
 8007958:	200004fc 	.word	0x200004fc

0800795c <UG_WindowResize>:

UG_RESULT UG_WindowResize( UG_WINDOW* wnd, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 800795c:	b590      	push	{r4, r7, lr}
 800795e:	b089      	sub	sp, #36	; 0x24
 8007960:	af02      	add	r7, sp, #8
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	461a      	mov	r2, r3
 800796a:	4603      	mov	r3, r0
 800796c:	817b      	strh	r3, [r7, #10]
 800796e:	460b      	mov	r3, r1
 8007970:	813b      	strh	r3, [r7, #8]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
   UG_S16 pos;
   UG_S16 xmax,ymax;

   xmax = UG_GetXDim()-1;
 8007976:	f7fe fcdd 	bl	8006334 <UG_GetXDim>
 800797a:	4603      	mov	r3, r0
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29b      	uxth	r3, r3
 8007982:	82fb      	strh	r3, [r7, #22]
   ymax = UG_GetYDim()-1;
 8007984:	f7fe fce4 	bl	8006350 <UG_GetYDim>
 8007988:	4603      	mov	r3, r0
 800798a:	b29b      	uxth	r3, r3
 800798c:	3b01      	subs	r3, #1
 800798e:	b29b      	uxth	r3, r3
 8007990:	82bb      	strh	r3, [r7, #20]

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f000 80cb 	beq.w	8007b30 <UG_WindowResize+0x1d4>
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	7a1b      	ldrb	r3, [r3, #8]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	f000 80c4 	beq.w	8007b30 <UG_WindowResize+0x1d4>
   {
      /* Do some checks... */
      if ( (xs < 0) || (ys < 0) ) return UG_RESULT_FAIL;
 80079a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	db03      	blt.n	80079b8 <UG_WindowResize+0x5c>
 80079b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	da02      	bge.n	80079be <UG_WindowResize+0x62>
 80079b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079bc:	e0ba      	b.n	8007b34 <UG_WindowResize+0x1d8>
      if ( (xe > xmax) || (ye > ymax) ) return UG_RESULT_FAIL;
 80079be:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80079c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	dc05      	bgt.n	80079d6 <UG_WindowResize+0x7a>
 80079ca:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80079ce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	dd02      	ble.n	80079dc <UG_WindowResize+0x80>
 80079d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079da:	e0ab      	b.n	8007b34 <UG_WindowResize+0x1d8>
      pos = xe-xs;
 80079dc:	88fa      	ldrh	r2, [r7, #6]
 80079de:	897b      	ldrh	r3, [r7, #10]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 80079e6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80079ea:	2b09      	cmp	r3, #9
 80079ec:	dc02      	bgt.n	80079f4 <UG_WindowResize+0x98>
 80079ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079f2:	e09f      	b.n	8007b34 <UG_WindowResize+0x1d8>
      pos = ye-ys;
 80079f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80079f6:	893b      	ldrh	r3, [r7, #8]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 80079fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007a02:	2b09      	cmp	r3, #9
 8007a04:	dc02      	bgt.n	8007a0c <UG_WindowResize+0xb0>
 8007a06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a0a:	e093      	b.n	8007b34 <UG_WindowResize+0x1d8>

      /* ... and if everything is OK move the window! */
      wnd->xs = xs;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	897a      	ldrh	r2, [r7, #10]
 8007a10:	81da      	strh	r2, [r3, #14]
      wnd->ys = ys;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	893a      	ldrh	r2, [r7, #8]
 8007a16:	821a      	strh	r2, [r3, #16]
      wnd->xe = xe;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	825a      	strh	r2, [r3, #18]
      wnd->ye = ye;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007a22:	829a      	strh	r2, [r3, #20]

      if ( (wnd->state & WND_STATE_VISIBLE) && (gui->active_window == wnd) )
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	7a1b      	ldrb	r3, [r3, #8]
 8007a28:	f003 0308 	and.w	r3, r3, #8
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d07d      	beq.n	8007b2c <UG_WindowResize+0x1d0>
 8007a30:	4b42      	ldr	r3, [pc, #264]	; (8007b3c <UG_WindowResize+0x1e0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d177      	bne.n	8007b2c <UG_WindowResize+0x1d0>
      {
         if ( wnd->ys ) UG_FillFrame(0, 0, xmax,wnd->ys-1,gui->desktop_color);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d011      	beq.n	8007a6a <UG_WindowResize+0x10e>
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	b219      	sxth	r1, r3
 8007a54:	4b39      	ldr	r3, [pc, #228]	; (8007b3c <UG_WindowResize+0x1e0>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007a5a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	460b      	mov	r3, r1
 8007a62:	2100      	movs	r1, #0
 8007a64:	2000      	movs	r0, #0
 8007a66:	f7fd fe2d 	bl	80056c4 <UG_FillFrame>
         pos = wnd->ye+1;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	3301      	adds	r3, #1
 8007a74:	b29b      	uxth	r3, r3
 8007a76:	827b      	strh	r3, [r7, #18]
         if ( !(pos > ymax) ) UG_FillFrame(0, pos, xmax,ymax,gui->desktop_color);
 8007a78:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007a7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a80:	429a      	cmp	r2, r3
 8007a82:	dc0d      	bgt.n	8007aa0 <UG_WindowResize+0x144>
 8007a84:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <UG_WindowResize+0x1e0>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007a8a:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007a8e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a92:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007a96:	9300      	str	r3, [sp, #0]
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	f7fd fe12 	bl	80056c4 <UG_FillFrame>
         if ( wnd->xs ) UG_FillFrame(0, wnd->ys, wnd->xs-1,wnd->ye,gui->desktop_color);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d014      	beq.n	8007ad4 <UG_WindowResize+0x178>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	b21a      	sxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007ac4:	4b1d      	ldr	r3, [pc, #116]	; (8007b3c <UG_WindowResize+0x1e0>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	4603      	mov	r3, r0
 8007ace:	2000      	movs	r0, #0
 8007ad0:	f7fd fdf8 	bl	80056c4 <UG_FillFrame>
         pos = wnd->xe+1;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3301      	adds	r3, #1
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	827b      	strh	r3, [r7, #18]
         if ( !(pos > xmax) ) UG_FillFrame(pos, wnd->ys,xmax,wnd->ye,gui->desktop_color);
 8007ae2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007ae6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	dc10      	bgt.n	8007b10 <UG_WindowResize+0x1b4>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007afa:	4b10      	ldr	r3, [pc, #64]	; (8007b3c <UG_WindowResize+0x1e0>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007b00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007b04:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8007b08:	9300      	str	r3, [sp, #0]
 8007b0a:	4623      	mov	r3, r4
 8007b0c:	f7fd fdda 	bl	80056c4 <UG_FillFrame>

         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	7a1b      	ldrb	r3, [r3, #8]
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	b2da      	uxtb	r2, r3
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	721a      	strb	r2, [r3, #8]
         wnd->state |= WND_STATE_UPDATE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	7a1b      	ldrb	r3, [r3, #8]
 8007b22:	f043 0320 	orr.w	r3, r3, #32
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	e001      	b.n	8007b34 <UG_WindowResize+0x1d8>
   }
   return UG_RESULT_FAIL;
 8007b30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	371c      	adds	r7, #28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd90      	pop	{r4, r7, pc}
 8007b3c:	200004fc 	.word	0x200004fc

08007b40 <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8007b40:	b480      	push	{r7}
 8007b42:	b083      	sub	sp, #12
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d011      	beq.n	8007b74 <UG_WindowSetTitleText+0x34>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	7a1b      	ldrb	r3, [r3, #8]
 8007b54:	f003 0302 	and.w	r3, r3, #2
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d00b      	beq.n	8007b74 <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	7a1b      	ldrb	r3, [r3, #8]
 8007b66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	e001      	b.n	8007b78 <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	370c      	adds	r7, #12
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b82:	4770      	bx	lr

08007b84 <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, UG_FONT* font )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d02a      	beq.n	8007bea <UG_WindowSetTitleTextFont+0x66>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	7a1b      	ldrb	r3, [r3, #8]
 8007b98:	f003 0302 	and.w	r3, r3, #2
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d024      	beq.n	8007bea <UG_WindowSetTitleTextFont+0x66>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	7a1b      	ldrb	r3, [r3, #8]
 8007ba4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007ba8:	b2da      	uxtb	r2, r3
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	683a      	ldr	r2, [r7, #0]
 8007bb2:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (UG_GetFontHeight(font) + 1) )
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bba:	461a      	mov	r2, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	3302      	adds	r3, #2
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	dc0e      	bgt.n	8007be6 <UG_WindowSetTitleTextFont+0x62>
      {
         wnd->title.height = UG_GetFontWidth(font) + 2;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	3301      	adds	r3, #1
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	3302      	adds	r3, #2
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	7a1b      	ldrb	r3, [r3, #8]
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007be6:	2300      	movs	r3, #0
 8007be8:	e001      	b.n	8007bee <UG_WindowSetTitleTextFont+0x6a>
   }
   return UG_RESULT_FAIL;
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <UG_WindowSetTitleHeight>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleHeight( UG_WINDOW* wnd, UG_U8 height )
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b083      	sub	sp, #12
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d019      	beq.n	8007c40 <UG_WindowSetTitleHeight+0x46>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	7a1b      	ldrb	r3, [r3, #8]
 8007c10:	f003 0302 	and.w	r3, r3, #2
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d013      	beq.n	8007c40 <UG_WindowSetTitleHeight+0x46>
   {
      wnd->title.height = height;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	7a1b      	ldrb	r3, [r3, #8]
 8007c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	721a      	strb	r2, [r3, #8]
      wnd->state |= WND_STATE_UPDATE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	7a1b      	ldrb	r3, [r3, #8]
 8007c32:	f043 0320 	orr.w	r3, r3, #32
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	e001      	b.n	8007c44 <UG_WindowSetTitleHeight+0x4a>
   }
   return UG_RESULT_FAIL;
 8007c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <UG_WindowSetXStart>:

UG_RESULT UG_WindowSetXStart( UG_WINDOW* wnd, UG_S16 xs )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af02      	add	r7, sp, #8
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	460b      	mov	r3, r1
 8007c5a:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d022      	beq.n	8007ca8 <UG_WindowSetXStart+0x58>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	7a1b      	ldrb	r3, [r3, #8]
 8007c66:	f003 0302 	and.w	r3, r3, #2
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d01c      	beq.n	8007ca8 <UG_WindowSetXStart+0x58>
   {
      wnd->xs = xs;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	887a      	ldrh	r2, [r7, #2]
 8007c72:	81da      	strh	r2, [r3, #14]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	f7ff fe63 	bl	800795c <UG_WindowResize>
 8007c96:	4603      	mov	r3, r0
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c9c:	d102      	bne.n	8007ca4 <UG_WindowSetXStart+0x54>
 8007c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca2:	e003      	b.n	8007cac <UG_WindowSetXStart+0x5c>
      return UG_RESULT_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e001      	b.n	8007cac <UG_WindowSetXStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <UG_WindowSetYStart>:

UG_RESULT UG_WindowSetYStart( UG_WINDOW* wnd, UG_S16 ys )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af02      	add	r7, sp, #8
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d022      	beq.n	8007d0c <UG_WindowSetYStart+0x58>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	7a1b      	ldrb	r3, [r3, #8]
 8007cca:	f003 0302 	and.w	r3, r3, #2
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d01c      	beq.n	8007d0c <UG_WindowSetYStart+0x58>
   {
      wnd->ys = ys;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	887a      	ldrh	r2, [r7, #2]
 8007cd6:	821a      	strh	r2, [r3, #16]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007cf0:	9300      	str	r3, [sp, #0]
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f7ff fe31 	bl	800795c <UG_WindowResize>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d00:	d102      	bne.n	8007d08 <UG_WindowSetYStart+0x54>
 8007d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d06:	e003      	b.n	8007d10 <UG_WindowSetYStart+0x5c>
      return UG_RESULT_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	e001      	b.n	8007d10 <UG_WindowSetYStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <UG_WindowSetXEnd>:

UG_RESULT UG_WindowSetXEnd( UG_WINDOW* wnd, UG_S16 xe )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af02      	add	r7, sp, #8
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	460b      	mov	r3, r1
 8007d22:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d022      	beq.n	8007d70 <UG_WindowSetXEnd+0x58>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	7a1b      	ldrb	r3, [r3, #8]
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d01c      	beq.n	8007d70 <UG_WindowSetXEnd+0x58>
   {
      wnd->xe = xe;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	887a      	ldrh	r2, [r7, #2]
 8007d3a:	825a      	strh	r2, [r3, #18]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d54:	9300      	str	r3, [sp, #0]
 8007d56:	4603      	mov	r3, r0
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff fdff 	bl	800795c <UG_WindowResize>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d64:	d102      	bne.n	8007d6c <UG_WindowSetXEnd+0x54>
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d6a:	e003      	b.n	8007d74 <UG_WindowSetXEnd+0x5c>
      return UG_RESULT_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	e001      	b.n	8007d74 <UG_WindowSetXEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <UG_WindowSetYEnd>:

UG_RESULT UG_WindowSetYEnd( UG_WINDOW* wnd, UG_S16 ye )
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af02      	add	r7, sp, #8
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d022      	beq.n	8007dd4 <UG_WindowSetYEnd+0x58>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	7a1b      	ldrb	r3, [r3, #8]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d01c      	beq.n	8007dd4 <UG_WindowSetYEnd+0x58>
   {
      wnd->ye = ye;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	887a      	ldrh	r2, [r7, #2]
 8007d9e:	829a      	strh	r2, [r3, #20]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f7ff fdcd 	bl	800795c <UG_WindowResize>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dc8:	d102      	bne.n	8007dd0 <UG_WindowSetYEnd+0x54>
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007dce:	e003      	b.n	8007dd8 <UG_WindowSetYEnd+0x5c>
      return UG_RESULT_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	e001      	b.n	8007dd8 <UG_WindowSetYEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8007de0:	b480      	push	{r7}
 8007de2:	b083      	sub	sp, #12
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d05a      	beq.n	8007ea6 <UG_WindowGetArea+0xc6>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	7a1b      	ldrb	r3, [r3, #8]
 8007df4:	f003 0302 	and.w	r3, r3, #2
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d054      	beq.n	8007ea6 <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7d9b      	ldrb	r3, [r3, #22]
 8007e28:	f003 0301 	and.w	r3, r3, #1
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d023      	beq.n	8007e78 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	3303      	adds	r3, #3
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	b21a      	sxth	r2, r3
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3303      	adds	r3, #3
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	b21a      	sxth	r2, r3
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	3b03      	subs	r3, #3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	b21a      	sxth	r2, r3
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	3b03      	subs	r3, #3
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	b21a      	sxth	r2, r3
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	7d9b      	ldrb	r3, [r3, #22]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e8a:	b29a      	uxth	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	4413      	add	r3, r2
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	3301      	adds	r3, #1
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	b21a      	sxth	r2, r3
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	e001      	b.n	8007eaa <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
	...

08007eb8 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b08f      	sub	sp, #60	; 0x3c
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 809a 	beq.w	8007ffc <_UG_WindowDrawTitle+0x144>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	7a1b      	ldrb	r3, [r3, #8]
 8007ecc:	f003 0302 	and.w	r3, r3, #2
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f000 8093 	beq.w	8007ffc <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	89db      	ldrh	r3, [r3, #14]
 8007eda:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8a1b      	ldrh	r3, [r3, #16]
 8007ee0:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	8a5b      	ldrh	r3, [r3, #18]
 8007ee6:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	8a9b      	ldrh	r3, [r3, #20]
 8007eec:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	7d9b      	ldrb	r3, [r3, #22]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00f      	beq.n	8007f1a <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8007efa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007efc:	3303      	adds	r3, #3
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8007f02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f04:	3303      	adds	r3, #3
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8007f0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f0c:	3b03      	subs	r3, #3
 8007f0e:	b29b      	uxth	r3, r3
 8007f10:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8007f12:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f14:	3b03      	subs	r3, #3
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8007f1a:	4b3b      	ldr	r3, [pc, #236]	; (8008008 <_UG_WindowDrawTitle+0x150>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d106      	bne.n	8007f34 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f2a:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f30:	83bb      	strh	r3, [r7, #28]
 8007f32:	e005      	b.n	8007f40 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f38:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3e:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f46:	b29a      	uxth	r2, r3
 8007f48:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f4a:	4413      	add	r3, r2
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	b21c      	sxth	r4, r3
 8007f54:	8bfb      	ldrh	r3, [r7, #30]
 8007f56:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007f5a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8007f5e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4623      	mov	r3, r4
 8007f66:	f7fd fbad 	bl	80056c4 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8007f76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f78:	3303      	adds	r3, #3
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	b21b      	sxth	r3, r3
 8007f7e:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8007f80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f82:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8007f84:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f86:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f8e:	b29a      	uxth	r2, r3
 8007f90:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f92:	4413      	add	r3, r2
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	b21b      	sxth	r3, r3
 8007f9c:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007fa4:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8007fb8:	b21b      	sxth	r3, r3
 8007fba:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8007fbc:	f107 030c 	add.w	r3, r7, #12
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fe fec5 	bl	8006d50 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fcc:	b29a      	uxth	r2, r3
 8007fce:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fd0:	4413      	add	r3, r2
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	b219      	sxth	r1, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007fdc:	b29a      	uxth	r2, r3
 8007fde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007fe0:	4413      	add	r3, r2
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	b21b      	sxth	r3, r3
 8007fe6:	f649 5413 	movw	r4, #40211	; 0x9d13
 8007fea:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007fee:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007ff2:	9400      	str	r4, [sp, #0]
 8007ff4:	f7fd fe70 	bl	8005cd8 <UG_DrawLine>
      return UG_RESULT_OK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e001      	b.n	8008000 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8007ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008000:	4618      	mov	r0, r3
 8008002:	3734      	adds	r7, #52	; 0x34
 8008004:	46bd      	mov	sp, r7
 8008006:	bd90      	pop	{r4, r7, pc}
 8008008:	200004fc 	.word	0x200004fc

0800800c <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 800800c:	b590      	push	{r4, r7, lr}
 800800e:	b089      	sub	sp, #36	; 0x24
 8008010:	af02      	add	r7, sp, #8
 8008012:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	89db      	ldrh	r3, [r3, #14]
 8008018:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	8a1b      	ldrh	r3, [r3, #16]
 800801e:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	8a5b      	ldrh	r3, [r3, #18]
 8008024:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	8a9b      	ldrh	r3, [r3, #20]
 800802a:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	7a1b      	ldrb	r3, [r3, #8]
 8008030:	f023 0320 	bic.w	r3, r3, #32
 8008034:	b2da      	uxtb	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	7a1b      	ldrb	r3, [r3, #8]
 800803e:	f003 0308 	and.w	r3, r3, #8
 8008042:	2b00      	cmp	r3, #0
 8008044:	f000 8084 	beq.w	8008150 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	7d9b      	ldrb	r3, [r3, #22]
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d021      	beq.n	8008098 <_UG_WindowUpdate+0x8c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	7a1b      	ldrb	r3, [r3, #8]
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d11b      	bne.n	8008098 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8008060:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008064:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008068:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800806c:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8008070:	4c42      	ldr	r4, [pc, #264]	; (800817c <_UG_WindowUpdate+0x170>)
 8008072:	9400      	str	r4, [sp, #0]
 8008074:	f7fe ffbe 	bl	8006ff4 <_UG_DrawObjectFrame>
         xs+=3;
 8008078:	8abb      	ldrh	r3, [r7, #20]
 800807a:	3303      	adds	r3, #3
 800807c:	b29b      	uxth	r3, r3
 800807e:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8008080:	8a7b      	ldrh	r3, [r7, #18]
 8008082:	3303      	adds	r3, #3
 8008084:	b29b      	uxth	r3, r3
 8008086:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8008088:	8a3b      	ldrh	r3, [r7, #16]
 800808a:	3b03      	subs	r3, #3
 800808c:	b29b      	uxth	r3, r3
 800808e:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	3b03      	subs	r3, #3
 8008094:	b29b      	uxth	r3, r3
 8008096:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	7d9b      	ldrb	r3, [r3, #22]
 800809c:	f003 0302 	and.w	r3, r3, #2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01a      	beq.n	80080da <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f7ff ff07 	bl	8007eb8 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80080b0:	b29a      	uxth	r2, r3
 80080b2:	8a7b      	ldrh	r3, [r7, #18]
 80080b4:	4413      	add	r3, r2
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	3301      	adds	r3, #1
 80080ba:	b29b      	uxth	r3, r3
 80080bc:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	7a1b      	ldrb	r3, [r3, #8]
 80080c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	7a1b      	ldrb	r3, [r3, #8]
 80080ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	721a      	strb	r2, [r3, #8]
            return;
 80080d8:	e04d      	b.n	8008176 <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	899b      	ldrh	r3, [r3, #12]
 80080de:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 80080e2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80080e6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80080ea:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	4623      	mov	r3, r4
 80080f2:	f7fd fae7 	bl	80056c4 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 80080fc:	2300      	movs	r3, #0
 80080fe:	82fb      	strh	r3, [r7, #22]
 8008100:	e021      	b.n	8008146 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	8afb      	ldrh	r3, [r7, #22]
 8008108:	015b      	lsls	r3, r3, #5
 800810a:	4413      	add	r3, r2
 800810c:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	2b00      	cmp	r3, #0
 8008118:	d112      	bne.n	8008140 <_UG_WindowUpdate+0x134>
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	f003 0302 	and.w	r3, r3, #2
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00c      	beq.n	8008140 <_UG_WindowUpdate+0x134>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	f003 0308 	and.w	r3, r3, #8
 800812e:	2b00      	cmp	r3, #0
 8008130:	d006      	beq.n	8008140 <_UG_WindowUpdate+0x134>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800813a:	b2da      	uxtb	r2, r3
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8008140:	8afb      	ldrh	r3, [r7, #22]
 8008142:	3301      	adds	r3, #1
 8008144:	82fb      	strh	r3, [r7, #22]
 8008146:	8afa      	ldrh	r2, [r7, #22]
 8008148:	89bb      	ldrh	r3, [r7, #12]
 800814a:	429a      	cmp	r2, r3
 800814c:	d3d9      	bcc.n	8008102 <_UG_WindowUpdate+0xf6>
 800814e:	e012      	b.n	8008176 <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8008168:	4b05      	ldr	r3, [pc, #20]	; (8008180 <_UG_WindowUpdate+0x174>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	4623      	mov	r3, r4
 8008172:	f7fd faa7 	bl	80056c4 <UG_FillFrame>
   }
}
 8008176:	371c      	adds	r7, #28
 8008178:	46bd      	mov	sp, r7
 800817a:	bd90      	pop	{r4, r7, pc}
 800817c:	08020924 	.word	0x08020924
 8008180:	200004fc 	.word	0x200004fc

08008184 <_UG_WindowClear>:

static UG_RESULT _UG_WindowClear( UG_WINDOW* wnd )
{
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	b085      	sub	sp, #20
 8008188:	af02      	add	r7, sp, #8
 800818a:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d045      	beq.n	800821e <_UG_WindowClear+0x9a>
   {
      if (wnd->state & WND_STATE_VISIBLE)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	7a1b      	ldrb	r3, [r3, #8]
 8008196:	f003 0308 	and.w	r3, r3, #8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d03d      	beq.n	800821a <_UG_WindowClear+0x96>
      {
         wnd->state &= ~WND_STATE_VISIBLE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	7a1b      	ldrb	r3, [r3, #8]
 80081a2:	f023 0308 	bic.w	r3, r3, #8
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	721a      	strb	r2, [r3, #8]
         UG_FillFrame( wnd->xs, wnd->ys, wnd->xe, wnd->ye, gui->desktop_color );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80081c4:	4b19      	ldr	r3, [pc, #100]	; (800822c <_UG_WindowClear+0xa8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80081ca:	9300      	str	r3, [sp, #0]
 80081cc:	4623      	mov	r3, r4
 80081ce:	f7fd fa79 	bl	80056c4 <UG_FillFrame>

         if ( wnd != gui->active_window )
 80081d2:	4b16      	ldr	r3, [pc, #88]	; (800822c <_UG_WindowClear+0xa8>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	689b      	ldr	r3, [r3, #8]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d01d      	beq.n	800821a <_UG_WindowClear+0x96>
         {
            /* If the current window is visible, update it! */
            if ( gui->active_window->state & WND_STATE_VISIBLE )
 80081de:	4b13      	ldr	r3, [pc, #76]	; (800822c <_UG_WindowClear+0xa8>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	7a1b      	ldrb	r3, [r3, #8]
 80081e6:	f003 0308 	and.w	r3, r3, #8
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d015      	beq.n	800821a <_UG_WindowClear+0x96>
            {
               gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 80081ee:	4b0f      	ldr	r3, [pc, #60]	; (800822c <_UG_WindowClear+0xa8>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	7a1a      	ldrb	r2, [r3, #8]
 80081f6:	4b0d      	ldr	r3, [pc, #52]	; (800822c <_UG_WindowClear+0xa8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008200:	b2d2      	uxtb	r2, r2
 8008202:	721a      	strb	r2, [r3, #8]
               gui->active_window->state |= WND_STATE_UPDATE;
 8008204:	4b09      	ldr	r3, [pc, #36]	; (800822c <_UG_WindowClear+0xa8>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	7a1a      	ldrb	r2, [r3, #8]
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <_UG_WindowClear+0xa8>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f042 0220 	orr.w	r2, r2, #32
 8008216:	b2d2      	uxtb	r2, r2
 8008218:	721a      	strb	r2, [r3, #8]
            }
         }
      }
      return UG_RESULT_OK;
 800821a:	2300      	movs	r3, #0
 800821c:	e001      	b.n	8008222 <_UG_WindowClear+0x9e>
   }
   return UG_RESULT_FAIL;
 800821e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8008222:	4618      	mov	r0, r3
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	bd90      	pop	{r4, r7, pc}
 800822a:	bf00      	nop
 800822c:	200004fc 	.word	0x200004fc

08008230 <UG_ButtonCreate>:
const UG_COLOR pal_button_released[] = {
    C_PAL_BUTTON_RELEASED
};

UG_RESULT UG_ButtonCreate( UG_WINDOW* wnd, UG_BUTTON* btn, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b086      	sub	sp, #24
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4611      	mov	r1, r2
 800823c:	461a      	mov	r2, r3
 800823e:	460b      	mov	r3, r1
 8008240:	71fb      	strb	r3, [r7, #7]
 8008242:	4613      	mov	r3, r2
 8008244:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7fe fff5 	bl	8007236 <_UG_GetFreeObject>
 800824c:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <UG_ButtonCreate+0x2a>
 8008254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008258:	e062      	b.n	8008320 <UG_ButtonCreate+0xf0>

   /* Initialize object-specific parameters */
   btn->state = BTN_STATE_RELEASED;
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]
   btn->bc = wnd->bc;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	899a      	ldrh	r2, [r3, #12]
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	809a      	strh	r2, [r3, #4]
   btn->fc = wnd->fc;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	895a      	ldrh	r2, [r3, #10]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	805a      	strh	r2, [r3, #2]
   btn->abc = wnd->bc;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	899a      	ldrh	r2, [r3, #12]
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	811a      	strh	r2, [r3, #8]
   btn->afc = wnd->fc;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	895a      	ldrh	r2, [r3, #10]
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	80da      	strh	r2, [r3, #6]
   btn->style = BTN_STYLE_3D;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	2201      	movs	r2, #1
 8008284:	705a      	strb	r2, [r3, #1]
   btn->align = ALIGN_CENTER;
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	2212      	movs	r2, #18
 800828a:	741a      	strb	r2, [r3, #16]
   btn->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 800828c:	f7fd f9da 	bl	8005644 <UG_GetGUI>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d004      	beq.n	80082a0 <UG_ButtonCreate+0x70>
 8008296:	f7fd f9d5 	bl	8005644 <UG_GetGUI>
 800829a:	4603      	mov	r3, r0
 800829c:	691b      	ldr	r3, [r3, #16]
 800829e:	e000      	b.n	80082a2 <UG_ButtonCreate+0x72>
 80082a0:	2300      	movs	r3, #0
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	60d3      	str	r3, [r2, #12]
   btn->str = "-";
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <UG_ButtonCreate+0xf8>)
 80082aa:	615a      	str	r2, [r3, #20]

   /* Initialize standard object parameters */
   obj->update = _UG_ButtonUpdate;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	4a1f      	ldr	r2, [pc, #124]	; (800832c <UG_ButtonCreate+0xfc>)
 80082b0:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_BUTTON;
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2201      	movs	r2, #1
 80082b6:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	2200      	movs	r2, #0
 80082bc:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	88ba      	ldrh	r2, [r7, #4]
 80082c2:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	8c3a      	ldrh	r2, [r7, #32]
 80082c8:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80082ce:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80082d4:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082dc:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082e4:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082ec:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082f4:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	79fa      	ldrb	r2, [r7, #7]
 80082fa:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	781b      	ldrb	r3, [r3, #0]
 8008300:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008304:	b2da      	uxtb	r2, r3
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	701a      	strb	r2, [r3, #0]
   #ifdef UGUI_USE_TOUCH
   obj->state |= OBJ_STATE_TOUCH_ENABLE;
   #endif
   obj->data = (void*)btn;
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	f023 0301 	bic.w	r3, r3, #1
 8008318:	b2da      	uxtb	r2, r3
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3718      	adds	r7, #24
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	0800d674 	.word	0x0800d674
 800832c:	0800858d 	.word	0x0800858d

08008330 <UG_ButtonSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b084      	sub	sp, #16
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	70fb      	strb	r3, [r7, #3]
 800833c:	4613      	mov	r3, r2
 800833e:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	461a      	mov	r2, r3
 800834c:	2101      	movs	r1, #1
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7fe fe15 	bl	8006f7e <_UG_SearchObject>
 8008354:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <UG_ButtonSetForeColor+0x32>
 800835c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008360:	e00d      	b.n	800837e <UG_ButtonSetForeColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	69db      	ldr	r3, [r3, #28]
 8008366:	60bb      	str	r3, [r7, #8]
   btn->fc = fc;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	883a      	ldrh	r2, [r7, #0]
 800836c:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	781b      	ldrb	r3, [r3, #0]
 8008372:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008376:	b2da      	uxtb	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UG_ButtonSetBackColor>:

UG_RESULT UG_ButtonSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
 8008392:	4613      	mov	r3, r2
 8008394:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008396:	2300      	movs	r3, #0
 8008398:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 800839a:	2300      	movs	r3, #0
 800839c:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800839e:	78fb      	ldrb	r3, [r7, #3]
 80083a0:	461a      	mov	r2, r3
 80083a2:	2101      	movs	r1, #1
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7fe fdea 	bl	8006f7e <_UG_SearchObject>
 80083aa:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d102      	bne.n	80083b8 <UG_ButtonSetBackColor+0x32>
 80083b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083b6:	e00d      	b.n	80083d4 <UG_ButtonSetBackColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	69db      	ldr	r3, [r3, #28]
 80083bc:	60bb      	str	r3, [r7, #8]
   btn->bc = bc;
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	883a      	ldrh	r2, [r7, #0]
 80083c2:	809a      	strh	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80083d2:	2300      	movs	r3, #0
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <UG_ButtonSetText>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b086      	sub	sp, #24
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	60f8      	str	r0, [r7, #12]
 80083e4:	460b      	mov	r3, r1
 80083e6:	607a      	str	r2, [r7, #4]
 80083e8:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 80083ea:	2300      	movs	r3, #0
 80083ec:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	461a      	mov	r2, r3
 80083f6:	2101      	movs	r1, #1
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f7fe fdc0 	bl	8006f7e <_UG_SearchObject>
 80083fe:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d102      	bne.n	800840c <UG_ButtonSetText+0x30>
 8008406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800840a:	e00d      	b.n	8008428 <UG_ButtonSetText+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 800840c:	697b      	ldr	r3, [r7, #20]
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	613b      	str	r3, [r7, #16]
   btn->str = str;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	615a      	str	r2, [r3, #20]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008420:	b2da      	uxtb	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008426:	2300      	movs	r3, #0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <UG_ButtonSetFont>:

UG_RESULT UG_ButtonSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b086      	sub	sp, #24
 8008434:	af00      	add	r7, sp, #0
 8008436:	60f8      	str	r0, [r7, #12]
 8008438:	460b      	mov	r3, r1
 800843a:	607a      	str	r2, [r7, #4]
 800843c:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 800843e:	2300      	movs	r3, #0
 8008440:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008446:	7afb      	ldrb	r3, [r7, #11]
 8008448:	461a      	mov	r2, r3
 800844a:	2101      	movs	r1, #1
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7fe fd96 	bl	8006f7e <_UG_SearchObject>
 8008452:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d102      	bne.n	8008460 <UG_ButtonSetFont+0x30>
 800845a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800845e:	e00d      	b.n	800847c <UG_ButtonSetFont+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	69db      	ldr	r3, [r3, #28]
 8008464:	613b      	str	r3, [r7, #16]
   btn->font = font;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	687a      	ldr	r2, [r7, #4]
 800846a:	60da      	str	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008474:	b2da      	uxtb	r2, r3
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <UG_ButtonSetStyle>:

UG_RESULT UG_ButtonSetStyle( UG_WINDOW* wnd, UG_U8 id, UG_U8 style )
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	460b      	mov	r3, r1
 800848e:	70fb      	strb	r3, [r7, #3]
 8008490:	4613      	mov	r3, r2
 8008492:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008494:	2300      	movs	r3, #0
 8008496:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	461a      	mov	r2, r3
 80084a0:	2101      	movs	r1, #1
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fe fd6b 	bl	8006f7e <_UG_SearchObject>
 80084a8:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d102      	bne.n	80084b6 <UG_ButtonSetStyle+0x32>
 80084b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084b4:	e065      	b.n	8008582 <UG_ButtonSetStyle+0xfe>

   btn = (UG_BUTTON*)(obj->data);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	69db      	ldr	r3, [r3, #28]
 80084ba:	60bb      	str	r3, [r7, #8]

   /* Select color scheme */
   btn->style &= ~(BTN_STYLE_USE_ALTERNATE_COLORS | BTN_STYLE_TOGGLE_COLORS | BTN_STYLE_NO_BORDERS | BTN_STYLE_NO_FILL);
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	f023 031e 	bic.w	r3, r3, #30
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	705a      	strb	r2, [r3, #1]
   btn->state |= BTN_STATE_ALWAYS_REDRAW;
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f043 0302 	orr.w	r3, r3, #2
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	701a      	strb	r2, [r3, #0]
   if ( style & BTN_STYLE_NO_BORDERS )
 80084d8:	78bb      	ldrb	r3, [r7, #2]
 80084da:	f003 0308 	and.w	r3, r3, #8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d006      	beq.n	80084f0 <UG_ButtonSetStyle+0x6c>
   {
      btn->style |= BTN_STYLE_NO_BORDERS;
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	f043 0308 	orr.w	r3, r3, #8
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_NO_FILL )
 80084f0:	78bb      	ldrb	r3, [r7, #2]
 80084f2:	f003 0310 	and.w	r3, r3, #16
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d006      	beq.n	8008508 <UG_ButtonSetStyle+0x84>
   {
      btn->style |= BTN_STYLE_NO_FILL;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	785b      	ldrb	r3, [r3, #1]
 80084fe:	f043 0310 	orr.w	r3, r3, #16
 8008502:	b2da      	uxtb	r2, r3
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_TOGGLE_COLORS )
 8008508:	78bb      	ldrb	r3, [r7, #2]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d007      	beq.n	8008522 <UG_ButtonSetStyle+0x9e>
   {
      btn->style |= BTN_STYLE_TOGGLE_COLORS;
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	785b      	ldrb	r3, [r3, #1]
 8008516:	f043 0302 	orr.w	r3, r3, #2
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	705a      	strb	r2, [r3, #1]
 8008520:	e013      	b.n	800854a <UG_ButtonSetStyle+0xc6>
   }
   else if ( style & BTN_STYLE_USE_ALTERNATE_COLORS )
 8008522:	78bb      	ldrb	r3, [r7, #2]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d007      	beq.n	800853c <UG_ButtonSetStyle+0xb8>
   {
      btn->style |= BTN_STYLE_USE_ALTERNATE_COLORS;
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	785b      	ldrb	r3, [r3, #1]
 8008530:	f043 0304 	orr.w	r3, r3, #4
 8008534:	b2da      	uxtb	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	705a      	strb	r2, [r3, #1]
 800853a:	e006      	b.n	800854a <UG_ButtonSetStyle+0xc6>
   }
   else
   {
      btn->state &= ~BTN_STATE_ALWAYS_REDRAW;
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	f023 0302 	bic.w	r3, r3, #2
 8008544:	b2da      	uxtb	r2, r3
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	701a      	strb	r2, [r3, #0]
   }

   /* 3D or 2D */
   if ( style & BTN_STYLE_3D )
 800854a:	78bb      	ldrb	r3, [r7, #2]
 800854c:	f003 0301 	and.w	r3, r3, #1
 8008550:	2b00      	cmp	r3, #0
 8008552:	d007      	beq.n	8008564 <UG_ButtonSetStyle+0xe0>
   {
      btn->style |= BTN_STYLE_3D;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	785b      	ldrb	r3, [r3, #1]
 8008558:	f043 0301 	orr.w	r3, r3, #1
 800855c:	b2da      	uxtb	r2, r3
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	705a      	strb	r2, [r3, #1]
 8008562:	e006      	b.n	8008572 <UG_ButtonSetStyle+0xee>
   }
   else
   {
      btn->style &= ~BTN_STYLE_3D;
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	785b      	ldrb	r3, [r3, #1]
 8008568:	f023 0301 	bic.w	r3, r3, #1
 800856c:	b2da      	uxtb	r2, r3
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	705a      	strb	r2, [r3, #1]
   }   
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800857a:	b2da      	uxtb	r2, r3
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <_UG_ButtonUpdate>:
   return align;
}


static void _UG_ButtonUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b091      	sub	sp, #68	; 0x44
 8008590:	af02      	add	r7, sp, #8
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
   UG_BUTTON* btn;
   UG_AREA a;
   UG_TEXT txt;
   UG_U8 d,o=0;
 8008596:	2300      	movs	r3, #0
 8008598:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   /* Get object-specific data */
   btn = (UG_BUTTON*)(obj->data);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	633b      	str	r3, [r7, #48]	; 0x30
   #endif

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 8181 	beq.w	80088b2 <_UG_ButtonUpdate+0x326>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	f003 0308 	and.w	r3, r3, #8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8157 	beq.w	800886c <_UG_ButtonUpdate+0x2e0>
      {
         /* Full redraw necessary? */
         if ( (obj->state & OBJ_STATE_REDRAW) || (btn->state & BTN_STATE_ALWAYS_REDRAW) )
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d106      	bne.n	80085d8 <_UG_ButtonUpdate+0x4c>
 80085ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085cc:	781b      	ldrb	r3, [r3, #0]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8108 	beq.w	80087e8 <_UG_ButtonUpdate+0x25c>
         {
            UG_WindowGetArea(wnd,&a);
 80085d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085dc:	4619      	mov	r1, r3
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f7ff fbfe 	bl	8007de0 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80085ea:	b29a      	uxth	r2, r3
 80085ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	4413      	add	r3, r2
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	b21a      	sxth	r2, r3
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008602:	b29a      	uxth	r2, r3
 8008604:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008608:	b29b      	uxth	r3, r3
 800860a:	4413      	add	r3, r2
 800860c:	b29b      	uxth	r3, r3
 800860e:	b21a      	sxth	r2, r3
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800861a:	b29a      	uxth	r2, r3
 800861c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8008620:	b29b      	uxth	r3, r3
 8008622:	4413      	add	r3, r2
 8008624:	b29b      	uxth	r3, r3
 8008626:	b21a      	sxth	r2, r3
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008632:	b29a      	uxth	r2, r3
 8008634:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008638:	b29b      	uxth	r3, r3
 800863a:	4413      	add	r3, r2
 800863c:	b29b      	uxth	r3, r3
 800863e:	b21a      	sxth	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008650:	429a      	cmp	r2, r3
 8008652:	f300 812b 	bgt.w	80088ac <_UG_ButtonUpdate+0x320>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008662:	429a      	cmp	r2, r3
 8008664:	f300 8124 	bgt.w	80088b0 <_UG_ButtonUpdate+0x324>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            /* 3D or 2D style? */
            d = ( btn->style & BTN_STYLE_3D )? 3:1;
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	785b      	ldrb	r3, [r3, #1]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d001      	beq.n	8008678 <_UG_ButtonUpdate+0xec>
 8008674:	2303      	movs	r3, #3
 8008676:	e000      	b.n	800867a <_UG_ButtonUpdate+0xee>
 8008678:	2301      	movs	r3, #1
 800867a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            txt.bc = btn->bc;
 800867e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008680:	889b      	ldrh	r3, [r3, #4]
 8008682:	837b      	strh	r3, [r7, #26]
            txt.fc = btn->fc;
 8008684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008686:	885b      	ldrh	r3, [r3, #2]
 8008688:	833b      	strh	r3, [r7, #24]

            if( btn->state & BTN_STATE_PRESSED )
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f003 0301 	and.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	d01b      	beq.n	80086ce <_UG_ButtonUpdate+0x142>
            {
              /* o is the text offset, to provide a visual effect when pressed */
              o=1;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
               /* "toggle" style? */
               if( btn->style & BTN_STYLE_TOGGLE_COLORS )
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	785b      	ldrb	r3, [r3, #1]
 80086a0:	f003 0302 	and.w	r3, r3, #2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d006      	beq.n	80086b6 <_UG_ButtonUpdate+0x12a>
               {
                  /* Swap colors */
                  txt.bc = btn->fc;
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	885b      	ldrh	r3, [r3, #2]
 80086ac:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->bc;
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	889b      	ldrh	r3, [r3, #4]
 80086b2:	833b      	strh	r3, [r7, #24]
 80086b4:	e00b      	b.n	80086ce <_UG_ButtonUpdate+0x142>
               }
               /* Use alternate colors? */
               else if ( btn->style & BTN_STYLE_USE_ALTERNATE_COLORS )
 80086b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b8:	785b      	ldrb	r3, [r3, #1]
 80086ba:	f003 0304 	and.w	r3, r3, #4
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d005      	beq.n	80086ce <_UG_ButtonUpdate+0x142>
               {
                  txt.bc = btn->abc;
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	891b      	ldrh	r3, [r3, #8]
 80086c6:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->afc;
 80086c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ca:	88db      	ldrh	r3, [r3, #6]
 80086cc:	833b      	strh	r3, [r7, #24]
               }
            }
            if ( !(btn->style & BTN_STYLE_NO_FILL) )
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	785b      	ldrb	r3, [r3, #1]
 80086d2:	f003 0310 	and.w	r3, r3, #16
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d12d      	bne.n	8008736 <_UG_ButtonUpdate+0x1aa>
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, txt.bc);
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086e6:	b29b      	uxth	r3, r3
 80086e8:	4413      	add	r3, r2
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	b218      	sxth	r0, r3
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80086f4:	b29a      	uxth	r2, r3
 80086f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4413      	add	r3, r2
 80086fe:	b29b      	uxth	r3, r3
 8008700:	b219      	sxth	r1, r3
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008708:	b29a      	uxth	r2, r3
 800870a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800870e:	b29b      	uxth	r3, r3
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	b29b      	uxth	r3, r3
 8008714:	b21c      	sxth	r4, r3
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800871c:	b29a      	uxth	r2, r3
 800871e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008722:	b29b      	uxth	r3, r3
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	b29b      	uxth	r3, r3
 8008728:	b21a      	sxth	r2, r3
 800872a:	8b7b      	ldrh	r3, [r7, #26]
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	4613      	mov	r3, r2
 8008730:	4622      	mov	r2, r4
 8008732:	f7fc ffc7 	bl	80056c4 <UG_FillFrame>

            /* Draw button text */
            txt.a.xs = obj->a_abs.xs+d+o;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800873c:	b29a      	uxth	r2, r3
 800873e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008742:	b29b      	uxth	r3, r3
 8008744:	4413      	add	r3, r2
 8008746:	b29a      	uxth	r2, r3
 8008748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800874c:	b29b      	uxth	r3, r3
 800874e:	4413      	add	r3, r2
 8008750:	b29b      	uxth	r3, r3
 8008752:	b21b      	sxth	r3, r3
 8008754:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys+d+o;
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800875c:	b29a      	uxth	r2, r3
 800875e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008762:	b29b      	uxth	r3, r3
 8008764:	4413      	add	r3, r2
 8008766:	b29a      	uxth	r2, r3
 8008768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800876c:	b29b      	uxth	r3, r3
 800876e:	4413      	add	r3, r2
 8008770:	b29b      	uxth	r3, r3
 8008772:	b21b      	sxth	r3, r3
 8008774:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe-d+o;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800877c:	b29a      	uxth	r2, r3
 800877e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008782:	b29b      	uxth	r3, r3
 8008784:	1ad3      	subs	r3, r2, r3
 8008786:	b29a      	uxth	r2, r3
 8008788:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800878c:	b29b      	uxth	r3, r3
 800878e:	4413      	add	r3, r2
 8008790:	b29b      	uxth	r3, r3
 8008792:	b21b      	sxth	r3, r3
 8008794:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye-d+o;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800879c:	b29a      	uxth	r2, r3
 800879e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	4413      	add	r3, r2
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	b21b      	sxth	r3, r3
 80087b4:	82fb      	strh	r3, [r7, #22]
            txt.align = btn->align;
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	7c1b      	ldrb	r3, [r3, #16]
 80087ba:	773b      	strb	r3, [r7, #28]
            txt.font = btn->font;
 80087bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	60fb      	str	r3, [r7, #12]
            txt.h_space = 2;
 80087c2:	2302      	movs	r3, #2
 80087c4:	83fb      	strh	r3, [r7, #30]
            txt.v_space = 2;
 80087c6:	2302      	movs	r3, #2
 80087c8:	843b      	strh	r3, [r7, #32]
            txt.str = btn->str;
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	695b      	ldr	r3, [r3, #20]
 80087ce:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 80087d0:	f107 0308 	add.w	r3, r7, #8
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fabb 	bl	8006d50 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e2:	b2da      	uxtb	r2, r3
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	701a      	strb	r2, [r3, #0]
#ifdef UGUI_USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
#endif
         }
         /* Draw button frame */
         if ( !(btn->style & BTN_STYLE_NO_BORDERS) )
 80087e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ea:	785b      	ldrb	r3, [r3, #1]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d153      	bne.n	800889c <_UG_ButtonUpdate+0x310>
         {
             if ( btn->style & BTN_STYLE_3D )
 80087f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f6:	785b      	ldrb	r3, [r3, #1]
 80087f8:	f003 0301 	and.w	r3, r3, #1
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d019      	beq.n	8008834 <_UG_ButtonUpdate+0x2a8>
             {  /* 3D */
                _UG_DrawObjectFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye, (btn->state&BTN_STATE_PRESSED)?(UG_COLOR*)pal_button_pressed:(UG_COLOR*)pal_button_released);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f003 0301 	and.w	r3, r3, #1
 8008820:	2b00      	cmp	r3, #0
 8008822:	d001      	beq.n	8008828 <_UG_ButtonUpdate+0x29c>
 8008824:	4b24      	ldr	r3, [pc, #144]	; (80088b8 <_UG_ButtonUpdate+0x32c>)
 8008826:	e000      	b.n	800882a <_UG_ButtonUpdate+0x29e>
 8008828:	4b24      	ldr	r3, [pc, #144]	; (80088bc <_UG_ButtonUpdate+0x330>)
 800882a:	9300      	str	r3, [sp, #0]
 800882c:	4623      	mov	r3, r4
 800882e:	f7fe fbe1 	bl	8006ff4 <_UG_DrawObjectFrame>
 8008832:	e033      	b.n	800889c <_UG_ButtonUpdate+0x310>
             }
             else
             {  /* 2D */
                 UG_DrawFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye,(btn->state&BTN_STATE_PRESSED)?btn->abc:btn->afc);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800884c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	f003 0301 	and.w	r3, r3, #1
 8008854:	2b00      	cmp	r3, #0
 8008856:	d002      	beq.n	800885e <_UG_ButtonUpdate+0x2d2>
 8008858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885a:	891b      	ldrh	r3, [r3, #8]
 800885c:	e001      	b.n	8008862 <_UG_ButtonUpdate+0x2d6>
 800885e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008860:	88db      	ldrh	r3, [r3, #6]
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4623      	mov	r3, r4
 8008866:	f7fd f816 	bl	8005896 <UG_DrawFrame>
 800886a:	e017      	b.n	800889c <_UG_ButtonUpdate+0x310>
             }
         }
      }
      else
      {
          if ( !(btn->style & BTN_STYLE_NO_FILL) )
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	785b      	ldrb	r3, [r3, #1]
 8008870:	f003 0310 	and.w	r3, r3, #16
 8008874:	2b00      	cmp	r3, #0
 8008876:	d111      	bne.n	800889c <_UG_ButtonUpdate+0x310>
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	899b      	ldrh	r3, [r3, #12]
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	4623      	mov	r3, r4
 8008898:	f7fc ff14 	bl	80056c4 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	f023 0320 	bic.w	r3, r3, #32
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	701a      	strb	r2, [r3, #0]
 80088aa:	e002      	b.n	80088b2 <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.ye > wnd->ye ) return;
 80088ac:	bf00      	nop
 80088ae:	e000      	b.n	80088b2 <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80088b0:	bf00      	nop
   }
}
 80088b2:	373c      	adds	r7, #60	; 0x3c
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd90      	pop	{r4, r7, pc}
 80088b8:	0802093c 	.word	0x0802093c
 80088bc:	08020954 	.word	0x08020954

080088c0 <UG_ProgressCreate>:
const UG_COLOR pal_progress[] = {
    C_PAL_PROGRESS
};

UG_RESULT UG_ProgressCreate( UG_WINDOW* wnd, UG_PROGRESS* pgb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b086      	sub	sp, #24
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	4611      	mov	r1, r2
 80088cc:	461a      	mov	r2, r3
 80088ce:	460b      	mov	r3, r1
 80088d0:	71fb      	strb	r3, [r7, #7]
 80088d2:	4613      	mov	r3, r2
 80088d4:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7fe fcad 	bl	8007236 <_UG_GetFreeObject>
 80088dc:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d102      	bne.n	80088ea <UG_ProgressCreate+0x2a>
 80088e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088e8:	e047      	b.n	800897a <UG_ProgressCreate+0xba>

   /* Initialize object-specific parameters */
   pgb->style = PGB_STYLE_3D;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	2201      	movs	r2, #1
 80088ee:	701a      	strb	r2, [r3, #0]
   pgb->fc = wnd->fc;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	895a      	ldrh	r2, [r3, #10]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	805a      	strh	r2, [r3, #2]
   pgb->bc = wnd->bc;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	899a      	ldrh	r2, [r3, #12]
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	809a      	strh	r2, [r3, #4]
   pgb->progress = 0;
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2200      	movs	r2, #0
 8008904:	719a      	strb	r2, [r3, #6]

   /* Initialize standard object parameters */
   obj->update = _UG_ProgressUpdate;
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <UG_ProgressCreate+0xc4>)
 800890a:	605a      	str	r2, [r3, #4]
   obj->type = OBJ_TYPE_PROGRESS;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	2205      	movs	r2, #5
 8008910:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008912:	697b      	ldr	r3, [r7, #20]
 8008914:	2200      	movs	r2, #0
 8008916:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	88ba      	ldrh	r2, [r7, #4]
 800891c:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	8c3a      	ldrh	r2, [r7, #32]
 8008922:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008928:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800892e:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008936:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800893e:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008946:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800894e:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	79fa      	ldrb	r2, [r7, #7]
 8008954:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 800895e:	b2da      	uxtb	r2, r3
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)pgb;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	68ba      	ldr	r2, [r7, #8]
 8008968:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3718      	adds	r7, #24
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	08008a5d 	.word	0x08008a5d

08008988 <UG_ProgressSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
 8008990:	460b      	mov	r3, r1
 8008992:	70fb      	strb	r3, [r7, #3]
 8008994:	4613      	mov	r3, r2
 8008996:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 800899c:	2300      	movs	r3, #0
 800899e:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	461a      	mov	r2, r3
 80089a4:	2105      	movs	r1, #5
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f7fe fae9 	bl	8006f7e <_UG_SearchObject>
 80089ac:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d102      	bne.n	80089ba <UG_ProgressSetForeColor+0x32>
 80089b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80089b8:	e00d      	b.n	80089d6 <UG_ProgressSetForeColor+0x4e>

   pgb = (UG_PROGRESS*)(obj->data);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	69db      	ldr	r3, [r3, #28]
 80089be:	60bb      	str	r3, [r7, #8]
   pgb->fc = fc;
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	883a      	ldrh	r2, [r7, #0]
 80089c4:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80089ce:	b2da      	uxtb	r2, r3
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <UG_ProgressSetProgress>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetProgress( UG_WINDOW* wnd, UG_U8 id, UG_U8 progress )
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	460b      	mov	r3, r1
 80089e8:	70fb      	strb	r3, [r7, #3]
 80089ea:	4613      	mov	r3, r2
 80089ec:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 80089f6:	78fb      	ldrb	r3, [r7, #3]
 80089f8:	461a      	mov	r2, r3
 80089fa:	2105      	movs	r1, #5
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f7fe fabe 	bl	8006f7e <_UG_SearchObject>
 8008a02:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <UG_ProgressSetProgress+0x32>
 8008a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008a0e:	e020      	b.n	8008a52 <UG_ProgressSetProgress+0x74>

   progress = progress > 100 ? 100 : progress;
 8008a10:	78bb      	ldrb	r3, [r7, #2]
 8008a12:	2b64      	cmp	r3, #100	; 0x64
 8008a14:	bf28      	it	cs
 8008a16:	2364      	movcs	r3, #100	; 0x64
 8008a18:	70bb      	strb	r3, [r7, #2]

   pgb = (UG_PROGRESS*)(obj->data);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	69db      	ldr	r3, [r3, #28]
 8008a1e:	60bb      	str	r3, [r7, #8]

   // Only update if different
   if(progress != pgb->progress)
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	799b      	ldrb	r3, [r3, #6]
 8008a24:	78ba      	ldrb	r2, [r7, #2]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d012      	beq.n	8008a50 <UG_ProgressSetProgress+0x72>
   {
      // Only redraw if new progress is less then actual(Need to redraw the background)
      obj->state |= OBJ_STATE_UPDATE | ((progress < pgb->progress) ? OBJ_STATE_REDRAW : 0);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	b25b      	sxtb	r3, r3
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	7992      	ldrb	r2, [r2, #6]
 8008a34:	78b9      	ldrb	r1, [r7, #2]
 8008a36:	4291      	cmp	r1, r2
 8008a38:	d201      	bcs.n	8008a3e <UG_ProgressSetProgress+0x60>
 8008a3a:	2260      	movs	r2, #96	; 0x60
 8008a3c:	e000      	b.n	8008a40 <UG_ProgressSetProgress+0x62>
 8008a3e:	2220      	movs	r2, #32
 8008a40:	4313      	orrs	r3, r2
 8008a42:	b25b      	sxtb	r3, r3
 8008a44:	b2da      	uxtb	r2, r3
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	701a      	strb	r2, [r3, #0]
      pgb->progress = progress;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	78ba      	ldrb	r2, [r7, #2]
 8008a4e:	719a      	strb	r2, [r3, #6]
   }

   return UG_RESULT_OK;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3710      	adds	r7, #16
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
	...

08008a5c <_UG_ProgressUpdate>:
   }
   return c;
}

static void _UG_ProgressUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b08b      	sub	sp, #44	; 0x2c
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
   UG_PROGRESS* pgb;
   UG_AREA a;
   UG_U8 d=0;
 8008a66:	2300      	movs	r3, #0
 8008a68:	77fb      	strb	r3, [r7, #31]
   UG_S16 w, wps, wpe;

   /* Get object-specific data */
   pgb = (UG_PROGRESS*)(obj->data);
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	69db      	ldr	r3, [r3, #28]
 8008a6e:	61bb      	str	r3, [r7, #24]

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	f003 0320 	and.w	r3, r3, #32
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 81a5 	beq.w	8008dc8 <_UG_ProgressUpdate+0x36c>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8162 	beq.w	8008d50 <_UG_ProgressUpdate+0x2f4>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 818c 	beq.w	8008db2 <_UG_ProgressUpdate+0x356>
         {
            UG_WindowGetArea(wnd,&a);
 8008a9a:	f107 0308 	add.w	r3, r7, #8
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f7ff f99d 	bl	8007de0 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	4413      	add	r3, r2
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	b21a      	sxth	r2, r3
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008ac4:	b29a      	uxth	r2, r3
 8008ac6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4413      	add	r3, r2
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	b21a      	sxth	r2, r3
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4413      	add	r3, r2
 8008ae6:	b29b      	uxth	r3, r3
 8008ae8:	b21a      	sxth	r2, r3
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008af4:	b29a      	uxth	r2, r3
 8008af6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	4413      	add	r3, r2
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	b21a      	sxth	r2, r3
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	81da      	strh	r2, [r3, #14]

            if ( obj->a_abs.ye > wnd->ye ) return;
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008b12:	429a      	cmp	r2, r3
 8008b14:	f300 8155 	bgt.w	8008dc2 <_UG_ProgressUpdate+0x366>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008b24:	429a      	cmp	r2, r3
 8008b26:	f300 814e 	bgt.w	8008dc6 <_UG_ProgressUpdate+0x36a>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            d = 1;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	77fb      	strb	r3, [r7, #31]
            /* 3D or 2D style? */
            if ( !(pgb->style & PGB_STYLE_NO_BORDERS) )
 8008b2e:	69bb      	ldr	r3, [r7, #24]
 8008b30:	781b      	ldrb	r3, [r3, #0]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d12e      	bne.n	8008b98 <_UG_ProgressUpdate+0x13c>
            {
               if ( pgb->style & PGB_STYLE_3D )
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	f003 0301 	and.w	r3, r3, #1
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d013      	beq.n	8008b6e <_UG_ProgressUpdate+0x112>
               {  /* 3D */
                  _UG_DrawObjectFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, (UG_COLOR*)pal_progress);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008b5e:	4c9c      	ldr	r4, [pc, #624]	; (8008dd0 <_UG_ProgressUpdate+0x374>)
 8008b60:	9400      	str	r4, [sp, #0]
 8008b62:	f7fe fa47 	bl	8006ff4 <_UG_DrawObjectFrame>
                  d += 3;
 8008b66:	7ffb      	ldrb	r3, [r7, #31]
 8008b68:	3303      	adds	r3, #3
 8008b6a:	77fb      	strb	r3, [r7, #31]
 8008b6c:	e014      	b.n	8008b98 <_UG_ProgressUpdate+0x13c>
               }
               else
               {  /* 2D */
                  UG_DrawFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, pgb->fc);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	885b      	ldrh	r3, [r3, #2]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4623      	mov	r3, r4
 8008b8e:	f7fc fe82 	bl	8005896 <UG_DrawFrame>
                  d += 1;
 8008b92:	7ffb      	ldrb	r3, [r7, #31]
 8008b94:	3301      	adds	r3, #1
 8008b96:	77fb      	strb	r3, [r7, #31]
               }
            }
            
            w   = ((obj->a_abs.xe-d)-(obj->a_abs.xs+d));
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008b9e:	b29a      	uxth	r2, r3
 8008ba0:	7ffb      	ldrb	r3, [r7, #31]
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	b29a      	uxth	r2, r3
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bae:	b299      	uxth	r1, r3
 8008bb0:	7ffb      	ldrb	r3, [r7, #31]
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	440b      	add	r3, r1
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	1ad3      	subs	r3, r2, r3
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	82fb      	strh	r3, [r7, #22]
            wps = w * pgb->progress / 100;
 8008bbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008bc2:	69ba      	ldr	r2, [r7, #24]
 8008bc4:	7992      	ldrb	r2, [r2, #6]
 8008bc6:	fb02 f303 	mul.w	r3, r2, r3
 8008bca:	4a82      	ldr	r2, [pc, #520]	; (8008dd4 <_UG_ProgressUpdate+0x378>)
 8008bcc:	fb82 1203 	smull	r1, r2, r2, r3
 8008bd0:	1152      	asrs	r2, r2, #5
 8008bd2:	17db      	asrs	r3, r3, #31
 8008bd4:	1ad3      	subs	r3, r2, r3
 8008bd6:	82bb      	strh	r3, [r7, #20]
            wpe = w - wps;
 8008bd8:	8afa      	ldrh	r2, [r7, #22]
 8008bda:	8abb      	ldrh	r3, [r7, #20]
 8008bdc:	1ad3      	subs	r3, r2, r3
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	827b      	strh	r3, [r7, #18]

            if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d17d      	bne.n	8008cea <_UG_ProgressUpdate+0x28e>
                /* What's this for? Drawing a frame before drawing the remaining frames on top on it? Seems to do nothing, waste power? */
               //UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);

            // Draw remaining frame first
            if(wpe > 0)
 8008bee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dd79      	ble.n	8008cea <_UG_ProgressUpdate+0x28e>
            {
               UG_S16 xs = obj->a_abs.xs + d + wps;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bfc:	b29a      	uxth	r2, r3
 8008bfe:	7ffb      	ldrb	r3, [r7, #31]
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	4413      	add	r3, r2
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	8abb      	ldrh	r3, [r7, #20]
 8008c08:	4413      	add	r3, r2
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	83bb      	strh	r3, [r7, #28]
               UG_S16 xe = obj->a_abs.xe - d;
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	7ffb      	ldrb	r3, [r7, #31]
 8008c18:	b29b      	uxth	r3, r3
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	823b      	strh	r3, [r7, #16]
               
               if ( pgb->style & PGB_STYLE_FORE_COLOR_MESH )
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	f003 0304 	and.w	r3, r3, #4
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d042      	beq.n	8008cb2 <_UG_ProgressUpdate+0x256>
               {
                  // FIXME: Need fix, if start at 0, it is shifted 1 pixel right.
                  // Needed to match mesh pattern, otherwise it would "scroll right" 
                  if((((obj->a_abs.xs+d) & 1) && (wps & 1)) || (!((obj->a_abs.xs+d) & 1) && !(wps & 1)))
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c32:	461a      	mov	r2, r3
 8008c34:	7ffb      	ldrb	r3, [r7, #31]
 8008c36:	4413      	add	r3, r2
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d004      	beq.n	8008c4a <_UG_ProgressUpdate+0x1ee>
 8008c40:	8abb      	ldrh	r3, [r7, #20]
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10e      	bne.n	8008c68 <_UG_ProgressUpdate+0x20c>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c50:	461a      	mov	r2, r3
 8008c52:	7ffb      	ldrb	r3, [r7, #31]
 8008c54:	4413      	add	r3, r2
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d10a      	bne.n	8008c74 <_UG_ProgressUpdate+0x218>
 8008c5e:	8abb      	ldrh	r3, [r7, #20]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d105      	bne.n	8008c74 <_UG_ProgressUpdate+0x218>
                     xs++;
 8008c68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3301      	adds	r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	83bb      	strh	r3, [r7, #28]
                  UG_DrawMesh (xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, 2, pgb->fc);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c7a:	b29a      	uxth	r2, r3
 8008c7c:	7ffb      	ldrb	r3, [r7, #31]
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	4413      	add	r3, r2
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	b219      	sxth	r1, r3
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	7ffb      	ldrb	r3, [r7, #31]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	b21c      	sxth	r4, r3
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	885b      	ldrh	r3, [r3, #2]
 8008c9c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008ca0:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008ca4:	9301      	str	r3, [sp, #4]
 8008ca6:	2302      	movs	r3, #2
 8008ca8:	9300      	str	r3, [sp, #0]
 8008caa:	4623      	mov	r3, r4
 8008cac:	f7fc fd7c 	bl	80057a8 <UG_DrawMesh>
 8008cb0:	e01b      	b.n	8008cea <_UG_ProgressUpdate+0x28e>
               }
               else
               {
                  UG_FillFrame(xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, pgb->bc);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	7ffb      	ldrb	r3, [r7, #31]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	4413      	add	r3, r2
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	b219      	sxth	r1, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008cca:	b29a      	uxth	r2, r3
 8008ccc:	7ffb      	ldrb	r3, [r7, #31]
 8008cce:	b29b      	uxth	r3, r3
 8008cd0:	1ad3      	subs	r3, r2, r3
 8008cd2:	b29b      	uxth	r3, r3
 8008cd4:	b21c      	sxth	r4, r3
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	889b      	ldrh	r3, [r3, #4]
 8008cda:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008cde:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008ce2:	9300      	str	r3, [sp, #0]
 8008ce4:	4623      	mov	r3, r4
 8008ce6:	f7fc fced 	bl	80056c4 <UG_FillFrame>
               }
            }

            // Draw elapsed frame
            if(pgb->progress > 0)
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	799b      	ldrb	r3, [r3, #6]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d05f      	beq.n	8008db2 <_UG_ProgressUpdate+0x356>
            {
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xs+d+wps, obj->a_abs.ye-d, pgb->fc);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cf8:	b29a      	uxth	r2, r3
 8008cfa:	7ffb      	ldrb	r3, [r7, #31]
 8008cfc:	b29b      	uxth	r3, r3
 8008cfe:	4413      	add	r3, r2
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	b218      	sxth	r0, r3
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d0a:	b29a      	uxth	r2, r3
 8008d0c:	7ffb      	ldrb	r3, [r7, #31]
 8008d0e:	b29b      	uxth	r3, r3
 8008d10:	4413      	add	r3, r2
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	b219      	sxth	r1, r3
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	7ffb      	ldrb	r3, [r7, #31]
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	8abb      	ldrh	r3, [r7, #20]
 8008d28:	4413      	add	r3, r2
 8008d2a:	b29b      	uxth	r3, r3
 8008d2c:	b21c      	sxth	r4, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d34:	b29a      	uxth	r2, r3
 8008d36:	7ffb      	ldrb	r3, [r7, #31]
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	1ad3      	subs	r3, r2, r3
 8008d3c:	b29b      	uxth	r3, r3
 8008d3e:	b21a      	sxth	r2, r3
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4613      	mov	r3, r2
 8008d48:	4622      	mov	r2, r4
 8008d4a:	f7fc fcbb 	bl	80056c4 <UG_FillFrame>
 8008d4e:	e030      	b.n	8008db2 <_UG_ProgressUpdate+0x356>
#endif
         }
      }
      else
      {
         if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	f003 0308 	and.w	r3, r3, #8
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d12a      	bne.n	8008db2 <_UG_ProgressUpdate+0x356>
            UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d62:	b29a      	uxth	r2, r3
 8008d64:	7ffb      	ldrb	r3, [r7, #31]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4413      	add	r3, r2
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	b218      	sxth	r0, r3
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d74:	b29a      	uxth	r2, r3
 8008d76:	7ffb      	ldrb	r3, [r7, #31]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	4413      	add	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
 8008d7e:	b219      	sxth	r1, r3
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	7ffb      	ldrb	r3, [r7, #31]
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	b21c      	sxth	r4, r3
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	7ffb      	ldrb	r3, [r7, #31]
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	b29b      	uxth	r3, r3
 8008da2:	b21a      	sxth	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	899b      	ldrh	r3, [r3, #12]
 8008da8:	9300      	str	r3, [sp, #0]
 8008daa:	4613      	mov	r3, r2
 8008dac:	4622      	mov	r2, r4
 8008dae:	f7fc fc89 	bl	80056c4 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	f023 0320 	bic.w	r3, r3, #32
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	701a      	strb	r2, [r3, #0]
 8008dc0:	e002      	b.n	8008dc8 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008dc2:	bf00      	nop
 8008dc4:	e000      	b.n	8008dc8 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008dc6:	bf00      	nop
   }
}
 8008dc8:	3724      	adds	r7, #36	; 0x24
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd90      	pop	{r4, r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	0802096c 	.word	0x0802096c
 8008dd4:	51eb851f 	.word	0x51eb851f

08008dd8 <UG_TextboxCreate>:

/* Static functions */
static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj);

UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b086      	sub	sp, #24
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	4611      	mov	r1, r2
 8008de4:	461a      	mov	r2, r3
 8008de6:	460b      	mov	r3, r1
 8008de8:	71fb      	strb	r3, [r7, #7]
 8008dea:	4613      	mov	r3, r2
 8008dec:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f7fe fa21 	bl	8007236 <_UG_GetFreeObject>
 8008df4:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d102      	bne.n	8008e02 <UG_TextboxCreate+0x2a>
 8008dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e00:	e05d      	b.n	8008ebe <UG_TextboxCreate+0xe6>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2200      	movs	r2, #0
 8008e06:	601a      	str	r2, [r3, #0]
   txb->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8008e08:	f7fc fc1c 	bl	8005644 <UG_GetGUI>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d004      	beq.n	8008e1c <UG_TextboxCreate+0x44>
 8008e12:	f7fc fc17 	bl	8005644 <UG_GetGUI>
 8008e16:	4603      	mov	r3, r0
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	e000      	b.n	8008e1e <UG_TextboxCreate+0x46>
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	68ba      	ldr	r2, [r7, #8]
 8008e20:	6053      	str	r3, [r2, #4]
   txb->style = 0; /* reserved */
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2200      	movs	r2, #0
 8008e26:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	895a      	ldrh	r2, [r3, #10]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	899a      	ldrh	r2, [r3, #12]
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	2212      	movs	r2, #18
 8008e3c:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2200      	movs	r2, #0
 8008e48:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	4a1e      	ldr	r2, [pc, #120]	; (8008ec8 <UG_TextboxCreate+0xf0>)
 8008e4e:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_TEXTBOX;
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	2202      	movs	r2, #2
 8008e54:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	88ba      	ldrh	r2, [r7, #4]
 8008e60:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	8c3a      	ldrh	r2, [r7, #32]
 8008e66:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008e68:	697b      	ldr	r3, [r7, #20]
 8008e6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008e6c:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008e6e:	697b      	ldr	r3, [r7, #20]
 8008e70:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008e72:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e7a:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e82:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e8a:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e92:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	79fa      	ldrb	r2, [r7, #7]
 8008e98:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	781b      	ldrb	r3, [r3, #0]
 8008eb2:	f023 0301 	bic.w	r3, r3, #1
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	08009077 	.word	0x08009077

08008ecc <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
 8008ed8:	4613      	mov	r3, r2
 8008eda:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008edc:	2300      	movs	r3, #0
 8008ede:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	2102      	movs	r1, #2
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f7fe f847 	bl	8006f7e <_UG_SearchObject>
 8008ef0:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d102      	bne.n	8008efe <UG_TextboxSetForeColor+0x32>
 8008ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008efc:	e00d      	b.n	8008f1a <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	69db      	ldr	r3, [r3, #28]
 8008f02:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	883a      	ldrh	r2, [r7, #0]
 8008f08:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008f18:	2300      	movs	r3, #0
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	2102      	movs	r1, #2
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7fe f81c 	bl	8006f7e <_UG_SearchObject>
 8008f46:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d102      	bne.n	8008f54 <UG_TextboxSetBackColor+0x32>
 8008f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f52:	e00d      	b.n	8008f70 <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	69db      	ldr	r3, [r3, #28]
 8008f58:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	883a      	ldrh	r2, [r7, #0]
 8008f5e:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008f6e:	2300      	movs	r3, #0
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	460b      	mov	r3, r1
 8008f82:	607a      	str	r2, [r7, #4]
 8008f84:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	461a      	mov	r2, r3
 8008f92:	2102      	movs	r1, #2
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f7fd fff2 	bl	8006f7e <_UG_SearchObject>
 8008f9a:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d102      	bne.n	8008fa8 <UG_TextboxSetText+0x30>
 8008fa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fa6:	e00d      	b.n	8008fc4 <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	69db      	ldr	r3, [r3, #28]
 8008fac:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	781b      	ldrb	r3, [r3, #0]
 8008fb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	460b      	mov	r3, r1
 8008fd6:	607a      	str	r2, [r7, #4]
 8008fd8:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008fe2:	7afb      	ldrb	r3, [r7, #11]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	2102      	movs	r1, #2
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f7fd ffc8 	bl	8006f7e <_UG_SearchObject>
 8008fee:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d102      	bne.n	8008ffc <UG_TextboxSetFont+0x30>
 8008ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ffa:	e00d      	b.n	8009018 <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	613b      	str	r3, [r7, #16]
   txb->font = font;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009010:	b2da      	uxtb	r2, r3
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3718      	adds	r7, #24
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}

08009020 <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	460b      	mov	r3, r1
 800902a:	70fb      	strb	r3, [r7, #3]
 800902c:	4613      	mov	r3, r2
 800902e:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8009034:	2300      	movs	r3, #0
 8009036:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8009038:	78fb      	ldrb	r3, [r7, #3]
 800903a:	461a      	mov	r2, r3
 800903c:	2102      	movs	r1, #2
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f7fd ff9d 	bl	8006f7e <_UG_SearchObject>
 8009044:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <UG_TextboxSetAlignment+0x32>
 800904c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009050:	e00d      	b.n	800906e <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	78ba      	ldrb	r2, [r7, #2]
 800905c:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	781b      	ldrb	r3, [r3, #0]
 8009062:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009066:	b2da      	uxtb	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3710      	adds	r7, #16
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <_UG_TextboxUpdate>:
   }
   return align;
}

static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8009076:	b590      	push	{r4, r7, lr}
 8009078:	b08f      	sub	sp, #60	; 0x3c
 800907a:	af02      	add	r7, sp, #8
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	69db      	ldr	r3, [r3, #28]
 8009084:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	f000 80b8 	beq.w	8009204 <_UG_TextboxUpdate+0x18e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 8094 	beq.w	80091ca <_UG_TextboxUpdate+0x154>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 809f 	beq.w	80091ee <_UG_TextboxUpdate+0x178>
         {
            UG_WindowGetArea(wnd,&a);
 80090b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090b4:	4619      	mov	r1, r3
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fe fe92 	bl	8007de0 <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80090c2:	b29a      	uxth	r2, r3
 80090c4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80090c8:	b29b      	uxth	r3, r3
 80090ca:	4413      	add	r3, r2
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	b21a      	sxth	r2, r3
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80090da:	b29a      	uxth	r2, r3
 80090dc:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	4413      	add	r3, r2
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	b21a      	sxth	r2, r3
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80090f2:	b29a      	uxth	r2, r3
 80090f4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	4413      	add	r3, r2
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	b21a      	sxth	r2, r3
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800910a:	b29a      	uxth	r2, r3
 800910c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8009110:	b29b      	uxth	r3, r3
 8009112:	4413      	add	r3, r2
 8009114:	b29b      	uxth	r3, r3
 8009116:	b21a      	sxth	r2, r3
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8009128:	429a      	cmp	r2, r3
 800912a:	dc68      	bgt.n	80091fe <_UG_TextboxUpdate+0x188>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009138:	429a      	cmp	r2, r3
 800913a:	dc62      	bgt.n	8009202 <_UG_TextboxUpdate+0x18c>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            txt.bc = txb->bc;
 800913c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800913e:	899b      	ldrh	r3, [r3, #12]
 8009140:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 8009142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009144:	895b      	ldrh	r3, [r3, #10]
 8009146:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8009160:	8b7b      	ldrh	r3, [r7, #26]
 8009162:	9300      	str	r3, [sp, #0]
 8009164:	4623      	mov	r3, r4
 8009166:	f7fc faad 	bl	80056c4 <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009170:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009178:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8009180:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009188:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 800918a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800918c:	7b9b      	ldrb	r3, [r3, #14]
 800918e:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 8009190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 8009196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009198:	f993 300f 	ldrsb.w	r3, [r3, #15]
 800919c:	b21b      	sxth	r3, r3
 800919e:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 80091a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091a2:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80091a6:	b21b      	sxth	r3, r3
 80091a8:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 80091aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 80091b0:	f107 0308 	add.w	r3, r7, #8
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7fd fdcb 	bl	8006d50 <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	781b      	ldrb	r3, [r3, #0]
 80091be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c2:	b2da      	uxtb	r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	e011      	b.n	80091ee <_UG_TextboxUpdate+0x178>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	899b      	ldrh	r3, [r3, #12]
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4623      	mov	r3, r4
 80091ea:	f7fc fa6b 	bl	80056c4 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	f023 0320 	bic.w	r3, r3, #32
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	701a      	strb	r2, [r3, #0]
 80091fc:	e002      	b.n	8009204 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.ye > wnd->ye ) return;
 80091fe:	bf00      	nop
 8009200:	e000      	b.n	8009204 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8009202:	bf00      	nop
   }
}
 8009204:	3734      	adds	r7, #52	; 0x34
 8009206:	46bd      	mov	sp, r7
 8009208:	bd90      	pop	{r4, r7, pc}
	...

0800920c <__NVIC_SetPriority>:
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	6039      	str	r1, [r7, #0]
 8009216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800921c:	2b00      	cmp	r3, #0
 800921e:	db0a      	blt.n	8009236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	490c      	ldr	r1, [pc, #48]	; (8009258 <__NVIC_SetPriority+0x4c>)
 8009226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800922a:	0112      	lsls	r2, r2, #4
 800922c:	b2d2      	uxtb	r2, r2
 800922e:	440b      	add	r3, r1
 8009230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009234:	e00a      	b.n	800924c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	4908      	ldr	r1, [pc, #32]	; (800925c <__NVIC_SetPriority+0x50>)
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	3b04      	subs	r3, #4
 8009244:	0112      	lsls	r2, r2, #4
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	440b      	add	r3, r1
 800924a:	761a      	strb	r2, [r3, #24]
}
 800924c:	bf00      	nop
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	e000e100 	.word	0xe000e100
 800925c:	e000ed00 	.word	0xe000ed00

08009260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009260:	b580      	push	{r7, lr}
 8009262:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009264:	2100      	movs	r1, #0
 8009266:	f06f 0004 	mvn.w	r0, #4
 800926a:	f7ff ffcf 	bl	800920c <__NVIC_SetPriority>
#endif
}
 800926e:	bf00      	nop
 8009270:	bd80      	pop	{r7, pc}
	...

08009274 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009274:	b480      	push	{r7}
 8009276:	b083      	sub	sp, #12
 8009278:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800927a:	f3ef 8305 	mrs	r3, IPSR
 800927e:	603b      	str	r3, [r7, #0]
  return(result);
 8009280:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009286:	f06f 0305 	mvn.w	r3, #5
 800928a:	607b      	str	r3, [r7, #4]
 800928c:	e00c      	b.n	80092a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800928e:	4b0a      	ldr	r3, [pc, #40]	; (80092b8 <osKernelInitialize+0x44>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d105      	bne.n	80092a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009296:	4b08      	ldr	r3, [pc, #32]	; (80092b8 <osKernelInitialize+0x44>)
 8009298:	2201      	movs	r2, #1
 800929a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800929c:	2300      	movs	r3, #0
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	e002      	b.n	80092a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80092a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092a8:	687b      	ldr	r3, [r7, #4]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr
 80092b6:	bf00      	nop
 80092b8:	20000518 	.word	0x20000518

080092bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092c2:	f3ef 8305 	mrs	r3, IPSR
 80092c6:	603b      	str	r3, [r7, #0]
  return(result);
 80092c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80092ce:	f06f 0305 	mvn.w	r3, #5
 80092d2:	607b      	str	r3, [r7, #4]
 80092d4:	e010      	b.n	80092f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80092d6:	4b0b      	ldr	r3, [pc, #44]	; (8009304 <osKernelStart+0x48>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d109      	bne.n	80092f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80092de:	f7ff ffbf 	bl	8009260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80092e2:	4b08      	ldr	r3, [pc, #32]	; (8009304 <osKernelStart+0x48>)
 80092e4:	2202      	movs	r2, #2
 80092e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80092e8:	f001 fcbc 	bl	800ac64 <vTaskStartScheduler>
      stat = osOK;
 80092ec:	2300      	movs	r3, #0
 80092ee:	607b      	str	r3, [r7, #4]
 80092f0:	e002      	b.n	80092f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80092f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80092f8:	687b      	ldr	r3, [r7, #4]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20000518 	.word	0x20000518

08009308 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009308:	b580      	push	{r7, lr}
 800930a:	b08e      	sub	sp, #56	; 0x38
 800930c:	af04      	add	r7, sp, #16
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009318:	f3ef 8305 	mrs	r3, IPSR
 800931c:	617b      	str	r3, [r7, #20]
  return(result);
 800931e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009320:	2b00      	cmp	r3, #0
 8009322:	d17e      	bne.n	8009422 <osThreadNew+0x11a>
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d07b      	beq.n	8009422 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800932a:	2380      	movs	r3, #128	; 0x80
 800932c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800932e:	2318      	movs	r3, #24
 8009330:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009332:	2300      	movs	r3, #0
 8009334:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009336:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800933a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d045      	beq.n	80093ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d002      	beq.n	8009350 <osThreadNew+0x48>
        name = attr->name;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d002      	beq.n	800935e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800935e:	69fb      	ldr	r3, [r7, #28]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d008      	beq.n	8009376 <osThreadNew+0x6e>
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	2b38      	cmp	r3, #56	; 0x38
 8009368:	d805      	bhi.n	8009376 <osThreadNew+0x6e>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	f003 0301 	and.w	r3, r3, #1
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <osThreadNew+0x72>
        return (NULL);
 8009376:	2300      	movs	r3, #0
 8009378:	e054      	b.n	8009424 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d003      	beq.n	800938a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	695b      	ldr	r3, [r3, #20]
 8009386:	089b      	lsrs	r3, r3, #2
 8009388:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00e      	beq.n	80093b0 <osThreadNew+0xa8>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	2bbb      	cmp	r3, #187	; 0xbb
 8009398:	d90a      	bls.n	80093b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d006      	beq.n	80093b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <osThreadNew+0xa8>
        mem = 1;
 80093aa:	2301      	movs	r3, #1
 80093ac:	61bb      	str	r3, [r7, #24]
 80093ae:	e010      	b.n	80093d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10c      	bne.n	80093d2 <osThreadNew+0xca>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d108      	bne.n	80093d2 <osThreadNew+0xca>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	691b      	ldr	r3, [r3, #16]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d104      	bne.n	80093d2 <osThreadNew+0xca>
          mem = 0;
 80093c8:	2300      	movs	r3, #0
 80093ca:	61bb      	str	r3, [r7, #24]
 80093cc:	e001      	b.n	80093d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80093ce:	2300      	movs	r3, #0
 80093d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80093d2:	69bb      	ldr	r3, [r7, #24]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d110      	bne.n	80093fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80093dc:	687a      	ldr	r2, [r7, #4]
 80093de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80093e0:	9202      	str	r2, [sp, #8]
 80093e2:	9301      	str	r3, [sp, #4]
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	9300      	str	r3, [sp, #0]
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	6a3a      	ldr	r2, [r7, #32]
 80093ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f001 fa4c 	bl	800a88c <xTaskCreateStatic>
 80093f4:	4603      	mov	r3, r0
 80093f6:	613b      	str	r3, [r7, #16]
 80093f8:	e013      	b.n	8009422 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d110      	bne.n	8009422 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009400:	6a3b      	ldr	r3, [r7, #32]
 8009402:	b29a      	uxth	r2, r3
 8009404:	f107 0310 	add.w	r3, r7, #16
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	69fb      	ldr	r3, [r7, #28]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f001 fa97 	bl	800a946 <xTaskCreate>
 8009418:	4603      	mov	r3, r0
 800941a:	2b01      	cmp	r3, #1
 800941c:	d001      	beq.n	8009422 <osThreadNew+0x11a>
            hTask = NULL;
 800941e:	2300      	movs	r3, #0
 8009420:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009422:	693b      	ldr	r3, [r7, #16]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3728      	adds	r7, #40	; 0x28
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009434:	f3ef 8305 	mrs	r3, IPSR
 8009438:	60bb      	str	r3, [r7, #8]
  return(result);
 800943a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <osDelay+0x1c>
    stat = osErrorISR;
 8009440:	f06f 0305 	mvn.w	r3, #5
 8009444:	60fb      	str	r3, [r7, #12]
 8009446:	e007      	b.n	8009458 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009448:	2300      	movs	r3, #0
 800944a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f001 fbd2 	bl	800abfc <vTaskDelay>
    }
  }

  return (stat);
 8009458:	68fb      	ldr	r3, [r7, #12]
}
 800945a:	4618      	mov	r0, r3
 800945c:	3710      	adds	r7, #16
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}

08009462 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8009462:	b580      	push	{r7, lr}
 8009464:	b08a      	sub	sp, #40	; 0x28
 8009466:	af02      	add	r7, sp, #8
 8009468:	60f8      	str	r0, [r7, #12]
 800946a:	60b9      	str	r1, [r7, #8]
 800946c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800946e:	2300      	movs	r3, #0
 8009470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009472:	f3ef 8305 	mrs	r3, IPSR
 8009476:	613b      	str	r3, [r7, #16]
  return(result);
 8009478:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800947a:	2b00      	cmp	r3, #0
 800947c:	d175      	bne.n	800956a <osSemaphoreNew+0x108>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d072      	beq.n	800956a <osSemaphoreNew+0x108>
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	429a      	cmp	r2, r3
 800948a:	d86e      	bhi.n	800956a <osSemaphoreNew+0x108>
    mem = -1;
 800948c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009490:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d015      	beq.n	80094c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d006      	beq.n	80094ae <osSemaphoreNew+0x4c>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	2b4f      	cmp	r3, #79	; 0x4f
 80094a6:	d902      	bls.n	80094ae <osSemaphoreNew+0x4c>
        mem = 1;
 80094a8:	2301      	movs	r3, #1
 80094aa:	61bb      	str	r3, [r7, #24]
 80094ac:	e00c      	b.n	80094c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	689b      	ldr	r3, [r3, #8]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d108      	bne.n	80094c8 <osSemaphoreNew+0x66>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d104      	bne.n	80094c8 <osSemaphoreNew+0x66>
          mem = 0;
 80094be:	2300      	movs	r3, #0
 80094c0:	61bb      	str	r3, [r7, #24]
 80094c2:	e001      	b.n	80094c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80094c4:	2300      	movs	r3, #0
 80094c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094ce:	d04c      	beq.n	800956a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d128      	bne.n	8009528 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	2b01      	cmp	r3, #1
 80094da:	d10a      	bne.n	80094f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	2203      	movs	r2, #3
 80094e2:	9200      	str	r2, [sp, #0]
 80094e4:	2200      	movs	r2, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	2001      	movs	r0, #1
 80094ea:	f000 fa29 	bl	8009940 <xQueueGenericCreateStatic>
 80094ee:	61f8      	str	r0, [r7, #28]
 80094f0:	e005      	b.n	80094fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80094f2:	2203      	movs	r2, #3
 80094f4:	2100      	movs	r1, #0
 80094f6:	2001      	movs	r0, #1
 80094f8:	f000 fa9a 	bl	8009a30 <xQueueGenericCreate>
 80094fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80094fe:	69fb      	ldr	r3, [r7, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d022      	beq.n	800954a <osSemaphoreNew+0xe8>
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d01f      	beq.n	800954a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800950a:	2300      	movs	r3, #0
 800950c:	2200      	movs	r2, #0
 800950e:	2100      	movs	r1, #0
 8009510:	69f8      	ldr	r0, [r7, #28]
 8009512:	f000 fb55 	bl	8009bc0 <xQueueGenericSend>
 8009516:	4603      	mov	r3, r0
 8009518:	2b01      	cmp	r3, #1
 800951a:	d016      	beq.n	800954a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800951c:	69f8      	ldr	r0, [r7, #28]
 800951e:	f000 ffe1 	bl	800a4e4 <vQueueDelete>
            hSemaphore = NULL;
 8009522:	2300      	movs	r3, #0
 8009524:	61fb      	str	r3, [r7, #28]
 8009526:	e010      	b.n	800954a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d108      	bne.n	8009540 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	461a      	mov	r2, r3
 8009534:	68b9      	ldr	r1, [r7, #8]
 8009536:	68f8      	ldr	r0, [r7, #12]
 8009538:	f000 fad7 	bl	8009aea <xQueueCreateCountingSemaphoreStatic>
 800953c:	61f8      	str	r0, [r7, #28]
 800953e:	e004      	b.n	800954a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	68f8      	ldr	r0, [r7, #12]
 8009544:	f000 fb08 	bl	8009b58 <xQueueCreateCountingSemaphore>
 8009548:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00c      	beq.n	800956a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d003      	beq.n	800955e <osSemaphoreNew+0xfc>
          name = attr->name;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	617b      	str	r3, [r7, #20]
 800955c:	e001      	b.n	8009562 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800955e:	2300      	movs	r3, #0
 8009560:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8009562:	6979      	ldr	r1, [r7, #20]
 8009564:	69f8      	ldr	r0, [r7, #28]
 8009566:	f001 f909 	bl	800a77c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800956a:	69fb      	ldr	r3, [r7, #28]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3720      	adds	r7, #32
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009582:	2300      	movs	r3, #0
 8009584:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800958c:	f06f 0303 	mvn.w	r3, #3
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	e039      	b.n	8009608 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009594:	f3ef 8305 	mrs	r3, IPSR
 8009598:	60fb      	str	r3, [r7, #12]
  return(result);
 800959a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800959c:	2b00      	cmp	r3, #0
 800959e:	d022      	beq.n	80095e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80095a6:	f06f 0303 	mvn.w	r3, #3
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e02c      	b.n	8009608 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80095b2:	f107 0308 	add.w	r3, r7, #8
 80095b6:	461a      	mov	r2, r3
 80095b8:	2100      	movs	r1, #0
 80095ba:	6938      	ldr	r0, [r7, #16]
 80095bc:	f000 ff12 	bl	800a3e4 <xQueueReceiveFromISR>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d003      	beq.n	80095ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80095c6:	f06f 0302 	mvn.w	r3, #2
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e01c      	b.n	8009608 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d019      	beq.n	8009608 <osSemaphoreAcquire+0x94>
 80095d4:	4b0f      	ldr	r3, [pc, #60]	; (8009614 <osSemaphoreAcquire+0xa0>)
 80095d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	f3bf 8f6f 	isb	sy
 80095e4:	e010      	b.n	8009608 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80095e6:	6839      	ldr	r1, [r7, #0]
 80095e8:	6938      	ldr	r0, [r7, #16]
 80095ea:	f000 fdef 	bl	800a1cc <xQueueSemaphoreTake>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d009      	beq.n	8009608 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80095fa:	f06f 0301 	mvn.w	r3, #1
 80095fe:	617b      	str	r3, [r7, #20]
 8009600:	e002      	b.n	8009608 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8009602:	f06f 0302 	mvn.w	r3, #2
 8009606:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009608:	697b      	ldr	r3, [r7, #20]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	e000ed04 	.word	0xe000ed04

08009618 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009618:	b580      	push	{r7, lr}
 800961a:	b086      	sub	sp, #24
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009624:	2300      	movs	r3, #0
 8009626:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d103      	bne.n	8009636 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800962e:	f06f 0303 	mvn.w	r3, #3
 8009632:	617b      	str	r3, [r7, #20]
 8009634:	e02c      	b.n	8009690 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009636:	f3ef 8305 	mrs	r3, IPSR
 800963a:	60fb      	str	r3, [r7, #12]
  return(result);
 800963c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800963e:	2b00      	cmp	r3, #0
 8009640:	d01a      	beq.n	8009678 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8009642:	2300      	movs	r3, #0
 8009644:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009646:	f107 0308 	add.w	r3, r7, #8
 800964a:	4619      	mov	r1, r3
 800964c:	6938      	ldr	r0, [r7, #16]
 800964e:	f000 fc50 	bl	8009ef2 <xQueueGiveFromISR>
 8009652:	4603      	mov	r3, r0
 8009654:	2b01      	cmp	r3, #1
 8009656:	d003      	beq.n	8009660 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8009658:	f06f 0302 	mvn.w	r3, #2
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	e017      	b.n	8009690 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d014      	beq.n	8009690 <osSemaphoreRelease+0x78>
 8009666:	4b0d      	ldr	r3, [pc, #52]	; (800969c <osSemaphoreRelease+0x84>)
 8009668:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	f3bf 8f6f 	isb	sy
 8009676:	e00b      	b.n	8009690 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009678:	2300      	movs	r3, #0
 800967a:	2200      	movs	r2, #0
 800967c:	2100      	movs	r1, #0
 800967e:	6938      	ldr	r0, [r7, #16]
 8009680:	f000 fa9e 	bl	8009bc0 <xQueueGenericSend>
 8009684:	4603      	mov	r3, r0
 8009686:	2b01      	cmp	r3, #1
 8009688:	d002      	beq.n	8009690 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800968a:	f06f 0302 	mvn.w	r3, #2
 800968e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009690:	697b      	ldr	r3, [r7, #20]
}
 8009692:	4618      	mov	r0, r3
 8009694:	3718      	adds	r7, #24
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	e000ed04 	.word	0xe000ed04

080096a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	60f8      	str	r0, [r7, #12]
 80096a8:	60b9      	str	r1, [r7, #8]
 80096aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4a07      	ldr	r2, [pc, #28]	; (80096cc <vApplicationGetIdleTaskMemory+0x2c>)
 80096b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	4a06      	ldr	r2, [pc, #24]	; (80096d0 <vApplicationGetIdleTaskMemory+0x30>)
 80096b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2280      	movs	r2, #128	; 0x80
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	2000051c 	.word	0x2000051c
 80096d0:	200005d8 	.word	0x200005d8

080096d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80096d4:	b480      	push	{r7}
 80096d6:	b085      	sub	sp, #20
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4a07      	ldr	r2, [pc, #28]	; (8009700 <vApplicationGetTimerTaskMemory+0x2c>)
 80096e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4a06      	ldr	r2, [pc, #24]	; (8009704 <vApplicationGetTimerTaskMemory+0x30>)
 80096ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096f2:	601a      	str	r2, [r3, #0]
}
 80096f4:	bf00      	nop
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr
 8009700:	200007d8 	.word	0x200007d8
 8009704:	20000894 	.word	0x20000894

08009708 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f103 0208 	add.w	r2, r3, #8
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009720:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f103 0208 	add.w	r2, r3, #8
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f103 0208 	add.w	r2, r3, #8
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800973c:	bf00      	nop
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr

08009748 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009762:	b480      	push	{r7}
 8009764:	b085      	sub	sp, #20
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	685b      	ldr	r3, [r3, #4]
 8009770:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	689a      	ldr	r2, [r3, #8]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	683a      	ldr	r2, [r7, #0]
 8009786:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	1c5a      	adds	r2, r3, #1
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	601a      	str	r2, [r3, #0]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80097aa:	b480      	push	{r7}
 80097ac:	b085      	sub	sp, #20
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
 80097b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c0:	d103      	bne.n	80097ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	e00c      	b.n	80097e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	3308      	adds	r3, #8
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e002      	b.n	80097d8 <vListInsert+0x2e>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	60fb      	str	r3, [r7, #12]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	68ba      	ldr	r2, [r7, #8]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d2f6      	bcs.n	80097d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	683b      	ldr	r3, [r7, #0]
 80097ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	683a      	ldr	r2, [r7, #0]
 80097f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	68fa      	ldr	r2, [r7, #12]
 80097f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	683a      	ldr	r2, [r7, #0]
 80097fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009800:	683b      	ldr	r3, [r7, #0]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	1c5a      	adds	r2, r3, #1
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
}
 8009810:	bf00      	nop
 8009812:	3714      	adds	r7, #20
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800981c:	b480      	push	{r7}
 800981e:	b085      	sub	sp, #20
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	6892      	ldr	r2, [r2, #8]
 8009832:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	6852      	ldr	r2, [r2, #4]
 800983c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	429a      	cmp	r2, r3
 8009846:	d103      	bne.n	8009850 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689a      	ldr	r2, [r3, #8]
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	1e5a      	subs	r2, r3, #1
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009888:	f383 8811 	msr	BASEPRI, r3
 800988c:	f3bf 8f6f 	isb	sy
 8009890:	f3bf 8f4f 	dsb	sy
 8009894:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009896:	bf00      	nop
 8009898:	e7fe      	b.n	8009898 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800989a:	f002 fc9b 	bl	800c1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098aa:	fb01 f303 	mul.w	r3, r1, r3
 80098ae:	441a      	add	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ca:	3b01      	subs	r3, #1
 80098cc:	68f9      	ldr	r1, [r7, #12]
 80098ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80098d0:	fb01 f303 	mul.w	r3, r1, r3
 80098d4:	441a      	add	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	22ff      	movs	r2, #255	; 0xff
 80098de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	22ff      	movs	r2, #255	; 0xff
 80098e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d114      	bne.n	800991a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d01a      	beq.n	800992e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	3310      	adds	r3, #16
 80098fc:	4618      	mov	r0, r3
 80098fe:	f001 fc4b 	bl	800b198 <xTaskRemoveFromEventList>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d012      	beq.n	800992e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009908:	4b0c      	ldr	r3, [pc, #48]	; (800993c <xQueueGenericReset+0xcc>)
 800990a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800990e:	601a      	str	r2, [r3, #0]
 8009910:	f3bf 8f4f 	dsb	sy
 8009914:	f3bf 8f6f 	isb	sy
 8009918:	e009      	b.n	800992e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	3310      	adds	r3, #16
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff fef2 	bl	8009708 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3324      	adds	r3, #36	; 0x24
 8009928:	4618      	mov	r0, r3
 800992a:	f7ff feed 	bl	8009708 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800992e:	f002 fc81 	bl	800c234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009932:	2301      	movs	r3, #1
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	e000ed04 	.word	0xe000ed04

08009940 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08e      	sub	sp, #56	; 0x38
 8009944:	af02      	add	r7, sp, #8
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009958:	f383 8811 	msr	BASEPRI, r3
 800995c:	f3bf 8f6f 	isb	sy
 8009960:	f3bf 8f4f 	dsb	sy
 8009964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d10a      	bne.n	8009986 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2b00      	cmp	r3, #0
 800998a:	d002      	beq.n	8009992 <xQueueGenericCreateStatic+0x52>
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <xQueueGenericCreateStatic+0x56>
 8009992:	2301      	movs	r3, #1
 8009994:	e000      	b.n	8009998 <xQueueGenericCreateStatic+0x58>
 8009996:	2300      	movs	r3, #0
 8009998:	2b00      	cmp	r3, #0
 800999a:	d10a      	bne.n	80099b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800999c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a0:	f383 8811 	msr	BASEPRI, r3
 80099a4:	f3bf 8f6f 	isb	sy
 80099a8:	f3bf 8f4f 	dsb	sy
 80099ac:	623b      	str	r3, [r7, #32]
}
 80099ae:	bf00      	nop
 80099b0:	e7fe      	b.n	80099b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d102      	bne.n	80099be <xQueueGenericCreateStatic+0x7e>
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <xQueueGenericCreateStatic+0x82>
 80099be:	2301      	movs	r3, #1
 80099c0:	e000      	b.n	80099c4 <xQueueGenericCreateStatic+0x84>
 80099c2:	2300      	movs	r3, #0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d10a      	bne.n	80099de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80099c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099cc:	f383 8811 	msr	BASEPRI, r3
 80099d0:	f3bf 8f6f 	isb	sy
 80099d4:	f3bf 8f4f 	dsb	sy
 80099d8:	61fb      	str	r3, [r7, #28]
}
 80099da:	bf00      	nop
 80099dc:	e7fe      	b.n	80099dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80099de:	2350      	movs	r3, #80	; 0x50
 80099e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	2b50      	cmp	r3, #80	; 0x50
 80099e6:	d00a      	beq.n	80099fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80099e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ec:	f383 8811 	msr	BASEPRI, r3
 80099f0:	f3bf 8f6f 	isb	sy
 80099f4:	f3bf 8f4f 	dsb	sy
 80099f8:	61bb      	str	r3, [r7, #24]
}
 80099fa:	bf00      	nop
 80099fc:	e7fe      	b.n	80099fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80099fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00d      	beq.n	8009a26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0c:	2201      	movs	r2, #1
 8009a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	68f8      	ldr	r0, [r7, #12]
 8009a22:	f000 f83f 	bl	8009aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3730      	adds	r7, #48	; 0x30
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08a      	sub	sp, #40	; 0x28
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d10a      	bne.n	8009a5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a48:	f383 8811 	msr	BASEPRI, r3
 8009a4c:	f3bf 8f6f 	isb	sy
 8009a50:	f3bf 8f4f 	dsb	sy
 8009a54:	613b      	str	r3, [r7, #16]
}
 8009a56:	bf00      	nop
 8009a58:	e7fe      	b.n	8009a58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	68ba      	ldr	r2, [r7, #8]
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
 8009a62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	3350      	adds	r3, #80	; 0x50
 8009a68:	4618      	mov	r0, r3
 8009a6a:	f002 fcd5 	bl	800c418 <pvPortMalloc>
 8009a6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009a70:	69bb      	ldr	r3, [r7, #24]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d011      	beq.n	8009a9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	3350      	adds	r3, #80	; 0x50
 8009a7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009a88:	79fa      	ldrb	r2, [r7, #7]
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	68f8      	ldr	r0, [r7, #12]
 8009a96:	f000 f805 	bl	8009aa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009a9a:	69bb      	ldr	r3, [r7, #24]
	}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3720      	adds	r7, #32
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	60b9      	str	r1, [r7, #8]
 8009aae:	607a      	str	r2, [r7, #4]
 8009ab0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009ab2:	68bb      	ldr	r3, [r7, #8]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d103      	bne.n	8009ac0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009ab8:	69bb      	ldr	r3, [r7, #24]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e002      	b.n	8009ac6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ac6:	69bb      	ldr	r3, [r7, #24]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009acc:	69bb      	ldr	r3, [r7, #24]
 8009ace:	68ba      	ldr	r2, [r7, #8]
 8009ad0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ad2:	2101      	movs	r1, #1
 8009ad4:	69b8      	ldr	r0, [r7, #24]
 8009ad6:	f7ff fecb 	bl	8009870 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009ada:	69bb      	ldr	r3, [r7, #24]
 8009adc:	78fa      	ldrb	r2, [r7, #3]
 8009ade:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ae2:	bf00      	nop
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b08a      	sub	sp, #40	; 0x28
 8009aee:	af02      	add	r7, sp, #8
 8009af0:	60f8      	str	r0, [r7, #12]
 8009af2:	60b9      	str	r1, [r7, #8]
 8009af4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d10a      	bne.n	8009b12 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	61bb      	str	r3, [r7, #24]
}
 8009b0e:	bf00      	nop
 8009b10:	e7fe      	b.n	8009b10 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d90a      	bls.n	8009b30 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	617b      	str	r3, [r7, #20]
}
 8009b2c:	bf00      	nop
 8009b2e:	e7fe      	b.n	8009b2e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b30:	2302      	movs	r3, #2
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	2100      	movs	r1, #0
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff ff00 	bl	8009940 <xQueueGenericCreateStatic>
 8009b40:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d002      	beq.n	8009b4e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b4e:	69fb      	ldr	r3, [r7, #28]
	}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3720      	adds	r7, #32
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b086      	sub	sp, #24
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10a      	bne.n	8009b7e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	613b      	str	r3, [r7, #16]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b7e:	683a      	ldr	r2, [r7, #0]
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d90a      	bls.n	8009b9c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	60fb      	str	r3, [r7, #12]
}
 8009b98:	bf00      	nop
 8009b9a:	e7fe      	b.n	8009b9a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f7ff ff45 	bl	8009a30 <xQueueGenericCreate>
 8009ba6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d002      	beq.n	8009bb4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	683a      	ldr	r2, [r7, #0]
 8009bb2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bb4:	697b      	ldr	r3, [r7, #20]
	}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b08e      	sub	sp, #56	; 0x38
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	60f8      	str	r0, [r7, #12]
 8009bc8:	60b9      	str	r1, [r7, #8]
 8009bca:	607a      	str	r2, [r7, #4]
 8009bcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <xQueueGenericSend+0x32>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d103      	bne.n	8009c00 <xQueueGenericSend+0x40>
 8009bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d101      	bne.n	8009c04 <xQueueGenericSend+0x44>
 8009c00:	2301      	movs	r3, #1
 8009c02:	e000      	b.n	8009c06 <xQueueGenericSend+0x46>
 8009c04:	2300      	movs	r3, #0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <xQueueGenericSend+0x60>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	2b02      	cmp	r3, #2
 8009c24:	d103      	bne.n	8009c2e <xQueueGenericSend+0x6e>
 8009c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2a:	2b01      	cmp	r3, #1
 8009c2c:	d101      	bne.n	8009c32 <xQueueGenericSend+0x72>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e000      	b.n	8009c34 <xQueueGenericSend+0x74>
 8009c32:	2300      	movs	r3, #0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10a      	bne.n	8009c4e <xQueueGenericSend+0x8e>
	__asm volatile
 8009c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3c:	f383 8811 	msr	BASEPRI, r3
 8009c40:	f3bf 8f6f 	isb	sy
 8009c44:	f3bf 8f4f 	dsb	sy
 8009c48:	623b      	str	r3, [r7, #32]
}
 8009c4a:	bf00      	nop
 8009c4c:	e7fe      	b.n	8009c4c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c4e:	f001 fc65 	bl	800b51c <xTaskGetSchedulerState>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d102      	bne.n	8009c5e <xQueueGenericSend+0x9e>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d101      	bne.n	8009c62 <xQueueGenericSend+0xa2>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	e000      	b.n	8009c64 <xQueueGenericSend+0xa4>
 8009c62:	2300      	movs	r3, #0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d10a      	bne.n	8009c7e <xQueueGenericSend+0xbe>
	__asm volatile
 8009c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c6c:	f383 8811 	msr	BASEPRI, r3
 8009c70:	f3bf 8f6f 	isb	sy
 8009c74:	f3bf 8f4f 	dsb	sy
 8009c78:	61fb      	str	r3, [r7, #28]
}
 8009c7a:	bf00      	nop
 8009c7c:	e7fe      	b.n	8009c7c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c7e:	f002 faa9 	bl	800c1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d302      	bcc.n	8009c94 <xQueueGenericSend+0xd4>
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d129      	bne.n	8009ce8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c94:	683a      	ldr	r2, [r7, #0]
 8009c96:	68b9      	ldr	r1, [r7, #8]
 8009c98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c9a:	f000 fc5e 	bl	800a55a <prvCopyDataToQueue>
 8009c9e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d010      	beq.n	8009cca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009caa:	3324      	adds	r3, #36	; 0x24
 8009cac:	4618      	mov	r0, r3
 8009cae:	f001 fa73 	bl	800b198 <xTaskRemoveFromEventList>
 8009cb2:	4603      	mov	r3, r0
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d013      	beq.n	8009ce0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cb8:	4b3f      	ldr	r3, [pc, #252]	; (8009db8 <xQueueGenericSend+0x1f8>)
 8009cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	f3bf 8f4f 	dsb	sy
 8009cc4:	f3bf 8f6f 	isb	sy
 8009cc8:	e00a      	b.n	8009ce0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cd0:	4b39      	ldr	r3, [pc, #228]	; (8009db8 <xQueueGenericSend+0x1f8>)
 8009cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd6:	601a      	str	r2, [r3, #0]
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009ce0:	f002 faa8 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e063      	b.n	8009db0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d103      	bne.n	8009cf6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cee:	f002 faa1 	bl	800c234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e05c      	b.n	8009db0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d106      	bne.n	8009d0a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	4618      	mov	r0, r3
 8009d02:	f001 faad 	bl	800b260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d06:	2301      	movs	r3, #1
 8009d08:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d0a:	f002 fa93 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d0e:	f001 f819 	bl	800ad44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d12:	f002 fa5f 	bl	800c1d4 <vPortEnterCritical>
 8009d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d18:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d1c:	b25b      	sxtb	r3, r3
 8009d1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d22:	d103      	bne.n	8009d2c <xQueueGenericSend+0x16c>
 8009d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d26:	2200      	movs	r2, #0
 8009d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d32:	b25b      	sxtb	r3, r3
 8009d34:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d38:	d103      	bne.n	8009d42 <xQueueGenericSend+0x182>
 8009d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009d42:	f002 fa77 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d46:	1d3a      	adds	r2, r7, #4
 8009d48:	f107 0314 	add.w	r3, r7, #20
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f001 fa9c 	bl	800b28c <xTaskCheckForTimeOut>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d124      	bne.n	8009da4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d5a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d5c:	f000 fcf5 	bl	800a74a <prvIsQueueFull>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d018      	beq.n	8009d98 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d68:	3310      	adds	r3, #16
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	4611      	mov	r1, r2
 8009d6e:	4618      	mov	r0, r3
 8009d70:	f001 f9c2 	bl	800b0f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d76:	f000 fc80 	bl	800a67a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d7a:	f000 fff1 	bl	800ad60 <xTaskResumeAll>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f47f af7c 	bne.w	8009c7e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009d86:	4b0c      	ldr	r3, [pc, #48]	; (8009db8 <xQueueGenericSend+0x1f8>)
 8009d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	e772      	b.n	8009c7e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009d98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009d9a:	f000 fc6e 	bl	800a67a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d9e:	f000 ffdf 	bl	800ad60 <xTaskResumeAll>
 8009da2:	e76c      	b.n	8009c7e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009da4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009da6:	f000 fc68 	bl	800a67a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009daa:	f000 ffd9 	bl	800ad60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3738      	adds	r7, #56	; 0x38
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b090      	sub	sp, #64	; 0x40
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	607a      	str	r2, [r7, #4]
 8009dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d103      	bne.n	8009df8 <xQueueGenericSendFromISR+0x3c>
 8009df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d101      	bne.n	8009dfc <xQueueGenericSendFromISR+0x40>
 8009df8:	2301      	movs	r3, #1
 8009dfa:	e000      	b.n	8009dfe <xQueueGenericSendFromISR+0x42>
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d10a      	bne.n	8009e18 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e06:	f383 8811 	msr	BASEPRI, r3
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	f3bf 8f4f 	dsb	sy
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009e14:	bf00      	nop
 8009e16:	e7fe      	b.n	8009e16 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d103      	bne.n	8009e26 <xQueueGenericSendFromISR+0x6a>
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d101      	bne.n	8009e2a <xQueueGenericSendFromISR+0x6e>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <xQueueGenericSendFromISR+0x70>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d10a      	bne.n	8009e46 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e34:	f383 8811 	msr	BASEPRI, r3
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	f3bf 8f4f 	dsb	sy
 8009e40:	623b      	str	r3, [r7, #32]
}
 8009e42:	bf00      	nop
 8009e44:	e7fe      	b.n	8009e44 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e46:	f002 faa7 	bl	800c398 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e4a:	f3ef 8211 	mrs	r2, BASEPRI
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	61fa      	str	r2, [r7, #28]
 8009e60:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e62:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e64:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d302      	bcc.n	8009e78 <xQueueGenericSendFromISR+0xbc>
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	2b02      	cmp	r3, #2
 8009e76:	d12f      	bne.n	8009ed8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e86:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e88:	683a      	ldr	r2, [r7, #0]
 8009e8a:	68b9      	ldr	r1, [r7, #8]
 8009e8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009e8e:	f000 fb64 	bl	800a55a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009e92:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009e96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e9a:	d112      	bne.n	8009ec2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d016      	beq.n	8009ed2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea6:	3324      	adds	r3, #36	; 0x24
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f001 f975 	bl	800b198 <xTaskRemoveFromEventList>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00e      	beq.n	8009ed2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00b      	beq.n	8009ed2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	601a      	str	r2, [r3, #0]
 8009ec0:	e007      	b.n	8009ed2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ec2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	b25a      	sxtb	r2, r3
 8009ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ece:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ed6:	e001      	b.n	8009edc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ede:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ee6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	3740      	adds	r7, #64	; 0x40
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}

08009ef2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009ef2:	b580      	push	{r7, lr}
 8009ef4:	b08e      	sub	sp, #56	; 0x38
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d10a      	bne.n	8009f1c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8009f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f0a:	f383 8811 	msr	BASEPRI, r3
 8009f0e:	f3bf 8f6f 	isb	sy
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	623b      	str	r3, [r7, #32]
}
 8009f18:	bf00      	nop
 8009f1a:	e7fe      	b.n	8009f1a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00a      	beq.n	8009f3a <xQueueGiveFromISR+0x48>
	__asm volatile
 8009f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f28:	f383 8811 	msr	BASEPRI, r3
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f3bf 8f4f 	dsb	sy
 8009f34:	61fb      	str	r3, [r7, #28]
}
 8009f36:	bf00      	nop
 8009f38:	e7fe      	b.n	8009f38 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d103      	bne.n	8009f4a <xQueueGiveFromISR+0x58>
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	689b      	ldr	r3, [r3, #8]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <xQueueGiveFromISR+0x5c>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <xQueueGiveFromISR+0x5e>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10a      	bne.n	8009f6a <xQueueGiveFromISR+0x78>
	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	61bb      	str	r3, [r7, #24]
}
 8009f66:	bf00      	nop
 8009f68:	e7fe      	b.n	8009f68 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f6a:	f002 fa15 	bl	800c398 <vPortValidateInterruptPriority>
	__asm volatile
 8009f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	617a      	str	r2, [r7, #20]
 8009f84:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f86:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f88:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d22b      	bcs.n	8009ff2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fa6:	1c5a      	adds	r2, r3, #1
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009fb4:	d112      	bne.n	8009fdc <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d016      	beq.n	8009fec <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc0:	3324      	adds	r3, #36	; 0x24
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f001 f8e8 	bl	800b198 <xTaskRemoveFromEventList>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00e      	beq.n	8009fec <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	e007      	b.n	8009fec <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe0:	3301      	adds	r3, #1
 8009fe2:	b2db      	uxtb	r3, r3
 8009fe4:	b25a      	sxtb	r2, r3
 8009fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009fec:	2301      	movs	r3, #1
 8009fee:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff0:	e001      	b.n	8009ff6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8009ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ff8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f383 8811 	msr	BASEPRI, r3
}
 800a000:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a004:	4618      	mov	r0, r3
 800a006:	3738      	adds	r7, #56	; 0x38
 800a008:	46bd      	mov	sp, r7
 800a00a:	bd80      	pop	{r7, pc}

0800a00c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b08c      	sub	sp, #48	; 0x30
 800a010:	af00      	add	r7, sp, #0
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	60b9      	str	r1, [r7, #8]
 800a016:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a018:	2300      	movs	r3, #0
 800a01a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a022:	2b00      	cmp	r3, #0
 800a024:	d10a      	bne.n	800a03c <xQueueReceive+0x30>
	__asm volatile
 800a026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02a:	f383 8811 	msr	BASEPRI, r3
 800a02e:	f3bf 8f6f 	isb	sy
 800a032:	f3bf 8f4f 	dsb	sy
 800a036:	623b      	str	r3, [r7, #32]
}
 800a038:	bf00      	nop
 800a03a:	e7fe      	b.n	800a03a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d103      	bne.n	800a04a <xQueueReceive+0x3e>
 800a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a046:	2b00      	cmp	r3, #0
 800a048:	d101      	bne.n	800a04e <xQueueReceive+0x42>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e000      	b.n	800a050 <xQueueReceive+0x44>
 800a04e:	2300      	movs	r3, #0
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10a      	bne.n	800a06a <xQueueReceive+0x5e>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	61fb      	str	r3, [r7, #28]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a06a:	f001 fa57 	bl	800b51c <xTaskGetSchedulerState>
 800a06e:	4603      	mov	r3, r0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d102      	bne.n	800a07a <xQueueReceive+0x6e>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <xQueueReceive+0x72>
 800a07a:	2301      	movs	r3, #1
 800a07c:	e000      	b.n	800a080 <xQueueReceive+0x74>
 800a07e:	2300      	movs	r3, #0
 800a080:	2b00      	cmp	r3, #0
 800a082:	d10a      	bne.n	800a09a <xQueueReceive+0x8e>
	__asm volatile
 800a084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a088:	f383 8811 	msr	BASEPRI, r3
 800a08c:	f3bf 8f6f 	isb	sy
 800a090:	f3bf 8f4f 	dsb	sy
 800a094:	61bb      	str	r3, [r7, #24]
}
 800a096:	bf00      	nop
 800a098:	e7fe      	b.n	800a098 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a09a:	f002 f89b 	bl	800c1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d01f      	beq.n	800a0ea <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0aa:	68b9      	ldr	r1, [r7, #8]
 800a0ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a0ae:	f000 fabe 	bl	800a62e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b4:	1e5a      	subs	r2, r3, #1
 800a0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d00f      	beq.n	800a0e2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f001 f866 	bl	800b198 <xTaskRemoveFromEventList>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d007      	beq.n	800a0e2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0d2:	4b3d      	ldr	r3, [pc, #244]	; (800a1c8 <xQueueReceive+0x1bc>)
 800a0d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a0e2:	f002 f8a7 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	e069      	b.n	800a1be <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d103      	bne.n	800a0f8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a0f0:	f002 f8a0 	bl	800c234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e062      	b.n	800a1be <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d106      	bne.n	800a10c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a0fe:	f107 0310 	add.w	r3, r7, #16
 800a102:	4618      	mov	r0, r3
 800a104:	f001 f8ac 	bl	800b260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a108:	2301      	movs	r3, #1
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a10c:	f002 f892 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a110:	f000 fe18 	bl	800ad44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a114:	f002 f85e 	bl	800c1d4 <vPortEnterCritical>
 800a118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a11a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a11e:	b25b      	sxtb	r3, r3
 800a120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a124:	d103      	bne.n	800a12e <xQueueReceive+0x122>
 800a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a134:	b25b      	sxtb	r3, r3
 800a136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a13a:	d103      	bne.n	800a144 <xQueueReceive+0x138>
 800a13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a13e:	2200      	movs	r2, #0
 800a140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a144:	f002 f876 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a148:	1d3a      	adds	r2, r7, #4
 800a14a:	f107 0310 	add.w	r3, r7, #16
 800a14e:	4611      	mov	r1, r2
 800a150:	4618      	mov	r0, r3
 800a152:	f001 f89b 	bl	800b28c <xTaskCheckForTimeOut>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d123      	bne.n	800a1a4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a15c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a15e:	f000 fade 	bl	800a71e <prvIsQueueEmpty>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	d017      	beq.n	800a198 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a16a:	3324      	adds	r3, #36	; 0x24
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	4611      	mov	r1, r2
 800a170:	4618      	mov	r0, r3
 800a172:	f000 ffc1 	bl	800b0f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a178:	f000 fa7f 	bl	800a67a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a17c:	f000 fdf0 	bl	800ad60 <xTaskResumeAll>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d189      	bne.n	800a09a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a186:	4b10      	ldr	r3, [pc, #64]	; (800a1c8 <xQueueReceive+0x1bc>)
 800a188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	f3bf 8f4f 	dsb	sy
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	e780      	b.n	800a09a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a19a:	f000 fa6e 	bl	800a67a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a19e:	f000 fddf 	bl	800ad60 <xTaskResumeAll>
 800a1a2:	e77a      	b.n	800a09a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1a6:	f000 fa68 	bl	800a67a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1aa:	f000 fdd9 	bl	800ad60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a1b0:	f000 fab5 	bl	800a71e <prvIsQueueEmpty>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	f43f af6f 	beq.w	800a09a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3730      	adds	r7, #48	; 0x30
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	e000ed04 	.word	0xe000ed04

0800a1cc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b08e      	sub	sp, #56	; 0x38
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d10a      	bne.n	800a1fe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a1e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ec:	f383 8811 	msr	BASEPRI, r3
 800a1f0:	f3bf 8f6f 	isb	sy
 800a1f4:	f3bf 8f4f 	dsb	sy
 800a1f8:	623b      	str	r3, [r7, #32]
}
 800a1fa:	bf00      	nop
 800a1fc:	e7fe      	b.n	800a1fc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	61fb      	str	r3, [r7, #28]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a21c:	f001 f97e 	bl	800b51c <xTaskGetSchedulerState>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d102      	bne.n	800a22c <xQueueSemaphoreTake+0x60>
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d101      	bne.n	800a230 <xQueueSemaphoreTake+0x64>
 800a22c:	2301      	movs	r3, #1
 800a22e:	e000      	b.n	800a232 <xQueueSemaphoreTake+0x66>
 800a230:	2300      	movs	r3, #0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a236:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a23a:	f383 8811 	msr	BASEPRI, r3
 800a23e:	f3bf 8f6f 	isb	sy
 800a242:	f3bf 8f4f 	dsb	sy
 800a246:	61bb      	str	r3, [r7, #24]
}
 800a248:	bf00      	nop
 800a24a:	e7fe      	b.n	800a24a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a24c:	f001 ffc2 	bl	800c1d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a254:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d024      	beq.n	800a2a6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25e:	1e5a      	subs	r2, r3, #1
 800a260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a262:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d104      	bne.n	800a276 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a26c:	f001 facc 	bl	800b808 <pvTaskIncrementMutexHeldCount>
 800a270:	4602      	mov	r2, r0
 800a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a274:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00f      	beq.n	800a29e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	3310      	adds	r3, #16
 800a282:	4618      	mov	r0, r3
 800a284:	f000 ff88 	bl	800b198 <xTaskRemoveFromEventList>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d007      	beq.n	800a29e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a28e:	4b54      	ldr	r3, [pc, #336]	; (800a3e0 <xQueueSemaphoreTake+0x214>)
 800a290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a29e:	f001 ffc9 	bl	800c234 <vPortExitCritical>
				return pdPASS;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e097      	b.n	800a3d6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d111      	bne.n	800a2d0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00a      	beq.n	800a2c8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a2b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b6:	f383 8811 	msr	BASEPRI, r3
 800a2ba:	f3bf 8f6f 	isb	sy
 800a2be:	f3bf 8f4f 	dsb	sy
 800a2c2:	617b      	str	r3, [r7, #20]
}
 800a2c4:	bf00      	nop
 800a2c6:	e7fe      	b.n	800a2c6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2c8:	f001 ffb4 	bl	800c234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	e082      	b.n	800a3d6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d106      	bne.n	800a2e4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2d6:	f107 030c 	add.w	r3, r7, #12
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f000 ffc0 	bl	800b260 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a2e4:	f001 ffa6 	bl	800c234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a2e8:	f000 fd2c 	bl	800ad44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a2ec:	f001 ff72 	bl	800c1d4 <vPortEnterCritical>
 800a2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a2f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2f6:	b25b      	sxtb	r3, r3
 800a2f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2fc:	d103      	bne.n	800a306 <xQueueSemaphoreTake+0x13a>
 800a2fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a300:	2200      	movs	r2, #0
 800a302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a30c:	b25b      	sxtb	r3, r3
 800a30e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a312:	d103      	bne.n	800a31c <xQueueSemaphoreTake+0x150>
 800a314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a31c:	f001 ff8a 	bl	800c234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a320:	463a      	mov	r2, r7
 800a322:	f107 030c 	add.w	r3, r7, #12
 800a326:	4611      	mov	r1, r2
 800a328:	4618      	mov	r0, r3
 800a32a:	f000 ffaf 	bl	800b28c <xTaskCheckForTimeOut>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d132      	bne.n	800a39a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a334:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a336:	f000 f9f2 	bl	800a71e <prvIsQueueEmpty>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d026      	beq.n	800a38e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d109      	bne.n	800a35c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a348:	f001 ff44 	bl	800c1d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a34c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	4618      	mov	r0, r3
 800a352:	f001 f901 	bl	800b558 <xTaskPriorityInherit>
 800a356:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a358:	f001 ff6c 	bl	800c234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a35e:	3324      	adds	r3, #36	; 0x24
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	4611      	mov	r1, r2
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fec7 	bl	800b0f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a36a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a36c:	f000 f985 	bl	800a67a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a370:	f000 fcf6 	bl	800ad60 <xTaskResumeAll>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	f47f af68 	bne.w	800a24c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a37c:	4b18      	ldr	r3, [pc, #96]	; (800a3e0 <xQueueSemaphoreTake+0x214>)
 800a37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	e75e      	b.n	800a24c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a38e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a390:	f000 f973 	bl	800a67a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a394:	f000 fce4 	bl	800ad60 <xTaskResumeAll>
 800a398:	e758      	b.n	800a24c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a39a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a39c:	f000 f96d 	bl	800a67a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3a0:	f000 fcde 	bl	800ad60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3a6:	f000 f9ba 	bl	800a71e <prvIsQueueEmpty>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	f43f af4d 	beq.w	800a24c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00d      	beq.n	800a3d4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a3b8:	f001 ff0c 	bl	800c1d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a3be:	f000 f8b4 	bl	800a52a <prvGetDisinheritPriorityAfterTimeout>
 800a3c2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3c6:	689b      	ldr	r3, [r3, #8]
 800a3c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 f99a 	bl	800b704 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3d0:	f001 ff30 	bl	800c234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3738      	adds	r7, #56	; 0x38
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08e      	sub	sp, #56	; 0x38
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10a      	bne.n	800a410 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fe:	f383 8811 	msr	BASEPRI, r3
 800a402:	f3bf 8f6f 	isb	sy
 800a406:	f3bf 8f4f 	dsb	sy
 800a40a:	623b      	str	r3, [r7, #32]
}
 800a40c:	bf00      	nop
 800a40e:	e7fe      	b.n	800a40e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d103      	bne.n	800a41e <xQueueReceiveFromISR+0x3a>
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d101      	bne.n	800a422 <xQueueReceiveFromISR+0x3e>
 800a41e:	2301      	movs	r3, #1
 800a420:	e000      	b.n	800a424 <xQueueReceiveFromISR+0x40>
 800a422:	2300      	movs	r3, #0
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42c:	f383 8811 	msr	BASEPRI, r3
 800a430:	f3bf 8f6f 	isb	sy
 800a434:	f3bf 8f4f 	dsb	sy
 800a438:	61fb      	str	r3, [r7, #28]
}
 800a43a:	bf00      	nop
 800a43c:	e7fe      	b.n	800a43c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a43e:	f001 ffab 	bl	800c398 <vPortValidateInterruptPriority>
	__asm volatile
 800a442:	f3ef 8211 	mrs	r2, BASEPRI
 800a446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a44a:	f383 8811 	msr	BASEPRI, r3
 800a44e:	f3bf 8f6f 	isb	sy
 800a452:	f3bf 8f4f 	dsb	sy
 800a456:	61ba      	str	r2, [r7, #24]
 800a458:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a45a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a45c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a462:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a466:	2b00      	cmp	r3, #0
 800a468:	d02f      	beq.n	800a4ca <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a474:	68b9      	ldr	r1, [r7, #8]
 800a476:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a478:	f000 f8d9 	bl	800a62e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	1e5a      	subs	r2, r3, #1
 800a480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a482:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a484:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a48c:	d112      	bne.n	800a4b4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d016      	beq.n	800a4c4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	3310      	adds	r3, #16
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 fe7c 	bl	800b198 <xTaskRemoveFromEventList>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00e      	beq.n	800a4c4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d00b      	beq.n	800a4c4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
 800a4b2:	e007      	b.n	800a4c4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	b25a      	sxtb	r2, r3
 800a4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c8:	e001      	b.n	800a4ce <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	637b      	str	r3, [r7, #52]	; 0x34
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	f383 8811 	msr	BASEPRI, r3
}
 800a4d8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3738      	adds	r7, #56	; 0x38
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d10a      	bne.n	800a50c <vQueueDelete+0x28>
	__asm volatile
 800a4f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fa:	f383 8811 	msr	BASEPRI, r3
 800a4fe:	f3bf 8f6f 	isb	sy
 800a502:	f3bf 8f4f 	dsb	sy
 800a506:	60bb      	str	r3, [r7, #8]
}
 800a508:	bf00      	nop
 800a50a:	e7fe      	b.n	800a50a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 f95f 	bl	800a7d0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f002 f847 	bl	800c5b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a522:	bf00      	nop
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a536:	2b00      	cmp	r3, #0
 800a538:	d006      	beq.n	800a548 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a544:	60fb      	str	r3, [r7, #12]
 800a546:	e001      	b.n	800a54c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a548:	2300      	movs	r3, #0
 800a54a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a54c:	68fb      	ldr	r3, [r7, #12]
	}
 800a54e:	4618      	mov	r0, r3
 800a550:	3714      	adds	r7, #20
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr

0800a55a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a55a:	b580      	push	{r7, lr}
 800a55c:	b086      	sub	sp, #24
 800a55e:	af00      	add	r7, sp, #0
 800a560:	60f8      	str	r0, [r7, #12]
 800a562:	60b9      	str	r1, [r7, #8]
 800a564:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a566:	2300      	movs	r3, #0
 800a568:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a56e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10d      	bne.n	800a594 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d14d      	bne.n	800a61c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	4618      	mov	r0, r3
 800a586:	f001 f84f 	bl	800b628 <xTaskPriorityDisinherit>
 800a58a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	609a      	str	r2, [r3, #8]
 800a592:	e043      	b.n	800a61c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d119      	bne.n	800a5ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	6858      	ldr	r0, [r3, #4]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	68b9      	ldr	r1, [r7, #8]
 800a5a6:	f002 fac3 	bl	800cb30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685a      	ldr	r2, [r3, #4]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b2:	441a      	add	r2, r3
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	685a      	ldr	r2, [r3, #4]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d32b      	bcc.n	800a61c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	605a      	str	r2, [r3, #4]
 800a5cc:	e026      	b.n	800a61c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	68d8      	ldr	r0, [r3, #12]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	68b9      	ldr	r1, [r7, #8]
 800a5da:	f002 faa9 	bl	800cb30 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5e6:	425b      	negs	r3, r3
 800a5e8:	441a      	add	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d207      	bcs.n	800a60a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	689a      	ldr	r2, [r3, #8]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a602:	425b      	negs	r3, r3
 800a604:	441a      	add	r2, r3
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d105      	bne.n	800a61c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d002      	beq.n	800a61c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	3b01      	subs	r3, #1
 800a61a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a624:	697b      	ldr	r3, [r7, #20]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b082      	sub	sp, #8
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d018      	beq.n	800a672 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a648:	441a      	add	r2, r3
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	68da      	ldr	r2, [r3, #12]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	689b      	ldr	r3, [r3, #8]
 800a656:	429a      	cmp	r2, r3
 800a658:	d303      	bcc.n	800a662 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68d9      	ldr	r1, [r3, #12]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a66a:	461a      	mov	r2, r3
 800a66c:	6838      	ldr	r0, [r7, #0]
 800a66e:	f002 fa5f 	bl	800cb30 <memcpy>
	}
}
 800a672:	bf00      	nop
 800a674:	3708      	adds	r7, #8
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}

0800a67a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a67a:	b580      	push	{r7, lr}
 800a67c:	b084      	sub	sp, #16
 800a67e:	af00      	add	r7, sp, #0
 800a680:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a682:	f001 fda7 	bl	800c1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a68c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a68e:	e011      	b.n	800a6b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	2b00      	cmp	r3, #0
 800a696:	d012      	beq.n	800a6be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	3324      	adds	r3, #36	; 0x24
 800a69c:	4618      	mov	r0, r3
 800a69e:	f000 fd7b 	bl	800b198 <xTaskRemoveFromEventList>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d001      	beq.n	800a6ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a6a8:	f000 fe52 	bl	800b350 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a6ac:	7bfb      	ldrb	r3, [r7, #15]
 800a6ae:	3b01      	subs	r3, #1
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a6b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	dce9      	bgt.n	800a690 <prvUnlockQueue+0x16>
 800a6bc:	e000      	b.n	800a6c0 <prvUnlockQueue+0x46>
					break;
 800a6be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	22ff      	movs	r2, #255	; 0xff
 800a6c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a6c8:	f001 fdb4 	bl	800c234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a6cc:	f001 fd82 	bl	800c1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a6d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6d8:	e011      	b.n	800a6fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d012      	beq.n	800a708 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	3310      	adds	r3, #16
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f000 fd56 	bl	800b198 <xTaskRemoveFromEventList>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a6f2:	f000 fe2d 	bl	800b350 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a6f6:	7bbb      	ldrb	r3, [r7, #14]
 800a6f8:	3b01      	subs	r3, #1
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a6fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a702:	2b00      	cmp	r3, #0
 800a704:	dce9      	bgt.n	800a6da <prvUnlockQueue+0x60>
 800a706:	e000      	b.n	800a70a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a708:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	22ff      	movs	r2, #255	; 0xff
 800a70e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a712:	f001 fd8f 	bl	800c234 <vPortExitCritical>
}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a726:	f001 fd55 	bl	800c1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d102      	bne.n	800a738 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e001      	b.n	800a73c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a738:	2300      	movs	r3, #0
 800a73a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a73c:	f001 fd7a 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800a740:	68fb      	ldr	r3, [r7, #12]
}
 800a742:	4618      	mov	r0, r3
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}

0800a74a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a74a:	b580      	push	{r7, lr}
 800a74c:	b084      	sub	sp, #16
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a752:	f001 fd3f 	bl	800c1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a75e:	429a      	cmp	r2, r3
 800a760:	d102      	bne.n	800a768 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a762:	2301      	movs	r3, #1
 800a764:	60fb      	str	r3, [r7, #12]
 800a766:	e001      	b.n	800a76c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a76c:	f001 fd62 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800a770:	68fb      	ldr	r3, [r7, #12]
}
 800a772:	4618      	mov	r0, r3
 800a774:	3710      	adds	r7, #16
 800a776:	46bd      	mov	sp, r7
 800a778:	bd80      	pop	{r7, pc}
	...

0800a77c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a77c:	b480      	push	{r7}
 800a77e:	b085      	sub	sp, #20
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
 800a78a:	e014      	b.n	800a7b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a78c:	4a0f      	ldr	r2, [pc, #60]	; (800a7cc <vQueueAddToRegistry+0x50>)
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d10b      	bne.n	800a7b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a798:	490c      	ldr	r1, [pc, #48]	; (800a7cc <vQueueAddToRegistry+0x50>)
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	683a      	ldr	r2, [r7, #0]
 800a79e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a7a2:	4a0a      	ldr	r2, [pc, #40]	; (800a7cc <vQueueAddToRegistry+0x50>)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	00db      	lsls	r3, r3, #3
 800a7a8:	4413      	add	r3, r2
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a7ae:	e006      	b.n	800a7be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b07      	cmp	r3, #7
 800a7ba:	d9e7      	bls.n	800a78c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a7bc:	bf00      	nop
 800a7be:	bf00      	nop
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
 800a7ca:	bf00      	nop
 800a7cc:	20000c94 	.word	0x20000c94

0800a7d0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a7d8:	2300      	movs	r3, #0
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e016      	b.n	800a80c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a7de:	4a10      	ldr	r2, [pc, #64]	; (800a820 <vQueueUnregisterQueue+0x50>)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	00db      	lsls	r3, r3, #3
 800a7e4:	4413      	add	r3, r2
 800a7e6:	685b      	ldr	r3, [r3, #4]
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d10b      	bne.n	800a806 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a7ee:	4a0c      	ldr	r2, [pc, #48]	; (800a820 <vQueueUnregisterQueue+0x50>)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <vQueueUnregisterQueue+0x50>)
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	4413      	add	r3, r2
 800a800:	2200      	movs	r2, #0
 800a802:	605a      	str	r2, [r3, #4]
				break;
 800a804:	e006      	b.n	800a814 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3301      	adds	r3, #1
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	2b07      	cmp	r3, #7
 800a810:	d9e5      	bls.n	800a7de <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a812:	bf00      	nop
 800a814:	bf00      	nop
 800a816:	3714      	adds	r7, #20
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	20000c94 	.word	0x20000c94

0800a824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a834:	f001 fcce 	bl	800c1d4 <vPortEnterCritical>
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a83e:	b25b      	sxtb	r3, r3
 800a840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a844:	d103      	bne.n	800a84e <vQueueWaitForMessageRestricted+0x2a>
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2200      	movs	r2, #0
 800a84a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a854:	b25b      	sxtb	r3, r3
 800a856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a85a:	d103      	bne.n	800a864 <vQueueWaitForMessageRestricted+0x40>
 800a85c:	697b      	ldr	r3, [r7, #20]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a864:	f001 fce6 	bl	800c234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d106      	bne.n	800a87e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	3324      	adds	r3, #36	; 0x24
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	68b9      	ldr	r1, [r7, #8]
 800a878:	4618      	mov	r0, r3
 800a87a:	f000 fc61 	bl	800b140 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a87e:	6978      	ldr	r0, [r7, #20]
 800a880:	f7ff fefb 	bl	800a67a <prvUnlockQueue>
	}
 800a884:	bf00      	nop
 800a886:	3718      	adds	r7, #24
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b08e      	sub	sp, #56	; 0x38
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d10a      	bne.n	800a8b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8a4:	f383 8811 	msr	BASEPRI, r3
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	623b      	str	r3, [r7, #32]
}
 800a8b2:	bf00      	nop
 800a8b4:	e7fe      	b.n	800a8b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <xTaskCreateStatic+0x46>
	__asm volatile
 800a8bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c0:	f383 8811 	msr	BASEPRI, r3
 800a8c4:	f3bf 8f6f 	isb	sy
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	61fb      	str	r3, [r7, #28]
}
 800a8ce:	bf00      	nop
 800a8d0:	e7fe      	b.n	800a8d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a8d2:	23bc      	movs	r3, #188	; 0xbc
 800a8d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	2bbc      	cmp	r3, #188	; 0xbc
 800a8da:	d00a      	beq.n	800a8f2 <xTaskCreateStatic+0x66>
	__asm volatile
 800a8dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e0:	f383 8811 	msr	BASEPRI, r3
 800a8e4:	f3bf 8f6f 	isb	sy
 800a8e8:	f3bf 8f4f 	dsb	sy
 800a8ec:	61bb      	str	r3, [r7, #24]
}
 800a8ee:	bf00      	nop
 800a8f0:	e7fe      	b.n	800a8f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a8f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d01e      	beq.n	800a938 <xTaskCreateStatic+0xac>
 800a8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01b      	beq.n	800a938 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a908:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	2202      	movs	r2, #2
 800a90e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a912:	2300      	movs	r3, #0
 800a914:	9303      	str	r3, [sp, #12]
 800a916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a918:	9302      	str	r3, [sp, #8]
 800a91a:	f107 0314 	add.w	r3, r7, #20
 800a91e:	9301      	str	r3, [sp, #4]
 800a920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a922:	9300      	str	r3, [sp, #0]
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	687a      	ldr	r2, [r7, #4]
 800a928:	68b9      	ldr	r1, [r7, #8]
 800a92a:	68f8      	ldr	r0, [r7, #12]
 800a92c:	f000 f850 	bl	800a9d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a932:	f000 f8f3 	bl	800ab1c <prvAddNewTaskToReadyList>
 800a936:	e001      	b.n	800a93c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a938:	2300      	movs	r3, #0
 800a93a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a93c:	697b      	ldr	r3, [r7, #20]
	}
 800a93e:	4618      	mov	r0, r3
 800a940:	3728      	adds	r7, #40	; 0x28
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}

0800a946 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a946:	b580      	push	{r7, lr}
 800a948:	b08c      	sub	sp, #48	; 0x30
 800a94a:	af04      	add	r7, sp, #16
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	603b      	str	r3, [r7, #0]
 800a952:	4613      	mov	r3, r2
 800a954:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fd5c 	bl	800c418 <pvPortMalloc>
 800a960:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00e      	beq.n	800a986 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a968:	20bc      	movs	r0, #188	; 0xbc
 800a96a:	f001 fd55 	bl	800c418 <pvPortMalloc>
 800a96e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d003      	beq.n	800a97e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a976:	69fb      	ldr	r3, [r7, #28]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	631a      	str	r2, [r3, #48]	; 0x30
 800a97c:	e005      	b.n	800a98a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a97e:	6978      	ldr	r0, [r7, #20]
 800a980:	f001 fe16 	bl	800c5b0 <vPortFree>
 800a984:	e001      	b.n	800a98a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a986:	2300      	movs	r3, #0
 800a988:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d017      	beq.n	800a9c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	2200      	movs	r2, #0
 800a994:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a998:	88fa      	ldrh	r2, [r7, #6]
 800a99a:	2300      	movs	r3, #0
 800a99c:	9303      	str	r3, [sp, #12]
 800a99e:	69fb      	ldr	r3, [r7, #28]
 800a9a0:	9302      	str	r3, [sp, #8]
 800a9a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a4:	9301      	str	r3, [sp, #4]
 800a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a8:	9300      	str	r3, [sp, #0]
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	68b9      	ldr	r1, [r7, #8]
 800a9ae:	68f8      	ldr	r0, [r7, #12]
 800a9b0:	f000 f80e 	bl	800a9d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9b4:	69f8      	ldr	r0, [r7, #28]
 800a9b6:	f000 f8b1 	bl	800ab1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	61bb      	str	r3, [r7, #24]
 800a9be:	e002      	b.n	800a9c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a9c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a9c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a9c6:	69bb      	ldr	r3, [r7, #24]
	}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3720      	adds	r7, #32
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b088      	sub	sp, #32
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	60b9      	str	r1, [r7, #8]
 800a9da:	607a      	str	r2, [r7, #4]
 800a9dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	21a5      	movs	r1, #165	; 0xa5
 800a9ea:	f002 f8af 	bl	800cb4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a9f8:	3b01      	subs	r3, #1
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	4413      	add	r3, r2
 800a9fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	f023 0307 	bic.w	r3, r3, #7
 800aa06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	f003 0307 	and.w	r3, r3, #7
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00a      	beq.n	800aa28 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa16:	f383 8811 	msr	BASEPRI, r3
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	f3bf 8f4f 	dsb	sy
 800aa22:	617b      	str	r3, [r7, #20]
}
 800aa24:	bf00      	nop
 800aa26:	e7fe      	b.n	800aa26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d01f      	beq.n	800aa6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61fb      	str	r3, [r7, #28]
 800aa32:	e012      	b.n	800aa5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa34:	68ba      	ldr	r2, [r7, #8]
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	7819      	ldrb	r1, [r3, #0]
 800aa3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	4413      	add	r3, r2
 800aa42:	3334      	adds	r3, #52	; 0x34
 800aa44:	460a      	mov	r2, r1
 800aa46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	4413      	add	r3, r2
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d006      	beq.n	800aa62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa54:	69fb      	ldr	r3, [r7, #28]
 800aa56:	3301      	adds	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
 800aa5a:	69fb      	ldr	r3, [r7, #28]
 800aa5c:	2b0f      	cmp	r3, #15
 800aa5e:	d9e9      	bls.n	800aa34 <prvInitialiseNewTask+0x64>
 800aa60:	e000      	b.n	800aa64 <prvInitialiseNewTask+0x94>
			{
				break;
 800aa62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aa64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa66:	2200      	movs	r2, #0
 800aa68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa6c:	e003      	b.n	800aa76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa70:	2200      	movs	r2, #0
 800aa72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aa76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa78:	2b37      	cmp	r3, #55	; 0x37
 800aa7a:	d901      	bls.n	800aa80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aa7c:	2337      	movs	r3, #55	; 0x37
 800aa7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aa80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aa8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa8e:	2200      	movs	r2, #0
 800aa90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aa92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa94:	3304      	adds	r3, #4
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fe56 	bl	8009748 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aa9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9e:	3318      	adds	r3, #24
 800aaa0:	4618      	mov	r0, r3
 800aaa2:	f7fe fe51 	bl	8009748 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aabc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabe:	2200      	movs	r2, #0
 800aac0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	2200      	movs	r2, #0
 800aac8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	3354      	adds	r3, #84	; 0x54
 800aad0:	2260      	movs	r2, #96	; 0x60
 800aad2:	2100      	movs	r1, #0
 800aad4:	4618      	mov	r0, r3
 800aad6:	f002 f839 	bl	800cb4c <memset>
 800aada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aadc:	4a0c      	ldr	r2, [pc, #48]	; (800ab10 <prvInitialiseNewTask+0x140>)
 800aade:	659a      	str	r2, [r3, #88]	; 0x58
 800aae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae2:	4a0c      	ldr	r2, [pc, #48]	; (800ab14 <prvInitialiseNewTask+0x144>)
 800aae4:	65da      	str	r2, [r3, #92]	; 0x5c
 800aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae8:	4a0b      	ldr	r2, [pc, #44]	; (800ab18 <prvInitialiseNewTask+0x148>)
 800aaea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aaec:	683a      	ldr	r2, [r7, #0]
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	69b8      	ldr	r0, [r7, #24]
 800aaf2:	f001 fa3f 	bl	800bf74 <pxPortInitialiseStack>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d002      	beq.n	800ab08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab08:	bf00      	nop
 800ab0a:	3720      	adds	r7, #32
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	bd80      	pop	{r7, pc}
 800ab10:	0802ca18 	.word	0x0802ca18
 800ab14:	0802ca38 	.word	0x0802ca38
 800ab18:	0802c9f8 	.word	0x0802c9f8

0800ab1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab24:	f001 fb56 	bl	800c1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab28:	4b2d      	ldr	r3, [pc, #180]	; (800abe0 <prvAddNewTaskToReadyList+0xc4>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	3301      	adds	r3, #1
 800ab2e:	4a2c      	ldr	r2, [pc, #176]	; (800abe0 <prvAddNewTaskToReadyList+0xc4>)
 800ab30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab32:	4b2c      	ldr	r3, [pc, #176]	; (800abe4 <prvAddNewTaskToReadyList+0xc8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d109      	bne.n	800ab4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab3a:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <prvAddNewTaskToReadyList+0xc8>)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab40:	4b27      	ldr	r3, [pc, #156]	; (800abe0 <prvAddNewTaskToReadyList+0xc4>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d110      	bne.n	800ab6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab48:	f000 fc26 	bl	800b398 <prvInitialiseTaskLists>
 800ab4c:	e00d      	b.n	800ab6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab4e:	4b26      	ldr	r3, [pc, #152]	; (800abe8 <prvAddNewTaskToReadyList+0xcc>)
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d109      	bne.n	800ab6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab56:	4b23      	ldr	r3, [pc, #140]	; (800abe4 <prvAddNewTaskToReadyList+0xc8>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d802      	bhi.n	800ab6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab64:	4a1f      	ldr	r2, [pc, #124]	; (800abe4 <prvAddNewTaskToReadyList+0xc8>)
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab6a:	4b20      	ldr	r3, [pc, #128]	; (800abec <prvAddNewTaskToReadyList+0xd0>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	4a1e      	ldr	r2, [pc, #120]	; (800abec <prvAddNewTaskToReadyList+0xd0>)
 800ab72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab74:	4b1d      	ldr	r3, [pc, #116]	; (800abec <prvAddNewTaskToReadyList+0xd0>)
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab80:	4b1b      	ldr	r3, [pc, #108]	; (800abf0 <prvAddNewTaskToReadyList+0xd4>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	429a      	cmp	r2, r3
 800ab86:	d903      	bls.n	800ab90 <prvAddNewTaskToReadyList+0x74>
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	4a18      	ldr	r2, [pc, #96]	; (800abf0 <prvAddNewTaskToReadyList+0xd4>)
 800ab8e:	6013      	str	r3, [r2, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab94:	4613      	mov	r3, r2
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	4413      	add	r3, r2
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4a15      	ldr	r2, [pc, #84]	; (800abf4 <prvAddNewTaskToReadyList+0xd8>)
 800ab9e:	441a      	add	r2, r3
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4619      	mov	r1, r3
 800aba6:	4610      	mov	r0, r2
 800aba8:	f7fe fddb 	bl	8009762 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abac:	f001 fb42 	bl	800c234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abb0:	4b0d      	ldr	r3, [pc, #52]	; (800abe8 <prvAddNewTaskToReadyList+0xcc>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d00e      	beq.n	800abd6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abb8:	4b0a      	ldr	r3, [pc, #40]	; (800abe4 <prvAddNewTaskToReadyList+0xc8>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d207      	bcs.n	800abd6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abc6:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <prvAddNewTaskToReadyList+0xdc>)
 800abc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abcc:	601a      	str	r2, [r3, #0]
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abd6:	bf00      	nop
 800abd8:	3708      	adds	r7, #8
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	200011a8 	.word	0x200011a8
 800abe4:	20000cd4 	.word	0x20000cd4
 800abe8:	200011b4 	.word	0x200011b4
 800abec:	200011c4 	.word	0x200011c4
 800abf0:	200011b0 	.word	0x200011b0
 800abf4:	20000cd8 	.word	0x20000cd8
 800abf8:	e000ed04 	.word	0xe000ed04

0800abfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ac04:	2300      	movs	r3, #0
 800ac06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d017      	beq.n	800ac3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ac0e:	4b13      	ldr	r3, [pc, #76]	; (800ac5c <vTaskDelay+0x60>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d00a      	beq.n	800ac2c <vTaskDelay+0x30>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	60bb      	str	r3, [r7, #8]
}
 800ac28:	bf00      	nop
 800ac2a:	e7fe      	b.n	800ac2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ac2c:	f000 f88a 	bl	800ad44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ac30:	2100      	movs	r1, #0
 800ac32:	6878      	ldr	r0, [r7, #4]
 800ac34:	f000 fdfc 	bl	800b830 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ac38:	f000 f892 	bl	800ad60 <xTaskResumeAll>
 800ac3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d107      	bne.n	800ac54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ac44:	4b06      	ldr	r3, [pc, #24]	; (800ac60 <vTaskDelay+0x64>)
 800ac46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac4a:	601a      	str	r2, [r3, #0]
 800ac4c:	f3bf 8f4f 	dsb	sy
 800ac50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ac54:	bf00      	nop
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}
 800ac5c:	200011d0 	.word	0x200011d0
 800ac60:	e000ed04 	.word	0xe000ed04

0800ac64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b08a      	sub	sp, #40	; 0x28
 800ac68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ac72:	463a      	mov	r2, r7
 800ac74:	1d39      	adds	r1, r7, #4
 800ac76:	f107 0308 	add.w	r3, r7, #8
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f7fe fd10 	bl	80096a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	68ba      	ldr	r2, [r7, #8]
 800ac86:	9202      	str	r2, [sp, #8]
 800ac88:	9301      	str	r3, [sp, #4]
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	2300      	movs	r3, #0
 800ac90:	460a      	mov	r2, r1
 800ac92:	4924      	ldr	r1, [pc, #144]	; (800ad24 <vTaskStartScheduler+0xc0>)
 800ac94:	4824      	ldr	r0, [pc, #144]	; (800ad28 <vTaskStartScheduler+0xc4>)
 800ac96:	f7ff fdf9 	bl	800a88c <xTaskCreateStatic>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	4a23      	ldr	r2, [pc, #140]	; (800ad2c <vTaskStartScheduler+0xc8>)
 800ac9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800aca0:	4b22      	ldr	r3, [pc, #136]	; (800ad2c <vTaskStartScheduler+0xc8>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800aca8:	2301      	movs	r3, #1
 800acaa:	617b      	str	r3, [r7, #20]
 800acac:	e001      	b.n	800acb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800acae:	2300      	movs	r3, #0
 800acb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d102      	bne.n	800acbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800acb8:	f000 fe0e 	bl	800b8d8 <xTimerCreateTimerTask>
 800acbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	d11b      	bne.n	800acfc <vTaskStartScheduler+0x98>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	613b      	str	r3, [r7, #16]
}
 800acd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800acd8:	4b15      	ldr	r3, [pc, #84]	; (800ad30 <vTaskStartScheduler+0xcc>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	3354      	adds	r3, #84	; 0x54
 800acde:	4a15      	ldr	r2, [pc, #84]	; (800ad34 <vTaskStartScheduler+0xd0>)
 800ace0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ace2:	4b15      	ldr	r3, [pc, #84]	; (800ad38 <vTaskStartScheduler+0xd4>)
 800ace4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ace8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800acea:	4b14      	ldr	r3, [pc, #80]	; (800ad3c <vTaskStartScheduler+0xd8>)
 800acec:	2201      	movs	r2, #1
 800acee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800acf0:	4b13      	ldr	r3, [pc, #76]	; (800ad40 <vTaskStartScheduler+0xdc>)
 800acf2:	2200      	movs	r2, #0
 800acf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800acf6:	f001 f9cb 	bl	800c090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800acfa:	e00e      	b.n	800ad1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad02:	d10a      	bne.n	800ad1a <vTaskStartScheduler+0xb6>
	__asm volatile
 800ad04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad08:	f383 8811 	msr	BASEPRI, r3
 800ad0c:	f3bf 8f6f 	isb	sy
 800ad10:	f3bf 8f4f 	dsb	sy
 800ad14:	60fb      	str	r3, [r7, #12]
}
 800ad16:	bf00      	nop
 800ad18:	e7fe      	b.n	800ad18 <vTaskStartScheduler+0xb4>
}
 800ad1a:	bf00      	nop
 800ad1c:	3718      	adds	r7, #24
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	0800d678 	.word	0x0800d678
 800ad28:	0800b369 	.word	0x0800b369
 800ad2c:	200011cc 	.word	0x200011cc
 800ad30:	20000cd4 	.word	0x20000cd4
 800ad34:	2000002c 	.word	0x2000002c
 800ad38:	200011c8 	.word	0x200011c8
 800ad3c:	200011b4 	.word	0x200011b4
 800ad40:	200011ac 	.word	0x200011ac

0800ad44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ad44:	b480      	push	{r7}
 800ad46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ad48:	4b04      	ldr	r3, [pc, #16]	; (800ad5c <vTaskSuspendAll+0x18>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	4a03      	ldr	r2, [pc, #12]	; (800ad5c <vTaskSuspendAll+0x18>)
 800ad50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ad52:	bf00      	nop
 800ad54:	46bd      	mov	sp, r7
 800ad56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5a:	4770      	bx	lr
 800ad5c:	200011d0 	.word	0x200011d0

0800ad60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b084      	sub	sp, #16
 800ad64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ad6e:	4b42      	ldr	r3, [pc, #264]	; (800ae78 <xTaskResumeAll+0x118>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d10a      	bne.n	800ad8c <xTaskResumeAll+0x2c>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	603b      	str	r3, [r7, #0]
}
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ad8c:	f001 fa22 	bl	800c1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ad90:	4b39      	ldr	r3, [pc, #228]	; (800ae78 <xTaskResumeAll+0x118>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3b01      	subs	r3, #1
 800ad96:	4a38      	ldr	r2, [pc, #224]	; (800ae78 <xTaskResumeAll+0x118>)
 800ad98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad9a:	4b37      	ldr	r3, [pc, #220]	; (800ae78 <xTaskResumeAll+0x118>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d162      	bne.n	800ae68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ada2:	4b36      	ldr	r3, [pc, #216]	; (800ae7c <xTaskResumeAll+0x11c>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d05e      	beq.n	800ae68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800adaa:	e02f      	b.n	800ae0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adac:	4b34      	ldr	r3, [pc, #208]	; (800ae80 <xTaskResumeAll+0x120>)
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	3318      	adds	r3, #24
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fe fd2f 	bl	800981c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fe fd2a 	bl	800981c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adcc:	4b2d      	ldr	r3, [pc, #180]	; (800ae84 <xTaskResumeAll+0x124>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	429a      	cmp	r2, r3
 800add2:	d903      	bls.n	800addc <xTaskResumeAll+0x7c>
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800add8:	4a2a      	ldr	r2, [pc, #168]	; (800ae84 <xTaskResumeAll+0x124>)
 800adda:	6013      	str	r3, [r2, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ade0:	4613      	mov	r3, r2
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	4413      	add	r3, r2
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4a27      	ldr	r2, [pc, #156]	; (800ae88 <xTaskResumeAll+0x128>)
 800adea:	441a      	add	r2, r3
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	3304      	adds	r3, #4
 800adf0:	4619      	mov	r1, r3
 800adf2:	4610      	mov	r0, r2
 800adf4:	f7fe fcb5 	bl	8009762 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adfc:	4b23      	ldr	r3, [pc, #140]	; (800ae8c <xTaskResumeAll+0x12c>)
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d302      	bcc.n	800ae0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ae06:	4b22      	ldr	r3, [pc, #136]	; (800ae90 <xTaskResumeAll+0x130>)
 800ae08:	2201      	movs	r2, #1
 800ae0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae0c:	4b1c      	ldr	r3, [pc, #112]	; (800ae80 <xTaskResumeAll+0x120>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1cb      	bne.n	800adac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ae1a:	f000 fb5f 	bl	800b4dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ae1e:	4b1d      	ldr	r3, [pc, #116]	; (800ae94 <xTaskResumeAll+0x134>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d010      	beq.n	800ae4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ae2a:	f000 f847 	bl	800aebc <xTaskIncrementTick>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d002      	beq.n	800ae3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ae34:	4b16      	ldr	r3, [pc, #88]	; (800ae90 <xTaskResumeAll+0x130>)
 800ae36:	2201      	movs	r2, #1
 800ae38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3b01      	subs	r3, #1
 800ae3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d1f1      	bne.n	800ae2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800ae46:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <xTaskResumeAll+0x134>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ae4c:	4b10      	ldr	r3, [pc, #64]	; (800ae90 <xTaskResumeAll+0x130>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d009      	beq.n	800ae68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ae58:	4b0f      	ldr	r3, [pc, #60]	; (800ae98 <xTaskResumeAll+0x138>)
 800ae5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5e:	601a      	str	r2, [r3, #0]
 800ae60:	f3bf 8f4f 	dsb	sy
 800ae64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ae68:	f001 f9e4 	bl	800c234 <vPortExitCritical>

	return xAlreadyYielded;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3710      	adds	r7, #16
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	200011d0 	.word	0x200011d0
 800ae7c:	200011a8 	.word	0x200011a8
 800ae80:	20001168 	.word	0x20001168
 800ae84:	200011b0 	.word	0x200011b0
 800ae88:	20000cd8 	.word	0x20000cd8
 800ae8c:	20000cd4 	.word	0x20000cd4
 800ae90:	200011bc 	.word	0x200011bc
 800ae94:	200011b8 	.word	0x200011b8
 800ae98:	e000ed04 	.word	0xe000ed04

0800ae9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aea2:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <xTaskGetTickCount+0x1c>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aea8:	687b      	ldr	r3, [r7, #4]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr
 800aeb6:	bf00      	nop
 800aeb8:	200011ac 	.word	0x200011ac

0800aebc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aec6:	4b4f      	ldr	r3, [pc, #316]	; (800b004 <xTaskIncrementTick+0x148>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	f040 808f 	bne.w	800afee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aed0:	4b4d      	ldr	r3, [pc, #308]	; (800b008 <xTaskIncrementTick+0x14c>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	3301      	adds	r3, #1
 800aed6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aed8:	4a4b      	ldr	r2, [pc, #300]	; (800b008 <xTaskIncrementTick+0x14c>)
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d120      	bne.n	800af26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800aee4:	4b49      	ldr	r3, [pc, #292]	; (800b00c <xTaskIncrementTick+0x150>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00a      	beq.n	800af04 <xTaskIncrementTick+0x48>
	__asm volatile
 800aeee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef2:	f383 8811 	msr	BASEPRI, r3
 800aef6:	f3bf 8f6f 	isb	sy
 800aefa:	f3bf 8f4f 	dsb	sy
 800aefe:	603b      	str	r3, [r7, #0]
}
 800af00:	bf00      	nop
 800af02:	e7fe      	b.n	800af02 <xTaskIncrementTick+0x46>
 800af04:	4b41      	ldr	r3, [pc, #260]	; (800b00c <xTaskIncrementTick+0x150>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	60fb      	str	r3, [r7, #12]
 800af0a:	4b41      	ldr	r3, [pc, #260]	; (800b010 <xTaskIncrementTick+0x154>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a3f      	ldr	r2, [pc, #252]	; (800b00c <xTaskIncrementTick+0x150>)
 800af10:	6013      	str	r3, [r2, #0]
 800af12:	4a3f      	ldr	r2, [pc, #252]	; (800b010 <xTaskIncrementTick+0x154>)
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	4b3e      	ldr	r3, [pc, #248]	; (800b014 <xTaskIncrementTick+0x158>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3301      	adds	r3, #1
 800af1e:	4a3d      	ldr	r2, [pc, #244]	; (800b014 <xTaskIncrementTick+0x158>)
 800af20:	6013      	str	r3, [r2, #0]
 800af22:	f000 fadb 	bl	800b4dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800af26:	4b3c      	ldr	r3, [pc, #240]	; (800b018 <xTaskIncrementTick+0x15c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d349      	bcc.n	800afc4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af30:	4b36      	ldr	r3, [pc, #216]	; (800b00c <xTaskIncrementTick+0x150>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d104      	bne.n	800af44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af3a:	4b37      	ldr	r3, [pc, #220]	; (800b018 <xTaskIncrementTick+0x15c>)
 800af3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af40:	601a      	str	r2, [r3, #0]
					break;
 800af42:	e03f      	b.n	800afc4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af44:	4b31      	ldr	r3, [pc, #196]	; (800b00c <xTaskIncrementTick+0x150>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	68db      	ldr	r3, [r3, #12]
 800af4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d203      	bcs.n	800af64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800af5c:	4a2e      	ldr	r2, [pc, #184]	; (800b018 <xTaskIncrementTick+0x15c>)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800af62:	e02f      	b.n	800afc4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	3304      	adds	r3, #4
 800af68:	4618      	mov	r0, r3
 800af6a:	f7fe fc57 	bl	800981c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af72:	2b00      	cmp	r3, #0
 800af74:	d004      	beq.n	800af80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	3318      	adds	r3, #24
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7fe fc4e 	bl	800981c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af84:	4b25      	ldr	r3, [pc, #148]	; (800b01c <xTaskIncrementTick+0x160>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	429a      	cmp	r2, r3
 800af8a:	d903      	bls.n	800af94 <xTaskIncrementTick+0xd8>
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af90:	4a22      	ldr	r2, [pc, #136]	; (800b01c <xTaskIncrementTick+0x160>)
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af98:	4613      	mov	r3, r2
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4a1f      	ldr	r2, [pc, #124]	; (800b020 <xTaskIncrementTick+0x164>)
 800afa2:	441a      	add	r2, r3
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	3304      	adds	r3, #4
 800afa8:	4619      	mov	r1, r3
 800afaa:	4610      	mov	r0, r2
 800afac:	f7fe fbd9 	bl	8009762 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb4:	4b1b      	ldr	r3, [pc, #108]	; (800b024 <xTaskIncrementTick+0x168>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afba:	429a      	cmp	r2, r3
 800afbc:	d3b8      	bcc.n	800af30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800afbe:	2301      	movs	r3, #1
 800afc0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800afc2:	e7b5      	b.n	800af30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800afc4:	4b17      	ldr	r3, [pc, #92]	; (800b024 <xTaskIncrementTick+0x168>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afca:	4915      	ldr	r1, [pc, #84]	; (800b020 <xTaskIncrementTick+0x164>)
 800afcc:	4613      	mov	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	440b      	add	r3, r1
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2b01      	cmp	r3, #1
 800afda:	d901      	bls.n	800afe0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800afdc:	2301      	movs	r3, #1
 800afde:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800afe0:	4b11      	ldr	r3, [pc, #68]	; (800b028 <xTaskIncrementTick+0x16c>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d007      	beq.n	800aff8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800afe8:	2301      	movs	r3, #1
 800afea:	617b      	str	r3, [r7, #20]
 800afec:	e004      	b.n	800aff8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800afee:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <xTaskIncrementTick+0x170>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	3301      	adds	r3, #1
 800aff4:	4a0d      	ldr	r2, [pc, #52]	; (800b02c <xTaskIncrementTick+0x170>)
 800aff6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aff8:	697b      	ldr	r3, [r7, #20]
}
 800affa:	4618      	mov	r0, r3
 800affc:	3718      	adds	r7, #24
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}
 800b002:	bf00      	nop
 800b004:	200011d0 	.word	0x200011d0
 800b008:	200011ac 	.word	0x200011ac
 800b00c:	20001160 	.word	0x20001160
 800b010:	20001164 	.word	0x20001164
 800b014:	200011c0 	.word	0x200011c0
 800b018:	200011c8 	.word	0x200011c8
 800b01c:	200011b0 	.word	0x200011b0
 800b020:	20000cd8 	.word	0x20000cd8
 800b024:	20000cd4 	.word	0x20000cd4
 800b028:	200011bc 	.word	0x200011bc
 800b02c:	200011b8 	.word	0x200011b8

0800b030 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b036:	4b2a      	ldr	r3, [pc, #168]	; (800b0e0 <vTaskSwitchContext+0xb0>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b03e:	4b29      	ldr	r3, [pc, #164]	; (800b0e4 <vTaskSwitchContext+0xb4>)
 800b040:	2201      	movs	r2, #1
 800b042:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b044:	e046      	b.n	800b0d4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b046:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <vTaskSwitchContext+0xb4>)
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04c:	4b26      	ldr	r3, [pc, #152]	; (800b0e8 <vTaskSwitchContext+0xb8>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e010      	b.n	800b076 <vTaskSwitchContext+0x46>
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d10a      	bne.n	800b070 <vTaskSwitchContext+0x40>
	__asm volatile
 800b05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	607b      	str	r3, [r7, #4]
}
 800b06c:	bf00      	nop
 800b06e:	e7fe      	b.n	800b06e <vTaskSwitchContext+0x3e>
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	3b01      	subs	r3, #1
 800b074:	60fb      	str	r3, [r7, #12]
 800b076:	491d      	ldr	r1, [pc, #116]	; (800b0ec <vTaskSwitchContext+0xbc>)
 800b078:	68fa      	ldr	r2, [r7, #12]
 800b07a:	4613      	mov	r3, r2
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	009b      	lsls	r3, r3, #2
 800b082:	440b      	add	r3, r1
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0e4      	beq.n	800b054 <vTaskSwitchContext+0x24>
 800b08a:	68fa      	ldr	r2, [r7, #12]
 800b08c:	4613      	mov	r3, r2
 800b08e:	009b      	lsls	r3, r3, #2
 800b090:	4413      	add	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	4a15      	ldr	r2, [pc, #84]	; (800b0ec <vTaskSwitchContext+0xbc>)
 800b096:	4413      	add	r3, r2
 800b098:	60bb      	str	r3, [r7, #8]
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	605a      	str	r2, [r3, #4]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	685a      	ldr	r2, [r3, #4]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	3308      	adds	r3, #8
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d104      	bne.n	800b0ba <vTaskSwitchContext+0x8a>
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	685a      	ldr	r2, [r3, #4]
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	605a      	str	r2, [r3, #4]
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	68db      	ldr	r3, [r3, #12]
 800b0c0:	4a0b      	ldr	r2, [pc, #44]	; (800b0f0 <vTaskSwitchContext+0xc0>)
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	4a08      	ldr	r2, [pc, #32]	; (800b0e8 <vTaskSwitchContext+0xb8>)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0ca:	4b09      	ldr	r3, [pc, #36]	; (800b0f0 <vTaskSwitchContext+0xc0>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	3354      	adds	r3, #84	; 0x54
 800b0d0:	4a08      	ldr	r2, [pc, #32]	; (800b0f4 <vTaskSwitchContext+0xc4>)
 800b0d2:	6013      	str	r3, [r2, #0]
}
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	200011d0 	.word	0x200011d0
 800b0e4:	200011bc 	.word	0x200011bc
 800b0e8:	200011b0 	.word	0x200011b0
 800b0ec:	20000cd8 	.word	0x20000cd8
 800b0f0:	20000cd4 	.word	0x20000cd4
 800b0f4:	2000002c 	.word	0x2000002c

0800b0f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
 800b100:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d10a      	bne.n	800b11e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b10c:	f383 8811 	msr	BASEPRI, r3
 800b110:	f3bf 8f6f 	isb	sy
 800b114:	f3bf 8f4f 	dsb	sy
 800b118:	60fb      	str	r3, [r7, #12]
}
 800b11a:	bf00      	nop
 800b11c:	e7fe      	b.n	800b11c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b11e:	4b07      	ldr	r3, [pc, #28]	; (800b13c <vTaskPlaceOnEventList+0x44>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	3318      	adds	r3, #24
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7fe fb3f 	bl	80097aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b12c:	2101      	movs	r1, #1
 800b12e:	6838      	ldr	r0, [r7, #0]
 800b130:	f000 fb7e 	bl	800b830 <prvAddCurrentTaskToDelayedList>
}
 800b134:	bf00      	nop
 800b136:	3710      	adds	r7, #16
 800b138:	46bd      	mov	sp, r7
 800b13a:	bd80      	pop	{r7, pc}
 800b13c:	20000cd4 	.word	0x20000cd4

0800b140 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b140:	b580      	push	{r7, lr}
 800b142:	b086      	sub	sp, #24
 800b144:	af00      	add	r7, sp, #0
 800b146:	60f8      	str	r0, [r7, #12]
 800b148:	60b9      	str	r1, [r7, #8]
 800b14a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d10a      	bne.n	800b168 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	617b      	str	r3, [r7, #20]
}
 800b164:	bf00      	nop
 800b166:	e7fe      	b.n	800b166 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b168:	4b0a      	ldr	r3, [pc, #40]	; (800b194 <vTaskPlaceOnEventListRestricted+0x54>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	3318      	adds	r3, #24
 800b16e:	4619      	mov	r1, r3
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7fe faf6 	bl	8009762 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d002      	beq.n	800b182 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b180:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b182:	6879      	ldr	r1, [r7, #4]
 800b184:	68b8      	ldr	r0, [r7, #8]
 800b186:	f000 fb53 	bl	800b830 <prvAddCurrentTaskToDelayedList>
	}
 800b18a:	bf00      	nop
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20000cd4 	.word	0x20000cd4

0800b198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d10a      	bne.n	800b1c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b2:	f383 8811 	msr	BASEPRI, r3
 800b1b6:	f3bf 8f6f 	isb	sy
 800b1ba:	f3bf 8f4f 	dsb	sy
 800b1be:	60fb      	str	r3, [r7, #12]
}
 800b1c0:	bf00      	nop
 800b1c2:	e7fe      	b.n	800b1c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	3318      	adds	r3, #24
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	f7fe fb27 	bl	800981c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1ce:	4b1e      	ldr	r3, [pc, #120]	; (800b248 <xTaskRemoveFromEventList+0xb0>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d11d      	bne.n	800b212 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b1d6:	693b      	ldr	r3, [r7, #16]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7fe fb1e 	bl	800981c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b1e0:	693b      	ldr	r3, [r7, #16]
 800b1e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1e4:	4b19      	ldr	r3, [pc, #100]	; (800b24c <xTaskRemoveFromEventList+0xb4>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d903      	bls.n	800b1f4 <xTaskRemoveFromEventList+0x5c>
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	4a16      	ldr	r2, [pc, #88]	; (800b24c <xTaskRemoveFromEventList+0xb4>)
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	009b      	lsls	r3, r3, #2
 800b200:	4a13      	ldr	r2, [pc, #76]	; (800b250 <xTaskRemoveFromEventList+0xb8>)
 800b202:	441a      	add	r2, r3
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	3304      	adds	r3, #4
 800b208:	4619      	mov	r1, r3
 800b20a:	4610      	mov	r0, r2
 800b20c:	f7fe faa9 	bl	8009762 <vListInsertEnd>
 800b210:	e005      	b.n	800b21e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	3318      	adds	r3, #24
 800b216:	4619      	mov	r1, r3
 800b218:	480e      	ldr	r0, [pc, #56]	; (800b254 <xTaskRemoveFromEventList+0xbc>)
 800b21a:	f7fe faa2 	bl	8009762 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	4b0d      	ldr	r3, [pc, #52]	; (800b258 <xTaskRemoveFromEventList+0xc0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b228:	429a      	cmp	r2, r3
 800b22a:	d905      	bls.n	800b238 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b22c:	2301      	movs	r3, #1
 800b22e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b230:	4b0a      	ldr	r3, [pc, #40]	; (800b25c <xTaskRemoveFromEventList+0xc4>)
 800b232:	2201      	movs	r2, #1
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	e001      	b.n	800b23c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b238:	2300      	movs	r3, #0
 800b23a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b23c:	697b      	ldr	r3, [r7, #20]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3718      	adds	r7, #24
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}
 800b246:	bf00      	nop
 800b248:	200011d0 	.word	0x200011d0
 800b24c:	200011b0 	.word	0x200011b0
 800b250:	20000cd8 	.word	0x20000cd8
 800b254:	20001168 	.word	0x20001168
 800b258:	20000cd4 	.word	0x20000cd4
 800b25c:	200011bc 	.word	0x200011bc

0800b260 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b268:	4b06      	ldr	r3, [pc, #24]	; (800b284 <vTaskInternalSetTimeOutState+0x24>)
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b270:	4b05      	ldr	r3, [pc, #20]	; (800b288 <vTaskInternalSetTimeOutState+0x28>)
 800b272:	681a      	ldr	r2, [r3, #0]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	605a      	str	r2, [r3, #4]
}
 800b278:	bf00      	nop
 800b27a:	370c      	adds	r7, #12
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	200011c0 	.word	0x200011c0
 800b288:	200011ac 	.word	0x200011ac

0800b28c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b088      	sub	sp, #32
 800b290:	af00      	add	r7, sp, #0
 800b292:	6078      	str	r0, [r7, #4]
 800b294:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d10a      	bne.n	800b2b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b29c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2a0:	f383 8811 	msr	BASEPRI, r3
 800b2a4:	f3bf 8f6f 	isb	sy
 800b2a8:	f3bf 8f4f 	dsb	sy
 800b2ac:	613b      	str	r3, [r7, #16]
}
 800b2ae:	bf00      	nop
 800b2b0:	e7fe      	b.n	800b2b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10a      	bne.n	800b2ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b2b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	60fb      	str	r3, [r7, #12]
}
 800b2ca:	bf00      	nop
 800b2cc:	e7fe      	b.n	800b2cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b2ce:	f000 ff81 	bl	800c1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b2d2:	4b1d      	ldr	r3, [pc, #116]	; (800b348 <xTaskCheckForTimeOut+0xbc>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	69ba      	ldr	r2, [r7, #24]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b2ea:	d102      	bne.n	800b2f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	61fb      	str	r3, [r7, #28]
 800b2f0:	e023      	b.n	800b33a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	4b15      	ldr	r3, [pc, #84]	; (800b34c <xTaskCheckForTimeOut+0xc0>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d007      	beq.n	800b30e <xTaskCheckForTimeOut+0x82>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	429a      	cmp	r2, r3
 800b306:	d302      	bcc.n	800b30e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b308:	2301      	movs	r3, #1
 800b30a:	61fb      	str	r3, [r7, #28]
 800b30c:	e015      	b.n	800b33a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	697a      	ldr	r2, [r7, #20]
 800b314:	429a      	cmp	r2, r3
 800b316:	d20b      	bcs.n	800b330 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	1ad2      	subs	r2, r2, r3
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f7ff ff9b 	bl	800b260 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b32a:	2300      	movs	r3, #0
 800b32c:	61fb      	str	r3, [r7, #28]
 800b32e:	e004      	b.n	800b33a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b336:	2301      	movs	r3, #1
 800b338:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b33a:	f000 ff7b 	bl	800c234 <vPortExitCritical>

	return xReturn;
 800b33e:	69fb      	ldr	r3, [r7, #28]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3720      	adds	r7, #32
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	200011ac 	.word	0x200011ac
 800b34c:	200011c0 	.word	0x200011c0

0800b350 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b350:	b480      	push	{r7}
 800b352:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b354:	4b03      	ldr	r3, [pc, #12]	; (800b364 <vTaskMissedYield+0x14>)
 800b356:	2201      	movs	r2, #1
 800b358:	601a      	str	r2, [r3, #0]
}
 800b35a:	bf00      	nop
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr
 800b364:	200011bc 	.word	0x200011bc

0800b368 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b082      	sub	sp, #8
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b370:	f000 f852 	bl	800b418 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b374:	4b06      	ldr	r3, [pc, #24]	; (800b390 <prvIdleTask+0x28>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d9f9      	bls.n	800b370 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b37c:	4b05      	ldr	r3, [pc, #20]	; (800b394 <prvIdleTask+0x2c>)
 800b37e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b382:	601a      	str	r2, [r3, #0]
 800b384:	f3bf 8f4f 	dsb	sy
 800b388:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b38c:	e7f0      	b.n	800b370 <prvIdleTask+0x8>
 800b38e:	bf00      	nop
 800b390:	20000cd8 	.word	0x20000cd8
 800b394:	e000ed04 	.word	0xe000ed04

0800b398 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b39e:	2300      	movs	r3, #0
 800b3a0:	607b      	str	r3, [r7, #4]
 800b3a2:	e00c      	b.n	800b3be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	009b      	lsls	r3, r3, #2
 800b3aa:	4413      	add	r3, r2
 800b3ac:	009b      	lsls	r3, r3, #2
 800b3ae:	4a12      	ldr	r2, [pc, #72]	; (800b3f8 <prvInitialiseTaskLists+0x60>)
 800b3b0:	4413      	add	r3, r2
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7fe f9a8 	bl	8009708 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	607b      	str	r3, [r7, #4]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b37      	cmp	r3, #55	; 0x37
 800b3c2:	d9ef      	bls.n	800b3a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b3c4:	480d      	ldr	r0, [pc, #52]	; (800b3fc <prvInitialiseTaskLists+0x64>)
 800b3c6:	f7fe f99f 	bl	8009708 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b3ca:	480d      	ldr	r0, [pc, #52]	; (800b400 <prvInitialiseTaskLists+0x68>)
 800b3cc:	f7fe f99c 	bl	8009708 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b3d0:	480c      	ldr	r0, [pc, #48]	; (800b404 <prvInitialiseTaskLists+0x6c>)
 800b3d2:	f7fe f999 	bl	8009708 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b3d6:	480c      	ldr	r0, [pc, #48]	; (800b408 <prvInitialiseTaskLists+0x70>)
 800b3d8:	f7fe f996 	bl	8009708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b3dc:	480b      	ldr	r0, [pc, #44]	; (800b40c <prvInitialiseTaskLists+0x74>)
 800b3de:	f7fe f993 	bl	8009708 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b3e2:	4b0b      	ldr	r3, [pc, #44]	; (800b410 <prvInitialiseTaskLists+0x78>)
 800b3e4:	4a05      	ldr	r2, [pc, #20]	; (800b3fc <prvInitialiseTaskLists+0x64>)
 800b3e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b3e8:	4b0a      	ldr	r3, [pc, #40]	; (800b414 <prvInitialiseTaskLists+0x7c>)
 800b3ea:	4a05      	ldr	r2, [pc, #20]	; (800b400 <prvInitialiseTaskLists+0x68>)
 800b3ec:	601a      	str	r2, [r3, #0]
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20000cd8 	.word	0x20000cd8
 800b3fc:	20001138 	.word	0x20001138
 800b400:	2000114c 	.word	0x2000114c
 800b404:	20001168 	.word	0x20001168
 800b408:	2000117c 	.word	0x2000117c
 800b40c:	20001194 	.word	0x20001194
 800b410:	20001160 	.word	0x20001160
 800b414:	20001164 	.word	0x20001164

0800b418 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b082      	sub	sp, #8
 800b41c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b41e:	e019      	b.n	800b454 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b420:	f000 fed8 	bl	800c1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b424:	4b10      	ldr	r3, [pc, #64]	; (800b468 <prvCheckTasksWaitingTermination+0x50>)
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3304      	adds	r3, #4
 800b430:	4618      	mov	r0, r3
 800b432:	f7fe f9f3 	bl	800981c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b436:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <prvCheckTasksWaitingTermination+0x54>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	4a0b      	ldr	r2, [pc, #44]	; (800b46c <prvCheckTasksWaitingTermination+0x54>)
 800b43e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b440:	4b0b      	ldr	r3, [pc, #44]	; (800b470 <prvCheckTasksWaitingTermination+0x58>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	3b01      	subs	r3, #1
 800b446:	4a0a      	ldr	r2, [pc, #40]	; (800b470 <prvCheckTasksWaitingTermination+0x58>)
 800b448:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b44a:	f000 fef3 	bl	800c234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f000 f810 	bl	800b474 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b454:	4b06      	ldr	r3, [pc, #24]	; (800b470 <prvCheckTasksWaitingTermination+0x58>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1e1      	bne.n	800b420 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	2000117c 	.word	0x2000117c
 800b46c:	200011a8 	.word	0x200011a8
 800b470:	20001190 	.word	0x20001190

0800b474 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	3354      	adds	r3, #84	; 0x54
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fc77 	bl	800cd74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d108      	bne.n	800b4a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b494:	4618      	mov	r0, r3
 800b496:	f001 f88b 	bl	800c5b0 <vPortFree>
				vPortFree( pxTCB );
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 f888 	bl	800c5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b4a0:	e018      	b.n	800b4d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d103      	bne.n	800b4b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f001 f87f 	bl	800c5b0 <vPortFree>
	}
 800b4b2:	e00f      	b.n	800b4d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b4ba:	2b02      	cmp	r3, #2
 800b4bc:	d00a      	beq.n	800b4d4 <prvDeleteTCB+0x60>
	__asm volatile
 800b4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4c2:	f383 8811 	msr	BASEPRI, r3
 800b4c6:	f3bf 8f6f 	isb	sy
 800b4ca:	f3bf 8f4f 	dsb	sy
 800b4ce:	60fb      	str	r3, [r7, #12]
}
 800b4d0:	bf00      	nop
 800b4d2:	e7fe      	b.n	800b4d2 <prvDeleteTCB+0x5e>
	}
 800b4d4:	bf00      	nop
 800b4d6:	3710      	adds	r7, #16
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b083      	sub	sp, #12
 800b4e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e2:	4b0c      	ldr	r3, [pc, #48]	; (800b514 <prvResetNextTaskUnblockTime+0x38>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b4ec:	4b0a      	ldr	r3, [pc, #40]	; (800b518 <prvResetNextTaskUnblockTime+0x3c>)
 800b4ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b4f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b4f4:	e008      	b.n	800b508 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f6:	4b07      	ldr	r3, [pc, #28]	; (800b514 <prvResetNextTaskUnblockTime+0x38>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	4a04      	ldr	r2, [pc, #16]	; (800b518 <prvResetNextTaskUnblockTime+0x3c>)
 800b506:	6013      	str	r3, [r2, #0]
}
 800b508:	bf00      	nop
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	20001160 	.word	0x20001160
 800b518:	200011c8 	.word	0x200011c8

0800b51c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b51c:	b480      	push	{r7}
 800b51e:	b083      	sub	sp, #12
 800b520:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b522:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <xTaskGetSchedulerState+0x34>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d102      	bne.n	800b530 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b52a:	2301      	movs	r3, #1
 800b52c:	607b      	str	r3, [r7, #4]
 800b52e:	e008      	b.n	800b542 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b530:	4b08      	ldr	r3, [pc, #32]	; (800b554 <xTaskGetSchedulerState+0x38>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d102      	bne.n	800b53e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b538:	2302      	movs	r3, #2
 800b53a:	607b      	str	r3, [r7, #4]
 800b53c:	e001      	b.n	800b542 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b53e:	2300      	movs	r3, #0
 800b540:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b542:	687b      	ldr	r3, [r7, #4]
	}
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	200011b4 	.word	0x200011b4
 800b554:	200011d0 	.word	0x200011d0

0800b558 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b084      	sub	sp, #16
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b564:	2300      	movs	r3, #0
 800b566:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d051      	beq.n	800b612 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b572:	4b2a      	ldr	r3, [pc, #168]	; (800b61c <xTaskPriorityInherit+0xc4>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d241      	bcs.n	800b600 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	699b      	ldr	r3, [r3, #24]
 800b580:	2b00      	cmp	r3, #0
 800b582:	db06      	blt.n	800b592 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b584:	4b25      	ldr	r3, [pc, #148]	; (800b61c <xTaskPriorityInherit+0xc4>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b58a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	6959      	ldr	r1, [r3, #20]
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b59a:	4613      	mov	r3, r2
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4413      	add	r3, r2
 800b5a0:	009b      	lsls	r3, r3, #2
 800b5a2:	4a1f      	ldr	r2, [pc, #124]	; (800b620 <xTaskPriorityInherit+0xc8>)
 800b5a4:	4413      	add	r3, r2
 800b5a6:	4299      	cmp	r1, r3
 800b5a8:	d122      	bne.n	800b5f0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7fe f934 	bl	800981c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5b4:	4b19      	ldr	r3, [pc, #100]	; (800b61c <xTaskPriorityInherit+0xc4>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5c2:	4b18      	ldr	r3, [pc, #96]	; (800b624 <xTaskPriorityInherit+0xcc>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d903      	bls.n	800b5d2 <xTaskPriorityInherit+0x7a>
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	4a15      	ldr	r2, [pc, #84]	; (800b624 <xTaskPriorityInherit+0xcc>)
 800b5d0:	6013      	str	r3, [r2, #0]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	009b      	lsls	r3, r3, #2
 800b5da:	4413      	add	r3, r2
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4a10      	ldr	r2, [pc, #64]	; (800b620 <xTaskPriorityInherit+0xc8>)
 800b5e0:	441a      	add	r2, r3
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3304      	adds	r3, #4
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4610      	mov	r0, r2
 800b5ea:	f7fe f8ba 	bl	8009762 <vListInsertEnd>
 800b5ee:	e004      	b.n	800b5fa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b5f0:	4b0a      	ldr	r3, [pc, #40]	; (800b61c <xTaskPriorityInherit+0xc4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e008      	b.n	800b612 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b604:	4b05      	ldr	r3, [pc, #20]	; (800b61c <xTaskPriorityInherit+0xc4>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d201      	bcs.n	800b612 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b60e:	2301      	movs	r3, #1
 800b610:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b612:	68fb      	ldr	r3, [r7, #12]
	}
 800b614:	4618      	mov	r0, r3
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}
 800b61c:	20000cd4 	.word	0x20000cd4
 800b620:	20000cd8 	.word	0x20000cd8
 800b624:	200011b0 	.word	0x200011b0

0800b628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b086      	sub	sp, #24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d056      	beq.n	800b6ec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b63e:	4b2e      	ldr	r3, [pc, #184]	; (800b6f8 <xTaskPriorityDisinherit+0xd0>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	429a      	cmp	r2, r3
 800b646:	d00a      	beq.n	800b65e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b64c:	f383 8811 	msr	BASEPRI, r3
 800b650:	f3bf 8f6f 	isb	sy
 800b654:	f3bf 8f4f 	dsb	sy
 800b658:	60fb      	str	r3, [r7, #12]
}
 800b65a:	bf00      	nop
 800b65c:	e7fe      	b.n	800b65c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b662:	2b00      	cmp	r3, #0
 800b664:	d10a      	bne.n	800b67c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	60bb      	str	r3, [r7, #8]
}
 800b678:	bf00      	nop
 800b67a:	e7fe      	b.n	800b67a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b680:	1e5a      	subs	r2, r3, #1
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b68e:	429a      	cmp	r2, r3
 800b690:	d02c      	beq.n	800b6ec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b696:	2b00      	cmp	r3, #0
 800b698:	d128      	bne.n	800b6ec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	3304      	adds	r3, #4
 800b69e:	4618      	mov	r0, r3
 800b6a0:	f7fe f8bc 	bl	800981c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6bc:	4b0f      	ldr	r3, [pc, #60]	; (800b6fc <xTaskPriorityDisinherit+0xd4>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d903      	bls.n	800b6cc <xTaskPriorityDisinherit+0xa4>
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6c8:	4a0c      	ldr	r2, [pc, #48]	; (800b6fc <xTaskPriorityDisinherit+0xd4>)
 800b6ca:	6013      	str	r3, [r2, #0]
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6d0:	4613      	mov	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	4413      	add	r3, r2
 800b6d6:	009b      	lsls	r3, r3, #2
 800b6d8:	4a09      	ldr	r2, [pc, #36]	; (800b700 <xTaskPriorityDisinherit+0xd8>)
 800b6da:	441a      	add	r2, r3
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	3304      	adds	r3, #4
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	4610      	mov	r0, r2
 800b6e4:	f7fe f83d 	bl	8009762 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6e8:	2301      	movs	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6ec:	697b      	ldr	r3, [r7, #20]
	}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3718      	adds	r7, #24
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	bd80      	pop	{r7, pc}
 800b6f6:	bf00      	nop
 800b6f8:	20000cd4 	.word	0x20000cd4
 800b6fc:	200011b0 	.word	0x200011b0
 800b700:	20000cd8 	.word	0x20000cd8

0800b704 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b712:	2301      	movs	r3, #1
 800b714:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d06a      	beq.n	800b7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	60fb      	str	r3, [r7, #12]
}
 800b736:	bf00      	nop
 800b738:	e7fe      	b.n	800b738 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b73a:	69bb      	ldr	r3, [r7, #24]
 800b73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	429a      	cmp	r2, r3
 800b742:	d902      	bls.n	800b74a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	61fb      	str	r3, [r7, #28]
 800b748:	e002      	b.n	800b750 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b74e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b754:	69fa      	ldr	r2, [r7, #28]
 800b756:	429a      	cmp	r2, r3
 800b758:	d04b      	beq.n	800b7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b75a:	69bb      	ldr	r3, [r7, #24]
 800b75c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b75e:	697a      	ldr	r2, [r7, #20]
 800b760:	429a      	cmp	r2, r3
 800b762:	d146      	bne.n	800b7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b764:	4b25      	ldr	r3, [pc, #148]	; (800b7fc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	69ba      	ldr	r2, [r7, #24]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d10a      	bne.n	800b784 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	60bb      	str	r3, [r7, #8]
}
 800b780:	bf00      	nop
 800b782:	e7fe      	b.n	800b782 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b788:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	69fa      	ldr	r2, [r7, #28]
 800b78e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	db04      	blt.n	800b7a2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b798:	69fb      	ldr	r3, [r7, #28]
 800b79a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b7a2:	69bb      	ldr	r3, [r7, #24]
 800b7a4:	6959      	ldr	r1, [r3, #20]
 800b7a6:	693a      	ldr	r2, [r7, #16]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	009b      	lsls	r3, r3, #2
 800b7b0:	4a13      	ldr	r2, [pc, #76]	; (800b800 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b7b2:	4413      	add	r3, r2
 800b7b4:	4299      	cmp	r1, r3
 800b7b6:	d11c      	bne.n	800b7f2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	3304      	adds	r3, #4
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fe f82d 	bl	800981c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7c6:	4b0f      	ldr	r3, [pc, #60]	; (800b804 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d903      	bls.n	800b7d6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b7ce:	69bb      	ldr	r3, [r7, #24]
 800b7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7d2:	4a0c      	ldr	r2, [pc, #48]	; (800b804 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b7d4:	6013      	str	r3, [r2, #0]
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7da:	4613      	mov	r3, r2
 800b7dc:	009b      	lsls	r3, r3, #2
 800b7de:	4413      	add	r3, r2
 800b7e0:	009b      	lsls	r3, r3, #2
 800b7e2:	4a07      	ldr	r2, [pc, #28]	; (800b800 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b7e4:	441a      	add	r2, r3
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	4619      	mov	r1, r3
 800b7ec:	4610      	mov	r0, r2
 800b7ee:	f7fd ffb8 	bl	8009762 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b7f2:	bf00      	nop
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20000cd4 	.word	0x20000cd4
 800b800:	20000cd8 	.word	0x20000cd8
 800b804:	200011b0 	.word	0x200011b0

0800b808 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b808:	b480      	push	{r7}
 800b80a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b80c:	4b07      	ldr	r3, [pc, #28]	; (800b82c <pvTaskIncrementMutexHeldCount+0x24>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d004      	beq.n	800b81e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b814:	4b05      	ldr	r3, [pc, #20]	; (800b82c <pvTaskIncrementMutexHeldCount+0x24>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b81a:	3201      	adds	r2, #1
 800b81c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b81e:	4b03      	ldr	r3, [pc, #12]	; (800b82c <pvTaskIncrementMutexHeldCount+0x24>)
 800b820:	681b      	ldr	r3, [r3, #0]
	}
 800b822:	4618      	mov	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr
 800b82c:	20000cd4 	.word	0x20000cd4

0800b830 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b83a:	4b21      	ldr	r3, [pc, #132]	; (800b8c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b840:	4b20      	ldr	r3, [pc, #128]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3304      	adds	r3, #4
 800b846:	4618      	mov	r0, r3
 800b848:	f7fd ffe8 	bl	800981c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b852:	d10a      	bne.n	800b86a <prvAddCurrentTaskToDelayedList+0x3a>
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d007      	beq.n	800b86a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b85a:	4b1a      	ldr	r3, [pc, #104]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	3304      	adds	r3, #4
 800b860:	4619      	mov	r1, r3
 800b862:	4819      	ldr	r0, [pc, #100]	; (800b8c8 <prvAddCurrentTaskToDelayedList+0x98>)
 800b864:	f7fd ff7d 	bl	8009762 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b868:	e026      	b.n	800b8b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4413      	add	r3, r2
 800b870:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b872:	4b14      	ldr	r3, [pc, #80]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	68ba      	ldr	r2, [r7, #8]
 800b878:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b87a:	68ba      	ldr	r2, [r7, #8]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	429a      	cmp	r2, r3
 800b880:	d209      	bcs.n	800b896 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b882:	4b12      	ldr	r3, [pc, #72]	; (800b8cc <prvAddCurrentTaskToDelayedList+0x9c>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	4b0f      	ldr	r3, [pc, #60]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	3304      	adds	r3, #4
 800b88c:	4619      	mov	r1, r3
 800b88e:	4610      	mov	r0, r2
 800b890:	f7fd ff8b 	bl	80097aa <vListInsert>
}
 800b894:	e010      	b.n	800b8b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b896:	4b0e      	ldr	r3, [pc, #56]	; (800b8d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	4b0a      	ldr	r3, [pc, #40]	; (800b8c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3304      	adds	r3, #4
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	f7fd ff81 	bl	80097aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b8a8:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d202      	bcs.n	800b8b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b8b2:	4a08      	ldr	r2, [pc, #32]	; (800b8d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	6013      	str	r3, [r2, #0]
}
 800b8b8:	bf00      	nop
 800b8ba:	3710      	adds	r7, #16
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	bd80      	pop	{r7, pc}
 800b8c0:	200011ac 	.word	0x200011ac
 800b8c4:	20000cd4 	.word	0x20000cd4
 800b8c8:	20001194 	.word	0x20001194
 800b8cc:	20001164 	.word	0x20001164
 800b8d0:	20001160 	.word	0x20001160
 800b8d4:	200011c8 	.word	0x200011c8

0800b8d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08a      	sub	sp, #40	; 0x28
 800b8dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b8e2:	f000 fb07 	bl	800bef4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b8e6:	4b1c      	ldr	r3, [pc, #112]	; (800b958 <xTimerCreateTimerTask+0x80>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d021      	beq.n	800b932 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b8f6:	1d3a      	adds	r2, r7, #4
 800b8f8:	f107 0108 	add.w	r1, r7, #8
 800b8fc:	f107 030c 	add.w	r3, r7, #12
 800b900:	4618      	mov	r0, r3
 800b902:	f7fd fee7 	bl	80096d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b906:	6879      	ldr	r1, [r7, #4]
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	68fa      	ldr	r2, [r7, #12]
 800b90c:	9202      	str	r2, [sp, #8]
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	2302      	movs	r3, #2
 800b912:	9300      	str	r3, [sp, #0]
 800b914:	2300      	movs	r3, #0
 800b916:	460a      	mov	r2, r1
 800b918:	4910      	ldr	r1, [pc, #64]	; (800b95c <xTimerCreateTimerTask+0x84>)
 800b91a:	4811      	ldr	r0, [pc, #68]	; (800b960 <xTimerCreateTimerTask+0x88>)
 800b91c:	f7fe ffb6 	bl	800a88c <xTaskCreateStatic>
 800b920:	4603      	mov	r3, r0
 800b922:	4a10      	ldr	r2, [pc, #64]	; (800b964 <xTimerCreateTimerTask+0x8c>)
 800b924:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b926:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <xTimerCreateTimerTask+0x8c>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d001      	beq.n	800b932 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b92e:	2301      	movs	r3, #1
 800b930:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d10a      	bne.n	800b94e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b93c:	f383 8811 	msr	BASEPRI, r3
 800b940:	f3bf 8f6f 	isb	sy
 800b944:	f3bf 8f4f 	dsb	sy
 800b948:	613b      	str	r3, [r7, #16]
}
 800b94a:	bf00      	nop
 800b94c:	e7fe      	b.n	800b94c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b94e:	697b      	ldr	r3, [r7, #20]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3718      	adds	r7, #24
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}
 800b958:	20001204 	.word	0x20001204
 800b95c:	0800d680 	.word	0x0800d680
 800b960:	0800ba9d 	.word	0x0800ba9d
 800b964:	20001208 	.word	0x20001208

0800b968 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08a      	sub	sp, #40	; 0x28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	607a      	str	r2, [r7, #4]
 800b974:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b976:	2300      	movs	r3, #0
 800b978:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d10a      	bne.n	800b996 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	623b      	str	r3, [r7, #32]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b996:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d02a      	beq.n	800b9f4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	2b05      	cmp	r3, #5
 800b9ae:	dc18      	bgt.n	800b9e2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b9b0:	f7ff fdb4 	bl	800b51c <xTaskGetSchedulerState>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d109      	bne.n	800b9ce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b9ba:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b9bc:	6818      	ldr	r0, [r3, #0]
 800b9be:	f107 0110 	add.w	r1, r7, #16
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9c6:	f7fe f8fb 	bl	8009bc0 <xQueueGenericSend>
 800b9ca:	6278      	str	r0, [r7, #36]	; 0x24
 800b9cc:	e012      	b.n	800b9f4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b9ce:	4b0c      	ldr	r3, [pc, #48]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f107 0110 	add.w	r1, r7, #16
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f7fe f8f1 	bl	8009bc0 <xQueueGenericSend>
 800b9de:	6278      	str	r0, [r7, #36]	; 0x24
 800b9e0:	e008      	b.n	800b9f4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b9e2:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <xTimerGenericCommand+0x98>)
 800b9e4:	6818      	ldr	r0, [r3, #0]
 800b9e6:	f107 0110 	add.w	r1, r7, #16
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	f7fe f9e5 	bl	8009dbc <xQueueGenericSendFromISR>
 800b9f2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3728      	adds	r7, #40	; 0x28
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20001204 	.word	0x20001204

0800ba04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b088      	sub	sp, #32
 800ba08:	af02      	add	r7, sp, #8
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba0e:	4b22      	ldr	r3, [pc, #136]	; (800ba98 <prvProcessExpiredTimer+0x94>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68db      	ldr	r3, [r3, #12]
 800ba14:	68db      	ldr	r3, [r3, #12]
 800ba16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba18:	697b      	ldr	r3, [r7, #20]
 800ba1a:	3304      	adds	r3, #4
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fd fefd 	bl	800981c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba28:	f003 0304 	and.w	r3, r3, #4
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d022      	beq.n	800ba76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	699a      	ldr	r2, [r3, #24]
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	18d1      	adds	r1, r2, r3
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	683a      	ldr	r2, [r7, #0]
 800ba3c:	6978      	ldr	r0, [r7, #20]
 800ba3e:	f000 f8d1 	bl	800bbe4 <prvInsertTimerInActiveList>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d01f      	beq.n	800ba88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ba48:	2300      	movs	r3, #0
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	687a      	ldr	r2, [r7, #4]
 800ba50:	2100      	movs	r1, #0
 800ba52:	6978      	ldr	r0, [r7, #20]
 800ba54:	f7ff ff88 	bl	800b968 <xTimerGenericCommand>
 800ba58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ba5a:	693b      	ldr	r3, [r7, #16]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d113      	bne.n	800ba88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	60fb      	str	r3, [r7, #12]
}
 800ba72:	bf00      	nop
 800ba74:	e7fe      	b.n	800ba74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ba7c:	f023 0301 	bic.w	r3, r3, #1
 800ba80:	b2da      	uxtb	r2, r3
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	6a1b      	ldr	r3, [r3, #32]
 800ba8c:	6978      	ldr	r0, [r7, #20]
 800ba8e:	4798      	blx	r3
}
 800ba90:	bf00      	nop
 800ba92:	3718      	adds	r7, #24
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	200011fc 	.word	0x200011fc

0800ba9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800baa4:	f107 0308 	add.w	r3, r7, #8
 800baa8:	4618      	mov	r0, r3
 800baaa:	f000 f857 	bl	800bb5c <prvGetNextExpireTime>
 800baae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	4619      	mov	r1, r3
 800bab4:	68f8      	ldr	r0, [r7, #12]
 800bab6:	f000 f803 	bl	800bac0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800baba:	f000 f8d5 	bl	800bc68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800babe:	e7f1      	b.n	800baa4 <prvTimerTask+0x8>

0800bac0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800baca:	f7ff f93b 	bl	800ad44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bace:	f107 0308 	add.w	r3, r7, #8
 800bad2:	4618      	mov	r0, r3
 800bad4:	f000 f866 	bl	800bba4 <prvSampleTimeNow>
 800bad8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d130      	bne.n	800bb42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d10a      	bne.n	800bafc <prvProcessTimerOrBlockTask+0x3c>
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	429a      	cmp	r2, r3
 800baec:	d806      	bhi.n	800bafc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800baee:	f7ff f937 	bl	800ad60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800baf2:	68f9      	ldr	r1, [r7, #12]
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff ff85 	bl	800ba04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bafa:	e024      	b.n	800bb46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d008      	beq.n	800bb14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bb02:	4b13      	ldr	r3, [pc, #76]	; (800bb50 <prvProcessTimerOrBlockTask+0x90>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <prvProcessTimerOrBlockTask+0x50>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e000      	b.n	800bb12 <prvProcessTimerOrBlockTask+0x52>
 800bb10:	2300      	movs	r3, #0
 800bb12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bb14:	4b0f      	ldr	r3, [pc, #60]	; (800bb54 <prvProcessTimerOrBlockTask+0x94>)
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	687a      	ldr	r2, [r7, #4]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	4619      	mov	r1, r3
 800bb22:	f7fe fe7f 	bl	800a824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bb26:	f7ff f91b 	bl	800ad60 <xTaskResumeAll>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10a      	bne.n	800bb46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bb30:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <prvProcessTimerOrBlockTask+0x98>)
 800bb32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	f3bf 8f6f 	isb	sy
}
 800bb40:	e001      	b.n	800bb46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bb42:	f7ff f90d 	bl	800ad60 <xTaskResumeAll>
}
 800bb46:	bf00      	nop
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	20001200 	.word	0x20001200
 800bb54:	20001204 	.word	0x20001204
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b085      	sub	sp, #20
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bb64:	4b0e      	ldr	r3, [pc, #56]	; (800bba0 <prvGetNextExpireTime+0x44>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d101      	bne.n	800bb72 <prvGetNextExpireTime+0x16>
 800bb6e:	2201      	movs	r2, #1
 800bb70:	e000      	b.n	800bb74 <prvGetNextExpireTime+0x18>
 800bb72:	2200      	movs	r2, #0
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bb80:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <prvGetNextExpireTime+0x44>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	60fb      	str	r3, [r7, #12]
 800bb8a:	e001      	b.n	800bb90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bb90:	68fb      	ldr	r3, [r7, #12]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
 800bb9e:	bf00      	nop
 800bba0:	200011fc 	.word	0x200011fc

0800bba4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bbac:	f7ff f976 	bl	800ae9c <xTaskGetTickCount>
 800bbb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bbb2:	4b0b      	ldr	r3, [pc, #44]	; (800bbe0 <prvSampleTimeNow+0x3c>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	68fa      	ldr	r2, [r7, #12]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d205      	bcs.n	800bbc8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bbbc:	f000 f936 	bl	800be2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	601a      	str	r2, [r3, #0]
 800bbc6:	e002      	b.n	800bbce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bbce:	4a04      	ldr	r2, [pc, #16]	; (800bbe0 <prvSampleTimeNow+0x3c>)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3710      	adds	r7, #16
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	2000120c 	.word	0x2000120c

0800bbe4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
 800bbf0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bc02:	68ba      	ldr	r2, [r7, #8]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d812      	bhi.n	800bc30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc0a:	687a      	ldr	r2, [r7, #4]
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	1ad2      	subs	r2, r2, r3
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	429a      	cmp	r2, r3
 800bc16:	d302      	bcc.n	800bc1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	617b      	str	r3, [r7, #20]
 800bc1c:	e01b      	b.n	800bc56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bc1e:	4b10      	ldr	r3, [pc, #64]	; (800bc60 <prvInsertTimerInActiveList+0x7c>)
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	3304      	adds	r3, #4
 800bc26:	4619      	mov	r1, r3
 800bc28:	4610      	mov	r0, r2
 800bc2a:	f7fd fdbe 	bl	80097aa <vListInsert>
 800bc2e:	e012      	b.n	800bc56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d206      	bcs.n	800bc46 <prvInsertTimerInActiveList+0x62>
 800bc38:	68ba      	ldr	r2, [r7, #8]
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d302      	bcc.n	800bc46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bc40:	2301      	movs	r3, #1
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e007      	b.n	800bc56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bc46:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <prvInsertTimerInActiveList+0x80>)
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	3304      	adds	r3, #4
 800bc4e:	4619      	mov	r1, r3
 800bc50:	4610      	mov	r0, r2
 800bc52:	f7fd fdaa 	bl	80097aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bc56:	697b      	ldr	r3, [r7, #20]
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	3718      	adds	r7, #24
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	bd80      	pop	{r7, pc}
 800bc60:	20001200 	.word	0x20001200
 800bc64:	200011fc 	.word	0x200011fc

0800bc68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b08e      	sub	sp, #56	; 0x38
 800bc6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bc6e:	e0ca      	b.n	800be06 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	da18      	bge.n	800bca8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bc76:	1d3b      	adds	r3, r7, #4
 800bc78:	3304      	adds	r3, #4
 800bc7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	61fb      	str	r3, [r7, #28]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc9e:	6850      	ldr	r0, [r2, #4]
 800bca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bca2:	6892      	ldr	r2, [r2, #8]
 800bca4:	4611      	mov	r1, r2
 800bca6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	f2c0 80aa 	blt.w	800be04 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcb6:	695b      	ldr	r3, [r3, #20]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d004      	beq.n	800bcc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	f7fd fdab 	bl	800981c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bcc6:	463b      	mov	r3, r7
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7ff ff6b 	bl	800bba4 <prvSampleTimeNow>
 800bcce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2b09      	cmp	r3, #9
 800bcd4:	f200 8097 	bhi.w	800be06 <prvProcessReceivedCommands+0x19e>
 800bcd8:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <prvProcessReceivedCommands+0x78>)
 800bcda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcde:	bf00      	nop
 800bce0:	0800bd09 	.word	0x0800bd09
 800bce4:	0800bd09 	.word	0x0800bd09
 800bce8:	0800bd09 	.word	0x0800bd09
 800bcec:	0800bd7d 	.word	0x0800bd7d
 800bcf0:	0800bd91 	.word	0x0800bd91
 800bcf4:	0800bddb 	.word	0x0800bddb
 800bcf8:	0800bd09 	.word	0x0800bd09
 800bcfc:	0800bd09 	.word	0x0800bd09
 800bd00:	0800bd7d 	.word	0x0800bd7d
 800bd04:	0800bd91 	.word	0x0800bd91
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd0e:	f043 0301 	orr.w	r3, r3, #1
 800bd12:	b2da      	uxtb	r2, r3
 800bd14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	18d1      	adds	r1, r2, r3
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd28:	f7ff ff5c 	bl	800bbe4 <prvInsertTimerInActiveList>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d069      	beq.n	800be06 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd34:	6a1b      	ldr	r3, [r3, #32]
 800bd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd40:	f003 0304 	and.w	r3, r3, #4
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d05e      	beq.n	800be06 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4c:	699b      	ldr	r3, [r3, #24]
 800bd4e:	441a      	add	r2, r3
 800bd50:	2300      	movs	r3, #0
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	2100      	movs	r1, #0
 800bd58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bd5a:	f7ff fe05 	bl	800b968 <xTimerGenericCommand>
 800bd5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bd60:	6a3b      	ldr	r3, [r7, #32]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d14f      	bne.n	800be06 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bd66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	61bb      	str	r3, [r7, #24]
}
 800bd78:	bf00      	nop
 800bd7a:	e7fe      	b.n	800bd7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd82:	f023 0301 	bic.w	r3, r3, #1
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bd8e:	e03a      	b.n	800be06 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bd90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd96:	f043 0301 	orr.w	r3, r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d10a      	bne.n	800bdc6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb4:	f383 8811 	msr	BASEPRI, r3
 800bdb8:	f3bf 8f6f 	isb	sy
 800bdbc:	f3bf 8f4f 	dsb	sy
 800bdc0:	617b      	str	r3, [r7, #20]
}
 800bdc2:	bf00      	nop
 800bdc4:	e7fe      	b.n	800bdc4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bdc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdc8:	699a      	ldr	r2, [r3, #24]
 800bdca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdcc:	18d1      	adds	r1, r2, r3
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdd4:	f7ff ff06 	bl	800bbe4 <prvInsertTimerInActiveList>
					break;
 800bdd8:	e015      	b.n	800be06 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bdda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bddc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bde0:	f003 0302 	and.w	r3, r3, #2
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d103      	bne.n	800bdf0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bde8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bdea:	f000 fbe1 	bl	800c5b0 <vPortFree>
 800bdee:	e00a      	b.n	800be06 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bdf6:	f023 0301 	bic.w	r3, r3, #1
 800bdfa:	b2da      	uxtb	r2, r3
 800bdfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800be02:	e000      	b.n	800be06 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800be04:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800be06:	4b08      	ldr	r3, [pc, #32]	; (800be28 <prvProcessReceivedCommands+0x1c0>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	1d39      	adds	r1, r7, #4
 800be0c:	2200      	movs	r2, #0
 800be0e:	4618      	mov	r0, r3
 800be10:	f7fe f8fc 	bl	800a00c <xQueueReceive>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	f47f af2a 	bne.w	800bc70 <prvProcessReceivedCommands+0x8>
	}
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3730      	adds	r7, #48	; 0x30
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	20001204 	.word	0x20001204

0800be2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b088      	sub	sp, #32
 800be30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800be32:	e048      	b.n	800bec6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800be34:	4b2d      	ldr	r3, [pc, #180]	; (800beec <prvSwitchTimerLists+0xc0>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be3e:	4b2b      	ldr	r3, [pc, #172]	; (800beec <prvSwitchTimerLists+0xc0>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	68db      	ldr	r3, [r3, #12]
 800be46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	3304      	adds	r3, #4
 800be4c:	4618      	mov	r0, r3
 800be4e:	f7fd fce5 	bl	800981c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6a1b      	ldr	r3, [r3, #32]
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be60:	f003 0304 	and.w	r3, r3, #4
 800be64:	2b00      	cmp	r3, #0
 800be66:	d02e      	beq.n	800bec6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	699b      	ldr	r3, [r3, #24]
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	4413      	add	r3, r2
 800be70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	429a      	cmp	r2, r3
 800be78:	d90e      	bls.n	800be98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	68ba      	ldr	r2, [r7, #8]
 800be7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	68fa      	ldr	r2, [r7, #12]
 800be84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800be86:	4b19      	ldr	r3, [pc, #100]	; (800beec <prvSwitchTimerLists+0xc0>)
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	3304      	adds	r3, #4
 800be8e:	4619      	mov	r1, r3
 800be90:	4610      	mov	r0, r2
 800be92:	f7fd fc8a 	bl	80097aa <vListInsert>
 800be96:	e016      	b.n	800bec6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be98:	2300      	movs	r3, #0
 800be9a:	9300      	str	r3, [sp, #0]
 800be9c:	2300      	movs	r3, #0
 800be9e:	693a      	ldr	r2, [r7, #16]
 800bea0:	2100      	movs	r1, #0
 800bea2:	68f8      	ldr	r0, [r7, #12]
 800bea4:	f7ff fd60 	bl	800b968 <xTimerGenericCommand>
 800bea8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d10a      	bne.n	800bec6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800beb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	603b      	str	r3, [r7, #0]
}
 800bec2:	bf00      	nop
 800bec4:	e7fe      	b.n	800bec4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bec6:	4b09      	ldr	r3, [pc, #36]	; (800beec <prvSwitchTimerLists+0xc0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d1b1      	bne.n	800be34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bed0:	4b06      	ldr	r3, [pc, #24]	; (800beec <prvSwitchTimerLists+0xc0>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bed6:	4b06      	ldr	r3, [pc, #24]	; (800bef0 <prvSwitchTimerLists+0xc4>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4a04      	ldr	r2, [pc, #16]	; (800beec <prvSwitchTimerLists+0xc0>)
 800bedc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bede:	4a04      	ldr	r2, [pc, #16]	; (800bef0 <prvSwitchTimerLists+0xc4>)
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	6013      	str	r3, [r2, #0]
}
 800bee4:	bf00      	nop
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}
 800beec:	200011fc 	.word	0x200011fc
 800bef0:	20001200 	.word	0x20001200

0800bef4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800befa:	f000 f96b 	bl	800c1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800befe:	4b15      	ldr	r3, [pc, #84]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d120      	bne.n	800bf48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bf06:	4814      	ldr	r0, [pc, #80]	; (800bf58 <prvCheckForValidListAndQueue+0x64>)
 800bf08:	f7fd fbfe 	bl	8009708 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bf0c:	4813      	ldr	r0, [pc, #76]	; (800bf5c <prvCheckForValidListAndQueue+0x68>)
 800bf0e:	f7fd fbfb 	bl	8009708 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bf12:	4b13      	ldr	r3, [pc, #76]	; (800bf60 <prvCheckForValidListAndQueue+0x6c>)
 800bf14:	4a10      	ldr	r2, [pc, #64]	; (800bf58 <prvCheckForValidListAndQueue+0x64>)
 800bf16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bf18:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <prvCheckForValidListAndQueue+0x70>)
 800bf1a:	4a10      	ldr	r2, [pc, #64]	; (800bf5c <prvCheckForValidListAndQueue+0x68>)
 800bf1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bf1e:	2300      	movs	r3, #0
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	4b11      	ldr	r3, [pc, #68]	; (800bf68 <prvCheckForValidListAndQueue+0x74>)
 800bf24:	4a11      	ldr	r2, [pc, #68]	; (800bf6c <prvCheckForValidListAndQueue+0x78>)
 800bf26:	2110      	movs	r1, #16
 800bf28:	200a      	movs	r0, #10
 800bf2a:	f7fd fd09 	bl	8009940 <xQueueGenericCreateStatic>
 800bf2e:	4603      	mov	r3, r0
 800bf30:	4a08      	ldr	r2, [pc, #32]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bf34:	4b07      	ldr	r3, [pc, #28]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bf3c:	4b05      	ldr	r3, [pc, #20]	; (800bf54 <prvCheckForValidListAndQueue+0x60>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	490b      	ldr	r1, [pc, #44]	; (800bf70 <prvCheckForValidListAndQueue+0x7c>)
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fc1a 	bl	800a77c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bf48:	f000 f974 	bl	800c234 <vPortExitCritical>
}
 800bf4c:	bf00      	nop
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	bf00      	nop
 800bf54:	20001204 	.word	0x20001204
 800bf58:	200011d4 	.word	0x200011d4
 800bf5c:	200011e8 	.word	0x200011e8
 800bf60:	200011fc 	.word	0x200011fc
 800bf64:	20001200 	.word	0x20001200
 800bf68:	200012b0 	.word	0x200012b0
 800bf6c:	20001210 	.word	0x20001210
 800bf70:	0800d688 	.word	0x0800d688

0800bf74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	60f8      	str	r0, [r7, #12]
 800bf7c:	60b9      	str	r1, [r7, #8]
 800bf7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	3b04      	subs	r3, #4
 800bf84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bf8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	3b04      	subs	r3, #4
 800bf92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	f023 0201 	bic.w	r2, r3, #1
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3b04      	subs	r3, #4
 800bfa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bfa4:	4a0c      	ldr	r2, [pc, #48]	; (800bfd8 <pxPortInitialiseStack+0x64>)
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	3b14      	subs	r3, #20
 800bfae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bfb0:	687a      	ldr	r2, [r7, #4]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3b04      	subs	r3, #4
 800bfba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f06f 0202 	mvn.w	r2, #2
 800bfc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	3b20      	subs	r3, #32
 800bfc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bfca:	68fb      	ldr	r3, [r7, #12]
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3714      	adds	r7, #20
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd6:	4770      	bx	lr
 800bfd8:	0800bfdd 	.word	0x0800bfdd

0800bfdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bfe6:	4b12      	ldr	r3, [pc, #72]	; (800c030 <prvTaskExitError+0x54>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bfee:	d00a      	beq.n	800c006 <prvTaskExitError+0x2a>
	__asm volatile
 800bff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff4:	f383 8811 	msr	BASEPRI, r3
 800bff8:	f3bf 8f6f 	isb	sy
 800bffc:	f3bf 8f4f 	dsb	sy
 800c000:	60fb      	str	r3, [r7, #12]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <prvTaskExitError+0x28>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	60bb      	str	r3, [r7, #8]
}
 800c018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c01a:	bf00      	nop
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0fc      	beq.n	800c01c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	3714      	adds	r7, #20
 800c028:	46bd      	mov	sp, r7
 800c02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02e:	4770      	bx	lr
 800c030:	2000001c 	.word	0x2000001c
	...

0800c040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c040:	4b07      	ldr	r3, [pc, #28]	; (800c060 <pxCurrentTCBConst2>)
 800c042:	6819      	ldr	r1, [r3, #0]
 800c044:	6808      	ldr	r0, [r1, #0]
 800c046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c04a:	f380 8809 	msr	PSP, r0
 800c04e:	f3bf 8f6f 	isb	sy
 800c052:	f04f 0000 	mov.w	r0, #0
 800c056:	f380 8811 	msr	BASEPRI, r0
 800c05a:	4770      	bx	lr
 800c05c:	f3af 8000 	nop.w

0800c060 <pxCurrentTCBConst2>:
 800c060:	20000cd4 	.word	0x20000cd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop

0800c068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c068:	4808      	ldr	r0, [pc, #32]	; (800c08c <prvPortStartFirstTask+0x24>)
 800c06a:	6800      	ldr	r0, [r0, #0]
 800c06c:	6800      	ldr	r0, [r0, #0]
 800c06e:	f380 8808 	msr	MSP, r0
 800c072:	f04f 0000 	mov.w	r0, #0
 800c076:	f380 8814 	msr	CONTROL, r0
 800c07a:	b662      	cpsie	i
 800c07c:	b661      	cpsie	f
 800c07e:	f3bf 8f4f 	dsb	sy
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	df00      	svc	0
 800c088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c08a:	bf00      	nop
 800c08c:	e000ed08 	.word	0xe000ed08

0800c090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c096:	4b46      	ldr	r3, [pc, #280]	; (800c1b0 <xPortStartScheduler+0x120>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4a46      	ldr	r2, [pc, #280]	; (800c1b4 <xPortStartScheduler+0x124>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d10a      	bne.n	800c0b6 <xPortStartScheduler+0x26>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	f383 8811 	msr	BASEPRI, r3
 800c0a8:	f3bf 8f6f 	isb	sy
 800c0ac:	f3bf 8f4f 	dsb	sy
 800c0b0:	613b      	str	r3, [r7, #16]
}
 800c0b2:	bf00      	nop
 800c0b4:	e7fe      	b.n	800c0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c0b6:	4b3e      	ldr	r3, [pc, #248]	; (800c1b0 <xPortStartScheduler+0x120>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4a3f      	ldr	r2, [pc, #252]	; (800c1b8 <xPortStartScheduler+0x128>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d10a      	bne.n	800c0d6 <xPortStartScheduler+0x46>
	__asm volatile
 800c0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c4:	f383 8811 	msr	BASEPRI, r3
 800c0c8:	f3bf 8f6f 	isb	sy
 800c0cc:	f3bf 8f4f 	dsb	sy
 800c0d0:	60fb      	str	r3, [r7, #12]
}
 800c0d2:	bf00      	nop
 800c0d4:	e7fe      	b.n	800c0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c0d6:	4b39      	ldr	r3, [pc, #228]	; (800c1bc <xPortStartScheduler+0x12c>)
 800c0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	b2db      	uxtb	r3, r3
 800c0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	22ff      	movs	r2, #255	; 0xff
 800c0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	b2db      	uxtb	r3, r3
 800c0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c0f0:	78fb      	ldrb	r3, [r7, #3]
 800c0f2:	b2db      	uxtb	r3, r3
 800c0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c0f8:	b2da      	uxtb	r2, r3
 800c0fa:	4b31      	ldr	r3, [pc, #196]	; (800c1c0 <xPortStartScheduler+0x130>)
 800c0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c0fe:	4b31      	ldr	r3, [pc, #196]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c100:	2207      	movs	r2, #7
 800c102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c104:	e009      	b.n	800c11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c106:	4b2f      	ldr	r3, [pc, #188]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3b01      	subs	r3, #1
 800c10c:	4a2d      	ldr	r2, [pc, #180]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c110:	78fb      	ldrb	r3, [r7, #3]
 800c112:	b2db      	uxtb	r3, r3
 800c114:	005b      	lsls	r3, r3, #1
 800c116:	b2db      	uxtb	r3, r3
 800c118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c11a:	78fb      	ldrb	r3, [r7, #3]
 800c11c:	b2db      	uxtb	r3, r3
 800c11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c122:	2b80      	cmp	r3, #128	; 0x80
 800c124:	d0ef      	beq.n	800c106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c126:	4b27      	ldr	r3, [pc, #156]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1c3 0307 	rsb	r3, r3, #7
 800c12e:	2b04      	cmp	r3, #4
 800c130:	d00a      	beq.n	800c148 <xPortStartScheduler+0xb8>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	60bb      	str	r3, [r7, #8]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c148:	4b1e      	ldr	r3, [pc, #120]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	021b      	lsls	r3, r3, #8
 800c14e:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c15a:	4a1a      	ldr	r2, [pc, #104]	; (800c1c4 <xPortStartScheduler+0x134>)
 800c15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	b2da      	uxtb	r2, r3
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c166:	4b18      	ldr	r3, [pc, #96]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a17      	ldr	r2, [pc, #92]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c172:	4b15      	ldr	r3, [pc, #84]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4a14      	ldr	r2, [pc, #80]	; (800c1c8 <xPortStartScheduler+0x138>)
 800c178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c17e:	f000 f8dd 	bl	800c33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c182:	4b12      	ldr	r3, [pc, #72]	; (800c1cc <xPortStartScheduler+0x13c>)
 800c184:	2200      	movs	r2, #0
 800c186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c188:	f000 f8fc 	bl	800c384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <xPortStartScheduler+0x140>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	4a0f      	ldr	r2, [pc, #60]	; (800c1d0 <xPortStartScheduler+0x140>)
 800c192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c198:	f7ff ff66 	bl	800c068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c19c:	f7fe ff48 	bl	800b030 <vTaskSwitchContext>
	prvTaskExitError();
 800c1a0:	f7ff ff1c 	bl	800bfdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c1a4:	2300      	movs	r3, #0
}
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3718      	adds	r7, #24
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	e000ed00 	.word	0xe000ed00
 800c1b4:	410fc271 	.word	0x410fc271
 800c1b8:	410fc270 	.word	0x410fc270
 800c1bc:	e000e400 	.word	0xe000e400
 800c1c0:	20001300 	.word	0x20001300
 800c1c4:	20001304 	.word	0x20001304
 800c1c8:	e000ed20 	.word	0xe000ed20
 800c1cc:	2000001c 	.word	0x2000001c
 800c1d0:	e000ef34 	.word	0xe000ef34

0800c1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	607b      	str	r3, [r7, #4]
}
 800c1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c1ee:	4b0f      	ldr	r3, [pc, #60]	; (800c22c <vPortEnterCritical+0x58>)
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	4a0d      	ldr	r2, [pc, #52]	; (800c22c <vPortEnterCritical+0x58>)
 800c1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c1f8:	4b0c      	ldr	r3, [pc, #48]	; (800c22c <vPortEnterCritical+0x58>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d10f      	bne.n	800c220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c200:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <vPortEnterCritical+0x5c>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	2b00      	cmp	r3, #0
 800c208:	d00a      	beq.n	800c220 <vPortEnterCritical+0x4c>
	__asm volatile
 800c20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	603b      	str	r3, [r7, #0]
}
 800c21c:	bf00      	nop
 800c21e:	e7fe      	b.n	800c21e <vPortEnterCritical+0x4a>
	}
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr
 800c22c:	2000001c 	.word	0x2000001c
 800c230:	e000ed04 	.word	0xe000ed04

0800c234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c23a:	4b12      	ldr	r3, [pc, #72]	; (800c284 <vPortExitCritical+0x50>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10a      	bne.n	800c258 <vPortExitCritical+0x24>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	607b      	str	r3, [r7, #4]
}
 800c254:	bf00      	nop
 800c256:	e7fe      	b.n	800c256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c258:	4b0a      	ldr	r3, [pc, #40]	; (800c284 <vPortExitCritical+0x50>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	3b01      	subs	r3, #1
 800c25e:	4a09      	ldr	r2, [pc, #36]	; (800c284 <vPortExitCritical+0x50>)
 800c260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c262:	4b08      	ldr	r3, [pc, #32]	; (800c284 <vPortExitCritical+0x50>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d105      	bne.n	800c276 <vPortExitCritical+0x42>
 800c26a:	2300      	movs	r3, #0
 800c26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	f383 8811 	msr	BASEPRI, r3
}
 800c274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c276:	bf00      	nop
 800c278:	370c      	adds	r7, #12
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	2000001c 	.word	0x2000001c
	...

0800c290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c290:	f3ef 8009 	mrs	r0, PSP
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	4b15      	ldr	r3, [pc, #84]	; (800c2f0 <pxCurrentTCBConst>)
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	f01e 0f10 	tst.w	lr, #16
 800c2a0:	bf08      	it	eq
 800c2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2aa:	6010      	str	r0, [r2, #0]
 800c2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c2b4:	f380 8811 	msr	BASEPRI, r0
 800c2b8:	f3bf 8f4f 	dsb	sy
 800c2bc:	f3bf 8f6f 	isb	sy
 800c2c0:	f7fe feb6 	bl	800b030 <vTaskSwitchContext>
 800c2c4:	f04f 0000 	mov.w	r0, #0
 800c2c8:	f380 8811 	msr	BASEPRI, r0
 800c2cc:	bc09      	pop	{r0, r3}
 800c2ce:	6819      	ldr	r1, [r3, #0]
 800c2d0:	6808      	ldr	r0, [r1, #0]
 800c2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d6:	f01e 0f10 	tst.w	lr, #16
 800c2da:	bf08      	it	eq
 800c2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c2e0:	f380 8809 	msr	PSP, r0
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	4770      	bx	lr
 800c2ea:	bf00      	nop
 800c2ec:	f3af 8000 	nop.w

0800c2f0 <pxCurrentTCBConst>:
 800c2f0:	20000cd4 	.word	0x20000cd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c2f4:	bf00      	nop
 800c2f6:	bf00      	nop

0800c2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b082      	sub	sp, #8
 800c2fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c302:	f383 8811 	msr	BASEPRI, r3
 800c306:	f3bf 8f6f 	isb	sy
 800c30a:	f3bf 8f4f 	dsb	sy
 800c30e:	607b      	str	r3, [r7, #4]
}
 800c310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c312:	f7fe fdd3 	bl	800aebc <xTaskIncrementTick>
 800c316:	4603      	mov	r3, r0
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d003      	beq.n	800c324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <xPortSysTickHandler+0x40>)
 800c31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c322:	601a      	str	r2, [r3, #0]
 800c324:	2300      	movs	r3, #0
 800c326:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	f383 8811 	msr	BASEPRI, r3
}
 800c32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c330:	bf00      	nop
 800c332:	3708      	adds	r7, #8
 800c334:	46bd      	mov	sp, r7
 800c336:	bd80      	pop	{r7, pc}
 800c338:	e000ed04 	.word	0xe000ed04

0800c33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c340:	4b0b      	ldr	r3, [pc, #44]	; (800c370 <vPortSetupTimerInterrupt+0x34>)
 800c342:	2200      	movs	r2, #0
 800c344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c346:	4b0b      	ldr	r3, [pc, #44]	; (800c374 <vPortSetupTimerInterrupt+0x38>)
 800c348:	2200      	movs	r2, #0
 800c34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c34c:	4b0a      	ldr	r3, [pc, #40]	; (800c378 <vPortSetupTimerInterrupt+0x3c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4a0a      	ldr	r2, [pc, #40]	; (800c37c <vPortSetupTimerInterrupt+0x40>)
 800c352:	fba2 2303 	umull	r2, r3, r2, r3
 800c356:	099b      	lsrs	r3, r3, #6
 800c358:	4a09      	ldr	r2, [pc, #36]	; (800c380 <vPortSetupTimerInterrupt+0x44>)
 800c35a:	3b01      	subs	r3, #1
 800c35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c35e:	4b04      	ldr	r3, [pc, #16]	; (800c370 <vPortSetupTimerInterrupt+0x34>)
 800c360:	2207      	movs	r2, #7
 800c362:	601a      	str	r2, [r3, #0]
}
 800c364:	bf00      	nop
 800c366:	46bd      	mov	sp, r7
 800c368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36c:	4770      	bx	lr
 800c36e:	bf00      	nop
 800c370:	e000e010 	.word	0xe000e010
 800c374:	e000e018 	.word	0xe000e018
 800c378:	20000000 	.word	0x20000000
 800c37c:	10624dd3 	.word	0x10624dd3
 800c380:	e000e014 	.word	0xe000e014

0800c384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c394 <vPortEnableVFP+0x10>
 800c388:	6801      	ldr	r1, [r0, #0]
 800c38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c38e:	6001      	str	r1, [r0, #0]
 800c390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c392:	bf00      	nop
 800c394:	e000ed88 	.word	0xe000ed88

0800c398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c39e:	f3ef 8305 	mrs	r3, IPSR
 800c3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	2b0f      	cmp	r3, #15
 800c3a8:	d914      	bls.n	800c3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c3aa:	4a17      	ldr	r2, [pc, #92]	; (800c408 <vPortValidateInterruptPriority+0x70>)
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	4413      	add	r3, r2
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c3b4:	4b15      	ldr	r3, [pc, #84]	; (800c40c <vPortValidateInterruptPriority+0x74>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	7afa      	ldrb	r2, [r7, #11]
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d20a      	bcs.n	800c3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	f383 8811 	msr	BASEPRI, r3
 800c3c6:	f3bf 8f6f 	isb	sy
 800c3ca:	f3bf 8f4f 	dsb	sy
 800c3ce:	607b      	str	r3, [r7, #4]
}
 800c3d0:	bf00      	nop
 800c3d2:	e7fe      	b.n	800c3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c3d4:	4b0e      	ldr	r3, [pc, #56]	; (800c410 <vPortValidateInterruptPriority+0x78>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c3dc:	4b0d      	ldr	r3, [pc, #52]	; (800c414 <vPortValidateInterruptPriority+0x7c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d90a      	bls.n	800c3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e8:	f383 8811 	msr	BASEPRI, r3
 800c3ec:	f3bf 8f6f 	isb	sy
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	603b      	str	r3, [r7, #0]
}
 800c3f6:	bf00      	nop
 800c3f8:	e7fe      	b.n	800c3f8 <vPortValidateInterruptPriority+0x60>
	}
 800c3fa:	bf00      	nop
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	e000e3f0 	.word	0xe000e3f0
 800c40c:	20001300 	.word	0x20001300
 800c410:	e000ed0c 	.word	0xe000ed0c
 800c414:	20001304 	.word	0x20001304

0800c418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b08a      	sub	sp, #40	; 0x28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c420:	2300      	movs	r3, #0
 800c422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c424:	f7fe fc8e 	bl	800ad44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c428:	4b5b      	ldr	r3, [pc, #364]	; (800c598 <pvPortMalloc+0x180>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c430:	f000 f920 	bl	800c674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c434:	4b59      	ldr	r3, [pc, #356]	; (800c59c <pvPortMalloc+0x184>)
 800c436:	681a      	ldr	r2, [r3, #0]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	4013      	ands	r3, r2
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f040 8093 	bne.w	800c568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d01d      	beq.n	800c484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c448:	2208      	movs	r2, #8
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	4413      	add	r3, r2
 800c44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	f003 0307 	and.w	r3, r3, #7
 800c456:	2b00      	cmp	r3, #0
 800c458:	d014      	beq.n	800c484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f023 0307 	bic.w	r3, r3, #7
 800c460:	3308      	adds	r3, #8
 800c462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f003 0307 	and.w	r3, r3, #7
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d00a      	beq.n	800c484 <pvPortMalloc+0x6c>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	617b      	str	r3, [r7, #20]
}
 800c480:	bf00      	nop
 800c482:	e7fe      	b.n	800c482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d06e      	beq.n	800c568 <pvPortMalloc+0x150>
 800c48a:	4b45      	ldr	r3, [pc, #276]	; (800c5a0 <pvPortMalloc+0x188>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	429a      	cmp	r2, r3
 800c492:	d869      	bhi.n	800c568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c494:	4b43      	ldr	r3, [pc, #268]	; (800c5a4 <pvPortMalloc+0x18c>)
 800c496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c498:	4b42      	ldr	r3, [pc, #264]	; (800c5a4 <pvPortMalloc+0x18c>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c49e:	e004      	b.n	800c4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d903      	bls.n	800c4bc <pvPortMalloc+0xa4>
 800c4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1f1      	bne.n	800c4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c4bc:	4b36      	ldr	r3, [pc, #216]	; (800c598 <pvPortMalloc+0x180>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d050      	beq.n	800c568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c4c6:	6a3b      	ldr	r3, [r7, #32]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	2208      	movs	r2, #8
 800c4cc:	4413      	add	r3, r2
 800c4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	6a3b      	ldr	r3, [r7, #32]
 800c4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	1ad2      	subs	r2, r2, r3
 800c4e0:	2308      	movs	r3, #8
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d91f      	bls.n	800c528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	4413      	add	r3, r2
 800c4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	f003 0307 	and.w	r3, r3, #7
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d00a      	beq.n	800c510 <pvPortMalloc+0xf8>
	__asm volatile
 800c4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4fe:	f383 8811 	msr	BASEPRI, r3
 800c502:	f3bf 8f6f 	isb	sy
 800c506:	f3bf 8f4f 	dsb	sy
 800c50a:	613b      	str	r3, [r7, #16]
}
 800c50c:	bf00      	nop
 800c50e:	e7fe      	b.n	800c50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c512:	685a      	ldr	r2, [r3, #4]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	1ad2      	subs	r2, r2, r3
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c51e:	687a      	ldr	r2, [r7, #4]
 800c520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c522:	69b8      	ldr	r0, [r7, #24]
 800c524:	f000 f908 	bl	800c738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c528:	4b1d      	ldr	r3, [pc, #116]	; (800c5a0 <pvPortMalloc+0x188>)
 800c52a:	681a      	ldr	r2, [r3, #0]
 800c52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	4a1b      	ldr	r2, [pc, #108]	; (800c5a0 <pvPortMalloc+0x188>)
 800c534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c536:	4b1a      	ldr	r3, [pc, #104]	; (800c5a0 <pvPortMalloc+0x188>)
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	4b1b      	ldr	r3, [pc, #108]	; (800c5a8 <pvPortMalloc+0x190>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	429a      	cmp	r2, r3
 800c540:	d203      	bcs.n	800c54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c542:	4b17      	ldr	r3, [pc, #92]	; (800c5a0 <pvPortMalloc+0x188>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	4a18      	ldr	r2, [pc, #96]	; (800c5a8 <pvPortMalloc+0x190>)
 800c548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c54c:	685a      	ldr	r2, [r3, #4]
 800c54e:	4b13      	ldr	r3, [pc, #76]	; (800c59c <pvPortMalloc+0x184>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	431a      	orrs	r2, r3
 800c554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55a:	2200      	movs	r2, #0
 800c55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <pvPortMalloc+0x194>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3301      	adds	r3, #1
 800c564:	4a11      	ldr	r2, [pc, #68]	; (800c5ac <pvPortMalloc+0x194>)
 800c566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c568:	f7fe fbfa 	bl	800ad60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	f003 0307 	and.w	r3, r3, #7
 800c572:	2b00      	cmp	r3, #0
 800c574:	d00a      	beq.n	800c58c <pvPortMalloc+0x174>
	__asm volatile
 800c576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c57a:	f383 8811 	msr	BASEPRI, r3
 800c57e:	f3bf 8f6f 	isb	sy
 800c582:	f3bf 8f4f 	dsb	sy
 800c586:	60fb      	str	r3, [r7, #12]
}
 800c588:	bf00      	nop
 800c58a:	e7fe      	b.n	800c58a <pvPortMalloc+0x172>
	return pvReturn;
 800c58c:	69fb      	ldr	r3, [r7, #28]
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3728      	adds	r7, #40	; 0x28
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop
 800c598:	20004f10 	.word	0x20004f10
 800c59c:	20004f24 	.word	0x20004f24
 800c5a0:	20004f14 	.word	0x20004f14
 800c5a4:	20004f08 	.word	0x20004f08
 800c5a8:	20004f18 	.word	0x20004f18
 800c5ac:	20004f1c 	.word	0x20004f1c

0800c5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b086      	sub	sp, #24
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d04d      	beq.n	800c65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c5c2:	2308      	movs	r3, #8
 800c5c4:	425b      	negs	r3, r3
 800c5c6:	697a      	ldr	r2, [r7, #20]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	685a      	ldr	r2, [r3, #4]
 800c5d4:	4b24      	ldr	r3, [pc, #144]	; (800c668 <vPortFree+0xb8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4013      	ands	r3, r2
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10a      	bne.n	800c5f4 <vPortFree+0x44>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	60fb      	str	r3, [r7, #12]
}
 800c5f0:	bf00      	nop
 800c5f2:	e7fe      	b.n	800c5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c5f4:	693b      	ldr	r3, [r7, #16]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00a      	beq.n	800c612 <vPortFree+0x62>
	__asm volatile
 800c5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c600:	f383 8811 	msr	BASEPRI, r3
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	f3bf 8f4f 	dsb	sy
 800c60c:	60bb      	str	r3, [r7, #8]
}
 800c60e:	bf00      	nop
 800c610:	e7fe      	b.n	800c610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	4b14      	ldr	r3, [pc, #80]	; (800c668 <vPortFree+0xb8>)
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	4013      	ands	r3, r2
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d01e      	beq.n	800c65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d11a      	bne.n	800c65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	4b0e      	ldr	r3, [pc, #56]	; (800c668 <vPortFree+0xb8>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	43db      	mvns	r3, r3
 800c632:	401a      	ands	r2, r3
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c638:	f7fe fb84 	bl	800ad44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	685a      	ldr	r2, [r3, #4]
 800c640:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <vPortFree+0xbc>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	4413      	add	r3, r2
 800c646:	4a09      	ldr	r2, [pc, #36]	; (800c66c <vPortFree+0xbc>)
 800c648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c64a:	6938      	ldr	r0, [r7, #16]
 800c64c:	f000 f874 	bl	800c738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c650:	4b07      	ldr	r3, [pc, #28]	; (800c670 <vPortFree+0xc0>)
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	3301      	adds	r3, #1
 800c656:	4a06      	ldr	r2, [pc, #24]	; (800c670 <vPortFree+0xc0>)
 800c658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c65a:	f7fe fb81 	bl	800ad60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c65e:	bf00      	nop
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
 800c666:	bf00      	nop
 800c668:	20004f24 	.word	0x20004f24
 800c66c:	20004f14 	.word	0x20004f14
 800c670:	20004f20 	.word	0x20004f20

0800c674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c674:	b480      	push	{r7}
 800c676:	b085      	sub	sp, #20
 800c678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c67a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c680:	4b27      	ldr	r3, [pc, #156]	; (800c720 <prvHeapInit+0xac>)
 800c682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f003 0307 	and.w	r3, r3, #7
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00c      	beq.n	800c6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	3307      	adds	r3, #7
 800c692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f023 0307 	bic.w	r3, r3, #7
 800c69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c69c:	68ba      	ldr	r2, [r7, #8]
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	1ad3      	subs	r3, r2, r3
 800c6a2:	4a1f      	ldr	r2, [pc, #124]	; (800c720 <prvHeapInit+0xac>)
 800c6a4:	4413      	add	r3, r2
 800c6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c6ac:	4a1d      	ldr	r2, [pc, #116]	; (800c724 <prvHeapInit+0xb0>)
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c6b2:	4b1c      	ldr	r3, [pc, #112]	; (800c724 <prvHeapInit+0xb0>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68ba      	ldr	r2, [r7, #8]
 800c6bc:	4413      	add	r3, r2
 800c6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c6c0:	2208      	movs	r2, #8
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	1a9b      	subs	r3, r3, r2
 800c6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f023 0307 	bic.w	r3, r3, #7
 800c6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	4a15      	ldr	r2, [pc, #84]	; (800c728 <prvHeapInit+0xb4>)
 800c6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c6d6:	4b14      	ldr	r3, [pc, #80]	; (800c728 <prvHeapInit+0xb4>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	2200      	movs	r2, #0
 800c6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c6de:	4b12      	ldr	r3, [pc, #72]	; (800c728 <prvHeapInit+0xb4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	68fa      	ldr	r2, [r7, #12]
 800c6ee:	1ad2      	subs	r2, r2, r3
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c6f4:	4b0c      	ldr	r3, [pc, #48]	; (800c728 <prvHeapInit+0xb4>)
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	685b      	ldr	r3, [r3, #4]
 800c700:	4a0a      	ldr	r2, [pc, #40]	; (800c72c <prvHeapInit+0xb8>)
 800c702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	4a09      	ldr	r2, [pc, #36]	; (800c730 <prvHeapInit+0xbc>)
 800c70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c70c:	4b09      	ldr	r3, [pc, #36]	; (800c734 <prvHeapInit+0xc0>)
 800c70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c712:	601a      	str	r2, [r3, #0]
}
 800c714:	bf00      	nop
 800c716:	3714      	adds	r7, #20
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr
 800c720:	20001308 	.word	0x20001308
 800c724:	20004f08 	.word	0x20004f08
 800c728:	20004f10 	.word	0x20004f10
 800c72c:	20004f18 	.word	0x20004f18
 800c730:	20004f14 	.word	0x20004f14
 800c734:	20004f24 	.word	0x20004f24

0800c738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c738:	b480      	push	{r7}
 800c73a:	b085      	sub	sp, #20
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c740:	4b28      	ldr	r3, [pc, #160]	; (800c7e4 <prvInsertBlockIntoFreeList+0xac>)
 800c742:	60fb      	str	r3, [r7, #12]
 800c744:	e002      	b.n	800c74c <prvInsertBlockIntoFreeList+0x14>
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60fb      	str	r3, [r7, #12]
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	429a      	cmp	r2, r3
 800c754:	d8f7      	bhi.n	800c746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	68ba      	ldr	r2, [r7, #8]
 800c760:	4413      	add	r3, r2
 800c762:	687a      	ldr	r2, [r7, #4]
 800c764:	429a      	cmp	r2, r3
 800c766:	d108      	bne.n	800c77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	441a      	add	r2, r3
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	68ba      	ldr	r2, [r7, #8]
 800c784:	441a      	add	r2, r3
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d118      	bne.n	800c7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	4b15      	ldr	r3, [pc, #84]	; (800c7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	429a      	cmp	r2, r3
 800c798:	d00d      	beq.n	800c7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685a      	ldr	r2, [r3, #4]
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	685b      	ldr	r3, [r3, #4]
 800c7a4:	441a      	add	r2, r3
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	601a      	str	r2, [r3, #0]
 800c7b4:	e008      	b.n	800c7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c7b6:	4b0c      	ldr	r3, [pc, #48]	; (800c7e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c7b8:	681a      	ldr	r2, [r3, #0]
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	e003      	b.n	800c7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c7c8:	68fa      	ldr	r2, [r7, #12]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d002      	beq.n	800c7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	687a      	ldr	r2, [r7, #4]
 800c7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c7d6:	bf00      	nop
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	20004f08 	.word	0x20004f08
 800c7e8:	20004f10 	.word	0x20004f10

0800c7ec <vTaskCOM>:
 *      Author: lord448
 */


void vTaskCOM(void *argument)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		osDelay(1);
 800c7f4:	2001      	movs	r0, #1
 800c7f6:	f7fc fe19 	bl	800942c <osDelay>
	{
 800c7fa:	e7fb      	b.n	800c7f4 <vTaskCOM+0x8>

0800c7fc <vTaskUI>:
* @brief Function implementing the TaskUI thread.
* @param argument: Not used
* @retval None
*/
void vTaskUI(void *argument)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b08c      	sub	sp, #48	; 0x30
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
	uint16_t *ITMLogoRAMBuffer;
	uint16_t *NonWhitePixelsValue;
	uint32_t *NonWhitePixelsIndex;
	uint16_t PixelsIndex = 0;
 800c804:	2300      	movs	r3, #0
 800c806:	85fb      	strh	r3, [r7, #46]	; 0x2e

	LCD_init();
 800c808:	f7f4 fff2 	bl	80017f0 <LCD_init>
	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream1, HAL_DMA_XFER_CPLT_CB_ID, DMATrasferCpltCallback);
 800c80c:	4a90      	ldr	r2, [pc, #576]	; (800ca50 <vTaskUI+0x254>)
 800c80e:	2100      	movs	r1, #0
 800c810:	4890      	ldr	r0, [pc, #576]	; (800ca54 <vTaskUI+0x258>)
 800c812:	f7f6 fa95 	bl	8002d40 <HAL_DMA_RegisterCallback>

	/*Fade white in*/
	for(uint16_t r = 0, g = 0, b = 0; g < 63; r++, g+=2, b++)
 800c816:	2300      	movs	r3, #0
 800c818:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c81a:	2300      	movs	r3, #0
 800c81c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c81e:	2300      	movs	r3, #0
 800c820:	853b      	strh	r3, [r7, #40]	; 0x28
 800c822:	e01d      	b.n	800c860 <vTaskUI+0x64>
	{
		UG_FillScreen(RGB565Color(r, g, b));
 800c824:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c826:	02db      	lsls	r3, r3, #11
 800c828:	b21a      	sxth	r2, r3
 800c82a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c82c:	015b      	lsls	r3, r3, #5
 800c82e:	b21b      	sxth	r3, r3
 800c830:	4313      	orrs	r3, r2
 800c832:	b21a      	sxth	r2, r3
 800c834:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800c838:	4313      	orrs	r3, r2
 800c83a:	b21b      	sxth	r3, r3
 800c83c:	b29b      	uxth	r3, r3
 800c83e:	4618      	mov	r0, r3
 800c840:	f7f8 ff1c 	bl	800567c <UG_FillScreen>
		UG_Update();
 800c844:	f7fa fd46 	bl	80072d4 <UG_Update>
		osDelay(pdMS_TO_TICKS(20));
 800c848:	2014      	movs	r0, #20
 800c84a:	f7fc fdef 	bl	800942c <osDelay>
	for(uint16_t r = 0, g = 0, b = 0; g < 63; r++, g+=2, b++)
 800c84e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c850:	3301      	adds	r3, #1
 800c852:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800c854:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c856:	3302      	adds	r3, #2
 800c858:	857b      	strh	r3, [r7, #42]	; 0x2a
 800c85a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c85c:	3301      	adds	r3, #1
 800c85e:	853b      	strh	r3, [r7, #40]	; 0x28
 800c860:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800c862:	2b3e      	cmp	r3, #62	; 0x3e
 800c864:	d9de      	bls.n	800c824 <vTaskUI+0x28>
	}

	/*TODO: Change to memory pool to use heap memory instead of stack*/
	ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE*2, sizeof(uint16_t));
 800c866:	2102      	movs	r1, #2
 800c868:	f24c 0072 	movw	r0, #49266	; 0xc072
 800c86c:	f000 f914 	bl	800ca98 <calloc>
 800c870:	4603      	mov	r3, r0
 800c872:	623b      	str	r3, [r7, #32]
	/*Calloc Failure*/
	if(ITMLogoRAMBuffer == NULL)
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d102      	bne.n	800c880 <vTaskUI+0x84>
	{
		/*Report for the debugger*/
		DynamicErrorHandler("ITMLogoRAMBuffer");
 800c87a:	4877      	ldr	r0, [pc, #476]	; (800ca58 <vTaskUI+0x25c>)
 800c87c:	f000 f8f6 	bl	800ca6c <DynamicErrorHandler>
	}
	else
	{
		/*Do Nothing*/
	}
	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream1, (uint32_t)ITMLogoData, (uint32_t)ITMLogoRAMBuffer, ITMLOGO_SIZE);
 800c880:	4976      	ldr	r1, [pc, #472]	; (800ca5c <vTaskUI+0x260>)
 800c882:	6a3a      	ldr	r2, [r7, #32]
 800c884:	f246 0339 	movw	r3, #24633	; 0x6039
 800c888:	4872      	ldr	r0, [pc, #456]	; (800ca54 <vTaskUI+0x258>)
 800c88a:	f7f5 ffe5 	bl	8002858 <HAL_DMA_Start_IT>
	osSemaphoreAcquire(xSemaphoreDMACompleteHandle, osWaitForever);
 800c88e:	4b74      	ldr	r3, [pc, #464]	; (800ca60 <vTaskUI+0x264>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c896:	4618      	mov	r0, r3
 800c898:	f7fc fe6c 	bl	8009574 <osSemaphoreAcquire>

	UG_BMP ITMLogoRAM = {
 800c89c:	f107 030c 	add.w	r3, r7, #12
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	601a      	str	r2, [r3, #0]
 800c8a4:	605a      	str	r2, [r3, #4]
 800c8a6:	609a      	str	r2, [r3, #8]
 800c8a8:	6a3b      	ldr	r3, [r7, #32]
 800c8aa:	60fb      	str	r3, [r7, #12]
 800c8ac:	23a1      	movs	r3, #161	; 0xa1
 800c8ae:	823b      	strh	r3, [r7, #16]
 800c8b0:	2399      	movs	r3, #153	; 0x99
 800c8b2:	827b      	strh	r3, [r7, #18]
 800c8b4:	2310      	movs	r3, #16
 800c8b6:	753b      	strb	r3, [r7, #20]
		.height = 153,
		.bpp = BMP_BPP_16
	};

	/*Getting the non white pixels*/
	NonWhitePixelsValue = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 800c8b8:	2102      	movs	r1, #2
 800c8ba:	f246 0039 	movw	r0, #24633	; 0x6039
 800c8be:	f000 f8eb 	bl	800ca98 <calloc>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	61fb      	str	r3, [r7, #28]
	NonWhitePixelsIndex = (uint32_t*)calloc(ITMLOGO_SIZE, sizeof(uint32_t));
 800c8c6:	2104      	movs	r1, #4
 800c8c8:	f246 0039 	movw	r0, #24633	; 0x6039
 800c8cc:	f000 f8e4 	bl	800ca98 <calloc>
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	61bb      	str	r3, [r7, #24]
	if(NonWhitePixelsValue == NULL)
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d103      	bne.n	800c8e2 <vTaskUI+0xe6>
	{
		DynamicErrorHandler("NonWhitePixelsValue");
 800c8da:	4862      	ldr	r0, [pc, #392]	; (800ca64 <vTaskUI+0x268>)
 800c8dc:	f000 f8c6 	bl	800ca6c <DynamicErrorHandler>
 800c8e0:	e005      	b.n	800c8ee <vTaskUI+0xf2>
	}
	else if(NonWhitePixelsIndex == NULL)
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d102      	bne.n	800c8ee <vTaskUI+0xf2>
	{
		DynamicErrorHandler("NonWhitePixelsIndex");
 800c8e8:	485f      	ldr	r0, [pc, #380]	; (800ca68 <vTaskUI+0x26c>)
 800c8ea:	f000 f8bf 	bl	800ca6c <DynamicErrorHandler>
	}
	else
	{
		/*Do Nothing*/
	}
	PixelsIndex = 0; /*Reusing variable for as index for the buffers*/
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i = 0; i < ITMLOGO_SIZE*2; i++)
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c8f6:	e01e      	b.n	800c936 <vTaskUI+0x13a>
	{
		if((uint16_t)ITMLogoRAMBuffer[i] != 0xFFFF)
 800c8f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8fa:	005b      	lsls	r3, r3, #1
 800c8fc:	6a3a      	ldr	r2, [r7, #32]
 800c8fe:	4413      	add	r3, r2
 800c900:	881b      	ldrh	r3, [r3, #0]
 800c902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c906:	4293      	cmp	r3, r2
 800c908:	d012      	beq.n	800c930 <vTaskUI+0x134>
		{
			/*Found a non white pixel*/
			NonWhitePixelsValue[PixelsIndex] = ITMLogoRAMBuffer[i];
 800c90a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c90c:	005b      	lsls	r3, r3, #1
 800c90e:	6a3a      	ldr	r2, [r7, #32]
 800c910:	441a      	add	r2, r3
 800c912:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c914:	005b      	lsls	r3, r3, #1
 800c916:	69f9      	ldr	r1, [r7, #28]
 800c918:	440b      	add	r3, r1
 800c91a:	8812      	ldrh	r2, [r2, #0]
 800c91c:	801a      	strh	r2, [r3, #0]
			NonWhitePixelsIndex[PixelsIndex] = i;
 800c91e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c920:	009b      	lsls	r3, r3, #2
 800c922:	69ba      	ldr	r2, [r7, #24]
 800c924:	4413      	add	r3, r2
 800c926:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c928:	601a      	str	r2, [r3, #0]
			PixelsIndex++; /*At the end of the loop, will have the max number of data needed*/
 800c92a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c92c:	3301      	adds	r3, #1
 800c92e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i = 0; i < ITMLOGO_SIZE*2; i++)
 800c930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c932:	3301      	adds	r3, #1
 800c934:	84fb      	strh	r3, [r7, #38]	; 0x26
 800c936:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c938:	f24c 0271 	movw	r2, #49265	; 0xc071
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d9db      	bls.n	800c8f8 <vTaskUI+0xfc>
		}
	}
	/*Free RAM that is not used*/
	NonWhitePixelsValue = realloc(NonWhitePixelsValue, (PixelsIndex+1)*sizeof(uint16_t));
 800c940:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c942:	3301      	adds	r3, #1
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	4619      	mov	r1, r3
 800c948:	69f8      	ldr	r0, [r7, #28]
 800c94a:	f000 f9fd 	bl	800cd48 <realloc>
 800c94e:	61f8      	str	r0, [r7, #28]
	NonWhitePixelsIndex = realloc(NonWhitePixelsIndex, (PixelsIndex+1)*sizeof(uint32_t));
 800c950:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c952:	3301      	adds	r3, #1
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4619      	mov	r1, r3
 800c958:	69b8      	ldr	r0, [r7, #24]
 800c95a:	f000 f9f5 	bl	800cd48 <realloc>
 800c95e:	61b8      	str	r0, [r7, #24]

	/*Fade animation logo in*/
	memset(ITMLogoRAMBuffer, 0xFFFF, ITMLOGO_SIZE*2); /*Setting white buffer*/
 800c960:	f24c 0272 	movw	r2, #49266	; 0xc072
 800c964:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c968:	6a38      	ldr	r0, [r7, #32]
 800c96a:	f000 f8ef 	bl	800cb4c <memset>
	ITMLogoRAM.p = ITMLogoRAMBuffer;
 800c96e:	6a3b      	ldr	r3, [r7, #32]
 800c970:	60fb      	str	r3, [r7, #12]
	while(memcmp(ITMLogoRAMBuffer, ITMLogoData, ITMLOGO_SIZE) != 0)
 800c972:	e03f      	b.n	800c9f4 <vTaskUI+0x1f8>
	{
		for(uint16_t i = 0; i < PixelsIndex; i++)
 800c974:	2300      	movs	r3, #0
 800c976:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c978:	e01e      	b.n	800c9b8 <vTaskUI+0x1bc>
		{
			if(ITMLogoRAMBuffer[NonWhitePixelsIndex[i]] != NonWhitePixelsValue[i])
 800c97a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c97c:	009b      	lsls	r3, r3, #2
 800c97e:	69ba      	ldr	r2, [r7, #24]
 800c980:	4413      	add	r3, r2
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	005b      	lsls	r3, r3, #1
 800c986:	6a3a      	ldr	r2, [r7, #32]
 800c988:	4413      	add	r3, r2
 800c98a:	881a      	ldrh	r2, [r3, #0]
 800c98c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c98e:	005b      	lsls	r3, r3, #1
 800c990:	69f9      	ldr	r1, [r7, #28]
 800c992:	440b      	add	r3, r1
 800c994:	881b      	ldrh	r3, [r3, #0]
 800c996:	429a      	cmp	r2, r3
 800c998:	d00b      	beq.n	800c9b2 <vTaskUI+0x1b6>
			{
				ITMLogoRAMBuffer[NonWhitePixelsIndex[i]]--; /*Until it gets the color*/
 800c99a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	69ba      	ldr	r2, [r7, #24]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	6a3a      	ldr	r2, [r7, #32]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	881a      	ldrh	r2, [r3, #0]
 800c9ac:	3a01      	subs	r2, #1
 800c9ae:	b292      	uxth	r2, r2
 800c9b0:	801a      	strh	r2, [r3, #0]
		for(uint16_t i = 0; i < PixelsIndex; i++)
 800c9b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c9b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c9ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d3dc      	bcc.n	800c97a <vTaskUI+0x17e>
			}
		}
		ITMLogoRAM.p = ITMLogoRAMBuffer;
 800c9c0:	6a3b      	ldr	r3, [r7, #32]
 800c9c2:	60fb      	str	r3, [r7, #12]
		UG_DrawBMP((LCD_WIDTH-ITMLogoRAM.width)/2, (LCD_HEIGHT-ITMLogoRAM.height)/2, &ITMLogoRAM);
 800c9c4:	8a3b      	ldrh	r3, [r7, #16]
 800c9c6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800c9ca:	0fda      	lsrs	r2, r3, #31
 800c9cc:	4413      	add	r3, r2
 800c9ce:	105b      	asrs	r3, r3, #1
 800c9d0:	b218      	sxth	r0, r3
 800c9d2:	8a7b      	ldrh	r3, [r7, #18]
 800c9d4:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800c9d8:	0fda      	lsrs	r2, r3, #31
 800c9da:	4413      	add	r3, r2
 800c9dc:	105b      	asrs	r3, r3, #1
 800c9de:	b21b      	sxth	r3, r3
 800c9e0:	f107 020c 	add.w	r2, r7, #12
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	f7fa fd35 	bl	8007454 <UG_DrawBMP>
		UG_Update();
 800c9ea:	f7fa fc73 	bl	80072d4 <UG_Update>
		osDelay(pdMS_TO_TICKS(20));
 800c9ee:	2014      	movs	r0, #20
 800c9f0:	f7fc fd1c 	bl	800942c <osDelay>
	while(memcmp(ITMLogoRAMBuffer, ITMLogoData, ITMLOGO_SIZE) != 0)
 800c9f4:	f246 0239 	movw	r2, #24633	; 0x6039
 800c9f8:	4918      	ldr	r1, [pc, #96]	; (800ca5c <vTaskUI+0x260>)
 800c9fa:	6a38      	ldr	r0, [r7, #32]
 800c9fc:	f000 f888 	bl	800cb10 <memcmp>
 800ca00:	4603      	mov	r3, r0
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d1b6      	bne.n	800c974 <vTaskUI+0x178>
	}

	UG_DrawBMP((LCD_WIDTH-ITMLogoRAM.width)/2, (LCD_HEIGHT-ITMLogoRAM.height)/2, &ITMLogoRAM);
 800ca06:	8a3b      	ldrh	r3, [r7, #16]
 800ca08:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800ca0c:	0fda      	lsrs	r2, r3, #31
 800ca0e:	4413      	add	r3, r2
 800ca10:	105b      	asrs	r3, r3, #1
 800ca12:	b218      	sxth	r0, r3
 800ca14:	8a7b      	ldrh	r3, [r7, #18]
 800ca16:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 800ca1a:	0fda      	lsrs	r2, r3, #31
 800ca1c:	4413      	add	r3, r2
 800ca1e:	105b      	asrs	r3, r3, #1
 800ca20:	b21b      	sxth	r3, r3
 800ca22:	f107 020c 	add.w	r2, r7, #12
 800ca26:	4619      	mov	r1, r3
 800ca28:	f7fa fd14 	bl	8007454 <UG_DrawBMP>
	UG_Update();
 800ca2c:	f7fa fc52 	bl	80072d4 <UG_Update>
	osDelay(pdMS_TO_TICKS(3000));
 800ca30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ca34:	f7fc fcfa 	bl	800942c <osDelay>

	free(ITMLogoRAMBuffer);
 800ca38:	6a38      	ldr	r0, [r7, #32]
 800ca3a:	f000 f861 	bl	800cb00 <free>
	free(NonWhitePixelsValue);
 800ca3e:	69f8      	ldr	r0, [r7, #28]
 800ca40:	f000 f85e 	bl	800cb00 <free>
	free(NonWhitePixelsIndex);
 800ca44:	69b8      	ldr	r0, [r7, #24]
 800ca46:	f000 f85b 	bl	800cb00 <free>
	/*!HIGH RAM CONSUMPTION ZONE*/
  for(;;)
  {
  	LCD_Test();
 800ca4a:	f7f4 ff79 	bl	8001940 <LCD_Test>
 800ca4e:	e7fc      	b.n	800ca4a <vTaskUI+0x24e>
 800ca50:	0800ca79 	.word	0x0800ca79
 800ca54:	20000250 	.word	0x20000250
 800ca58:	0800d690 	.word	0x0800d690
 800ca5c:	08020984 	.word	0x08020984
 800ca60:	200002c8 	.word	0x200002c8
 800ca64:	0800d6a4 	.word	0x0800d6a4
 800ca68:	0800d6b8 	.word	0x0800d6b8

0800ca6c <DynamicErrorHandler>:
{

}

static void DynamicErrorHandler(char *str)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	/*Halting the task*/
	while(1)
 800ca74:	e7fe      	b.n	800ca74 <DynamicErrorHandler+0x8>
	...

0800ca78 <DMATrasferCpltCallback>:
		/*Do nothing, check buffer with debugger*/
	}
}

void DMATrasferCpltCallback(DMA_HandleTypeDef *DmaHandle)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(xSemaphoreDMACompleteHandle);
 800ca80:	4b04      	ldr	r3, [pc, #16]	; (800ca94 <DMATrasferCpltCallback+0x1c>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fc fdc7 	bl	8009618 <osSemaphoreRelease>
}
 800ca8a:	bf00      	nop
 800ca8c:	3708      	adds	r7, #8
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	200002c8 	.word	0x200002c8

0800ca98 <calloc>:
 800ca98:	4b02      	ldr	r3, [pc, #8]	; (800caa4 <calloc+0xc>)
 800ca9a:	460a      	mov	r2, r1
 800ca9c:	4601      	mov	r1, r0
 800ca9e:	6818      	ldr	r0, [r3, #0]
 800caa0:	f000 b85c 	b.w	800cb5c <_calloc_r>
 800caa4:	2000002c 	.word	0x2000002c

0800caa8 <__errno>:
 800caa8:	4b01      	ldr	r3, [pc, #4]	; (800cab0 <__errno+0x8>)
 800caaa:	6818      	ldr	r0, [r3, #0]
 800caac:	4770      	bx	lr
 800caae:	bf00      	nop
 800cab0:	2000002c 	.word	0x2000002c

0800cab4 <__libc_init_array>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	4d0d      	ldr	r5, [pc, #52]	; (800caec <__libc_init_array+0x38>)
 800cab8:	4c0d      	ldr	r4, [pc, #52]	; (800caf0 <__libc_init_array+0x3c>)
 800caba:	1b64      	subs	r4, r4, r5
 800cabc:	10a4      	asrs	r4, r4, #2
 800cabe:	2600      	movs	r6, #0
 800cac0:	42a6      	cmp	r6, r4
 800cac2:	d109      	bne.n	800cad8 <__libc_init_array+0x24>
 800cac4:	4d0b      	ldr	r5, [pc, #44]	; (800caf4 <__libc_init_array+0x40>)
 800cac6:	4c0c      	ldr	r4, [pc, #48]	; (800caf8 <__libc_init_array+0x44>)
 800cac8:	f000 fd2c 	bl	800d524 <_init>
 800cacc:	1b64      	subs	r4, r4, r5
 800cace:	10a4      	asrs	r4, r4, #2
 800cad0:	2600      	movs	r6, #0
 800cad2:	42a6      	cmp	r6, r4
 800cad4:	d105      	bne.n	800cae2 <__libc_init_array+0x2e>
 800cad6:	bd70      	pop	{r4, r5, r6, pc}
 800cad8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cadc:	4798      	blx	r3
 800cade:	3601      	adds	r6, #1
 800cae0:	e7ee      	b.n	800cac0 <__libc_init_array+0xc>
 800cae2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cae6:	4798      	blx	r3
 800cae8:	3601      	adds	r6, #1
 800caea:	e7f2      	b.n	800cad2 <__libc_init_array+0x1e>
 800caec:	0802ca94 	.word	0x0802ca94
 800caf0:	0802ca94 	.word	0x0802ca94
 800caf4:	0802ca94 	.word	0x0802ca94
 800caf8:	0802ca98 	.word	0x0802ca98

0800cafc <__retarget_lock_acquire_recursive>:
 800cafc:	4770      	bx	lr

0800cafe <__retarget_lock_release_recursive>:
 800cafe:	4770      	bx	lr

0800cb00 <free>:
 800cb00:	4b02      	ldr	r3, [pc, #8]	; (800cb0c <free+0xc>)
 800cb02:	4601      	mov	r1, r0
 800cb04:	6818      	ldr	r0, [r3, #0]
 800cb06:	f000 b83f 	b.w	800cb88 <_free_r>
 800cb0a:	bf00      	nop
 800cb0c:	2000002c 	.word	0x2000002c

0800cb10 <memcmp>:
 800cb10:	b510      	push	{r4, lr}
 800cb12:	3901      	subs	r1, #1
 800cb14:	4402      	add	r2, r0
 800cb16:	4290      	cmp	r0, r2
 800cb18:	d101      	bne.n	800cb1e <memcmp+0xe>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	e005      	b.n	800cb2a <memcmp+0x1a>
 800cb1e:	7803      	ldrb	r3, [r0, #0]
 800cb20:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800cb24:	42a3      	cmp	r3, r4
 800cb26:	d001      	beq.n	800cb2c <memcmp+0x1c>
 800cb28:	1b18      	subs	r0, r3, r4
 800cb2a:	bd10      	pop	{r4, pc}
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	e7f2      	b.n	800cb16 <memcmp+0x6>

0800cb30 <memcpy>:
 800cb30:	440a      	add	r2, r1
 800cb32:	4291      	cmp	r1, r2
 800cb34:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800cb38:	d100      	bne.n	800cb3c <memcpy+0xc>
 800cb3a:	4770      	bx	lr
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cb42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cb46:	4291      	cmp	r1, r2
 800cb48:	d1f9      	bne.n	800cb3e <memcpy+0xe>
 800cb4a:	bd10      	pop	{r4, pc}

0800cb4c <memset>:
 800cb4c:	4402      	add	r2, r0
 800cb4e:	4603      	mov	r3, r0
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d100      	bne.n	800cb56 <memset+0xa>
 800cb54:	4770      	bx	lr
 800cb56:	f803 1b01 	strb.w	r1, [r3], #1
 800cb5a:	e7f9      	b.n	800cb50 <memset+0x4>

0800cb5c <_calloc_r>:
 800cb5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb5e:	fba1 2402 	umull	r2, r4, r1, r2
 800cb62:	b94c      	cbnz	r4, 800cb78 <_calloc_r+0x1c>
 800cb64:	4611      	mov	r1, r2
 800cb66:	9201      	str	r2, [sp, #4]
 800cb68:	f000 f87a 	bl	800cc60 <_malloc_r>
 800cb6c:	9a01      	ldr	r2, [sp, #4]
 800cb6e:	4605      	mov	r5, r0
 800cb70:	b930      	cbnz	r0, 800cb80 <_calloc_r+0x24>
 800cb72:	4628      	mov	r0, r5
 800cb74:	b003      	add	sp, #12
 800cb76:	bd30      	pop	{r4, r5, pc}
 800cb78:	220c      	movs	r2, #12
 800cb7a:	6002      	str	r2, [r0, #0]
 800cb7c:	2500      	movs	r5, #0
 800cb7e:	e7f8      	b.n	800cb72 <_calloc_r+0x16>
 800cb80:	4621      	mov	r1, r4
 800cb82:	f7ff ffe3 	bl	800cb4c <memset>
 800cb86:	e7f4      	b.n	800cb72 <_calloc_r+0x16>

0800cb88 <_free_r>:
 800cb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cb8a:	2900      	cmp	r1, #0
 800cb8c:	d044      	beq.n	800cc18 <_free_r+0x90>
 800cb8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb92:	9001      	str	r0, [sp, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	f1a1 0404 	sub.w	r4, r1, #4
 800cb9a:	bfb8      	it	lt
 800cb9c:	18e4      	addlt	r4, r4, r3
 800cb9e:	f000 f975 	bl	800ce8c <__malloc_lock>
 800cba2:	4a1e      	ldr	r2, [pc, #120]	; (800cc1c <_free_r+0x94>)
 800cba4:	9801      	ldr	r0, [sp, #4]
 800cba6:	6813      	ldr	r3, [r2, #0]
 800cba8:	b933      	cbnz	r3, 800cbb8 <_free_r+0x30>
 800cbaa:	6063      	str	r3, [r4, #4]
 800cbac:	6014      	str	r4, [r2, #0]
 800cbae:	b003      	add	sp, #12
 800cbb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbb4:	f000 b970 	b.w	800ce98 <__malloc_unlock>
 800cbb8:	42a3      	cmp	r3, r4
 800cbba:	d908      	bls.n	800cbce <_free_r+0x46>
 800cbbc:	6825      	ldr	r5, [r4, #0]
 800cbbe:	1961      	adds	r1, r4, r5
 800cbc0:	428b      	cmp	r3, r1
 800cbc2:	bf01      	itttt	eq
 800cbc4:	6819      	ldreq	r1, [r3, #0]
 800cbc6:	685b      	ldreq	r3, [r3, #4]
 800cbc8:	1949      	addeq	r1, r1, r5
 800cbca:	6021      	streq	r1, [r4, #0]
 800cbcc:	e7ed      	b.n	800cbaa <_free_r+0x22>
 800cbce:	461a      	mov	r2, r3
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	b10b      	cbz	r3, 800cbd8 <_free_r+0x50>
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	d9fa      	bls.n	800cbce <_free_r+0x46>
 800cbd8:	6811      	ldr	r1, [r2, #0]
 800cbda:	1855      	adds	r5, r2, r1
 800cbdc:	42a5      	cmp	r5, r4
 800cbde:	d10b      	bne.n	800cbf8 <_free_r+0x70>
 800cbe0:	6824      	ldr	r4, [r4, #0]
 800cbe2:	4421      	add	r1, r4
 800cbe4:	1854      	adds	r4, r2, r1
 800cbe6:	42a3      	cmp	r3, r4
 800cbe8:	6011      	str	r1, [r2, #0]
 800cbea:	d1e0      	bne.n	800cbae <_free_r+0x26>
 800cbec:	681c      	ldr	r4, [r3, #0]
 800cbee:	685b      	ldr	r3, [r3, #4]
 800cbf0:	6053      	str	r3, [r2, #4]
 800cbf2:	4421      	add	r1, r4
 800cbf4:	6011      	str	r1, [r2, #0]
 800cbf6:	e7da      	b.n	800cbae <_free_r+0x26>
 800cbf8:	d902      	bls.n	800cc00 <_free_r+0x78>
 800cbfa:	230c      	movs	r3, #12
 800cbfc:	6003      	str	r3, [r0, #0]
 800cbfe:	e7d6      	b.n	800cbae <_free_r+0x26>
 800cc00:	6825      	ldr	r5, [r4, #0]
 800cc02:	1961      	adds	r1, r4, r5
 800cc04:	428b      	cmp	r3, r1
 800cc06:	bf04      	itt	eq
 800cc08:	6819      	ldreq	r1, [r3, #0]
 800cc0a:	685b      	ldreq	r3, [r3, #4]
 800cc0c:	6063      	str	r3, [r4, #4]
 800cc0e:	bf04      	itt	eq
 800cc10:	1949      	addeq	r1, r1, r5
 800cc12:	6021      	streq	r1, [r4, #0]
 800cc14:	6054      	str	r4, [r2, #4]
 800cc16:	e7ca      	b.n	800cbae <_free_r+0x26>
 800cc18:	b003      	add	sp, #12
 800cc1a:	bd30      	pop	{r4, r5, pc}
 800cc1c:	20004f2c 	.word	0x20004f2c

0800cc20 <sbrk_aligned>:
 800cc20:	b570      	push	{r4, r5, r6, lr}
 800cc22:	4e0e      	ldr	r6, [pc, #56]	; (800cc5c <sbrk_aligned+0x3c>)
 800cc24:	460c      	mov	r4, r1
 800cc26:	6831      	ldr	r1, [r6, #0]
 800cc28:	4605      	mov	r5, r0
 800cc2a:	b911      	cbnz	r1, 800cc32 <sbrk_aligned+0x12>
 800cc2c:	f000 f8fe 	bl	800ce2c <_sbrk_r>
 800cc30:	6030      	str	r0, [r6, #0]
 800cc32:	4621      	mov	r1, r4
 800cc34:	4628      	mov	r0, r5
 800cc36:	f000 f8f9 	bl	800ce2c <_sbrk_r>
 800cc3a:	1c43      	adds	r3, r0, #1
 800cc3c:	d00a      	beq.n	800cc54 <sbrk_aligned+0x34>
 800cc3e:	1cc4      	adds	r4, r0, #3
 800cc40:	f024 0403 	bic.w	r4, r4, #3
 800cc44:	42a0      	cmp	r0, r4
 800cc46:	d007      	beq.n	800cc58 <sbrk_aligned+0x38>
 800cc48:	1a21      	subs	r1, r4, r0
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f000 f8ee 	bl	800ce2c <_sbrk_r>
 800cc50:	3001      	adds	r0, #1
 800cc52:	d101      	bne.n	800cc58 <sbrk_aligned+0x38>
 800cc54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800cc58:	4620      	mov	r0, r4
 800cc5a:	bd70      	pop	{r4, r5, r6, pc}
 800cc5c:	20004f30 	.word	0x20004f30

0800cc60 <_malloc_r>:
 800cc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc64:	1ccd      	adds	r5, r1, #3
 800cc66:	f025 0503 	bic.w	r5, r5, #3
 800cc6a:	3508      	adds	r5, #8
 800cc6c:	2d0c      	cmp	r5, #12
 800cc6e:	bf38      	it	cc
 800cc70:	250c      	movcc	r5, #12
 800cc72:	2d00      	cmp	r5, #0
 800cc74:	4607      	mov	r7, r0
 800cc76:	db01      	blt.n	800cc7c <_malloc_r+0x1c>
 800cc78:	42a9      	cmp	r1, r5
 800cc7a:	d905      	bls.n	800cc88 <_malloc_r+0x28>
 800cc7c:	230c      	movs	r3, #12
 800cc7e:	603b      	str	r3, [r7, #0]
 800cc80:	2600      	movs	r6, #0
 800cc82:	4630      	mov	r0, r6
 800cc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc88:	4e2e      	ldr	r6, [pc, #184]	; (800cd44 <_malloc_r+0xe4>)
 800cc8a:	f000 f8ff 	bl	800ce8c <__malloc_lock>
 800cc8e:	6833      	ldr	r3, [r6, #0]
 800cc90:	461c      	mov	r4, r3
 800cc92:	bb34      	cbnz	r4, 800cce2 <_malloc_r+0x82>
 800cc94:	4629      	mov	r1, r5
 800cc96:	4638      	mov	r0, r7
 800cc98:	f7ff ffc2 	bl	800cc20 <sbrk_aligned>
 800cc9c:	1c43      	adds	r3, r0, #1
 800cc9e:	4604      	mov	r4, r0
 800cca0:	d14d      	bne.n	800cd3e <_malloc_r+0xde>
 800cca2:	6834      	ldr	r4, [r6, #0]
 800cca4:	4626      	mov	r6, r4
 800cca6:	2e00      	cmp	r6, #0
 800cca8:	d140      	bne.n	800cd2c <_malloc_r+0xcc>
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	4631      	mov	r1, r6
 800ccae:	4638      	mov	r0, r7
 800ccb0:	eb04 0803 	add.w	r8, r4, r3
 800ccb4:	f000 f8ba 	bl	800ce2c <_sbrk_r>
 800ccb8:	4580      	cmp	r8, r0
 800ccba:	d13a      	bne.n	800cd32 <_malloc_r+0xd2>
 800ccbc:	6821      	ldr	r1, [r4, #0]
 800ccbe:	3503      	adds	r5, #3
 800ccc0:	1a6d      	subs	r5, r5, r1
 800ccc2:	f025 0503 	bic.w	r5, r5, #3
 800ccc6:	3508      	adds	r5, #8
 800ccc8:	2d0c      	cmp	r5, #12
 800ccca:	bf38      	it	cc
 800cccc:	250c      	movcc	r5, #12
 800ccce:	4629      	mov	r1, r5
 800ccd0:	4638      	mov	r0, r7
 800ccd2:	f7ff ffa5 	bl	800cc20 <sbrk_aligned>
 800ccd6:	3001      	adds	r0, #1
 800ccd8:	d02b      	beq.n	800cd32 <_malloc_r+0xd2>
 800ccda:	6823      	ldr	r3, [r4, #0]
 800ccdc:	442b      	add	r3, r5
 800ccde:	6023      	str	r3, [r4, #0]
 800cce0:	e00e      	b.n	800cd00 <_malloc_r+0xa0>
 800cce2:	6822      	ldr	r2, [r4, #0]
 800cce4:	1b52      	subs	r2, r2, r5
 800cce6:	d41e      	bmi.n	800cd26 <_malloc_r+0xc6>
 800cce8:	2a0b      	cmp	r2, #11
 800ccea:	d916      	bls.n	800cd1a <_malloc_r+0xba>
 800ccec:	1961      	adds	r1, r4, r5
 800ccee:	42a3      	cmp	r3, r4
 800ccf0:	6025      	str	r5, [r4, #0]
 800ccf2:	bf18      	it	ne
 800ccf4:	6059      	strne	r1, [r3, #4]
 800ccf6:	6863      	ldr	r3, [r4, #4]
 800ccf8:	bf08      	it	eq
 800ccfa:	6031      	streq	r1, [r6, #0]
 800ccfc:	5162      	str	r2, [r4, r5]
 800ccfe:	604b      	str	r3, [r1, #4]
 800cd00:	4638      	mov	r0, r7
 800cd02:	f104 060b 	add.w	r6, r4, #11
 800cd06:	f000 f8c7 	bl	800ce98 <__malloc_unlock>
 800cd0a:	f026 0607 	bic.w	r6, r6, #7
 800cd0e:	1d23      	adds	r3, r4, #4
 800cd10:	1af2      	subs	r2, r6, r3
 800cd12:	d0b6      	beq.n	800cc82 <_malloc_r+0x22>
 800cd14:	1b9b      	subs	r3, r3, r6
 800cd16:	50a3      	str	r3, [r4, r2]
 800cd18:	e7b3      	b.n	800cc82 <_malloc_r+0x22>
 800cd1a:	6862      	ldr	r2, [r4, #4]
 800cd1c:	42a3      	cmp	r3, r4
 800cd1e:	bf0c      	ite	eq
 800cd20:	6032      	streq	r2, [r6, #0]
 800cd22:	605a      	strne	r2, [r3, #4]
 800cd24:	e7ec      	b.n	800cd00 <_malloc_r+0xa0>
 800cd26:	4623      	mov	r3, r4
 800cd28:	6864      	ldr	r4, [r4, #4]
 800cd2a:	e7b2      	b.n	800cc92 <_malloc_r+0x32>
 800cd2c:	4634      	mov	r4, r6
 800cd2e:	6876      	ldr	r6, [r6, #4]
 800cd30:	e7b9      	b.n	800cca6 <_malloc_r+0x46>
 800cd32:	230c      	movs	r3, #12
 800cd34:	603b      	str	r3, [r7, #0]
 800cd36:	4638      	mov	r0, r7
 800cd38:	f000 f8ae 	bl	800ce98 <__malloc_unlock>
 800cd3c:	e7a1      	b.n	800cc82 <_malloc_r+0x22>
 800cd3e:	6025      	str	r5, [r4, #0]
 800cd40:	e7de      	b.n	800cd00 <_malloc_r+0xa0>
 800cd42:	bf00      	nop
 800cd44:	20004f2c 	.word	0x20004f2c

0800cd48 <realloc>:
 800cd48:	4b02      	ldr	r3, [pc, #8]	; (800cd54 <realloc+0xc>)
 800cd4a:	460a      	mov	r2, r1
 800cd4c:	4601      	mov	r1, r0
 800cd4e:	6818      	ldr	r0, [r3, #0]
 800cd50:	f000 b8a8 	b.w	800cea4 <_realloc_r>
 800cd54:	2000002c 	.word	0x2000002c

0800cd58 <cleanup_glue>:
 800cd58:	b538      	push	{r3, r4, r5, lr}
 800cd5a:	460c      	mov	r4, r1
 800cd5c:	6809      	ldr	r1, [r1, #0]
 800cd5e:	4605      	mov	r5, r0
 800cd60:	b109      	cbz	r1, 800cd66 <cleanup_glue+0xe>
 800cd62:	f7ff fff9 	bl	800cd58 <cleanup_glue>
 800cd66:	4621      	mov	r1, r4
 800cd68:	4628      	mov	r0, r5
 800cd6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd6e:	f7ff bf0b 	b.w	800cb88 <_free_r>
	...

0800cd74 <_reclaim_reent>:
 800cd74:	4b2c      	ldr	r3, [pc, #176]	; (800ce28 <_reclaim_reent+0xb4>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	4283      	cmp	r3, r0
 800cd7a:	b570      	push	{r4, r5, r6, lr}
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	d051      	beq.n	800ce24 <_reclaim_reent+0xb0>
 800cd80:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cd82:	b143      	cbz	r3, 800cd96 <_reclaim_reent+0x22>
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d14a      	bne.n	800ce20 <_reclaim_reent+0xac>
 800cd8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd8c:	6819      	ldr	r1, [r3, #0]
 800cd8e:	b111      	cbz	r1, 800cd96 <_reclaim_reent+0x22>
 800cd90:	4620      	mov	r0, r4
 800cd92:	f7ff fef9 	bl	800cb88 <_free_r>
 800cd96:	6961      	ldr	r1, [r4, #20]
 800cd98:	b111      	cbz	r1, 800cda0 <_reclaim_reent+0x2c>
 800cd9a:	4620      	mov	r0, r4
 800cd9c:	f7ff fef4 	bl	800cb88 <_free_r>
 800cda0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cda2:	b111      	cbz	r1, 800cdaa <_reclaim_reent+0x36>
 800cda4:	4620      	mov	r0, r4
 800cda6:	f7ff feef 	bl	800cb88 <_free_r>
 800cdaa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cdac:	b111      	cbz	r1, 800cdb4 <_reclaim_reent+0x40>
 800cdae:	4620      	mov	r0, r4
 800cdb0:	f7ff feea 	bl	800cb88 <_free_r>
 800cdb4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cdb6:	b111      	cbz	r1, 800cdbe <_reclaim_reent+0x4a>
 800cdb8:	4620      	mov	r0, r4
 800cdba:	f7ff fee5 	bl	800cb88 <_free_r>
 800cdbe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cdc0:	b111      	cbz	r1, 800cdc8 <_reclaim_reent+0x54>
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	f7ff fee0 	bl	800cb88 <_free_r>
 800cdc8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cdca:	b111      	cbz	r1, 800cdd2 <_reclaim_reent+0x5e>
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7ff fedb 	bl	800cb88 <_free_r>
 800cdd2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cdd4:	b111      	cbz	r1, 800cddc <_reclaim_reent+0x68>
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7ff fed6 	bl	800cb88 <_free_r>
 800cddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cdde:	b111      	cbz	r1, 800cde6 <_reclaim_reent+0x72>
 800cde0:	4620      	mov	r0, r4
 800cde2:	f7ff fed1 	bl	800cb88 <_free_r>
 800cde6:	69a3      	ldr	r3, [r4, #24]
 800cde8:	b1e3      	cbz	r3, 800ce24 <_reclaim_reent+0xb0>
 800cdea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cdec:	4620      	mov	r0, r4
 800cdee:	4798      	blx	r3
 800cdf0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cdf2:	b1b9      	cbz	r1, 800ce24 <_reclaim_reent+0xb0>
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdfa:	f7ff bfad 	b.w	800cd58 <cleanup_glue>
 800cdfe:	5949      	ldr	r1, [r1, r5]
 800ce00:	b941      	cbnz	r1, 800ce14 <_reclaim_reent+0xa0>
 800ce02:	3504      	adds	r5, #4
 800ce04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce06:	2d80      	cmp	r5, #128	; 0x80
 800ce08:	68d9      	ldr	r1, [r3, #12]
 800ce0a:	d1f8      	bne.n	800cdfe <_reclaim_reent+0x8a>
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	f7ff febb 	bl	800cb88 <_free_r>
 800ce12:	e7ba      	b.n	800cd8a <_reclaim_reent+0x16>
 800ce14:	680e      	ldr	r6, [r1, #0]
 800ce16:	4620      	mov	r0, r4
 800ce18:	f7ff feb6 	bl	800cb88 <_free_r>
 800ce1c:	4631      	mov	r1, r6
 800ce1e:	e7ef      	b.n	800ce00 <_reclaim_reent+0x8c>
 800ce20:	2500      	movs	r5, #0
 800ce22:	e7ef      	b.n	800ce04 <_reclaim_reent+0x90>
 800ce24:	bd70      	pop	{r4, r5, r6, pc}
 800ce26:	bf00      	nop
 800ce28:	2000002c 	.word	0x2000002c

0800ce2c <_sbrk_r>:
 800ce2c:	b538      	push	{r3, r4, r5, lr}
 800ce2e:	4d06      	ldr	r5, [pc, #24]	; (800ce48 <_sbrk_r+0x1c>)
 800ce30:	2300      	movs	r3, #0
 800ce32:	4604      	mov	r4, r0
 800ce34:	4608      	mov	r0, r1
 800ce36:	602b      	str	r3, [r5, #0]
 800ce38:	f7f4 f8d2 	bl	8000fe0 <_sbrk>
 800ce3c:	1c43      	adds	r3, r0, #1
 800ce3e:	d102      	bne.n	800ce46 <_sbrk_r+0x1a>
 800ce40:	682b      	ldr	r3, [r5, #0]
 800ce42:	b103      	cbz	r3, 800ce46 <_sbrk_r+0x1a>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	bd38      	pop	{r3, r4, r5, pc}
 800ce48:	20004f34 	.word	0x20004f34

0800ce4c <siprintf>:
 800ce4c:	b40e      	push	{r1, r2, r3}
 800ce4e:	b500      	push	{lr}
 800ce50:	b09c      	sub	sp, #112	; 0x70
 800ce52:	ab1d      	add	r3, sp, #116	; 0x74
 800ce54:	9002      	str	r0, [sp, #8]
 800ce56:	9006      	str	r0, [sp, #24]
 800ce58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ce5c:	4809      	ldr	r0, [pc, #36]	; (800ce84 <siprintf+0x38>)
 800ce5e:	9107      	str	r1, [sp, #28]
 800ce60:	9104      	str	r1, [sp, #16]
 800ce62:	4909      	ldr	r1, [pc, #36]	; (800ce88 <siprintf+0x3c>)
 800ce64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce68:	9105      	str	r1, [sp, #20]
 800ce6a:	6800      	ldr	r0, [r0, #0]
 800ce6c:	9301      	str	r3, [sp, #4]
 800ce6e:	a902      	add	r1, sp, #8
 800ce70:	f000 f8a2 	bl	800cfb8 <_svfiprintf_r>
 800ce74:	9b02      	ldr	r3, [sp, #8]
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
 800ce7a:	b01c      	add	sp, #112	; 0x70
 800ce7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce80:	b003      	add	sp, #12
 800ce82:	4770      	bx	lr
 800ce84:	2000002c 	.word	0x2000002c
 800ce88:	ffff0208 	.word	0xffff0208

0800ce8c <__malloc_lock>:
 800ce8c:	4801      	ldr	r0, [pc, #4]	; (800ce94 <__malloc_lock+0x8>)
 800ce8e:	f7ff be35 	b.w	800cafc <__retarget_lock_acquire_recursive>
 800ce92:	bf00      	nop
 800ce94:	20004f28 	.word	0x20004f28

0800ce98 <__malloc_unlock>:
 800ce98:	4801      	ldr	r0, [pc, #4]	; (800cea0 <__malloc_unlock+0x8>)
 800ce9a:	f7ff be30 	b.w	800cafe <__retarget_lock_release_recursive>
 800ce9e:	bf00      	nop
 800cea0:	20004f28 	.word	0x20004f28

0800cea4 <_realloc_r>:
 800cea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea8:	4680      	mov	r8, r0
 800ceaa:	4614      	mov	r4, r2
 800ceac:	460e      	mov	r6, r1
 800ceae:	b921      	cbnz	r1, 800ceba <_realloc_r+0x16>
 800ceb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb4:	4611      	mov	r1, r2
 800ceb6:	f7ff bed3 	b.w	800cc60 <_malloc_r>
 800ceba:	b92a      	cbnz	r2, 800cec8 <_realloc_r+0x24>
 800cebc:	f7ff fe64 	bl	800cb88 <_free_r>
 800cec0:	4625      	mov	r5, r4
 800cec2:	4628      	mov	r0, r5
 800cec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec8:	f000 fb24 	bl	800d514 <_malloc_usable_size_r>
 800cecc:	4284      	cmp	r4, r0
 800cece:	4607      	mov	r7, r0
 800ced0:	d802      	bhi.n	800ced8 <_realloc_r+0x34>
 800ced2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ced6:	d812      	bhi.n	800cefe <_realloc_r+0x5a>
 800ced8:	4621      	mov	r1, r4
 800ceda:	4640      	mov	r0, r8
 800cedc:	f7ff fec0 	bl	800cc60 <_malloc_r>
 800cee0:	4605      	mov	r5, r0
 800cee2:	2800      	cmp	r0, #0
 800cee4:	d0ed      	beq.n	800cec2 <_realloc_r+0x1e>
 800cee6:	42bc      	cmp	r4, r7
 800cee8:	4622      	mov	r2, r4
 800ceea:	4631      	mov	r1, r6
 800ceec:	bf28      	it	cs
 800ceee:	463a      	movcs	r2, r7
 800cef0:	f7ff fe1e 	bl	800cb30 <memcpy>
 800cef4:	4631      	mov	r1, r6
 800cef6:	4640      	mov	r0, r8
 800cef8:	f7ff fe46 	bl	800cb88 <_free_r>
 800cefc:	e7e1      	b.n	800cec2 <_realloc_r+0x1e>
 800cefe:	4635      	mov	r5, r6
 800cf00:	e7df      	b.n	800cec2 <_realloc_r+0x1e>

0800cf02 <__ssputs_r>:
 800cf02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf06:	688e      	ldr	r6, [r1, #8]
 800cf08:	429e      	cmp	r6, r3
 800cf0a:	4682      	mov	sl, r0
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	4690      	mov	r8, r2
 800cf10:	461f      	mov	r7, r3
 800cf12:	d838      	bhi.n	800cf86 <__ssputs_r+0x84>
 800cf14:	898a      	ldrh	r2, [r1, #12]
 800cf16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf1a:	d032      	beq.n	800cf82 <__ssputs_r+0x80>
 800cf1c:	6825      	ldr	r5, [r4, #0]
 800cf1e:	6909      	ldr	r1, [r1, #16]
 800cf20:	eba5 0901 	sub.w	r9, r5, r1
 800cf24:	6965      	ldr	r5, [r4, #20]
 800cf26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf2a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf2e:	3301      	adds	r3, #1
 800cf30:	444b      	add	r3, r9
 800cf32:	106d      	asrs	r5, r5, #1
 800cf34:	429d      	cmp	r5, r3
 800cf36:	bf38      	it	cc
 800cf38:	461d      	movcc	r5, r3
 800cf3a:	0553      	lsls	r3, r2, #21
 800cf3c:	d531      	bpl.n	800cfa2 <__ssputs_r+0xa0>
 800cf3e:	4629      	mov	r1, r5
 800cf40:	f7ff fe8e 	bl	800cc60 <_malloc_r>
 800cf44:	4606      	mov	r6, r0
 800cf46:	b950      	cbnz	r0, 800cf5e <__ssputs_r+0x5c>
 800cf48:	230c      	movs	r3, #12
 800cf4a:	f8ca 3000 	str.w	r3, [sl]
 800cf4e:	89a3      	ldrh	r3, [r4, #12]
 800cf50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf54:	81a3      	strh	r3, [r4, #12]
 800cf56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5e:	6921      	ldr	r1, [r4, #16]
 800cf60:	464a      	mov	r2, r9
 800cf62:	f7ff fde5 	bl	800cb30 <memcpy>
 800cf66:	89a3      	ldrh	r3, [r4, #12]
 800cf68:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf70:	81a3      	strh	r3, [r4, #12]
 800cf72:	6126      	str	r6, [r4, #16]
 800cf74:	6165      	str	r5, [r4, #20]
 800cf76:	444e      	add	r6, r9
 800cf78:	eba5 0509 	sub.w	r5, r5, r9
 800cf7c:	6026      	str	r6, [r4, #0]
 800cf7e:	60a5      	str	r5, [r4, #8]
 800cf80:	463e      	mov	r6, r7
 800cf82:	42be      	cmp	r6, r7
 800cf84:	d900      	bls.n	800cf88 <__ssputs_r+0x86>
 800cf86:	463e      	mov	r6, r7
 800cf88:	6820      	ldr	r0, [r4, #0]
 800cf8a:	4632      	mov	r2, r6
 800cf8c:	4641      	mov	r1, r8
 800cf8e:	f000 faa7 	bl	800d4e0 <memmove>
 800cf92:	68a3      	ldr	r3, [r4, #8]
 800cf94:	1b9b      	subs	r3, r3, r6
 800cf96:	60a3      	str	r3, [r4, #8]
 800cf98:	6823      	ldr	r3, [r4, #0]
 800cf9a:	4433      	add	r3, r6
 800cf9c:	6023      	str	r3, [r4, #0]
 800cf9e:	2000      	movs	r0, #0
 800cfa0:	e7db      	b.n	800cf5a <__ssputs_r+0x58>
 800cfa2:	462a      	mov	r2, r5
 800cfa4:	f7ff ff7e 	bl	800cea4 <_realloc_r>
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d1e1      	bne.n	800cf72 <__ssputs_r+0x70>
 800cfae:	6921      	ldr	r1, [r4, #16]
 800cfb0:	4650      	mov	r0, sl
 800cfb2:	f7ff fde9 	bl	800cb88 <_free_r>
 800cfb6:	e7c7      	b.n	800cf48 <__ssputs_r+0x46>

0800cfb8 <_svfiprintf_r>:
 800cfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfbc:	4698      	mov	r8, r3
 800cfbe:	898b      	ldrh	r3, [r1, #12]
 800cfc0:	061b      	lsls	r3, r3, #24
 800cfc2:	b09d      	sub	sp, #116	; 0x74
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	460d      	mov	r5, r1
 800cfc8:	4614      	mov	r4, r2
 800cfca:	d50e      	bpl.n	800cfea <_svfiprintf_r+0x32>
 800cfcc:	690b      	ldr	r3, [r1, #16]
 800cfce:	b963      	cbnz	r3, 800cfea <_svfiprintf_r+0x32>
 800cfd0:	2140      	movs	r1, #64	; 0x40
 800cfd2:	f7ff fe45 	bl	800cc60 <_malloc_r>
 800cfd6:	6028      	str	r0, [r5, #0]
 800cfd8:	6128      	str	r0, [r5, #16]
 800cfda:	b920      	cbnz	r0, 800cfe6 <_svfiprintf_r+0x2e>
 800cfdc:	230c      	movs	r3, #12
 800cfde:	603b      	str	r3, [r7, #0]
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cfe4:	e0d1      	b.n	800d18a <_svfiprintf_r+0x1d2>
 800cfe6:	2340      	movs	r3, #64	; 0x40
 800cfe8:	616b      	str	r3, [r5, #20]
 800cfea:	2300      	movs	r3, #0
 800cfec:	9309      	str	r3, [sp, #36]	; 0x24
 800cfee:	2320      	movs	r3, #32
 800cff0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cff4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cff8:	2330      	movs	r3, #48	; 0x30
 800cffa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d1a4 <_svfiprintf_r+0x1ec>
 800cffe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d002:	f04f 0901 	mov.w	r9, #1
 800d006:	4623      	mov	r3, r4
 800d008:	469a      	mov	sl, r3
 800d00a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d00e:	b10a      	cbz	r2, 800d014 <_svfiprintf_r+0x5c>
 800d010:	2a25      	cmp	r2, #37	; 0x25
 800d012:	d1f9      	bne.n	800d008 <_svfiprintf_r+0x50>
 800d014:	ebba 0b04 	subs.w	fp, sl, r4
 800d018:	d00b      	beq.n	800d032 <_svfiprintf_r+0x7a>
 800d01a:	465b      	mov	r3, fp
 800d01c:	4622      	mov	r2, r4
 800d01e:	4629      	mov	r1, r5
 800d020:	4638      	mov	r0, r7
 800d022:	f7ff ff6e 	bl	800cf02 <__ssputs_r>
 800d026:	3001      	adds	r0, #1
 800d028:	f000 80aa 	beq.w	800d180 <_svfiprintf_r+0x1c8>
 800d02c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d02e:	445a      	add	r2, fp
 800d030:	9209      	str	r2, [sp, #36]	; 0x24
 800d032:	f89a 3000 	ldrb.w	r3, [sl]
 800d036:	2b00      	cmp	r3, #0
 800d038:	f000 80a2 	beq.w	800d180 <_svfiprintf_r+0x1c8>
 800d03c:	2300      	movs	r3, #0
 800d03e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d042:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d046:	f10a 0a01 	add.w	sl, sl, #1
 800d04a:	9304      	str	r3, [sp, #16]
 800d04c:	9307      	str	r3, [sp, #28]
 800d04e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d052:	931a      	str	r3, [sp, #104]	; 0x68
 800d054:	4654      	mov	r4, sl
 800d056:	2205      	movs	r2, #5
 800d058:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d05c:	4851      	ldr	r0, [pc, #324]	; (800d1a4 <_svfiprintf_r+0x1ec>)
 800d05e:	f7f3 f8bf 	bl	80001e0 <memchr>
 800d062:	9a04      	ldr	r2, [sp, #16]
 800d064:	b9d8      	cbnz	r0, 800d09e <_svfiprintf_r+0xe6>
 800d066:	06d0      	lsls	r0, r2, #27
 800d068:	bf44      	itt	mi
 800d06a:	2320      	movmi	r3, #32
 800d06c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d070:	0711      	lsls	r1, r2, #28
 800d072:	bf44      	itt	mi
 800d074:	232b      	movmi	r3, #43	; 0x2b
 800d076:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d07a:	f89a 3000 	ldrb.w	r3, [sl]
 800d07e:	2b2a      	cmp	r3, #42	; 0x2a
 800d080:	d015      	beq.n	800d0ae <_svfiprintf_r+0xf6>
 800d082:	9a07      	ldr	r2, [sp, #28]
 800d084:	4654      	mov	r4, sl
 800d086:	2000      	movs	r0, #0
 800d088:	f04f 0c0a 	mov.w	ip, #10
 800d08c:	4621      	mov	r1, r4
 800d08e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d092:	3b30      	subs	r3, #48	; 0x30
 800d094:	2b09      	cmp	r3, #9
 800d096:	d94e      	bls.n	800d136 <_svfiprintf_r+0x17e>
 800d098:	b1b0      	cbz	r0, 800d0c8 <_svfiprintf_r+0x110>
 800d09a:	9207      	str	r2, [sp, #28]
 800d09c:	e014      	b.n	800d0c8 <_svfiprintf_r+0x110>
 800d09e:	eba0 0308 	sub.w	r3, r0, r8
 800d0a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	9304      	str	r3, [sp, #16]
 800d0aa:	46a2      	mov	sl, r4
 800d0ac:	e7d2      	b.n	800d054 <_svfiprintf_r+0x9c>
 800d0ae:	9b03      	ldr	r3, [sp, #12]
 800d0b0:	1d19      	adds	r1, r3, #4
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	9103      	str	r1, [sp, #12]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	bfbb      	ittet	lt
 800d0ba:	425b      	neglt	r3, r3
 800d0bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d0c0:	9307      	strge	r3, [sp, #28]
 800d0c2:	9307      	strlt	r3, [sp, #28]
 800d0c4:	bfb8      	it	lt
 800d0c6:	9204      	strlt	r2, [sp, #16]
 800d0c8:	7823      	ldrb	r3, [r4, #0]
 800d0ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d0cc:	d10c      	bne.n	800d0e8 <_svfiprintf_r+0x130>
 800d0ce:	7863      	ldrb	r3, [r4, #1]
 800d0d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d2:	d135      	bne.n	800d140 <_svfiprintf_r+0x188>
 800d0d4:	9b03      	ldr	r3, [sp, #12]
 800d0d6:	1d1a      	adds	r2, r3, #4
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	9203      	str	r2, [sp, #12]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	bfb8      	it	lt
 800d0e0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d0e4:	3402      	adds	r4, #2
 800d0e6:	9305      	str	r3, [sp, #20]
 800d0e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d1b4 <_svfiprintf_r+0x1fc>
 800d0ec:	7821      	ldrb	r1, [r4, #0]
 800d0ee:	2203      	movs	r2, #3
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	f7f3 f875 	bl	80001e0 <memchr>
 800d0f6:	b140      	cbz	r0, 800d10a <_svfiprintf_r+0x152>
 800d0f8:	2340      	movs	r3, #64	; 0x40
 800d0fa:	eba0 000a 	sub.w	r0, r0, sl
 800d0fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d102:	9b04      	ldr	r3, [sp, #16]
 800d104:	4303      	orrs	r3, r0
 800d106:	3401      	adds	r4, #1
 800d108:	9304      	str	r3, [sp, #16]
 800d10a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d10e:	4826      	ldr	r0, [pc, #152]	; (800d1a8 <_svfiprintf_r+0x1f0>)
 800d110:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d114:	2206      	movs	r2, #6
 800d116:	f7f3 f863 	bl	80001e0 <memchr>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d038      	beq.n	800d190 <_svfiprintf_r+0x1d8>
 800d11e:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <_svfiprintf_r+0x1f4>)
 800d120:	bb1b      	cbnz	r3, 800d16a <_svfiprintf_r+0x1b2>
 800d122:	9b03      	ldr	r3, [sp, #12]
 800d124:	3307      	adds	r3, #7
 800d126:	f023 0307 	bic.w	r3, r3, #7
 800d12a:	3308      	adds	r3, #8
 800d12c:	9303      	str	r3, [sp, #12]
 800d12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d130:	4433      	add	r3, r6
 800d132:	9309      	str	r3, [sp, #36]	; 0x24
 800d134:	e767      	b.n	800d006 <_svfiprintf_r+0x4e>
 800d136:	fb0c 3202 	mla	r2, ip, r2, r3
 800d13a:	460c      	mov	r4, r1
 800d13c:	2001      	movs	r0, #1
 800d13e:	e7a5      	b.n	800d08c <_svfiprintf_r+0xd4>
 800d140:	2300      	movs	r3, #0
 800d142:	3401      	adds	r4, #1
 800d144:	9305      	str	r3, [sp, #20]
 800d146:	4619      	mov	r1, r3
 800d148:	f04f 0c0a 	mov.w	ip, #10
 800d14c:	4620      	mov	r0, r4
 800d14e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d152:	3a30      	subs	r2, #48	; 0x30
 800d154:	2a09      	cmp	r2, #9
 800d156:	d903      	bls.n	800d160 <_svfiprintf_r+0x1a8>
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d0c5      	beq.n	800d0e8 <_svfiprintf_r+0x130>
 800d15c:	9105      	str	r1, [sp, #20]
 800d15e:	e7c3      	b.n	800d0e8 <_svfiprintf_r+0x130>
 800d160:	fb0c 2101 	mla	r1, ip, r1, r2
 800d164:	4604      	mov	r4, r0
 800d166:	2301      	movs	r3, #1
 800d168:	e7f0      	b.n	800d14c <_svfiprintf_r+0x194>
 800d16a:	ab03      	add	r3, sp, #12
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	462a      	mov	r2, r5
 800d170:	4b0f      	ldr	r3, [pc, #60]	; (800d1b0 <_svfiprintf_r+0x1f8>)
 800d172:	a904      	add	r1, sp, #16
 800d174:	4638      	mov	r0, r7
 800d176:	f3af 8000 	nop.w
 800d17a:	1c42      	adds	r2, r0, #1
 800d17c:	4606      	mov	r6, r0
 800d17e:	d1d6      	bne.n	800d12e <_svfiprintf_r+0x176>
 800d180:	89ab      	ldrh	r3, [r5, #12]
 800d182:	065b      	lsls	r3, r3, #25
 800d184:	f53f af2c 	bmi.w	800cfe0 <_svfiprintf_r+0x28>
 800d188:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d18a:	b01d      	add	sp, #116	; 0x74
 800d18c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d190:	ab03      	add	r3, sp, #12
 800d192:	9300      	str	r3, [sp, #0]
 800d194:	462a      	mov	r2, r5
 800d196:	4b06      	ldr	r3, [pc, #24]	; (800d1b0 <_svfiprintf_r+0x1f8>)
 800d198:	a904      	add	r1, sp, #16
 800d19a:	4638      	mov	r0, r7
 800d19c:	f000 f87a 	bl	800d294 <_printf_i>
 800d1a0:	e7eb      	b.n	800d17a <_svfiprintf_r+0x1c2>
 800d1a2:	bf00      	nop
 800d1a4:	0802ca58 	.word	0x0802ca58
 800d1a8:	0802ca62 	.word	0x0802ca62
 800d1ac:	00000000 	.word	0x00000000
 800d1b0:	0800cf03 	.word	0x0800cf03
 800d1b4:	0802ca5e 	.word	0x0802ca5e

0800d1b8 <_printf_common>:
 800d1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1bc:	4616      	mov	r6, r2
 800d1be:	4699      	mov	r9, r3
 800d1c0:	688a      	ldr	r2, [r1, #8]
 800d1c2:	690b      	ldr	r3, [r1, #16]
 800d1c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	bfb8      	it	lt
 800d1cc:	4613      	movlt	r3, r2
 800d1ce:	6033      	str	r3, [r6, #0]
 800d1d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1d4:	4607      	mov	r7, r0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	b10a      	cbz	r2, 800d1de <_printf_common+0x26>
 800d1da:	3301      	adds	r3, #1
 800d1dc:	6033      	str	r3, [r6, #0]
 800d1de:	6823      	ldr	r3, [r4, #0]
 800d1e0:	0699      	lsls	r1, r3, #26
 800d1e2:	bf42      	ittt	mi
 800d1e4:	6833      	ldrmi	r3, [r6, #0]
 800d1e6:	3302      	addmi	r3, #2
 800d1e8:	6033      	strmi	r3, [r6, #0]
 800d1ea:	6825      	ldr	r5, [r4, #0]
 800d1ec:	f015 0506 	ands.w	r5, r5, #6
 800d1f0:	d106      	bne.n	800d200 <_printf_common+0x48>
 800d1f2:	f104 0a19 	add.w	sl, r4, #25
 800d1f6:	68e3      	ldr	r3, [r4, #12]
 800d1f8:	6832      	ldr	r2, [r6, #0]
 800d1fa:	1a9b      	subs	r3, r3, r2
 800d1fc:	42ab      	cmp	r3, r5
 800d1fe:	dc26      	bgt.n	800d24e <_printf_common+0x96>
 800d200:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d204:	1e13      	subs	r3, r2, #0
 800d206:	6822      	ldr	r2, [r4, #0]
 800d208:	bf18      	it	ne
 800d20a:	2301      	movne	r3, #1
 800d20c:	0692      	lsls	r2, r2, #26
 800d20e:	d42b      	bmi.n	800d268 <_printf_common+0xb0>
 800d210:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d214:	4649      	mov	r1, r9
 800d216:	4638      	mov	r0, r7
 800d218:	47c0      	blx	r8
 800d21a:	3001      	adds	r0, #1
 800d21c:	d01e      	beq.n	800d25c <_printf_common+0xa4>
 800d21e:	6823      	ldr	r3, [r4, #0]
 800d220:	68e5      	ldr	r5, [r4, #12]
 800d222:	6832      	ldr	r2, [r6, #0]
 800d224:	f003 0306 	and.w	r3, r3, #6
 800d228:	2b04      	cmp	r3, #4
 800d22a:	bf08      	it	eq
 800d22c:	1aad      	subeq	r5, r5, r2
 800d22e:	68a3      	ldr	r3, [r4, #8]
 800d230:	6922      	ldr	r2, [r4, #16]
 800d232:	bf0c      	ite	eq
 800d234:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d238:	2500      	movne	r5, #0
 800d23a:	4293      	cmp	r3, r2
 800d23c:	bfc4      	itt	gt
 800d23e:	1a9b      	subgt	r3, r3, r2
 800d240:	18ed      	addgt	r5, r5, r3
 800d242:	2600      	movs	r6, #0
 800d244:	341a      	adds	r4, #26
 800d246:	42b5      	cmp	r5, r6
 800d248:	d11a      	bne.n	800d280 <_printf_common+0xc8>
 800d24a:	2000      	movs	r0, #0
 800d24c:	e008      	b.n	800d260 <_printf_common+0xa8>
 800d24e:	2301      	movs	r3, #1
 800d250:	4652      	mov	r2, sl
 800d252:	4649      	mov	r1, r9
 800d254:	4638      	mov	r0, r7
 800d256:	47c0      	blx	r8
 800d258:	3001      	adds	r0, #1
 800d25a:	d103      	bne.n	800d264 <_printf_common+0xac>
 800d25c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d264:	3501      	adds	r5, #1
 800d266:	e7c6      	b.n	800d1f6 <_printf_common+0x3e>
 800d268:	18e1      	adds	r1, r4, r3
 800d26a:	1c5a      	adds	r2, r3, #1
 800d26c:	2030      	movs	r0, #48	; 0x30
 800d26e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d272:	4422      	add	r2, r4
 800d274:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d278:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d27c:	3302      	adds	r3, #2
 800d27e:	e7c7      	b.n	800d210 <_printf_common+0x58>
 800d280:	2301      	movs	r3, #1
 800d282:	4622      	mov	r2, r4
 800d284:	4649      	mov	r1, r9
 800d286:	4638      	mov	r0, r7
 800d288:	47c0      	blx	r8
 800d28a:	3001      	adds	r0, #1
 800d28c:	d0e6      	beq.n	800d25c <_printf_common+0xa4>
 800d28e:	3601      	adds	r6, #1
 800d290:	e7d9      	b.n	800d246 <_printf_common+0x8e>
	...

0800d294 <_printf_i>:
 800d294:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d298:	7e0f      	ldrb	r7, [r1, #24]
 800d29a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d29c:	2f78      	cmp	r7, #120	; 0x78
 800d29e:	4691      	mov	r9, r2
 800d2a0:	4680      	mov	r8, r0
 800d2a2:	460c      	mov	r4, r1
 800d2a4:	469a      	mov	sl, r3
 800d2a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2aa:	d807      	bhi.n	800d2bc <_printf_i+0x28>
 800d2ac:	2f62      	cmp	r7, #98	; 0x62
 800d2ae:	d80a      	bhi.n	800d2c6 <_printf_i+0x32>
 800d2b0:	2f00      	cmp	r7, #0
 800d2b2:	f000 80d8 	beq.w	800d466 <_printf_i+0x1d2>
 800d2b6:	2f58      	cmp	r7, #88	; 0x58
 800d2b8:	f000 80a3 	beq.w	800d402 <_printf_i+0x16e>
 800d2bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2c4:	e03a      	b.n	800d33c <_printf_i+0xa8>
 800d2c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2ca:	2b15      	cmp	r3, #21
 800d2cc:	d8f6      	bhi.n	800d2bc <_printf_i+0x28>
 800d2ce:	a101      	add	r1, pc, #4	; (adr r1, 800d2d4 <_printf_i+0x40>)
 800d2d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2d4:	0800d32d 	.word	0x0800d32d
 800d2d8:	0800d341 	.word	0x0800d341
 800d2dc:	0800d2bd 	.word	0x0800d2bd
 800d2e0:	0800d2bd 	.word	0x0800d2bd
 800d2e4:	0800d2bd 	.word	0x0800d2bd
 800d2e8:	0800d2bd 	.word	0x0800d2bd
 800d2ec:	0800d341 	.word	0x0800d341
 800d2f0:	0800d2bd 	.word	0x0800d2bd
 800d2f4:	0800d2bd 	.word	0x0800d2bd
 800d2f8:	0800d2bd 	.word	0x0800d2bd
 800d2fc:	0800d2bd 	.word	0x0800d2bd
 800d300:	0800d44d 	.word	0x0800d44d
 800d304:	0800d371 	.word	0x0800d371
 800d308:	0800d42f 	.word	0x0800d42f
 800d30c:	0800d2bd 	.word	0x0800d2bd
 800d310:	0800d2bd 	.word	0x0800d2bd
 800d314:	0800d46f 	.word	0x0800d46f
 800d318:	0800d2bd 	.word	0x0800d2bd
 800d31c:	0800d371 	.word	0x0800d371
 800d320:	0800d2bd 	.word	0x0800d2bd
 800d324:	0800d2bd 	.word	0x0800d2bd
 800d328:	0800d437 	.word	0x0800d437
 800d32c:	682b      	ldr	r3, [r5, #0]
 800d32e:	1d1a      	adds	r2, r3, #4
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	602a      	str	r2, [r5, #0]
 800d334:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d338:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d33c:	2301      	movs	r3, #1
 800d33e:	e0a3      	b.n	800d488 <_printf_i+0x1f4>
 800d340:	6820      	ldr	r0, [r4, #0]
 800d342:	6829      	ldr	r1, [r5, #0]
 800d344:	0606      	lsls	r6, r0, #24
 800d346:	f101 0304 	add.w	r3, r1, #4
 800d34a:	d50a      	bpl.n	800d362 <_printf_i+0xce>
 800d34c:	680e      	ldr	r6, [r1, #0]
 800d34e:	602b      	str	r3, [r5, #0]
 800d350:	2e00      	cmp	r6, #0
 800d352:	da03      	bge.n	800d35c <_printf_i+0xc8>
 800d354:	232d      	movs	r3, #45	; 0x2d
 800d356:	4276      	negs	r6, r6
 800d358:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d35c:	485e      	ldr	r0, [pc, #376]	; (800d4d8 <_printf_i+0x244>)
 800d35e:	230a      	movs	r3, #10
 800d360:	e019      	b.n	800d396 <_printf_i+0x102>
 800d362:	680e      	ldr	r6, [r1, #0]
 800d364:	602b      	str	r3, [r5, #0]
 800d366:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d36a:	bf18      	it	ne
 800d36c:	b236      	sxthne	r6, r6
 800d36e:	e7ef      	b.n	800d350 <_printf_i+0xbc>
 800d370:	682b      	ldr	r3, [r5, #0]
 800d372:	6820      	ldr	r0, [r4, #0]
 800d374:	1d19      	adds	r1, r3, #4
 800d376:	6029      	str	r1, [r5, #0]
 800d378:	0601      	lsls	r1, r0, #24
 800d37a:	d501      	bpl.n	800d380 <_printf_i+0xec>
 800d37c:	681e      	ldr	r6, [r3, #0]
 800d37e:	e002      	b.n	800d386 <_printf_i+0xf2>
 800d380:	0646      	lsls	r6, r0, #25
 800d382:	d5fb      	bpl.n	800d37c <_printf_i+0xe8>
 800d384:	881e      	ldrh	r6, [r3, #0]
 800d386:	4854      	ldr	r0, [pc, #336]	; (800d4d8 <_printf_i+0x244>)
 800d388:	2f6f      	cmp	r7, #111	; 0x6f
 800d38a:	bf0c      	ite	eq
 800d38c:	2308      	moveq	r3, #8
 800d38e:	230a      	movne	r3, #10
 800d390:	2100      	movs	r1, #0
 800d392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d396:	6865      	ldr	r5, [r4, #4]
 800d398:	60a5      	str	r5, [r4, #8]
 800d39a:	2d00      	cmp	r5, #0
 800d39c:	bfa2      	ittt	ge
 800d39e:	6821      	ldrge	r1, [r4, #0]
 800d3a0:	f021 0104 	bicge.w	r1, r1, #4
 800d3a4:	6021      	strge	r1, [r4, #0]
 800d3a6:	b90e      	cbnz	r6, 800d3ac <_printf_i+0x118>
 800d3a8:	2d00      	cmp	r5, #0
 800d3aa:	d04d      	beq.n	800d448 <_printf_i+0x1b4>
 800d3ac:	4615      	mov	r5, r2
 800d3ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3b2:	fb03 6711 	mls	r7, r3, r1, r6
 800d3b6:	5dc7      	ldrb	r7, [r0, r7]
 800d3b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3bc:	4637      	mov	r7, r6
 800d3be:	42bb      	cmp	r3, r7
 800d3c0:	460e      	mov	r6, r1
 800d3c2:	d9f4      	bls.n	800d3ae <_printf_i+0x11a>
 800d3c4:	2b08      	cmp	r3, #8
 800d3c6:	d10b      	bne.n	800d3e0 <_printf_i+0x14c>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	07de      	lsls	r6, r3, #31
 800d3cc:	d508      	bpl.n	800d3e0 <_printf_i+0x14c>
 800d3ce:	6923      	ldr	r3, [r4, #16]
 800d3d0:	6861      	ldr	r1, [r4, #4]
 800d3d2:	4299      	cmp	r1, r3
 800d3d4:	bfde      	ittt	le
 800d3d6:	2330      	movle	r3, #48	; 0x30
 800d3d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d3e0:	1b52      	subs	r2, r2, r5
 800d3e2:	6122      	str	r2, [r4, #16]
 800d3e4:	f8cd a000 	str.w	sl, [sp]
 800d3e8:	464b      	mov	r3, r9
 800d3ea:	aa03      	add	r2, sp, #12
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	4640      	mov	r0, r8
 800d3f0:	f7ff fee2 	bl	800d1b8 <_printf_common>
 800d3f4:	3001      	adds	r0, #1
 800d3f6:	d14c      	bne.n	800d492 <_printf_i+0x1fe>
 800d3f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d3fc:	b004      	add	sp, #16
 800d3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d402:	4835      	ldr	r0, [pc, #212]	; (800d4d8 <_printf_i+0x244>)
 800d404:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d408:	6829      	ldr	r1, [r5, #0]
 800d40a:	6823      	ldr	r3, [r4, #0]
 800d40c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d410:	6029      	str	r1, [r5, #0]
 800d412:	061d      	lsls	r5, r3, #24
 800d414:	d514      	bpl.n	800d440 <_printf_i+0x1ac>
 800d416:	07df      	lsls	r7, r3, #31
 800d418:	bf44      	itt	mi
 800d41a:	f043 0320 	orrmi.w	r3, r3, #32
 800d41e:	6023      	strmi	r3, [r4, #0]
 800d420:	b91e      	cbnz	r6, 800d42a <_printf_i+0x196>
 800d422:	6823      	ldr	r3, [r4, #0]
 800d424:	f023 0320 	bic.w	r3, r3, #32
 800d428:	6023      	str	r3, [r4, #0]
 800d42a:	2310      	movs	r3, #16
 800d42c:	e7b0      	b.n	800d390 <_printf_i+0xfc>
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	f043 0320 	orr.w	r3, r3, #32
 800d434:	6023      	str	r3, [r4, #0]
 800d436:	2378      	movs	r3, #120	; 0x78
 800d438:	4828      	ldr	r0, [pc, #160]	; (800d4dc <_printf_i+0x248>)
 800d43a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d43e:	e7e3      	b.n	800d408 <_printf_i+0x174>
 800d440:	0659      	lsls	r1, r3, #25
 800d442:	bf48      	it	mi
 800d444:	b2b6      	uxthmi	r6, r6
 800d446:	e7e6      	b.n	800d416 <_printf_i+0x182>
 800d448:	4615      	mov	r5, r2
 800d44a:	e7bb      	b.n	800d3c4 <_printf_i+0x130>
 800d44c:	682b      	ldr	r3, [r5, #0]
 800d44e:	6826      	ldr	r6, [r4, #0]
 800d450:	6961      	ldr	r1, [r4, #20]
 800d452:	1d18      	adds	r0, r3, #4
 800d454:	6028      	str	r0, [r5, #0]
 800d456:	0635      	lsls	r5, r6, #24
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	d501      	bpl.n	800d460 <_printf_i+0x1cc>
 800d45c:	6019      	str	r1, [r3, #0]
 800d45e:	e002      	b.n	800d466 <_printf_i+0x1d2>
 800d460:	0670      	lsls	r0, r6, #25
 800d462:	d5fb      	bpl.n	800d45c <_printf_i+0x1c8>
 800d464:	8019      	strh	r1, [r3, #0]
 800d466:	2300      	movs	r3, #0
 800d468:	6123      	str	r3, [r4, #16]
 800d46a:	4615      	mov	r5, r2
 800d46c:	e7ba      	b.n	800d3e4 <_printf_i+0x150>
 800d46e:	682b      	ldr	r3, [r5, #0]
 800d470:	1d1a      	adds	r2, r3, #4
 800d472:	602a      	str	r2, [r5, #0]
 800d474:	681d      	ldr	r5, [r3, #0]
 800d476:	6862      	ldr	r2, [r4, #4]
 800d478:	2100      	movs	r1, #0
 800d47a:	4628      	mov	r0, r5
 800d47c:	f7f2 feb0 	bl	80001e0 <memchr>
 800d480:	b108      	cbz	r0, 800d486 <_printf_i+0x1f2>
 800d482:	1b40      	subs	r0, r0, r5
 800d484:	6060      	str	r0, [r4, #4]
 800d486:	6863      	ldr	r3, [r4, #4]
 800d488:	6123      	str	r3, [r4, #16]
 800d48a:	2300      	movs	r3, #0
 800d48c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d490:	e7a8      	b.n	800d3e4 <_printf_i+0x150>
 800d492:	6923      	ldr	r3, [r4, #16]
 800d494:	462a      	mov	r2, r5
 800d496:	4649      	mov	r1, r9
 800d498:	4640      	mov	r0, r8
 800d49a:	47d0      	blx	sl
 800d49c:	3001      	adds	r0, #1
 800d49e:	d0ab      	beq.n	800d3f8 <_printf_i+0x164>
 800d4a0:	6823      	ldr	r3, [r4, #0]
 800d4a2:	079b      	lsls	r3, r3, #30
 800d4a4:	d413      	bmi.n	800d4ce <_printf_i+0x23a>
 800d4a6:	68e0      	ldr	r0, [r4, #12]
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	4298      	cmp	r0, r3
 800d4ac:	bfb8      	it	lt
 800d4ae:	4618      	movlt	r0, r3
 800d4b0:	e7a4      	b.n	800d3fc <_printf_i+0x168>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	4632      	mov	r2, r6
 800d4b6:	4649      	mov	r1, r9
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	47d0      	blx	sl
 800d4bc:	3001      	adds	r0, #1
 800d4be:	d09b      	beq.n	800d3f8 <_printf_i+0x164>
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	68e3      	ldr	r3, [r4, #12]
 800d4c4:	9903      	ldr	r1, [sp, #12]
 800d4c6:	1a5b      	subs	r3, r3, r1
 800d4c8:	42ab      	cmp	r3, r5
 800d4ca:	dcf2      	bgt.n	800d4b2 <_printf_i+0x21e>
 800d4cc:	e7eb      	b.n	800d4a6 <_printf_i+0x212>
 800d4ce:	2500      	movs	r5, #0
 800d4d0:	f104 0619 	add.w	r6, r4, #25
 800d4d4:	e7f5      	b.n	800d4c2 <_printf_i+0x22e>
 800d4d6:	bf00      	nop
 800d4d8:	0802ca69 	.word	0x0802ca69
 800d4dc:	0802ca7a 	.word	0x0802ca7a

0800d4e0 <memmove>:
 800d4e0:	4288      	cmp	r0, r1
 800d4e2:	b510      	push	{r4, lr}
 800d4e4:	eb01 0402 	add.w	r4, r1, r2
 800d4e8:	d902      	bls.n	800d4f0 <memmove+0x10>
 800d4ea:	4284      	cmp	r4, r0
 800d4ec:	4623      	mov	r3, r4
 800d4ee:	d807      	bhi.n	800d500 <memmove+0x20>
 800d4f0:	1e43      	subs	r3, r0, #1
 800d4f2:	42a1      	cmp	r1, r4
 800d4f4:	d008      	beq.n	800d508 <memmove+0x28>
 800d4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d4fe:	e7f8      	b.n	800d4f2 <memmove+0x12>
 800d500:	4402      	add	r2, r0
 800d502:	4601      	mov	r1, r0
 800d504:	428a      	cmp	r2, r1
 800d506:	d100      	bne.n	800d50a <memmove+0x2a>
 800d508:	bd10      	pop	{r4, pc}
 800d50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d512:	e7f7      	b.n	800d504 <memmove+0x24>

0800d514 <_malloc_usable_size_r>:
 800d514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d518:	1f18      	subs	r0, r3, #4
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	bfbc      	itt	lt
 800d51e:	580b      	ldrlt	r3, [r1, r0]
 800d520:	18c0      	addlt	r0, r0, r3
 800d522:	4770      	bx	lr

0800d524 <_init>:
 800d524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d526:	bf00      	nop
 800d528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d52a:	bc08      	pop	{r3}
 800d52c:	469e      	mov	lr, r3
 800d52e:	4770      	bx	lr

0800d530 <_fini>:
 800d530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d532:	bf00      	nop
 800d534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d536:	bc08      	pop	{r3}
 800d538:	469e      	mov	lr, r3
 800d53a:	4770      	bx	lr
