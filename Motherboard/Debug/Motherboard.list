
Motherboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014060  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08014200  08014200  00024200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801454c  0801454c  00030424  2**0
                  CONTENTS
  4 .ARM          00000008  0801454c  0801454c  0002454c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014554  08014554  00030424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014554  08014554  00024554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014558  08014558  00024558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000424  20000000  0801455c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006ce8  20000424  08014980  00030424  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000710c  08014980  0003710c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030424  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032d7e  00000000  00000000  00030454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000632b  00000000  00000000  000631d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000026a0  00000000  00000000  00069500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002410  00000000  00000000  0006bba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00009b3e  00000000  00000000  0006dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00030782  00000000  00000000  00077aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000acce7  00000000  00000000  000a8270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00154f57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a598  00000000  00000000  00154fa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000424 	.word	0x20000424
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080141e8 	.word	0x080141e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000428 	.word	0x20000428
 80001dc:	080141e8 	.word	0x080141e8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 f8ea 	bl	80016c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f8d6 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fc1e 	bl	8000d30 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 fbd6 	bl	8000ca4 <MX_DMA_Init>
  MX_IWDG_Init();
 80004f8:	f000 f998 	bl	800082c <MX_IWDG_Init>
  MX_RTC_Init();
 80004fc:	f000 f9b0 	bl	8000860 <MX_RTC_Init>
  MX_I2C1_Init();
 8000500:	f000 f938 	bl	8000774 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000504:	f000 f964 	bl	80007d0 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000508:	f000 fba0 	bl	8000c4c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 800050c:	f000 fa6a 	bl	80009e4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000510:	f000 fade 	bl	8000ad0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000514:	f000 f9ca 	bl	80008ac <MX_TIM1_Init>
  MX_TIM2_Init();
 8000518:	f000 fa18 	bl	800094c <MX_TIM2_Init>
  MX_TIM5_Init();
 800051c:	f000 fb48 	bl	8000bb0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f00f fbf4 	bl	800fd0c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphore_PID */
  xSemaphore_PIDHandle = osSemaphoreNew(1, 1, &xSemaphore_PID_attributes);
 8000524:	4a39      	ldr	r2, [pc, #228]	; (800060c <main+0x128>)
 8000526:	2101      	movs	r1, #1
 8000528:	2001      	movs	r0, #1
 800052a:	f00f fd28 	bl	800ff7e <osSemaphoreNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a37      	ldr	r2, [pc, #220]	; (8000610 <main+0x12c>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of xSemaphore_PID_Init */
  xSemaphore_PID_InitHandle = osSemaphoreNew(1, 1, &xSemaphore_PID_Init_attributes);
 8000534:	4a37      	ldr	r2, [pc, #220]	; (8000614 <main+0x130>)
 8000536:	2101      	movs	r1, #1
 8000538:	2001      	movs	r0, #1
 800053a:	f00f fd20 	bl	800ff7e <osSemaphoreNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a35      	ldr	r2, [pc, #212]	; (8000618 <main+0x134>)
 8000542:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xFIFO_COM */
  xFIFO_COMHandle = osMessageQueueNew (16, sizeof(PDU_t), &xFIFO_COM_attributes);
 8000544:	4a35      	ldr	r2, [pc, #212]	; (800061c <main+0x138>)
 8000546:	2108      	movs	r1, #8
 8000548:	2010      	movs	r0, #16
 800054a:	f00f fde5 	bl	8010118 <osMessageQueueNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a33      	ldr	r2, [pc, #204]	; (8000620 <main+0x13c>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_Distance */
  xFIFO_DistanceHandle = osMessageQueueNew (4, sizeof(uint16_t), &xFIFO_Distance_attributes);
 8000554:	4a33      	ldr	r2, [pc, #204]	; (8000624 <main+0x140>)
 8000556:	2102      	movs	r1, #2
 8000558:	2004      	movs	r0, #4
 800055a:	f00f fddd 	bl	8010118 <osMessageQueueNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a31      	ldr	r2, [pc, #196]	; (8000628 <main+0x144>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_ControlAction */
  xFIFO_ControlActionHandle = osMessageQueueNew (16, sizeof(float), &xFIFO_ControlAction_attributes);
 8000564:	4a31      	ldr	r2, [pc, #196]	; (800062c <main+0x148>)
 8000566:	2104      	movs	r1, #4
 8000568:	2010      	movs	r0, #16
 800056a:	f00f fdd5 	bl	8010118 <osMessageQueueNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a2f      	ldr	r2, [pc, #188]	; (8000630 <main+0x14c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of xFIFO_PIDConfigs */
  xFIFO_PIDConfigsHandle = osMessageQueueNew (16, sizeof(PIDConfigs), &xFIFO_PIDConfigs_attributes);
 8000574:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <main+0x150>)
 8000576:	211c      	movs	r1, #28
 8000578:	2010      	movs	r0, #16
 800057a:	f00f fdcd 	bl	8010118 <osMessageQueueNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a2d      	ldr	r2, [pc, #180]	; (8000638 <main+0x154>)
 8000582:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TaskIdle */
  TaskIdleHandle = osThreadNew(vTaskIdle, NULL, &TaskIdle_attributes);
 8000584:	4a2d      	ldr	r2, [pc, #180]	; (800063c <main+0x158>)
 8000586:	2100      	movs	r1, #0
 8000588:	482d      	ldr	r0, [pc, #180]	; (8000640 <main+0x15c>)
 800058a:	f00f fc1e 	bl	800fdca <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a2c      	ldr	r2, [pc, #176]	; (8000644 <main+0x160>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of TaskModeManager */
  TaskModeManagerHandle = osThreadNew(vTaskModeManager, NULL, &TaskModeManager_attributes);
 8000594:	4a2c      	ldr	r2, [pc, #176]	; (8000648 <main+0x164>)
 8000596:	2100      	movs	r1, #0
 8000598:	482c      	ldr	r0, [pc, #176]	; (800064c <main+0x168>)
 800059a:	f00f fc16 	bl	800fdca <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a2b      	ldr	r2, [pc, #172]	; (8000650 <main+0x16c>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* creation of TaskPID */
  TaskPIDHandle = osThreadNew(vTaskPID, NULL, &TaskPID_attributes);
 80005a4:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <main+0x170>)
 80005a6:	2100      	movs	r1, #0
 80005a8:	482b      	ldr	r0, [pc, #172]	; (8000658 <main+0x174>)
 80005aa:	f00f fc0e 	bl	800fdca <osThreadNew>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a2a      	ldr	r2, [pc, #168]	; (800065c <main+0x178>)
 80005b2:	6013      	str	r3, [r2, #0]

  /* creation of TaskCOM */
  TaskCOMHandle = osThreadNew(vTaskCOM, NULL, &TaskCOM_attributes);
 80005b4:	4a2a      	ldr	r2, [pc, #168]	; (8000660 <main+0x17c>)
 80005b6:	2100      	movs	r1, #0
 80005b8:	482a      	ldr	r0, [pc, #168]	; (8000664 <main+0x180>)
 80005ba:	f00f fc06 	bl	800fdca <osThreadNew>
 80005be:	4603      	mov	r3, r0
 80005c0:	4a29      	ldr	r2, [pc, #164]	; (8000668 <main+0x184>)
 80005c2:	6013      	str	r3, [r2, #0]

  /* creation of TaskSensorActua */
  TaskSensorActuaHandle = osThreadNew(vTaskSensorActuator, NULL, &TaskSensorActua_attributes);
 80005c4:	4a29      	ldr	r2, [pc, #164]	; (800066c <main+0x188>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4829      	ldr	r0, [pc, #164]	; (8000670 <main+0x18c>)
 80005ca:	f00f fbfe 	bl	800fdca <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a28      	ldr	r2, [pc, #160]	; (8000674 <main+0x190>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of TaskWdgM */
  TaskWdgMHandle = osThreadNew(vTaskWdgM, NULL, &TaskWdgM_attributes);
 80005d4:	4a28      	ldr	r2, [pc, #160]	; (8000678 <main+0x194>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4828      	ldr	r0, [pc, #160]	; (800067c <main+0x198>)
 80005da:	f00f fbf6 	bl	800fdca <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a27      	ldr	r2, [pc, #156]	; (8000680 <main+0x19c>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of TaskEcuM */
  TaskEcuMHandle = osThreadNew(vTaskEcuM, NULL, &TaskEcuM_attributes);
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <main+0x1a0>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	4827      	ldr	r0, [pc, #156]	; (8000688 <main+0x1a4>)
 80005ea:	f00f fbee 	bl	800fdca <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a26      	ldr	r2, [pc, #152]	; (800068c <main+0x1a8>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of TaskDiagAppl */
  TaskDiagApplHandle = osThreadNew(vTaskDiagAppl, NULL, &TaskDiagAppl_attributes);
 80005f4:	4a26      	ldr	r2, [pc, #152]	; (8000690 <main+0x1ac>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	4826      	ldr	r0, [pc, #152]	; (8000694 <main+0x1b0>)
 80005fa:	f00f fbe6 	bl	800fdca <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a25      	ldr	r2, [pc, #148]	; (8000698 <main+0x1b4>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f00f fba6 	bl	800fd54 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x124>
 800060a:	bf00      	nop
 800060c:	080144ac 	.word	0x080144ac
 8000610:	20000870 	.word	0x20000870
 8000614:	080144bc 	.word	0x080144bc
 8000618:	20000874 	.word	0x20000874
 800061c:	0801444c 	.word	0x0801444c
 8000620:	20000860 	.word	0x20000860
 8000624:	08014464 	.word	0x08014464
 8000628:	20000864 	.word	0x20000864
 800062c:	0801447c 	.word	0x0801447c
 8000630:	20000868 	.word	0x20000868
 8000634:	08014494 	.word	0x08014494
 8000638:	2000086c 	.word	0x2000086c
 800063c:	0801432c 	.word	0x0801432c
 8000640:	08000e61 	.word	0x08000e61
 8000644:	20000840 	.word	0x20000840
 8000648:	08014350 	.word	0x08014350
 800064c:	08000e75 	.word	0x08000e75
 8000650:	20000844 	.word	0x20000844
 8000654:	08014374 	.word	0x08014374
 8000658:	08000e89 	.word	0x08000e89
 800065c:	20000848 	.word	0x20000848
 8000660:	08014398 	.word	0x08014398
 8000664:	08000e9d 	.word	0x08000e9d
 8000668:	2000084c 	.word	0x2000084c
 800066c:	080143bc 	.word	0x080143bc
 8000670:	08000eb1 	.word	0x08000eb1
 8000674:	20000850 	.word	0x20000850
 8000678:	080143e0 	.word	0x080143e0
 800067c:	08000f05 	.word	0x08000f05
 8000680:	20000854 	.word	0x20000854
 8000684:	08014404 	.word	0x08014404
 8000688:	08000f39 	.word	0x08000f39
 800068c:	20000858 	.word	0x20000858
 8000690:	08014428 	.word	0x08014428
 8000694:	08000f4d 	.word	0x08000f4d
 8000698:	2000085c 	.word	0x2000085c

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	; 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	; 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f013 fcca 	bl	8014044 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b29      	ldr	r3, [pc, #164]	; (800076c <SystemClock_Config+0xd0>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	4a28      	ldr	r2, [pc, #160]	; (800076c <SystemClock_Config+0xd0>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	; 0x40
 80006d0:	4b26      	ldr	r3, [pc, #152]	; (800076c <SystemClock_Config+0xd0>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xd4>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xd4>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xd4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80006f8:	230d      	movs	r3, #13
 80006fa:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000702:	2301      	movs	r3, #1
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800070e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000714:	2319      	movs	r3, #25
 8000716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000718:	23c0      	movs	r3, #192	; 0xc0
 800071a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071c:	2302      	movs	r3, #2
 800071e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000720:	2304      	movs	r3, #4
 8000722:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	4618      	mov	r0, r3
 800072a:	f004 f8ef 	bl	800490c <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000734:	f000 fc14 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073c:	2302      	movs	r3, #2
 800073e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000748:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800074e:	f107 030c 	add.w	r3, r7, #12
 8000752:	2103      	movs	r1, #3
 8000754:	4618      	mov	r0, r3
 8000756:	f004 fb51 	bl	8004dfc <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000760:	f000 fbfe 	bl	8000f60 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	; 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000778:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_I2C1_Init+0x50>)
 800077a:	4a13      	ldr	r2, [pc, #76]	; (80007c8 <MX_I2C1_Init+0x54>)
 800077c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800077e:	4b11      	ldr	r3, [pc, #68]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000780:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_I2C1_Init+0x58>)
 8000782:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800078a:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <MX_I2C1_Init+0x50>)
 800078c:	2200      	movs	r2, #0
 800078e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000790:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <MX_I2C1_Init+0x50>)
 8000792:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000796:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007aa:	4b06      	ldr	r3, [pc, #24]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b0:	4804      	ldr	r0, [pc, #16]	; (80007c4 <MX_I2C1_Init+0x50>)
 80007b2:	f001 fe47 	bl	8002444 <HAL_I2C_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007bc:	f000 fbd0 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}
 80007c4:	20000440 	.word	0x20000440
 80007c8:	40005400 	.word	0x40005400
 80007cc:	00061a80 	.word	0x00061a80

080007d0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_I2C2_Init+0x50>)
 80007d6:	4a13      	ldr	r2, [pc, #76]	; (8000824 <MX_I2C2_Init+0x54>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_I2C2_Init+0x50>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_I2C2_Init+0x58>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_I2C2_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_I2C2_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_I2C2_Init+0x50>)
 80007ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007f2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <MX_I2C2_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_I2C2_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000800:	4b07      	ldr	r3, [pc, #28]	; (8000820 <MX_I2C2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_I2C2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800080c:	4804      	ldr	r0, [pc, #16]	; (8000820 <MX_I2C2_Init+0x50>)
 800080e:	f001 fe19 	bl	8002444 <HAL_I2C_Init>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000818:	f000 fba2 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20000494 	.word	0x20000494
 8000824:	40005800 	.word	0x40005800
 8000828:	00061a80 	.word	0x00061a80

0800082c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000830:	4b09      	ldr	r3, [pc, #36]	; (8000858 <MX_IWDG_Init+0x2c>)
 8000832:	4a0a      	ldr	r2, [pc, #40]	; (800085c <MX_IWDG_Init+0x30>)
 8000834:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 8000836:	4b08      	ldr	r3, [pc, #32]	; (8000858 <MX_IWDG_Init+0x2c>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 800083c:	4b06      	ldr	r3, [pc, #24]	; (8000858 <MX_IWDG_Init+0x2c>)
 800083e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000842:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000844:	4804      	ldr	r0, [pc, #16]	; (8000858 <MX_IWDG_Init+0x2c>)
 8000846:	f002 fd92 	bl	800336e <HAL_IWDG_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8000850:	f000 fb86 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}
 8000858:	200005a8 	.word	0x200005a8
 800085c:	40003000 	.word	0x40003000

08000860 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_RTC_Init+0x44>)
 8000866:	4a10      	ldr	r2, [pc, #64]	; (80008a8 <MX_RTC_Init+0x48>)
 8000868:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_RTC_Init+0x44>)
 800086c:	2240      	movs	r2, #64	; 0x40
 800086e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_RTC_Init+0x44>)
 8000872:	227f      	movs	r2, #127	; 0x7f
 8000874:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_RTC_Init+0x44>)
 8000878:	22ff      	movs	r2, #255	; 0xff
 800087a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_RTC_Init+0x44>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_RTC_Init+0x44>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_RTC_Init+0x44>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_RTC_Init+0x44>)
 8000890:	f004 fd84 	bl	800539c <HAL_RTC_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800089a:	f000 fb61 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200005b4 	.word	0x200005b4
 80008a8:	40002800 	.word	0x40002800

080008ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
 80008be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c0:	463b      	mov	r3, r7
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008c8:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_TIM1_Init+0x98>)
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <MX_TIM1_Init+0x9c>)
 80008cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80008ce:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <MX_TIM1_Init+0x98>)
 80008d0:	2202      	movs	r2, #2
 80008d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d4:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_TIM1_Init+0x98>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_TIM1_Init+0x98>)
 80008dc:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80008e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_TIM1_Init+0x98>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_TIM1_Init+0x98>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_TIM1_Init+0x98>)
 80008f0:	2280      	movs	r2, #128	; 0x80
 80008f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_TIM1_Init+0x98>)
 80008f6:	f004 fe4b 	bl	8005590 <HAL_TIM_Base_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 fb2e 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000904:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000908:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800090a:	f107 0308 	add.w	r3, r7, #8
 800090e:	4619      	mov	r1, r3
 8000910:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_TIM1_Init+0x98>)
 8000912:	f005 f9a5 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800091c:	f000 fb20 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_TIM1_Init+0x98>)
 800092e:	f005 fe55 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000938:	f000 fb12 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	200005d4 	.word	0x200005d4
 8000948:	40010000 	.word	0x40010000

0800094c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000952:	f107 0308 	add.w	r3, r7, #8
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000960:	463b      	mov	r3, r7
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM2_Init+0x94>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_TIM2_Init+0x94>)
 800097e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0x94>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_TIM2_Init+0x94>)
 8000992:	f004 fdfd 	bl	8005590 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800099c:	f000 fae0 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0308 	add.w	r3, r7, #8
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_TIM2_Init+0x94>)
 80009ae:	f005 f957 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009b8:	f000 fad2 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c4:	463b      	mov	r3, r7
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_TIM2_Init+0x94>)
 80009ca:	f005 fe07 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80009d4:	f000 fac4 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000061c 	.word	0x2000061c

080009e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a02:	1d3b      	adds	r3, r7, #4
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
 8000a10:	615a      	str	r2, [r3, #20]
 8000a12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a16:	4a2d      	ldr	r2, [pc, #180]	; (8000acc <MX_TIM3_Init+0xe8>)
 8000a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a20:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a26:	4b28      	ldr	r3, [pc, #160]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a3a:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a3c:	f004 fda8 	bl	8005590 <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a46:	f000 fa8b 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a54:	4619      	mov	r1, r3
 8000a56:	481c      	ldr	r0, [pc, #112]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a58:	f005 f902 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a62:	f000 fa7d 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a66:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a68:	f004 fde1 	bl	800562e <HAL_TIM_PWM_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a72:	f000 fa75 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a76:	2300      	movs	r3, #0
 8000a78:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a7e:	f107 0320 	add.w	r3, r7, #32
 8000a82:	4619      	mov	r1, r3
 8000a84:	4810      	ldr	r0, [pc, #64]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000a86:	f005 fda9 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a90:	f000 fa66 	bl	8000f60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a94:	2360      	movs	r3, #96	; 0x60
 8000a96:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000aac:	f005 f816 	bl	8005adc <HAL_TIM_PWM_ConfigChannel>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ab6:	f000 fa53 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aba:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <MX_TIM3_Init+0xe4>)
 8000abc:	f000 fc56 	bl	800136c <HAL_TIM_MspPostInit>

}
 8000ac0:	bf00      	nop
 8000ac2:	3738      	adds	r7, #56	; 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000664 	.word	0x20000664
 8000acc:	40000400 	.word	0x40000400

08000ad0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ad6:	f107 0318 	add.w	r3, r7, #24
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aee:	463b      	mov	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000afa:	4b2b      	ldr	r3, [pc, #172]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000afc:	4a2b      	ldr	r2, [pc, #172]	; (8000bac <MX_TIM4_Init+0xdc>)
 8000afe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000b00:	4b29      	ldr	r3, [pc, #164]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b06:	4b28      	ldr	r3, [pc, #160]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000b0c:	4b26      	ldr	r3, [pc, #152]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b14:	4b24      	ldr	r3, [pc, #144]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1a:	4b23      	ldr	r3, [pc, #140]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b20:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b22:	f004 fd35 	bl	8005590 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000b2c:	f000 fa18 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b36:	f107 0318 	add.w	r3, r7, #24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481a      	ldr	r0, [pc, #104]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b3e:	f005 f88f 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 fa0a 	bl	8000f60 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b4c:	4816      	ldr	r0, [pc, #88]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b4e:	f004 fdc7 	bl	80056e0 <HAL_TIM_IC_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 fa02 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	480f      	ldr	r0, [pc, #60]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b6c:	f005 fd36 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000b76:	f000 f9f3 	bl	8000f60 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b8a:	463b      	mov	r3, r7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM4_Init+0xd8>)
 8000b92:	f004 ff06 	bl	80059a2 <HAL_TIM_IC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000b9c:	f000 f9e0 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	200006ac 	.word	0x200006ac
 8000bac:	40000800 	.word	0x40000800

08000bb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bb6:	f107 0308 	add.w	r3, r7, #8
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
 8000bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bce:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <MX_TIM5_Init+0x98>)
 8000bd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 14;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bd4:	220e      	movs	r2, #14
 8000bd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 63999;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000be0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000be4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000be6:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bec:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bee:	2280      	movs	r2, #128	; 0x80
 8000bf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000bf2:	4814      	ldr	r0, [pc, #80]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000bf4:	f004 fccc 	bl	8005590 <HAL_TIM_Base_Init>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000bfe:	f000 f9af 	bl	8000f60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	480d      	ldr	r0, [pc, #52]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000c10:	f005 f826 	bl	8005c60 <HAL_TIM_ConfigClockSource>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000c1a:	f000 f9a1 	bl	8000f60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000c26:	463b      	mov	r3, r7
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4806      	ldr	r0, [pc, #24]	; (8000c44 <MX_TIM5_Init+0x94>)
 8000c2c:	f005 fcd6 	bl	80065dc <HAL_TIMEx_MasterConfigSynchronization>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000c36:	f000 f993 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200006f4 	.word	0x200006f4
 8000c48:	40000c00 	.word	0x40000c00

08000c4c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c50:	4b12      	ldr	r3, [pc, #72]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <MX_USART1_UART_Init+0x54>)
 8000c54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c58:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8000c5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 8000c5e:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c64:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c66:	4b0d      	ldr	r3, [pc, #52]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c76:	220c      	movs	r2, #12
 8000c78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c80:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c86:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_USART1_UART_Init+0x50>)
 8000c88:	f005 fd2a 	bl	80066e0 <HAL_UART_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000c92:	f000 f965 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	2000073c 	.word	0x2000073c
 8000ca0:	40011000 	.word	0x40011000

08000ca4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	603b      	str	r3, [r7, #0]
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_DMA_Init+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a17      	ldr	r2, [pc, #92]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_DMA_Init+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	200d      	movs	r0, #13
 8000ce8:	f000 fe5b 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000cec:	200d      	movs	r0, #13
 8000cee:	f000 fe74 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	202f      	movs	r0, #47	; 0x2f
 8000cf8:	f000 fe53 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000cfc:	202f      	movs	r0, #47	; 0x2f
 8000cfe:	f000 fe6c 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2105      	movs	r1, #5
 8000d06:	203a      	movs	r0, #58	; 0x3a
 8000d08:	f000 fe4b 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000d0c:	203a      	movs	r0, #58	; 0x3a
 8000d0e:	f000 fe64 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2105      	movs	r1, #5
 8000d16:	2046      	movs	r0, #70	; 0x46
 8000d18:	f000 fe43 	bl	80019a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d1c:	2046      	movs	r0, #70	; 0x46
 8000d1e:	f000 fe5c 	bl	80019da <HAL_NVIC_EnableIRQ>

}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	; 0x28
 8000d34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	4b41      	ldr	r3, [pc, #260]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a40      	ldr	r2, [pc, #256]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b3e      	ldr	r3, [pc, #248]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
 8000d66:	4b3a      	ldr	r3, [pc, #232]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a39      	ldr	r2, [pc, #228]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	4b33      	ldr	r3, [pc, #204]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a32      	ldr	r2, [pc, #200]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b30      	ldr	r3, [pc, #192]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a2b      	ldr	r2, [pc, #172]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b29      	ldr	r3, [pc, #164]	; (8000e50 <MX_GPIO_Init+0x120>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OR_GPIO_Port, LED_OR_Pin, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dbc:	4825      	ldr	r0, [pc, #148]	; (8000e54 <MX_GPIO_Init+0x124>)
 8000dbe:	f001 fb27 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPLed1_Pin|GPLed2_Pin|WP_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2198      	movs	r1, #152	; 0x98
 8000dc6:	4824      	ldr	r0, [pc, #144]	; (8000e58 <MX_GPIO_Init+0x128>)
 8000dc8:	f001 fb22 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EnableFAN_Pin|TOF_XSHUT_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	21a0      	movs	r1, #160	; 0xa0
 8000dd0:	4822      	ldr	r0, [pc, #136]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000dd2:	f001 fb1d 	bl	8002410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_OR_Pin */
  GPIO_InitStruct.Pin = LED_OR_Pin;
 8000dd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de4:	2300      	movs	r3, #0
 8000de6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OR_GPIO_Port, &GPIO_InitStruct);
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	4619      	mov	r1, r3
 8000dee:	4819      	ldr	r0, [pc, #100]	; (8000e54 <MX_GPIO_Init+0x124>)
 8000df0:	f001 f98a 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pin : DevMode_IT_Pin */
  GPIO_InitStruct.Pin = DevMode_IT_Pin;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DevMode_IT_GPIO_Port, &GPIO_InitStruct);
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	4619      	mov	r1, r3
 8000e08:	4813      	ldr	r0, [pc, #76]	; (8000e58 <MX_GPIO_Init+0x128>)
 8000e0a:	f001 f97d 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPLed1_Pin GPLed2_Pin WP_Pin */
  GPIO_InitStruct.Pin = GPLed1_Pin|GPLed2_Pin|WP_Pin;
 8000e0e:	2398      	movs	r3, #152	; 0x98
 8000e10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <MX_GPIO_Init+0x128>)
 8000e26:	f001 f96f 	bl	8002108 <HAL_GPIO_Init>

  /*Configure GPIO pins : EnableFAN_Pin TOF_XSHUT_Pin */
  GPIO_InitStruct.Pin = EnableFAN_Pin|TOF_XSHUT_Pin;
 8000e2a:	23a0      	movs	r3, #160	; 0xa0
 8000e2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_GPIO_Init+0x12c>)
 8000e42:	f001 f961 	bl	8002108 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020800 	.word	0x40020800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400

08000e60 <vTaskIdle>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vTaskIdle */
void vTaskIdle(void *argument)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000e68:	f012 fbac 	bl	80135c4 <MX_USB_DEVICE_Init>
  /*TODO: Implement strategy for CPU Load measures*/

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f00f f83e 	bl	800feee <osDelay>
 8000e72:	e7fb      	b.n	8000e6c <vTaskIdle+0xc>

08000e74 <vTaskModeManager>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskModeManager */
void vTaskModeManager(void *argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskModeManager */
  vTaskModeManager_Runnable();
 8000e7c:	f012 fa8e 	bl	801339c <vTaskModeManager_Runnable>
  /* USER CODE END vTaskModeManager */
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <vTaskPID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskPID */
void vTaskPID(void *argument)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskPID */
  vTaskPID_Runnable();
 8000e90:	f012 fa92 	bl	80133b8 <vTaskPID_Runnable>
  /* USER CODE END vTaskPID */
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <vTaskCOM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskCOM */
void vTaskCOM(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskCOM */
	vTaskCOM_Runnable();
 8000ea4:	f012 f981 	bl	80131aa <vTaskCOM_Runnable>
  /* USER CODE END vTaskCOM */
}
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <vTaskSensorActuator>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskSensorActuator */
void vTaskSensorActuator(void *argument)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskSensorActuator */
	const TickType_t taskResolutionMS = 10;
 8000eb8:	230a      	movs	r3, #10
 8000eba:	60bb      	str	r3, [r7, #8]
	TickType_t tick;

	DistanceSensor_Init();
 8000ebc:	f012 f986 	bl	80131cc <DistanceSensor_Init>
	FAN_Init();
 8000ec0:	f012 fa5e 	bl	8013380 <FAN_Init>
	tick = osKernelGetTickCount();
 8000ec4:	f00e ff6c 	bl	800fda0 <osKernelGetTickCount>
 8000ec8:	60f8      	str	r0, [r7, #12]
  for(;;)
  {
  	DistanceSensor_MainRunnable();
 8000eca:	f012 f9fd 	bl	80132c8 <DistanceSensor_MainRunnable>
  	FAN_MainRunnable();
 8000ece:	f012 fa5e 	bl	801338e <FAN_MainRunnable>
  	osSemaphoreRelease(xSemaphore_PIDHandle);
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	; (8000efc <vTaskSensorActuator+0x4c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f00f f8da 	bl	8010090 <osSemaphoreRelease>

  	/*Parsed Loop Handling with 10ms resolution*/
  	tick += pdMS_TO_TICKS(taskResolutionMS);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee2:	fb02 f303 	mul.w	r3, r2, r3
 8000ee6:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <vTaskSensorActuator+0x50>)
 8000ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8000eec:	099b      	lsrs	r3, r3, #6
 8000eee:	68fa      	ldr	r2, [r7, #12]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	60fb      	str	r3, [r7, #12]
  	osDelayUntil(tick);
 8000ef4:	68f8      	ldr	r0, [r7, #12]
 8000ef6:	f00f f815 	bl	800ff24 <osDelayUntil>
  	DistanceSensor_MainRunnable();
 8000efa:	e7e6      	b.n	8000eca <vTaskSensorActuator+0x1a>
 8000efc:	20000870 	.word	0x20000870
 8000f00:	10624dd3 	.word	0x10624dd3

08000f04 <vTaskWdgM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskWdgM */
void vTaskWdgM(void *argument)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskWdgM */
	const TickType_t ticksForResetWDG = pdMS_TO_TICKS(500); //WDG @ 500ms
 8000f0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f10:	60bb      	str	r3, [r7, #8]
	TickType_t ticks;

	HAL_IWDG_Init(&hiwdg);
 8000f12:	4808      	ldr	r0, [pc, #32]	; (8000f34 <vTaskWdgM+0x30>)
 8000f14:	f002 fa2b 	bl	800336e <HAL_IWDG_Init>
	ticks = osKernelGetTickCount();
 8000f18:	f00e ff42 	bl	800fda0 <osKernelGetTickCount>
 8000f1c:	60f8      	str	r0, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
    HAL_IWDG_Refresh(&hiwdg);
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <vTaskWdgM+0x30>)
 8000f20:	f002 fa67 	bl	80033f2 <HAL_IWDG_Refresh>
    ticks += ticksForResetWDG;
 8000f24:	68fa      	ldr	r2, [r7, #12]
 8000f26:	68bb      	ldr	r3, [r7, #8]
 8000f28:	4413      	add	r3, r2
 8000f2a:	60fb      	str	r3, [r7, #12]
    osDelayUntil(ticks);
 8000f2c:	68f8      	ldr	r0, [r7, #12]
 8000f2e:	f00e fff9 	bl	800ff24 <osDelayUntil>
    HAL_IWDG_Refresh(&hiwdg);
 8000f32:	e7f4      	b.n	8000f1e <vTaskWdgM+0x1a>
 8000f34:	200005a8 	.word	0x200005a8

08000f38 <vTaskEcuM>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskEcuM */
void vTaskEcuM(void *argument)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskEcuM */
	vTaskEcuM_Runnable();
 8000f40:	f012 fa19 	bl	8013376 <vTaskEcuM_Runnable>
  /* USER CODE END vTaskEcuM */
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <vTaskDiagAppl>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskDiagAppl */
void vTaskDiagAppl(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskDiagAppl */
	vTaskDiagAppl_Runnable();
 8000f54:	f012 f935 	bl	80131c2 <vTaskDiagAppl_Runnable>
  /* USER CODE END vTaskDiagAppl */
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_MspInit+0x54>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a11      	ldr	r2, [pc, #68]	; (8000fc0 <HAL_MspInit+0x54>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <HAL_MspInit+0x54>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b0b      	ldr	r3, [pc, #44]	; (8000fc0 <HAL_MspInit+0x54>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <HAL_MspInit+0x54>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HAL_MspInit+0x54>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	210f      	movs	r1, #15
 8000fae:	f06f 0001 	mvn.w	r0, #1
 8000fb2:	f000 fcf6 	bl	80019a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08c      	sub	sp, #48	; 0x30
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 031c 	add.w	r3, r7, #28
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a69      	ldr	r2, [pc, #420]	; (8001188 <HAL_I2C_MspInit+0x1c4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d12d      	bne.n	8001042 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	4b68      	ldr	r3, [pc, #416]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a67      	ldr	r2, [pc, #412]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b65      	ldr	r3, [pc, #404]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001002:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001008:	2312      	movs	r3, #18
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001014:	2304      	movs	r3, #4
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	485c      	ldr	r0, [pc, #368]	; (8001190 <HAL_I2C_MspInit+0x1cc>)
 8001020:	f001 f872 	bl	8002108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	4b58      	ldr	r3, [pc, #352]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a57      	ldr	r2, [pc, #348]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 800102e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40
 8001034:	4b55      	ldr	r3, [pc, #340]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001040:	e09e      	b.n	8001180 <HAL_I2C_MspInit+0x1bc>
  else if(hi2c->Instance==I2C2)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a53      	ldr	r2, [pc, #332]	; (8001194 <HAL_I2C_MspInit+0x1d0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	f040 8099 	bne.w	8001180 <HAL_I2C_MspInit+0x1bc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b4e      	ldr	r3, [pc, #312]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a4d      	ldr	r2, [pc, #308]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b4b      	ldr	r3, [pc, #300]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800106a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001070:	2312      	movs	r3, #18
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800107c:	2304      	movs	r3, #4
 800107e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4842      	ldr	r0, [pc, #264]	; (8001190 <HAL_I2C_MspInit+0x1cc>)
 8001088:	f001 f83e 	bl	8002108 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800108c:	2308      	movs	r3, #8
 800108e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001098:	2303      	movs	r3, #3
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800109c:	2309      	movs	r3, #9
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a0:	f107 031c 	add.w	r3, r7, #28
 80010a4:	4619      	mov	r1, r3
 80010a6:	483a      	ldr	r0, [pc, #232]	; (8001190 <HAL_I2C_MspInit+0x1cc>)
 80010a8:	f001 f82e 	bl	8002108 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	4b36      	ldr	r3, [pc, #216]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	4a35      	ldr	r2, [pc, #212]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 80010b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ba:	6413      	str	r3, [r2, #64]	; 0x40
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <HAL_I2C_MspInit+0x1c8>)
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80010c8:	4b33      	ldr	r3, [pc, #204]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010ca:	4a34      	ldr	r2, [pc, #208]	; (800119c <HAL_I2C_MspInit+0x1d8>)
 80010cc:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80010ce:	4b32      	ldr	r3, [pc, #200]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010d4:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010d6:	4b30      	ldr	r3, [pc, #192]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010dc:	4b2e      	ldr	r3, [pc, #184]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e8:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ea:	4b2b      	ldr	r3, [pc, #172]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010f0:	4b29      	ldr	r3, [pc, #164]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001102:	4b25      	ldr	r3, [pc, #148]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8001108:	4823      	ldr	r0, [pc, #140]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 800110a:	f000 fc81 	bl	8001a10 <HAL_DMA_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001114:	f7ff ff24 	bl	8000f60 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a1f      	ldr	r2, [pc, #124]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 800111c:	639a      	str	r2, [r3, #56]	; 0x38
 800111e:	4a1e      	ldr	r2, [pc, #120]	; (8001198 <HAL_I2C_MspInit+0x1d4>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8001124:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001126:	4a1f      	ldr	r2, [pc, #124]	; (80011a4 <HAL_I2C_MspInit+0x1e0>)
 8001128:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 800112c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001130:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001134:	2240      	movs	r2, #64	; 0x40
 8001136:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800114c:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8001152:	4b13      	ldr	r3, [pc, #76]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001154:	2200      	movs	r2, #0
 8001156:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001158:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 800115a:	2200      	movs	r2, #0
 800115c:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115e:	4b10      	ldr	r3, [pc, #64]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001160:	2200      	movs	r2, #0
 8001162:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8001164:	480e      	ldr	r0, [pc, #56]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001166:	f000 fc53 	bl	8001a10 <HAL_DMA_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_I2C_MspInit+0x1b0>
      Error_Handler();
 8001170:	f7ff fef6 	bl	8000f60 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 8001178:	635a      	str	r2, [r3, #52]	; 0x34
 800117a:	4a09      	ldr	r2, [pc, #36]	; (80011a0 <HAL_I2C_MspInit+0x1dc>)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40005400 	.word	0x40005400
 800118c:	40023800 	.word	0x40023800
 8001190:	40020400 	.word	0x40020400
 8001194:	40005800 	.word	0x40005800
 8001198:	200004e8 	.word	0x200004e8
 800119c:	40026040 	.word	0x40026040
 80011a0:	20000548 	.word	0x20000548
 80011a4:	400260b8 	.word	0x400260b8

080011a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b0:	f107 0308 	add.w	r3, r7, #8
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
 80011c0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a0c      	ldr	r2, [pc, #48]	; (80011f8 <HAL_RTC_MspInit+0x50>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d111      	bne.n	80011f0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011cc:	2302      	movs	r3, #2
 80011ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80011d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011d4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 ffee 	bl	80051bc <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80011e6:	f7ff febb 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <HAL_RTC_MspInit+0x54>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011f0:	bf00      	nop
 80011f2:	3720      	adds	r7, #32
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40002800 	.word	0x40002800
 80011fc:	42470e3c 	.word	0x42470e3c

08001200 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08e      	sub	sp, #56	; 0x38
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_TIM_Base_MspInit+0x154>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d116      	bne.n	8001250 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	4a4b      	ldr	r2, [pc, #300]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6453      	str	r3, [r2, #68]	; 0x44
 8001232:	4b49      	ldr	r3, [pc, #292]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	623b      	str	r3, [r7, #32]
 800123c:	6a3b      	ldr	r3, [r7, #32]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800123e:	2200      	movs	r2, #0
 8001240:	2105      	movs	r1, #5
 8001242:	2019      	movs	r0, #25
 8001244:	f000 fbad 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001248:	2019      	movs	r0, #25
 800124a:	f000 fbc6 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800124e:	e07c      	b.n	800134a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d116      	bne.n	8001288 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
 800125e:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a3d      	ldr	r2, [pc, #244]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2105      	movs	r1, #5
 800127a:	201c      	movs	r0, #28
 800127c:	f000 fb91 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001280:	201c      	movs	r0, #28
 8001282:	f000 fbaa 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 8001286:	e060      	b.n	800134a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_TIM_Base_MspInit+0x15c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10e      	bne.n	80012b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b30      	ldr	r3, [pc, #192]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a2f      	ldr	r2, [pc, #188]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
}
 80012ae:	e04c      	b.n	800134a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2a      	ldr	r2, [pc, #168]	; (8001360 <HAL_TIM_Base_MspInit+0x160>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12c      	bne.n	8001314 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b26      	ldr	r3, [pc, #152]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a25      	ldr	r2, [pc, #148]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b23      	ldr	r3, [pc, #140]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b1f      	ldr	r3, [pc, #124]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b1c      	ldr	r3, [pc, #112]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RPMSpeed_IC_Pin;
 80012f2:	2340      	movs	r3, #64	; 0x40
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f6:	2302      	movs	r3, #2
 80012f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fa:	2301      	movs	r3, #1
 80012fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001302:	2302      	movs	r3, #2
 8001304:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RPMSpeed_IC_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130a:	4619      	mov	r1, r3
 800130c:	4815      	ldr	r0, [pc, #84]	; (8001364 <HAL_TIM_Base_MspInit+0x164>)
 800130e:	f000 fefb 	bl	8002108 <HAL_GPIO_Init>
}
 8001312:	e01a      	b.n	800134a <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM5)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a13      	ldr	r2, [pc, #76]	; (8001368 <HAL_TIM_Base_MspInit+0x168>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d115      	bne.n	800134a <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0d      	ldr	r3, [pc, #52]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6413      	str	r3, [r2, #64]	; 0x40
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <HAL_TIM_Base_MspInit+0x158>)
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	2105      	movs	r1, #5
 800133e:	2032      	movs	r0, #50	; 0x32
 8001340:	f000 fb2f 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001344:	2032      	movs	r0, #50	; 0x32
 8001346:	f000 fb48 	bl	80019da <HAL_NVIC_EnableIRQ>
}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	; 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40010000 	.word	0x40010000
 8001358:	40023800 	.word	0x40023800
 800135c:	40000400 	.word	0x40000400
 8001360:	40000800 	.word	0x40000800
 8001364:	40020400 	.word	0x40020400
 8001368:	40000c00 	.word	0x40000c00

0800136c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_TIM_MspPostInit+0x68>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11d      	bne.n	80013ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 8001398:	f043 0302 	orr.w	r3, r3, #2
 800139c:	6313      	str	r3, [r2, #48]	; 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = PWM_FAN_Pin;
 80013aa:	2310      	movs	r3, #16
 80013ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_FAN_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <HAL_TIM_MspPostInit+0x70>)
 80013c6:	f000 fe9f 	bl	8002108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40000400 	.word	0x40000400
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020400 	.word	0x40020400

080013e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a4c      	ldr	r2, [pc, #304]	; (8001530 <HAL_UART_MspInit+0x150>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	f040 8091 	bne.w	8001526 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
 8001408:	4b4a      	ldr	r3, [pc, #296]	; (8001534 <HAL_UART_MspInit+0x154>)
 800140a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140c:	4a49      	ldr	r2, [pc, #292]	; (8001534 <HAL_UART_MspInit+0x154>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6453      	str	r3, [r2, #68]	; 0x44
 8001414:	4b47      	ldr	r3, [pc, #284]	; (8001534 <HAL_UART_MspInit+0x154>)
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	f003 0310 	and.w	r3, r3, #16
 800141c:	613b      	str	r3, [r7, #16]
 800141e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	4b43      	ldr	r3, [pc, #268]	; (8001534 <HAL_UART_MspInit+0x154>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	4a42      	ldr	r2, [pc, #264]	; (8001534 <HAL_UART_MspInit+0x154>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
 8001430:	4b40      	ldr	r3, [pc, #256]	; (8001534 <HAL_UART_MspInit+0x154>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800143c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800144e:	2307      	movs	r3, #7
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 0314 	add.w	r3, r7, #20
 8001456:	4619      	mov	r1, r3
 8001458:	4837      	ldr	r0, [pc, #220]	; (8001538 <HAL_UART_MspInit+0x158>)
 800145a:	f000 fe55 	bl	8002108 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <HAL_UART_MspInit+0x15c>)
 8001460:	4a37      	ldr	r2, [pc, #220]	; (8001540 <HAL_UART_MspInit+0x160>)
 8001462:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <HAL_UART_MspInit+0x15c>)
 8001466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800146a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800146c:	4b33      	ldr	r3, [pc, #204]	; (800153c <HAL_UART_MspInit+0x15c>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <HAL_UART_MspInit+0x15c>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b30      	ldr	r3, [pc, #192]	; (800153c <HAL_UART_MspInit+0x15c>)
 800147a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800147e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001480:	4b2e      	ldr	r3, [pc, #184]	; (800153c <HAL_UART_MspInit+0x15c>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_UART_MspInit+0x15c>)
 8001488:	2200      	movs	r2, #0
 800148a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800148c:	4b2b      	ldr	r3, [pc, #172]	; (800153c <HAL_UART_MspInit+0x15c>)
 800148e:	2200      	movs	r2, #0
 8001490:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_UART_MspInit+0x15c>)
 8001494:	2200      	movs	r2, #0
 8001496:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_UART_MspInit+0x15c>)
 800149a:	2200      	movs	r2, #0
 800149c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800149e:	4827      	ldr	r0, [pc, #156]	; (800153c <HAL_UART_MspInit+0x15c>)
 80014a0:	f000 fab6 	bl	8001a10 <HAL_DMA_Init>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80014aa:	f7ff fd59 	bl	8000f60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a22      	ldr	r2, [pc, #136]	; (800153c <HAL_UART_MspInit+0x15c>)
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
 80014b4:	4a21      	ldr	r2, [pc, #132]	; (800153c <HAL_UART_MspInit+0x15c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80014ba:	4b22      	ldr	r3, [pc, #136]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014bc:	4a22      	ldr	r2, [pc, #136]	; (8001548 <HAL_UART_MspInit+0x168>)
 80014be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80014c0:	4b20      	ldr	r3, [pc, #128]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014c8:	4b1e      	ldr	r3, [pc, #120]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014dc:	4b19      	ldr	r3, [pc, #100]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014de:	2200      	movs	r2, #0
 80014e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014f4:	4b13      	ldr	r3, [pc, #76]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014fa:	4812      	ldr	r0, [pc, #72]	; (8001544 <HAL_UART_MspInit+0x164>)
 80014fc:	f000 fa88 	bl	8001a10 <HAL_DMA_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001506:	f7ff fd2b 	bl	8000f60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a0d      	ldr	r2, [pc, #52]	; (8001544 <HAL_UART_MspInit+0x164>)
 800150e:	635a      	str	r2, [r3, #52]	; 0x34
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <HAL_UART_MspInit+0x164>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	2025      	movs	r0, #37	; 0x25
 800151c:	f000 fa41 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001520:	2025      	movs	r0, #37	; 0x25
 8001522:	f000 fa5a 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	3728      	adds	r7, #40	; 0x28
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40011000 	.word	0x40011000
 8001534:	40023800 	.word	0x40023800
 8001538:	40020000 	.word	0x40020000
 800153c:	20000780 	.word	0x20000780
 8001540:	40026440 	.word	0x40026440
 8001544:	200007e0 	.word	0x200007e0
 8001548:	400264b8 	.word	0x400264b8

0800154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <NMI_Handler+0x4>

08001552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <HardFault_Handler+0x4>

08001558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <MemManage_Handler+0x4>

0800155e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <BusFault_Handler+0x4>

08001564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler+0x4>

0800156a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156a:	b480      	push	{r7}
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800157c:	f000 f8f2 	bl	8001764 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001580:	f010 fda6 	bl	80120d0 <xTaskGetSchedulerState>
 8001584:	4603      	mov	r3, r0
 8001586:	2b01      	cmp	r3, #1
 8001588:	d001      	beq.n	800158e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800158a:	f011 fb8d 	bl	8012ca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <DMA1_Stream2_IRQHandler+0x10>)
 800159a:	f000 fb79 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200004e8 	.word	0x200004e8

080015a8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80015ac:	4802      	ldr	r0, [pc, #8]	; (80015b8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80015ae:	f004 f8f0 	bl	8005792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	200005d4 	.word	0x200005d4

080015bc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c0:	4802      	ldr	r0, [pc, #8]	; (80015cc <TIM2_IRQHandler+0x10>)
 80015c2:	f004 f8e6 	bl	8005792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000061c 	.word	0x2000061c

080015d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <USART1_IRQHandler+0x10>)
 80015d6:	f005 f8d1 	bl	800677c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	2000073c 	.word	0x2000073c

080015e4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80015e8:	4802      	ldr	r0, [pc, #8]	; (80015f4 <DMA1_Stream7_IRQHandler+0x10>)
 80015ea:	f000 fb51 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000548 	.word	0x20000548

080015f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM5_IRQHandler+0x10>)
 80015fe:	f004 f8c8 	bl	8005792 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	200006f4 	.word	0x200006f4

0800160c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001610:	4802      	ldr	r0, [pc, #8]	; (800161c <DMA2_Stream2_IRQHandler+0x10>)
 8001612:	f000 fb3d 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000780 	.word	0x20000780

08001620 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001624:	4802      	ldr	r0, [pc, #8]	; (8001630 <OTG_FS_IRQHandler+0x10>)
 8001626:	f002 f844 	bl	80036b2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200069d8 	.word	0x200069d8

08001634 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001638:	4802      	ldr	r0, [pc, #8]	; (8001644 <DMA2_Stream7_IRQHandler+0x10>)
 800163a:	f000 fb29 	bl	8001c90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	200007e0 	.word	0x200007e0

08001648 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <SystemInit+0x20>)
 800164e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001652:	4a05      	ldr	r2, [pc, #20]	; (8001668 <SystemInit+0x20>)
 8001654:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <Reset_Handler>:
 800166c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a4 <LoopFillZerobss+0x12>
 8001670:	480d      	ldr	r0, [pc, #52]	; (80016a8 <LoopFillZerobss+0x16>)
 8001672:	490e      	ldr	r1, [pc, #56]	; (80016ac <LoopFillZerobss+0x1a>)
 8001674:	4a0e      	ldr	r2, [pc, #56]	; (80016b0 <LoopFillZerobss+0x1e>)
 8001676:	2300      	movs	r3, #0
 8001678:	e002      	b.n	8001680 <LoopCopyDataInit>

0800167a <CopyDataInit>:
 800167a:	58d4      	ldr	r4, [r2, r3]
 800167c:	50c4      	str	r4, [r0, r3]
 800167e:	3304      	adds	r3, #4

08001680 <LoopCopyDataInit>:
 8001680:	18c4      	adds	r4, r0, r3
 8001682:	428c      	cmp	r4, r1
 8001684:	d3f9      	bcc.n	800167a <CopyDataInit>
 8001686:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <LoopFillZerobss+0x22>)
 8001688:	4c0b      	ldr	r4, [pc, #44]	; (80016b8 <LoopFillZerobss+0x26>)
 800168a:	2300      	movs	r3, #0
 800168c:	e001      	b.n	8001692 <LoopFillZerobss>

0800168e <FillZerobss>:
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	3204      	adds	r2, #4

08001692 <LoopFillZerobss>:
 8001692:	42a2      	cmp	r2, r4
 8001694:	d3fb      	bcc.n	800168e <FillZerobss>
 8001696:	f7ff ffd7 	bl	8001648 <SystemInit>
 800169a:	f012 fc9f 	bl	8013fdc <__libc_init_array>
 800169e:	f7fe ff21 	bl	80004e4 <main>
 80016a2:	4770      	bx	lr
 80016a4:	20020000 	.word	0x20020000
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000424 	.word	0x20000424
 80016b0:	0801455c 	.word	0x0801455c
 80016b4:	20000424 	.word	0x20000424
 80016b8:	2000710c 	.word	0x2000710c

080016bc <ADC_IRQHandler>:
 80016bc:	e7fe      	b.n	80016bc <ADC_IRQHandler>
	...

080016c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c4:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a0d      	ldr	r2, [pc, #52]	; (8001700 <HAL_Init+0x40>)
 80016ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <HAL_Init+0x40>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_Init+0x40>)
 80016d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016dc:	4b08      	ldr	r3, [pc, #32]	; (8001700 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a07      	ldr	r2, [pc, #28]	; (8001700 <HAL_Init+0x40>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f94f 	bl	800198c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ee:	200f      	movs	r0, #15
 80016f0:	f000 f808 	bl	8001704 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f4:	f7ff fc3a 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40023c00 	.word	0x40023c00

08001704 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x54>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_InitTick+0x58>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	4619      	mov	r1, r3
 8001716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800171a:	fbb3 f3f1 	udiv	r3, r3, r1
 800171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001722:	4618      	mov	r0, r3
 8001724:	f000 f967 	bl	80019f6 <HAL_SYSTICK_Config>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00e      	b.n	8001750 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b0f      	cmp	r3, #15
 8001736:	d80a      	bhi.n	800174e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001738:	2200      	movs	r2, #0
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001740:	f000 f92f 	bl	80019a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001744:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_InitTick+0x5c>)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	e000      	b.n	8001750 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
}
 8001750:	4618      	mov	r0, r3
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000000 	.word	0x20000000
 800175c:	20000008 	.word	0x20000008
 8001760:	20000004 	.word	0x20000004

08001764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x20>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	461a      	mov	r2, r3
 800176e:	4b06      	ldr	r3, [pc, #24]	; (8001788 <HAL_IncTick+0x24>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4413      	add	r3, r2
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <HAL_IncTick+0x24>)
 8001776:	6013      	str	r3, [r2, #0]
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	20000008 	.word	0x20000008
 8001788:	200008bc 	.word	0x200008bc

0800178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <HAL_GetTick+0x14>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	200008bc 	.word	0x200008bc

080017a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017ac:	f7ff ffee 	bl	800178c <HAL_GetTick>
 80017b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017bc:	d005      	beq.n	80017ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017be:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <HAL_Delay+0x44>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	4413      	add	r3, r2
 80017c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017ca:	bf00      	nop
 80017cc:	f7ff ffde 	bl	800178c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d8f7      	bhi.n	80017cc <HAL_Delay+0x28>
  {
  }
}
 80017dc:	bf00      	nop
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000008 	.word	0x20000008

080017ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017fc:	4b0c      	ldr	r3, [pc, #48]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001808:	4013      	ands	r3, r2
 800180a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800181c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800181e:	4a04      	ldr	r2, [pc, #16]	; (8001830 <__NVIC_SetPriorityGrouping+0x44>)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	60d3      	str	r3, [r2, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <__NVIC_GetPriorityGrouping+0x18>)
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	0a1b      	lsrs	r3, r3, #8
 800183e:	f003 0307 	and.w	r3, r3, #7
}
 8001842:	4618      	mov	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	2b00      	cmp	r3, #0
 8001860:	db0b      	blt.n	800187a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	f003 021f 	and.w	r2, r3, #31
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <__NVIC_EnableIRQ+0x38>)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	095b      	lsrs	r3, r3, #5
 8001870:	2001      	movs	r0, #1
 8001872:	fa00 f202 	lsl.w	r2, r0, r2
 8001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001958:	d301      	bcc.n	800195e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800195a:	2301      	movs	r3, #1
 800195c:	e00f      	b.n	800197e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <SysTick_Config+0x40>)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001966:	210f      	movs	r1, #15
 8001968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800196c:	f7ff ff8e 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <SysTick_Config+0x40>)
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	4b04      	ldr	r3, [pc, #16]	; (8001988 <SysTick_Config+0x40>)
 8001978:	2207      	movs	r2, #7
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	e000e010 	.word	0xe000e010

0800198c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff29 	bl	80017ec <__NVIC_SetPriorityGrouping>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b086      	sub	sp, #24
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	4603      	mov	r3, r0
 80019aa:	60b9      	str	r1, [r7, #8]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b4:	f7ff ff3e 	bl	8001834 <__NVIC_GetPriorityGrouping>
 80019b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	68b9      	ldr	r1, [r7, #8]
 80019be:	6978      	ldr	r0, [r7, #20]
 80019c0:	f7ff ff8e 	bl	80018e0 <NVIC_EncodePriority>
 80019c4:	4602      	mov	r2, r0
 80019c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ca:	4611      	mov	r1, r2
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff ff5d 	bl	800188c <__NVIC_SetPriority>
}
 80019d2:	bf00      	nop
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}

080019da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b082      	sub	sp, #8
 80019de:	af00      	add	r7, sp, #0
 80019e0:	4603      	mov	r3, r0
 80019e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff31 	bl	8001850 <__NVIC_EnableIRQ>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa2 	bl	8001948 <SysTick_Config>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3708      	adds	r7, #8
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a1c:	f7ff feb6 	bl	800178c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e099      	b.n	8001b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2202      	movs	r2, #2
 8001a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a4c:	e00f      	b.n	8001a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a4e:	f7ff fe9d 	bl	800178c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b05      	cmp	r3, #5
 8001a5a:	d908      	bls.n	8001a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2220      	movs	r2, #32
 8001a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2203      	movs	r2, #3
 8001a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e078      	b.n	8001b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e8      	bne.n	8001a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <HAL_DMA_Init+0x158>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2b04      	cmp	r3, #4
 8001ac6:	d107      	bne.n	8001ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	697a      	ldr	r2, [r7, #20]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f023 0307 	bic.w	r3, r3, #7
 8001aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	697a      	ldr	r2, [r7, #20]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d117      	bne.n	8001b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d00e      	beq.n	8001b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 fa7b 	bl	8002010 <DMA_CheckFifoParam>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d008      	beq.n	8001b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e016      	b.n	8001b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 fa32 	bl	8001fa4 <DMA_CalcBaseAndBitshift>
 8001b40:	4603      	mov	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3718      	adds	r7, #24
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	f010803f 	.word	0xf010803f

08001b6c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b78:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b7a:	f7ff fe07 	bl	800178c <HAL_GetTick>
 8001b7e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d008      	beq.n	8001b9e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e052      	b.n	8001c44 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0216 	bic.w	r2, r2, #22
 8001bac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bbc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <HAL_DMA_Abort+0x62>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d007      	beq.n	8001bde <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0208 	bic.w	r2, r2, #8
 8001bdc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bee:	e013      	b.n	8001c18 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bf0:	f7ff fdcc 	bl	800178c <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b05      	cmp	r3, #5
 8001bfc:	d90c      	bls.n	8001c18 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2220      	movs	r2, #32
 8001c02:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2203      	movs	r2, #3
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e015      	b.n	8001c44 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1e4      	bne.n	8001bf0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2a:	223f      	movs	r2, #63	; 0x3f
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d004      	beq.n	8001c6a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2280      	movs	r2, #128	; 0x80
 8001c64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00c      	b.n	8001c84 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c9c:	4b8e      	ldr	r3, [pc, #568]	; (8001ed8 <HAL_DMA_IRQHandler+0x248>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a8e      	ldr	r2, [pc, #568]	; (8001edc <HAL_DMA_IRQHandler+0x24c>)
 8001ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca6:	0a9b      	lsrs	r3, r3, #10
 8001ca8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cba:	2208      	movs	r2, #8
 8001cbc:	409a      	lsls	r2, r3
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d01a      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce8:	2208      	movs	r2, #8
 8001cea:	409a      	lsls	r2, r3
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	f043 0201 	orr.w	r2, r3, #1
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d00:	2201      	movs	r2, #1
 8001d02:	409a      	lsls	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4013      	ands	r3, r2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d012      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d00b      	beq.n	8001d32 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1e:	2201      	movs	r2, #1
 8001d20:	409a      	lsls	r2, r3
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	f043 0202 	orr.w	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d36:	2204      	movs	r2, #4
 8001d38:	409a      	lsls	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d012      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00b      	beq.n	8001d68 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2204      	movs	r2, #4
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0204 	orr.w	r2, r3, #4
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d043      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d03c      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2210      	movs	r2, #16
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d018      	beq.n	8001dd2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d108      	bne.n	8001dc0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d024      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	4798      	blx	r3
 8001dbe:	e01f      	b.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01b      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	4798      	blx	r3
 8001dd0:	e016      	b.n	8001e00 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d107      	bne.n	8001df0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f022 0208 	bic.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2220      	movs	r2, #32
 8001e06:	409a      	lsls	r2, r3
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	f000 808f 	beq.w	8001f30 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0310 	and.w	r3, r3, #16
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f000 8087 	beq.w	8001f30 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e26:	2220      	movs	r2, #32
 8001e28:	409a      	lsls	r2, r3
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d136      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0216 	bic.w	r2, r2, #22
 8001e48:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e58:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <HAL_DMA_IRQHandler+0x1da>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d007      	beq.n	8001e7a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0208 	bic.w	r2, r2, #8
 8001e78:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7e:	223f      	movs	r2, #63	; 0x3f
 8001e80:	409a      	lsls	r2, r3
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d07e      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
        }
        return;
 8001ea6:	e079      	b.n	8001f9c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d01d      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d10d      	bne.n	8001ee0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d031      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	4798      	blx	r3
 8001ed4:	e02c      	b.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
 8001ed6:	bf00      	nop
 8001ed8:	20000000 	.word	0x20000000
 8001edc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d023      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	4798      	blx	r3
 8001ef0:	e01e      	b.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d10f      	bne.n	8001f20 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0210 	bic.w	r2, r2, #16
 8001f0e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d032      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d022      	beq.n	8001f8a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2205      	movs	r2, #5
 8001f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f022 0201 	bic.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d307      	bcc.n	8001f78 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f2      	bne.n	8001f5c <HAL_DMA_IRQHandler+0x2cc>
 8001f76:	e000      	b.n	8001f7a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f78:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d005      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	4798      	blx	r3
 8001f9a:	e000      	b.n	8001f9e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f9c:	bf00      	nop
    }
  }
}
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	3b10      	subs	r3, #16
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <DMA_CalcBaseAndBitshift+0x64>)
 8001fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fbe:	4a13      	ldr	r2, [pc, #76]	; (800200c <DMA_CalcBaseAndBitshift+0x68>)
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d909      	bls.n	8001fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fda:	f023 0303 	bic.w	r3, r3, #3
 8001fde:	1d1a      	adds	r2, r3, #4
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	659a      	str	r2, [r3, #88]	; 0x58
 8001fe4:	e007      	b.n	8001ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001fee:	f023 0303 	bic.w	r3, r3, #3
 8001ff2:	687a      	ldr	r2, [r7, #4]
 8001ff4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	aaaaaaab 	.word	0xaaaaaaab
 800200c:	080144e4 	.word	0x080144e4

08002010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002018:	2300      	movs	r3, #0
 800201a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d11f      	bne.n	800206a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d856      	bhi.n	80020de <DMA_CheckFifoParam+0xce>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <DMA_CheckFifoParam+0x28>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	0800205b 	.word	0x0800205b
 8002040:	08002049 	.word	0x08002049
 8002044:	080020df 	.word	0x080020df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d046      	beq.n	80020e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002058:	e043      	b.n	80020e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002062:	d140      	bne.n	80020e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002068:	e03d      	b.n	80020e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002072:	d121      	bne.n	80020b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b03      	cmp	r3, #3
 8002078:	d837      	bhi.n	80020ea <DMA_CheckFifoParam+0xda>
 800207a:	a201      	add	r2, pc, #4	; (adr r2, 8002080 <DMA_CheckFifoParam+0x70>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	08002091 	.word	0x08002091
 8002084:	08002097 	.word	0x08002097
 8002088:	08002091 	.word	0x08002091
 800208c:	080020a9 	.word	0x080020a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
      break;
 8002094:	e030      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d025      	beq.n	80020ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020a6:	e022      	b.n	80020ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020b0:	d11f      	bne.n	80020f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020b6:	e01c      	b.n	80020f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d903      	bls.n	80020c6 <DMA_CheckFifoParam+0xb6>
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	2b03      	cmp	r3, #3
 80020c2:	d003      	beq.n	80020cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020c4:	e018      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      break;
 80020ca:	e015      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00e      	beq.n	80020f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
      break;
 80020dc:	e00b      	b.n	80020f6 <DMA_CheckFifoParam+0xe6>
      break;
 80020de:	bf00      	nop
 80020e0:	e00a      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e2:	bf00      	nop
 80020e4:	e008      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020e6:	bf00      	nop
 80020e8:	e006      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ea:	bf00      	nop
 80020ec:	e004      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020ee:	bf00      	nop
 80020f0:	e002      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80020f2:	bf00      	nop
 80020f4:	e000      	b.n	80020f8 <DMA_CheckFifoParam+0xe8>
      break;
 80020f6:	bf00      	nop
    }
  } 
  
  return status; 
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop

08002108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002108:	b480      	push	{r7}
 800210a:	b089      	sub	sp, #36	; 0x24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211e:	2300      	movs	r3, #0
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e159      	b.n	80023d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002124:	2201      	movs	r2, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	4013      	ands	r3, r2
 8002136:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	429a      	cmp	r2, r3
 800213e:	f040 8148 	bne.w	80023d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	2b01      	cmp	r3, #1
 800214c:	d005      	beq.n	800215a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002156:	2b02      	cmp	r3, #2
 8002158:	d130      	bne.n	80021bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	2203      	movs	r2, #3
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	68da      	ldr	r2, [r3, #12]
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002190:	2201      	movs	r2, #1
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	f003 0201 	and.w	r2, r3, #1
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 0303 	and.w	r3, r3, #3
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d017      	beq.n	80021f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689a      	ldr	r2, [r3, #8]
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	005b      	lsls	r3, r3, #1
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 0303 	and.w	r3, r3, #3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d123      	bne.n	800224c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	08da      	lsrs	r2, r3, #3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3208      	adds	r2, #8
 800220c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002210:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	220f      	movs	r2, #15
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	691a      	ldr	r2, [r3, #16]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	08da      	lsrs	r2, r3, #3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3208      	adds	r2, #8
 8002246:	69b9      	ldr	r1, [r7, #24]
 8002248:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	2203      	movs	r2, #3
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002288:	2b00      	cmp	r3, #0
 800228a:	f000 80a2 	beq.w	80023d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_GPIO_Init+0x2e8>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	4a56      	ldr	r2, [pc, #344]	; (80023f0 <HAL_GPIO_Init+0x2e8>)
 8002298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229c:	6453      	str	r3, [r2, #68]	; 0x44
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_GPIO_Init+0x2e8>)
 80022a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022aa:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_GPIO_Init+0x2ec>)
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3302      	adds	r3, #2
 80022b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	220f      	movs	r2, #15
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	43db      	mvns	r3, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4013      	ands	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a49      	ldr	r2, [pc, #292]	; (80023f8 <HAL_GPIO_Init+0x2f0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d019      	beq.n	800230a <HAL_GPIO_Init+0x202>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a48      	ldr	r2, [pc, #288]	; (80023fc <HAL_GPIO_Init+0x2f4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0x1fe>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a47      	ldr	r2, [pc, #284]	; (8002400 <HAL_GPIO_Init+0x2f8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d00d      	beq.n	8002302 <HAL_GPIO_Init+0x1fa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a46      	ldr	r2, [pc, #280]	; (8002404 <HAL_GPIO_Init+0x2fc>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d007      	beq.n	80022fe <HAL_GPIO_Init+0x1f6>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a45      	ldr	r2, [pc, #276]	; (8002408 <HAL_GPIO_Init+0x300>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d101      	bne.n	80022fa <HAL_GPIO_Init+0x1f2>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e008      	b.n	800230c <HAL_GPIO_Init+0x204>
 80022fa:	2307      	movs	r3, #7
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x204>
 80022fe:	2303      	movs	r3, #3
 8002300:	e004      	b.n	800230c <HAL_GPIO_Init+0x204>
 8002302:	2302      	movs	r3, #2
 8002304:	e002      	b.n	800230c <HAL_GPIO_Init+0x204>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x204>
 800230a:	2300      	movs	r3, #0
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f002 0203 	and.w	r2, r2, #3
 8002312:	0092      	lsls	r2, r2, #2
 8002314:	4093      	lsls	r3, r2
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	4313      	orrs	r3, r2
 800231a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800231c:	4935      	ldr	r1, [pc, #212]	; (80023f4 <HAL_GPIO_Init+0x2ec>)
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	089b      	lsrs	r3, r3, #2
 8002322:	3302      	adds	r3, #2
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800232a:	4b38      	ldr	r3, [pc, #224]	; (800240c <HAL_GPIO_Init+0x304>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	43db      	mvns	r3, r3
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4013      	ands	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234e:	4a2f      	ldr	r2, [pc, #188]	; (800240c <HAL_GPIO_Init+0x304>)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002354:	4b2d      	ldr	r3, [pc, #180]	; (800240c <HAL_GPIO_Init+0x304>)
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002378:	4a24      	ldr	r2, [pc, #144]	; (800240c <HAL_GPIO_Init+0x304>)
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237e:	4b23      	ldr	r3, [pc, #140]	; (800240c <HAL_GPIO_Init+0x304>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	4313      	orrs	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a2:	4a1a      	ldr	r2, [pc, #104]	; (800240c <HAL_GPIO_Init+0x304>)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <HAL_GPIO_Init+0x304>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	43db      	mvns	r3, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4013      	ands	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023c4:	69ba      	ldr	r2, [r7, #24]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_GPIO_Init+0x304>)
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	2b0f      	cmp	r3, #15
 80023dc:	f67f aea2 	bls.w	8002124 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40013800 	.word	0x40013800
 80023f8:	40020000 	.word	0x40020000
 80023fc:	40020400 	.word	0x40020400
 8002400:	40020800 	.word	0x40020800
 8002404:	40020c00 	.word	0x40020c00
 8002408:	40021000 	.word	0x40021000
 800240c:	40013c00 	.word	0x40013c00

08002410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	460b      	mov	r3, r1
 800241a:	807b      	strh	r3, [r7, #2]
 800241c:	4613      	mov	r3, r2
 800241e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002420:	787b      	ldrb	r3, [r7, #1]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002426:	887a      	ldrh	r2, [r7, #2]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800242c:	e003      	b.n	8002436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800242e:	887b      	ldrh	r3, [r7, #2]
 8002430:	041a      	lsls	r2, r3, #16
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	619a      	str	r2, [r3, #24]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
	...

08002444 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e12b      	b.n	80026ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d106      	bne.n	8002470 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7fe fdaa 	bl	8000fc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2224      	movs	r2, #36	; 0x24
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f022 0201 	bic.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024a8:	f002 fe60 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80024ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4a81      	ldr	r2, [pc, #516]	; (80026b8 <HAL_I2C_Init+0x274>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d807      	bhi.n	80024c8 <HAL_I2C_Init+0x84>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4a80      	ldr	r2, [pc, #512]	; (80026bc <HAL_I2C_Init+0x278>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	bf94      	ite	ls
 80024c0:	2301      	movls	r3, #1
 80024c2:	2300      	movhi	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e006      	b.n	80024d6 <HAL_I2C_Init+0x92>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	4a7d      	ldr	r2, [pc, #500]	; (80026c0 <HAL_I2C_Init+0x27c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	bf94      	ite	ls
 80024d0:	2301      	movls	r3, #1
 80024d2:	2300      	movhi	r3, #0
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0e7      	b.n	80026ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4a78      	ldr	r2, [pc, #480]	; (80026c4 <HAL_I2C_Init+0x280>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	0c9b      	lsrs	r3, r3, #18
 80024e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	430a      	orrs	r2, r1
 80024fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a6a      	ldr	r2, [pc, #424]	; (80026b8 <HAL_I2C_Init+0x274>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d802      	bhi.n	8002518 <HAL_I2C_Init+0xd4>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	3301      	adds	r3, #1
 8002516:	e009      	b.n	800252c <HAL_I2C_Init+0xe8>
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	4a69      	ldr	r2, [pc, #420]	; (80026c8 <HAL_I2C_Init+0x284>)
 8002524:	fba2 2303 	umull	r2, r3, r2, r3
 8002528:	099b      	lsrs	r3, r3, #6
 800252a:	3301      	adds	r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	430b      	orrs	r3, r1
 8002532:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800253e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	495c      	ldr	r1, [pc, #368]	; (80026b8 <HAL_I2C_Init+0x274>)
 8002548:	428b      	cmp	r3, r1
 800254a:	d819      	bhi.n	8002580 <HAL_I2C_Init+0x13c>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1e59      	subs	r1, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	005b      	lsls	r3, r3, #1
 8002556:	fbb1 f3f3 	udiv	r3, r1, r3
 800255a:	1c59      	adds	r1, r3, #1
 800255c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002560:	400b      	ands	r3, r1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00a      	beq.n	800257c <HAL_I2C_Init+0x138>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	1e59      	subs	r1, r3, #1
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	fbb1 f3f3 	udiv	r3, r1, r3
 8002574:	3301      	adds	r3, #1
 8002576:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800257a:	e051      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 800257c:	2304      	movs	r3, #4
 800257e:	e04f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d111      	bne.n	80025ac <HAL_I2C_Init+0x168>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	1e58      	subs	r0, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6859      	ldr	r1, [r3, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	440b      	add	r3, r1
 8002596:	fbb0 f3f3 	udiv	r3, r0, r3
 800259a:	3301      	adds	r3, #1
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	bf0c      	ite	eq
 80025a4:	2301      	moveq	r3, #1
 80025a6:	2300      	movne	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	e012      	b.n	80025d2 <HAL_I2C_Init+0x18e>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	0099      	lsls	r1, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	fbb0 f3f3 	udiv	r3, r0, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	bf0c      	ite	eq
 80025cc:	2301      	moveq	r3, #1
 80025ce:	2300      	movne	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_Init+0x196>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e022      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10e      	bne.n	8002600 <HAL_I2C_Init+0x1bc>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1e58      	subs	r0, r3, #1
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6859      	ldr	r1, [r3, #4]
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f4:	3301      	adds	r3, #1
 80025f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025fe:	e00f      	b.n	8002620 <HAL_I2C_Init+0x1dc>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1e58      	subs	r0, r3, #1
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6859      	ldr	r1, [r3, #4]
 8002608:	460b      	mov	r3, r1
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	0099      	lsls	r1, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	fbb0 f3f3 	udiv	r3, r0, r3
 8002616:	3301      	adds	r3, #1
 8002618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	6809      	ldr	r1, [r1, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69da      	ldr	r2, [r3, #28]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800264e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6911      	ldr	r1, [r2, #16]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68d2      	ldr	r2, [r2, #12]
 800265a:	4311      	orrs	r1, r2
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	430b      	orrs	r3, r1
 8002662:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2220      	movs	r2, #32
 800269a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	000186a0 	.word	0x000186a0
 80026bc:	001e847f 	.word	0x001e847f
 80026c0:	003d08ff 	.word	0x003d08ff
 80026c4:	431bde83 	.word	0x431bde83
 80026c8:	10624dd3 	.word	0x10624dd3

080026cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af02      	add	r7, sp, #8
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	607a      	str	r2, [r7, #4]
 80026d6:	461a      	mov	r2, r3
 80026d8:	460b      	mov	r3, r1
 80026da:	817b      	strh	r3, [r7, #10]
 80026dc:	4613      	mov	r3, r2
 80026de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026e0:	f7ff f854 	bl	800178c <HAL_GetTick>
 80026e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	f040 80e0 	bne.w	80028b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2319      	movs	r3, #25
 80026fa:	2201      	movs	r2, #1
 80026fc:	4970      	ldr	r1, [pc, #448]	; (80028c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f000 fc58 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800270a:	2302      	movs	r3, #2
 800270c:	e0d3      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002714:	2b01      	cmp	r3, #1
 8002716:	d101      	bne.n	800271c <HAL_I2C_Master_Transmit+0x50>
 8002718:	2302      	movs	r3, #2
 800271a:	e0cc      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b01      	cmp	r3, #1
 8002730:	d007      	beq.n	8002742 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f042 0201 	orr.w	r2, r2, #1
 8002740:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002750:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2221      	movs	r2, #33	; 0x21
 8002756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2210      	movs	r2, #16
 800275e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	893a      	ldrh	r2, [r7, #8]
 8002772:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	4a50      	ldr	r2, [pc, #320]	; (80028c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002784:	8979      	ldrh	r1, [r7, #10]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	6a3a      	ldr	r2, [r7, #32]
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 fac2 	bl	8002d14 <I2C_MasterRequestWrite>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e08d      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	613b      	str	r3, [r7, #16]
 80027ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027b0:	e066      	b.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	6a39      	ldr	r1, [r7, #32]
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 fcd2 	bl	8003160 <I2C_WaitOnTXEFlagUntilTimeout>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d107      	bne.n	80027da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e06b      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	781a      	ldrb	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	3b01      	subs	r3, #1
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002806:	3b01      	subs	r3, #1
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b04      	cmp	r3, #4
 800281a:	d11b      	bne.n	8002854 <HAL_I2C_Master_Transmit+0x188>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002820:	2b00      	cmp	r3, #0
 8002822:	d017      	beq.n	8002854 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	781a      	ldrb	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	1c5a      	adds	r2, r3, #1
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	6a39      	ldr	r1, [r7, #32]
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 fcc2 	bl	80031e2 <I2C_WaitOnBTFFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00d      	beq.n	8002880 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	2b04      	cmp	r3, #4
 800286a:	d107      	bne.n	800287c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800287a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e01a      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d194      	bne.n	80027b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	00100002 	.word	0x00100002
 80028c4:	ffff0000 	.word	0xffff0000

080028c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	; 0x30
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	607a      	str	r2, [r7, #4]
 80028d2:	461a      	mov	r2, r3
 80028d4:	460b      	mov	r3, r1
 80028d6:	817b      	strh	r3, [r7, #10]
 80028d8:	4613      	mov	r3, r2
 80028da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7fe ff56 	bl	800178c <HAL_GetTick>
 80028e0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 820b 	bne.w	8002d06 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	2319      	movs	r3, #25
 80028f6:	2201      	movs	r2, #1
 80028f8:	497c      	ldr	r1, [pc, #496]	; (8002aec <HAL_I2C_Master_Receive+0x224>)
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 fb5a 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002906:	2302      	movs	r3, #2
 8002908:	e1fe      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <HAL_I2C_Master_Receive+0x50>
 8002914:	2302      	movs	r3, #2
 8002916:	e1f7      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d007      	beq.n	800293e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2222      	movs	r2, #34	; 0x22
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2210      	movs	r2, #16
 800295a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	893a      	ldrh	r2, [r7, #8]
 800296e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002974:	b29a      	uxth	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	4a5c      	ldr	r2, [pc, #368]	; (8002af0 <HAL_I2C_Master_Receive+0x228>)
 800297e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002980:	8979      	ldrh	r1, [r7, #10]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 fa46 	bl	8002e18 <I2C_MasterRequestRead>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e1b8      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800299a:	2b00      	cmp	r3, #0
 800299c:	d113      	bne.n	80029c6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	623b      	str	r3, [r7, #32]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e18c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d11b      	bne.n	8002a06 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	61fb      	str	r3, [r7, #28]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	61fb      	str	r3, [r7, #28]
 80029f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e16c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d11b      	bne.n	8002a46 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	61bb      	str	r3, [r7, #24]
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	e14c      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a54:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	617b      	str	r3, [r7, #20]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a6c:	e138      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	f200 80f1 	bhi.w	8002c5a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d123      	bne.n	8002ac8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fbed 	bl	8003264 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e139      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b29a      	uxth	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ac6:	e10b      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d14e      	bne.n	8002b6e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	4906      	ldr	r1, [pc, #24]	; (8002af4 <HAL_I2C_Master_Receive+0x22c>)
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fa6a 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d008      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e10e      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
 8002aea:	bf00      	nop
 8002aec:	00100002 	.word	0x00100002
 8002af0:	ffff0000 	.word	0xffff0000
 8002af4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	3b01      	subs	r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	3b01      	subs	r3, #1
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b6c:	e0b8      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2200      	movs	r2, #0
 8002b76:	4966      	ldr	r1, [pc, #408]	; (8002d10 <HAL_I2C_Master_Receive+0x448>)
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fa1b 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0bf      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691a      	ldr	r2, [r3, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002baa:	1c5a      	adds	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	b29a      	uxth	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	494f      	ldr	r1, [pc, #316]	; (8002d10 <HAL_I2C_Master_Receive+0x448>)
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f9ed 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e091      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691a      	ldr	r2, [r3, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b29a      	uxth	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e042      	b.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f000 fb00 	bl	8003264 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e04c      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	1c5a      	adds	r2, r3, #1
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29a      	uxth	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d118      	bne.n	8002ce0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691a      	ldr	r2, [r3, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	3b01      	subs	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f47f aec2 	bne.w	8002a6e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2220      	movs	r2, #32
 8002cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	00010004 	.word	0x00010004

08002d14 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	460b      	mov	r3, r1
 8002d22:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d006      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d003      	beq.n	8002d3e <I2C_MasterRequestWrite+0x2a>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d3c:	d108      	bne.n	8002d50 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e00b      	b.n	8002d68 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d107      	bne.n	8002d68 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f91d 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d8e:	d103      	bne.n	8002d98 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e035      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002da4:	d108      	bne.n	8002db8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002da6:	897b      	ldrh	r3, [r7, #10]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002db4:	611a      	str	r2, [r3, #16]
 8002db6:	e01b      	b.n	8002df0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002db8:	897b      	ldrh	r3, [r7, #10]
 8002dba:	11db      	asrs	r3, r3, #7
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	f003 0306 	and.w	r3, r3, #6
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f063 030f 	orn	r3, r3, #15
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <I2C_MasterRequestWrite+0xfc>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f943 	bl	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e010      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2da      	uxtb	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4907      	ldr	r1, [pc, #28]	; (8002e14 <I2C_MasterRequestWrite+0x100>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f933 	bl	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	00010008 	.word	0x00010008
 8002e14:	00010002 	.word	0x00010002

08002e18 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af02      	add	r7, sp, #8
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	460b      	mov	r3, r1
 8002e26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e3c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d006      	beq.n	8002e52 <I2C_MasterRequestRead+0x3a>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d003      	beq.n	8002e52 <I2C_MasterRequestRead+0x3a>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e50:	d108      	bne.n	8002e64 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	e00b      	b.n	8002e7c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	2b11      	cmp	r3, #17
 8002e6a:	d107      	bne.n	8002e7c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f893 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d103      	bne.n	8002eac <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e079      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eb8:	d108      	bne.n	8002ecc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eba:	897b      	ldrh	r3, [r7, #10]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f043 0301 	orr.w	r3, r3, #1
 8002ec2:	b2da      	uxtb	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	611a      	str	r2, [r3, #16]
 8002eca:	e05f      	b.n	8002f8c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ecc:	897b      	ldrh	r3, [r7, #10]
 8002ece:	11db      	asrs	r3, r3, #7
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f003 0306 	and.w	r3, r3, #6
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f063 030f 	orn	r3, r3, #15
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4930      	ldr	r1, [pc, #192]	; (8002fac <I2C_MasterRequestRead+0x194>)
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f8b9 	bl	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e054      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002efa:	897b      	ldrh	r3, [r7, #10]
 8002efc:	b2da      	uxtb	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	4929      	ldr	r1, [pc, #164]	; (8002fb0 <I2C_MasterRequestRead+0x198>)
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f000 f8a9 	bl	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e044      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	613b      	str	r3, [r7, #16]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f831 	bl	8002fb4 <I2C_WaitOnFlagUntilTimeout>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00d      	beq.n	8002f74 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f66:	d103      	bne.n	8002f70 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f6e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e017      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f74:	897b      	ldrh	r3, [r7, #10]
 8002f76:	11db      	asrs	r3, r3, #7
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	f003 0306 	and.w	r3, r3, #6
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f063 030e 	orn	r3, r3, #14
 8002f84:	b2da      	uxtb	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4907      	ldr	r1, [pc, #28]	; (8002fb0 <I2C_MasterRequestRead+0x198>)
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f865 	bl	8003062 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	00010008 	.word	0x00010008
 8002fb0:	00010002 	.word	0x00010002

08002fb4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	60f8      	str	r0, [r7, #12]
 8002fbc:	60b9      	str	r1, [r7, #8]
 8002fbe:	603b      	str	r3, [r7, #0]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	e025      	b.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fcc:	d021      	beq.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fce:	f7fe fbdd 	bl	800178c <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	683a      	ldr	r2, [r7, #0]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d302      	bcc.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d116      	bne.n	8003012 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f043 0220 	orr.w	r2, r3, #32
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e023      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	0c1b      	lsrs	r3, r3, #16
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10d      	bne.n	8003038 <I2C_WaitOnFlagUntilTimeout+0x84>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	43da      	mvns	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4013      	ands	r3, r2
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	bf0c      	ite	eq
 800302e:	2301      	moveq	r3, #1
 8003030:	2300      	movne	r3, #0
 8003032:	b2db      	uxtb	r3, r3
 8003034:	461a      	mov	r2, r3
 8003036:	e00c      	b.n	8003052 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	43da      	mvns	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4013      	ands	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf0c      	ite	eq
 800304a:	2301      	moveq	r3, #1
 800304c:	2300      	movne	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	461a      	mov	r2, r3
 8003052:	79fb      	ldrb	r3, [r7, #7]
 8003054:	429a      	cmp	r2, r3
 8003056:	d0b6      	beq.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003070:	e051      	b.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800307c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003080:	d123      	bne.n	80030ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003090:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800309a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f043 0204 	orr.w	r2, r3, #4
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e046      	b.n	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d0:	d021      	beq.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030d2:	f7fe fb5b 	bl	800178c <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	d302      	bcc.n	80030e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d116      	bne.n	8003116 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f043 0220 	orr.w	r2, r3, #32
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e020      	b.n	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	0c1b      	lsrs	r3, r3, #16
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10c      	bne.n	800313a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf14      	ite	ne
 8003132:	2301      	movne	r3, #1
 8003134:	2300      	moveq	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	e00b      	b.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d18d      	bne.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316c:	e02d      	b.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f000 f8ce 	bl	8003310 <I2C_IsAcknowledgeFailed>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e02d      	b.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003184:	d021      	beq.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003186:	f7fe fb01 	bl	800178c <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	429a      	cmp	r2, r3
 8003194:	d302      	bcc.n	800319c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d116      	bne.n	80031ca <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e007      	b.n	80031da <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d4:	2b80      	cmp	r3, #128	; 0x80
 80031d6:	d1ca      	bne.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b084      	sub	sp, #16
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031ee:	e02d      	b.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f88d 	bl	8003310 <I2C_IsAcknowledgeFailed>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e02d      	b.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003206:	d021      	beq.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003208:	f7fe fac0 	bl	800178c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	429a      	cmp	r2, r3
 8003216:	d302      	bcc.n	800321e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d116      	bne.n	800324c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e007      	b.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	695b      	ldr	r3, [r3, #20]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b04      	cmp	r3, #4
 8003258:	d1ca      	bne.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003270:	e042      	b.n	80032f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	f003 0310 	and.w	r3, r3, #16
 800327c:	2b10      	cmp	r3, #16
 800327e:	d119      	bne.n	80032b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0210 	mvn.w	r2, #16
 8003288:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2220      	movs	r2, #32
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e029      	b.n	8003308 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032b4:	f7fe fa6a 	bl	800178c <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d302      	bcc.n	80032ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d116      	bne.n	80032f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e4:	f043 0220 	orr.w	r2, r3, #32
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e007      	b.n	8003308 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	2b40      	cmp	r3, #64	; 0x40
 8003304:	d1b5      	bne.n	8003272 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003326:	d11b      	bne.n	8003360 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003330:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334c:	f043 0204 	orr.w	r2, r3, #4
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e000      	b.n	8003362 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e034      	b.n	80033ea <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003388:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f245 5255 	movw	r2, #21845	; 0x5555
 8003392:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6852      	ldr	r2, [r2, #4]
 800339c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6892      	ldr	r2, [r2, #8]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80033a8:	f7fe f9f0 	bl	800178c <HAL_GetTick>
 80033ac:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80033ae:	e00f      	b.n	80033d0 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 80033b0:	f7fe f9ec 	bl	800178c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b31      	cmp	r3, #49	; 0x31
 80033bc:	d908      	bls.n	80033d0 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e00c      	b.n	80033ea <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1e8      	bne.n	80033b0 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80033e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003402:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003414:	b08f      	sub	sp, #60	; 0x3c
 8003416:	af0a      	add	r7, sp, #40	; 0x28
 8003418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e10f      	b.n	8003644 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f010 fac2 	bl	80139c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2203      	movs	r2, #3
 8003448:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003454:	2b00      	cmp	r3, #0
 8003456:	d102      	bne.n	800345e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f004 f965 	bl	8007732 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	603b      	str	r3, [r7, #0]
 800346e:	687e      	ldr	r6, [r7, #4]
 8003470:	466d      	mov	r5, sp
 8003472:	f106 0410 	add.w	r4, r6, #16
 8003476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800347c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800347e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003482:	e885 0003 	stmia.w	r5, {r0, r1}
 8003486:	1d33      	adds	r3, r6, #4
 8003488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800348a:	6838      	ldr	r0, [r7, #0]
 800348c:	f004 f83c 	bl	8007508 <USB_CoreInit>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2202      	movs	r2, #2
 800349a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e0d0      	b.n	8003644 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2100      	movs	r1, #0
 80034a8:	4618      	mov	r0, r3
 80034aa:	f004 f953 	bl	8007754 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
 80034b2:	e04a      	b.n	800354a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034b4:	7bfa      	ldrb	r2, [r7, #15]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	4413      	add	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	333d      	adds	r3, #61	; 0x3d
 80034c4:	2201      	movs	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	333c      	adds	r3, #60	; 0x3c
 80034d8:	7bfa      	ldrb	r2, [r7, #15]
 80034da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	b298      	uxth	r0, r3
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	4613      	mov	r3, r2
 80034e6:	00db      	lsls	r3, r3, #3
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	440b      	add	r3, r1
 80034ee:	3344      	adds	r3, #68	; 0x44
 80034f0:	4602      	mov	r2, r0
 80034f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034f4:	7bfa      	ldrb	r2, [r7, #15]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	3340      	adds	r3, #64	; 0x40
 8003504:	2200      	movs	r2, #0
 8003506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003508:	7bfa      	ldrb	r2, [r7, #15]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3348      	adds	r3, #72	; 0x48
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	334c      	adds	r3, #76	; 0x4c
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3354      	adds	r3, #84	; 0x54
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003544:	7bfb      	ldrb	r3, [r7, #15]
 8003546:	3301      	adds	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
 800354a:	7bfa      	ldrb	r2, [r7, #15]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	429a      	cmp	r2, r3
 8003552:	d3af      	bcc.n	80034b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
 8003558:	e044      	b.n	80035e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800355a:	7bfa      	ldrb	r2, [r7, #15]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003570:	7bfa      	ldrb	r2, [r7, #15]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003586:	7bfa      	ldrb	r2, [r7, #15]
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800359c:	7bfa      	ldrb	r2, [r7, #15]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	4613      	mov	r3, r2
 80035a2:	00db      	lsls	r3, r3, #3
 80035a4:	4413      	add	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	440b      	add	r3, r1
 80035aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035ae:	2200      	movs	r2, #0
 80035b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035b2:	7bfa      	ldrb	r2, [r7, #15]
 80035b4:	6879      	ldr	r1, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	440b      	add	r3, r1
 80035c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035c8:	7bfa      	ldrb	r2, [r7, #15]
 80035ca:	6879      	ldr	r1, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	00db      	lsls	r3, r3, #3
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80035da:	2200      	movs	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	3301      	adds	r3, #1
 80035e2:	73fb      	strb	r3, [r7, #15]
 80035e4:	7bfa      	ldrb	r2, [r7, #15]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d3b5      	bcc.n	800355a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	687e      	ldr	r6, [r7, #4]
 80035f6:	466d      	mov	r5, sp
 80035f8:	f106 0410 	add.w	r4, r6, #16
 80035fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003608:	e885 0003 	stmia.w	r5, {r0, r1}
 800360c:	1d33      	adds	r3, r6, #4
 800360e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003610:	6838      	ldr	r0, [r7, #0]
 8003612:	f004 f8eb 	bl	80077ec <USB_DevInit>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d005      	beq.n	8003628 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e00d      	b.n	8003644 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f005 fa3a 	bl	8008ab6 <USB_DevDisconnect>

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800364c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_PCD_Start+0x1c>
 8003664:	2302      	movs	r3, #2
 8003666:	e020      	b.n	80036aa <HAL_PCD_Start+0x5e>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	2b01      	cmp	r3, #1
 8003676:	d109      	bne.n	800368c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800367c:	2b01      	cmp	r3, #1
 800367e:	d005      	beq.n	800368c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003684:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f004 f83d 	bl	8007710 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f005 f9ea 	bl	8008a74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036b2:	b590      	push	{r4, r7, lr}
 80036b4:	b08d      	sub	sp, #52	; 0x34
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c0:	6a3b      	ldr	r3, [r7, #32]
 80036c2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 faa8 	bl	8008c1e <USB_GetMode>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f040 848a 	bne.w	8003fea <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f005 fa0c 	bl	8008af8 <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 8480 	beq.w	8003fe8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f005 f9f9 	bl	8008af8 <USB_ReadInterrupts>
 8003706:	4603      	mov	r3, r0
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d107      	bne.n	8003720 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	695a      	ldr	r2, [r3, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f002 0202 	and.w	r2, r2, #2
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f005 f9e7 	bl	8008af8 <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d161      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0210 	bic.w	r2, r2, #16
 8003742:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	f003 020f 	and.w	r2, r3, #15
 8003750:	4613      	mov	r3, r2
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	4413      	add	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4413      	add	r3, r2
 8003760:	3304      	adds	r3, #4
 8003762:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	0c5b      	lsrs	r3, r3, #17
 8003768:	f003 030f 	and.w	r3, r3, #15
 800376c:	2b02      	cmp	r3, #2
 800376e:	d124      	bne.n	80037ba <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003776:	4013      	ands	r3, r2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d035      	beq.n	80037e8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	091b      	lsrs	r3, r3, #4
 8003784:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	6a38      	ldr	r0, [r7, #32]
 8003790:	f005 f81e 	bl	80087d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	691a      	ldr	r2, [r3, #16]
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037a0:	441a      	add	r2, r3
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	091b      	lsrs	r3, r3, #4
 80037ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b2:	441a      	add	r2, r3
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	621a      	str	r2, [r3, #32]
 80037b8:	e016      	b.n	80037e8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	0c5b      	lsrs	r3, r3, #17
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	2b06      	cmp	r3, #6
 80037c4:	d110      	bne.n	80037e8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037cc:	2208      	movs	r2, #8
 80037ce:	4619      	mov	r1, r3
 80037d0:	6a38      	ldr	r0, [r7, #32]
 80037d2:	f004 fffd 	bl	80087d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	091b      	lsrs	r3, r3, #4
 80037de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037e2:	441a      	add	r2, r3
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	699a      	ldr	r2, [r3, #24]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0210 	orr.w	r2, r2, #16
 80037f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f005 f97b 	bl	8008af8 <USB_ReadInterrupts>
 8003802:	4603      	mov	r3, r0
 8003804:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003808:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800380c:	f040 80a7 	bne.w	800395e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f005 f980 	bl	8008b1e <USB_ReadDevAllOutEpInterrupt>
 800381e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003820:	e099      	b.n	8003956 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 808e 	beq.w	800394a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	b2d2      	uxtb	r2, r2
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f005 f9a4 	bl	8008b86 <USB_ReadDevOutEPInterrupt>
 800383e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	4413      	add	r3, r2
 8003852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003856:	461a      	mov	r2, r3
 8003858:	2301      	movs	r3, #1
 800385a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800385c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 fec2 	bl	80045e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0308 	and.w	r3, r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387a:	461a      	mov	r2, r3
 800387c:	2308      	movs	r3, #8
 800387e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003880:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 ff98 	bl	80047b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389e:	461a      	mov	r2, r3
 80038a0:	2310      	movs	r3, #16
 80038a2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d030      	beq.n	8003910 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038ae:	6a3b      	ldr	r3, [r7, #32]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d109      	bne.n	80038ce <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038cc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	4413      	add	r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4413      	add	r3, r2
 80038e0:	3304      	adds	r3, #4
 80038e2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	78db      	ldrb	r3, [r3, #3]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2200      	movs	r2, #0
 80038f0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f010 f961 	bl	8013bc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800390a:	461a      	mov	r2, r3
 800390c:	2302      	movs	r3, #2
 800390e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d008      	beq.n	800392c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003926:	461a      	mov	r2, r3
 8003928:	2320      	movs	r3, #32
 800392a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d009      	beq.n	800394a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	461a      	mov	r2, r3
 8003944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003948:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	3301      	adds	r3, #1
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	085b      	lsrs	r3, r3, #1
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	f47f af62 	bne.w	8003822 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f005 f8c8 	bl	8008af8 <USB_ReadInterrupts>
 8003968:	4603      	mov	r3, r0
 800396a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003972:	f040 80db 	bne.w	8003b2c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f005 f8e9 	bl	8008b52 <USB_ReadDevAllInEpInterrupt>
 8003980:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003982:	2300      	movs	r3, #0
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003986:	e0cd      	b.n	8003b24 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80c2 	beq.w	8003b18 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f005 f90f 	bl	8008bc2 <USB_ReadDevInEPInterrupt>
 80039a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d057      	beq.n	8003a60 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	f003 030f 	and.w	r3, r3, #15
 80039b6:	2201      	movs	r2, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	69f9      	ldr	r1, [r7, #28]
 80039cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039d0:	4013      	ands	r3, r2
 80039d2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2301      	movs	r3, #1
 80039e4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d132      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f2:	4613      	mov	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	4413      	add	r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	334c      	adds	r3, #76	; 0x4c
 80039fe:	6819      	ldr	r1, [r3, #0]
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	4413      	add	r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	4403      	add	r3, r0
 8003a0e:	3348      	adds	r3, #72	; 0x48
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4419      	add	r1, r3
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4403      	add	r3, r0
 8003a22:	334c      	adds	r3, #76	; 0x4c
 8003a24:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d113      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x3a2>
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3354      	adds	r3, #84	; 0x54
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d108      	bne.n	8003a54 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2101      	movs	r1, #1
 8003a50:	f005 f916 	bl	8008c80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	4619      	mov	r1, r3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f010 f835 	bl	8013aca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f003 0308 	and.w	r3, r3, #8
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d008      	beq.n	8003a7c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a76:	461a      	mov	r2, r3
 8003a78:	2308      	movs	r3, #8
 8003a7a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d008      	beq.n	8003a98 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a92:	461a      	mov	r2, r3
 8003a94:	2310      	movs	r3, #16
 8003a96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d008      	beq.n	8003ab4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	015a      	lsls	r2, r3, #5
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aae:	461a      	mov	r2, r3
 8003ab0:	2340      	movs	r3, #64	; 0x40
 8003ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d023      	beq.n	8003b06 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003abe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac0:	6a38      	ldr	r0, [r7, #32]
 8003ac2:	f003 fff7 	bl	8007ab4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	4413      	add	r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	3338      	adds	r3, #56	; 0x38
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3304      	adds	r3, #4
 8003ad8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	78db      	ldrb	r3, [r3, #3]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d108      	bne.n	8003af4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f010 f878 	bl	8013be4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b00:	461a      	mov	r2, r3
 8003b02:	2302      	movs	r3, #2
 8003b04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d003      	beq.n	8003b18 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 fcdb 	bl	80044ce <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	085b      	lsrs	r3, r3, #1
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	f47f af2e 	bne.w	8003988 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f004 ffe1 	bl	8008af8 <USB_ReadInterrupts>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b40:	d122      	bne.n	8003b88 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b50:	f023 0301 	bic.w	r3, r3, #1
 8003b54:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d108      	bne.n	8003b72 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fec2 	bl	80048f4 <HAL_PCDEx_LPM_Callback>
 8003b70:	e002      	b.n	8003b78 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f010 f816 	bl	8013ba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	695a      	ldr	r2, [r3, #20]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f004 ffb3 	bl	8008af8 <USB_ReadInterrupts>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9c:	d112      	bne.n	8003bc4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d102      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f00f ffd2 	bl	8013b58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695a      	ldr	r2, [r3, #20]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bc2:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f004 ff95 	bl	8008af8 <USB_ReadInterrupts>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bd8:	f040 80b7 	bne.w	8003d4a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bea:	f023 0301 	bic.w	r3, r3, #1
 8003bee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2110      	movs	r1, #16
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f003 ff5c 	bl	8007ab4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c00:	e046      	b.n	8003c90 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c14:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c34:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	015a      	lsls	r2, r3, #5
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c42:	461a      	mov	r2, r3
 8003c44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c48:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c5a:	0151      	lsls	r1, r2, #5
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	440a      	add	r2, r1
 8003c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003c88:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3b3      	bcc.n	8003c02 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ca8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003cac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d016      	beq.n	8003ce4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f043 030b 	orr.w	r3, r3, #11
 8003cca:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cdc:	f043 030b 	orr.w	r3, r3, #11
 8003ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ce2:	e015      	b.n	8003d10 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cf2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cf6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003cfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	69fa      	ldr	r2, [r7, #28]
 8003d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d0a:	f043 030b 	orr.w	r3, r3, #11
 8003d0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69fa      	ldr	r2, [r7, #28]
 8003d1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d1e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	691b      	ldr	r3, [r3, #16]
 8003d2c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d34:	461a      	mov	r2, r3
 8003d36:	f004 ffa3 	bl	8008c80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695a      	ldr	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003d48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f004 fed2 	bl	8008af8 <USB_ReadInterrupts>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5e:	d124      	bne.n	8003daa <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f004 ff68 	bl	8008c3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f003 ff1d 	bl	8007bae <USB_GetDevSpeed>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681c      	ldr	r4, [r3, #0]
 8003d80:	f001 f9e8 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8003d84:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	461a      	mov	r2, r3
 8003d8e:	4620      	mov	r0, r4
 8003d90:	f003 fc1c 	bl	80075cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f00f fec0 	bl	8013b1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695a      	ldr	r2, [r3, #20]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003da8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fea2 	bl	8008af8 <USB_ReadInterrupts>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d10a      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f00f fe9d 	bl	8013afe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f002 0208 	and.w	r2, r2, #8
 8003dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f004 fe8d 	bl	8008af8 <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de4:	2b80      	cmp	r3, #128	; 0x80
 8003de6:	d122      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
 8003df8:	e014      	b.n	8003e24 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	4613      	mov	r3, r2
 8003e00:	00db      	lsls	r3, r3, #3
 8003e02:	4413      	add	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	4619      	mov	r1, r3
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 fb27 	bl	800446c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	3301      	adds	r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d3e5      	bcc.n	8003dfa <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f004 fe60 	bl	8008af8 <USB_ReadInterrupts>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e42:	d13b      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e44:	2301      	movs	r3, #1
 8003e46:	627b      	str	r3, [r7, #36]	; 0x24
 8003e48:	e02b      	b.n	8003ea2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	4413      	add	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	3340      	adds	r3, #64	; 0x40
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d115      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da12      	bge.n	8003e9c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	333f      	adds	r3, #63	; 0x3f
 8003e86:	2201      	movs	r2, #1
 8003e88:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 fae8 	bl	800446c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9e:	3301      	adds	r3, #1
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3ce      	bcc.n	8003e4a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003eba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 fe19 	bl	8008af8 <USB_ReadInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ecc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed0:	d155      	bne.n	8003f7e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed6:	e045      	b.n	8003f64 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eec:	4613      	mov	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d12e      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f00:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	da2b      	bge.n	8003f5e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f12:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d121      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f1e:	4613      	mov	r3, r2
 8003f20:	00db      	lsls	r3, r3, #3
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	699b      	ldr	r3, [r3, #24]
 8003f34:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d10a      	bne.n	8003f5e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	69fa      	ldr	r2, [r7, #28]
 8003f52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f5a:	6053      	str	r3, [r2, #4]
            break;
 8003f5c:	e007      	b.n	8003f6e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	3301      	adds	r3, #1
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d3b4      	bcc.n	8003ed8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	695a      	ldr	r2, [r3, #20]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f004 fdb8 	bl	8008af8 <USB_ReadInterrupts>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f92:	d10a      	bne.n	8003faa <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f00f fe37 	bl	8013c08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	695a      	ldr	r2, [r3, #20]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fa8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f004 fda2 	bl	8008af8 <USB_ReadInterrupts>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f003 0304 	and.w	r3, r3, #4
 8003fba:	2b04      	cmp	r3, #4
 8003fbc:	d115      	bne.n	8003fea <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f003 0304 	and.w	r3, r3, #4
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f00f fe27 	bl	8013c24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
 8003fe6:	e000      	b.n	8003fea <HAL_PCD_IRQHandler+0x938>
      return;
 8003fe8:	bf00      	nop
    }
  }
}
 8003fea:	3734      	adds	r7, #52	; 0x34
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}

08003ff0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004002:	2b01      	cmp	r3, #1
 8004004:	d101      	bne.n	800400a <HAL_PCD_SetAddress+0x1a>
 8004006:	2302      	movs	r3, #2
 8004008:	e013      	b.n	8004032 <HAL_PCD_SetAddress+0x42>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	78fa      	ldrb	r2, [r7, #3]
 8004020:	4611      	mov	r1, r2
 8004022:	4618      	mov	r0, r3
 8004024:	f004 fd00 	bl	8008a28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004030:	2300      	movs	r3, #0
}
 8004032:	4618      	mov	r0, r3
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	4608      	mov	r0, r1
 8004044:	4611      	mov	r1, r2
 8004046:	461a      	mov	r2, r3
 8004048:	4603      	mov	r3, r0
 800404a:	70fb      	strb	r3, [r7, #3]
 800404c:	460b      	mov	r3, r1
 800404e:	803b      	strh	r3, [r7, #0]
 8004050:	4613      	mov	r3, r2
 8004052:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004054:	2300      	movs	r3, #0
 8004056:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004058:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800405c:	2b00      	cmp	r3, #0
 800405e:	da0f      	bge.n	8004080 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004060:	78fb      	ldrb	r3, [r7, #3]
 8004062:	f003 020f 	and.w	r2, r3, #15
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	3338      	adds	r3, #56	; 0x38
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2201      	movs	r2, #1
 800407c:	705a      	strb	r2, [r3, #1]
 800407e:	e00f      	b.n	80040a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004080:	78fb      	ldrb	r3, [r7, #3]
 8004082:	f003 020f 	and.w	r2, r3, #15
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	4413      	add	r3, r2
 8004096:	3304      	adds	r3, #4
 8004098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	b2da      	uxtb	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ac:	883a      	ldrh	r2, [r7, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	78ba      	ldrb	r2, [r7, #2]
 80040b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	785b      	ldrb	r3, [r3, #1]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d004      	beq.n	80040ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b29a      	uxth	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040ca:	78bb      	ldrb	r3, [r7, #2]
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d102      	bne.n	80040d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d101      	bne.n	80040e4 <HAL_PCD_EP_Open+0xaa>
 80040e0:	2302      	movs	r3, #2
 80040e2:	e00e      	b.n	8004102 <HAL_PCD_EP_Open+0xc8>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68f9      	ldr	r1, [r7, #12]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f003 fd80 	bl	8007bf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004100:	7afb      	ldrb	r3, [r7, #11]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}

0800410a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800410a:	b580      	push	{r7, lr}
 800410c:	b084      	sub	sp, #16
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004116:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800411a:	2b00      	cmp	r3, #0
 800411c:	da0f      	bge.n	800413e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411e:	78fb      	ldrb	r3, [r7, #3]
 8004120:	f003 020f 	and.w	r2, r3, #15
 8004124:	4613      	mov	r3, r2
 8004126:	00db      	lsls	r3, r3, #3
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	3338      	adds	r3, #56	; 0x38
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	4413      	add	r3, r2
 8004132:	3304      	adds	r3, #4
 8004134:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	705a      	strb	r2, [r3, #1]
 800413c:	e00f      	b.n	800415e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413e:	78fb      	ldrb	r3, [r7, #3]
 8004140:	f003 020f 	and.w	r2, r3, #15
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	4413      	add	r3, r2
 8004154:	3304      	adds	r3, #4
 8004156:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800415e:	78fb      	ldrb	r3, [r7, #3]
 8004160:	f003 030f 	and.w	r3, r3, #15
 8004164:	b2da      	uxtb	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004170:	2b01      	cmp	r3, #1
 8004172:	d101      	bne.n	8004178 <HAL_PCD_EP_Close+0x6e>
 8004174:	2302      	movs	r3, #2
 8004176:	e00e      	b.n	8004196 <HAL_PCD_EP_Close+0x8c>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	4618      	mov	r0, r3
 8004188:	f003 fdbe 	bl	8007d08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004194:	2300      	movs	r3, #0
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	460b      	mov	r3, r1
 80041ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	f003 020f 	and.w	r2, r3, #15
 80041b4:	4613      	mov	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2200      	movs	r2, #0
 80041de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e0:	7afb      	ldrb	r3, [r7, #11]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d102      	bne.n	80041fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041fa:	7afb      	ldrb	r3, [r7, #11]
 80041fc:	f003 030f 	and.w	r3, r3, #15
 8004200:	2b00      	cmp	r3, #0
 8004202:	d109      	bne.n	8004218 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	6979      	ldr	r1, [r7, #20]
 8004212:	f004 f89d 	bl	8008350 <USB_EP0StartXfer>
 8004216:	e008      	b.n	800422a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	b2db      	uxtb	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	6979      	ldr	r1, [r7, #20]
 8004226:	f003 fe4b 	bl	8007ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	460b      	mov	r3, r1
 800423e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	f003 020f 	and.w	r2, r3, #15
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004256:	681b      	ldr	r3, [r3, #0]
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	603b      	str	r3, [r7, #0]
 8004270:	460b      	mov	r3, r1
 8004272:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004274:	7afb      	ldrb	r3, [r7, #11]
 8004276:	f003 020f 	and.w	r2, r3, #15
 800427a:	4613      	mov	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	4413      	add	r3, r2
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	3338      	adds	r3, #56	; 0x38
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	3304      	adds	r3, #4
 800428a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2200      	movs	r2, #0
 800429c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	2201      	movs	r2, #1
 80042a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a4:	7afb      	ldrb	r3, [r7, #11]
 80042a6:	f003 030f 	and.w	r3, r3, #15
 80042aa:	b2da      	uxtb	r2, r3
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d102      	bne.n	80042be <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042be:	7afb      	ldrb	r3, [r7, #11]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6818      	ldr	r0, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	461a      	mov	r2, r3
 80042d4:	6979      	ldr	r1, [r7, #20]
 80042d6:	f004 f83b 	bl	8008350 <USB_EP0StartXfer>
 80042da:	e008      	b.n	80042ee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	6979      	ldr	r1, [r7, #20]
 80042ea:	f003 fde9 	bl	8007ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3718      	adds	r7, #24
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004304:	78fb      	ldrb	r3, [r7, #3]
 8004306:	f003 020f 	and.w	r2, r3, #15
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	d901      	bls.n	8004316 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e050      	b.n	80043b8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da0f      	bge.n	800433e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 020f 	and.w	r2, r3, #15
 8004324:	4613      	mov	r3, r2
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	4413      	add	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	3338      	adds	r3, #56	; 0x38
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	3304      	adds	r3, #4
 8004334:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	705a      	strb	r2, [r3, #1]
 800433c:	e00d      	b.n	800435a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800433e:	78fa      	ldrb	r2, [r7, #3]
 8004340:	4613      	mov	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	4413      	add	r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2201      	movs	r2, #1
 800435e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	f003 030f 	and.w	r3, r3, #15
 8004366:	b2da      	uxtb	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_PCD_EP_SetStall+0x82>
 8004376:	2302      	movs	r3, #2
 8004378:	e01e      	b.n	80043b8 <HAL_PCD_EP_SetStall+0xc0>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68f9      	ldr	r1, [r7, #12]
 8004388:	4618      	mov	r0, r3
 800438a:	f004 fa79 	bl	8008880 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10a      	bne.n	80043ae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6818      	ldr	r0, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	b2d9      	uxtb	r1, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80043a8:	461a      	mov	r2, r3
 80043aa:	f004 fc69 	bl	8008c80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	460b      	mov	r3, r1
 80043ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d901      	bls.n	80043de <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e042      	b.n	8004464 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da0f      	bge.n	8004406 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e6:	78fb      	ldrb	r3, [r7, #3]
 80043e8:	f003 020f 	and.w	r2, r3, #15
 80043ec:	4613      	mov	r3, r2
 80043ee:	00db      	lsls	r3, r3, #3
 80043f0:	4413      	add	r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	3338      	adds	r3, #56	; 0x38
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	705a      	strb	r2, [r3, #1]
 8004404:	e00f      	b.n	8004426 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004406:	78fb      	ldrb	r3, [r7, #3]
 8004408:	f003 020f 	and.w	r2, r3, #15
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	3304      	adds	r3, #4
 800441e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	b2da      	uxtb	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800443e:	2b01      	cmp	r3, #1
 8004440:	d101      	bne.n	8004446 <HAL_PCD_EP_ClrStall+0x86>
 8004442:	2302      	movs	r3, #2
 8004444:	e00e      	b.n	8004464 <HAL_PCD_EP_ClrStall+0xa4>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68f9      	ldr	r1, [r7, #12]
 8004454:	4618      	mov	r0, r3
 8004456:	f004 fa81 	bl	800895c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	460b      	mov	r3, r1
 8004476:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447c:	2b00      	cmp	r3, #0
 800447e:	da0c      	bge.n	800449a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004480:	78fb      	ldrb	r3, [r7, #3]
 8004482:	f003 020f 	and.w	r2, r3, #15
 8004486:	4613      	mov	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	3338      	adds	r3, #56	; 0x38
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	4413      	add	r3, r2
 8004494:	3304      	adds	r3, #4
 8004496:	60fb      	str	r3, [r7, #12]
 8004498:	e00c      	b.n	80044b4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 020f 	and.w	r2, r3, #15
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	4413      	add	r3, r2
 80044b0:	3304      	adds	r3, #4
 80044b2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	68f9      	ldr	r1, [r7, #12]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f004 f8a0 	bl	8008600 <USB_EPStopXfer>
 80044c0:	4603      	mov	r3, r0
 80044c2:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044c4:	7afb      	ldrb	r3, [r7, #11]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b08a      	sub	sp, #40	; 0x28
 80044d2:	af02      	add	r7, sp, #8
 80044d4:	6078      	str	r0, [r7, #4]
 80044d6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	4613      	mov	r3, r2
 80044e6:	00db      	lsls	r3, r3, #3
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	3338      	adds	r3, #56	; 0x38
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	4413      	add	r3, r2
 80044f2:	3304      	adds	r3, #4
 80044f4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a1a      	ldr	r2, [r3, #32]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d901      	bls.n	8004506 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06c      	b.n	80045e0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699a      	ldr	r2, [r3, #24]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	429a      	cmp	r2, r3
 800451a:	d902      	bls.n	8004522 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004522:	69fb      	ldr	r3, [r7, #28]
 8004524:	3303      	adds	r3, #3
 8004526:	089b      	lsrs	r3, r3, #2
 8004528:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800452a:	e02b      	b.n	8004584 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	699a      	ldr	r2, [r3, #24]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	69fa      	ldr	r2, [r7, #28]
 800453e:	429a      	cmp	r2, r3
 8004540:	d902      	bls.n	8004548 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	3303      	adds	r3, #3
 800454c:	089b      	lsrs	r3, r3, #2
 800454e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6919      	ldr	r1, [r3, #16]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004560:	b2db      	uxtb	r3, r3
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f004 f8f4 	bl	8008754 <USB_WritePacket>

    ep->xfer_buff  += len;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	691a      	ldr	r2, [r3, #16]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1a      	ldr	r2, [r3, #32]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	b29b      	uxth	r3, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d809      	bhi.n	80045ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1a      	ldr	r2, [r3, #32]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d203      	bcs.n	80045ae <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1be      	bne.n	800452c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d811      	bhi.n	80045de <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2201      	movs	r2, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	6939      	ldr	r1, [r7, #16]
 80045d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045da:	4013      	ands	r3, r2
 80045dc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	333c      	adds	r3, #60	; 0x3c
 8004600:	3304      	adds	r3, #4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d17b      	bne.n	8004716 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4a61      	ldr	r2, [pc, #388]	; (80047b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	f240 80b9 	bls.w	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80b3 	beq.w	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	e0a7      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2320      	movs	r3, #32
 800466e:	6093      	str	r3, [r2, #8]
 8004670:	e098      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8093 	bne.w	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4a4b      	ldr	r2, [pc, #300]	; (80047b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d90f      	bls.n	80046a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	461a      	mov	r2, r3
 800469e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046a2:	6093      	str	r3, [r2, #8]
 80046a4:	e07e      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	69da      	ldr	r2, [r3, #28]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	440b      	add	r3, r1
 80046c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d114      	bne.n	8004708 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046f0:	461a      	mov	r2, r3
 80046f2:	2101      	movs	r1, #1
 80046f4:	f004 fac4 	bl	8008c80 <USB_EP0_OutStart>
 80046f8:	e006      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	691a      	ldr	r2, [r3, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f00f f9c0 	bl	8013a94 <HAL_PCD_DataOutStageCallback>
 8004714:	e046      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4a26      	ldr	r2, [pc, #152]	; (80047b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d124      	bne.n	8004768 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800473a:	6093      	str	r3, [r2, #8]
 800473c:	e032      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	2320      	movs	r3, #32
 8004758:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f00f f997 	bl	8013a94 <HAL_PCD_DataOutStageCallback>
 8004766:	e01d      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d114      	bne.n	8004798 <PCD_EP_OutXfrComplete_int+0x1b0>
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004790:	461a      	mov	r2, r3
 8004792:	2100      	movs	r1, #0
 8004794:	f004 fa74 	bl	8008c80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f00f f978 	bl	8013a94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	4f54300a 	.word	0x4f54300a
 80047b4:	4f54310a 	.word	0x4f54310a

080047b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	333c      	adds	r3, #60	; 0x3c
 80047d0:	3304      	adds	r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d90e      	bls.n	800480c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f00f f92f 	bl	8013a70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <PCD_EP_OutSetupPacket_int+0x88>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d90c      	bls.n	8004834 <PCD_EP_OutSetupPacket_int+0x7c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d108      	bne.n	8004834 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800482c:	461a      	mov	r2, r3
 800482e:	2101      	movs	r1, #1
 8004830:	f004 fa26 	bl	8008c80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	4f54300a 	.word	0x4f54300a

08004844 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
 8004850:	4613      	mov	r3, r2
 8004852:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004862:	883b      	ldrh	r3, [r7, #0]
 8004864:	0419      	lsls	r1, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	430a      	orrs	r2, r1
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
 8004870:	e028      	b.n	80048c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e00d      	b.n	80048a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	3340      	adds	r3, #64	; 0x40
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	3301      	adds	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d3ec      	bcc.n	8004886 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048ac:	883b      	ldrh	r3, [r7, #0]
 80048ae:	0418      	lsls	r0, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4302      	orrs	r2, r0
 80048bc:	3340      	adds	r3, #64	; 0x40
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e267      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d075      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492a:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4b85      	ldr	r3, [pc, #532]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800493e:	2b08      	cmp	r3, #8
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b82      	ldr	r3, [pc, #520]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b7e      	ldr	r3, [pc, #504]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e242      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x74>
 8004972:	4b76      	ldr	r3, [pc, #472]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a75      	ldr	r2, [pc, #468]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x98>
 800498a:	4b70      	ldr	r3, [pc, #448]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a6f      	ldr	r2, [pc, #444]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b6d      	ldr	r3, [pc, #436]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6c      	ldr	r2, [pc, #432]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 80049a4:	4b69      	ldr	r3, [pc, #420]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a68      	ldr	r2, [pc, #416]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b66      	ldr	r3, [pc, #408]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a65      	ldr	r2, [pc, #404]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fc fee2 	bl	800178c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fc fede 	bl	800178c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	; 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e207      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b5b      	ldr	r3, [pc, #364]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xc0>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fc fece 	bl	800178c <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fc feca 	bl	800178c <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	; 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1f3      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b51      	ldr	r3, [pc, #324]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0xe8>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d063      	beq.n	8004aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a22:	4b4a      	ldr	r3, [pc, #296]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2e:	4b47      	ldr	r3, [pc, #284]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b44      	ldr	r3, [pc, #272]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	4b41      	ldr	r3, [pc, #260]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_RCC_OscConfig+0x152>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e1c7      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4937      	ldr	r1, [pc, #220]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a72:	e03a      	b.n	8004aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7c:	4b34      	ldr	r3, [pc, #208]	; (8004b50 <HAL_RCC_OscConfig+0x244>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fc fe83 	bl	800178c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fc fe7f 	bl	800178c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e1a8      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b28      	ldr	r3, [pc, #160]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4925      	ldr	r1, [pc, #148]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
 8004abc:	e015      	b.n	8004aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <HAL_RCC_OscConfig+0x244>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fc fe62 	bl	800178c <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fc fe5e 	bl	800178c <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e187      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d036      	beq.n	8004b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afe:	4b15      	ldr	r3, [pc, #84]	; (8004b54 <HAL_RCC_OscConfig+0x248>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fc fe42 	bl	800178c <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fc fe3e 	bl	800178c <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e167      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x200>
 8004b2a:	e01b      	b.n	8004b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <HAL_RCC_OscConfig+0x248>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b32:	f7fc fe2b 	bl	800178c <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b38:	e00e      	b.n	8004b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fc fe27 	bl	800178c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d907      	bls.n	8004b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e150      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	42470000 	.word	0x42470000
 8004b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	4b88      	ldr	r3, [pc, #544]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ea      	bne.n	8004b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8097 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b76:	4b81      	ldr	r3, [pc, #516]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	4b7d      	ldr	r3, [pc, #500]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	4a7c      	ldr	r2, [pc, #496]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	; 0x40
 8004b92:	4b7a      	ldr	r3, [pc, #488]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba2:	4b77      	ldr	r3, [pc, #476]	; (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d118      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bae:	4b74      	ldr	r3, [pc, #464]	; (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a73      	ldr	r2, [pc, #460]	; (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bba:	f7fc fde7 	bl	800178c <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc2:	f7fc fde3 	bl	800178c <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e10c      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	4b6a      	ldr	r3, [pc, #424]	; (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x2ea>
 8004be8:	4b64      	ldr	r3, [pc, #400]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bec:	4a63      	ldr	r2, [pc, #396]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bf4:	e01c      	b.n	8004c30 <HAL_RCC_OscConfig+0x324>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x30c>
 8004bfe:	4b5f      	ldr	r3, [pc, #380]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c02:	4a5e      	ldr	r2, [pc, #376]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0a:	4b5c      	ldr	r3, [pc, #368]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	4a5b      	ldr	r2, [pc, #364]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6713      	str	r3, [r2, #112]	; 0x70
 8004c16:	e00b      	b.n	8004c30 <HAL_RCC_OscConfig+0x324>
 8004c18:	4b58      	ldr	r3, [pc, #352]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1c:	4a57      	ldr	r2, [pc, #348]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	6713      	str	r3, [r2, #112]	; 0x70
 8004c24:	4b55      	ldr	r3, [pc, #340]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c28:	4a54      	ldr	r2, [pc, #336]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
 8004c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fc fda8 	bl	800178c <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c40:	f7fc fda4 	bl	800178c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e0cb      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	4b49      	ldr	r3, [pc, #292]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0ee      	beq.n	8004c40 <HAL_RCC_OscConfig+0x334>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c64:	f7fc fd92 	bl	800178c <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fc fd8e 	bl	800178c <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e0b5      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c82:	4b3e      	ldr	r3, [pc, #248]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ee      	bne.n	8004c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b39      	ldr	r3, [pc, #228]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c98:	4a38      	ldr	r2, [pc, #224]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80a1 	beq.w	8004dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004caa:	4b34      	ldr	r3, [pc, #208]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d05c      	beq.n	8004d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d141      	bne.n	8004d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCC_OscConfig+0x478>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fc fd62 	bl	800178c <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fc fd5e 	bl	800178c <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e087      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	3b01      	subs	r3, #1
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	061b      	lsls	r3, r3, #24
 8004d0e:	491b      	ldr	r1, [pc, #108]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d14:	4b1b      	ldr	r3, [pc, #108]	; (8004d84 <HAL_RCC_OscConfig+0x478>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fc fd37 	bl	800178c <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fc fd33 	bl	800178c <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e05c      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d34:	4b11      	ldr	r3, [pc, #68]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x416>
 8004d40:	e054      	b.n	8004dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <HAL_RCC_OscConfig+0x478>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fc fd20 	bl	800178c <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fc fd1c 	bl	800178c <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e045      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b06      	ldr	r3, [pc, #24]	; (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x444>
 8004d6e:	e03d      	b.n	8004dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e038      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40007000 	.word	0x40007000
 8004d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d88:	4b1b      	ldr	r3, [pc, #108]	; (8004df8 <HAL_RCC_OscConfig+0x4ec>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d028      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d121      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d11a      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004db8:	4013      	ands	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d111      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800

08004dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0cc      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e10:	4b68      	ldr	r3, [pc, #416]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d90c      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b65      	ldr	r3, [pc, #404]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b63      	ldr	r3, [pc, #396]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0b8      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d020      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e50:	4b59      	ldr	r3, [pc, #356]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4a58      	ldr	r2, [pc, #352]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e68:	4b53      	ldr	r3, [pc, #332]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4a52      	ldr	r2, [pc, #328]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b50      	ldr	r3, [pc, #320]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	494d      	ldr	r1, [pc, #308]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d044      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	4b47      	ldr	r3, [pc, #284]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d119      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	4b3f      	ldr	r3, [pc, #252]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e06f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eca:	4b3b      	ldr	r3, [pc, #236]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e067      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eda:	4b37      	ldr	r3, [pc, #220]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4934      	ldr	r1, [pc, #208]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eec:	f7fc fc4e 	bl	800178c <HAL_GetTick>
 8004ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef4:	f7fc fc4a 	bl	800178c <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e04f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 020c 	and.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d1eb      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d20c      	bcs.n	8004f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b20      	ldr	r3, [pc, #128]	; (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e032      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f50:	4b19      	ldr	r3, [pc, #100]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4916      	ldr	r1, [pc, #88]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	490e      	ldr	r1, [pc, #56]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f82:	f000 f821 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 8004f86:	4602      	mov	r2, r0
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	490a      	ldr	r1, [pc, #40]	; (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	5ccb      	ldrb	r3, [r1, r3]
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	4a09      	ldr	r2, [pc, #36]	; (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f9e:	4b09      	ldr	r3, [pc, #36]	; (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fc fbae 	bl	8001704 <HAL_InitTick>

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023c00 	.word	0x40023c00
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	080144cc 	.word	0x080144cc
 8004fc0:	20000000 	.word	0x20000000
 8004fc4:	20000004 	.word	0x20000004

08004fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b090      	sub	sp, #64	; 0x40
 8004fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd8:	2300      	movs	r3, #0
 8004fda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe0:	4b59      	ldr	r3, [pc, #356]	; (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d00d      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x40>
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	f200 80a1 	bhi.w	8005134 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_RCC_GetSysClockFreq+0x34>
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d003      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ffa:	e09b      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ffc:	4b53      	ldr	r3, [pc, #332]	; (800514c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ffe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005000:	e09b      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005002:	4b53      	ldr	r3, [pc, #332]	; (8005150 <HAL_RCC_GetSysClockFreq+0x188>)
 8005004:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005006:	e098      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005008:	4b4f      	ldr	r3, [pc, #316]	; (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005010:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005012:	4b4d      	ldr	r3, [pc, #308]	; (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d028      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501e:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	2200      	movs	r2, #0
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	627a      	str	r2, [r7, #36]	; 0x24
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005030:	2100      	movs	r1, #0
 8005032:	4b47      	ldr	r3, [pc, #284]	; (8005150 <HAL_RCC_GetSysClockFreq+0x188>)
 8005034:	fb03 f201 	mul.w	r2, r3, r1
 8005038:	2300      	movs	r3, #0
 800503a:	fb00 f303 	mul.w	r3, r0, r3
 800503e:	4413      	add	r3, r2
 8005040:	4a43      	ldr	r2, [pc, #268]	; (8005150 <HAL_RCC_GetSysClockFreq+0x188>)
 8005042:	fba0 1202 	umull	r1, r2, r0, r2
 8005046:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005048:	460a      	mov	r2, r1
 800504a:	62ba      	str	r2, [r7, #40]	; 0x28
 800504c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800504e:	4413      	add	r3, r2
 8005050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005054:	2200      	movs	r2, #0
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800505e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005062:	f7fb f8bd 	bl	80001e0 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4613      	mov	r3, r2
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506e:	e053      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005070:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	099b      	lsrs	r3, r3, #6
 8005076:	2200      	movs	r2, #0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	617a      	str	r2, [r7, #20]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005082:	f04f 0b00 	mov.w	fp, #0
 8005086:	4652      	mov	r2, sl
 8005088:	465b      	mov	r3, fp
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	0159      	lsls	r1, r3, #5
 8005094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005098:	0150      	lsls	r0, r2, #5
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	ebb2 080a 	subs.w	r8, r2, sl
 80050a2:	eb63 090b 	sbc.w	r9, r3, fp
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050ba:	ebb2 0408 	subs.w	r4, r2, r8
 80050be:	eb63 0509 	sbc.w	r5, r3, r9
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	00eb      	lsls	r3, r5, #3
 80050cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d0:	00e2      	lsls	r2, r4, #3
 80050d2:	4614      	mov	r4, r2
 80050d4:	461d      	mov	r5, r3
 80050d6:	eb14 030a 	adds.w	r3, r4, sl
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	eb45 030b 	adc.w	r3, r5, fp
 80050e0:	607b      	str	r3, [r7, #4]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ee:	4629      	mov	r1, r5
 80050f0:	028b      	lsls	r3, r1, #10
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f8:	4621      	mov	r1, r4
 80050fa:	028a      	lsls	r2, r1, #10
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005102:	2200      	movs	r2, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	60fa      	str	r2, [r7, #12]
 8005108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510c:	f7fb f868 	bl	80001e0 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005118:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	3301      	adds	r3, #1
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005128:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800512a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005132:	e002      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetSysClockFreq+0x184>)
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800513a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800513c:	4618      	mov	r0, r3
 800513e:	3740      	adds	r7, #64	; 0x40
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	00f42400 	.word	0x00f42400
 8005150:	017d7840 	.word	0x017d7840

08005154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005158:	4b03      	ldr	r3, [pc, #12]	; (8005168 <HAL_RCC_GetHCLKFreq+0x14>)
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000000 	.word	0x20000000

0800516c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005170:	f7ff fff0 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0a9b      	lsrs	r3, r3, #10
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4903      	ldr	r1, [pc, #12]	; (8005190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	080144dc 	.word	0x080144dc

08005194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005198:	f7ff ffdc 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0b5b      	lsrs	r3, r3, #13
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4903      	ldr	r1, [pc, #12]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	080144dc 	.word	0x080144dc

080051bc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b086      	sub	sp, #24
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0301 	and.w	r3, r3, #1
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d038      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051e4:	4b68      	ldr	r3, [pc, #416]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ea:	f7fc facf 	bl	800178c <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f2:	f7fc facb 	bl	800178c <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e0bd      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005204:	4b61      	ldr	r3, [pc, #388]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1f0      	bne.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	071b      	lsls	r3, r3, #28
 8005222:	495a      	ldr	r1, [pc, #360]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005224:	4313      	orrs	r3, r2
 8005226:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800522a:	4b57      	ldr	r3, [pc, #348]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005230:	f7fc faac 	bl	800178c <HAL_GetTick>
 8005234:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005238:	f7fc faa8 	bl	800178c <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e09a      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800524a:	4b50      	ldr	r3, [pc, #320]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 8083 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]
 8005268:	4b48      	ldr	r3, [pc, #288]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	4a47      	ldr	r2, [pc, #284]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005272:	6413      	str	r3, [r2, #64]	; 0x40
 8005274:	4b45      	ldr	r3, [pc, #276]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005280:	4b43      	ldr	r3, [pc, #268]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a42      	ldr	r2, [pc, #264]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800528a:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800528c:	f7fc fa7e 	bl	800178c <HAL_GetTick>
 8005290:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005292:	e008      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005294:	f7fc fa7a 	bl	800178c <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d901      	bls.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e06c      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80052a6:	4b3a      	ldr	r3, [pc, #232]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052b2:	4b36      	ldr	r3, [pc, #216]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ba:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d02f      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d028      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052d0:	4b2e      	ldr	r3, [pc, #184]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d8:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052da:	4b2e      	ldr	r3, [pc, #184]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052dc:	2201      	movs	r2, #1
 80052de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052e0:	4b2c      	ldr	r3, [pc, #176]	; (8005394 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052e6:	4a29      	ldr	r2, [pc, #164]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052ec:	4b27      	ldr	r3, [pc, #156]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d114      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052f8:	f7fc fa48 	bl	800178c <HAL_GetTick>
 80052fc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fe:	e00a      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005300:	f7fc fa44 	bl	800178c <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	f241 3288 	movw	r2, #5000	; 0x1388
 800530e:	4293      	cmp	r3, r2
 8005310:	d901      	bls.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e034      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005316:	4b1d      	ldr	r3, [pc, #116]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0ee      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800532e:	d10d      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005330:	4b16      	ldr	r3, [pc, #88]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005340:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005344:	4911      	ldr	r1, [pc, #68]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
 800534a:	e005      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800534c:	4b0f      	ldr	r3, [pc, #60]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	4a0e      	ldr	r2, [pc, #56]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005352:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005356:	6093      	str	r3, [r2, #8]
 8005358:	4b0c      	ldr	r3, [pc, #48]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800535a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005364:	4909      	ldr	r1, [pc, #36]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005366:	4313      	orrs	r3, r2
 8005368:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b00      	cmp	r3, #0
 8005374:	d003      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	7d1a      	ldrb	r2, [r3, #20]
 800537a:	4b07      	ldr	r3, [pc, #28]	; (8005398 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800537c:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3718      	adds	r7, #24
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	42470068 	.word	0x42470068
 800538c:	40023800 	.word	0x40023800
 8005390:	40007000 	.word	0x40007000
 8005394:	42470e40 	.word	0x42470e40
 8005398:	424711e0 	.word	0x424711e0

0800539c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e066      	b.n	8005480 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	7f5b      	ldrb	r3, [r3, #29]
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fb fef0 	bl	80011a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2202      	movs	r2, #2
 80053cc:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	22ca      	movs	r2, #202	; 0xca
 80053d4:	625a      	str	r2, [r3, #36]	; 0x24
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2253      	movs	r2, #83	; 0x53
 80053dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f87a 	bl	80054d8 <RTC_EnterInitMode>
 80053e4:	4603      	mov	r3, r0
 80053e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80053e8:	7bfb      	ldrb	r3, [r7, #15]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d12c      	bne.n	8005448 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	6812      	ldr	r2, [r2, #0]
 80053f8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005400:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	431a      	orrs	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	687a      	ldr	r2, [r7, #4]
 8005426:	68d2      	ldr	r2, [r2, #12]
 8005428:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6919      	ldr	r1, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	041a      	lsls	r2, r3, #16
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 f881 	bl	8005546 <RTC_ExitInitMode>
 8005444:	4603      	mov	r3, r0
 8005446:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005448:	7bfb      	ldrb	r3, [r7, #15]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d113      	bne.n	8005476 <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699a      	ldr	r2, [r3, #24]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2201      	movs	r2, #1
 8005474:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	22ff      	movs	r2, #255	; 0xff
 800547c:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800547e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80054a4:	f7fc f972 	bl	800178c <HAL_GetTick>
 80054a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054aa:	e009      	b.n	80054c0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80054ac:	f7fc f96e 	bl	800178c <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ba:	d901      	bls.n	80054c0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e007      	b.n	80054d0 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68db      	ldr	r3, [r3, #12]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0ee      	beq.n	80054ac <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d122      	bne.n	800553c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005504:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005506:	f7fc f941 	bl	800178c <HAL_GetTick>
 800550a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800550c:	e00c      	b.n	8005528 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800550e:	f7fc f93d 	bl	800178c <HAL_GetTick>
 8005512:	4602      	mov	r2, r0
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	1ad3      	subs	r3, r2, r3
 8005518:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800551c:	d904      	bls.n	8005528 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2204      	movs	r2, #4
 8005522:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <RTC_EnterInitMode+0x64>
 8005536:	7bfb      	ldrb	r3, [r7, #15]
 8005538:	2b01      	cmp	r3, #1
 800553a:	d1e8      	bne.n	800550e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800553c:	7bfb      	ldrb	r3, [r7, #15]
}
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005546:	b580      	push	{r7, lr}
 8005548:	b084      	sub	sp, #16
 800554a:	af00      	add	r7, sp, #0
 800554c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005560:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d10a      	bne.n	8005586 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f7ff ff89 	bl	8005488 <HAL_RTC_WaitForSynchro>
 8005576:	4603      	mov	r3, r0
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2204      	movs	r2, #4
 8005580:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005586:	7bfb      	ldrb	r3, [r7, #15]
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e041      	b.n	8005626 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d106      	bne.n	80055bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb fe22 	bl	8001200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2202      	movs	r2, #2
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3304      	adds	r3, #4
 80055cc:	4619      	mov	r1, r3
 80055ce:	4610      	mov	r0, r2
 80055d0:	f000 fc40 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}

0800562e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800562e:	b580      	push	{r7, lr}
 8005630:	b082      	sub	sp, #8
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	e041      	b.n	80056c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f000 f839 	bl	80056cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2202      	movs	r2, #2
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3304      	adds	r3, #4
 800566a:	4619      	mov	r1, r3
 800566c:	4610      	mov	r0, r2
 800566e:	f000 fbf1 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2201      	movs	r2, #1
 8005676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2201      	movs	r2, #1
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2201      	movs	r2, #1
 8005686:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2201      	movs	r2, #1
 8005696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2201      	movs	r2, #1
 80056ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e041      	b.n	8005776 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f839 	bl	800577e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f000 fb98 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800577e:	b480      	push	{r7}
 8005780:	b083      	sub	sp, #12
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	f003 0302 	and.w	r3, r3, #2
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d122      	bne.n	80057ee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d11b      	bne.n	80057ee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f06f 0202 	mvn.w	r2, #2
 80057be:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d003      	beq.n	80057dc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fb1e 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 80057da:	e005      	b.n	80057e8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057dc:	6878      	ldr	r0, [r7, #4]
 80057de:	f000 fb10 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fb21 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0304 	and.w	r3, r3, #4
 80057f8:	2b04      	cmp	r3, #4
 80057fa:	d122      	bne.n	8005842 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f003 0304 	and.w	r3, r3, #4
 8005806:	2b04      	cmp	r3, #4
 8005808:	d11b      	bne.n	8005842 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f06f 0204 	mvn.w	r2, #4
 8005812:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f000 faf4 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 800582e:	e005      	b.n	800583c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f000 fae6 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f000 faf7 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b08      	cmp	r3, #8
 800584e:	d122      	bne.n	8005896 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0308 	and.w	r3, r3, #8
 800585a:	2b08      	cmp	r3, #8
 800585c:	d11b      	bne.n	8005896 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f06f 0208 	mvn.w	r2, #8
 8005866:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2204      	movs	r2, #4
 800586c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	f003 0303 	and.w	r3, r3, #3
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f000 faca 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 8005882:	e005      	b.n	8005890 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 fabc 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 facd 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0310 	and.w	r3, r3, #16
 80058a0:	2b10      	cmp	r3, #16
 80058a2:	d122      	bne.n	80058ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d11b      	bne.n	80058ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f06f 0210 	mvn.w	r2, #16
 80058ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2208      	movs	r2, #8
 80058c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	69db      	ldr	r3, [r3, #28]
 80058c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 faa0 	bl	8005e16 <HAL_TIM_IC_CaptureCallback>
 80058d6:	e005      	b.n	80058e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 fa92 	bl	8005e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 faa3 	bl	8005e2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	691b      	ldr	r3, [r3, #16]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d10e      	bne.n	8005916 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b01      	cmp	r3, #1
 8005904:	d107      	bne.n	8005916 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f06f 0201 	mvn.w	r2, #1
 800590e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fa6c 	bl	8005dee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b80      	cmp	r3, #128	; 0x80
 8005922:	d10e      	bne.n	8005942 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d107      	bne.n	8005942 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800593a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fec5 	bl	80066cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d10e      	bne.n	800596e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595a:	2b40      	cmp	r3, #64	; 0x40
 800595c:	d107      	bne.n	800596e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fa68 	bl	8005e3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0320 	and.w	r3, r3, #32
 8005978:	2b20      	cmp	r3, #32
 800597a:	d10e      	bne.n	800599a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0320 	and.w	r3, r3, #32
 8005986:	2b20      	cmp	r3, #32
 8005988:	d107      	bne.n	800599a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f06f 0220 	mvn.w	r2, #32
 8005992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fe8f 	bl	80066b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800599a:	bf00      	nop
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	60f8      	str	r0, [r7, #12]
 80059aa:	60b9      	str	r1, [r7, #8]
 80059ac:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_TIM_IC_ConfigChannel+0x1e>
 80059bc:	2302      	movs	r3, #2
 80059be:	e088      	b.n	8005ad2 <HAL_TIM_IC_ConfigChannel+0x130>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d11b      	bne.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	6819      	ldr	r1, [r3, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f000 fc45 	bl	800626c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699a      	ldr	r2, [r3, #24]
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 020c 	bic.w	r2, r2, #12
 80059f0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6999      	ldr	r1, [r3, #24]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	619a      	str	r2, [r3, #24]
 8005a04:	e060      	b.n	8005ac8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d11c      	bne.n	8005a46 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6818      	ldr	r0, [r3, #0]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6819      	ldr	r1, [r3, #0]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f000 fcbd 	bl	800639a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a2e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6999      	ldr	r1, [r3, #24]
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	021a      	lsls	r2, r3, #8
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	619a      	str	r2, [r3, #24]
 8005a44:	e040      	b.n	8005ac8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b08      	cmp	r3, #8
 8005a4a:	d11b      	bne.n	8005a84 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6818      	ldr	r0, [r3, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6819      	ldr	r1, [r3, #0]
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f000 fd0a 	bl	8006474 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	69da      	ldr	r2, [r3, #28]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 020c 	bic.w	r2, r2, #12
 8005a6e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	69d9      	ldr	r1, [r3, #28]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	61da      	str	r2, [r3, #28]
 8005a82:	e021      	b.n	8005ac8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b0c      	cmp	r3, #12
 8005a88:	d11c      	bne.n	8005ac4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6818      	ldr	r0, [r3, #0]
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	6819      	ldr	r1, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f000 fd27 	bl	80064ec <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69da      	ldr	r2, [r3, #28]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005aac:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69d9      	ldr	r1, [r3, #28]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	021a      	lsls	r2, r3, #8
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	61da      	str	r2, [r3, #28]
 8005ac2:	e001      	b.n	8005ac8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0ae      	b.n	8005c58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2b0c      	cmp	r3, #12
 8005b06:	f200 809f 	bhi.w	8005c48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b0a:	a201      	add	r2, pc, #4	; (adr r2, 8005b10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b10:	08005b45 	.word	0x08005b45
 8005b14:	08005c49 	.word	0x08005c49
 8005b18:	08005c49 	.word	0x08005c49
 8005b1c:	08005c49 	.word	0x08005c49
 8005b20:	08005b85 	.word	0x08005b85
 8005b24:	08005c49 	.word	0x08005c49
 8005b28:	08005c49 	.word	0x08005c49
 8005b2c:	08005c49 	.word	0x08005c49
 8005b30:	08005bc7 	.word	0x08005bc7
 8005b34:	08005c49 	.word	0x08005c49
 8005b38:	08005c49 	.word	0x08005c49
 8005b3c:	08005c49 	.word	0x08005c49
 8005b40:	08005c07 	.word	0x08005c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68b9      	ldr	r1, [r7, #8]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f000 fa02 	bl	8005f54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699a      	ldr	r2, [r3, #24]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0208 	orr.w	r2, r2, #8
 8005b5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699a      	ldr	r2, [r3, #24]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f022 0204 	bic.w	r2, r2, #4
 8005b6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6999      	ldr	r1, [r3, #24]
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	430a      	orrs	r2, r1
 8005b80:	619a      	str	r2, [r3, #24]
      break;
 8005b82:	e064      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68b9      	ldr	r1, [r7, #8]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	f000 fa48 	bl	8006020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	699a      	ldr	r2, [r3, #24]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	699a      	ldr	r2, [r3, #24]
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	6999      	ldr	r1, [r3, #24]
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	021a      	lsls	r2, r3, #8
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	430a      	orrs	r2, r1
 8005bc2:	619a      	str	r2, [r3, #24]
      break;
 8005bc4:	e043      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fa93 	bl	80060f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	69da      	ldr	r2, [r3, #28]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0208 	orr.w	r2, r2, #8
 8005be0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	69da      	ldr	r2, [r3, #28]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0204 	bic.w	r2, r2, #4
 8005bf0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69d9      	ldr	r1, [r3, #28]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	691a      	ldr	r2, [r3, #16]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	430a      	orrs	r2, r1
 8005c02:	61da      	str	r2, [r3, #28]
      break;
 8005c04:	e023      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 fadd 	bl	80061cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	69da      	ldr	r2, [r3, #28]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	69d9      	ldr	r1, [r3, #28]
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	021a      	lsls	r2, r3, #8
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	61da      	str	r2, [r3, #28]
      break;
 8005c46:	e002      	b.n	8005c4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3718      	adds	r7, #24
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b084      	sub	sp, #16
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d101      	bne.n	8005c7c <HAL_TIM_ConfigClockSource+0x1c>
 8005c78:	2302      	movs	r3, #2
 8005c7a:	e0b4      	b.n	8005de6 <HAL_TIM_ConfigClockSource+0x186>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb4:	d03e      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0xd4>
 8005cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cba:	f200 8087 	bhi.w	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	f000 8086 	beq.w	8005dd2 <HAL_TIM_ConfigClockSource+0x172>
 8005cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cca:	d87f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ccc:	2b70      	cmp	r3, #112	; 0x70
 8005cce:	d01a      	beq.n	8005d06 <HAL_TIM_ConfigClockSource+0xa6>
 8005cd0:	2b70      	cmp	r3, #112	; 0x70
 8005cd2:	d87b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cd4:	2b60      	cmp	r3, #96	; 0x60
 8005cd6:	d050      	beq.n	8005d7a <HAL_TIM_ConfigClockSource+0x11a>
 8005cd8:	2b60      	cmp	r3, #96	; 0x60
 8005cda:	d877      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cdc:	2b50      	cmp	r3, #80	; 0x50
 8005cde:	d03c      	beq.n	8005d5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ce0:	2b50      	cmp	r3, #80	; 0x50
 8005ce2:	d873      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b40      	cmp	r3, #64	; 0x40
 8005ce6:	d058      	beq.n	8005d9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ce8:	2b40      	cmp	r3, #64	; 0x40
 8005cea:	d86f      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d064      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf0:	2b30      	cmp	r3, #48	; 0x30
 8005cf2:	d86b      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d060      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d867      	bhi.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05c      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d00:	2b10      	cmp	r3, #16
 8005d02:	d05a      	beq.n	8005dba <HAL_TIM_ConfigClockSource+0x15a>
 8005d04:	e062      	b.n	8005dcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6818      	ldr	r0, [r3, #0]
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	6899      	ldr	r1, [r3, #8]
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f000 fc41 	bl	800659c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68ba      	ldr	r2, [r7, #8]
 8005d30:	609a      	str	r2, [r3, #8]
      break;
 8005d32:	e04f      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	6899      	ldr	r1, [r3, #8]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f000 fc2a 	bl	800659c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689a      	ldr	r2, [r3, #8]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d56:	609a      	str	r2, [r3, #8]
      break;
 8005d58:	e03c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6818      	ldr	r0, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	6859      	ldr	r1, [r3, #4]
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	461a      	mov	r2, r3
 8005d68:	f000 fae8 	bl	800633c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	2150      	movs	r1, #80	; 0x50
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 fbf7 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005d78:	e02c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	6859      	ldr	r1, [r3, #4]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f000 fb44 	bl	8006414 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2160      	movs	r1, #96	; 0x60
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fbe7 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005d98:	e01c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	6859      	ldr	r1, [r3, #4]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	461a      	mov	r2, r3
 8005da8:	f000 fac8 	bl	800633c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2140      	movs	r1, #64	; 0x40
 8005db2:	4618      	mov	r0, r3
 8005db4:	f000 fbd7 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005db8:	e00c      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	f000 fbce 	bl	8006566 <TIM_ITRx_SetConfig>
      break;
 8005dca:	e003      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005dcc:	2301      	movs	r3, #1
 8005dce:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3710      	adds	r7, #16
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}

08005dee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dee:	b480      	push	{r7}
 8005df0:	b083      	sub	sp, #12
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005df6:	bf00      	nop
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e0a:	bf00      	nop
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b083      	sub	sp, #12
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr

08005e3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	b083      	sub	sp, #12
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a34      	ldr	r2, [pc, #208]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d00f      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e72:	d00b      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a31      	ldr	r2, [pc, #196]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d007      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a30      	ldr	r2, [pc, #192]	; (8005f40 <TIM_Base_SetConfig+0xec>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d003      	beq.n	8005e8c <TIM_Base_SetConfig+0x38>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a2f      	ldr	r2, [pc, #188]	; (8005f44 <TIM_Base_SetConfig+0xf0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d108      	bne.n	8005e9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	68fa      	ldr	r2, [r7, #12]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a25      	ldr	r2, [pc, #148]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d01b      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eac:	d017      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	4a22      	ldr	r2, [pc, #136]	; (8005f3c <TIM_Base_SetConfig+0xe8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d013      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a21      	ldr	r2, [pc, #132]	; (8005f40 <TIM_Base_SetConfig+0xec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d00f      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a20      	ldr	r2, [pc, #128]	; (8005f44 <TIM_Base_SetConfig+0xf0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00b      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a1f      	ldr	r2, [pc, #124]	; (8005f48 <TIM_Base_SetConfig+0xf4>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d007      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a1e      	ldr	r2, [pc, #120]	; (8005f4c <TIM_Base_SetConfig+0xf8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d003      	beq.n	8005ede <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <TIM_Base_SetConfig+0xfc>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d108      	bne.n	8005ef0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ee4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68fa      	ldr	r2, [r7, #12]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689a      	ldr	r2, [r3, #8]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a08      	ldr	r2, [pc, #32]	; (8005f38 <TIM_Base_SetConfig+0xe4>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d103      	bne.n	8005f24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	691a      	ldr	r2, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	615a      	str	r2, [r3, #20]
}
 8005f2a:	bf00      	nop
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40014000 	.word	0x40014000
 8005f4c:	40014400 	.word	0x40014400
 8005f50:	40014800 	.word	0x40014800

08005f54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0303 	bic.w	r3, r3, #3
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f023 0302 	bic.w	r3, r3, #2
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a1c      	ldr	r2, [pc, #112]	; (800601c <TIM_OC1_SetConfig+0xc8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d10c      	bne.n	8005fca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f023 0308 	bic.w	r3, r3, #8
 8005fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	697a      	ldr	r2, [r7, #20]
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f023 0304 	bic.w	r3, r3, #4
 8005fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a13      	ldr	r2, [pc, #76]	; (800601c <TIM_OC1_SetConfig+0xc8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d111      	bne.n	8005ff6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	621a      	str	r2, [r3, #32]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40010000 	.word	0x40010000

08006020 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a1b      	ldr	r3, [r3, #32]
 800602e:	f023 0210 	bic.w	r2, r3, #16
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800604e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	021b      	lsls	r3, r3, #8
 800605e:	68fa      	ldr	r2, [r7, #12]
 8006060:	4313      	orrs	r3, r2
 8006062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f023 0320 	bic.w	r3, r3, #32
 800606a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	4a1e      	ldr	r2, [pc, #120]	; (80060f4 <TIM_OC2_SetConfig+0xd4>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d10d      	bne.n	800609c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	4313      	orrs	r3, r2
 8006092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800609a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a15      	ldr	r2, [pc, #84]	; (80060f4 <TIM_OC2_SetConfig+0xd4>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d113      	bne.n	80060cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	4313      	orrs	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	699b      	ldr	r3, [r3, #24]
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40010000 	.word	0x40010000

080060f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f023 0303 	bic.w	r3, r3, #3
 800612e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	021b      	lsls	r3, r3, #8
 8006148:	697a      	ldr	r2, [r7, #20]
 800614a:	4313      	orrs	r3, r2
 800614c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <TIM_OC3_SetConfig+0xd0>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10d      	bne.n	8006172 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800615c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	021b      	lsls	r3, r3, #8
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	4313      	orrs	r3, r2
 8006168:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006170:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <TIM_OC3_SetConfig+0xd0>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d113      	bne.n	80061a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	011b      	lsls	r3, r3, #4
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	4313      	orrs	r3, r2
 8006194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68fa      	ldr	r2, [r7, #12]
 80061ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685a      	ldr	r2, [r3, #4]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	621a      	str	r2, [r3, #32]
}
 80061bc:	bf00      	nop
 80061be:	371c      	adds	r7, #28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	40010000 	.word	0x40010000

080061cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b087      	sub	sp, #28
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a1b      	ldr	r3, [r3, #32]
 80061e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	69db      	ldr	r3, [r3, #28]
 80061f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	68fa      	ldr	r2, [r7, #12]
 800620c:	4313      	orrs	r3, r2
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	031b      	lsls	r3, r3, #12
 800621e:	693a      	ldr	r2, [r7, #16]
 8006220:	4313      	orrs	r3, r2
 8006222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a10      	ldr	r2, [pc, #64]	; (8006268 <TIM_OC4_SetConfig+0x9c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d109      	bne.n	8006240 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006232:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	019b      	lsls	r3, r3, #6
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685a      	ldr	r2, [r3, #4]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	621a      	str	r2, [r3, #32]
}
 800625a:	bf00      	nop
 800625c:	371c      	adds	r7, #28
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	40010000 	.word	0x40010000

0800626c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	4a24      	ldr	r2, [pc, #144]	; (8006328 <TIM_TI1_SetConfig+0xbc>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d013      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062a0:	d00f      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4a21      	ldr	r2, [pc, #132]	; (800632c <TIM_TI1_SetConfig+0xc0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d00b      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	4a20      	ldr	r2, [pc, #128]	; (8006330 <TIM_TI1_SetConfig+0xc4>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d007      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <TIM_TI1_SetConfig+0xc8>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_TI1_SetConfig+0x56>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	4a1e      	ldr	r2, [pc, #120]	; (8006338 <TIM_TI1_SetConfig+0xcc>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d101      	bne.n	80062c6 <TIM_TI1_SetConfig+0x5a>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <TIM_TI1_SetConfig+0x5c>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d008      	beq.n	80062de <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f023 0303 	bic.w	r3, r3, #3
 80062d2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062d4:	697a      	ldr	r2, [r7, #20]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4313      	orrs	r3, r2
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e003      	b.n	80062e6 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	f043 0301 	orr.w	r3, r3, #1
 80062e4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	011b      	lsls	r3, r3, #4
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f023 030a 	bic.w	r3, r3, #10
 8006300:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 030a 	and.w	r3, r3, #10
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	621a      	str	r2, [r3, #32]
}
 800631a:	bf00      	nop
 800631c:	371c      	adds	r7, #28
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	40010000 	.word	0x40010000
 800632c:	40000400 	.word	0x40000400
 8006330:	40000800 	.word	0x40000800
 8006334:	40000c00 	.word	0x40000c00
 8006338:	40014000 	.word	0x40014000

0800633c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a1b      	ldr	r3, [r3, #32]
 800634c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f023 0201 	bic.w	r2, r3, #1
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006366:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 030a 	bic.w	r3, r3, #10
 8006378:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	4313      	orrs	r3, r2
 8006380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	621a      	str	r2, [r3, #32]
}
 800638e:	bf00      	nop
 8006390:	371c      	adds	r7, #28
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800639a:	b480      	push	{r7}
 800639c:	b087      	sub	sp, #28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
 80063a2:	60b9      	str	r1, [r7, #8]
 80063a4:	607a      	str	r2, [r7, #4]
 80063a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f023 0210 	bic.w	r2, r3, #16
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	6a1b      	ldr	r3, [r3, #32]
 80063be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	031b      	lsls	r3, r3, #12
 80063de:	b29b      	uxth	r3, r3
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	011b      	lsls	r3, r3, #4
 80063f2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80063f6:	693a      	ldr	r2, [r7, #16]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	621a      	str	r2, [r3, #32]
}
 8006408:	bf00      	nop
 800640a:	371c      	adds	r7, #28
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	f023 0210 	bic.w	r2, r3, #16
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800643e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	031b      	lsls	r3, r3, #12
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006450:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	011b      	lsls	r3, r3, #4
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	621a      	str	r2, [r3, #32]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 0303 	bic.w	r3, r3, #3
 80064a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	697a      	ldr	r2, [r7, #20]
 80064ba:	4313      	orrs	r3, r2
 80064bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80064c4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	021b      	lsls	r3, r3, #8
 80064ca:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	621a      	str	r2, [r3, #32]
}
 80064e0:	bf00      	nop
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr

080064ec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b087      	sub	sp, #28
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	69db      	ldr	r3, [r3, #28]
 800650a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6a1b      	ldr	r3, [r3, #32]
 8006510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006518:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	4313      	orrs	r3, r2
 8006522:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800652a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	031b      	lsls	r3, r3, #12
 8006530:	b29b      	uxth	r3, r3
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4313      	orrs	r3, r2
 8006536:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800653e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	031b      	lsls	r3, r3, #12
 8006544:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4313      	orrs	r3, r2
 800654c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	621a      	str	r2, [r3, #32]
}
 800655a:	bf00      	nop
 800655c:	371c      	adds	r7, #28
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006566:	b480      	push	{r7}
 8006568:	b085      	sub	sp, #20
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
 800656e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800657e:	683a      	ldr	r2, [r7, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4313      	orrs	r3, r2
 8006584:	f043 0307 	orr.w	r3, r3, #7
 8006588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	609a      	str	r2, [r3, #8]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
 80065a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	021a      	lsls	r2, r3, #8
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	431a      	orrs	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	697a      	ldr	r2, [r7, #20]
 80065ce:	609a      	str	r2, [r3, #8]
}
 80065d0:	bf00      	nop
 80065d2:	371c      	adds	r7, #28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065dc:	b480      	push	{r7}
 80065de:	b085      	sub	sp, #20
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d101      	bne.n	80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065f0:	2302      	movs	r3, #2
 80065f2:	e050      	b.n	8006696 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2202      	movs	r2, #2
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800661a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68fa      	ldr	r2, [r7, #12]
 8006622:	4313      	orrs	r3, r2
 8006624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1c      	ldr	r2, [pc, #112]	; (80066a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d018      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006640:	d013      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d00e      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a16      	ldr	r2, [pc, #88]	; (80066ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d009      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d004      	beq.n	800666a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a13      	ldr	r2, [pc, #76]	; (80066b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d10c      	bne.n	8006684 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006670:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4313      	orrs	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68ba      	ldr	r2, [r7, #8]
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	40010000 	.word	0x40010000
 80066a8:	40000400 	.word	0x40000400
 80066ac:	40000800 	.word	0x40000800
 80066b0:	40000c00 	.word	0x40000c00
 80066b4:	40014000 	.word	0x40014000

080066b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b083      	sub	sp, #12
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066c0:	bf00      	nop
 80066c2:	370c      	adds	r7, #12
 80066c4:	46bd      	mov	sp, r7
 80066c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ca:	4770      	bx	lr

080066cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b082      	sub	sp, #8
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d101      	bne.n	80066f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066ee:	2301      	movs	r3, #1
 80066f0:	e03f      	b.n	8006772 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2200      	movs	r2, #0
 8006702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa fe6a 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2224      	movs	r2, #36	; 0x24
 8006710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68da      	ldr	r2, [r3, #12]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006722:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fc7b 	bl	8007020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	691a      	ldr	r2, [r3, #16]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006738:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	695a      	ldr	r2, [r3, #20]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006748:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006758:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3708      	adds	r7, #8
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
	...

0800677c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b0ba      	sub	sp, #232	; 0xe8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68db      	ldr	r3, [r3, #12]
 8006794:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80067ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80067ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10f      	bne.n	80067e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d009      	beq.n	80067e2 <HAL_UART_IRQHandler+0x66>
 80067ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fb65 	bl	8006eaa <UART_Receive_IT>
      return;
 80067e0:	e256      	b.n	8006c90 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80067e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	f000 80de 	beq.w	80069a8 <HAL_UART_IRQHandler+0x22c>
 80067ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80067f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 80d1 	beq.w	80069a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0301 	and.w	r3, r3, #1
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <HAL_UART_IRQHandler+0xae>
 8006812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800681a:	2b00      	cmp	r3, #0
 800681c:	d005      	beq.n	800682a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006822:	f043 0201 	orr.w	r2, r3, #1
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00b      	beq.n	800684e <HAL_UART_IRQHandler+0xd2>
 8006836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	f043 0202 	orr.w	r2, r3, #2
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800684e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006852:	f003 0302 	and.w	r3, r3, #2
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00b      	beq.n	8006872 <HAL_UART_IRQHandler+0xf6>
 800685a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686a:	f043 0204 	orr.w	r2, r3, #4
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b00      	cmp	r3, #0
 800687c:	d011      	beq.n	80068a2 <HAL_UART_IRQHandler+0x126>
 800687e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800688a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d005      	beq.n	80068a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f043 0208 	orr.w	r2, r3, #8
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 81ed 	beq.w	8006c86 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80068ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b0:	f003 0320 	and.w	r3, r3, #32
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d008      	beq.n	80068ca <HAL_UART_IRQHandler+0x14e>
 80068b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d002      	beq.n	80068ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 faf0 	bl	8006eaa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d4:	2b40      	cmp	r3, #64	; 0x40
 80068d6:	bf0c      	ite	eq
 80068d8:	2301      	moveq	r3, #1
 80068da:	2300      	movne	r3, #0
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	f003 0308 	and.w	r3, r3, #8
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <HAL_UART_IRQHandler+0x17a>
 80068ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d04f      	beq.n	8006996 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 f9f8 	bl	8006cec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006906:	2b40      	cmp	r3, #64	; 0x40
 8006908:	d141      	bne.n	800698e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	3314      	adds	r3, #20
 8006910:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006914:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006920:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006928:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3314      	adds	r3, #20
 8006932:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006936:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800693a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006942:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006946:	e841 2300 	strex	r3, r2, [r1]
 800694a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800694e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1d9      	bne.n	800690a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695a:	2b00      	cmp	r3, #0
 800695c:	d013      	beq.n	8006986 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006962:	4a7d      	ldr	r2, [pc, #500]	; (8006b58 <HAL_UART_IRQHandler+0x3dc>)
 8006964:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	4618      	mov	r0, r3
 800696c:	f7fb f96e 	bl	8001c4c <HAL_DMA_Abort_IT>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006980:	4610      	mov	r0, r2
 8006982:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006984:	e00e      	b.n	80069a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f99a 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800698c:	e00a      	b.n	80069a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f996 	bl	8006cc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006994:	e006      	b.n	80069a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f992 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80069a2:	e170      	b.n	8006c86 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069a4:	bf00      	nop
    return;
 80069a6:	e16e      	b.n	8006c86 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	f040 814a 	bne.w	8006c46 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b6:	f003 0310 	and.w	r3, r3, #16
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	f000 8143 	beq.w	8006c46 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80069c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069c4:	f003 0310 	and.w	r3, r3, #16
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 813c 	beq.w	8006c46 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80069ce:	2300      	movs	r3, #0
 80069d0:	60bb      	str	r3, [r7, #8]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	60bb      	str	r3, [r7, #8]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	60bb      	str	r3, [r7, #8]
 80069e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ee:	2b40      	cmp	r3, #64	; 0x40
 80069f0:	f040 80b4 	bne.w	8006b5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8140 	beq.w	8006c8a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a12:	429a      	cmp	r2, r3
 8006a14:	f080 8139 	bcs.w	8006c8a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a2a:	f000 8088 	beq.w	8006b3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	330c      	adds	r3, #12
 8006a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006a3c:	e853 3f00 	ldrex	r3, [r3]
 8006a40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006a44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	330c      	adds	r3, #12
 8006a56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006a5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a6a:	e841 2300 	strex	r3, r2, [r1]
 8006a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1d9      	bne.n	8006a2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006aa2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006aa6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e1      	bne.n	8006a7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3314      	adds	r3, #20
 8006abc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac0:	e853 3f00 	ldrex	r3, [r3]
 8006ac4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006acc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	3314      	adds	r3, #20
 8006ad6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006ada:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006adc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006ae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006ae2:	e841 2300 	strex	r3, r2, [r1]
 8006ae6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ae8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1e3      	bne.n	8006ab6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2220      	movs	r2, #32
 8006af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	330c      	adds	r3, #12
 8006b02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b06:	e853 3f00 	ldrex	r3, [r3]
 8006b0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0e:	f023 0310 	bic.w	r3, r3, #16
 8006b12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	330c      	adds	r3, #12
 8006b1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b20:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b28:	e841 2300 	strex	r3, r2, [r1]
 8006b2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d1e3      	bne.n	8006afc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fb f817 	bl	8001b6c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 f8c0 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b54:	e099      	b.n	8006c8a <HAL_UART_IRQHandler+0x50e>
 8006b56:	bf00      	nop
 8006b58:	08006db3 	.word	0x08006db3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	1ad3      	subs	r3, r2, r3
 8006b68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f000 808b 	beq.w	8006c8e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 8086 	beq.w	8006c8e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	330c      	adds	r3, #12
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e3      	bne.n	8006b82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3314      	adds	r3, #20
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	3314      	adds	r3, #20
 8006bda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006bde:	633a      	str	r2, [r7, #48]	; 0x30
 8006be0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e3      	bne.n	8006bba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	330c      	adds	r3, #12
 8006c06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0310 	bic.w	r3, r3, #16
 8006c16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c24:	61fa      	str	r2, [r7, #28]
 8006c26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69b9      	ldr	r1, [r7, #24]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	617b      	str	r3, [r7, #20]
   return(result);
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e3      	bne.n	8006c00 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 f848 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006c44:	e023      	b.n	8006c8e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HAL_UART_IRQHandler+0x4ea>
 8006c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f8bb 	bl	8006dda <UART_Transmit_IT>
    return;
 8006c64:	e014      	b.n	8006c90 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00e      	beq.n	8006c90 <HAL_UART_IRQHandler+0x514>
 8006c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d008      	beq.n	8006c90 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8fb 	bl	8006e7a <UART_EndTransmit_IT>
    return;
 8006c84:	e004      	b.n	8006c90 <HAL_UART_IRQHandler+0x514>
    return;
 8006c86:	bf00      	nop
 8006c88:	e002      	b.n	8006c90 <HAL_UART_IRQHandler+0x514>
      return;
 8006c8a:	bf00      	nop
 8006c8c:	e000      	b.n	8006c90 <HAL_UART_IRQHandler+0x514>
      return;
 8006c8e:	bf00      	nop
  }
}
 8006c90:	37e8      	adds	r7, #232	; 0xe8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop

08006c98 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b083      	sub	sp, #12
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr

08006cac <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cc8:	bf00      	nop
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ce0:	bf00      	nop
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b095      	sub	sp, #84	; 0x54
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	330c      	adds	r3, #12
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	e853 3f00 	ldrex	r3, [r3]
 8006d02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	330c      	adds	r3, #12
 8006d12:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d14:	643a      	str	r2, [r7, #64]	; 0x40
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d1a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d1c:	e841 2300 	strex	r3, r2, [r1]
 8006d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1e5      	bne.n	8006cf4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	3314      	adds	r3, #20
 8006d2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	6a3b      	ldr	r3, [r7, #32]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	61fb      	str	r3, [r7, #28]
   return(result);
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	f023 0301 	bic.w	r3, r3, #1
 8006d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	3314      	adds	r3, #20
 8006d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d48:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e5      	bne.n	8006d28 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d119      	bne.n	8006d98 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	330c      	adds	r3, #12
 8006d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d84:	61ba      	str	r2, [r7, #24]
 8006d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6979      	ldr	r1, [r7, #20]
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	613b      	str	r3, [r7, #16]
   return(result);
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006da6:	bf00      	nop
 8006da8:	3754      	adds	r7, #84	; 0x54
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	b084      	sub	sp, #16
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f7ff ff77 	bl	8006cc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dd2:	bf00      	nop
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dda:	b480      	push	{r7}
 8006ddc:	b085      	sub	sp, #20
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b21      	cmp	r3, #33	; 0x21
 8006dec:	d13e      	bne.n	8006e6c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006df6:	d114      	bne.n	8006e22 <UART_Transmit_IT+0x48>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	691b      	ldr	r3, [r3, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d110      	bne.n	8006e22 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006e14:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	1c9a      	adds	r2, r3, #2
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	621a      	str	r2, [r3, #32]
 8006e20:	e008      	b.n	8006e34 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	1c59      	adds	r1, r3, #1
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	6211      	str	r1, [r2, #32]
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4619      	mov	r1, r3
 8006e42:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10f      	bne.n	8006e68 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68da      	ldr	r2, [r3, #12]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e56:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68da      	ldr	r2, [r3, #12]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e66:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	e000      	b.n	8006e6e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e6c:	2302      	movs	r3, #2
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e90:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff fefc 	bl	8006c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b08c      	sub	sp, #48	; 0x30
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b22      	cmp	r3, #34	; 0x22
 8006ebc:	f040 80ab 	bne.w	8007016 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec8:	d117      	bne.n	8006efa <UART_Receive_IT+0x50>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d113      	bne.n	8006efa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8006ef8:	e026      	b.n	8006f48 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0c:	d007      	beq.n	8006f1e <UART_Receive_IT+0x74>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <UART_Receive_IT+0x82>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d106      	bne.n	8006f2c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	e008      	b.n	8006f3e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	3b01      	subs	r3, #1
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	4619      	mov	r1, r3
 8006f56:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d15a      	bne.n	8007012 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f022 0220 	bic.w	r2, r2, #32
 8006f6a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68da      	ldr	r2, [r3, #12]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f022 0201 	bic.w	r2, r2, #1
 8006f8a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2220      	movs	r2, #32
 8006f90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	2b01      	cmp	r3, #1
 8006f9a:	d135      	bne.n	8007008 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	330c      	adds	r3, #12
 8006fa8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	e853 3f00 	ldrex	r3, [r3]
 8006fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f023 0310 	bic.w	r3, r3, #16
 8006fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	330c      	adds	r3, #12
 8006fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc2:	623a      	str	r2, [r7, #32]
 8006fc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc6:	69f9      	ldr	r1, [r7, #28]
 8006fc8:	6a3a      	ldr	r2, [r7, #32]
 8006fca:	e841 2300 	strex	r3, r2, [r1]
 8006fce:	61bb      	str	r3, [r7, #24]
   return(result);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1e5      	bne.n	8006fa2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0310 	and.w	r3, r3, #16
 8006fe0:	2b10      	cmp	r3, #16
 8006fe2:	d10a      	bne.n	8006ffa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7ff fe67 	bl	8006cd4 <HAL_UARTEx_RxEventCallback>
 8007006:	e002      	b.n	800700e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f7ff fe4f 	bl	8006cac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	e002      	b.n	8007018 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	e000      	b.n	8007018 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007016:	2302      	movs	r3, #2
  }
}
 8007018:	4618      	mov	r0, r3
 800701a:	3730      	adds	r7, #48	; 0x30
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007024:	b0c0      	sub	sp, #256	; 0x100
 8007026:	af00      	add	r7, sp, #0
 8007028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800703c:	68d9      	ldr	r1, [r3, #12]
 800703e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	ea40 0301 	orr.w	r3, r0, r1
 8007048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800704a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800704e:	689a      	ldr	r2, [r3, #8]
 8007050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	431a      	orrs	r2, r3
 8007058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800705c:	695b      	ldr	r3, [r3, #20]
 800705e:	431a      	orrs	r2, r3
 8007060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800706c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007078:	f021 010c 	bic.w	r1, r1, #12
 800707c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007086:	430b      	orrs	r3, r1
 8007088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800708a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	695b      	ldr	r3, [r3, #20]
 8007092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800709a:	6999      	ldr	r1, [r3, #24]
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	ea40 0301 	orr.w	r3, r0, r1
 80070a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80070a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	4b8f      	ldr	r3, [pc, #572]	; (80072ec <UART_SetConfig+0x2cc>)
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d005      	beq.n	80070c0 <UART_SetConfig+0xa0>
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	4b8d      	ldr	r3, [pc, #564]	; (80072f0 <UART_SetConfig+0x2d0>)
 80070bc:	429a      	cmp	r2, r3
 80070be:	d104      	bne.n	80070ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80070c0:	f7fe f868 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 80070c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80070c8:	e003      	b.n	80070d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80070ca:	f7fe f84f 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 80070ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070dc:	f040 810c 	bne.w	80072f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80070e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070e4:	2200      	movs	r2, #0
 80070e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80070ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80070ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80070f2:	4622      	mov	r2, r4
 80070f4:	462b      	mov	r3, r5
 80070f6:	1891      	adds	r1, r2, r2
 80070f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80070fa:	415b      	adcs	r3, r3
 80070fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007102:	4621      	mov	r1, r4
 8007104:	eb12 0801 	adds.w	r8, r2, r1
 8007108:	4629      	mov	r1, r5
 800710a:	eb43 0901 	adc.w	r9, r3, r1
 800710e:	f04f 0200 	mov.w	r2, #0
 8007112:	f04f 0300 	mov.w	r3, #0
 8007116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800711a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800711e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007122:	4690      	mov	r8, r2
 8007124:	4699      	mov	r9, r3
 8007126:	4623      	mov	r3, r4
 8007128:	eb18 0303 	adds.w	r3, r8, r3
 800712c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007130:	462b      	mov	r3, r5
 8007132:	eb49 0303 	adc.w	r3, r9, r3
 8007136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800713a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800714a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800714e:	460b      	mov	r3, r1
 8007150:	18db      	adds	r3, r3, r3
 8007152:	653b      	str	r3, [r7, #80]	; 0x50
 8007154:	4613      	mov	r3, r2
 8007156:	eb42 0303 	adc.w	r3, r2, r3
 800715a:	657b      	str	r3, [r7, #84]	; 0x54
 800715c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007164:	f7f9 f83c 	bl	80001e0 <__aeabi_uldivmod>
 8007168:	4602      	mov	r2, r0
 800716a:	460b      	mov	r3, r1
 800716c:	4b61      	ldr	r3, [pc, #388]	; (80072f4 <UART_SetConfig+0x2d4>)
 800716e:	fba3 2302 	umull	r2, r3, r3, r2
 8007172:	095b      	lsrs	r3, r3, #5
 8007174:	011c      	lsls	r4, r3, #4
 8007176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800717a:	2200      	movs	r2, #0
 800717c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007188:	4642      	mov	r2, r8
 800718a:	464b      	mov	r3, r9
 800718c:	1891      	adds	r1, r2, r2
 800718e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007190:	415b      	adcs	r3, r3
 8007192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007198:	4641      	mov	r1, r8
 800719a:	eb12 0a01 	adds.w	sl, r2, r1
 800719e:	4649      	mov	r1, r9
 80071a0:	eb43 0b01 	adc.w	fp, r3, r1
 80071a4:	f04f 0200 	mov.w	r2, #0
 80071a8:	f04f 0300 	mov.w	r3, #0
 80071ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80071b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80071b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80071b8:	4692      	mov	sl, r2
 80071ba:	469b      	mov	fp, r3
 80071bc:	4643      	mov	r3, r8
 80071be:	eb1a 0303 	adds.w	r3, sl, r3
 80071c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80071c6:	464b      	mov	r3, r9
 80071c8:	eb4b 0303 	adc.w	r3, fp, r3
 80071cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80071d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80071e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80071e4:	460b      	mov	r3, r1
 80071e6:	18db      	adds	r3, r3, r3
 80071e8:	643b      	str	r3, [r7, #64]	; 0x40
 80071ea:	4613      	mov	r3, r2
 80071ec:	eb42 0303 	adc.w	r3, r2, r3
 80071f0:	647b      	str	r3, [r7, #68]	; 0x44
 80071f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80071f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80071fa:	f7f8 fff1 	bl	80001e0 <__aeabi_uldivmod>
 80071fe:	4602      	mov	r2, r0
 8007200:	460b      	mov	r3, r1
 8007202:	4611      	mov	r1, r2
 8007204:	4b3b      	ldr	r3, [pc, #236]	; (80072f4 <UART_SetConfig+0x2d4>)
 8007206:	fba3 2301 	umull	r2, r3, r3, r1
 800720a:	095b      	lsrs	r3, r3, #5
 800720c:	2264      	movs	r2, #100	; 0x64
 800720e:	fb02 f303 	mul.w	r3, r2, r3
 8007212:	1acb      	subs	r3, r1, r3
 8007214:	00db      	lsls	r3, r3, #3
 8007216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800721a:	4b36      	ldr	r3, [pc, #216]	; (80072f4 <UART_SetConfig+0x2d4>)
 800721c:	fba3 2302 	umull	r2, r3, r3, r2
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007228:	441c      	add	r4, r3
 800722a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800722e:	2200      	movs	r2, #0
 8007230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800723c:	4642      	mov	r2, r8
 800723e:	464b      	mov	r3, r9
 8007240:	1891      	adds	r1, r2, r2
 8007242:	63b9      	str	r1, [r7, #56]	; 0x38
 8007244:	415b      	adcs	r3, r3
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800724c:	4641      	mov	r1, r8
 800724e:	1851      	adds	r1, r2, r1
 8007250:	6339      	str	r1, [r7, #48]	; 0x30
 8007252:	4649      	mov	r1, r9
 8007254:	414b      	adcs	r3, r1
 8007256:	637b      	str	r3, [r7, #52]	; 0x34
 8007258:	f04f 0200 	mov.w	r2, #0
 800725c:	f04f 0300 	mov.w	r3, #0
 8007260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007264:	4659      	mov	r1, fp
 8007266:	00cb      	lsls	r3, r1, #3
 8007268:	4651      	mov	r1, sl
 800726a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800726e:	4651      	mov	r1, sl
 8007270:	00ca      	lsls	r2, r1, #3
 8007272:	4610      	mov	r0, r2
 8007274:	4619      	mov	r1, r3
 8007276:	4603      	mov	r3, r0
 8007278:	4642      	mov	r2, r8
 800727a:	189b      	adds	r3, r3, r2
 800727c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007280:	464b      	mov	r3, r9
 8007282:	460a      	mov	r2, r1
 8007284:	eb42 0303 	adc.w	r3, r2, r3
 8007288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800728c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800729c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80072a0:	460b      	mov	r3, r1
 80072a2:	18db      	adds	r3, r3, r3
 80072a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80072a6:	4613      	mov	r3, r2
 80072a8:	eb42 0303 	adc.w	r3, r2, r3
 80072ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80072b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80072b6:	f7f8 ff93 	bl	80001e0 <__aeabi_uldivmod>
 80072ba:	4602      	mov	r2, r0
 80072bc:	460b      	mov	r3, r1
 80072be:	4b0d      	ldr	r3, [pc, #52]	; (80072f4 <UART_SetConfig+0x2d4>)
 80072c0:	fba3 1302 	umull	r1, r3, r3, r2
 80072c4:	095b      	lsrs	r3, r3, #5
 80072c6:	2164      	movs	r1, #100	; 0x64
 80072c8:	fb01 f303 	mul.w	r3, r1, r3
 80072cc:	1ad3      	subs	r3, r2, r3
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	3332      	adds	r3, #50	; 0x32
 80072d2:	4a08      	ldr	r2, [pc, #32]	; (80072f4 <UART_SetConfig+0x2d4>)
 80072d4:	fba2 2303 	umull	r2, r3, r2, r3
 80072d8:	095b      	lsrs	r3, r3, #5
 80072da:	f003 0207 	and.w	r2, r3, #7
 80072de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4422      	add	r2, r4
 80072e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80072e8:	e105      	b.n	80074f6 <UART_SetConfig+0x4d6>
 80072ea:	bf00      	nop
 80072ec:	40011000 	.word	0x40011000
 80072f0:	40011400 	.word	0x40011400
 80072f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80072fc:	2200      	movs	r2, #0
 80072fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800730a:	4642      	mov	r2, r8
 800730c:	464b      	mov	r3, r9
 800730e:	1891      	adds	r1, r2, r2
 8007310:	6239      	str	r1, [r7, #32]
 8007312:	415b      	adcs	r3, r3
 8007314:	627b      	str	r3, [r7, #36]	; 0x24
 8007316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800731a:	4641      	mov	r1, r8
 800731c:	1854      	adds	r4, r2, r1
 800731e:	4649      	mov	r1, r9
 8007320:	eb43 0501 	adc.w	r5, r3, r1
 8007324:	f04f 0200 	mov.w	r2, #0
 8007328:	f04f 0300 	mov.w	r3, #0
 800732c:	00eb      	lsls	r3, r5, #3
 800732e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007332:	00e2      	lsls	r2, r4, #3
 8007334:	4614      	mov	r4, r2
 8007336:	461d      	mov	r5, r3
 8007338:	4643      	mov	r3, r8
 800733a:	18e3      	adds	r3, r4, r3
 800733c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007340:	464b      	mov	r3, r9
 8007342:	eb45 0303 	adc.w	r3, r5, r3
 8007346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800734a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800735a:	f04f 0200 	mov.w	r2, #0
 800735e:	f04f 0300 	mov.w	r3, #0
 8007362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007366:	4629      	mov	r1, r5
 8007368:	008b      	lsls	r3, r1, #2
 800736a:	4621      	mov	r1, r4
 800736c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007370:	4621      	mov	r1, r4
 8007372:	008a      	lsls	r2, r1, #2
 8007374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007378:	f7f8 ff32 	bl	80001e0 <__aeabi_uldivmod>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4b60      	ldr	r3, [pc, #384]	; (8007504 <UART_SetConfig+0x4e4>)
 8007382:	fba3 2302 	umull	r2, r3, r3, r2
 8007386:	095b      	lsrs	r3, r3, #5
 8007388:	011c      	lsls	r4, r3, #4
 800738a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800738e:	2200      	movs	r2, #0
 8007390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800739c:	4642      	mov	r2, r8
 800739e:	464b      	mov	r3, r9
 80073a0:	1891      	adds	r1, r2, r2
 80073a2:	61b9      	str	r1, [r7, #24]
 80073a4:	415b      	adcs	r3, r3
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80073ac:	4641      	mov	r1, r8
 80073ae:	1851      	adds	r1, r2, r1
 80073b0:	6139      	str	r1, [r7, #16]
 80073b2:	4649      	mov	r1, r9
 80073b4:	414b      	adcs	r3, r1
 80073b6:	617b      	str	r3, [r7, #20]
 80073b8:	f04f 0200 	mov.w	r2, #0
 80073bc:	f04f 0300 	mov.w	r3, #0
 80073c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80073c4:	4659      	mov	r1, fp
 80073c6:	00cb      	lsls	r3, r1, #3
 80073c8:	4651      	mov	r1, sl
 80073ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80073ce:	4651      	mov	r1, sl
 80073d0:	00ca      	lsls	r2, r1, #3
 80073d2:	4610      	mov	r0, r2
 80073d4:	4619      	mov	r1, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	4642      	mov	r2, r8
 80073da:	189b      	adds	r3, r3, r2
 80073dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80073e0:	464b      	mov	r3, r9
 80073e2:	460a      	mov	r2, r1
 80073e4:	eb42 0303 	adc.w	r3, r2, r3
 80073e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80073f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80073f8:	f04f 0200 	mov.w	r2, #0
 80073fc:	f04f 0300 	mov.w	r3, #0
 8007400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007404:	4649      	mov	r1, r9
 8007406:	008b      	lsls	r3, r1, #2
 8007408:	4641      	mov	r1, r8
 800740a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800740e:	4641      	mov	r1, r8
 8007410:	008a      	lsls	r2, r1, #2
 8007412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007416:	f7f8 fee3 	bl	80001e0 <__aeabi_uldivmod>
 800741a:	4602      	mov	r2, r0
 800741c:	460b      	mov	r3, r1
 800741e:	4b39      	ldr	r3, [pc, #228]	; (8007504 <UART_SetConfig+0x4e4>)
 8007420:	fba3 1302 	umull	r1, r3, r3, r2
 8007424:	095b      	lsrs	r3, r3, #5
 8007426:	2164      	movs	r1, #100	; 0x64
 8007428:	fb01 f303 	mul.w	r3, r1, r3
 800742c:	1ad3      	subs	r3, r2, r3
 800742e:	011b      	lsls	r3, r3, #4
 8007430:	3332      	adds	r3, #50	; 0x32
 8007432:	4a34      	ldr	r2, [pc, #208]	; (8007504 <UART_SetConfig+0x4e4>)
 8007434:	fba2 2303 	umull	r2, r3, r2, r3
 8007438:	095b      	lsrs	r3, r3, #5
 800743a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800743e:	441c      	add	r4, r3
 8007440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007444:	2200      	movs	r2, #0
 8007446:	673b      	str	r3, [r7, #112]	; 0x70
 8007448:	677a      	str	r2, [r7, #116]	; 0x74
 800744a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800744e:	4642      	mov	r2, r8
 8007450:	464b      	mov	r3, r9
 8007452:	1891      	adds	r1, r2, r2
 8007454:	60b9      	str	r1, [r7, #8]
 8007456:	415b      	adcs	r3, r3
 8007458:	60fb      	str	r3, [r7, #12]
 800745a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800745e:	4641      	mov	r1, r8
 8007460:	1851      	adds	r1, r2, r1
 8007462:	6039      	str	r1, [r7, #0]
 8007464:	4649      	mov	r1, r9
 8007466:	414b      	adcs	r3, r1
 8007468:	607b      	str	r3, [r7, #4]
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007476:	4659      	mov	r1, fp
 8007478:	00cb      	lsls	r3, r1, #3
 800747a:	4651      	mov	r1, sl
 800747c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007480:	4651      	mov	r1, sl
 8007482:	00ca      	lsls	r2, r1, #3
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	4603      	mov	r3, r0
 800748a:	4642      	mov	r2, r8
 800748c:	189b      	adds	r3, r3, r2
 800748e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007490:	464b      	mov	r3, r9
 8007492:	460a      	mov	r2, r1
 8007494:	eb42 0303 	adc.w	r3, r2, r3
 8007498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800749a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	663b      	str	r3, [r7, #96]	; 0x60
 80074a4:	667a      	str	r2, [r7, #100]	; 0x64
 80074a6:	f04f 0200 	mov.w	r2, #0
 80074aa:	f04f 0300 	mov.w	r3, #0
 80074ae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80074b2:	4649      	mov	r1, r9
 80074b4:	008b      	lsls	r3, r1, #2
 80074b6:	4641      	mov	r1, r8
 80074b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074bc:	4641      	mov	r1, r8
 80074be:	008a      	lsls	r2, r1, #2
 80074c0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80074c4:	f7f8 fe8c 	bl	80001e0 <__aeabi_uldivmod>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	4b0d      	ldr	r3, [pc, #52]	; (8007504 <UART_SetConfig+0x4e4>)
 80074ce:	fba3 1302 	umull	r1, r3, r3, r2
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2164      	movs	r1, #100	; 0x64
 80074d6:	fb01 f303 	mul.w	r3, r1, r3
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	3332      	adds	r3, #50	; 0x32
 80074e0:	4a08      	ldr	r2, [pc, #32]	; (8007504 <UART_SetConfig+0x4e4>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	095b      	lsrs	r3, r3, #5
 80074e8:	f003 020f 	and.w	r2, r3, #15
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4422      	add	r2, r4
 80074f4:	609a      	str	r2, [r3, #8]
}
 80074f6:	bf00      	nop
 80074f8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80074fc:	46bd      	mov	sp, r7
 80074fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007502:	bf00      	nop
 8007504:	51eb851f 	.word	0x51eb851f

08007508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007508:	b084      	sub	sp, #16
 800750a:	b580      	push	{r7, lr}
 800750c:	b084      	sub	sp, #16
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	f107 001c 	add.w	r0, r7, #28
 8007516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800751c:	2b01      	cmp	r3, #1
 800751e:	d122      	bne.n	8007566 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007538:	687a      	ldr	r2, [r7, #4]
 800753a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d105      	bne.n	800755a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fbee 	bl	8008d3c <USB_CoreReset>
 8007560:	4603      	mov	r3, r0
 8007562:	73fb      	strb	r3, [r7, #15]
 8007564:	e01a      	b.n	800759c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f001 fbe2 	bl	8008d3c <USB_CoreReset>
 8007578:	4603      	mov	r3, r0
 800757a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800757c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757e:	2b00      	cmp	r3, #0
 8007580:	d106      	bne.n	8007590 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
 800758e:	e005      	b.n	800759c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800759c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d10b      	bne.n	80075ba <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f043 0206 	orr.w	r2, r3, #6
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	f043 0220 	orr.w	r2, r3, #32
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075c6:	b004      	add	sp, #16
 80075c8:	4770      	bx	lr
	...

080075cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d165      	bne.n	80076ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	4a41      	ldr	r2, [pc, #260]	; (80076e8 <USB_SetTurnaroundTime+0x11c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d906      	bls.n	80075f6 <USB_SetTurnaroundTime+0x2a>
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4a40      	ldr	r2, [pc, #256]	; (80076ec <USB_SetTurnaroundTime+0x120>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d202      	bcs.n	80075f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80075f0:	230f      	movs	r3, #15
 80075f2:	617b      	str	r3, [r7, #20]
 80075f4:	e062      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4a3c      	ldr	r2, [pc, #240]	; (80076ec <USB_SetTurnaroundTime+0x120>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d306      	bcc.n	800760c <USB_SetTurnaroundTime+0x40>
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	4a3b      	ldr	r2, [pc, #236]	; (80076f0 <USB_SetTurnaroundTime+0x124>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d202      	bcs.n	800760c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007606:	230e      	movs	r3, #14
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	e057      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	4a38      	ldr	r2, [pc, #224]	; (80076f0 <USB_SetTurnaroundTime+0x124>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d306      	bcc.n	8007622 <USB_SetTurnaroundTime+0x56>
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4a37      	ldr	r2, [pc, #220]	; (80076f4 <USB_SetTurnaroundTime+0x128>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d202      	bcs.n	8007622 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800761c:	230d      	movs	r3, #13
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	e04c      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4a33      	ldr	r2, [pc, #204]	; (80076f4 <USB_SetTurnaroundTime+0x128>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d306      	bcc.n	8007638 <USB_SetTurnaroundTime+0x6c>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	4a32      	ldr	r2, [pc, #200]	; (80076f8 <USB_SetTurnaroundTime+0x12c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d802      	bhi.n	8007638 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007632:	230c      	movs	r3, #12
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	e041      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4a2f      	ldr	r2, [pc, #188]	; (80076f8 <USB_SetTurnaroundTime+0x12c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d906      	bls.n	800764e <USB_SetTurnaroundTime+0x82>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	4a2e      	ldr	r2, [pc, #184]	; (80076fc <USB_SetTurnaroundTime+0x130>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d802      	bhi.n	800764e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007648:	230b      	movs	r3, #11
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	e036      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	4a2a      	ldr	r2, [pc, #168]	; (80076fc <USB_SetTurnaroundTime+0x130>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d906      	bls.n	8007664 <USB_SetTurnaroundTime+0x98>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	4a29      	ldr	r2, [pc, #164]	; (8007700 <USB_SetTurnaroundTime+0x134>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d802      	bhi.n	8007664 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800765e:	230a      	movs	r3, #10
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	e02b      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	4a26      	ldr	r2, [pc, #152]	; (8007700 <USB_SetTurnaroundTime+0x134>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d906      	bls.n	800767a <USB_SetTurnaroundTime+0xae>
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4a25      	ldr	r2, [pc, #148]	; (8007704 <USB_SetTurnaroundTime+0x138>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d202      	bcs.n	800767a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007674:	2309      	movs	r3, #9
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e020      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4a21      	ldr	r2, [pc, #132]	; (8007704 <USB_SetTurnaroundTime+0x138>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d306      	bcc.n	8007690 <USB_SetTurnaroundTime+0xc4>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	4a20      	ldr	r2, [pc, #128]	; (8007708 <USB_SetTurnaroundTime+0x13c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d802      	bhi.n	8007690 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800768a:	2308      	movs	r3, #8
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	e015      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4a1d      	ldr	r2, [pc, #116]	; (8007708 <USB_SetTurnaroundTime+0x13c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d906      	bls.n	80076a6 <USB_SetTurnaroundTime+0xda>
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	4a1c      	ldr	r2, [pc, #112]	; (800770c <USB_SetTurnaroundTime+0x140>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d202      	bcs.n	80076a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80076a0:	2307      	movs	r3, #7
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	e00a      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80076a6:	2306      	movs	r3, #6
 80076a8:	617b      	str	r3, [r7, #20]
 80076aa:	e007      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d102      	bne.n	80076b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80076b2:	2309      	movs	r3, #9
 80076b4:	617b      	str	r3, [r7, #20]
 80076b6:	e001      	b.n	80076bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80076b8:	2309      	movs	r3, #9
 80076ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	68da      	ldr	r2, [r3, #12]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	029b      	lsls	r3, r3, #10
 80076d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80076d4:	431a      	orrs	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80076da:	2300      	movs	r3, #0
}
 80076dc:	4618      	mov	r0, r3
 80076de:	371c      	adds	r7, #28
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr
 80076e8:	00d8acbf 	.word	0x00d8acbf
 80076ec:	00e4e1c0 	.word	0x00e4e1c0
 80076f0:	00f42400 	.word	0x00f42400
 80076f4:	01067380 	.word	0x01067380
 80076f8:	011a499f 	.word	0x011a499f
 80076fc:	01312cff 	.word	0x01312cff
 8007700:	014ca43f 	.word	0x014ca43f
 8007704:	016e3600 	.word	0x016e3600
 8007708:	01a6ab1f 	.word	0x01a6ab1f
 800770c:	01e84800 	.word	0x01e84800

08007710 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f043 0201 	orr.w	r2, r3, #1
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007732:	b480      	push	{r7}
 8007734:	b083      	sub	sp, #12
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f023 0201 	bic.w	r2, r3, #1
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007746:	2300      	movs	r3, #0
}
 8007748:	4618      	mov	r0, r3
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007770:	78fb      	ldrb	r3, [r7, #3]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d115      	bne.n	80077a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007782:	2001      	movs	r0, #1
 8007784:	f7fa f80e 	bl	80017a4 <HAL_Delay>
      ms++;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f001 fa45 	bl	8008c1e <USB_GetMode>
 8007794:	4603      	mov	r3, r0
 8007796:	2b01      	cmp	r3, #1
 8007798:	d01e      	beq.n	80077d8 <USB_SetCurrentMode+0x84>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b31      	cmp	r3, #49	; 0x31
 800779e:	d9f0      	bls.n	8007782 <USB_SetCurrentMode+0x2e>
 80077a0:	e01a      	b.n	80077d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80077a2:	78fb      	ldrb	r3, [r7, #3]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d115      	bne.n	80077d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80077b4:	2001      	movs	r0, #1
 80077b6:	f7f9 fff5 	bl	80017a4 <HAL_Delay>
      ms++;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	3301      	adds	r3, #1
 80077be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f001 fa2c 	bl	8008c1e <USB_GetMode>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <USB_SetCurrentMode+0x84>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b31      	cmp	r3, #49	; 0x31
 80077d0:	d9f0      	bls.n	80077b4 <USB_SetCurrentMode+0x60>
 80077d2:	e001      	b.n	80077d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e005      	b.n	80077e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b32      	cmp	r3, #50	; 0x32
 80077dc:	d101      	bne.n	80077e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e000      	b.n	80077e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3710      	adds	r7, #16
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077ec:	b084      	sub	sp, #16
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b086      	sub	sp, #24
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80077fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80077fe:	2300      	movs	r3, #0
 8007800:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007806:	2300      	movs	r3, #0
 8007808:	613b      	str	r3, [r7, #16]
 800780a:	e009      	b.n	8007820 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	3340      	adds	r3, #64	; 0x40
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	4413      	add	r3, r2
 8007816:	2200      	movs	r2, #0
 8007818:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	3301      	adds	r3, #1
 800781e:	613b      	str	r3, [r7, #16]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	2b0e      	cmp	r3, #14
 8007824:	d9f2      	bls.n	800780c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007826:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007828:	2b00      	cmp	r3, #0
 800782a:	d11c      	bne.n	8007866 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800783a:	f043 0302 	orr.w	r3, r3, #2
 800783e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007844:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007850:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800785c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	639a      	str	r2, [r3, #56]	; 0x38
 8007864:	e00b      	b.n	800787e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007876:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007884:	461a      	mov	r2, r3
 8007886:	2300      	movs	r3, #0
 8007888:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007890:	4619      	mov	r1, r3
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007898:	461a      	mov	r2, r3
 800789a:	680b      	ldr	r3, [r1, #0]
 800789c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800789e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d10c      	bne.n	80078be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80078a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d104      	bne.n	80078b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80078aa:	2100      	movs	r1, #0
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 f965 	bl	8007b7c <USB_SetDevSpeed>
 80078b2:	e008      	b.n	80078c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80078b4:	2101      	movs	r1, #1
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f960 	bl	8007b7c <USB_SetDevSpeed>
 80078bc:	e003      	b.n	80078c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80078be:	2103      	movs	r1, #3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f95b 	bl	8007b7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80078c6:	2110      	movs	r1, #16
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 f8f3 	bl	8007ab4 <USB_FlushTxFifo>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d001      	beq.n	80078d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f91f 	bl	8007b1c <USB_FlushRxFifo>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078ee:	461a      	mov	r2, r3
 80078f0:	2300      	movs	r3, #0
 80078f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078fa:	461a      	mov	r2, r3
 80078fc:	2300      	movs	r3, #0
 80078fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007906:	461a      	mov	r2, r3
 8007908:	2300      	movs	r3, #0
 800790a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800790c:	2300      	movs	r3, #0
 800790e:	613b      	str	r3, [r7, #16]
 8007910:	e043      	b.n	800799a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	015a      	lsls	r2, r3, #5
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4413      	add	r3, r2
 800791a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007928:	d118      	bne.n	800795c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10a      	bne.n	8007946 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800793c:	461a      	mov	r2, r3
 800793e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007942:	6013      	str	r3, [r2, #0]
 8007944:	e013      	b.n	800796e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007952:	461a      	mov	r2, r3
 8007954:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	e008      	b.n	800796e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007968:	461a      	mov	r2, r3
 800796a:	2300      	movs	r3, #0
 800796c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	4413      	add	r3, r2
 8007976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797a:	461a      	mov	r2, r3
 800797c:	2300      	movs	r3, #0
 800797e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798c:	461a      	mov	r2, r3
 800798e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007992:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	3301      	adds	r3, #1
 8007998:	613b      	str	r3, [r7, #16]
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	693a      	ldr	r2, [r7, #16]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3b7      	bcc.n	8007912 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
 80079a6:	e043      	b.n	8007a30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	015a      	lsls	r2, r3, #5
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	4413      	add	r3, r2
 80079b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079be:	d118      	bne.n	80079f2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10a      	bne.n	80079dc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	015a      	lsls	r2, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4413      	add	r3, r2
 80079ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d2:	461a      	mov	r2, r3
 80079d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e013      	b.n	8007a04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e8:	461a      	mov	r2, r3
 80079ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	e008      	b.n	8007a04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079fe:	461a      	mov	r2, r3
 8007a00:	2300      	movs	r3, #0
 8007a02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	015a      	lsls	r2, r3, #5
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a10:	461a      	mov	r2, r3
 8007a12:	2300      	movs	r3, #0
 8007a14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	015a      	lsls	r2, r3, #5
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	4413      	add	r3, r2
 8007a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a22:	461a      	mov	r2, r3
 8007a24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007a28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	613b      	str	r3, [r7, #16]
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d3b7      	bcc.n	80079a8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007a58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d105      	bne.n	8007a6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	f043 0210 	orr.w	r2, r3, #16
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699a      	ldr	r2, [r3, #24]
 8007a70:	4b0f      	ldr	r3, [pc, #60]	; (8007ab0 <USB_DevInit+0x2c4>)
 8007a72:	4313      	orrs	r3, r2
 8007a74:	687a      	ldr	r2, [r7, #4]
 8007a76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007a78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	f043 0208 	orr.w	r2, r3, #8
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007a8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d107      	bne.n	8007aa0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a98:	f043 0304 	orr.w	r3, r3, #4
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3718      	adds	r7, #24
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007aac:	b004      	add	sp, #16
 8007aae:	4770      	bx	lr
 8007ab0:	803c3800 	.word	0x803c3800

08007ab4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	4a13      	ldr	r2, [pc, #76]	; (8007b18 <USB_FlushTxFifo+0x64>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e01b      	b.n	8007b0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	daf2      	bge.n	8007ac2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	019b      	lsls	r3, r3, #6
 8007ae4:	f043 0220 	orr.w	r2, r3, #32
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	3301      	adds	r3, #1
 8007af0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	4a08      	ldr	r2, [pc, #32]	; (8007b18 <USB_FlushTxFifo+0x64>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d901      	bls.n	8007afe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e006      	b.n	8007b0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	f003 0320 	and.w	r3, r3, #32
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d0f0      	beq.n	8007aec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3714      	adds	r7, #20
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	00030d40 	.word	0x00030d40

08007b1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b085      	sub	sp, #20
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	4a11      	ldr	r2, [pc, #68]	; (8007b78 <USB_FlushRxFifo+0x5c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d901      	bls.n	8007b3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e018      	b.n	8007b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	daf2      	bge.n	8007b28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2210      	movs	r2, #16
 8007b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	4a08      	ldr	r2, [pc, #32]	; (8007b78 <USB_FlushRxFifo+0x5c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d901      	bls.n	8007b5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e006      	b.n	8007b6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	691b      	ldr	r3, [r3, #16]
 8007b62:	f003 0310 	and.w	r3, r3, #16
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d0f0      	beq.n	8007b4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	00030d40 	.word	0x00030d40

08007b7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b085      	sub	sp, #20
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	460b      	mov	r3, r1
 8007b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007bae:	b480      	push	{r7}
 8007bb0:	b087      	sub	sp, #28
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0306 	and.w	r3, r3, #6
 8007bc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	75fb      	strb	r3, [r7, #23]
 8007bd2:	e00a      	b.n	8007bea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d002      	beq.n	8007be0 <USB_GetDevSpeed+0x32>
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b06      	cmp	r3, #6
 8007bde:	d102      	bne.n	8007be6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007be0:	2302      	movs	r3, #2
 8007be2:	75fb      	strb	r3, [r7, #23]
 8007be4:	e001      	b.n	8007bea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007be6:	230f      	movs	r3, #15
 8007be8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	371c      	adds	r7, #28
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	785b      	ldrb	r3, [r3, #1]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d13a      	bne.n	8007c8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c1a:	69da      	ldr	r2, [r3, #28]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	2101      	movs	r1, #1
 8007c26:	fa01 f303 	lsl.w	r3, r1, r3
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	68f9      	ldr	r1, [r7, #12]
 8007c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007c32:	4313      	orrs	r3, r2
 8007c34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d155      	bne.n	8007cf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	68db      	ldr	r3, [r3, #12]
 8007c5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	791b      	ldrb	r3, [r3, #4]
 8007c66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	059b      	lsls	r3, r3, #22
 8007c6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007c70:	4313      	orrs	r3, r2
 8007c72:	68ba      	ldr	r2, [r7, #8]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	e036      	b.n	8007cf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c90:	69da      	ldr	r2, [r3, #28]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8007ca0:	041b      	lsls	r3, r3, #16
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d11a      	bne.n	8007cf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	791b      	ldrb	r3, [r3, #4]
 8007cdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007cde:	430b      	orrs	r3, r1
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	68ba      	ldr	r2, [r7, #8]
 8007ce4:	0151      	lsls	r1, r2, #5
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	440a      	add	r2, r1
 8007cea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	785b      	ldrb	r3, [r3, #1]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d161      	bne.n	8007de8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	015a      	lsls	r2, r3, #5
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d3a:	d11f      	bne.n	8007d7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68ba      	ldr	r2, [r7, #8]
 8007d4c:	0151      	lsls	r1, r2, #5
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	440a      	add	r2, r1
 8007d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	0151      	lsls	r1, r2, #5
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	440a      	add	r2, r1
 8007d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007d92:	b29b      	uxth	r3, r3
 8007d94:	43db      	mvns	r3, r3
 8007d96:	68f9      	ldr	r1, [r7, #12]
 8007d98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da6:	69da      	ldr	r2, [r3, #28]
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	f003 030f 	and.w	r3, r3, #15
 8007db0:	2101      	movs	r1, #1
 8007db2:	fa01 f303 	lsl.w	r3, r1, r3
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	43db      	mvns	r3, r3
 8007dba:	68f9      	ldr	r1, [r7, #12]
 8007dbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007dc0:	4013      	ands	r3, r2
 8007dc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	015a      	lsls	r2, r3, #5
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	0159      	lsls	r1, r3, #5
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	440b      	add	r3, r1
 8007dda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dde:	4619      	mov	r1, r3
 8007de0:	4b35      	ldr	r3, [pc, #212]	; (8007eb8 <USB_DeactivateEndpoint+0x1b0>)
 8007de2:	4013      	ands	r3, r2
 8007de4:	600b      	str	r3, [r1, #0]
 8007de6:	e060      	b.n	8007eaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	015a      	lsls	r2, r3, #5
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	4413      	add	r3, r2
 8007df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007dfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dfe:	d11f      	bne.n	8007e40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	015a      	lsls	r2, r3, #5
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	0151      	lsls	r1, r2, #5
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	440a      	add	r2, r1
 8007e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	015a      	lsls	r2, r3, #5
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	4413      	add	r3, r2
 8007e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68ba      	ldr	r2, [r7, #8]
 8007e30:	0151      	lsls	r1, r2, #5
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	440a      	add	r2, r1
 8007e36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	781b      	ldrb	r3, [r3, #0]
 8007e4c:	f003 030f 	and.w	r3, r3, #15
 8007e50:	2101      	movs	r1, #1
 8007e52:	fa01 f303 	lsl.w	r3, r1, r3
 8007e56:	041b      	lsls	r3, r3, #16
 8007e58:	43db      	mvns	r3, r3
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e60:	4013      	ands	r3, r2
 8007e62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e6a:	69da      	ldr	r2, [r3, #28]
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	2101      	movs	r1, #1
 8007e76:	fa01 f303 	lsl.w	r3, r1, r3
 8007e7a:	041b      	lsls	r3, r3, #16
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	68f9      	ldr	r1, [r7, #12]
 8007e80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e84:	4013      	ands	r3, r2
 8007e86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e94:	681a      	ldr	r2, [r3, #0]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	0159      	lsls	r1, r3, #5
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	440b      	add	r3, r1
 8007e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <USB_DeactivateEndpoint+0x1b4>)
 8007ea6:	4013      	ands	r3, r2
 8007ea8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr
 8007eb8:	ec337800 	.word	0xec337800
 8007ebc:	eff37800 	.word	0xeff37800

08007ec0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b08a      	sub	sp, #40	; 0x28
 8007ec4:	af02      	add	r7, sp, #8
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	785b      	ldrb	r3, [r3, #1]
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	f040 815c 	bne.w	800819a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d132      	bne.n	8007f50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	0151      	lsls	r1, r2, #5
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	440a      	add	r2, r1
 8007f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	0151      	lsls	r1, r2, #5
 8007f20:	69fa      	ldr	r2, [r7, #28]
 8007f22:	440a      	add	r2, r1
 8007f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	0151      	lsls	r1, r2, #5
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	440a      	add	r2, r1
 8007f44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f48:	0cdb      	lsrs	r3, r3, #19
 8007f4a:	04db      	lsls	r3, r3, #19
 8007f4c:	6113      	str	r3, [r2, #16]
 8007f4e:	e074      	b.n	800803a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007f50:	69bb      	ldr	r3, [r7, #24]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	0151      	lsls	r1, r2, #5
 8007f62:	69fa      	ldr	r2, [r7, #28]
 8007f64:	440a      	add	r2, r1
 8007f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f6a:	0cdb      	lsrs	r3, r3, #19
 8007f6c:	04db      	lsls	r3, r3, #19
 8007f6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	69ba      	ldr	r2, [r7, #24]
 8007f80:	0151      	lsls	r1, r2, #5
 8007f82:	69fa      	ldr	r2, [r7, #28]
 8007f84:	440a      	add	r2, r1
 8007f86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	69fb      	ldr	r3, [r7, #28]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	6999      	ldr	r1, [r3, #24]
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	440b      	add	r3, r1
 8007fac:	1e59      	subs	r1, r3, #1
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8007fb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007fb8:	4b9d      	ldr	r3, [pc, #628]	; (8008230 <USB_EPStartXfer+0x370>)
 8007fba:	400b      	ands	r3, r1
 8007fbc:	69b9      	ldr	r1, [r7, #24]
 8007fbe:	0148      	lsls	r0, r1, #5
 8007fc0:	69f9      	ldr	r1, [r7, #28]
 8007fc2:	4401      	add	r1, r0
 8007fc4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	015a      	lsls	r2, r3, #5
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd8:	691a      	ldr	r2, [r3, #16]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fe2:	69b9      	ldr	r1, [r7, #24]
 8007fe4:	0148      	lsls	r0, r1, #5
 8007fe6:	69f9      	ldr	r1, [r7, #28]
 8007fe8:	4401      	add	r1, r0
 8007fea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	791b      	ldrb	r3, [r3, #4]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d11f      	bne.n	800803a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007ffa:	69bb      	ldr	r3, [r7, #24]
 8007ffc:	015a      	lsls	r2, r3, #5
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	4413      	add	r3, r2
 8008002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008006:	691b      	ldr	r3, [r3, #16]
 8008008:	69ba      	ldr	r2, [r7, #24]
 800800a:	0151      	lsls	r1, r2, #5
 800800c:	69fa      	ldr	r2, [r7, #28]
 800800e:	440a      	add	r2, r1
 8008010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008014:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008018:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	015a      	lsls	r2, r3, #5
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	4413      	add	r3, r2
 8008022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	69ba      	ldr	r2, [r7, #24]
 800802a:	0151      	lsls	r1, r2, #5
 800802c:	69fa      	ldr	r2, [r7, #28]
 800802e:	440a      	add	r2, r1
 8008030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008034:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008038:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	2b01      	cmp	r3, #1
 800803e:	d14b      	bne.n	80080d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008054:	461a      	mov	r2, r3
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	791b      	ldrb	r3, [r3, #4]
 8008060:	2b01      	cmp	r3, #1
 8008062:	d128      	bne.n	80080b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008070:	2b00      	cmp	r3, #0
 8008072:	d110      	bne.n	8008096 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	015a      	lsls	r2, r3, #5
 8008078:	69fb      	ldr	r3, [r7, #28]
 800807a:	4413      	add	r3, r2
 800807c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	69ba      	ldr	r2, [r7, #24]
 8008084:	0151      	lsls	r1, r2, #5
 8008086:	69fa      	ldr	r2, [r7, #28]
 8008088:	440a      	add	r2, r1
 800808a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800808e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008092:	6013      	str	r3, [r2, #0]
 8008094:	e00f      	b.n	80080b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	0151      	lsls	r1, r2, #5
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	440a      	add	r2, r1
 80080ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	0151      	lsls	r1, r2, #5
 80080c8:	69fa      	ldr	r2, [r7, #28]
 80080ca:	440a      	add	r2, r1
 80080cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080d4:	6013      	str	r3, [r2, #0]
 80080d6:	e133      	b.n	8008340 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	0151      	lsls	r1, r2, #5
 80080ea:	69fa      	ldr	r2, [r7, #28]
 80080ec:	440a      	add	r2, r1
 80080ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80080f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	791b      	ldrb	r3, [r3, #4]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d015      	beq.n	800812c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	699b      	ldr	r3, [r3, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 811b 	beq.w	8008340 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	2101      	movs	r1, #1
 800811c:	fa01 f303 	lsl.w	r3, r1, r3
 8008120:	69f9      	ldr	r1, [r7, #28]
 8008122:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008126:	4313      	orrs	r3, r2
 8008128:	634b      	str	r3, [r1, #52]	; 0x34
 800812a:	e109      	b.n	8008340 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800812c:	69fb      	ldr	r3, [r7, #28]
 800812e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008138:	2b00      	cmp	r3, #0
 800813a:	d110      	bne.n	800815e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	0151      	lsls	r1, r2, #5
 800814e:	69fa      	ldr	r2, [r7, #28]
 8008150:	440a      	add	r2, r1
 8008152:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008156:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800815a:	6013      	str	r3, [r2, #0]
 800815c:	e00f      	b.n	800817e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800817c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	6919      	ldr	r1, [r3, #16]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	781a      	ldrb	r2, [r3, #0]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	b298      	uxth	r0, r3
 800818c:	79fb      	ldrb	r3, [r7, #7]
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	4603      	mov	r3, r0
 8008192:	68f8      	ldr	r0, [r7, #12]
 8008194:	f000 fade 	bl	8008754 <USB_WritePacket>
 8008198:	e0d2      	b.n	8008340 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	0151      	lsls	r1, r2, #5
 80081ac:	69fa      	ldr	r2, [r7, #28]
 80081ae:	440a      	add	r2, r1
 80081b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081b4:	0cdb      	lsrs	r3, r3, #19
 80081b6:	04db      	lsls	r3, r3, #19
 80081b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	015a      	lsls	r2, r3, #5
 80081be:	69fb      	ldr	r3, [r7, #28]
 80081c0:	4413      	add	r3, r2
 80081c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	69ba      	ldr	r2, [r7, #24]
 80081ca:	0151      	lsls	r1, r2, #5
 80081cc:	69fa      	ldr	r2, [r7, #28]
 80081ce:	440a      	add	r2, r1
 80081d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	699b      	ldr	r3, [r3, #24]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d126      	bne.n	8008234 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80081e6:	69bb      	ldr	r3, [r7, #24]
 80081e8:	015a      	lsls	r2, r3, #5
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081f2:	691a      	ldr	r2, [r3, #16]
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	68db      	ldr	r3, [r3, #12]
 80081f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081fc:	69b9      	ldr	r1, [r7, #24]
 80081fe:	0148      	lsls	r0, r1, #5
 8008200:	69f9      	ldr	r1, [r7, #28]
 8008202:	4401      	add	r1, r0
 8008204:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008208:	4313      	orrs	r3, r2
 800820a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	0151      	lsls	r1, r2, #5
 800821e:	69fa      	ldr	r2, [r7, #28]
 8008220:	440a      	add	r2, r1
 8008222:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800822a:	6113      	str	r3, [r2, #16]
 800822c:	e03a      	b.n	80082a4 <USB_EPStartXfer+0x3e4>
 800822e:	bf00      	nop
 8008230:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	699a      	ldr	r2, [r3, #24]
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	4413      	add	r3, r2
 800823e:	1e5a      	subs	r2, r3, #1
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	8afa      	ldrh	r2, [r7, #22]
 8008250:	fb03 f202 	mul.w	r2, r3, r2
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008258:	69bb      	ldr	r3, [r7, #24]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008264:	691a      	ldr	r2, [r3, #16]
 8008266:	8afb      	ldrh	r3, [r7, #22]
 8008268:	04d9      	lsls	r1, r3, #19
 800826a:	4b38      	ldr	r3, [pc, #224]	; (800834c <USB_EPStartXfer+0x48c>)
 800826c:	400b      	ands	r3, r1
 800826e:	69b9      	ldr	r1, [r7, #24]
 8008270:	0148      	lsls	r0, r1, #5
 8008272:	69f9      	ldr	r1, [r7, #28]
 8008274:	4401      	add	r1, r0
 8008276:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800827a:	4313      	orrs	r3, r2
 800827c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	69fb      	ldr	r3, [r7, #28]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	69db      	ldr	r3, [r3, #28]
 8008290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008294:	69b9      	ldr	r1, [r7, #24]
 8008296:	0148      	lsls	r0, r1, #5
 8008298:	69f9      	ldr	r1, [r7, #28]
 800829a:	4401      	add	r1, r0
 800829c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082a0:	4313      	orrs	r3, r2
 80082a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d10d      	bne.n	80082c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d009      	beq.n	80082c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6919      	ldr	r1, [r3, #16]
 80082b6:	69bb      	ldr	r3, [r7, #24]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	460a      	mov	r2, r1
 80082c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	791b      	ldrb	r3, [r3, #4]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d128      	bne.n	8008320 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082d4:	689b      	ldr	r3, [r3, #8]
 80082d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d110      	bne.n	8008300 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80082de:	69bb      	ldr	r3, [r7, #24]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	69fb      	ldr	r3, [r7, #28]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	69ba      	ldr	r2, [r7, #24]
 80082ee:	0151      	lsls	r1, r2, #5
 80082f0:	69fa      	ldr	r2, [r7, #28]
 80082f2:	440a      	add	r2, r1
 80082f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80082fc:	6013      	str	r3, [r2, #0]
 80082fe:	e00f      	b.n	8008320 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	015a      	lsls	r2, r3, #5
 8008304:	69fb      	ldr	r3, [r7, #28]
 8008306:	4413      	add	r3, r2
 8008308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	69ba      	ldr	r2, [r7, #24]
 8008310:	0151      	lsls	r1, r2, #5
 8008312:	69fa      	ldr	r2, [r7, #28]
 8008314:	440a      	add	r2, r1
 8008316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800831a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800831e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008320:	69bb      	ldr	r3, [r7, #24]
 8008322:	015a      	lsls	r2, r3, #5
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	4413      	add	r3, r2
 8008328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	69ba      	ldr	r2, [r7, #24]
 8008330:	0151      	lsls	r1, r2, #5
 8008332:	69fa      	ldr	r2, [r7, #28]
 8008334:	440a      	add	r2, r1
 8008336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800833a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800833e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008340:	2300      	movs	r3, #0
}
 8008342:	4618      	mov	r0, r3
 8008344:	3720      	adds	r7, #32
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	1ff80000 	.word	0x1ff80000

08008350 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	4613      	mov	r3, r2
 800835c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	785b      	ldrb	r3, [r3, #1]
 800836c:	2b01      	cmp	r3, #1
 800836e:	f040 80ce 	bne.w	800850e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d132      	bne.n	80083e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	015a      	lsls	r2, r3, #5
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	4413      	add	r3, r2
 8008382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	693a      	ldr	r2, [r7, #16]
 800838a:	0151      	lsls	r1, r2, #5
 800838c:	697a      	ldr	r2, [r7, #20]
 800838e:	440a      	add	r2, r1
 8008390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800839c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	015a      	lsls	r2, r3, #5
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	4413      	add	r3, r2
 80083a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	693a      	ldr	r2, [r7, #16]
 80083ae:	0151      	lsls	r1, r2, #5
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	440a      	add	r2, r1
 80083b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	015a      	lsls	r2, r3, #5
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	4413      	add	r3, r2
 80083c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	693a      	ldr	r2, [r7, #16]
 80083ce:	0151      	lsls	r1, r2, #5
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	440a      	add	r2, r1
 80083d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083d8:	0cdb      	lsrs	r3, r3, #19
 80083da:	04db      	lsls	r3, r3, #19
 80083dc:	6113      	str	r3, [r2, #16]
 80083de:	e04e      	b.n	800847e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	015a      	lsls	r2, r3, #5
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	4413      	add	r3, r2
 80083e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	0151      	lsls	r1, r2, #5
 80083f2:	697a      	ldr	r2, [r7, #20]
 80083f4:	440a      	add	r2, r1
 80083f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083fa:	0cdb      	lsrs	r3, r3, #19
 80083fc:	04db      	lsls	r3, r3, #19
 80083fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	015a      	lsls	r2, r3, #5
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	4413      	add	r3, r2
 8008408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	0151      	lsls	r1, r2, #5
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	440a      	add	r2, r1
 8008416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800841a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800841e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008422:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	699a      	ldr	r2, [r3, #24]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d903      	bls.n	8008438 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008444:	691b      	ldr	r3, [r3, #16]
 8008446:	693a      	ldr	r2, [r7, #16]
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	699b      	ldr	r3, [r3, #24]
 800846a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800846e:	6939      	ldr	r1, [r7, #16]
 8008470:	0148      	lsls	r0, r1, #5
 8008472:	6979      	ldr	r1, [r7, #20]
 8008474:	4401      	add	r1, r0
 8008476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800847a:	4313      	orrs	r3, r2
 800847c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800847e:	79fb      	ldrb	r3, [r7, #7]
 8008480:	2b01      	cmp	r3, #1
 8008482:	d11e      	bne.n	80084c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008498:	461a      	mov	r2, r3
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084a0:	693b      	ldr	r3, [r7, #16]
 80084a2:	015a      	lsls	r2, r3, #5
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	693a      	ldr	r2, [r7, #16]
 80084b0:	0151      	lsls	r1, r2, #5
 80084b2:	697a      	ldr	r2, [r7, #20]
 80084b4:	440a      	add	r2, r1
 80084b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	e097      	b.n	80085f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	0151      	lsls	r1, r2, #5
 80084d4:	697a      	ldr	r2, [r7, #20]
 80084d6:	440a      	add	r2, r1
 80084d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80084e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f000 8083 	beq.w	80085f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	f003 030f 	and.w	r3, r3, #15
 80084fc:	2101      	movs	r1, #1
 80084fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008502:	6979      	ldr	r1, [r7, #20]
 8008504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008508:	4313      	orrs	r3, r2
 800850a:	634b      	str	r3, [r1, #52]	; 0x34
 800850c:	e071      	b.n	80085f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	015a      	lsls	r2, r3, #5
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	4413      	add	r3, r2
 8008516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	693a      	ldr	r2, [r7, #16]
 800851e:	0151      	lsls	r1, r2, #5
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	440a      	add	r2, r1
 8008524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008528:	0cdb      	lsrs	r3, r3, #19
 800852a:	04db      	lsls	r3, r3, #19
 800852c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	693a      	ldr	r2, [r7, #16]
 800853e:	0151      	lsls	r1, r2, #5
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	440a      	add	r2, r1
 8008544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008548:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800854c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008550:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	68da      	ldr	r2, [r3, #12]
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008562:	68bb      	ldr	r3, [r7, #8]
 8008564:	68da      	ldr	r2, [r3, #12]
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	0151      	lsls	r1, r2, #5
 800857c:	697a      	ldr	r2, [r7, #20]
 800857e:	440a      	add	r2, r1
 8008580:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008584:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085a0:	6939      	ldr	r1, [r7, #16]
 80085a2:	0148      	lsls	r0, r1, #5
 80085a4:	6979      	ldr	r1, [r7, #20]
 80085a6:	4401      	add	r1, r0
 80085a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80085ac:	4313      	orrs	r3, r2
 80085ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d10d      	bne.n	80085d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d009      	beq.n	80085d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	6919      	ldr	r1, [r3, #16]
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	460a      	mov	r2, r1
 80085d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	015a      	lsls	r2, r3, #5
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	4413      	add	r3, r2
 80085da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	0151      	lsls	r1, r2, #5
 80085e4:	697a      	ldr	r2, [r7, #20]
 80085e6:	440a      	add	r2, r1
 80085e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80085f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	371c      	adds	r7, #28
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008600:	b480      	push	{r7}
 8008602:	b087      	sub	sp, #28
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800860a:	2300      	movs	r3, #0
 800860c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800860e:	2300      	movs	r3, #0
 8008610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d14a      	bne.n	80086b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008636:	f040 8086 	bne.w	8008746 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	015a      	lsls	r2, r3, #5
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4413      	add	r3, r2
 8008644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	7812      	ldrb	r2, [r2, #0]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008658:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800865c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	015a      	lsls	r2, r3, #5
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	4413      	add	r3, r2
 8008668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	7812      	ldrb	r2, [r2, #0]
 8008672:	0151      	lsls	r1, r2, #5
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	440a      	add	r2, r1
 8008678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800867c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008680:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3301      	adds	r3, #1
 8008686:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f242 7210 	movw	r2, #10000	; 0x2710
 800868e:	4293      	cmp	r3, r2
 8008690:	d902      	bls.n	8008698 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	75fb      	strb	r3, [r7, #23]
          break;
 8008696:	e056      	b.n	8008746 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	015a      	lsls	r2, r3, #5
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	4413      	add	r3, r2
 80086a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086b0:	d0e7      	beq.n	8008682 <USB_EPStopXfer+0x82>
 80086b2:	e048      	b.n	8008746 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	015a      	lsls	r2, r3, #5
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	4413      	add	r3, r2
 80086be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80086c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80086cc:	d13b      	bne.n	8008746 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	683a      	ldr	r2, [r7, #0]
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	0151      	lsls	r1, r2, #5
 80086e4:	693a      	ldr	r2, [r7, #16]
 80086e6:	440a      	add	r2, r1
 80086e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80086f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	7812      	ldrb	r2, [r2, #0]
 8008706:	0151      	lsls	r1, r2, #5
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	440a      	add	r2, r1
 800870c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f242 7210 	movw	r2, #10000	; 0x2710
 8008722:	4293      	cmp	r3, r2
 8008724:	d902      	bls.n	800872c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	75fb      	strb	r3, [r7, #23]
          break;
 800872a:	e00c      	b.n	8008746 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008744:	d0e7      	beq.n	8008716 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008746:	7dfb      	ldrb	r3, [r7, #23]
}
 8008748:	4618      	mov	r0, r3
 800874a:	371c      	adds	r7, #28
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008754:	b480      	push	{r7}
 8008756:	b089      	sub	sp, #36	; 0x24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	4611      	mov	r1, r2
 8008760:	461a      	mov	r2, r3
 8008762:	460b      	mov	r3, r1
 8008764:	71fb      	strb	r3, [r7, #7]
 8008766:	4613      	mov	r3, r2
 8008768:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008776:	2b00      	cmp	r3, #0
 8008778:	d123      	bne.n	80087c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800877a:	88bb      	ldrh	r3, [r7, #4]
 800877c:	3303      	adds	r3, #3
 800877e:	089b      	lsrs	r3, r3, #2
 8008780:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008782:	2300      	movs	r3, #0
 8008784:	61bb      	str	r3, [r7, #24]
 8008786:	e018      	b.n	80087ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008788:	79fb      	ldrb	r3, [r7, #7]
 800878a:	031a      	lsls	r2, r3, #12
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	4413      	add	r3, r2
 8008790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008794:	461a      	mov	r2, r3
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800879c:	69fb      	ldr	r3, [r7, #28]
 800879e:	3301      	adds	r3, #1
 80087a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087a2:	69fb      	ldr	r3, [r7, #28]
 80087a4:	3301      	adds	r3, #1
 80087a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80087ae:	69fb      	ldr	r3, [r7, #28]
 80087b0:	3301      	adds	r3, #1
 80087b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	3301      	adds	r3, #1
 80087b8:	61bb      	str	r3, [r7, #24]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d3e2      	bcc.n	8008788 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3724      	adds	r7, #36	; 0x24
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b08b      	sub	sp, #44	; 0x2c
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	4613      	mov	r3, r2
 80087dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80087e6:	88fb      	ldrh	r3, [r7, #6]
 80087e8:	089b      	lsrs	r3, r3, #2
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80087ee:	88fb      	ldrh	r3, [r7, #6]
 80087f0:	f003 0303 	and.w	r3, r3, #3
 80087f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80087f6:	2300      	movs	r3, #0
 80087f8:	623b      	str	r3, [r7, #32]
 80087fa:	e014      	b.n	8008826 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008806:	601a      	str	r2, [r3, #0]
    pDest++;
 8008808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880a:	3301      	adds	r3, #1
 800880c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800880e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008810:	3301      	adds	r3, #1
 8008812:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008816:	3301      	adds	r3, #1
 8008818:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881c:	3301      	adds	r3, #1
 800881e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	3301      	adds	r3, #1
 8008824:	623b      	str	r3, [r7, #32]
 8008826:	6a3a      	ldr	r2, [r7, #32]
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	429a      	cmp	r2, r3
 800882c:	d3e6      	bcc.n	80087fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800882e:	8bfb      	ldrh	r3, [r7, #30]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d01e      	beq.n	8008872 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883e:	461a      	mov	r2, r3
 8008840:	f107 0310 	add.w	r3, r7, #16
 8008844:	6812      	ldr	r2, [r2, #0]
 8008846:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	6a3b      	ldr	r3, [r7, #32]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	00db      	lsls	r3, r3, #3
 8008850:	fa22 f303 	lsr.w	r3, r2, r3
 8008854:	b2da      	uxtb	r2, r3
 8008856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008858:	701a      	strb	r2, [r3, #0]
      i++;
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	3301      	adds	r3, #1
 800885e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	3301      	adds	r3, #1
 8008864:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008866:	8bfb      	ldrh	r3, [r7, #30]
 8008868:	3b01      	subs	r3, #1
 800886a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800886c:	8bfb      	ldrh	r3, [r7, #30]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d1ea      	bne.n	8008848 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008874:	4618      	mov	r0, r3
 8008876:	372c      	adds	r7, #44	; 0x2c
 8008878:	46bd      	mov	sp, r7
 800887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887e:	4770      	bx	lr

08008880 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	785b      	ldrb	r3, [r3, #1]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d12c      	bne.n	80088f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	db12      	blt.n	80088d4 <USB_EPSetStall+0x54>
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00f      	beq.n	80088d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80088d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	e02b      	b.n	800894e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	015a      	lsls	r2, r3, #5
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	4413      	add	r3, r2
 80088fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	db12      	blt.n	800892e <USB_EPSetStall+0xae>
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00f      	beq.n	800892e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	015a      	lsls	r2, r3, #5
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	4413      	add	r3, r2
 8008916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	0151      	lsls	r1, r2, #5
 8008920:	68fa      	ldr	r2, [r7, #12]
 8008922:	440a      	add	r2, r1
 8008924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800892c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	0151      	lsls	r1, r2, #5
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	440a      	add	r2, r1
 8008944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800894c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3714      	adds	r7, #20
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800895c:	b480      	push	{r7}
 800895e:	b085      	sub	sp, #20
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	781b      	ldrb	r3, [r3, #0]
 800896e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d128      	bne.n	80089ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	015a      	lsls	r2, r3, #5
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	4413      	add	r3, r2
 8008980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68ba      	ldr	r2, [r7, #8]
 8008988:	0151      	lsls	r1, r2, #5
 800898a:	68fa      	ldr	r2, [r7, #12]
 800898c:	440a      	add	r2, r1
 800898e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008996:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	791b      	ldrb	r3, [r3, #4]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d003      	beq.n	80089a8 <USB_EPClearStall+0x4c>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	791b      	ldrb	r3, [r3, #4]
 80089a4:	2b02      	cmp	r3, #2
 80089a6:	d138      	bne.n	8008a1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	e027      	b.n	8008a1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	015a      	lsls	r2, r3, #5
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4413      	add	r3, r2
 80089d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	68ba      	ldr	r2, [r7, #8]
 80089da:	0151      	lsls	r1, r2, #5
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	440a      	add	r2, r1
 80089e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80089e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	791b      	ldrb	r3, [r3, #4]
 80089ee:	2b03      	cmp	r3, #3
 80089f0:	d003      	beq.n	80089fa <USB_EPClearStall+0x9e>
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	791b      	ldrb	r3, [r3, #4]
 80089f6:	2b02      	cmp	r3, #2
 80089f8:	d10f      	bne.n	8008a1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	015a      	lsls	r2, r3, #5
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	4413      	add	r3, r2
 8008a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	0151      	lsls	r1, r2, #5
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	440a      	add	r2, r1
 8008a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	460b      	mov	r3, r1
 8008a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008a4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	011b      	lsls	r3, r3, #4
 8008a58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008a5c:	68f9      	ldr	r1, [r7, #12]
 8008a5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a62:	4313      	orrs	r3, r2
 8008a64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a8e:	f023 0303 	bic.w	r3, r3, #3
 8008a92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aa2:	f023 0302 	bic.w	r3, r3, #2
 8008aa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr

08008ab6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ab6:	b480      	push	{r7}
 8008ab8:	b085      	sub	sp, #20
 8008aba:	af00      	add	r7, sp, #0
 8008abc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ad0:	f023 0303 	bic.w	r3, r3, #3
 8008ad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68fa      	ldr	r2, [r7, #12]
 8008ae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ae4:	f043 0302 	orr.w	r3, r3, #2
 8008ae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	695b      	ldr	r3, [r3, #20]
 8008b04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	699b      	ldr	r3, [r3, #24]
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	4013      	ands	r3, r2
 8008b0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008b10:	68fb      	ldr	r3, [r7, #12]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr

08008b1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b1e:	b480      	push	{r7}
 8008b20:	b085      	sub	sp, #20
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b30:	699b      	ldr	r3, [r3, #24]
 8008b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	68ba      	ldr	r2, [r7, #8]
 8008b3e:	4013      	ands	r3, r2
 8008b40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	0c1b      	lsrs	r3, r3, #16
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3714      	adds	r7, #20
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b64:	699b      	ldr	r3, [r3, #24]
 8008b66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6e:	69db      	ldr	r3, [r3, #28]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	4013      	ands	r3, r2
 8008b74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	b29b      	uxth	r3, r3
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	460b      	mov	r3, r1
 8008b90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008b96:	78fb      	ldrb	r3, [r7, #3]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bac:	695b      	ldr	r3, [r3, #20]
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008bb4:	68bb      	ldr	r3, [r7, #8]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3714      	adds	r7, #20
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008bc2:	b480      	push	{r7}
 8008bc4:	b087      	sub	sp, #28
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	6078      	str	r0, [r7, #4]
 8008bca:	460b      	mov	r3, r1
 8008bcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008bd2:	697b      	ldr	r3, [r7, #20]
 8008bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008be6:	78fb      	ldrb	r3, [r7, #3]
 8008be8:	f003 030f 	and.w	r3, r3, #15
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf2:	01db      	lsls	r3, r3, #7
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c08:	689b      	ldr	r3, [r3, #8]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008c10:	68bb      	ldr	r3, [r7, #8]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	371c      	adds	r7, #28
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr

08008c1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1e:	b480      	push	{r7}
 8008c20:	b083      	sub	sp, #12
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	f003 0301 	and.w	r3, r3, #1
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b085      	sub	sp, #20
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	68fa      	ldr	r2, [r7, #12]
 8008c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008c58:	f023 0307 	bic.w	r3, r3, #7
 8008c5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c72:	2300      	movs	r3, #0
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	333c      	adds	r3, #60	; 0x3c
 8008c96:	3304      	adds	r3, #4
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	4a26      	ldr	r2, [pc, #152]	; (8008d38 <USB_EP0_OutStart+0xb8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d90a      	bls.n	8008cba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cb4:	d101      	bne.n	8008cba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e037      	b.n	8008d2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	697a      	ldr	r2, [r7, #20]
 8008cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ce8:	f043 0318 	orr.w	r3, r3, #24
 8008cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008d00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008d02:	7afb      	ldrb	r3, [r7, #11]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d10f      	bne.n	8008d28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	697a      	ldr	r2, [r7, #20]
 8008d1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008d26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008d28:	2300      	movs	r3, #0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	371c      	adds	r7, #28
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	4f54300a 	.word	0x4f54300a

08008d3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d44:	2300      	movs	r3, #0
 8008d46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	4a13      	ldr	r2, [pc, #76]	; (8008da0 <USB_CoreReset+0x64>)
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d901      	bls.n	8008d5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e01b      	b.n	8008d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	daf2      	bge.n	8008d48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d62:	2300      	movs	r3, #0
 8008d64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	f043 0201 	orr.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	4a09      	ldr	r2, [pc, #36]	; (8008da0 <USB_CoreReset+0x64>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d901      	bls.n	8008d84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d80:	2303      	movs	r3, #3
 8008d82:	e006      	b.n	8008d92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	691b      	ldr	r3, [r3, #16]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d0f0      	beq.n	8008d72 <USB_CoreReset+0x36>

  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr
 8008d9e:	bf00      	nop
 8008da0:	00030d40 	.word	0x00030d40

08008da4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
 8008dac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dae:	2300      	movs	r3, #0
 8008db0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8008db2:	6839      	ldr	r1, [r7, #0]
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f001 fcb2 	bl	800a71e <VL53L0X_get_offset_calibration_data_micro_meter>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8008dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
	...

08008dcc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8008dcc:	b5b0      	push	{r4, r5, r7, lr}
 8008dce:	b096      	sub	sp, #88	; 0x58
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8008dda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8008de2:	2200      	movs	r2, #0
 8008de4:	2188      	movs	r1, #136	; 0x88
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f004 feaa 	bl	800db40 <VL53L0X_WrByte>
 8008dec:	4603      	mov	r3, r0
 8008dee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008e00:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8008e0a:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a9e      	ldr	r2, [pc, #632]	; (800908c <VL53L0X_DataInit+0x2c0>)
 8008e12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a9d      	ldr	r2, [pc, #628]	; (8009090 <VL53L0X_DataInit+0x2c4>)
 8008e1a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8008e24:	f107 0310 	add.w	r3, r7, #16
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 fac2 	bl	80093b4 <VL53L0X_GetDeviceParameters>
 8008e30:	4603      	mov	r3, r0
 8008e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8008e36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d112      	bne.n	8008e64 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8008e42:	2300      	movs	r3, #0
 8008e44:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f103 0410 	add.w	r4, r3, #16
 8008e4c:	f107 0510 	add.w	r5, r7, #16
 8008e50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008e60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2264      	movs	r2, #100	; 0x64
 8008e68:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f44f 7261 	mov.w	r2, #900	; 0x384
 8008e72:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008e7c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8008e86:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008e92:	2201      	movs	r2, #1
 8008e94:	2180      	movs	r1, #128	; 0x80
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f004 fe52 	bl	800db40 <VL53L0X_WrByte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008eaa:	2201      	movs	r2, #1
 8008eac:	21ff      	movs	r1, #255	; 0xff
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f004 fe46 	bl	800db40 <VL53L0X_WrByte>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f004 fe3a 	bl	800db40 <VL53L0X_WrByte>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8008eda:	f107 030f 	add.w	r3, r7, #15
 8008ede:	461a      	mov	r2, r3
 8008ee0:	2191      	movs	r1, #145	; 0x91
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f004 feae 	bl	800dc44 <VL53L0X_RdByte>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	461a      	mov	r2, r3
 8008eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8008ef6:	7bfa      	ldrb	r2, [r7, #15]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008efe:	2201      	movs	r2, #1
 8008f00:	2100      	movs	r1, #0
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f004 fe1c 	bl	800db40 <VL53L0X_WrByte>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	461a      	mov	r2, r3
 8008f0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f10:	4313      	orrs	r3, r2
 8008f12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008f16:	2200      	movs	r2, #0
 8008f18:	21ff      	movs	r1, #255	; 0xff
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f004 fe10 	bl	800db40 <VL53L0X_WrByte>
 8008f20:	4603      	mov	r3, r0
 8008f22:	461a      	mov	r2, r3
 8008f24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f28:	4313      	orrs	r3, r2
 8008f2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008f2e:	2200      	movs	r2, #0
 8008f30:	2180      	movs	r1, #128	; 0x80
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f004 fe04 	bl	800db40 <VL53L0X_WrByte>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f40:	4313      	orrs	r3, r2
 8008f42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008f46:	2300      	movs	r3, #0
 8008f48:	653b      	str	r3, [r7, #80]	; 0x50
 8008f4a:	e014      	b.n	8008f76 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8008f4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d114      	bne.n	8008f7e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8008f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	2201      	movs	r2, #1
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fd35 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
 8008f62:	4603      	mov	r3, r0
 8008f64:	461a      	mov	r2, r3
 8008f66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8008f70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f72:	3301      	adds	r3, #1
 8008f74:	653b      	str	r3, [r7, #80]	; 0x50
 8008f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f78:	2b05      	cmp	r3, #5
 8008f7a:	dde7      	ble.n	8008f4c <VL53L0X_DataInit+0x180>
 8008f7c:	e000      	b.n	8008f80 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8008f7e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8008f80:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d107      	bne.n	8008f98 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2102      	movs	r1, #2
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fd1d 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
 8008f92:	4603      	mov	r3, r0
 8008f94:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008f98:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d107      	bne.n	8008fb0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2103      	movs	r1, #3
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fd11 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008fb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d107      	bne.n	8008fc8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2104      	movs	r1, #4
 8008fbc:	6878      	ldr	r0, [r7, #4]
 8008fbe:	f000 fd05 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8008fc8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d107      	bne.n	8008fe0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2105      	movs	r1, #5
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fcf9 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
 8008fda:	4603      	mov	r3, r0
 8008fdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8008fe0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d108      	bne.n	8008ffa <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8008fe8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8008fec:	2100      	movs	r1, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fd9c 	bl	8009b2c <VL53L0X_SetLimitCheckValue>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008ffa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d108      	bne.n	8009014 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009006:	2101      	movs	r1, #1
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 fd8f 	bl	8009b2c <VL53L0X_SetLimitCheckValue>
 800900e:	4603      	mov	r3, r0
 8009010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009014:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009018:	2b00      	cmp	r3, #0
 800901a:	d108      	bne.n	800902e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800901c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8009020:	2102      	movs	r1, #2
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fd82 	bl	8009b2c <VL53L0X_SetLimitCheckValue>
 8009028:	4603      	mov	r3, r0
 800902a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800902e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009032:	2b00      	cmp	r3, #0
 8009034:	d107      	bne.n	8009046 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8009036:	2200      	movs	r2, #0
 8009038:	2103      	movs	r1, #3
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fd76 	bl	8009b2c <VL53L0X_SetLimitCheckValue>
 8009040:	4603      	mov	r3, r0
 8009042:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009046:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800904a:	2b00      	cmp	r3, #0
 800904c:	d10f      	bne.n	800906e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	22ff      	movs	r2, #255	; 0xff
 8009052:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009056:	22ff      	movs	r2, #255	; 0xff
 8009058:	2101      	movs	r1, #1
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f004 fd70 	bl	800db40 <VL53L0X_WrByte>
 8009060:	4603      	mov	r3, r0
 8009062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2201      	movs	r2, #1
 800906a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800906e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009072:	2b00      	cmp	r3, #0
 8009074:	d103      	bne.n	800907e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800907e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009082:	4618      	mov	r0, r3
 8009084:	3758      	adds	r7, #88	; 0x58
 8009086:	46bd      	mov	sp, r7
 8009088:	bdb0      	pop	{r4, r5, r7, pc}
 800908a:	bf00      	nop
 800908c:	00016b85 	.word	0x00016b85
 8009090:	000970a4 	.word	0x000970a4

08009094 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8009094:	b5b0      	push	{r4, r5, r7, lr}
 8009096:	b09e      	sub	sp, #120	; 0x78
 8009098:	af02      	add	r7, sp, #8
 800909a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800909c:	2300      	movs	r3, #0
 800909e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80090a2:	f107 031c 	add.w	r3, r7, #28
 80090a6:	2240      	movs	r2, #64	; 0x40
 80090a8:	2100      	movs	r1, #0
 80090aa:	4618      	mov	r0, r3
 80090ac:	f00a ffca 	bl	8014044 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80090b0:	2300      	movs	r3, #0
 80090b2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80090b4:	2300      	movs	r3, #0
 80090b6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80090b8:	2300      	movs	r3, #0
 80090ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80090be:	2300      	movs	r3, #0
 80090c0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80090c2:	2300      	movs	r3, #0
 80090c4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80090ca:	2300      	movs	r3, #0
 80090cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80090d0:	2101      	movs	r1, #1
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f002 fa79 	bl	800b5ca <VL53L0X_get_info_from_device>
 80090d8:	4603      	mov	r3, r0
 80090da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80090e4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80090ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80090f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d80d      	bhi.n	8009114 <VL53L0X_StaticInit+0x80>
 80090f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d102      	bne.n	8009106 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8009100:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009102:	2b20      	cmp	r3, #32
 8009104:	d806      	bhi.n	8009114 <VL53L0X_StaticInit+0x80>
 8009106:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800910a:	2b00      	cmp	r3, #0
 800910c:	d10e      	bne.n	800912c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800910e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009110:	2b0c      	cmp	r3, #12
 8009112:	d90b      	bls.n	800912c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8009114:	f107 0218 	add.w	r2, r7, #24
 8009118:	f107 0314 	add.w	r3, r7, #20
 800911c:	4619      	mov	r1, r3
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f001 fcf8 	bl	800ab14 <VL53L0X_perform_ref_spad_management>
 8009124:	4603      	mov	r3, r0
 8009126:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800912a:	e009      	b.n	8009140 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800912c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009130:	461a      	mov	r2, r3
 8009132:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f001 fef9 	bl	800af2c <VL53L0X_set_reference_spads>
 800913a:	4603      	mov	r3, r0
 800913c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8009140:	4b94      	ldr	r3, [pc, #592]	; (8009394 <VL53L0X_StaticInit+0x300>)
 8009142:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8009144:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10f      	bne.n	800916c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8009152:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8009156:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8009164:	66bb      	str	r3, [r7, #104]	; 0x68
 8009166:	e001      	b.n	800916c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8009168:	4b8a      	ldr	r3, [pc, #552]	; (8009394 <VL53L0X_StaticInit+0x300>)
 800916a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800916c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009170:	2b00      	cmp	r3, #0
 8009172:	d106      	bne.n	8009182 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8009174:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f003 fdcc 	bl	800cd14 <VL53L0X_load_tuning_settings>
 800917c:	4603      	mov	r3, r0
 800917e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8009182:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10a      	bne.n	80091a0 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800918a:	2300      	movs	r3, #0
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	2304      	movs	r3, #4
 8009190:	2200      	movs	r2, #0
 8009192:	2100      	movs	r1, #0
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f001 f8f1 	bl	800a37c <VL53L0X_SetGpioConfig>
 800919a:	4603      	mov	r3, r0
 800919c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80091a0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d121      	bne.n	80091ec <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80091a8:	2201      	movs	r2, #1
 80091aa:	21ff      	movs	r1, #255	; 0xff
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f004 fcc7 	bl	800db40 <VL53L0X_WrByte>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80091b8:	f107 031a 	add.w	r3, r7, #26
 80091bc:	461a      	mov	r2, r3
 80091be:	2184      	movs	r1, #132	; 0x84
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f004 fd69 	bl	800dc98 <VL53L0X_RdWord>
 80091c6:	4603      	mov	r3, r0
 80091c8:	461a      	mov	r2, r3
 80091ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80091ce:	4313      	orrs	r3, r2
 80091d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80091d4:	2200      	movs	r2, #0
 80091d6:	21ff      	movs	r1, #255	; 0xff
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	f004 fcb1 	bl	800db40 <VL53L0X_WrByte>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80091ec:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d105      	bne.n	8009200 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80091f4:	8b7b      	ldrh	r3, [r7, #26]
 80091f6:	011b      	lsls	r3, r3, #4
 80091f8:	461a      	mov	r2, r3
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8009200:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009204:	2b00      	cmp	r3, #0
 8009206:	d108      	bne.n	800921a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8009208:	f107 031c 	add.w	r3, r7, #28
 800920c:	4619      	mov	r1, r3
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f8d0 	bl	80093b4 <VL53L0X_GetDeviceParameters>
 8009214:	4603      	mov	r3, r0
 8009216:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800921a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800921e:	2b00      	cmp	r3, #0
 8009220:	d110      	bne.n	8009244 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8009222:	f107 0319 	add.w	r3, r7, #25
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 f992 	bl	8009552 <VL53L0X_GetFractionEnable>
 800922e:	4603      	mov	r3, r0
 8009230:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8009234:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009238:	2b00      	cmp	r3, #0
 800923a:	d103      	bne.n	8009244 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800923c:	7e7a      	ldrb	r2, [r7, #25]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8009244:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10e      	bne.n	800926a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f103 0410 	add.w	r4, r3, #16
 8009252:	f107 051c 	add.w	r5, r7, #28
 8009256:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800925a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800925c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800925e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009262:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009266:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800926a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800926e:	2b00      	cmp	r3, #0
 8009270:	d111      	bne.n	8009296 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8009272:	f107 0319 	add.w	r3, r7, #25
 8009276:	461a      	mov	r2, r3
 8009278:	2101      	movs	r1, #1
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f004 fce2 	bl	800dc44 <VL53L0X_RdByte>
 8009280:	4603      	mov	r3, r0
 8009282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8009286:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800928a:	2b00      	cmp	r3, #0
 800928c:	d103      	bne.n	8009296 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800928e:	7e7a      	ldrb	r2, [r7, #25]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8009296:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800929a:	2b00      	cmp	r3, #0
 800929c:	d107      	bne.n	80092ae <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800929e:	2200      	movs	r2, #0
 80092a0:	2100      	movs	r1, #0
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f9ca 	bl	800963c <VL53L0X_SetSequenceStepEnable>
 80092a8:	4603      	mov	r3, r0
 80092aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80092ae:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d107      	bne.n	80092c6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80092b6:	2200      	movs	r2, #0
 80092b8:	2102      	movs	r1, #2
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f9be 	bl	800963c <VL53L0X_SetSequenceStepEnable>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 80092c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d103      	bne.n	80092d6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2203      	movs	r2, #3
 80092d2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 80092d6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d109      	bne.n	80092f2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 80092de:	f107 0313 	add.w	r3, r7, #19
 80092e2:	461a      	mov	r2, r3
 80092e4:	2100      	movs	r1, #0
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f990 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 80092ec:	4603      	mov	r3, r0
 80092ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80092f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d103      	bne.n	8009302 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80092fa:	7cfa      	ldrb	r2, [r7, #19]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8009302:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009306:	2b00      	cmp	r3, #0
 8009308:	d109      	bne.n	800931e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800930a:	f107 0313 	add.w	r3, r7, #19
 800930e:	461a      	mov	r2, r3
 8009310:	2101      	movs	r1, #1
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f97a 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 8009318:	4603      	mov	r3, r0
 800931a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800931e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009322:	2b00      	cmp	r3, #0
 8009324:	d103      	bne.n	800932e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009326:	7cfa      	ldrb	r2, [r7, #19]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800932e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8009332:	2b00      	cmp	r3, #0
 8009334:	d109      	bne.n	800934a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8009336:	f107 030c 	add.w	r3, r7, #12
 800933a:	461a      	mov	r2, r3
 800933c:	2103      	movs	r1, #3
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f002 fec4 	bl	800c0cc <get_sequence_step_timeout>
 8009344:	4603      	mov	r3, r0
 8009346:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800934a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800934e:	2b00      	cmp	r3, #0
 8009350:	d103      	bne.n	800935a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009352:	68fa      	ldr	r2, [r7, #12]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800935a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800935e:	2b00      	cmp	r3, #0
 8009360:	d109      	bne.n	8009376 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8009362:	f107 030c 	add.w	r3, r7, #12
 8009366:	461a      	mov	r2, r3
 8009368:	2104      	movs	r1, #4
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f002 feae 	bl	800c0cc <get_sequence_step_timeout>
 8009370:	4603      	mov	r3, r0
 8009372:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009376:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800937a:	2b00      	cmp	r3, #0
 800937c:	d103      	bne.n	8009386 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009386:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800938a:	4618      	mov	r0, r3
 800938c:	3770      	adds	r7, #112	; 0x70
 800938e:	46bd      	mov	sp, r7
 8009390:	bdb0      	pop	{r4, r5, r7, pc}
 8009392:	bf00      	nop
 8009394:	200001c4 	.word	0x200001c4

08009398 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80093a0:	239d      	movs	r3, #157	; 0x9d
 80093a2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80093a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093be:	2300      	movs	r3, #0
 80093c0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	4619      	mov	r1, r3
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f000 f8b0 	bl	800952c <VL53L0X_GetDeviceMode>
 80093cc:	4603      	mov	r3, r0
 80093ce:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80093d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d107      	bne.n	80093e8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	3308      	adds	r3, #8
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 fa78 	bl	80098d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 80093e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d102      	bne.n	80093f6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2200      	movs	r2, #0
 80093f4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 80093f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d107      	bne.n	800940e <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	3310      	adds	r3, #16
 8009402:	4619      	mov	r1, r3
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 faae 	bl	8009966 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800940e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d107      	bne.n	8009426 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	3314      	adds	r3, #20
 800941a:	4619      	mov	r1, r3
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fcc1 	bl	8008da4 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8009426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d134      	bne.n	8009498 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800942e:	2300      	movs	r3, #0
 8009430:	60bb      	str	r3, [r7, #8]
 8009432:	e02a      	b.n	800948a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d12a      	bne.n	8009492 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	b299      	uxth	r1, r3
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	3308      	adds	r3, #8
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	683a      	ldr	r2, [r7, #0]
 8009448:	4413      	add	r3, r2
 800944a:	3304      	adds	r3, #4
 800944c:	461a      	mov	r2, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f000 fbce 	bl	8009bf0 <VL53L0X_GetLimitCheckValue>
 8009454:	4603      	mov	r3, r0
 8009456:	461a      	mov	r2, r3
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	4313      	orrs	r3, r2
 800945c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800945e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d117      	bne.n	8009496 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	b299      	uxth	r1, r3
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	3318      	adds	r3, #24
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	4413      	add	r3, r2
 8009472:	461a      	mov	r2, r3
 8009474:	6878      	ldr	r0, [r7, #4]
 8009476:	f000 fb35 	bl	8009ae4 <VL53L0X_GetLimitCheckEnable>
 800947a:	4603      	mov	r3, r0
 800947c:	461a      	mov	r2, r3
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	4313      	orrs	r3, r2
 8009482:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	3301      	adds	r3, #1
 8009488:	60bb      	str	r3, [r7, #8]
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	2b05      	cmp	r3, #5
 800948e:	ddd1      	ble.n	8009434 <VL53L0X_GetDeviceParameters+0x80>
 8009490:	e002      	b.n	8009498 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8009492:	bf00      	nop
 8009494:	e000      	b.n	8009498 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8009496:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d107      	bne.n	80094b0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	333c      	adds	r3, #60	; 0x3c
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fc30 	bl	8009d0c <VL53L0X_GetWrapAroundCheckEnable>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80094b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d107      	bne.n	80094c8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 f879 	bl	80095b6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80094c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	460b      	mov	r3, r1
 80094de:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 80094e4:	78fb      	ldrb	r3, [r7, #3]
 80094e6:	2b15      	cmp	r3, #21
 80094e8:	bf8c      	ite	hi
 80094ea:	2201      	movhi	r2, #1
 80094ec:	2200      	movls	r2, #0
 80094ee:	b2d2      	uxtb	r2, r2
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d10e      	bne.n	8009512 <VL53L0X_SetDeviceMode+0x3e>
 80094f4:	2201      	movs	r2, #1
 80094f6:	409a      	lsls	r2, r3
 80094f8:	4b0b      	ldr	r3, [pc, #44]	; (8009528 <VL53L0X_SetDeviceMode+0x54>)
 80094fa:	4013      	ands	r3, r2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	bf14      	ite	ne
 8009500:	2301      	movne	r3, #1
 8009502:	2300      	moveq	r3, #0
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d003      	beq.n	8009512 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	78fa      	ldrb	r2, [r7, #3]
 800950e:	741a      	strb	r2, [r3, #16]
		break;
 8009510:	e001      	b.n	8009516 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8009512:	23f8      	movs	r3, #248	; 0xf8
 8009514:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009516:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3714      	adds	r7, #20
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	0030000b 	.word	0x0030000b

0800952c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	7c1a      	ldrb	r2, [r3, #16]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009542:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8009552:	b580      	push	{r7, lr}
 8009554:	b084      	sub	sp, #16
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
 800955a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800955c:	2300      	movs	r3, #0
 800955e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	2109      	movs	r1, #9
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f004 fb6d 	bl	800dc44 <VL53L0X_RdByte>
 800956a:	4603      	mov	r3, r0
 800956c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800956e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d106      	bne.n	8009584 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	781b      	ldrb	r3, [r3, #0]
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009584:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009588:	4618      	mov	r0, r3
 800958a:	3710      	adds	r7, #16
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800959a:	2300      	movs	r3, #0
 800959c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f003 fa26 	bl	800c9f2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80095a6:	4603      	mov	r3, r0
 80095a8:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80095aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}

080095b6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b084      	sub	sp, #16
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 80095c4:	6839      	ldr	r1, [r7, #0]
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f003 faf3 	bl	800cbb2 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 80095cc:	4603      	mov	r3, r0
 80095ce:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 80095d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	460b      	mov	r3, r1
 80095e6:	70fb      	strb	r3, [r7, #3]
 80095e8:	4613      	mov	r3, r2
 80095ea:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80095ec:	2300      	movs	r3, #0
 80095ee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 80095f0:	78ba      	ldrb	r2, [r7, #2]
 80095f2:	78fb      	ldrb	r3, [r7, #3]
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f002 ff3b 	bl	800c472 <VL53L0X_set_vcsel_pulse_period>
 80095fc:	4603      	mov	r3, r0
 80095fe:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8009600:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3710      	adds	r7, #16
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	60f8      	str	r0, [r7, #12]
 8009614:	460b      	mov	r3, r1
 8009616:	607a      	str	r2, [r7, #4]
 8009618:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4619      	mov	r1, r3
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f003 f9ad 	bl	800c984 <VL53L0X_get_vcsel_pulse_period>
 800962a:	4603      	mov	r3, r0
 800962c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800962e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}
	...

0800963c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b086      	sub	sp, #24
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
 8009648:	4613      	mov	r3, r2
 800964a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800964c:	2300      	movs	r3, #0
 800964e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009658:	f107 030f 	add.w	r3, r7, #15
 800965c:	461a      	mov	r2, r3
 800965e:	2101      	movs	r1, #1
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f004 faef 	bl	800dc44 <VL53L0X_RdByte>
 8009666:	4603      	mov	r3, r0
 8009668:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800966a:	7bfb      	ldrb	r3, [r7, #15]
 800966c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800966e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d15a      	bne.n	800972c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8009676:	78bb      	ldrb	r3, [r7, #2]
 8009678:	2b01      	cmp	r3, #1
 800967a:	d12b      	bne.n	80096d4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800967c:	78fb      	ldrb	r3, [r7, #3]
 800967e:	2b04      	cmp	r3, #4
 8009680:	d825      	bhi.n	80096ce <VL53L0X_SetSequenceStepEnable+0x92>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	0800969d 	.word	0x0800969d
 800968c:	080096a7 	.word	0x080096a7
 8009690:	080096b1 	.word	0x080096b1
 8009694:	080096bb 	.word	0x080096bb
 8009698:	080096c5 	.word	0x080096c5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800969c:	7dbb      	ldrb	r3, [r7, #22]
 800969e:	f043 0310 	orr.w	r3, r3, #16
 80096a2:	75bb      	strb	r3, [r7, #22]
				break;
 80096a4:	e043      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80096a6:	7dbb      	ldrb	r3, [r7, #22]
 80096a8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80096ac:	75bb      	strb	r3, [r7, #22]
				break;
 80096ae:	e03e      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80096b0:	7dbb      	ldrb	r3, [r7, #22]
 80096b2:	f043 0304 	orr.w	r3, r3, #4
 80096b6:	75bb      	strb	r3, [r7, #22]
				break;
 80096b8:	e039      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80096ba:	7dbb      	ldrb	r3, [r7, #22]
 80096bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096c0:	75bb      	strb	r3, [r7, #22]
				break;
 80096c2:	e034      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 80096c4:	7dbb      	ldrb	r3, [r7, #22]
 80096c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096ca:	75bb      	strb	r3, [r7, #22]
				break;
 80096cc:	e02f      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80096ce:	23fc      	movs	r3, #252	; 0xfc
 80096d0:	75fb      	strb	r3, [r7, #23]
 80096d2:	e02c      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 80096d4:	78fb      	ldrb	r3, [r7, #3]
 80096d6:	2b04      	cmp	r3, #4
 80096d8:	d825      	bhi.n	8009726 <VL53L0X_SetSequenceStepEnable+0xea>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	080096f5 	.word	0x080096f5
 80096e4:	080096ff 	.word	0x080096ff
 80096e8:	08009709 	.word	0x08009709
 80096ec:	08009713 	.word	0x08009713
 80096f0:	0800971d 	.word	0x0800971d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 80096f4:	7dbb      	ldrb	r3, [r7, #22]
 80096f6:	f023 0310 	bic.w	r3, r3, #16
 80096fa:	75bb      	strb	r3, [r7, #22]
				break;
 80096fc:	e017      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80096fe:	7dbb      	ldrb	r3, [r7, #22]
 8009700:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8009704:	75bb      	strb	r3, [r7, #22]
				break;
 8009706:	e012      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8009708:	7dbb      	ldrb	r3, [r7, #22]
 800970a:	f023 0304 	bic.w	r3, r3, #4
 800970e:	75bb      	strb	r3, [r7, #22]
				break;
 8009710:	e00d      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8009712:	7dbb      	ldrb	r3, [r7, #22]
 8009714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009718:	75bb      	strb	r3, [r7, #22]
				break;
 800971a:	e008      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800971c:	7dbb      	ldrb	r3, [r7, #22]
 800971e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009722:	75bb      	strb	r3, [r7, #22]
				break;
 8009724:	e003      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009726:	23fc      	movs	r3, #252	; 0xfc
 8009728:	75fb      	strb	r3, [r7, #23]
 800972a:	e000      	b.n	800972e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800972c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	7dba      	ldrb	r2, [r7, #22]
 8009732:	429a      	cmp	r2, r3
 8009734:	d01e      	beq.n	8009774 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8009736:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d107      	bne.n	800974e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800973e:	7dbb      	ldrb	r3, [r7, #22]
 8009740:	461a      	mov	r2, r3
 8009742:	2101      	movs	r1, #1
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f004 f9fb 	bl	800db40 <VL53L0X_WrByte>
 800974a:	4603      	mov	r3, r0
 800974c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800974e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d103      	bne.n	800975e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	7dba      	ldrb	r2, [r7, #22]
 800975a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800975e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d106      	bne.n	8009774 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	695b      	ldr	r3, [r3, #20]
 800976a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800976c:	6939      	ldr	r1, [r7, #16]
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff ff0e 	bl	8009590 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8009774:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	72fb      	strb	r3, [r7, #11]
 800978e:	4613      	mov	r3, r2
 8009790:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009792:	2300      	movs	r3, #0
 8009794:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	2b04      	cmp	r3, #4
 80097a0:	d836      	bhi.n	8009810 <sequence_step_enabled+0x90>
 80097a2:	a201      	add	r2, pc, #4	; (adr r2, 80097a8 <sequence_step_enabled+0x28>)
 80097a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a8:	080097bd 	.word	0x080097bd
 80097ac:	080097cf 	.word	0x080097cf
 80097b0:	080097e1 	.word	0x080097e1
 80097b4:	080097f3 	.word	0x080097f3
 80097b8:	08009805 	.word	0x08009805
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80097bc:	7abb      	ldrb	r3, [r7, #10]
 80097be:	111b      	asrs	r3, r3, #4
 80097c0:	b2db      	uxtb	r3, r3
 80097c2:	f003 0301 	and.w	r3, r3, #1
 80097c6:	b2da      	uxtb	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	701a      	strb	r2, [r3, #0]
		break;
 80097cc:	e022      	b.n	8009814 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 80097ce:	7abb      	ldrb	r3, [r7, #10]
 80097d0:	10db      	asrs	r3, r3, #3
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	f003 0301 	and.w	r3, r3, #1
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	701a      	strb	r2, [r3, #0]
		break;
 80097de:	e019      	b.n	8009814 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 80097e0:	7abb      	ldrb	r3, [r7, #10]
 80097e2:	109b      	asrs	r3, r3, #2
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	f003 0301 	and.w	r3, r3, #1
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	701a      	strb	r2, [r3, #0]
		break;
 80097f0:	e010      	b.n	8009814 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 80097f2:	7abb      	ldrb	r3, [r7, #10]
 80097f4:	119b      	asrs	r3, r3, #6
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	701a      	strb	r2, [r3, #0]
		break;
 8009802:	e007      	b.n	8009814 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8009804:	7abb      	ldrb	r3, [r7, #10]
 8009806:	09db      	lsrs	r3, r3, #7
 8009808:	b2da      	uxtb	r2, r3
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	701a      	strb	r2, [r3, #0]
		break;
 800980e:	e001      	b.n	8009814 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009810:	23fc      	movs	r3, #252	; 0xfc
 8009812:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009814:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009818:	4618      	mov	r0, r3
 800981a:	371c      	adds	r7, #28
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b084      	sub	sp, #16
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800982e:	2300      	movs	r3, #0
 8009830:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009836:	f107 030e 	add.w	r3, r7, #14
 800983a:	461a      	mov	r2, r3
 800983c:	2101      	movs	r1, #1
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f004 fa00 	bl	800dc44 <VL53L0X_RdByte>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8009848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d107      	bne.n	8009860 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8009850:	7bba      	ldrb	r2, [r7, #14]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2100      	movs	r1, #0
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7ff ff92 	bl	8009780 <sequence_step_enabled>
 800985c:	4603      	mov	r3, r0
 800985e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d108      	bne.n	800987a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8009868:	7bba      	ldrb	r2, [r7, #14]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	3302      	adds	r3, #2
 800986e:	2101      	movs	r1, #1
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7ff ff85 	bl	8009780 <sequence_step_enabled>
 8009876:	4603      	mov	r3, r0
 8009878:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800987a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d108      	bne.n	8009894 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8009882:	7bba      	ldrb	r2, [r7, #14]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	2102      	movs	r1, #2
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f7ff ff78 	bl	8009780 <sequence_step_enabled>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d108      	bne.n	80098ae <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800989c:	7bba      	ldrb	r2, [r7, #14]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	3303      	adds	r3, #3
 80098a2:	2103      	movs	r1, #3
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7ff ff6b 	bl	8009780 <sequence_step_enabled>
 80098aa:	4603      	mov	r3, r0
 80098ac:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80098ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d108      	bne.n	80098c8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80098b6:	7bba      	ldrb	r2, [r7, #14]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	3304      	adds	r3, #4
 80098bc:	2104      	movs	r1, #4
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff ff5e 	bl	8009780 <sequence_step_enabled>
 80098c4:	4603      	mov	r3, r0
 80098c6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80098c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80098de:	2300      	movs	r3, #0
 80098e0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80098e2:	f107 030c 	add.w	r3, r7, #12
 80098e6:	461a      	mov	r2, r3
 80098e8:	21f8      	movs	r1, #248	; 0xf8
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f004 f9d4 	bl	800dc98 <VL53L0X_RdWord>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80098f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d108      	bne.n	800990e <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80098fc:	f107 0308 	add.w	r3, r7, #8
 8009900:	461a      	mov	r2, r3
 8009902:	2104      	movs	r1, #4
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f004 f9ff 	bl	800dd08 <VL53L0X_RdDWord>
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800990e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10c      	bne.n	8009930 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8009916:	89bb      	ldrh	r3, [r7, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d005      	beq.n	8009928 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	89ba      	ldrh	r2, [r7, #12]
 8009920:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009930:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	7f1b      	ldrb	r3, [r3, #28]
 800994e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	7bba      	ldrb	r2, [r7, #14]
 8009954:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8009956:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
 800996e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009970:	2300      	movs	r3, #0
 8009972:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8009974:	f107 030e 	add.w	r3, r7, #14
 8009978:	461a      	mov	r2, r3
 800997a:	2120      	movs	r1, #32
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f004 f98b 	bl	800dc98 <VL53L0X_RdWord>
 8009982:	4603      	mov	r3, r0
 8009984:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8009986:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d118      	bne.n	80099c0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800998e:	89fb      	ldrh	r3, [r7, #14]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d109      	bne.n	80099a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	693a      	ldr	r2, [r7, #16]
 800999e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2200      	movs	r2, #0
 80099a4:	771a      	strb	r2, [r3, #28]
 80099a6:	e00b      	b.n	80099c0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80099a8:	89fb      	ldrh	r3, [r7, #14]
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	693a      	ldr	r2, [r7, #16]
 80099b2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	693a      	ldr	r2, [r7, #16]
 80099b8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2201      	movs	r2, #1
 80099be:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80099c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80099c4:	4618      	mov	r0, r3
 80099c6:	3718      	adds	r7, #24
 80099c8:	46bd      	mov	sp, r7
 80099ca:	bd80      	pop	{r7, pc}

080099cc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b086      	sub	sp, #24
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
 80099d4:	460b      	mov	r3, r1
 80099d6:	807b      	strh	r3, [r7, #2]
 80099d8:	4613      	mov	r3, r2
 80099da:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80099dc:	2300      	movs	r3, #0
 80099de:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80099ec:	887b      	ldrh	r3, [r7, #2]
 80099ee:	2b05      	cmp	r3, #5
 80099f0:	d902      	bls.n	80099f8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099f2:	23fc      	movs	r3, #252	; 0xfc
 80099f4:	75fb      	strb	r3, [r7, #23]
 80099f6:	e05b      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80099f8:	787b      	ldrb	r3, [r7, #1]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d106      	bne.n	8009a0c <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80099fe:	2300      	movs	r3, #0
 8009a00:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8009a02:	2300      	movs	r3, #0
 8009a04:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8009a06:	2301      	movs	r3, #1
 8009a08:	73bb      	strb	r3, [r7, #14]
 8009a0a:	e00a      	b.n	8009a22 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009a0c:	887b      	ldrh	r3, [r7, #2]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	330c      	adds	r3, #12
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8009a1e:	2301      	movs	r3, #1
 8009a20:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8009a22:	887b      	ldrh	r3, [r7, #2]
 8009a24:	2b05      	cmp	r3, #5
 8009a26:	d841      	bhi.n	8009aac <VL53L0X_SetLimitCheckEnable+0xe0>
 8009a28:	a201      	add	r2, pc, #4	; (adr r2, 8009a30 <VL53L0X_SetLimitCheckEnable+0x64>)
 8009a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2e:	bf00      	nop
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a53 	.word	0x08009a53
 8009a38:	08009a69 	.word	0x08009a69
 8009a3c:	08009a73 	.word	0x08009a73
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a95 	.word	0x08009a95

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	7bfa      	ldrb	r2, [r7, #15]
 8009a4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8009a50:	e02e      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2144      	movs	r1, #68	; 0x44
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f004 f893 	bl	800db88 <VL53L0X_WrWord>
 8009a62:	4603      	mov	r3, r0
 8009a64:	75fb      	strb	r3, [r7, #23]

			break;
 8009a66:	e023      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	7bfa      	ldrb	r2, [r7, #15]
 8009a6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8009a70:	e01e      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	7bfa      	ldrb	r2, [r7, #15]
 8009a76:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8009a7a:	e019      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8009a7c:	7bbb      	ldrb	r3, [r7, #14]
 8009a7e:	005b      	lsls	r3, r3, #1
 8009a80:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009a82:	7b7b      	ldrb	r3, [r7, #13]
 8009a84:	22fe      	movs	r2, #254	; 0xfe
 8009a86:	2160      	movs	r1, #96	; 0x60
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f004 f8a7 	bl	800dbdc <VL53L0X_UpdateByte>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 8009a92:	e00d      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	011b      	lsls	r3, r3, #4
 8009a98:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8009a9a:	7b7b      	ldrb	r3, [r7, #13]
 8009a9c:	22ef      	movs	r2, #239	; 0xef
 8009a9e:	2160      	movs	r1, #96	; 0x60
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f004 f89b 	bl	800dbdc <VL53L0X_UpdateByte>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8009aaa:	e001      	b.n	8009ab0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009aac:	23fc      	movs	r3, #252	; 0xfc
 8009aae:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10f      	bne.n	8009ad8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8009ab8:	787b      	ldrb	r3, [r7, #1]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009abe:	887b      	ldrh	r3, [r7, #2]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009aca:	e005      	b.n	8009ad8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009acc:	887b      	ldrh	r3, [r7, #2]
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009ad8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3718      	adds	r7, #24
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	460b      	mov	r3, r1
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009af2:	2300      	movs	r3, #0
 8009af4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8009af6:	897b      	ldrh	r3, [r7, #10]
 8009af8:	2b05      	cmp	r3, #5
 8009afa:	d905      	bls.n	8009b08 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009afc:	23fc      	movs	r3, #252	; 0xfc
 8009afe:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2200      	movs	r2, #0
 8009b04:	701a      	strb	r2, [r3, #0]
 8009b06:	e008      	b.n	8009b1a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8009b08:	897b      	ldrh	r3, [r7, #10]
 8009b0a:	68fa      	ldr	r2, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b12:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	7dba      	ldrb	r2, [r7, #22]
 8009b18:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	371c      	adds	r7, #28
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
	...

08009b2c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	460b      	mov	r3, r1
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8009b3e:	897b      	ldrh	r3, [r7, #10]
 8009b40:	68fa      	ldr	r2, [r7, #12]
 8009b42:	4413      	add	r3, r2
 8009b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009b48:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8009b4a:	7dbb      	ldrb	r3, [r7, #22]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d107      	bne.n	8009b60 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b50:	897b      	ldrh	r3, [r7, #10]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	330c      	adds	r3, #12
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	4413      	add	r3, r2
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	605a      	str	r2, [r3, #4]
 8009b5e:	e040      	b.n	8009be2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8009b60:	897b      	ldrh	r3, [r7, #10]
 8009b62:	2b05      	cmp	r3, #5
 8009b64:	d830      	bhi.n	8009bc8 <VL53L0X_SetLimitCheckValue+0x9c>
 8009b66:	a201      	add	r2, pc, #4	; (adr r2, 8009b6c <VL53L0X_SetLimitCheckValue+0x40>)
 8009b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6c:	08009b85 	.word	0x08009b85
 8009b70:	08009b8d 	.word	0x08009b8d
 8009b74:	08009ba3 	.word	0x08009ba3
 8009b78:	08009bab 	.word	0x08009bab
 8009b7c:	08009bb3 	.word	0x08009bb3
 8009b80:	08009bb3 	.word	0x08009bb3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8009b8a:	e01f      	b.n	8009bcc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	461a      	mov	r2, r3
 8009b94:	2144      	movs	r1, #68	; 0x44
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f003 fff6 	bl	800db88 <VL53L0X_WrWord>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009ba0:	e014      	b.n	8009bcc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8009ba8:	e010      	b.n	8009bcc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8009bb0:	e00c      	b.n	8009bcc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	461a      	mov	r2, r3
 8009bba:	2164      	movs	r1, #100	; 0x64
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f003 ffe3 	bl	800db88 <VL53L0X_WrWord>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8009bc6:	e001      	b.n	8009bcc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009bc8:	23fc      	movs	r3, #252	; 0xfc
 8009bca:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d106      	bne.n	8009be2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009bd4:	897b      	ldrh	r3, [r7, #10]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	330c      	adds	r3, #12
 8009bda:	009b      	lsls	r3, r3, #2
 8009bdc:	4413      	add	r3, r2
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009be2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3718      	adds	r7, #24
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}
 8009bee:	bf00      	nop

08009bf0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b088      	sub	sp, #32
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8009c06:	897b      	ldrh	r3, [r7, #10]
 8009c08:	2b05      	cmp	r3, #5
 8009c0a:	d847      	bhi.n	8009c9c <VL53L0X_GetLimitCheckValue+0xac>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <VL53L0X_GetLimitCheckValue+0x24>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c2d 	.word	0x08009c2d
 8009c18:	08009c39 	.word	0x08009c39
 8009c1c:	08009c5f 	.word	0x08009c5f
 8009c20:	08009c6b 	.word	0x08009c6b
 8009c24:	08009c77 	.word	0x08009c77
 8009c28:	08009c77 	.word	0x08009c77

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c30:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8009c32:	2300      	movs	r3, #0
 8009c34:	77bb      	strb	r3, [r7, #30]
		break;
 8009c36:	e033      	b.n	8009ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009c38:	f107 0316 	add.w	r3, r7, #22
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2144      	movs	r1, #68	; 0x44
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f004 f829 	bl	800dc98 <VL53L0X_RdWord>
 8009c46:	4603      	mov	r3, r0
 8009c48:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009c4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009c52:	8afb      	ldrh	r3, [r7, #22]
 8009c54:	025b      	lsls	r3, r3, #9
 8009c56:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	77bb      	strb	r3, [r7, #30]
		break;
 8009c5c:	e020      	b.n	8009ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c62:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8009c64:	2300      	movs	r3, #0
 8009c66:	77bb      	strb	r3, [r7, #30]
		break;
 8009c68:	e01a      	b.n	8009ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8009c70:	2300      	movs	r3, #0
 8009c72:	77bb      	strb	r3, [r7, #30]
		break;
 8009c74:	e014      	b.n	8009ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8009c76:	f107 0316 	add.w	r3, r7, #22
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	2164      	movs	r1, #100	; 0x64
 8009c7e:	68f8      	ldr	r0, [r7, #12]
 8009c80:	f004 f80a 	bl	800dc98 <VL53L0X_RdWord>
 8009c84:	4603      	mov	r3, r0
 8009c86:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8009c88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8009c90:	8afb      	ldrh	r3, [r7, #22]
 8009c92:	025b      	lsls	r3, r3, #9
 8009c94:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8009c96:	2300      	movs	r3, #0
 8009c98:	77bb      	strb	r3, [r7, #30]
		break;
 8009c9a:	e001      	b.n	8009ca0 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009c9c:	23fc      	movs	r3, #252	; 0xfc
 8009c9e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ca0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d12a      	bne.n	8009cfe <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8009ca8:	7fbb      	ldrb	r3, [r7, #30]
 8009caa:	2b01      	cmp	r3, #1
 8009cac:	d124      	bne.n	8009cf8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d110      	bne.n	8009cd6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8009cb4:	897b      	ldrh	r3, [r7, #10]
 8009cb6:	68fa      	ldr	r2, [r7, #12]
 8009cb8:	330c      	adds	r3, #12
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	4413      	add	r3, r2
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009cc8:	897b      	ldrh	r3, [r7, #10]
 8009cca:	68fa      	ldr	r2, [r7, #12]
 8009ccc:	4413      	add	r3, r2
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009cd4:	e013      	b.n	8009cfe <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	69ba      	ldr	r2, [r7, #24]
 8009cda:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009cdc:	897b      	ldrh	r3, [r7, #10]
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	330c      	adds	r3, #12
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	69ba      	ldr	r2, [r7, #24]
 8009ce8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8009cea:	897b      	ldrh	r3, [r7, #10]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4413      	add	r3, r2
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009cf6:	e002      	b.n	8009cfe <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009cfe:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3720      	adds	r7, #32
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop

08009d0c <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8009d1a:	f107 030e 	add.w	r3, r7, #14
 8009d1e:	461a      	mov	r2, r3
 8009d20:	2101      	movs	r1, #1
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f003 ff8e 	bl	800dc44 <VL53L0X_RdByte>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8009d2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10e      	bne.n	8009d52 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8009d34:	7bba      	ldrb	r2, [r7, #14]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8009d3c:	7bbb      	ldrb	r3, [r7, #14]
 8009d3e:	b25b      	sxtb	r3, r3
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	da03      	bge.n	8009d4c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2201      	movs	r2, #1
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e002      	b.n	8009d52 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8009d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d104      	bne.n	8009d64 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	781a      	ldrb	r2, [r3, #0]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3710      	adds	r7, #16
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009d7c:	f107 030e 	add.w	r3, r7, #14
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f7ff fbd2 	bl	800952c <VL53L0X_GetDeviceMode>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d107      	bne.n	8009da4 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009d94:	7bbb      	ldrb	r3, [r7, #14]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d104      	bne.n	8009da4 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f898 	bl	8009ed0 <VL53L0X_StartMeasurement>
 8009da0:	4603      	mov	r3, r0
 8009da2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d104      	bne.n	8009db6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f001 fb3f 	bl	800b430 <VL53L0X_measurement_poll_for_completion>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8009db6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d106      	bne.n	8009dcc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d103      	bne.n	8009dcc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2203      	movs	r2, #3
 8009dc8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8009dcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	60f8      	str	r0, [r7, #12]
 8009de0:	60b9      	str	r1, [r7, #8]
 8009de2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8009de8:	2301      	movs	r3, #1
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	68f8      	ldr	r0, [r7, #12]
 8009df0:	f001 fae1 	bl	800b3b6 <VL53L0X_perform_ref_calibration>
 8009df4:	4603      	mov	r3, r0
 8009df6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8009df8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	460b      	mov	r3, r1
 8009e0e:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009e10:	2300      	movs	r3, #0
 8009e12:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8009e1a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8009e1c:	7dbb      	ldrb	r3, [r7, #22]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d005      	beq.n	8009e2e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8009e22:	7dbb      	ldrb	r3, [r7, #22]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d002      	beq.n	8009e2e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8009e28:	7dbb      	ldrb	r3, [r7, #22]
 8009e2a:	2b03      	cmp	r3, #3
 8009e2c:	d147      	bne.n	8009ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8009e2e:	f107 030c 	add.w	r3, r7, #12
 8009e32:	f107 0210 	add.w	r2, r7, #16
 8009e36:	2101      	movs	r1, #1
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbc3 	bl	800a5c4 <VL53L0X_GetInterruptThresholds>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009e48:	d803      	bhi.n	8009e52 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8009e4a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8009e4c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8009e50:	d935      	bls.n	8009ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8009e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d131      	bne.n	8009ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8009e5a:	78fb      	ldrb	r3, [r7, #3]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d006      	beq.n	8009e6e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8009e60:	491a      	ldr	r1, [pc, #104]	; (8009ecc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f002 ff56 	bl	800cd14 <VL53L0X_load_tuning_settings>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	75fb      	strb	r3, [r7, #23]
 8009e6c:	e027      	b.n	8009ebe <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8009e6e:	2204      	movs	r2, #4
 8009e70:	21ff      	movs	r1, #255	; 0xff
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f003 fe64 	bl	800db40 <VL53L0X_WrByte>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8009e82:	2200      	movs	r2, #0
 8009e84:	2170      	movs	r1, #112	; 0x70
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f003 fe5a 	bl	800db40 <VL53L0X_WrByte>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461a      	mov	r2, r3
 8009e90:	7dfb      	ldrb	r3, [r7, #23]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009e96:	2200      	movs	r2, #0
 8009e98:	21ff      	movs	r1, #255	; 0xff
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f003 fe50 	bl	800db40 <VL53L0X_WrByte>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	7dfb      	ldrb	r3, [r7, #23]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009eaa:	2200      	movs	r2, #0
 8009eac:	2180      	movs	r1, #128	; 0x80
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f003 fe46 	bl	800db40 <VL53L0X_WrByte>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8009ebe:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3718      	adds	r7, #24
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	2000000c 	.word	0x2000000c

08009ed0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b086      	sub	sp, #24
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8009edc:	2301      	movs	r3, #1
 8009ede:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8009ee0:	f107 030e 	add.w	r3, r7, #14
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f7ff fb20 	bl	800952c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8009eec:	2201      	movs	r2, #1
 8009eee:	2180      	movs	r1, #128	; 0x80
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f003 fe25 	bl	800db40 <VL53L0X_WrByte>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009efa:	2201      	movs	r2, #1
 8009efc:	21ff      	movs	r1, #255	; 0xff
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f003 fe1e 	bl	800db40 <VL53L0X_WrByte>
 8009f04:	4603      	mov	r3, r0
 8009f06:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009f08:	2200      	movs	r2, #0
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f003 fe17 	bl	800db40 <VL53L0X_WrByte>
 8009f12:	4603      	mov	r3, r0
 8009f14:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	2191      	movs	r1, #145	; 0x91
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f003 fe0d 	bl	800db40 <VL53L0X_WrByte>
 8009f26:	4603      	mov	r3, r0
 8009f28:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f003 fe06 	bl	800db40 <VL53L0X_WrByte>
 8009f34:	4603      	mov	r3, r0
 8009f36:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009f38:	2200      	movs	r2, #0
 8009f3a:	21ff      	movs	r1, #255	; 0xff
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f003 fdff 	bl	800db40 <VL53L0X_WrByte>
 8009f42:	4603      	mov	r3, r0
 8009f44:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009f46:	2200      	movs	r2, #0
 8009f48:	2180      	movs	r1, #128	; 0x80
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f003 fdf8 	bl	800db40 <VL53L0X_WrByte>
 8009f50:	4603      	mov	r3, r0
 8009f52:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8009f54:	7bbb      	ldrb	r3, [r7, #14]
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d054      	beq.n	800a004 <VL53L0X_StartMeasurement+0x134>
 8009f5a:	2b03      	cmp	r3, #3
 8009f5c:	dc6c      	bgt.n	800a038 <VL53L0X_StartMeasurement+0x168>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d002      	beq.n	8009f68 <VL53L0X_StartMeasurement+0x98>
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d034      	beq.n	8009fd0 <VL53L0X_StartMeasurement+0x100>
 8009f66:	e067      	b.n	800a038 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8009f68:	2201      	movs	r2, #1
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f003 fde7 	bl	800db40 <VL53L0X_WrByte>
 8009f72:	4603      	mov	r3, r0
 8009f74:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8009f7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d15d      	bne.n	800a03e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d008      	beq.n	8009f9e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8009f8c:	f107 030d 	add.w	r3, r7, #13
 8009f90:	461a      	mov	r2, r3
 8009f92:	2100      	movs	r1, #0
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f003 fe55 	bl	800dc44 <VL53L0X_RdByte>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8009fa4:	7b7a      	ldrb	r2, [r7, #13]
 8009fa6:	7bfb      	ldrb	r3, [r7, #15]
 8009fa8:	4013      	ands	r3, r2
 8009faa:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009fac:	7bfa      	ldrb	r2, [r7, #15]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d107      	bne.n	8009fc2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8009fb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d103      	bne.n	8009fc2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8009fba:	693b      	ldr	r3, [r7, #16]
 8009fbc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009fc0:	d3e1      	bcc.n	8009f86 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009fc8:	d339      	bcc.n	800a03e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8009fca:	23f9      	movs	r3, #249	; 0xf9
 8009fcc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8009fce:	e036      	b.n	800a03e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8009fd0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d105      	bne.n	8009fe4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8009fd8:	2101      	movs	r1, #1
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff ff12 	bl	8009e04 <VL53L0X_CheckAndLoadInterruptSettings>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8009fe4:	2202      	movs	r2, #2
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f003 fda9 	bl	800db40 <VL53L0X_WrByte>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8009ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d123      	bne.n	800a042 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2204      	movs	r2, #4
 8009ffe:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a002:	e01e      	b.n	800a042 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800a004:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d105      	bne.n	800a018 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800a00c:	2101      	movs	r1, #1
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fef8 	bl	8009e04 <VL53L0X_CheckAndLoadInterruptSettings>
 800a014:	4603      	mov	r3, r0
 800a016:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800a018:	2204      	movs	r2, #4
 800a01a:	2100      	movs	r1, #0
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f003 fd8f 	bl	800db40 <VL53L0X_WrByte>
 800a022:	4603      	mov	r3, r0
 800a024:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800a026:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10b      	bne.n	800a046 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2204      	movs	r2, #4
 800a032:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800a036:	e006      	b.n	800a046 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800a038:	23f8      	movs	r3, #248	; 0xf8
 800a03a:	75fb      	strb	r3, [r7, #23]
 800a03c:	e004      	b.n	800a048 <VL53L0X_StartMeasurement+0x178>
		break;
 800a03e:	bf00      	nop
 800a040:	e002      	b.n	800a048 <VL53L0X_StartMeasurement+0x178>
		break;
 800a042:	bf00      	nop
 800a044:	e000      	b.n	800a048 <VL53L0X_StartMeasurement+0x178>
		break;
 800a046:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800a048:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a05e:	2300      	movs	r3, #0
 800a060:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800a068:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800a06a:	7bbb      	ldrb	r3, [r7, #14]
 800a06c:	2b04      	cmp	r3, #4
 800a06e:	d112      	bne.n	800a096 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800a070:	f107 0308 	add.w	r3, r7, #8
 800a074:	4619      	mov	r1, r3
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fb1a 	bl	800a6b0 <VL53L0X_GetInterruptMaskStatus>
 800a07c:	4603      	mov	r3, r0
 800a07e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b04      	cmp	r3, #4
 800a084:	d103      	bne.n	800a08e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	2201      	movs	r2, #1
 800a08a:	701a      	strb	r2, [r3, #0]
 800a08c:	e01c      	b.n	800a0c8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
 800a094:	e018      	b.n	800a0c8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800a096:	f107 030d 	add.w	r3, r7, #13
 800a09a:	461a      	mov	r2, r3
 800a09c:	2114      	movs	r1, #20
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f003 fdd0 	bl	800dc44 <VL53L0X_RdByte>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800a0a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10b      	bne.n	800a0c8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800a0b0:	7b7b      	ldrb	r3, [r7, #13]
 800a0b2:	f003 0301 	and.w	r3, r3, #1
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e002      	b.n	800a0c8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a0d4:	b5b0      	push	{r4, r5, r7, lr}
 800a0d6:	b096      	sub	sp, #88	; 0x58
 800a0d8:	af02      	add	r7, sp, #8
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800a0e4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a0e8:	230c      	movs	r3, #12
 800a0ea:	2114      	movs	r1, #20
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f003 fcfb 	bl	800dae8 <VL53L0X_ReadMulti>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800a0f8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 80d1 	bne.w	800a2a4 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2200      	movs	r2, #0
 800a106:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	2200      	movs	r2, #0
 800a10c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800a10e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800a112:	b29b      	uxth	r3, r3
 800a114:	021b      	lsls	r3, r3, #8
 800a116:	b29a      	uxth	r2, r3
 800a118:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a11c:	b29b      	uxth	r3, r3
 800a11e:	4413      	add	r3, r2
 800a120:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	2200      	movs	r2, #0
 800a128:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800a12a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a12e:	b29b      	uxth	r3, r3
 800a130:	021b      	lsls	r3, r3, #8
 800a132:	b29a      	uxth	r2, r3
 800a134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a138:	b29b      	uxth	r3, r3
 800a13a:	4413      	add	r3, r2
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	025b      	lsls	r3, r3, #9
 800a140:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a146:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800a148:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	021b      	lsls	r3, r3, #8
 800a150:	b29a      	uxth	r2, r3
 800a152:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800a156:	b29b      	uxth	r3, r3
 800a158:	4413      	add	r3, r2
 800a15a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800a15e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a162:	025b      	lsls	r3, r3, #9
 800a164:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800a16a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a16e:	b29b      	uxth	r3, r3
 800a170:	021b      	lsls	r3, r3, #8
 800a172:	b29a      	uxth	r2, r3
 800a174:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a178:	b29b      	uxth	r3, r3
 800a17a:	4413      	add	r3, r2
 800a17c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a186:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800a188:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a18c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800a196:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800a19e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800a1a2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a1a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a1a8:	d046      	beq.n	800a238 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800a1aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a1ac:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a1b0:	fb02 f303 	mul.w	r3, r2, r3
 800a1b4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a1b8:	4a57      	ldr	r2, [pc, #348]	; (800a318 <VL53L0X_GetRangingMeasurementData+0x244>)
 800a1ba:	fb82 1203 	smull	r1, r2, r2, r3
 800a1be:	1192      	asrs	r2, r2, #6
 800a1c0:	17db      	asrs	r3, r3, #31
 800a1c2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800a1c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6a1b      	ldr	r3, [r3, #32]
 800a1cc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	7f1b      	ldrb	r3, [r3, #28]
 800a1d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800a1d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d02c      	beq.n	800a238 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800a1de:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a1e0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a1e4:	fb02 f303 	mul.w	r3, r2, r3
 800a1e8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800a1ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d10d      	bne.n	800a20c <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800a1f0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d004      	beq.n	800a202 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800a1f8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800a1fc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a200:	e016      	b.n	800a230 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800a202:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800a206:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800a20a:	e011      	b.n	800a230 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800a20c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a210:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a212:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800a216:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800a218:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800a21c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800a220:	121b      	asrs	r3, r3, #8
 800a222:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800a224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a226:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800a228:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800a22c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800a230:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a234:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800a238:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d00d      	beq.n	800a25c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800a240:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a244:	089b      	lsrs	r3, r3, #2
 800a246:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800a24c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800a250:	b2db      	uxtb	r3, r3
 800a252:	019b      	lsls	r3, r3, #6
 800a254:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	75da      	strb	r2, [r3, #23]
 800a25a:	e006      	b.n	800a26a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800a262:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	2200      	movs	r2, #0
 800a268:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800a26a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a26e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800a272:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	683b      	ldr	r3, [r7, #0]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	4613      	mov	r3, r2
 800a27e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a280:	6878      	ldr	r0, [r7, #4]
 800a282:	f003 f9e5 	bl	800d650 <VL53L0X_get_pal_range_status>
 800a286:	4603      	mov	r3, r0
 800a288:	461a      	mov	r2, r3
 800a28a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800a28e:	4313      	orrs	r3, r2
 800a290:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800a294:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d103      	bne.n	800a2a4 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800a29c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a2a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d12f      	bne.n	800a30c <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f107 040c 	add.w	r4, r7, #12
 800a2b2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800a2b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a2b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a2ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a2be:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800a2c6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800a2cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800a2d4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800a2da:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800a2e0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800a2e6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800a2ec:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800a2f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800a2fc:	f107 050c 	add.w	r5, r7, #12
 800a300:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a302:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a304:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a308:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a30c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800a310:	4618      	mov	r0, r3
 800a312:	3750      	adds	r7, #80	; 0x50
 800a314:	46bd      	mov	sp, r7
 800a316:	bdb0      	pop	{r4, r5, r7, pc}
 800a318:	10624dd3 	.word	0x10624dd3

0800a31c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a326:	2300      	movs	r3, #0
 800a328:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800a32a:	2100      	movs	r1, #0
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f7ff f8d1 	bl	80094d4 <VL53L0X_SetDeviceMode>
 800a332:	4603      	mov	r3, r0
 800a334:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800a336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d104      	bne.n	800a348 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f7ff fd16 	bl	8009d70 <VL53L0X_PerformSingleMeasurement>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800a348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d105      	bne.n	800a35c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7ff febe 	bl	800a0d4 <VL53L0X_GetRangingMeasurementData>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800a35c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d105      	bne.n	800a370 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a364:	2100      	movs	r1, #0
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f000 f962 	bl	800a630 <VL53L0X_ClearInterruptMask>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800a370:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3710      	adds	r7, #16
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}

0800a37c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	4608      	mov	r0, r1
 800a386:	4611      	mov	r1, r2
 800a388:	461a      	mov	r2, r3
 800a38a:	4603      	mov	r3, r0
 800a38c:	70fb      	strb	r3, [r7, #3]
 800a38e:	460b      	mov	r3, r1
 800a390:	70bb      	strb	r3, [r7, #2]
 800a392:	4613      	mov	r3, r2
 800a394:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a396:	2300      	movs	r3, #0
 800a398:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800a39a:	78fb      	ldrb	r3, [r7, #3]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d002      	beq.n	800a3a6 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800a3a0:	23f6      	movs	r3, #246	; 0xf6
 800a3a2:	73fb      	strb	r3, [r7, #15]
 800a3a4:	e107      	b.n	800a5b6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800a3a6:	78bb      	ldrb	r3, [r7, #2]
 800a3a8:	2b14      	cmp	r3, #20
 800a3aa:	d110      	bne.n	800a3ce <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a3ac:	7e3b      	ldrb	r3, [r7, #24]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800a3b2:	2310      	movs	r3, #16
 800a3b4:	73bb      	strb	r3, [r7, #14]
 800a3b6:	e001      	b.n	800a3bc <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800a3bc:	7bbb      	ldrb	r3, [r7, #14]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	2184      	movs	r1, #132	; 0x84
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f003 fbbc 	bl	800db40 <VL53L0X_WrByte>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	73fb      	strb	r3, [r7, #15]
 800a3cc:	e0f3      	b.n	800a5b6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800a3ce:	78bb      	ldrb	r3, [r7, #2]
 800a3d0:	2b15      	cmp	r3, #21
 800a3d2:	f040 8097 	bne.w	800a504 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	21ff      	movs	r1, #255	; 0xff
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f003 fbb0 	bl	800db40 <VL53L0X_WrByte>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	461a      	mov	r2, r3
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f003 fba6 	bl	800db40 <VL53L0X_WrByte>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	7bfb      	ldrb	r3, [r7, #15]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a3fe:	2200      	movs	r2, #0
 800a400:	21ff      	movs	r1, #255	; 0xff
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f003 fb9c 	bl	800db40 <VL53L0X_WrByte>
 800a408:	4603      	mov	r3, r0
 800a40a:	461a      	mov	r2, r3
 800a40c:	7bfb      	ldrb	r3, [r7, #15]
 800a40e:	4313      	orrs	r3, r2
 800a410:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a412:	2201      	movs	r2, #1
 800a414:	2180      	movs	r1, #128	; 0x80
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f003 fb92 	bl	800db40 <VL53L0X_WrByte>
 800a41c:	4603      	mov	r3, r0
 800a41e:	461a      	mov	r2, r3
 800a420:	7bfb      	ldrb	r3, [r7, #15]
 800a422:	4313      	orrs	r3, r2
 800a424:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800a426:	2202      	movs	r2, #2
 800a428:	2185      	movs	r1, #133	; 0x85
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f003 fb88 	bl	800db40 <VL53L0X_WrByte>
 800a430:	4603      	mov	r3, r0
 800a432:	461a      	mov	r2, r3
 800a434:	7bfb      	ldrb	r3, [r7, #15]
 800a436:	4313      	orrs	r3, r2
 800a438:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800a43a:	2204      	movs	r2, #4
 800a43c:	21ff      	movs	r1, #255	; 0xff
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f003 fb7e 	bl	800db40 <VL53L0X_WrByte>
 800a444:	4603      	mov	r3, r0
 800a446:	461a      	mov	r2, r3
 800a448:	7bfb      	ldrb	r3, [r7, #15]
 800a44a:	4313      	orrs	r3, r2
 800a44c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800a44e:	2200      	movs	r2, #0
 800a450:	21cd      	movs	r1, #205	; 0xcd
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f003 fb74 	bl	800db40 <VL53L0X_WrByte>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	4313      	orrs	r3, r2
 800a460:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800a462:	2211      	movs	r2, #17
 800a464:	21cc      	movs	r1, #204	; 0xcc
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f003 fb6a 	bl	800db40 <VL53L0X_WrByte>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	7bfb      	ldrb	r3, [r7, #15]
 800a472:	4313      	orrs	r3, r2
 800a474:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800a476:	2207      	movs	r2, #7
 800a478:	21ff      	movs	r1, #255	; 0xff
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f003 fb60 	bl	800db40 <VL53L0X_WrByte>
 800a480:	4603      	mov	r3, r0
 800a482:	461a      	mov	r2, r3
 800a484:	7bfb      	ldrb	r3, [r7, #15]
 800a486:	4313      	orrs	r3, r2
 800a488:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800a48a:	2200      	movs	r2, #0
 800a48c:	21be      	movs	r1, #190	; 0xbe
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f003 fb56 	bl	800db40 <VL53L0X_WrByte>
 800a494:	4603      	mov	r3, r0
 800a496:	461a      	mov	r2, r3
 800a498:	7bfb      	ldrb	r3, [r7, #15]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800a49e:	2206      	movs	r2, #6
 800a4a0:	21ff      	movs	r1, #255	; 0xff
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f003 fb4c 	bl	800db40 <VL53L0X_WrByte>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	7bfb      	ldrb	r3, [r7, #15]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800a4b2:	2209      	movs	r2, #9
 800a4b4:	21cc      	movs	r1, #204	; 0xcc
 800a4b6:	6878      	ldr	r0, [r7, #4]
 800a4b8:	f003 fb42 	bl	800db40 <VL53L0X_WrByte>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	461a      	mov	r2, r3
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
 800a4c2:	4313      	orrs	r3, r2
 800a4c4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	21ff      	movs	r1, #255	; 0xff
 800a4ca:	6878      	ldr	r0, [r7, #4]
 800a4cc:	f003 fb38 	bl	800db40 <VL53L0X_WrByte>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	7bfb      	ldrb	r3, [r7, #15]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a4da:	2201      	movs	r2, #1
 800a4dc:	21ff      	movs	r1, #255	; 0xff
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f003 fb2e 	bl	800db40 <VL53L0X_WrByte>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f003 fb24 	bl	800db40 <VL53L0X_WrByte>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	461a      	mov	r2, r3
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	73fb      	strb	r3, [r7, #15]
 800a502:	e058      	b.n	800a5b6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800a504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d121      	bne.n	800a550 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800a50c:	787b      	ldrb	r3, [r7, #1]
 800a50e:	2b04      	cmp	r3, #4
 800a510:	d81b      	bhi.n	800a54a <VL53L0X_SetGpioConfig+0x1ce>
 800a512:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <VL53L0X_SetGpioConfig+0x19c>)
 800a514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a518:	0800a52d 	.word	0x0800a52d
 800a51c:	0800a533 	.word	0x0800a533
 800a520:	0800a539 	.word	0x0800a539
 800a524:	0800a53f 	.word	0x0800a53f
 800a528:	0800a545 	.word	0x0800a545
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800a52c:	2300      	movs	r3, #0
 800a52e:	73bb      	strb	r3, [r7, #14]
				break;
 800a530:	e00f      	b.n	800a552 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800a532:	2301      	movs	r3, #1
 800a534:	73bb      	strb	r3, [r7, #14]
				break;
 800a536:	e00c      	b.n	800a552 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800a538:	2302      	movs	r3, #2
 800a53a:	73bb      	strb	r3, [r7, #14]
				break;
 800a53c:	e009      	b.n	800a552 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800a53e:	2303      	movs	r3, #3
 800a540:	73bb      	strb	r3, [r7, #14]
				break;
 800a542:	e006      	b.n	800a552 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800a544:	2304      	movs	r3, #4
 800a546:	73bb      	strb	r3, [r7, #14]
				break;
 800a548:	e003      	b.n	800a552 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800a54a:	23f5      	movs	r3, #245	; 0xf5
 800a54c:	73fb      	strb	r3, [r7, #15]
 800a54e:	e000      	b.n	800a552 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800a550:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800a552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d107      	bne.n	800a56a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	461a      	mov	r2, r3
 800a55e:	210a      	movs	r1, #10
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f003 faed 	bl	800db40 <VL53L0X_WrByte>
 800a566:	4603      	mov	r3, r0
 800a568:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800a56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d10f      	bne.n	800a592 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800a572:	7e3b      	ldrb	r3, [r7, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d102      	bne.n	800a57e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800a578:	2300      	movs	r3, #0
 800a57a:	73bb      	strb	r3, [r7, #14]
 800a57c:	e001      	b.n	800a582 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800a57e:	2310      	movs	r3, #16
 800a580:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800a582:	7bbb      	ldrb	r3, [r7, #14]
 800a584:	22ef      	movs	r2, #239	; 0xef
 800a586:	2184      	movs	r1, #132	; 0x84
 800a588:	6878      	ldr	r0, [r7, #4]
 800a58a:	f003 fb27 	bl	800dbdc <VL53L0X_UpdateByte>
 800a58e:	4603      	mov	r3, r0
 800a590:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800a592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d103      	bne.n	800a5a2 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	787a      	ldrb	r2, [r7, #1]
 800a59e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800a5a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d105      	bne.n	800a5b6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800a5aa:	2100      	movs	r1, #0
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 f83f 	bl	800a630 <VL53L0X_ClearInterruptMask>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a5b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop

0800a5c4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b086      	sub	sp, #24
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	607a      	str	r2, [r7, #4]
 800a5ce:	603b      	str	r3, [r7, #0]
 800a5d0:	460b      	mov	r3, r1
 800a5d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800a5d8:	f107 0314 	add.w	r3, r7, #20
 800a5dc:	461a      	mov	r2, r3
 800a5de:	210e      	movs	r1, #14
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f003 fb59 	bl	800dc98 <VL53L0X_RdWord>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a5ea:	8abb      	ldrh	r3, [r7, #20]
 800a5ec:	045b      	lsls	r3, r3, #17
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4b0e      	ldr	r3, [pc, #56]	; (800a62c <VL53L0X_GetInterruptThresholds+0x68>)
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800a5f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d10f      	bne.n	800a620 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800a600:	f107 0314 	add.w	r3, r7, #20
 800a604:	461a      	mov	r2, r3
 800a606:	210c      	movs	r1, #12
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	f003 fb45 	bl	800dc98 <VL53L0X_RdWord>
 800a60e:	4603      	mov	r3, r0
 800a610:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800a612:	8abb      	ldrh	r3, [r7, #20]
 800a614:	045b      	lsls	r3, r3, #17
 800a616:	461a      	mov	r2, r3
 800a618:	4b04      	ldr	r3, [pc, #16]	; (800a62c <VL53L0X_GetInterruptThresholds+0x68>)
 800a61a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a620:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a624:	4618      	mov	r0, r3
 800a626:	3718      	adds	r7, #24
 800a628:	46bd      	mov	sp, r7
 800a62a:	bd80      	pop	{r7, pc}
 800a62c:	1ffe0000 	.word	0x1ffe0000

0800a630 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800a63e:	2300      	movs	r3, #0
 800a640:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800a642:	2201      	movs	r2, #1
 800a644:	210b      	movs	r1, #11
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f003 fa7a 	bl	800db40 <VL53L0X_WrByte>
 800a64c:	4603      	mov	r3, r0
 800a64e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800a650:	2200      	movs	r2, #0
 800a652:	210b      	movs	r1, #11
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f003 fa73 	bl	800db40 <VL53L0X_WrByte>
 800a65a:	4603      	mov	r3, r0
 800a65c:	461a      	mov	r2, r3
 800a65e:	7bfb      	ldrb	r3, [r7, #15]
 800a660:	4313      	orrs	r3, r2
 800a662:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800a664:	f107 030d 	add.w	r3, r7, #13
 800a668:	461a      	mov	r2, r3
 800a66a:	2113      	movs	r1, #19
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f003 fae9 	bl	800dc44 <VL53L0X_RdByte>
 800a672:	4603      	mov	r3, r0
 800a674:	461a      	mov	r2, r3
 800a676:	7bfb      	ldrb	r3, [r7, #15]
 800a678:	4313      	orrs	r3, r2
 800a67a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
 800a67e:	3301      	adds	r3, #1
 800a680:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800a682:	7b7b      	ldrb	r3, [r7, #13]
 800a684:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	2b02      	cmp	r3, #2
 800a690:	d803      	bhi.n	800a69a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800a692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d0d3      	beq.n	800a642 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800a69a:	7bbb      	ldrb	r3, [r7, #14]
 800a69c:	2b02      	cmp	r3, #2
 800a69e:	d901      	bls.n	800a6a4 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800a6a0:	23f4      	movs	r3, #244	; 0xf4
 800a6a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a6a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3710      	adds	r7, #16
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800a6be:	f107 030e 	add.w	r3, r7, #14
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	2113      	movs	r1, #19
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f003 fabc 	bl	800dc44 <VL53L0X_RdByte>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
 800a6d2:	f003 0207 	and.w	r2, r3, #7
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800a6da:	7bbb      	ldrb	r3, [r7, #14]
 800a6dc:	f003 0318 	and.w	r3, r3, #24
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d001      	beq.n	800a6e8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800a6e4:	23fa      	movs	r3, #250	; 0xfa
 800a6e6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800a6e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b086      	sub	sp, #24
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a700:	2300      	movs	r3, #0
 800a702:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	68b9      	ldr	r1, [r7, #8]
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 fa03 	bl	800ab14 <VL53L0X_perform_ref_spad_management>
 800a70e:	4603      	mov	r3, r0
 800a710:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800a712:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3718      	adds	r7, #24
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}

0800a71e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a728:	2300      	movs	r3, #0
 800a72a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800a72c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800a730:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800a732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a736:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800a738:	f107 0308 	add.w	r3, r7, #8
 800a73c:	461a      	mov	r2, r3
 800a73e:	2128      	movs	r1, #40	; 0x28
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f003 faa9 	bl	800dc98 <VL53L0X_RdWord>
 800a746:	4603      	mov	r3, r0
 800a748:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800a74a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d11e      	bne.n	800a790 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800a752:	893b      	ldrh	r3, [r7, #8]
 800a754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a758:	b29b      	uxth	r3, r3
 800a75a:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800a75c:	893b      	ldrh	r3, [r7, #8]
 800a75e:	461a      	mov	r2, r3
 800a760:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a764:	429a      	cmp	r2, r3
 800a766:	dd0b      	ble.n	800a780 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800a768:	893a      	ldrh	r2, [r7, #8]
 800a76a:	897b      	ldrh	r3, [r7, #10]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	b29b      	uxth	r3, r3
 800a770:	b21b      	sxth	r3, r3
 800a772:	461a      	mov	r2, r3
					* 250;
 800a774:	23fa      	movs	r3, #250	; 0xfa
 800a776:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	601a      	str	r2, [r3, #0]
 800a77e:	e007      	b.n	800a790 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800a780:	893b      	ldrh	r3, [r7, #8]
 800a782:	b21b      	sxth	r3, r3
 800a784:	461a      	mov	r2, r3
 800a786:	23fa      	movs	r3, #250	; 0xfa
 800a788:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800a790:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b08b      	sub	sp, #44	; 0x2c
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	607a      	str	r2, [r7, #4]
 800a7a8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800a7aa:	2308      	movs	r3, #8
 800a7ac:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a7b8:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	69bb      	ldr	r3, [r7, #24]
 800a7be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c2:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7cc:	69b9      	ldr	r1, [r7, #24]
 800a7ce:	fb01 f202 	mul.w	r2, r1, r2
 800a7d2:	1a9b      	subs	r3, r3, r2
 800a7d4:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800a7da:	e030      	b.n	800a83e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e4:	4413      	add	r3, r2
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800a7ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d11e      	bne.n	800a830 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800a7f2:	7ffa      	ldrb	r2, [r7, #31]
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	fa42 f303 	asr.w	r3, r2, r3
 800a7fa:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800a800:	e016      	b.n	800a830 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800a802:	7ffb      	ldrb	r3, [r7, #31]
 800a804:	f003 0301 	and.w	r3, r3, #1
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <get_next_good_spad+0x88>
				success = 1;
 800a80c:	2301      	movs	r3, #1
 800a80e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800a810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a812:	69ba      	ldr	r2, [r7, #24]
 800a814:	fb03 f202 	mul.w	r2, r3, r2
 800a818:	6a3b      	ldr	r3, [r7, #32]
 800a81a:	4413      	add	r3, r2
 800a81c:	461a      	mov	r2, r3
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	601a      	str	r2, [r3, #0]
				break;
 800a822:	e009      	b.n	800a838 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800a824:	7ffb      	ldrb	r3, [r7, #31]
 800a826:	085b      	lsrs	r3, r3, #1
 800a828:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800a82a:	6a3b      	ldr	r3, [r7, #32]
 800a82c:	3301      	adds	r3, #1
 800a82e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800a830:	6a3a      	ldr	r2, [r7, #32]
 800a832:	69bb      	ldr	r3, [r7, #24]
 800a834:	429a      	cmp	r2, r3
 800a836:	d3e4      	bcc.n	800a802 <get_next_good_spad+0x66>
				coarseIndex++) {
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	3301      	adds	r3, #1
 800a83c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800a83e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	429a      	cmp	r2, r3
 800a844:	d202      	bcs.n	800a84c <get_next_good_spad+0xb0>
 800a846:	7fbb      	ldrb	r3, [r7, #30]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d0c7      	beq.n	800a7dc <get_next_good_spad+0x40>
		}
	}
}
 800a84c:	bf00      	nop
 800a84e:	372c      	adds	r7, #44	; 0x2c
 800a850:	46bd      	mov	sp, r7
 800a852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a856:	4770      	bx	lr

0800a858 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800a860:	2301      	movs	r3, #1
 800a862:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	099b      	lsrs	r3, r3, #6
 800a868:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800a86a:	4a07      	ldr	r2, [pc, #28]	; (800a888 <is_aperture+0x30>)
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d101      	bne.n	800a87a <is_aperture+0x22>
		isAperture = 0;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800a87a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3714      	adds	r7, #20
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	200002b8 	.word	0x200002b8

0800a88c <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b089      	sub	sp, #36	; 0x24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a898:	2300      	movs	r3, #0
 800a89a:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800a89c:	2308      	movs	r3, #8
 800a89e:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8a8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69ba      	ldr	r2, [r7, #24]
 800a8ae:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8b2:	69b9      	ldr	r1, [r7, #24]
 800a8b4:	fb01 f202 	mul.w	r2, r1, r2
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800a8bc:	697a      	ldr	r2, [r7, #20]
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d302      	bcc.n	800a8ca <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a8c4:	23ce      	movs	r3, #206	; 0xce
 800a8c6:	77fb      	strb	r3, [r7, #31]
 800a8c8:	e010      	b.n	800a8ec <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	4413      	add	r3, r2
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	b25a      	sxtb	r2, r3
 800a8d4:	2101      	movs	r1, #1
 800a8d6:	693b      	ldr	r3, [r7, #16]
 800a8d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a8dc:	b25b      	sxtb	r3, r3
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	b259      	sxtb	r1, r3
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	b2ca      	uxtb	r2, r1
 800a8ea:	701a      	strb	r2, [r3, #0]

	return status;
 800a8ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3724      	adds	r7, #36	; 0x24
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800a906:	2306      	movs	r3, #6
 800a908:	683a      	ldr	r2, [r7, #0]
 800a90a:	21b0      	movs	r1, #176	; 0xb0
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f003 f8bb 	bl	800da88 <VL53L0X_WriteMulti>
 800a912:	4603      	mov	r3, r0
 800a914:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800a916:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800a92c:	2306      	movs	r3, #6
 800a92e:	683a      	ldr	r2, [r7, #0]
 800a930:	21b0      	movs	r1, #176	; 0xb0
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f003 f8d8 	bl	800dae8 <VL53L0X_ReadMulti>
 800a938:	4603      	mov	r3, r0
 800a93a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800a93c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3710      	adds	r7, #16
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08c      	sub	sp, #48	; 0x30
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	607a      	str	r2, [r7, #4]
 800a952:	603b      	str	r3, [r7, #0]
 800a954:	460b      	mov	r3, r1
 800a956:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800a958:	2300      	movs	r3, #0
 800a95a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800a95e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a960:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800a962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a964:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a966:	2300      	movs	r3, #0
 800a968:	62bb      	str	r3, [r7, #40]	; 0x28
 800a96a:	e02b      	b.n	800a9c4 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800a96c:	f107 031c 	add.w	r3, r7, #28
 800a970:	6a3a      	ldr	r2, [r7, #32]
 800a972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff ff11 	bl	800a79c <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a980:	d103      	bne.n	800a98a <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a982:	23ce      	movs	r3, #206	; 0xce
 800a984:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a988:	e020      	b.n	800a9cc <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800a98a:	69fb      	ldr	r3, [r7, #28]
 800a98c:	461a      	mov	r2, r3
 800a98e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a990:	4413      	add	r3, r2
 800a992:	4618      	mov	r0, r3
 800a994:	f7ff ff60 	bl	800a858 <is_aperture>
 800a998:	4603      	mov	r3, r0
 800a99a:	461a      	mov	r2, r3
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d003      	beq.n	800a9aa <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800a9a2:	23ce      	movs	r3, #206	; 0xce
 800a9a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800a9a8:	e010      	b.n	800a9cc <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800a9aa:	69fb      	ldr	r3, [r7, #28]
 800a9ac:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800a9ae:	6a3a      	ldr	r2, [r7, #32]
 800a9b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a9b2:	6838      	ldr	r0, [r7, #0]
 800a9b4:	f7ff ff6a 	bl	800a88c <enable_spad_bit>
		currentSpad++;
 800a9b8:	6a3b      	ldr	r3, [r7, #32]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	3301      	adds	r3, #1
 800a9c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d3cf      	bcc.n	800a96c <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800a9cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ce:	6a3a      	ldr	r2, [r7, #32]
 800a9d0:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800a9d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800a9da:	6839      	ldr	r1, [r7, #0]
 800a9dc:	68f8      	ldr	r0, [r7, #12]
 800a9de:	f7ff ff8d 	bl	800a8fc <set_ref_spad_map>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800a9e8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d121      	bne.n	800aa34 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800a9f0:	f107 0314 	add.w	r3, r7, #20
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f7ff ff93 	bl	800a922 <get_ref_spad_map>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800aa06:	e011      	b.n	800aa2c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800aa08:	683a      	ldr	r2, [r7, #0]
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	4413      	add	r3, r2
 800aa0e:	781a      	ldrb	r2, [r3, #0]
 800aa10:	f107 0114 	add.w	r1, r7, #20
 800aa14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa16:	440b      	add	r3, r1
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d003      	beq.n	800aa26 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800aa1e:	23ce      	movs	r3, #206	; 0xce
 800aa20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800aa24:	e006      	b.n	800aa34 <enable_ref_spads+0xec>
			}
			i++;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	3301      	adds	r3, #1
 800aa2a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800aa2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d3e9      	bcc.n	800aa08 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800aa34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3730      	adds	r7, #48	; 0x30
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08a      	sub	sp, #40	; 0x28
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800aa50:	2300      	movs	r3, #0
 800aa52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800aa5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800aa60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d107      	bne.n	800aa78 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800aa68:	22c0      	movs	r2, #192	; 0xc0
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f003 f867 	bl	800db40 <VL53L0X_WrByte>
 800aa72:	4603      	mov	r3, r0
 800aa74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800aa78:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d108      	bne.n	800aa92 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800aa80:	f107 0308 	add.w	r3, r7, #8
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f7ff fc48 	bl	800a31c <VL53L0X_PerformSingleRangingMeasurement>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800aa92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d107      	bne.n	800aaaa <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	21ff      	movs	r1, #255	; 0xff
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f003 f84e 	bl	800db40 <VL53L0X_WrByte>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800aaaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d107      	bne.n	800aac2 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800aab2:	683a      	ldr	r2, [r7, #0]
 800aab4:	21b6      	movs	r1, #182	; 0xb6
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f003 f8ee 	bl	800dc98 <VL53L0X_RdWord>
 800aabc:	4603      	mov	r3, r0
 800aabe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800aac2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d107      	bne.n	800aada <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aaca:	2200      	movs	r2, #0
 800aacc:	21ff      	movs	r1, #255	; 0xff
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f003 f836 	bl	800db40 <VL53L0X_WrByte>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800aada:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d112      	bne.n	800ab08 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800aae2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aae6:	461a      	mov	r2, r3
 800aae8:	2101      	movs	r1, #1
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f003 f828 	bl	800db40 <VL53L0X_WrByte>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800aaf6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d104      	bne.n	800ab08 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800ab04:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800ab08:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3728      	adds	r7, #40	; 0x28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}

0800ab14 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800ab14:	b590      	push	{r4, r7, lr}
 800ab16:	b09d      	sub	sp, #116	; 0x74
 800ab18:	af06      	add	r7, sp, #24
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800ab26:	23b4      	movs	r3, #180	; 0xb4
 800ab28:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800ab30:	232c      	movs	r3, #44	; 0x2c
 800ab32:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800ab34:	2300      	movs	r3, #0
 800ab36:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800ab40:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800ab44:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800ab46:	2300      	movs	r3, #0
 800ab48:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800ab4e:	2306      	movs	r3, #6
 800ab50:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800ab52:	2300      	movs	r3, #0
 800ab54:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800ab60:	2300      	movs	r3, #0
 800ab62:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800ab68:	2300      	movs	r3, #0
 800ab6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800ab78:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab7e:	e009      	b.n	800ab94 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800ab80:	68fa      	ldr	r2, [r7, #12]
 800ab82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab84:	4413      	add	r3, r2
 800ab86:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800ab8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab90:	3301      	adds	r3, #1
 800ab92:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d3f1      	bcc.n	800ab80 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	21ff      	movs	r1, #255	; 0xff
 800aba0:	68f8      	ldr	r0, [r7, #12]
 800aba2:	f002 ffcd 	bl	800db40 <VL53L0X_WrByte>
 800aba6:	4603      	mov	r3, r0
 800aba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800abac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d107      	bne.n	800abc4 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800abb4:	2200      	movs	r2, #0
 800abb6:	214f      	movs	r1, #79	; 0x4f
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f002 ffc1 	bl	800db40 <VL53L0X_WrByte>
 800abbe:	4603      	mov	r3, r0
 800abc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800abc4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d107      	bne.n	800abdc <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800abcc:	222c      	movs	r2, #44	; 0x2c
 800abce:	214e      	movs	r1, #78	; 0x4e
 800abd0:	68f8      	ldr	r0, [r7, #12]
 800abd2:	f002 ffb5 	bl	800db40 <VL53L0X_WrByte>
 800abd6:	4603      	mov	r3, r0
 800abd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800abdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d107      	bne.n	800abf4 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800abe4:	2200      	movs	r2, #0
 800abe6:	21ff      	movs	r1, #255	; 0xff
 800abe8:	68f8      	ldr	r0, [r7, #12]
 800abea:	f002 ffa9 	bl	800db40 <VL53L0X_WrByte>
 800abee:	4603      	mov	r3, r0
 800abf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800abf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d109      	bne.n	800ac10 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800abfc:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ac00:	461a      	mov	r2, r3
 800ac02:	21b6      	movs	r1, #182	; 0xb6
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f002 ff9b 	bl	800db40 <VL53L0X_WrByte>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800ac10:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d107      	bne.n	800ac28 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800ac18:	2200      	movs	r2, #0
 800ac1a:	2180      	movs	r1, #128	; 0x80
 800ac1c:	68f8      	ldr	r0, [r7, #12]
 800ac1e:	f002 ff8f 	bl	800db40 <VL53L0X_WrByte>
 800ac22:	4603      	mov	r3, r0
 800ac24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800ac28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800ac30:	f107 0210 	add.w	r2, r7, #16
 800ac34:	f107 0111 	add.w	r1, r7, #17
 800ac38:	2300      	movs	r3, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 fbbb 	bl	800b3b6 <VL53L0X_perform_ref_calibration>
 800ac40:	4603      	mov	r3, r0
 800ac42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800ac46:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d121      	bne.n	800ac92 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800ac52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac54:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800ac56:	2300      	movs	r3, #0
 800ac58:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800ac5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac5c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800ac6a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ac6e:	f107 0218 	add.w	r2, r7, #24
 800ac72:	9204      	str	r2, [sp, #16]
 800ac74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac76:	9203      	str	r2, [sp, #12]
 800ac78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ac7a:	9202      	str	r2, [sp, #8]
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	4623      	mov	r3, r4
 800ac84:	4602      	mov	r2, r0
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f7ff fe5e 	bl	800a948 <enable_ref_spads>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ac92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d174      	bne.n	800ad84 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800ac9a:	69bb      	ldr	r3, [r7, #24]
 800ac9c:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800ac9e:	f107 0312 	add.w	r3, r7, #18
 800aca2:	4619      	mov	r1, r3
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f7ff fecb 	bl	800aa40 <perform_ref_signal_measurement>
 800acaa:	4603      	mov	r3, r0
 800acac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800acb0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d161      	bne.n	800ad7c <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800acb8:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800acba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d25d      	bcs.n	800ad7c <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800acc0:	2300      	movs	r3, #0
 800acc2:	64bb      	str	r3, [r7, #72]	; 0x48
 800acc4:	e009      	b.n	800acda <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acca:	4413      	add	r3, r2
 800accc:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800acd0:	2200      	movs	r2, #0
 800acd2:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800acd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acd6:	3301      	adds	r3, #1
 800acd8:	64bb      	str	r3, [r7, #72]	; 0x48
 800acda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	429a      	cmp	r2, r3
 800ace0:	d3f1      	bcc.n	800acc6 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800ace2:	e002      	b.n	800acea <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800ace4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ace6:	3301      	adds	r3, #1
 800ace8:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800acea:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800acee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800acf0:	4413      	add	r3, r2
 800acf2:	4618      	mov	r0, r3
 800acf4:	f7ff fdb0 	bl	800a858 <is_aperture>
 800acf8:	4603      	mov	r3, r0
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d103      	bne.n	800ad06 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800acfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d3ee      	bcc.n	800ace4 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800ad06:	2301      	movs	r3, #1
 800ad08:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800ad0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800ad1a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ad1e:	f107 0218 	add.w	r2, r7, #24
 800ad22:	9204      	str	r2, [sp, #16]
 800ad24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad26:	9203      	str	r2, [sp, #12]
 800ad28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad2a:	9202      	str	r2, [sp, #8]
 800ad2c:	9301      	str	r3, [sp, #4]
 800ad2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	4623      	mov	r3, r4
 800ad34:	4602      	mov	r2, r0
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f7ff fe06 	bl	800a948 <enable_ref_spads>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800ad42:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d11b      	bne.n	800ad82 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800ad4e:	f107 0312 	add.w	r3, r7, #18
 800ad52:	4619      	mov	r1, r3
 800ad54:	68f8      	ldr	r0, [r7, #12]
 800ad56:	f7ff fe73 	bl	800aa40 <perform_ref_signal_measurement>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800ad60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10c      	bne.n	800ad82 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800ad68:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800ad6a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d208      	bcs.n	800ad82 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800ad70:	2301      	movs	r3, #1
 800ad72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800ad76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad78:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800ad7a:	e002      	b.n	800ad82 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad80:	e000      	b.n	800ad84 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800ad82:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800ad84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f040 80af 	bne.w	800aeec <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800ad8e:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800ad90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ad92:	429a      	cmp	r2, r3
 800ad94:	f240 80aa 	bls.w	800aeec <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800ad98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800ad9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ada0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800ada8:	f107 031c 	add.w	r3, r7, #28
 800adac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adae:	4618      	mov	r0, r3
 800adb0:	f009 f93a 	bl	8014028 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800adb4:	8a7b      	ldrh	r3, [r7, #18]
 800adb6:	461a      	mov	r2, r3
 800adb8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	bfb8      	it	lt
 800adc0:	425b      	neglt	r3, r3
 800adc2:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800adca:	e086      	b.n	800aeda <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800add2:	f107 0314 	add.w	r3, r7, #20
 800add6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800add8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adda:	f7ff fcdf 	bl	800a79c <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ade4:	d103      	bne.n	800adee <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ade6:	23ce      	movs	r3, #206	; 0xce
 800ade8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800adec:	e07e      	b.n	800aeec <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800adee:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	4413      	add	r3, r2
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff fd2e 	bl	800a858 <is_aperture>
 800adfc:	4603      	mov	r3, r0
 800adfe:	461a      	mov	r2, r3
 800ae00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d003      	beq.n	800ae0e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800ae06:	2301      	movs	r3, #1
 800ae08:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800ae0c:	e06e      	b.n	800aeec <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800ae0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae10:	3301      	adds	r3, #1
 800ae12:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800ae14:	697b      	ldr	r3, [r7, #20]
 800ae16:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800ae1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff fd32 	bl	800a88c <enable_spad_bit>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800ae2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d10c      	bne.n	800ae50 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800ae36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae38:	3301      	adds	r3, #1
 800ae3a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800ae42:	4619      	mov	r1, r3
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	f7ff fd59 	bl	800a8fc <set_ref_spad_map>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800ae50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d146      	bne.n	800aee6 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800ae58:	f107 0312 	add.w	r3, r7, #18
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	68f8      	ldr	r0, [r7, #12]
 800ae60:	f7ff fdee 	bl	800aa40 <perform_ref_signal_measurement>
 800ae64:	4603      	mov	r3, r0
 800ae66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800ae6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d13b      	bne.n	800aeea <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800ae72:	8a7b      	ldrh	r3, [r7, #18]
 800ae74:	461a      	mov	r2, r3
 800ae76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	bfb8      	it	lt
 800ae7e:	425b      	neglt	r3, r3
 800ae80:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800ae82:	8a7b      	ldrh	r3, [r7, #18]
 800ae84:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d21c      	bcs.n	800aec4 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800ae8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d914      	bls.n	800aebc <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800ae92:	f107 031c 	add.w	r3, r7, #28
 800ae96:	4619      	mov	r1, r3
 800ae98:	68f8      	ldr	r0, [r7, #12]
 800ae9a:	f7ff fd2f 	bl	800a8fc <set_ref_spad_map>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800aeaa:	f107 011c 	add.w	r1, r7, #28
 800aeae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f009 f8b9 	bl	8014028 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800aeb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800aebc:	2301      	movs	r3, #1
 800aebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec2:	e00a      	b.n	800aeda <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800aec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec6:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800aece:	f107 031c 	add.w	r3, r7, #28
 800aed2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aed4:	4618      	mov	r0, r3
 800aed6:	f009 f8a7 	bl	8014028 <memcpy>
		while (!complete) {
 800aeda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800aede:	2b00      	cmp	r3, #0
 800aee0:	f43f af74 	beq.w	800adcc <VL53L0X_perform_ref_spad_management+0x2b8>
 800aee4:	e002      	b.n	800aeec <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800aee6:	bf00      	nop
 800aee8:	e000      	b.n	800aeec <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800aeea:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800aeec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d115      	bne.n	800af20 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aef8:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800af00:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2201      	movs	r2, #1
 800af06:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	b2da      	uxtb	r2, r3
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	781a      	ldrb	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800af20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800af24:	4618      	mov	r0, r3
 800af26:	375c      	adds	r7, #92	; 0x5c
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd90      	pop	{r4, r7, pc}

0800af2c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b093      	sub	sp, #76	; 0x4c
 800af30:	af06      	add	r7, sp, #24
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	4613      	mov	r3, r2
 800af38:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800af40:	2300      	movs	r3, #0
 800af42:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800af44:	23b4      	movs	r3, #180	; 0xb4
 800af46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800af4a:	2306      	movs	r3, #6
 800af4c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800af4e:	232c      	movs	r3, #44	; 0x2c
 800af50:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800af52:	2201      	movs	r2, #1
 800af54:	21ff      	movs	r1, #255	; 0xff
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f002 fdf2 	bl	800db40 <VL53L0X_WrByte>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800af62:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af66:	2b00      	cmp	r3, #0
 800af68:	d107      	bne.n	800af7a <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800af6a:	2200      	movs	r2, #0
 800af6c:	214f      	movs	r1, #79	; 0x4f
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f002 fde6 	bl	800db40 <VL53L0X_WrByte>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800af7a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d107      	bne.n	800af92 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800af82:	222c      	movs	r2, #44	; 0x2c
 800af84:	214e      	movs	r1, #78	; 0x4e
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f002 fdda 	bl	800db40 <VL53L0X_WrByte>
 800af8c:	4603      	mov	r3, r0
 800af8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800af92:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800af96:	2b00      	cmp	r3, #0
 800af98:	d107      	bne.n	800afaa <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800af9a:	2200      	movs	r2, #0
 800af9c:	21ff      	movs	r1, #255	; 0xff
 800af9e:	68f8      	ldr	r0, [r7, #12]
 800afa0:	f002 fdce 	bl	800db40 <VL53L0X_WrByte>
 800afa4:	4603      	mov	r3, r0
 800afa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800afaa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d109      	bne.n	800afc6 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800afb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800afb6:	461a      	mov	r2, r3
 800afb8:	21b6      	movs	r1, #182	; 0xb6
 800afba:	68f8      	ldr	r0, [r7, #12]
 800afbc:	f002 fdc0 	bl	800db40 <VL53L0X_WrByte>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800afc6:	2300      	movs	r3, #0
 800afc8:	627b      	str	r3, [r7, #36]	; 0x24
 800afca:	e009      	b.n	800afe0 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800afcc:	68fa      	ldr	r2, [r7, #12]
 800afce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd0:	4413      	add	r3, r2
 800afd2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800afd6:	2200      	movs	r2, #0
 800afd8:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	3301      	adds	r3, #1
 800afde:	627b      	str	r3, [r7, #36]	; 0x24
 800afe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d3f1      	bcc.n	800afcc <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800afe8:	79fb      	ldrb	r3, [r7, #7]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d011      	beq.n	800b012 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800afee:	e002      	b.n	800aff6 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800aff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff2:	3301      	adds	r3, #1
 800aff4:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800aff6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	4413      	add	r3, r2
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fc2a 	bl	800a858 <is_aperture>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d103      	bne.n	800b012 <VL53L0X_set_reference_spads+0xe6>
 800b00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	429a      	cmp	r2, r3
 800b010:	d3ee      	bcc.n	800aff0 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800b01e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b022:	79f9      	ldrb	r1, [r7, #7]
 800b024:	f107 0214 	add.w	r2, r7, #20
 800b028:	9204      	str	r2, [sp, #16]
 800b02a:	68ba      	ldr	r2, [r7, #8]
 800b02c:	9203      	str	r2, [sp, #12]
 800b02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b030:	9202      	str	r2, [sp, #8]
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	4623      	mov	r3, r4
 800b03a:	4602      	mov	r2, r0
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f7ff fc83 	bl	800a948 <enable_ref_spads>
 800b042:	4603      	mov	r3, r0
 800b044:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800b048:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d10c      	bne.n	800b06a <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	b2da      	uxtb	r2, r3
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	79fa      	ldrb	r2, [r7, #7]
 800b066:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800b06a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3734      	adds	r7, #52	; 0x34
 800b072:	46bd      	mov	sp, r7
 800b074:	bd90      	pop	{r4, r7, pc}

0800b076 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800b076:	b580      	push	{r7, lr}
 800b078:	b084      	sub	sp, #16
 800b07a:	af00      	add	r7, sp, #0
 800b07c:	6078      	str	r0, [r7, #4]
 800b07e:	460b      	mov	r3, r1
 800b080:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d10a      	bne.n	800b0a4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800b08e:	78fb      	ldrb	r3, [r7, #3]
 800b090:	f043 0301 	orr.w	r3, r3, #1
 800b094:	b2db      	uxtb	r3, r3
 800b096:	461a      	mov	r2, r3
 800b098:	2100      	movs	r1, #0
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f002 fd50 	bl	800db40 <VL53L0X_WrByte>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800b0a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d104      	bne.n	800b0b6 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f000 f9bf 	bl	800b430 <VL53L0X_measurement_poll_for_completion>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b0b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d105      	bne.n	800b0ca <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800b0be:	2100      	movs	r1, #0
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f7ff fab5 	bl	800a630 <VL53L0X_ClearInterruptMask>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d106      	bne.n	800b0e0 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	2100      	movs	r1, #0
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f002 fd32 	bl	800db40 <VL53L0X_WrByte>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73fb      	strb	r3, [r7, #15]

	return Status;
 800b0e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3710      	adds	r7, #16
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	bd80      	pop	{r7, pc}

0800b0ec <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	4608      	mov	r0, r1
 800b0f6:	4611      	mov	r1, r2
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	70fb      	strb	r3, [r7, #3]
 800b0fe:	460b      	mov	r3, r1
 800b100:	70bb      	strb	r3, [r7, #2]
 800b102:	4613      	mov	r3, r2
 800b104:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b106:	2300      	movs	r3, #0
 800b108:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b10e:	2201      	movs	r2, #1
 800b110:	21ff      	movs	r1, #255	; 0xff
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f002 fd14 	bl	800db40 <VL53L0X_WrByte>
 800b118:	4603      	mov	r3, r0
 800b11a:	461a      	mov	r2, r3
 800b11c:	7bfb      	ldrb	r3, [r7, #15]
 800b11e:	4313      	orrs	r3, r2
 800b120:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b122:	2200      	movs	r2, #0
 800b124:	2100      	movs	r1, #0
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f002 fd0a 	bl	800db40 <VL53L0X_WrByte>
 800b12c:	4603      	mov	r3, r0
 800b12e:	461a      	mov	r2, r3
 800b130:	7bfb      	ldrb	r3, [r7, #15]
 800b132:	4313      	orrs	r3, r2
 800b134:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b136:	2200      	movs	r2, #0
 800b138:	21ff      	movs	r1, #255	; 0xff
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f002 fd00 	bl	800db40 <VL53L0X_WrByte>
 800b140:	4603      	mov	r3, r0
 800b142:	461a      	mov	r2, r3
 800b144:	7bfb      	ldrb	r3, [r7, #15]
 800b146:	4313      	orrs	r3, r2
 800b148:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800b14a:	78fb      	ldrb	r3, [r7, #3]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d01e      	beq.n	800b18e <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800b150:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d009      	beq.n	800b16c <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800b158:	69ba      	ldr	r2, [r7, #24]
 800b15a:	21cb      	movs	r1, #203	; 0xcb
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f002 fd71 	bl	800dc44 <VL53L0X_RdByte>
 800b162:	4603      	mov	r3, r0
 800b164:	461a      	mov	r2, r3
 800b166:	7bfb      	ldrb	r3, [r7, #15]
 800b168:	4313      	orrs	r3, r2
 800b16a:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b16c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	d02a      	beq.n	800b1ca <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800b174:	f107 030e 	add.w	r3, r7, #14
 800b178:	461a      	mov	r2, r3
 800b17a:	21ee      	movs	r1, #238	; 0xee
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f002 fd61 	bl	800dc44 <VL53L0X_RdByte>
 800b182:	4603      	mov	r3, r0
 800b184:	461a      	mov	r2, r3
 800b186:	7bfb      	ldrb	r3, [r7, #15]
 800b188:	4313      	orrs	r3, r2
 800b18a:	73fb      	strb	r3, [r7, #15]
 800b18c:	e01d      	b.n	800b1ca <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800b18e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00a      	beq.n	800b1ac <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800b196:	78bb      	ldrb	r3, [r7, #2]
 800b198:	461a      	mov	r2, r3
 800b19a:	21cb      	movs	r1, #203	; 0xcb
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f002 fccf 	bl	800db40 <VL53L0X_WrByte>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800b1ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00a      	beq.n	800b1ca <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800b1b4:	787b      	ldrb	r3, [r7, #1]
 800b1b6:	2280      	movs	r2, #128	; 0x80
 800b1b8:	21ee      	movs	r1, #238	; 0xee
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f002 fd0e 	bl	800dbdc <VL53L0X_UpdateByte>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	7bfb      	ldrb	r3, [r7, #15]
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	21ff      	movs	r1, #255	; 0xff
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f002 fcb6 	bl	800db40 <VL53L0X_WrByte>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b1de:	2201      	movs	r2, #1
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f002 fcac 	bl	800db40 <VL53L0X_WrByte>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b1f2:	2200      	movs	r2, #0
 800b1f4:	21ff      	movs	r1, #255	; 0xff
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f002 fca2 	bl	800db40 <VL53L0X_WrByte>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	461a      	mov	r2, r3
 800b200:	7bfb      	ldrb	r3, [r7, #15]
 800b202:	4313      	orrs	r3, r2
 800b204:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800b206:	7bbb      	ldrb	r3, [r7, #14]
 800b208:	f023 0310 	bic.w	r3, r3, #16
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	701a      	strb	r2, [r3, #0]

	return Status;
 800b212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b216:	4618      	mov	r0, r3
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b08a      	sub	sp, #40	; 0x28
 800b222:	af04      	add	r7, sp, #16
 800b224:	60f8      	str	r0, [r7, #12]
 800b226:	60b9      	str	r1, [r7, #8]
 800b228:	4611      	mov	r1, r2
 800b22a:	461a      	mov	r2, r3
 800b22c:	460b      	mov	r3, r1
 800b22e:	71fb      	strb	r3, [r7, #7]
 800b230:	4613      	mov	r3, r2
 800b232:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b234:	2300      	movs	r3, #0
 800b236:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b238:	2300      	movs	r3, #0
 800b23a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b23c:	2300      	movs	r3, #0
 800b23e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b240:	2300      	movs	r3, #0
 800b242:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800b244:	2300      	movs	r3, #0
 800b246:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b248:	79bb      	ldrb	r3, [r7, #6]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d003      	beq.n	800b256 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b254:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800b256:	2201      	movs	r2, #1
 800b258:	2101      	movs	r1, #1
 800b25a:	68f8      	ldr	r0, [r7, #12]
 800b25c:	f002 fc70 	bl	800db40 <VL53L0X_WrByte>
 800b260:	4603      	mov	r3, r0
 800b262:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b264:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d105      	bne.n	800b278 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800b26c:	2140      	movs	r1, #64	; 0x40
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f7ff ff01 	bl	800b076 <VL53L0X_perform_single_ref_calibration>
 800b274:	4603      	mov	r3, r0
 800b276:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d115      	bne.n	800b2ac <VL53L0X_perform_vhv_calibration+0x8e>
 800b280:	79fb      	ldrb	r3, [r7, #7]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d112      	bne.n	800b2ac <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b286:	7d39      	ldrb	r1, [r7, #20]
 800b288:	7d7a      	ldrb	r2, [r7, #21]
 800b28a:	2300      	movs	r3, #0
 800b28c:	9303      	str	r3, [sp, #12]
 800b28e:	2301      	movs	r3, #1
 800b290:	9302      	str	r3, [sp, #8]
 800b292:	f107 0313 	add.w	r3, r7, #19
 800b296:	9301      	str	r3, [sp, #4]
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	9300      	str	r3, [sp, #0]
 800b29c:	460b      	mov	r3, r1
 800b29e:	2101      	movs	r1, #1
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff ff23 	bl	800b0ec <VL53L0X_ref_calibration_io>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]
 800b2aa:	e002      	b.n	800b2b2 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d112      	bne.n	800b2e0 <VL53L0X_perform_vhv_calibration+0xc2>
 800b2ba:	79bb      	ldrb	r3, [r7, #6]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00f      	beq.n	800b2e0 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b2c0:	7dbb      	ldrb	r3, [r7, #22]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f002 fc3a 	bl	800db40 <VL53L0X_WrByte>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b2d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d103      	bne.n	800b2e0 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	7dba      	ldrb	r2, [r7, #22]
 800b2dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b2e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	; 0x28
 800b2f0:	af04      	add	r7, sp, #16
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	60b9      	str	r1, [r7, #8]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	460b      	mov	r3, r1
 800b2fc:	71fb      	strb	r3, [r7, #7]
 800b2fe:	4613      	mov	r3, r2
 800b300:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b302:	2300      	movs	r3, #0
 800b304:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800b30a:	2300      	movs	r3, #0
 800b30c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800b30e:	2300      	movs	r3, #0
 800b310:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800b312:	79bb      	ldrb	r3, [r7, #6]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b31e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800b320:	2202      	movs	r2, #2
 800b322:	2101      	movs	r1, #1
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f002 fc0b 	bl	800db40 <VL53L0X_WrByte>
 800b32a:	4603      	mov	r3, r0
 800b32c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800b32e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d105      	bne.n	800b342 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800b336:	2100      	movs	r1, #0
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f7ff fe9c 	bl	800b076 <VL53L0X_perform_single_ref_calibration>
 800b33e:	4603      	mov	r3, r0
 800b340:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800b342:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d115      	bne.n	800b376 <VL53L0X_perform_phase_calibration+0x8a>
 800b34a:	79fb      	ldrb	r3, [r7, #7]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d112      	bne.n	800b376 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800b350:	7d39      	ldrb	r1, [r7, #20]
 800b352:	7d7a      	ldrb	r2, [r7, #21]
 800b354:	2301      	movs	r3, #1
 800b356:	9303      	str	r3, [sp, #12]
 800b358:	2300      	movs	r3, #0
 800b35a:	9302      	str	r3, [sp, #8]
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	9301      	str	r3, [sp, #4]
 800b360:	f107 0313 	add.w	r3, r7, #19
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	460b      	mov	r3, r1
 800b368:	2101      	movs	r1, #1
 800b36a:	68f8      	ldr	r0, [r7, #12]
 800b36c:	f7ff febe 	bl	800b0ec <VL53L0X_ref_calibration_io>
 800b370:	4603      	mov	r3, r0
 800b372:	75fb      	strb	r3, [r7, #23]
 800b374:	e002      	b.n	800b37c <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	2200      	movs	r2, #0
 800b37a:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800b37c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d112      	bne.n	800b3aa <VL53L0X_perform_phase_calibration+0xbe>
 800b384:	79bb      	ldrb	r3, [r7, #6]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00f      	beq.n	800b3aa <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b38a:	7dbb      	ldrb	r3, [r7, #22]
 800b38c:	461a      	mov	r2, r3
 800b38e:	2101      	movs	r1, #1
 800b390:	68f8      	ldr	r0, [r7, #12]
 800b392:	f002 fbd5 	bl	800db40 <VL53L0X_WrByte>
 800b396:	4603      	mov	r3, r0
 800b398:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b39a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d103      	bne.n	800b3aa <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	7dba      	ldrb	r2, [r7, #22]
 800b3a6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b3aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b086      	sub	sp, #24
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	60f8      	str	r0, [r7, #12]
 800b3be:	60b9      	str	r1, [r7, #8]
 800b3c0:	607a      	str	r2, [r7, #4]
 800b3c2:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800b3d2:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	68b9      	ldr	r1, [r7, #8]
 800b3da:	68f8      	ldr	r0, [r7, #12]
 800b3dc:	f7ff ff1f 	bl	800b21e <VL53L0X_perform_vhv_calibration>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b3e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d107      	bne.n	800b3fc <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800b3ec:	78fa      	ldrb	r2, [r7, #3]
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	6879      	ldr	r1, [r7, #4]
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	f7ff ff7a 	bl	800b2ec <VL53L0X_perform_phase_calibration>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800b3fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10f      	bne.n	800b424 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b404:	7dbb      	ldrb	r3, [r7, #22]
 800b406:	461a      	mov	r2, r3
 800b408:	2101      	movs	r1, #1
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	f002 fb98 	bl	800db40 <VL53L0X_WrByte>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800b414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d103      	bne.n	800b424 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	7dba      	ldrb	r2, [r7, #22]
 800b420:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800b424:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3718      	adds	r7, #24
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b086      	sub	sp, #24
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b438:	2300      	movs	r3, #0
 800b43a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800b43c:	2300      	movs	r3, #0
 800b43e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800b440:	2300      	movs	r3, #0
 800b442:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b444:	f107 030f 	add.w	r3, r7, #15
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f7fe fe02 	bl	800a054 <VL53L0X_GetMeasurementDataReady>
 800b450:	4603      	mov	r3, r0
 800b452:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800b454:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d110      	bne.n	800b47e <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800b45c:	7bfb      	ldrb	r3, [r7, #15]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d00f      	beq.n	800b482 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	3301      	adds	r3, #1
 800b466:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b46e:	d302      	bcc.n	800b476 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b470:	23f9      	movs	r3, #249	; 0xf9
 800b472:	75fb      	strb	r3, [r7, #23]
			break;
 800b474:	e006      	b.n	800b484 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800b476:	6878      	ldr	r0, [r7, #4]
 800b478:	f002 fc82 	bl	800dd80 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800b47c:	e7e2      	b.n	800b444 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800b47e:	bf00      	nop
 800b480:	e000      	b.n	800b484 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800b482:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800b484:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b488:	4618      	mov	r0, r3
 800b48a:	3718      	adds	r7, #24
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	3301      	adds	r3, #1
 800b4a2:	b2db      	uxtb	r3, r3
 800b4a4:	005b      	lsls	r3, r3, #1
 800b4a6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800b4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr

0800b4b6 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800b4b6:	b480      	push	{r7}
 800b4b8:	b085      	sub	sp, #20
 800b4ba:	af00      	add	r7, sp, #0
 800b4bc:	4603      	mov	r3, r0
 800b4be:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	085b      	lsrs	r3, r3, #1
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800b4e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4ec:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800b4ee:	e002      	b.n	800b4f6 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	089b      	lsrs	r3, r3, #2
 800b4f4:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800b4f6:	68ba      	ldr	r2, [r7, #8]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d8f8      	bhi.n	800b4f0 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800b4fe:	e017      	b.n	800b530 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	4413      	add	r3, r2
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	429a      	cmp	r2, r3
 800b50a:	d30b      	bcc.n	800b524 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	4413      	add	r3, r2
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	1ad3      	subs	r3, r2, r3
 800b516:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	085b      	lsrs	r3, r3, #1
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	4413      	add	r3, r2
 800b520:	60fb      	str	r3, [r7, #12]
 800b522:	e002      	b.n	800b52a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	085b      	lsrs	r3, r3, #1
 800b528:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	089b      	lsrs	r3, r3, #2
 800b52e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1e4      	bne.n	800b500 <VL53L0X_isqrt+0x24>
	}

	return res;
 800b536:	68fb      	ldr	r3, [r7, #12]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3714      	adds	r7, #20
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b086      	sub	sp, #24
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b54c:	2300      	movs	r3, #0
 800b54e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800b550:	2200      	movs	r2, #0
 800b552:	2183      	movs	r1, #131	; 0x83
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f002 faf3 	bl	800db40 <VL53L0X_WrByte>
 800b55a:	4603      	mov	r3, r0
 800b55c:	461a      	mov	r2, r3
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	4313      	orrs	r3, r2
 800b562:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800b564:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d11e      	bne.n	800b5aa <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800b570:	f107 030f 	add.w	r3, r7, #15
 800b574:	461a      	mov	r2, r3
 800b576:	2183      	movs	r1, #131	; 0x83
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f002 fb63 	bl	800dc44 <VL53L0X_RdByte>
 800b57e:	4603      	mov	r3, r0
 800b580:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800b582:	7bfb      	ldrb	r3, [r7, #15]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d10a      	bne.n	800b59e <VL53L0X_device_read_strobe+0x5a>
 800b588:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d106      	bne.n	800b59e <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	3301      	adds	r3, #1
 800b594:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b59c:	d3e8      	bcc.n	800b570 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b5a4:	d301      	bcc.n	800b5aa <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800b5a6:	23f9      	movs	r3, #249	; 0xf9
 800b5a8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800b5aa:	2201      	movs	r2, #1
 800b5ac:	2183      	movs	r1, #131	; 0x83
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f002 fac6 	bl	800db40 <VL53L0X_WrByte>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	7dfb      	ldrb	r3, [r7, #23]
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800b5be:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	3718      	adds	r7, #24
 800b5c6:	46bd      	mov	sp, r7
 800b5c8:	bd80      	pop	{r7, pc}

0800b5ca <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b098      	sub	sp, #96	; 0x60
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	460b      	mov	r3, r1
 800b5d4:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800b5fa:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800b5fe:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800b604:	2300      	movs	r3, #0
 800b606:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800b612:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800b616:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b61a:	2b07      	cmp	r3, #7
 800b61c:	f000 8408 	beq.w	800be30 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b620:	2201      	movs	r2, #1
 800b622:	2180      	movs	r1, #128	; 0x80
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f002 fa8b 	bl	800db40 <VL53L0X_WrByte>
 800b62a:	4603      	mov	r3, r0
 800b62c:	461a      	mov	r2, r3
 800b62e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b632:	4313      	orrs	r3, r2
 800b634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b638:	2201      	movs	r2, #1
 800b63a:	21ff      	movs	r1, #255	; 0xff
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f002 fa7f 	bl	800db40 <VL53L0X_WrByte>
 800b642:	4603      	mov	r3, r0
 800b644:	461a      	mov	r2, r3
 800b646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b64a:	4313      	orrs	r3, r2
 800b64c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f002 fa73 	bl	800db40 <VL53L0X_WrByte>
 800b65a:	4603      	mov	r3, r0
 800b65c:	461a      	mov	r2, r3
 800b65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b662:	4313      	orrs	r3, r2
 800b664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800b668:	2206      	movs	r2, #6
 800b66a:	21ff      	movs	r1, #255	; 0xff
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f002 fa67 	bl	800db40 <VL53L0X_WrByte>
 800b672:	4603      	mov	r3, r0
 800b674:	461a      	mov	r2, r3
 800b676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b67a:	4313      	orrs	r3, r2
 800b67c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800b680:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800b684:	461a      	mov	r2, r3
 800b686:	2183      	movs	r1, #131	; 0x83
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f002 fadb 	bl	800dc44 <VL53L0X_RdByte>
 800b68e:	4603      	mov	r3, r0
 800b690:	461a      	mov	r2, r3
 800b692:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b696:	4313      	orrs	r3, r2
 800b698:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800b69c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b6a0:	f043 0304 	orr.w	r3, r3, #4
 800b6a4:	b2db      	uxtb	r3, r3
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	2183      	movs	r1, #131	; 0x83
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f002 fa48 	bl	800db40 <VL53L0X_WrByte>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	461a      	mov	r2, r3
 800b6b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800b6be:	2207      	movs	r2, #7
 800b6c0:	21ff      	movs	r1, #255	; 0xff
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f002 fa3c 	bl	800db40 <VL53L0X_WrByte>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6d0:	4313      	orrs	r3, r2
 800b6d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	2181      	movs	r1, #129	; 0x81
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f002 fa30 	bl	800db40 <VL53L0X_WrByte>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f002 fb46 	bl	800dd80 <VL53L0X_PollingDelay>
 800b6f4:	4603      	mov	r3, r0
 800b6f6:	461a      	mov	r2, r3
 800b6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b6fc:	4313      	orrs	r3, r2
 800b6fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b702:	2201      	movs	r2, #1
 800b704:	2180      	movs	r1, #128	; 0x80
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f002 fa1a 	bl	800db40 <VL53L0X_WrByte>
 800b70c:	4603      	mov	r3, r0
 800b70e:	461a      	mov	r2, r3
 800b710:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b714:	4313      	orrs	r3, r2
 800b716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800b71a:	78fb      	ldrb	r3, [r7, #3]
 800b71c:	f003 0301 	and.w	r3, r3, #1
 800b720:	2b00      	cmp	r3, #0
 800b722:	f000 8098 	beq.w	800b856 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800b726:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b72a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800b72e:	2b00      	cmp	r3, #0
 800b730:	f040 8091 	bne.w	800b856 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800b734:	226b      	movs	r2, #107	; 0x6b
 800b736:	2194      	movs	r1, #148	; 0x94
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f002 fa01 	bl	800db40 <VL53L0X_WrByte>
 800b73e:	4603      	mov	r3, r0
 800b740:	461a      	mov	r2, r3
 800b742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b746:	4313      	orrs	r3, r2
 800b748:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f7ff fef9 	bl	800b544 <VL53L0X_device_read_strobe>
 800b752:	4603      	mov	r3, r0
 800b754:	461a      	mov	r2, r3
 800b756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b75a:	4313      	orrs	r3, r2
 800b75c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b764:	461a      	mov	r2, r3
 800b766:	2190      	movs	r1, #144	; 0x90
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f002 facd 	bl	800dd08 <VL53L0X_RdDWord>
 800b76e:	4603      	mov	r3, r0
 800b770:	461a      	mov	r2, r3
 800b772:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b776:	4313      	orrs	r3, r2
 800b778:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800b77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b77e:	0a1b      	lsrs	r3, r3, #8
 800b780:	b2db      	uxtb	r3, r3
 800b782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b786:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	0bdb      	lsrs	r3, r3, #15
 800b78e:	b2db      	uxtb	r3, r3
 800b790:	f003 0301 	and.w	r3, r3, #1
 800b794:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800b798:	2224      	movs	r2, #36	; 0x24
 800b79a:	2194      	movs	r1, #148	; 0x94
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f002 f9cf 	bl	800db40 <VL53L0X_WrByte>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fec7 	bl	800b544 <VL53L0X_device_read_strobe>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b7c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	2190      	movs	r1, #144	; 0x90
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f002 fa9b 	bl	800dd08 <VL53L0X_RdDWord>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7da:	4313      	orrs	r3, r2
 800b7dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e2:	0e1b      	lsrs	r3, r3, #24
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800b7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7ea:	0c1b      	lsrs	r3, r3, #16
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800b7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7f2:	0a1b      	lsrs	r3, r3, #8
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800b7fe:	2225      	movs	r2, #37	; 0x25
 800b800:	2194      	movs	r1, #148	; 0x94
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f002 f99c 	bl	800db40 <VL53L0X_WrByte>
 800b808:	4603      	mov	r3, r0
 800b80a:	461a      	mov	r2, r3
 800b80c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b810:	4313      	orrs	r3, r2
 800b812:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f7ff fe94 	bl	800b544 <VL53L0X_device_read_strobe>
 800b81c:	4603      	mov	r3, r0
 800b81e:	461a      	mov	r2, r3
 800b820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b824:	4313      	orrs	r3, r2
 800b826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b82a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b82e:	461a      	mov	r2, r3
 800b830:	2190      	movs	r1, #144	; 0x90
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f002 fa68 	bl	800dd08 <VL53L0X_RdDWord>
 800b838:	4603      	mov	r3, r0
 800b83a:	461a      	mov	r2, r3
 800b83c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b840:	4313      	orrs	r3, r2
 800b842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	0e1b      	lsrs	r3, r3, #24
 800b84a:	b2db      	uxtb	r3, r3
 800b84c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800b84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b850:	0c1b      	lsrs	r3, r3, #16
 800b852:	b2db      	uxtb	r3, r3
 800b854:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800b856:	78fb      	ldrb	r3, [r7, #3]
 800b858:	f003 0302 	and.w	r3, r3, #2
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 8189 	beq.w	800bb74 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800b862:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800b866:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	f040 8182 	bne.w	800bb74 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800b870:	2202      	movs	r2, #2
 800b872:	2194      	movs	r1, #148	; 0x94
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f002 f963 	bl	800db40 <VL53L0X_WrByte>
 800b87a:	4603      	mov	r3, r0
 800b87c:	461a      	mov	r2, r3
 800b87e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b882:	4313      	orrs	r3, r2
 800b884:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f7ff fe5b 	bl	800b544 <VL53L0X_device_read_strobe>
 800b88e:	4603      	mov	r3, r0
 800b890:	461a      	mov	r2, r3
 800b892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b896:	4313      	orrs	r3, r2
 800b898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800b89c:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2190      	movs	r1, #144	; 0x90
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f002 f9cd 	bl	800dc44 <VL53L0X_RdByte>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8b2:	4313      	orrs	r3, r2
 800b8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800b8b8:	227b      	movs	r2, #123	; 0x7b
 800b8ba:	2194      	movs	r1, #148	; 0x94
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f002 f93f 	bl	800db40 <VL53L0X_WrByte>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b8d0:	6878      	ldr	r0, [r7, #4]
 800b8d2:	f7ff fe37 	bl	800b544 <VL53L0X_device_read_strobe>
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	461a      	mov	r2, r3
 800b8da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8de:	4313      	orrs	r3, r2
 800b8e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800b8e4:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	2190      	movs	r1, #144	; 0x90
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f002 f9a9 	bl	800dc44 <VL53L0X_RdByte>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	461a      	mov	r2, r3
 800b8f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8fa:	4313      	orrs	r3, r2
 800b8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800b900:	2277      	movs	r2, #119	; 0x77
 800b902:	2194      	movs	r1, #148	; 0x94
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f002 f91b 	bl	800db40 <VL53L0X_WrByte>
 800b90a:	4603      	mov	r3, r0
 800b90c:	461a      	mov	r2, r3
 800b90e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b912:	4313      	orrs	r3, r2
 800b914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f7ff fe13 	bl	800b544 <VL53L0X_device_read_strobe>
 800b91e:	4603      	mov	r3, r0
 800b920:	461a      	mov	r2, r3
 800b922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b926:	4313      	orrs	r3, r2
 800b928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b92c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b930:	461a      	mov	r2, r3
 800b932:	2190      	movs	r1, #144	; 0x90
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f002 f9e7 	bl	800dd08 <VL53L0X_RdDWord>
 800b93a:	4603      	mov	r3, r0
 800b93c:	461a      	mov	r2, r3
 800b93e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b942:	4313      	orrs	r3, r2
 800b944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800b948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94a:	0e5b      	lsrs	r3, r3, #25
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b952:	b2db      	uxtb	r3, r3
 800b954:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800b956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b958:	0c9b      	lsrs	r3, r3, #18
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b960:	b2db      	uxtb	r3, r3
 800b962:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800b964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b966:	0adb      	lsrs	r3, r3, #11
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	091b      	lsrs	r3, r3, #4
 800b976:	b2db      	uxtb	r3, r3
 800b978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b97c:	b2db      	uxtb	r3, r3
 800b97e:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800b980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b982:	b2db      	uxtb	r3, r3
 800b984:	00db      	lsls	r3, r3, #3
 800b986:	b2db      	uxtb	r3, r3
 800b988:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800b98c:	b2db      	uxtb	r3, r3
 800b98e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800b992:	2278      	movs	r2, #120	; 0x78
 800b994:	2194      	movs	r1, #148	; 0x94
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f002 f8d2 	bl	800db40 <VL53L0X_WrByte>
 800b99c:	4603      	mov	r3, r0
 800b99e:	461a      	mov	r2, r3
 800b9a0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800b9aa:	6878      	ldr	r0, [r7, #4]
 800b9ac:	f7ff fdca 	bl	800b544 <VL53L0X_device_read_strobe>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800b9be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	2190      	movs	r1, #144	; 0x90
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f002 f99e 	bl	800dd08 <VL53L0X_RdDWord>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800b9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9dc:	0f5b      	lsrs	r3, r3, #29
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9e4:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800b9e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b9ea:	4413      	add	r3, r2
 800b9ec:	b2db      	uxtb	r3, r3
 800b9ee:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800b9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f2:	0d9b      	lsrs	r3, r3, #22
 800b9f4:	b2db      	uxtb	r3, r3
 800b9f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800b9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba00:	0bdb      	lsrs	r3, r3, #15
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba08:	b2db      	uxtb	r3, r3
 800ba0a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	0a1b      	lsrs	r3, r3, #8
 800ba10:	b2db      	uxtb	r3, r3
 800ba12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba16:	b2db      	uxtb	r3, r3
 800ba18:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	085b      	lsrs	r3, r3, #1
 800ba1e:	b2db      	uxtb	r3, r3
 800ba20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800ba28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	019b      	lsls	r3, r3, #6
 800ba2e:	b2db      	uxtb	r3, r3
 800ba30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba34:	b2db      	uxtb	r3, r3
 800ba36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800ba3a:	2279      	movs	r2, #121	; 0x79
 800ba3c:	2194      	movs	r1, #148	; 0x94
 800ba3e:	6878      	ldr	r0, [r7, #4]
 800ba40:	f002 f87e 	bl	800db40 <VL53L0X_WrByte>
 800ba44:	4603      	mov	r3, r0
 800ba46:	461a      	mov	r2, r3
 800ba48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fd76 	bl	800b544 <VL53L0X_device_read_strobe>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	461a      	mov	r2, r3
 800ba5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba60:	4313      	orrs	r3, r2
 800ba62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800ba66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	2190      	movs	r1, #144	; 0x90
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f002 f94a 	bl	800dd08 <VL53L0X_RdDWord>
 800ba74:	4603      	mov	r3, r0
 800ba76:	461a      	mov	r2, r3
 800ba78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ba82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba84:	0e9b      	lsrs	r3, r3, #26
 800ba86:	b2db      	uxtb	r3, r3
 800ba88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba8c:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800ba8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ba92:	4413      	add	r3, r2
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800ba98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba9a:	0cdb      	lsrs	r3, r3, #19
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa2:	b2db      	uxtb	r3, r3
 800baa4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800baa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800baa8:	0b1b      	lsrs	r3, r3, #12
 800baaa:	b2db      	uxtb	r3, r3
 800baac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800bab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bab6:	095b      	lsrs	r3, r3, #5
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800babe:	b2db      	uxtb	r3, r3
 800bac0:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800bad4:	227a      	movs	r2, #122	; 0x7a
 800bad6:	2194      	movs	r1, #148	; 0x94
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f002 f831 	bl	800db40 <VL53L0X_WrByte>
 800bade:	4603      	mov	r3, r0
 800bae0:	461a      	mov	r2, r3
 800bae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bae6:	4313      	orrs	r3, r2
 800bae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f7ff fd29 	bl	800b544 <VL53L0X_device_read_strobe>
 800baf2:	4603      	mov	r3, r0
 800baf4:	461a      	mov	r2, r3
 800baf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bafa:	4313      	orrs	r3, r2
 800bafc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bb00:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb04:	461a      	mov	r2, r3
 800bb06:	2190      	movs	r1, #144	; 0x90
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f002 f8fd 	bl	800dd08 <VL53L0X_RdDWord>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	461a      	mov	r2, r3
 800bb12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bb16:	4313      	orrs	r3, r2
 800bb18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb1e:	0f9b      	lsrs	r3, r3, #30
 800bb20:	b2db      	uxtb	r3, r3
 800bb22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb26:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800bb28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bb2c:	4413      	add	r3, r2
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800bb32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb34:	0ddb      	lsrs	r3, r3, #23
 800bb36:	b2db      	uxtb	r3, r3
 800bb38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800bb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb42:	0c1b      	lsrs	r3, r3, #16
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800bb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb50:	0a5b      	lsrs	r3, r3, #9
 800bb52:	b2db      	uxtb	r3, r3
 800bb54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	089b      	lsrs	r3, r3, #2
 800bb62:	b2db      	uxtb	r3, r3
 800bb64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800bb6e:	2300      	movs	r3, #0
 800bb70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	f003 0304 	and.w	r3, r3, #4
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 80f1 	beq.w	800bd62 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bb80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bb84:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f040 80ea 	bne.w	800bd62 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800bb8e:	227b      	movs	r2, #123	; 0x7b
 800bb90:	2194      	movs	r1, #148	; 0x94
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f001 ffd4 	bl	800db40 <VL53L0X_WrByte>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff fccc 	bl	800b544 <VL53L0X_device_read_strobe>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800bbba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	2190      	movs	r1, #144	; 0x90
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f002 f8a0 	bl	800dd08 <VL53L0X_RdDWord>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	461a      	mov	r2, r3
 800bbcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbd0:	4313      	orrs	r3, r2
 800bbd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800bbd6:	227c      	movs	r2, #124	; 0x7c
 800bbd8:	2194      	movs	r1, #148	; 0x94
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f001 ffb0 	bl	800db40 <VL53L0X_WrByte>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bbee:	6878      	ldr	r0, [r7, #4]
 800bbf0:	f7ff fca8 	bl	800b544 <VL53L0X_device_read_strobe>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bbfc:	4313      	orrs	r3, r2
 800bbfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800bc02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc06:	461a      	mov	r2, r3
 800bc08:	2190      	movs	r1, #144	; 0x90
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f002 f87c 	bl	800dd08 <VL53L0X_RdDWord>
 800bc10:	4603      	mov	r3, r0
 800bc12:	461a      	mov	r2, r3
 800bc14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800bc1e:	2273      	movs	r2, #115	; 0x73
 800bc20:	2194      	movs	r1, #148	; 0x94
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f001 ff8c 	bl	800db40 <VL53L0X_WrByte>
 800bc28:	4603      	mov	r3, r0
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc30:	4313      	orrs	r3, r2
 800bc32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc36:	6878      	ldr	r0, [r7, #4]
 800bc38:	f7ff fc84 	bl	800b544 <VL53L0X_device_read_strobe>
 800bc3c:	4603      	mov	r3, r0
 800bc3e:	461a      	mov	r2, r3
 800bc40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc44:	4313      	orrs	r3, r2
 800bc46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc4e:	461a      	mov	r2, r3
 800bc50:	2190      	movs	r1, #144	; 0x90
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f002 f858 	bl	800dd08 <VL53L0X_RdDWord>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc60:	4313      	orrs	r3, r2
 800bc62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800bc66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc68:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800bc6e:	2274      	movs	r2, #116	; 0x74
 800bc70:	2194      	movs	r1, #148	; 0x94
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f001 ff64 	bl	800db40 <VL53L0X_WrByte>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc80:	4313      	orrs	r3, r2
 800bc82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fc5c 	bl	800b544 <VL53L0X_device_read_strobe>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bc94:	4313      	orrs	r3, r2
 800bc96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bc9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bc9e:	461a      	mov	r2, r3
 800bca0:	2190      	movs	r1, #144	; 0x90
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f002 f830 	bl	800dd08 <VL53L0X_RdDWord>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800bcb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcb8:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800bcba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800bcc0:	2275      	movs	r2, #117	; 0x75
 800bcc2:	2194      	movs	r1, #148	; 0x94
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f001 ff3b 	bl	800db40 <VL53L0X_WrByte>
 800bcca:	4603      	mov	r3, r0
 800bccc:	461a      	mov	r2, r3
 800bcce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f7ff fc33 	bl	800b544 <VL53L0X_device_read_strobe>
 800bcde:	4603      	mov	r3, r0
 800bce0:	461a      	mov	r2, r3
 800bce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bce6:	4313      	orrs	r3, r2
 800bce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bcec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	2190      	movs	r1, #144	; 0x90
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f002 f807 	bl	800dd08 <VL53L0X_RdDWord>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd02:	4313      	orrs	r3, r2
 800bd04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800bd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd0a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800bd10:	2276      	movs	r2, #118	; 0x76
 800bd12:	2194      	movs	r1, #148	; 0x94
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f001 ff13 	bl	800db40 <VL53L0X_WrByte>
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd22:	4313      	orrs	r3, r2
 800bd24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f7ff fc0b 	bl	800b544 <VL53L0X_device_read_strobe>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	461a      	mov	r2, r3
 800bd32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd36:	4313      	orrs	r3, r2
 800bd38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800bd3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bd40:	461a      	mov	r2, r3
 800bd42:	2190      	movs	r1, #144	; 0x90
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f001 ffdf 	bl	800dd08 <VL53L0X_RdDWord>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd52:	4313      	orrs	r3, r2
 800bd54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800bd5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800bd62:	2200      	movs	r2, #0
 800bd64:	2181      	movs	r1, #129	; 0x81
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f001 feea 	bl	800db40 <VL53L0X_WrByte>
 800bd6c:	4603      	mov	r3, r0
 800bd6e:	461a      	mov	r2, r3
 800bd70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd74:	4313      	orrs	r3, r2
 800bd76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800bd7a:	2206      	movs	r2, #6
 800bd7c:	21ff      	movs	r1, #255	; 0xff
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f001 fede 	bl	800db40 <VL53L0X_WrByte>
 800bd84:	4603      	mov	r3, r0
 800bd86:	461a      	mov	r2, r3
 800bd88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800bd92:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800bd96:	461a      	mov	r2, r3
 800bd98:	2183      	movs	r1, #131	; 0x83
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 ff52 	bl	800dc44 <VL53L0X_RdByte>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bda8:	4313      	orrs	r3, r2
 800bdaa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800bdae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bdb2:	f023 0304 	bic.w	r3, r3, #4
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	461a      	mov	r2, r3
 800bdba:	2183      	movs	r1, #131	; 0x83
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f001 febf 	bl	800db40 <VL53L0X_WrByte>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	461a      	mov	r2, r3
 800bdc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	21ff      	movs	r1, #255	; 0xff
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f001 feb3 	bl	800db40 <VL53L0X_WrByte>
 800bdda:	4603      	mov	r3, r0
 800bddc:	461a      	mov	r2, r3
 800bdde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bde2:	4313      	orrs	r3, r2
 800bde4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800bde8:	2201      	movs	r2, #1
 800bdea:	2100      	movs	r1, #0
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f001 fea7 	bl	800db40 <VL53L0X_WrByte>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800be00:	2200      	movs	r2, #0
 800be02:	21ff      	movs	r1, #255	; 0xff
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	f001 fe9b 	bl	800db40 <VL53L0X_WrByte>
 800be0a:	4603      	mov	r3, r0
 800be0c:	461a      	mov	r2, r3
 800be0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be12:	4313      	orrs	r3, r2
 800be14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800be18:	2200      	movs	r2, #0
 800be1a:	2180      	movs	r1, #128	; 0x80
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f001 fe8f 	bl	800db40 <VL53L0X_WrByte>
 800be22:	4603      	mov	r3, r0
 800be24:	461a      	mov	r2, r3
 800be26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800be2a:	4313      	orrs	r3, r2
 800be2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800be30:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800be34:	2b00      	cmp	r3, #0
 800be36:	f040 808f 	bne.w	800bf58 <VL53L0X_get_info_from_device+0x98e>
 800be3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be3e:	2b07      	cmp	r3, #7
 800be40:	f000 808a 	beq.w	800bf58 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	f003 0301 	and.w	r3, r3, #1
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d024      	beq.n	800be98 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800be4e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800be52:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800be56:	2b00      	cmp	r3, #0
 800be58:	d11e      	bne.n	800be98 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800be60:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800be6a:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800be6e:	2300      	movs	r3, #0
 800be70:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be72:	e00e      	b.n	800be92 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800be74:	f107 0208 	add.w	r2, r7, #8
 800be78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be7a:	4413      	add	r3, r2
 800be7c:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800be7e:	687a      	ldr	r2, [r7, #4]
 800be80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be82:	4413      	add	r3, r2
 800be84:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800be88:	460a      	mov	r2, r1
 800be8a:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800be8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be8e:	3301      	adds	r3, #1
 800be90:	64fb      	str	r3, [r7, #76]	; 0x4c
 800be92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be94:	2b05      	cmp	r3, #5
 800be96:	dded      	ble.n	800be74 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	f003 0302 	and.w	r3, r3, #2
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d018      	beq.n	800bed4 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800bea2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bea6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d112      	bne.n	800bed4 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800beae:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800beb8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	33f3      	adds	r3, #243	; 0xf3
 800bec6:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800bec8:	f107 0310 	add.w	r3, r7, #16
 800becc:	4619      	mov	r1, r3
 800bece:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bed0:	f008 f92a 	bl	8014128 <strcpy>

		}

		if (((option & 4) == 4) &&
 800bed4:	78fb      	ldrb	r3, [r7, #3]
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d030      	beq.n	800bf40 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800bede:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bee2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d12a      	bne.n	800bf40 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800beea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800befa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800befc:	025b      	lsls	r3, r3, #9
 800befe:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bf04:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800bf0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d011      	beq.n	800bf38 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800bf14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf18:	1ad3      	subs	r3, r2, r3
 800bf1a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800bf1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bf1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf22:	fb02 f303 	mul.w	r3, r2, r3
 800bf26:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800bf28:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800bf2c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800bf30:	425b      	negs	r3, r3
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800bf38:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800bf40:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800bf44:	78fb      	ldrb	r3, [r7, #3]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	b2db      	uxtb	r3, r3
 800bf4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800bf4e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf58:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3760      	adds	r7, #96	; 0x60
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}

0800bf64 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b087      	sub	sp, #28
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800bf70:	f240 6277 	movw	r2, #1655	; 0x677
 800bf74:	f04f 0300 	mov.w	r3, #0
 800bf78:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800bf7c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800bf80:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800bf82:	78fb      	ldrb	r3, [r7, #3]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	fb02 f303 	mul.w	r3, r2, r3
 800bf90:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800bf92:	68bb      	ldr	r3, [r7, #8]
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	371c      	adds	r7, #28
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9e:	4770      	bx	lr

0800bfa0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800bfa0:	b480      	push	{r7}
 800bfa2:	b087      	sub	sp, #28
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d017      	beq.n	800bfea <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bfc0:	e005      	b.n	800bfce <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800bfc2:	693b      	ldr	r3, [r7, #16]
 800bfc4:	085b      	lsrs	r3, r3, #1
 800bfc6:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800bfc8:	89fb      	ldrh	r3, [r7, #14]
 800bfca:	3301      	adds	r3, #1
 800bfcc:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1f4      	bne.n	800bfc2 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800bfd8:	89fb      	ldrh	r3, [r7, #14]
 800bfda:	021b      	lsls	r3, r3, #8
 800bfdc:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800bfde:	693b      	ldr	r3, [r7, #16]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800bfe6:	4413      	add	r3, r2
 800bfe8:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800bfea:	8afb      	ldrh	r3, [r7, #22]

}
 800bfec:	4618      	mov	r0, r3
 800bfee:	371c      	adds	r7, #28
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	4603      	mov	r3, r0
 800c000:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800c002:	2300      	movs	r3, #0
 800c004:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c006:	88fb      	ldrh	r3, [r7, #6]
 800c008:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800c00a:	88fa      	ldrh	r2, [r7, #6]
 800c00c:	0a12      	lsrs	r2, r2, #8
 800c00e:	b292      	uxth	r2, r2
 800c010:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800c012:	3301      	adds	r3, #1
 800c014:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800c016:	68fb      	ldr	r3, [r7, #12]
}
 800c018:	4618      	mov	r0, r3
 800c01a:	3714      	adds	r7, #20
 800c01c:	46bd      	mov	sp, r7
 800c01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c022:	4770      	bx	lr

0800c024 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b088      	sub	sp, #32
 800c028:	af00      	add	r7, sp, #0
 800c02a:	60f8      	str	r0, [r7, #12]
 800c02c:	60b9      	str	r1, [r7, #8]
 800c02e:	4613      	mov	r3, r2
 800c030:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c036:	79fb      	ldrb	r3, [r7, #7]
 800c038:	4619      	mov	r1, r3
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f7ff ff92 	bl	800bf64 <VL53L0X_calc_macro_period_ps>
 800c040:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c042:	69bb      	ldr	r3, [r7, #24]
 800c044:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c048:	4a0a      	ldr	r2, [pc, #40]	; (800c074 <VL53L0X_calc_timeout_mclks+0x50>)
 800c04a:	fba2 2303 	umull	r2, r3, r2, r3
 800c04e:	099b      	lsrs	r3, r3, #6
 800c050:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c058:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	085b      	lsrs	r3, r3, #1
 800c060:	441a      	add	r2, r3
	timeout_period_mclks =
 800c062:	697b      	ldr	r3, [r7, #20]
 800c064:	fbb2 f3f3 	udiv	r3, r2, r3
 800c068:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800c06a:	69fb      	ldr	r3, [r7, #28]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	3720      	adds	r7, #32
 800c070:	46bd      	mov	sp, r7
 800c072:	bd80      	pop	{r7, pc}
 800c074:	10624dd3 	.word	0x10624dd3

0800c078 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800c078:	b580      	push	{r7, lr}
 800c07a:	b086      	sub	sp, #24
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	460b      	mov	r3, r1
 800c082:	807b      	strh	r3, [r7, #2]
 800c084:	4613      	mov	r3, r2
 800c086:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800c088:	2300      	movs	r3, #0
 800c08a:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800c08c:	787b      	ldrb	r3, [r7, #1]
 800c08e:	4619      	mov	r1, r3
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f7ff ff67 	bl	800bf64 <VL53L0X_calc_macro_period_ps>
 800c096:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c09e:	4a0a      	ldr	r2, [pc, #40]	; (800c0c8 <VL53L0X_calc_timeout_us+0x50>)
 800c0a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0a4:	099b      	lsrs	r3, r3, #6
 800c0a6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800c0a8:	887b      	ldrh	r3, [r7, #2]
 800c0aa:	68fa      	ldr	r2, [r7, #12]
 800c0ac:	fb02 f303 	mul.w	r3, r2, r3
 800c0b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800c0b4:	4a04      	ldr	r2, [pc, #16]	; (800c0c8 <VL53L0X_calc_timeout_us+0x50>)
 800c0b6:	fba2 2303 	umull	r2, r3, r2, r3
 800c0ba:	099b      	lsrs	r3, r3, #6
 800c0bc:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800c0be:	697b      	ldr	r3, [r7, #20]
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	10624dd3 	.word	0x10624dd3

0800c0cc <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b08c      	sub	sp, #48	; 0x30
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	607a      	str	r2, [r7, #4]
 800c0d8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c0da:	2300      	movs	r3, #0
 800c0dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c0f2:	7afb      	ldrb	r3, [r7, #11]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d005      	beq.n	800c104 <get_sequence_step_timeout+0x38>
 800c0f8:	7afb      	ldrb	r3, [r7, #11]
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d002      	beq.n	800c104 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c0fe:	7afb      	ldrb	r3, [r7, #11]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d128      	bne.n	800c156 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c104:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c108:	461a      	mov	r2, r3
 800c10a:	2100      	movs	r1, #0
 800c10c:	68f8      	ldr	r0, [r7, #12]
 800c10e:	f7fd fa7d 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c112:	4603      	mov	r3, r0
 800c114:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800c118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d109      	bne.n	800c134 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800c120:	f107 0320 	add.w	r3, r7, #32
 800c124:	461a      	mov	r2, r3
 800c126:	2146      	movs	r1, #70	; 0x46
 800c128:	68f8      	ldr	r0, [r7, #12]
 800c12a:	f001 fd8b 	bl	800dc44 <VL53L0X_RdByte>
 800c12e:	4603      	mov	r3, r0
 800c130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800c134:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c138:	b29b      	uxth	r3, r3
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7ff ff5c 	bl	800bff8 <VL53L0X_decode_timeout>
 800c140:	4603      	mov	r3, r0
 800c142:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c144:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c148:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c14a:	4619      	mov	r1, r3
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f7ff ff93 	bl	800c078 <VL53L0X_calc_timeout_us>
 800c152:	62b8      	str	r0, [r7, #40]	; 0x28
 800c154:	e092      	b.n	800c27c <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c156:	7afb      	ldrb	r3, [r7, #11]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d135      	bne.n	800c1c8 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c15c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c160:	461a      	mov	r2, r3
 800c162:	2100      	movs	r1, #0
 800c164:	68f8      	ldr	r0, [r7, #12]
 800c166:	f7fd fa51 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c16a:	4603      	mov	r3, r0
 800c16c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c170:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c174:	2b00      	cmp	r3, #0
 800c176:	f040 8081 	bne.w	800c27c <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c17a:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c17e:	461a      	mov	r2, r3
 800c180:	2100      	movs	r1, #0
 800c182:	68f8      	ldr	r0, [r7, #12]
 800c184:	f7fd fa42 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c188:	4603      	mov	r3, r0
 800c18a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800c18e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c192:	2b00      	cmp	r3, #0
 800c194:	d109      	bne.n	800c1aa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800c196:	f107 031e 	add.w	r3, r7, #30
 800c19a:	461a      	mov	r2, r3
 800c19c:	2151      	movs	r1, #81	; 0x51
 800c19e:	68f8      	ldr	r0, [r7, #12]
 800c1a0:	f001 fd7a 	bl	800dc98 <VL53L0X_RdWord>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c1aa:	8bfb      	ldrh	r3, [r7, #30]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ff23 	bl	800bff8 <VL53L0X_decode_timeout>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c1b6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c1ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c1bc:	4619      	mov	r1, r3
 800c1be:	68f8      	ldr	r0, [r7, #12]
 800c1c0:	f7ff ff5a 	bl	800c078 <VL53L0X_calc_timeout_us>
 800c1c4:	62b8      	str	r0, [r7, #40]	; 0x28
 800c1c6:	e059      	b.n	800c27c <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c1c8:	7afb      	ldrb	r3, [r7, #11]
 800c1ca:	2b04      	cmp	r3, #4
 800c1cc:	d156      	bne.n	800c27c <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800c1ce:	f107 0314 	add.w	r3, r7, #20
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	68f8      	ldr	r0, [r7, #12]
 800c1d6:	f7fd fb25 	bl	8009824 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d01d      	beq.n	800c220 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c1e4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	2100      	movs	r1, #0
 800c1ec:	68f8      	ldr	r0, [r7, #12]
 800c1ee:	f7fd fa0d 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800c1f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d10f      	bne.n	800c220 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800c200:	f107 031e 	add.w	r3, r7, #30
 800c204:	461a      	mov	r2, r3
 800c206:	2151      	movs	r1, #81	; 0x51
 800c208:	68f8      	ldr	r0, [r7, #12]
 800c20a:	f001 fd45 	bl	800dc98 <VL53L0X_RdWord>
 800c20e:	4603      	mov	r3, r0
 800c210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c214:	8bfb      	ldrh	r3, [r7, #30]
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff feee 	bl	800bff8 <VL53L0X_decode_timeout>
 800c21c:	4603      	mov	r3, r0
 800c21e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c220:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c224:	2b00      	cmp	r3, #0
 800c226:	d109      	bne.n	800c23c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c228:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800c22c:	461a      	mov	r2, r3
 800c22e:	2101      	movs	r1, #1
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f7fd f9eb 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c236:	4603      	mov	r3, r0
 800c238:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800c23c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10f      	bne.n	800c264 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800c244:	f107 031c 	add.w	r3, r7, #28
 800c248:	461a      	mov	r2, r3
 800c24a:	2171      	movs	r1, #113	; 0x71
 800c24c:	68f8      	ldr	r0, [r7, #12]
 800c24e:	f001 fd23 	bl	800dc98 <VL53L0X_RdWord>
 800c252:	4603      	mov	r3, r0
 800c254:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800c258:	8bbb      	ldrh	r3, [r7, #28]
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7ff fecc 	bl	800bff8 <VL53L0X_decode_timeout>
 800c260:	4603      	mov	r3, r0
 800c262:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800c264:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800c26c:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c270:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c272:	4619      	mov	r1, r3
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7ff feff 	bl	800c078 <VL53L0X_calc_timeout_us>
 800c27a:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c280:	601a      	str	r2, [r3, #0]

	return Status;
 800c282:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c286:	4618      	mov	r0, r3
 800c288:	3730      	adds	r7, #48	; 0x30
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b08a      	sub	sp, #40	; 0x28
 800c292:	af00      	add	r7, sp, #0
 800c294:	60f8      	str	r0, [r7, #12]
 800c296:	460b      	mov	r3, r1
 800c298:	607a      	str	r2, [r7, #4]
 800c29a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c29c:	2300      	movs	r3, #0
 800c29e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800c2a2:	7afb      	ldrb	r3, [r7, #11]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d005      	beq.n	800c2b4 <set_sequence_step_timeout+0x26>
 800c2a8:	7afb      	ldrb	r3, [r7, #11]
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d002      	beq.n	800c2b4 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800c2ae:	7afb      	ldrb	r3, [r7, #11]
 800c2b0:	2b02      	cmp	r3, #2
 800c2b2:	d138      	bne.n	800c326 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c2b4:	f107 031b 	add.w	r3, r7, #27
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f7fd f9a5 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800c2c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d11a      	bne.n	800c306 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800c2d0:	7efb      	ldrb	r3, [r7, #27]
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	6879      	ldr	r1, [r7, #4]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f7ff fea4 	bl	800c024 <VL53L0X_calc_timeout_mclks>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800c2e0:	8bbb      	ldrh	r3, [r7, #28]
 800c2e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e6:	d903      	bls.n	800c2f0 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800c2e8:	23ff      	movs	r3, #255	; 0xff
 800c2ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c2ee:	e004      	b.n	800c2fa <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800c2f0:	8bbb      	ldrh	r3, [r7, #28]
 800c2f2:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c2fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c2fe:	b29a      	uxth	r2, r3
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800c306:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f040 80ab 	bne.w	800c466 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800c310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c314:	461a      	mov	r2, r3
 800c316:	2146      	movs	r1, #70	; 0x46
 800c318:	68f8      	ldr	r0, [r7, #12]
 800c31a:	f001 fc11 	bl	800db40 <VL53L0X_WrByte>
 800c31e:	4603      	mov	r3, r0
 800c320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800c324:	e09f      	b.n	800c466 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800c326:	7afb      	ldrb	r3, [r7, #11]
 800c328:	2b03      	cmp	r3, #3
 800c32a:	d135      	bne.n	800c398 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800c32c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c330:	2b00      	cmp	r3, #0
 800c332:	d11b      	bne.n	800c36c <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c334:	f107 031b 	add.w	r3, r7, #27
 800c338:	461a      	mov	r2, r3
 800c33a:	2100      	movs	r1, #0
 800c33c:	68f8      	ldr	r0, [r7, #12]
 800c33e:	f7fd f965 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c342:	4603      	mov	r3, r0
 800c344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c348:	7efb      	ldrb	r3, [r7, #27]
 800c34a:	461a      	mov	r2, r3
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7ff fe68 	bl	800c024 <VL53L0X_calc_timeout_mclks>
 800c354:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800c356:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800c358:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7ff fe20 	bl	800bfa0 <VL53L0X_encode_timeout>
 800c360:	4603      	mov	r3, r0
 800c362:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c364:	8b3a      	ldrh	r2, [r7, #24]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c36c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c370:	2b00      	cmp	r3, #0
 800c372:	d108      	bne.n	800c386 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800c374:	8b3b      	ldrh	r3, [r7, #24]
 800c376:	461a      	mov	r2, r3
 800c378:	2151      	movs	r1, #81	; 0x51
 800c37a:	68f8      	ldr	r0, [r7, #12]
 800c37c:	f001 fc04 	bl	800db88 <VL53L0X_WrWord>
 800c380:	4603      	mov	r3, r0
 800c382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800c386:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d16b      	bne.n	800c466 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800c396:	e066      	b.n	800c466 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800c398:	7afb      	ldrb	r3, [r7, #11]
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	d160      	bne.n	800c460 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800c39e:	f107 0310 	add.w	r3, r7, #16
 800c3a2:	4619      	mov	r1, r3
 800c3a4:	68f8      	ldr	r0, [r7, #12]
 800c3a6:	f7fd fa3d 	bl	8009824 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800c3ae:	7cfb      	ldrb	r3, [r7, #19]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d01d      	beq.n	800c3f0 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c3b4:	f107 031b 	add.w	r3, r7, #27
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	2100      	movs	r1, #0
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f7fd f925 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800c3c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d10f      	bne.n	800c3f0 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800c3d0:	f107 0318 	add.w	r3, r7, #24
 800c3d4:	461a      	mov	r2, r3
 800c3d6:	2151      	movs	r1, #81	; 0x51
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f001 fc5d 	bl	800dc98 <VL53L0X_RdWord>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800c3e4:	8b3b      	ldrh	r3, [r7, #24]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff fe06 	bl	800bff8 <VL53L0X_decode_timeout>
 800c3ec:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800c3ee:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800c3f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d109      	bne.n	800c40c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800c3f8:	f107 031b 	add.w	r3, r7, #27
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	2101      	movs	r1, #1
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f7fd f903 	bl	800960c <VL53L0X_GetVcselPulsePeriod>
 800c406:	4603      	mov	r3, r0
 800c408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800c40c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c410:	2b00      	cmp	r3, #0
 800c412:	d128      	bne.n	800c466 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800c414:	7efb      	ldrb	r3, [r7, #27]
 800c416:	461a      	mov	r2, r3
 800c418:	6879      	ldr	r1, [r7, #4]
 800c41a:	68f8      	ldr	r0, [r7, #12]
 800c41c:	f7ff fe02 	bl	800c024 <VL53L0X_calc_timeout_mclks>
 800c420:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800c422:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c424:	6a3a      	ldr	r2, [r7, #32]
 800c426:	4413      	add	r3, r2
 800c428:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800c42a:	6a38      	ldr	r0, [r7, #32]
 800c42c:	f7ff fdb8 	bl	800bfa0 <VL53L0X_encode_timeout>
 800c430:	4603      	mov	r3, r0
 800c432:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800c434:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d108      	bne.n	800c44e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800c43c:	8bfb      	ldrh	r3, [r7, #30]
 800c43e:	461a      	mov	r2, r3
 800c440:	2171      	movs	r1, #113	; 0x71
 800c442:	68f8      	ldr	r0, [r7, #12]
 800c444:	f001 fba0 	bl	800db88 <VL53L0X_WrWord>
 800c448:	4603      	mov	r3, r0
 800c44a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800c44e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c452:	2b00      	cmp	r3, #0
 800c454:	d107      	bne.n	800c466 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	687a      	ldr	r2, [r7, #4]
 800c45a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800c45e:	e002      	b.n	800c466 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c460:	23fc      	movs	r3, #252	; 0xfc
 800c462:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800c466:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3728      	adds	r7, #40	; 0x28
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b08a      	sub	sp, #40	; 0x28
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	460b      	mov	r3, r1
 800c47c:	70fb      	strb	r3, [r7, #3]
 800c47e:	4613      	mov	r3, r2
 800c480:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c482:	2300      	movs	r3, #0
 800c484:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800c488:	230c      	movs	r3, #12
 800c48a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800c48e:	2312      	movs	r3, #18
 800c490:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800c494:	2308      	movs	r3, #8
 800c496:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800c49a:	230e      	movs	r3, #14
 800c49c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800c4a4:	78bb      	ldrb	r3, [r7, #2]
 800c4a6:	f003 0301 	and.w	r3, r3, #1
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d003      	beq.n	800c4b8 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4b0:	23fc      	movs	r3, #252	; 0xfc
 800c4b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4b6:	e020      	b.n	800c4fa <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800c4b8:	78fb      	ldrb	r3, [r7, #3]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10d      	bne.n	800c4da <VL53L0X_set_vcsel_pulse_period+0x68>
 800c4be:	78ba      	ldrb	r2, [r7, #2]
 800c4c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d304      	bcc.n	800c4d2 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800c4c8:	78ba      	ldrb	r2, [r7, #2]
 800c4ca:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d903      	bls.n	800c4da <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4d2:	23fc      	movs	r3, #252	; 0xfc
 800c4d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4d8:	e00f      	b.n	800c4fa <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800c4da:	78fb      	ldrb	r3, [r7, #3]
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d10c      	bne.n	800c4fa <VL53L0X_set_vcsel_pulse_period+0x88>
 800c4e0:	78ba      	ldrb	r2, [r7, #2]
 800c4e2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c4e6:	429a      	cmp	r2, r3
 800c4e8:	d304      	bcc.n	800c4f4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800c4ea:	78ba      	ldrb	r2, [r7, #2]
 800c4ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c4f0:	429a      	cmp	r2, r3
 800c4f2:	d902      	bls.n	800c4fa <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c4f4:	23fc      	movs	r3, #252	; 0xfc
 800c4f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800c4fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d002      	beq.n	800c508 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800c502:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c506:	e239      	b.n	800c97c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800c508:	78fb      	ldrb	r3, [r7, #3]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d150      	bne.n	800c5b0 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800c50e:	78bb      	ldrb	r3, [r7, #2]
 800c510:	2b0c      	cmp	r3, #12
 800c512:	d110      	bne.n	800c536 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800c514:	2218      	movs	r2, #24
 800c516:	2157      	movs	r1, #87	; 0x57
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f001 fb11 	bl	800db40 <VL53L0X_WrByte>
 800c51e:	4603      	mov	r3, r0
 800c520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800c524:	2208      	movs	r2, #8
 800c526:	2156      	movs	r1, #86	; 0x56
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f001 fb09 	bl	800db40 <VL53L0X_WrByte>
 800c52e:	4603      	mov	r3, r0
 800c530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c534:	e17f      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c536:	78bb      	ldrb	r3, [r7, #2]
 800c538:	2b0e      	cmp	r3, #14
 800c53a:	d110      	bne.n	800c55e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800c53c:	2230      	movs	r2, #48	; 0x30
 800c53e:	2157      	movs	r1, #87	; 0x57
 800c540:	6878      	ldr	r0, [r7, #4]
 800c542:	f001 fafd 	bl	800db40 <VL53L0X_WrByte>
 800c546:	4603      	mov	r3, r0
 800c548:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800c54c:	2208      	movs	r2, #8
 800c54e:	2156      	movs	r1, #86	; 0x56
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f001 faf5 	bl	800db40 <VL53L0X_WrByte>
 800c556:	4603      	mov	r3, r0
 800c558:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c55c:	e16b      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800c55e:	78bb      	ldrb	r3, [r7, #2]
 800c560:	2b10      	cmp	r3, #16
 800c562:	d110      	bne.n	800c586 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800c564:	2240      	movs	r2, #64	; 0x40
 800c566:	2157      	movs	r1, #87	; 0x57
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f001 fae9 	bl	800db40 <VL53L0X_WrByte>
 800c56e:	4603      	mov	r3, r0
 800c570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800c574:	2208      	movs	r2, #8
 800c576:	2156      	movs	r1, #86	; 0x56
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f001 fae1 	bl	800db40 <VL53L0X_WrByte>
 800c57e:	4603      	mov	r3, r0
 800c580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c584:	e157      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800c586:	78bb      	ldrb	r3, [r7, #2]
 800c588:	2b12      	cmp	r3, #18
 800c58a:	f040 8154 	bne.w	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c58e:	2250      	movs	r2, #80	; 0x50
 800c590:	2157      	movs	r1, #87	; 0x57
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f001 fad4 	bl	800db40 <VL53L0X_WrByte>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800c59e:	2208      	movs	r2, #8
 800c5a0:	2156      	movs	r1, #86	; 0x56
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f001 facc 	bl	800db40 <VL53L0X_WrByte>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5ae:	e142      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800c5b0:	78fb      	ldrb	r3, [r7, #3]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	f040 813f 	bne.w	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800c5b8:	78bb      	ldrb	r3, [r7, #2]
 800c5ba:	2b08      	cmp	r3, #8
 800c5bc:	d14c      	bne.n	800c658 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800c5be:	2210      	movs	r2, #16
 800c5c0:	2148      	movs	r1, #72	; 0x48
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f001 fabc 	bl	800db40 <VL53L0X_WrByte>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800c5ce:	2208      	movs	r2, #8
 800c5d0:	2147      	movs	r1, #71	; 0x47
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f001 fab4 	bl	800db40 <VL53L0X_WrByte>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c5de:	2202      	movs	r2, #2
 800c5e0:	2132      	movs	r1, #50	; 0x32
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f001 faac 	bl	800db40 <VL53L0X_WrByte>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800c5f6:	220c      	movs	r2, #12
 800c5f8:	2130      	movs	r1, #48	; 0x30
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f001 faa0 	bl	800db40 <VL53L0X_WrByte>
 800c600:	4603      	mov	r3, r0
 800c602:	461a      	mov	r2, r3
 800c604:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c608:	4313      	orrs	r3, r2
 800c60a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c60e:	2201      	movs	r2, #1
 800c610:	21ff      	movs	r1, #255	; 0xff
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f001 fa94 	bl	800db40 <VL53L0X_WrByte>
 800c618:	4603      	mov	r3, r0
 800c61a:	461a      	mov	r2, r3
 800c61c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c620:	4313      	orrs	r3, r2
 800c622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c626:	2230      	movs	r2, #48	; 0x30
 800c628:	2130      	movs	r1, #48	; 0x30
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f001 fa88 	bl	800db40 <VL53L0X_WrByte>
 800c630:	4603      	mov	r3, r0
 800c632:	461a      	mov	r2, r3
 800c634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c638:	4313      	orrs	r3, r2
 800c63a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c63e:	2200      	movs	r2, #0
 800c640:	21ff      	movs	r1, #255	; 0xff
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f001 fa7c 	bl	800db40 <VL53L0X_WrByte>
 800c648:	4603      	mov	r3, r0
 800c64a:	461a      	mov	r2, r3
 800c64c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c650:	4313      	orrs	r3, r2
 800c652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c656:	e0ee      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800c658:	78bb      	ldrb	r3, [r7, #2]
 800c65a:	2b0a      	cmp	r3, #10
 800c65c:	d14c      	bne.n	800c6f8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800c65e:	2228      	movs	r2, #40	; 0x28
 800c660:	2148      	movs	r1, #72	; 0x48
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f001 fa6c 	bl	800db40 <VL53L0X_WrByte>
 800c668:	4603      	mov	r3, r0
 800c66a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800c66e:	2208      	movs	r2, #8
 800c670:	2147      	movs	r1, #71	; 0x47
 800c672:	6878      	ldr	r0, [r7, #4]
 800c674:	f001 fa64 	bl	800db40 <VL53L0X_WrByte>
 800c678:	4603      	mov	r3, r0
 800c67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c67e:	2203      	movs	r2, #3
 800c680:	2132      	movs	r1, #50	; 0x32
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f001 fa5c 	bl	800db40 <VL53L0X_WrByte>
 800c688:	4603      	mov	r3, r0
 800c68a:	461a      	mov	r2, r3
 800c68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c690:	4313      	orrs	r3, r2
 800c692:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c696:	2209      	movs	r2, #9
 800c698:	2130      	movs	r1, #48	; 0x30
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f001 fa50 	bl	800db40 <VL53L0X_WrByte>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	21ff      	movs	r1, #255	; 0xff
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f001 fa44 	bl	800db40 <VL53L0X_WrByte>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	2130      	movs	r1, #48	; 0x30
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f001 fa38 	bl	800db40 <VL53L0X_WrByte>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c6de:	2200      	movs	r2, #0
 800c6e0:	21ff      	movs	r1, #255	; 0xff
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f001 fa2c 	bl	800db40 <VL53L0X_WrByte>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c6f6:	e09e      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800c6f8:	78bb      	ldrb	r3, [r7, #2]
 800c6fa:	2b0c      	cmp	r3, #12
 800c6fc:	d14c      	bne.n	800c798 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800c6fe:	2238      	movs	r2, #56	; 0x38
 800c700:	2148      	movs	r1, #72	; 0x48
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f001 fa1c 	bl	800db40 <VL53L0X_WrByte>
 800c708:	4603      	mov	r3, r0
 800c70a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800c70e:	2208      	movs	r2, #8
 800c710:	2147      	movs	r1, #71	; 0x47
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f001 fa14 	bl	800db40 <VL53L0X_WrByte>
 800c718:	4603      	mov	r3, r0
 800c71a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c71e:	2203      	movs	r2, #3
 800c720:	2132      	movs	r1, #50	; 0x32
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f001 fa0c 	bl	800db40 <VL53L0X_WrByte>
 800c728:	4603      	mov	r3, r0
 800c72a:	461a      	mov	r2, r3
 800c72c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c730:	4313      	orrs	r3, r2
 800c732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c736:	2208      	movs	r2, #8
 800c738:	2130      	movs	r1, #48	; 0x30
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f001 fa00 	bl	800db40 <VL53L0X_WrByte>
 800c740:	4603      	mov	r3, r0
 800c742:	461a      	mov	r2, r3
 800c744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c748:	4313      	orrs	r3, r2
 800c74a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c74e:	2201      	movs	r2, #1
 800c750:	21ff      	movs	r1, #255	; 0xff
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f001 f9f4 	bl	800db40 <VL53L0X_WrByte>
 800c758:	4603      	mov	r3, r0
 800c75a:	461a      	mov	r2, r3
 800c75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c760:	4313      	orrs	r3, r2
 800c762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c766:	2220      	movs	r2, #32
 800c768:	2130      	movs	r1, #48	; 0x30
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f001 f9e8 	bl	800db40 <VL53L0X_WrByte>
 800c770:	4603      	mov	r3, r0
 800c772:	461a      	mov	r2, r3
 800c774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c778:	4313      	orrs	r3, r2
 800c77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c77e:	2200      	movs	r2, #0
 800c780:	21ff      	movs	r1, #255	; 0xff
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f001 f9dc 	bl	800db40 <VL53L0X_WrByte>
 800c788:	4603      	mov	r3, r0
 800c78a:	461a      	mov	r2, r3
 800c78c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c790:	4313      	orrs	r3, r2
 800c792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c796:	e04e      	b.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800c798:	78bb      	ldrb	r3, [r7, #2]
 800c79a:	2b0e      	cmp	r3, #14
 800c79c:	d14b      	bne.n	800c836 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800c79e:	2248      	movs	r2, #72	; 0x48
 800c7a0:	2148      	movs	r1, #72	; 0x48
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f001 f9cc 	bl	800db40 <VL53L0X_WrByte>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800c7ae:	2208      	movs	r2, #8
 800c7b0:	2147      	movs	r1, #71	; 0x47
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f001 f9c4 	bl	800db40 <VL53L0X_WrByte>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800c7be:	2203      	movs	r2, #3
 800c7c0:	2132      	movs	r1, #50	; 0x32
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f001 f9bc 	bl	800db40 <VL53L0X_WrByte>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800c7d6:	2207      	movs	r2, #7
 800c7d8:	2130      	movs	r1, #48	; 0x30
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f001 f9b0 	bl	800db40 <VL53L0X_WrByte>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	461a      	mov	r2, r3
 800c7e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7e8:	4313      	orrs	r3, r2
 800c7ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	21ff      	movs	r1, #255	; 0xff
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 f9a4 	bl	800db40 <VL53L0X_WrByte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c800:	4313      	orrs	r3, r2
 800c802:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800c806:	2220      	movs	r2, #32
 800c808:	2130      	movs	r1, #48	; 0x30
 800c80a:	6878      	ldr	r0, [r7, #4]
 800c80c:	f001 f998 	bl	800db40 <VL53L0X_WrByte>
 800c810:	4603      	mov	r3, r0
 800c812:	461a      	mov	r2, r3
 800c814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c818:	4313      	orrs	r3, r2
 800c81a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c81e:	2200      	movs	r2, #0
 800c820:	21ff      	movs	r1, #255	; 0xff
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f001 f98c 	bl	800db40 <VL53L0X_WrByte>
 800c828:	4603      	mov	r3, r0
 800c82a:	461a      	mov	r2, r3
 800c82c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c830:	4313      	orrs	r3, r2
 800c832:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800c836:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d17f      	bne.n	800c93e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800c83e:	78bb      	ldrb	r3, [r7, #2]
 800c840:	4618      	mov	r0, r3
 800c842:	f7fe fe38 	bl	800b4b6 <VL53L0X_encode_vcsel_period>
 800c846:	4603      	mov	r3, r0
 800c848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800c84c:	78fb      	ldrb	r3, [r7, #3]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d002      	beq.n	800c858 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800c852:	2b01      	cmp	r3, #1
 800c854:	d045      	beq.n	800c8e2 <VL53L0X_set_vcsel_pulse_period+0x470>
 800c856:	e06e      	b.n	800c936 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c858:	f107 0314 	add.w	r3, r7, #20
 800c85c:	461a      	mov	r2, r3
 800c85e:	2103      	movs	r1, #3
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	f7ff fc33 	bl	800c0cc <get_sequence_step_timeout>
 800c866:	4603      	mov	r3, r0
 800c868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c870:	2b00      	cmp	r3, #0
 800c872:	d109      	bne.n	800c888 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800c874:	f107 0310 	add.w	r3, r7, #16
 800c878:	461a      	mov	r2, r3
 800c87a:	2102      	movs	r1, #2
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff fc25 	bl	800c0cc <get_sequence_step_timeout>
 800c882:	4603      	mov	r3, r0
 800c884:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c888:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d109      	bne.n	800c8a4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800c890:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c894:	461a      	mov	r2, r3
 800c896:	2150      	movs	r1, #80	; 0x50
 800c898:	6878      	ldr	r0, [r7, #4]
 800c89a:	f001 f951 	bl	800db40 <VL53L0X_WrByte>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c8a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d108      	bne.n	800c8be <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	2103      	movs	r1, #3
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f7ff fceb 	bl	800c28e <set_sequence_step_timeout>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800c8be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d108      	bne.n	800c8d8 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	2102      	movs	r1, #2
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f7ff fcde 	bl	800c28e <set_sequence_step_timeout>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	78ba      	ldrb	r2, [r7, #2]
 800c8dc:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c8e0:	e02e      	b.n	800c940 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800c8e2:	f107 0318 	add.w	r3, r7, #24
 800c8e6:	461a      	mov	r2, r3
 800c8e8:	2104      	movs	r1, #4
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff fbee 	bl	800c0cc <get_sequence_step_timeout>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800c8f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d109      	bne.n	800c912 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800c8fe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800c902:	461a      	mov	r2, r3
 800c904:	2170      	movs	r1, #112	; 0x70
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f001 f91a 	bl	800db40 <VL53L0X_WrByte>
 800c90c:	4603      	mov	r3, r0
 800c90e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800c912:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c916:	2b00      	cmp	r3, #0
 800c918:	d108      	bne.n	800c92c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800c91a:	69bb      	ldr	r3, [r7, #24]
 800c91c:	461a      	mov	r2, r3
 800c91e:	2104      	movs	r1, #4
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f7ff fcb4 	bl	800c28e <set_sequence_step_timeout>
 800c926:	4603      	mov	r3, r0
 800c928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	78ba      	ldrb	r2, [r7, #2]
 800c930:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800c934:	e004      	b.n	800c940 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c936:	23fc      	movs	r3, #252	; 0xfc
 800c938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c93c:	e000      	b.n	800c940 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800c93e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800c940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c944:	2b00      	cmp	r3, #0
 800c946:	d109      	bne.n	800c95c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	695b      	ldr	r3, [r3, #20]
 800c94c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800c94e:	69f9      	ldr	r1, [r7, #28]
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7fc fe1d 	bl	8009590 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800c956:	4603      	mov	r3, r0
 800c958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800c95c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c960:	2b00      	cmp	r3, #0
 800c962:	d109      	bne.n	800c978 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800c964:	f107 010f 	add.w	r1, r7, #15
 800c968:	2301      	movs	r3, #1
 800c96a:	2200      	movs	r2, #0
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7fe fcbd 	bl	800b2ec <VL53L0X_perform_phase_calibration>
 800c972:	4603      	mov	r3, r0
 800c974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800c978:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3728      	adds	r7, #40	; 0x28
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	460b      	mov	r3, r1
 800c98e:	607a      	str	r2, [r7, #4]
 800c990:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c992:	2300      	movs	r3, #0
 800c994:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800c996:	7afb      	ldrb	r3, [r7, #11]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d00a      	beq.n	800c9b6 <VL53L0X_get_vcsel_pulse_period+0x32>
 800c9a0:	e013      	b.n	800c9ca <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c9a2:	f107 0316 	add.w	r3, r7, #22
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	2150      	movs	r1, #80	; 0x50
 800c9aa:	68f8      	ldr	r0, [r7, #12]
 800c9ac:	f001 f94a 	bl	800dc44 <VL53L0X_RdByte>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c9b4:	e00b      	b.n	800c9ce <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800c9b6:	f107 0316 	add.w	r3, r7, #22
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	2170      	movs	r1, #112	; 0x70
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	f001 f940 	bl	800dc44 <VL53L0X_RdByte>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800c9c8:	e001      	b.n	800c9ce <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c9ca:	23fc      	movs	r3, #252	; 0xfc
 800c9cc:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800c9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d107      	bne.n	800c9e6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800c9d6:	7dbb      	ldrb	r3, [r7, #22]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f7fe fd59 	bl	800b490 <VL53L0X_decode_vcsel_period>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	701a      	strb	r2, [r3, #0]

	return Status;
 800c9e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3718      	adds	r7, #24
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}

0800c9f2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800c9f2:	b580      	push	{r7, lr}
 800c9f4:	b092      	sub	sp, #72	; 0x48
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
 800c9fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ca02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ca06:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ca08:	f240 7376 	movw	r3, #1910	; 0x776
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ca0e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ca12:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ca14:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ca18:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ca1a:	f240 234e 	movw	r3, #590	; 0x24e
 800ca1e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ca20:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ca24:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ca26:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ca2a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ca2c:	f240 2326 	movw	r3, #550	; 0x226
 800ca30:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ca36:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ca3a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ca40:	683a      	ldr	r2, [r7, #0]
 800ca42:	6a3b      	ldr	r3, [r7, #32]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d205      	bcs.n	800ca54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ca48:	23fc      	movs	r3, #252	; 0xfc
 800ca4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ca4e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca52:	e0aa      	b.n	800cbaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800ca54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca58:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	1ad3      	subs	r3, r2, r3
 800ca5e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ca60:	f107 0314 	add.w	r3, r7, #20
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7fc fedc 	bl	8009824 <VL53L0X_GetSequenceStepEnables>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800ca72:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d15b      	bne.n	800cb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800ca7a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d105      	bne.n	800ca8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800ca80:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d102      	bne.n	800ca8c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800ca86:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d052      	beq.n	800cb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800ca8c:	f107 0310 	add.w	r3, r7, #16
 800ca90:	461a      	mov	r2, r3
 800ca92:	2102      	movs	r1, #2
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f7ff fb19 	bl	800c0cc <get_sequence_step_timeout>
 800ca9a:	4603      	mov	r3, r0
 800ca9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800caa0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800caa8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800caac:	e07d      	b.n	800cbaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800caae:	7d3b      	ldrb	r3, [r7, #20]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00f      	beq.n	800cad4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800cab4:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800cab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cab8:	4413      	add	r3, r2
 800caba:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800cabc:	69fa      	ldr	r2, [r7, #28]
 800cabe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d204      	bcs.n	800cace <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800cac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cac6:	69fb      	ldr	r3, [r7, #28]
 800cac8:	1ad3      	subs	r3, r2, r3
 800caca:	643b      	str	r3, [r7, #64]	; 0x40
 800cacc:	e002      	b.n	800cad4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cace:	23fc      	movs	r3, #252	; 0xfc
 800cad0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800cad4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d002      	beq.n	800cae2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800cadc:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cae0:	e063      	b.n	800cbaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800cae2:	7dbb      	ldrb	r3, [r7, #22]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d011      	beq.n	800cb0c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800cae8:	693a      	ldr	r2, [r7, #16]
 800caea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caec:	4413      	add	r3, r2
 800caee:	005b      	lsls	r3, r3, #1
 800caf0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800caf2:	69fa      	ldr	r2, [r7, #28]
 800caf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d204      	bcs.n	800cb04 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cafa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	1ad3      	subs	r3, r2, r3
 800cb00:	643b      	str	r3, [r7, #64]	; 0x40
 800cb02:	e016      	b.n	800cb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cb04:	23fc      	movs	r3, #252	; 0xfc
 800cb06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cb0a:	e012      	b.n	800cb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800cb0c:	7d7b      	ldrb	r3, [r7, #21]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00f      	beq.n	800cb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800cb12:	693b      	ldr	r3, [r7, #16]
 800cb14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb16:	4413      	add	r3, r2
 800cb18:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cb1a:	69fa      	ldr	r2, [r7, #28]
 800cb1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb1e:	429a      	cmp	r2, r3
 800cb20:	d204      	bcs.n	800cb2c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800cb22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb24:	69fb      	ldr	r3, [r7, #28]
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	643b      	str	r3, [r7, #64]	; 0x40
 800cb2a:	e002      	b.n	800cb32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cb2c:	23fc      	movs	r3, #252	; 0xfc
 800cb2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800cb32:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d002      	beq.n	800cb40 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cb3a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cb3e:	e034      	b.n	800cbaa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d019      	beq.n	800cb7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800cb46:	f107 030c 	add.w	r3, r7, #12
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	2103      	movs	r1, #3
 800cb4e:	6878      	ldr	r0, [r7, #4]
 800cb50:	f7ff fabc 	bl	800c0cc <get_sequence_step_timeout>
 800cb54:	4603      	mov	r3, r0
 800cb56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb5e:	4413      	add	r3, r2
 800cb60:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800cb62:	69fa      	ldr	r2, [r7, #28]
 800cb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb66:	429a      	cmp	r2, r3
 800cb68:	d204      	bcs.n	800cb74 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800cb6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	643b      	str	r3, [r7, #64]	; 0x40
 800cb72:	e002      	b.n	800cb7a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800cb74:	23fc      	movs	r3, #252	; 0xfc
 800cb76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800cb7a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d111      	bne.n	800cba6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800cb82:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d00e      	beq.n	800cba6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800cb88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb8c:	1ad3      	subs	r3, r2, r3
 800cb8e:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800cb90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cb92:	2104      	movs	r1, #4
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff fb7a 	bl	800c28e <set_sequence_step_timeout>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800cba6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3748      	adds	r7, #72	; 0x48
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}

0800cbb2 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800cbb2:	b580      	push	{r7, lr}
 800cbb4:	b090      	sub	sp, #64	; 0x40
 800cbb6:	af00      	add	r7, sp, #0
 800cbb8:	6078      	str	r0, [r7, #4]
 800cbba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800cbc2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800cbc6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800cbc8:	f240 7376 	movw	r3, #1910	; 0x776
 800cbcc:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800cbce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800cbd2:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800cbd4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cbd8:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800cbda:	f240 234e 	movw	r3, #590	; 0x24e
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800cbe0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800cbe4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800cbe6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800cbea:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800cbec:	f240 2326 	movw	r3, #550	; 0x226
 800cbf0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800cbf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	441a      	add	r2, r3
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800cc00:	f107 0318 	add.w	r3, r7, #24
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7fc fe0c 	bl	8009824 <VL53L0X_GetSequenceStepEnables>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800cc12:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d002      	beq.n	800cc20 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800cc1a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc1e:	e075      	b.n	800cd0c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800cc20:	7e3b      	ldrb	r3, [r7, #24]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d105      	bne.n	800cc32 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800cc26:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d102      	bne.n	800cc32 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800cc2c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d030      	beq.n	800cc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800cc32:	f107 0310 	add.w	r3, r7, #16
 800cc36:	461a      	mov	r2, r3
 800cc38:	2102      	movs	r1, #2
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f7ff fa46 	bl	800c0cc <get_sequence_step_timeout>
 800cc40:	4603      	mov	r3, r0
 800cc42:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800cc46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d122      	bne.n	800cc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800cc4e:	7e3b      	ldrb	r3, [r7, #24]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d007      	beq.n	800cc64 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cc58:	6939      	ldr	r1, [r7, #16]
 800cc5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc5e:	441a      	add	r2, r3
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800cc64:	7ebb      	ldrb	r3, [r7, #26]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d009      	beq.n	800cc7e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc6a:	683b      	ldr	r3, [r7, #0]
 800cc6c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800cc6e:	6939      	ldr	r1, [r7, #16]
 800cc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc72:	440b      	add	r3, r1
 800cc74:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc76:	441a      	add	r2, r3
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	e00a      	b.n	800cc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800cc7e:	7e7b      	ldrb	r3, [r7, #25]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d007      	beq.n	800cc94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800cc88:	6939      	ldr	r1, [r7, #16]
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800cc8e:	441a      	add	r2, r3
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800cc94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d114      	bne.n	800ccc6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800cc9c:	7efb      	ldrb	r3, [r7, #27]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d011      	beq.n	800ccc6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800cca2:	f107 030c 	add.w	r3, r7, #12
 800cca6:	461a      	mov	r2, r3
 800cca8:	2103      	movs	r1, #3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f7ff fa0e 	bl	800c0cc <get_sequence_step_timeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ccba:	68f9      	ldr	r1, [r7, #12]
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbe:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ccc0:	441a      	add	r2, r3
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ccc6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d114      	bne.n	800ccf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ccce:	7f3b      	ldrb	r3, [r7, #28]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d011      	beq.n	800ccf8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ccd4:	f107 0314 	add.w	r3, r7, #20
 800ccd8:	461a      	mov	r2, r3
 800ccda:	2104      	movs	r1, #4
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff f9f5 	bl	800c0cc <get_sequence_step_timeout>
 800cce2:	4603      	mov	r3, r0
 800cce4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ccec:	6979      	ldr	r1, [r7, #20]
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ccf2:	441a      	add	r2, r3
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ccf8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d103      	bne.n	800cd08 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cd08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3740      	adds	r7, #64	; 0x40
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800cd22:	2300      	movs	r3, #0
 800cd24:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800cd26:	e0c6      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	74fb      	strb	r3, [r7, #19]
		Index++;
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	3301      	adds	r3, #1
 800cd36:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800cd38:	7cfb      	ldrb	r3, [r7, #19]
 800cd3a:	2bff      	cmp	r3, #255	; 0xff
 800cd3c:	f040 808d 	bne.w	800ce5a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800cd40:	697b      	ldr	r3, [r7, #20]
 800cd42:	683a      	ldr	r2, [r7, #0]
 800cd44:	4413      	add	r3, r2
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	747b      	strb	r3, [r7, #17]
			Index++;
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800cd50:	7c7b      	ldrb	r3, [r7, #17]
 800cd52:	2b03      	cmp	r3, #3
 800cd54:	d87e      	bhi.n	800ce54 <VL53L0X_load_tuning_settings+0x140>
 800cd56:	a201      	add	r2, pc, #4	; (adr r2, 800cd5c <VL53L0X_load_tuning_settings+0x48>)
 800cd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5c:	0800cd6d 	.word	0x0800cd6d
 800cd60:	0800cda7 	.word	0x0800cda7
 800cd64:	0800cde1 	.word	0x0800cde1
 800cd68:	0800ce1b 	.word	0x0800ce1b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	4413      	add	r3, r2
 800cd72:	781b      	ldrb	r3, [r3, #0]
 800cd74:	743b      	strb	r3, [r7, #16]
				Index++;
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	3301      	adds	r3, #1
 800cd7a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	4413      	add	r3, r2
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	3301      	adds	r3, #1
 800cd8a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cd8c:	7c3b      	ldrb	r3, [r7, #16]
 800cd8e:	b29b      	uxth	r3, r3
 800cd90:	021b      	lsls	r3, r3, #8
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	4413      	add	r3, r2
 800cd9a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	89ba      	ldrh	r2, [r7, #12]
 800cda0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800cda4:	e087      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	683a      	ldr	r2, [r7, #0]
 800cdaa:	4413      	add	r3, r2
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	743b      	strb	r3, [r7, #16]
				Index++;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	3301      	adds	r3, #1
 800cdb4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	683a      	ldr	r2, [r7, #0]
 800cdba:	4413      	add	r3, r2
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	3301      	adds	r3, #1
 800cdc4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800cdc6:	7c3b      	ldrb	r3, [r7, #16]
 800cdc8:	b29b      	uxth	r3, r3
 800cdca:	021b      	lsls	r3, r3, #8
 800cdcc:	b29a      	uxth	r2, r3
 800cdce:	7bfb      	ldrb	r3, [r7, #15]
 800cdd0:	b29b      	uxth	r3, r3
 800cdd2:	4413      	add	r3, r2
 800cdd4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	89ba      	ldrh	r2, [r7, #12]
 800cdda:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800cdde:	e06a      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4413      	add	r3, r2
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	743b      	strb	r3, [r7, #16]
				Index++;
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	3301      	adds	r3, #1
 800cdee:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	683a      	ldr	r2, [r7, #0]
 800cdf4:	4413      	add	r3, r2
 800cdf6:	781b      	ldrb	r3, [r3, #0]
 800cdf8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ce00:	7c3b      	ldrb	r3, [r7, #16]
 800ce02:	b29b      	uxth	r3, r3
 800ce04:	021b      	lsls	r3, r3, #8
 800ce06:	b29a      	uxth	r2, r3
 800ce08:	7bfb      	ldrb	r3, [r7, #15]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	4413      	add	r3, r2
 800ce0e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	89ba      	ldrh	r2, [r7, #12]
 800ce14:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800ce18:	e04d      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	683a      	ldr	r2, [r7, #0]
 800ce1e:	4413      	add	r3, r2
 800ce20:	781b      	ldrb	r3, [r3, #0]
 800ce22:	743b      	strb	r3, [r7, #16]
				Index++;
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	3301      	adds	r3, #1
 800ce28:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	683a      	ldr	r2, [r7, #0]
 800ce2e:	4413      	add	r3, r2
 800ce30:	781b      	ldrb	r3, [r3, #0]
 800ce32:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	3301      	adds	r3, #1
 800ce38:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ce3a:	7c3b      	ldrb	r3, [r7, #16]
 800ce3c:	b29b      	uxth	r3, r3
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	4413      	add	r3, r2
 800ce48:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	89ba      	ldrh	r2, [r7, #12]
 800ce4e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800ce52:	e030      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ce54:	23fc      	movs	r3, #252	; 0xfc
 800ce56:	77fb      	strb	r3, [r7, #31]
 800ce58:	e02d      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800ce5a:	7cfb      	ldrb	r3, [r7, #19]
 800ce5c:	2b04      	cmp	r3, #4
 800ce5e:	d828      	bhi.n	800ceb2 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	683a      	ldr	r2, [r7, #0]
 800ce64:	4413      	add	r3, r2
 800ce66:	781b      	ldrb	r3, [r3, #0]
 800ce68:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	3301      	adds	r3, #1
 800ce6e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ce70:	2300      	movs	r3, #0
 800ce72:	61bb      	str	r3, [r7, #24]
 800ce74:	e00f      	b.n	800ce96 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	683a      	ldr	r2, [r7, #0]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	7819      	ldrb	r1, [r3, #0]
 800ce7e:	f107 0208 	add.w	r2, r7, #8
 800ce82:	69bb      	ldr	r3, [r7, #24]
 800ce84:	4413      	add	r3, r2
 800ce86:	460a      	mov	r2, r1
 800ce88:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	3301      	adds	r3, #1
 800ce8e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ce90:	69bb      	ldr	r3, [r7, #24]
 800ce92:	3301      	adds	r3, #1
 800ce94:	61bb      	str	r3, [r7, #24]
 800ce96:	7cfb      	ldrb	r3, [r7, #19]
 800ce98:	69ba      	ldr	r2, [r7, #24]
 800ce9a:	429a      	cmp	r2, r3
 800ce9c:	dbeb      	blt.n	800ce76 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ce9e:	7cfb      	ldrb	r3, [r7, #19]
 800cea0:	f107 0208 	add.w	r2, r7, #8
 800cea4:	7cb9      	ldrb	r1, [r7, #18]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fdee 	bl	800da88 <VL53L0X_WriteMulti>
 800ceac:	4603      	mov	r3, r0
 800ceae:	77fb      	strb	r3, [r7, #31]
 800ceb0:	e001      	b.n	800ceb6 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ceb2:	23fc      	movs	r3, #252	; 0xfc
 800ceb4:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	683a      	ldr	r2, [r7, #0]
 800ceba:	4413      	add	r3, r2
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d004      	beq.n	800cecc <VL53L0X_load_tuning_settings+0x1b8>
 800cec2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	f43f af2e 	beq.w	800cd28 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800cecc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ced0:	4618      	mov	r0, r3
 800ced2:	3720      	adds	r7, #32
 800ced4:	46bd      	mov	sp, r7
 800ced6:	bd80      	pop	{r7, pc}

0800ced8 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b088      	sub	sp, #32
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cee4:	2300      	movs	r3, #0
 800cee6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ceee:	f107 0313 	add.w	r3, r7, #19
 800cef2:	4619      	mov	r1, r3
 800cef4:	68f8      	ldr	r0, [r7, #12]
 800cef6:	f7fc fd21 	bl	800993c <VL53L0X_GetXTalkCompensationEnable>
 800cefa:	4603      	mov	r3, r0
 800cefc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800cefe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d111      	bne.n	800cf2a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800cf06:	7cfb      	ldrb	r3, [r7, #19]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d00e      	beq.n	800cf2a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6a1b      	ldr	r3, [r3, #32]
 800cf10:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800cf12:	68bb      	ldr	r3, [r7, #8]
 800cf14:	8a9b      	ldrh	r3, [r3, #20]
 800cf16:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	fb02 f303 	mul.w	r3, r2, r3
 800cf1e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800cf20:	697b      	ldr	r3, [r7, #20]
 800cf22:	3380      	adds	r3, #128	; 0x80
 800cf24:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800cf2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3720      	adds	r7, #32
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}

0800cf36 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800cf36:	b580      	push	{r7, lr}
 800cf38:	b086      	sub	sp, #24
 800cf3a:	af00      	add	r7, sp, #0
 800cf3c:	60f8      	str	r0, [r7, #12]
 800cf3e:	60b9      	str	r1, [r7, #8]
 800cf40:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf42:	2300      	movs	r3, #0
 800cf44:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800cf4e:	f107 0310 	add.w	r3, r7, #16
 800cf52:	461a      	mov	r2, r3
 800cf54:	68b9      	ldr	r1, [r7, #8]
 800cf56:	68f8      	ldr	r0, [r7, #12]
 800cf58:	f7ff ffbe 	bl	800ced8 <VL53L0X_get_total_xtalk_rate>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800cf60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d105      	bne.n	800cf74 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	693b      	ldr	r3, [r7, #16]
 800cf6e:	441a      	add	r2, r3
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	601a      	str	r2, [r3, #0]

	return Status;
 800cf74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b09a      	sub	sp, #104	; 0x68
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	60f8      	str	r0, [r7, #12]
 800cf88:	60b9      	str	r1, [r7, #8]
 800cf8a:	607a      	str	r2, [r7, #4]
 800cf8c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800cf8e:	2312      	movs	r3, #18
 800cf90:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800cf92:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cf96:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800cf98:	2342      	movs	r3, #66	; 0x42
 800cf9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800cf9c:	2306      	movs	r3, #6
 800cf9e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800cfa0:	2307      	movs	r3, #7
 800cfa2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800cfb0:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800cfb8:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800cfba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cfbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfbe:	fb02 f303 	mul.w	r3, r2, r3
 800cfc2:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc6:	3380      	adds	r3, #128	; 0x80
 800cfc8:	0a1b      	lsrs	r3, r3, #8
 800cfca:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800cfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cfd0:	fb02 f303 	mul.w	r3, r2, r3
 800cfd4:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d01a      	beq.n	800d016 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	029b      	lsls	r3, r3, #10
 800cfe4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800cfea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfec:	4413      	add	r3, r2
 800cfee:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800cff0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cff8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800cffa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cffc:	4613      	mov	r3, r2
 800cffe:	005b      	lsls	r3, r3, #1
 800d000:	4413      	add	r3, r2
 800d002:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800d004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d006:	fb03 f303 	mul.w	r3, r3, r3
 800d00a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800d00c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d00e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d012:	0c1b      	lsrs	r3, r3, #16
 800d014:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800d01a:	fb02 f303 	mul.w	r3, r2, r3
 800d01e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800d020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d022:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d026:	0c1b      	lsrs	r3, r3, #16
 800d028:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800d02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02c:	fb03 f303 	mul.w	r3, r3, r3
 800d030:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800d032:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d034:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800d03c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d03e:	085a      	lsrs	r2, r3, #1
 800d040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d042:	441a      	add	r2, r3
 800d044:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d046:	fbb2 f3f3 	udiv	r3, r2, r3
 800d04a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800d04c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d050:	fb02 f303 	mul.w	r3, r2, r3
 800d054:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800d056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d05c:	d302      	bcc.n	800d064 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800d05e:	4b54      	ldr	r3, [pc, #336]	; (800d1b0 <VL53L0X_calc_dmax+0x230>)
 800d060:	663b      	str	r3, [r7, #96]	; 0x60
 800d062:	e015      	b.n	800d090 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800d064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d066:	085a      	lsrs	r2, r3, #1
 800d068:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d06a:	441a      	add	r2, r3
 800d06c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d072:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800d074:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d078:	fb02 f303 	mul.w	r3, r2, r3
 800d07c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800d07e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d080:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d084:	0c1b      	lsrs	r3, r3, #16
 800d086:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800d088:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d08a:	fb03 f303 	mul.w	r3, r3, r3
 800d08e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800d090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d092:	039b      	lsls	r3, r3, #14
 800d094:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d098:	4a46      	ldr	r2, [pc, #280]	; (800d1b4 <VL53L0X_calc_dmax+0x234>)
 800d09a:	fba2 2303 	umull	r2, r3, r2, r3
 800d09e:	099b      	lsrs	r3, r3, #6
 800d0a0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a4:	fb03 f303 	mul.w	r3, r3, r3
 800d0a8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800d0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ac:	fb03 f303 	mul.w	r3, r3, r3
 800d0b0:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	3308      	adds	r3, #8
 800d0b6:	091b      	lsrs	r3, r3, #4
 800d0b8:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800d0ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800d0c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	005b      	lsls	r3, r3, #1
 800d0c8:	4413      	add	r3, r2
 800d0ca:	011b      	lsls	r3, r3, #4
 800d0cc:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800d0ce:	69fb      	ldr	r3, [r7, #28]
 800d0d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d0d4:	0b9b      	lsrs	r3, r3, #14
 800d0d6:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800d0d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d0dc:	4413      	add	r3, r2
 800d0de:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800d0e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0e2:	085b      	lsrs	r3, r3, #1
 800d0e4:	69ba      	ldr	r2, [r7, #24]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0f2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800d0f4:	69bb      	ldr	r3, [r7, #24]
 800d0f6:	039b      	lsls	r3, r3, #14
 800d0f8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	085b      	lsrs	r3, r3, #1
 800d0fe:	69ba      	ldr	r2, [r7, #24]
 800d100:	4413      	add	r3, r2
 800d102:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800d104:	69ba      	ldr	r2, [r7, #24]
 800d106:	69fb      	ldr	r3, [r7, #28]
 800d108:	fbb2 f3f3 	udiv	r3, r2, r3
 800d10c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d112:	fb02 f303 	mul.w	r3, r2, r3
 800d116:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d118:	69bb      	ldr	r3, [r7, #24]
 800d11a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d11e:	4a25      	ldr	r2, [pc, #148]	; (800d1b4 <VL53L0X_calc_dmax+0x234>)
 800d120:	fba2 2303 	umull	r2, r3, r2, r3
 800d124:	099b      	lsrs	r3, r3, #6
 800d126:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800d128:	69bb      	ldr	r3, [r7, #24]
 800d12a:	011b      	lsls	r3, r3, #4
 800d12c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800d12e:	69bb      	ldr	r3, [r7, #24]
 800d130:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d134:	4a1f      	ldr	r2, [pc, #124]	; (800d1b4 <VL53L0X_calc_dmax+0x234>)
 800d136:	fba2 2303 	umull	r2, r3, r2, r3
 800d13a:	099b      	lsrs	r3, r3, #6
 800d13c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800d13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d140:	3380      	adds	r3, #128	; 0x80
 800d142:	0a1b      	lsrs	r3, r3, #8
 800d144:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d008      	beq.n	800d15e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800d14c:	697b      	ldr	r3, [r7, #20]
 800d14e:	085a      	lsrs	r2, r3, #1
 800d150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d152:	441a      	add	r2, r3
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	fbb2 f3f3 	udiv	r3, r2, r3
 800d15a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d15c:	e001      	b.n	800d162 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800d15e:	2300      	movs	r3, #0
 800d160:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800d162:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d164:	f7fe f9ba 	bl	800b4dc <VL53L0X_isqrt>
 800d168:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d008      	beq.n	800d182 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800d170:	69bb      	ldr	r3, [r7, #24]
 800d172:	085a      	lsrs	r2, r3, #1
 800d174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d176:	441a      	add	r2, r3
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d17e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d180:	e001      	b.n	800d186 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800d186:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d188:	f7fe f9a8 	bl	800b4dc <VL53L0X_isqrt>
 800d18c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800d18e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d190:	693a      	ldr	r2, [r7, #16]
 800d192:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800d194:	693a      	ldr	r2, [r7, #16]
 800d196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d198:	429a      	cmp	r2, r3
 800d19a:	d902      	bls.n	800d1a2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800d19c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d19e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d1a0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800d1a2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	3768      	adds	r7, #104	; 0x68
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	bd80      	pop	{r7, pc}
 800d1ae:	bf00      	nop
 800d1b0:	fff00000 	.word	0xfff00000
 800d1b4:	10624dd3 	.word	0x10624dd3

0800d1b8 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b0b4      	sub	sp, #208	; 0xd0
 800d1bc:	af04      	add	r7, sp, #16
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	607a      	str	r2, [r7, #4]
 800d1c4:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800d1c6:	f44f 7348 	mov.w	r3, #800	; 0x320
 800d1ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800d1ce:	f44f 7316 	mov.w	r3, #600	; 0x258
 800d1d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800d1d6:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800d1da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800d1de:	f241 235c 	movw	r3, #4700	; 0x125c
 800d1e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800d1e6:	4b9e      	ldr	r3, [pc, #632]	; (800d460 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800d1e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800d1ec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d1f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800d1f2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800d1f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1fe:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800d200:	4b98      	ldr	r3, [pc, #608]	; (800d464 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800d202:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800d204:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d208:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800d20a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800d20e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800d210:	f240 6377 	movw	r3, #1655	; 0x677
 800d214:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d216:	2300      	movs	r3, #0
 800d218:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6a1b      	ldr	r3, [r3, #32]
 800d220:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d22a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800d22e:	0c1b      	lsrs	r3, r3, #16
 800d230:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	68db      	ldr	r3, [r3, #12]
 800d236:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800d238:	f107 0310 	add.w	r3, r7, #16
 800d23c:	461a      	mov	r2, r3
 800d23e:	68b9      	ldr	r1, [r7, #8]
 800d240:	68f8      	ldr	r0, [r7, #12]
 800d242:	f7ff fe78 	bl	800cf36 <VL53L0X_get_total_signal_rate>
 800d246:	4603      	mov	r3, r0
 800d248:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800d24c:	f107 0314 	add.w	r3, r7, #20
 800d250:	461a      	mov	r2, r3
 800d252:	68b9      	ldr	r1, [r7, #8]
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	f7ff fe3f 	bl	800ced8 <VL53L0X_get_total_xtalk_rate>
 800d25a:	4603      	mov	r3, r0
 800d25c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800d260:	693b      	ldr	r3, [r7, #16]
 800d262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d266:	fb02 f303 	mul.w	r3, r2, r3
 800d26a:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800d26c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d26e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d272:	0c1b      	lsrs	r3, r3, #16
 800d274:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800d276:	697b      	ldr	r3, [r7, #20]
 800d278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d27c:	fb02 f303 	mul.w	r3, r2, r3
 800d280:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800d284:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800d288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d902      	bls.n	800d294 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800d28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d290:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800d294:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d168      	bne.n	800d36e <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800d2a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800d2ac:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d2b0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d2b4:	461a      	mov	r2, r3
 800d2b6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800d2ba:	68f8      	ldr	r0, [r7, #12]
 800d2bc:	f7fe feb2 	bl	800c024 <VL53L0X_calc_timeout_mclks>
 800d2c0:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d2c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800d2d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800d2d6:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d2da:	461a      	mov	r2, r3
 800d2dc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f7fe fe9f 	bl	800c024 <VL53L0X_calc_timeout_mclks>
 800d2e6:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800d2e8:	2303      	movs	r3, #3
 800d2ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800d2ee:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d2f2:	2b08      	cmp	r3, #8
 800d2f4:	d102      	bne.n	800d2fc <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800d2f6:	2302      	movs	r3, #2
 800d2f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800d2fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d2fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d300:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800d302:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	02db      	lsls	r3, r3, #11
 800d30c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d310:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d314:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d318:	4a53      	ldr	r2, [pc, #332]	; (800d468 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d31a:	fba2 2303 	umull	r2, r3, r2, r3
 800d31e:	099b      	lsrs	r3, r3, #6
 800d320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800d324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d328:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d32a:	fb02 f303 	mul.w	r3, r2, r3
 800d32e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800d332:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d336:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d33a:	4a4b      	ldr	r2, [pc, #300]	; (800d468 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d33c:	fba2 2303 	umull	r2, r3, r2, r3
 800d340:	099b      	lsrs	r3, r3, #6
 800d342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800d346:	693b      	ldr	r3, [r7, #16]
 800d348:	3380      	adds	r3, #128	; 0x80
 800d34a:	0a1b      	lsrs	r3, r3, #8
 800d34c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800d34e:	693a      	ldr	r2, [r7, #16]
 800d350:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d354:	fb02 f303 	mul.w	r3, r2, r3
 800d358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800d35c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d360:	3380      	adds	r3, #128	; 0x80
 800d362:	0a1b      	lsrs	r3, r3, #8
 800d364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	021b      	lsls	r3, r3, #8
 800d36c:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800d36e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d372:	2b00      	cmp	r3, #0
 800d374:	d002      	beq.n	800d37c <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800d376:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800d37a:	e15e      	b.n	800d63a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800d37c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d10c      	bne.n	800d39c <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d388:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d390:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]
 800d39a:	e14c      	b.n	800d636 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800d39c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d102      	bne.n	800d3aa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800d3aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d3ae:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800d3b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3b2:	041a      	lsls	r2, r3, #16
 800d3b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800d3be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d3c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d902      	bls.n	800d3ce <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800d3c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800d3ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d3d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d3d6:	fb02 f303 	mul.w	r3, r2, r3
 800d3da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800d3de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	005b      	lsls	r3, r3, #1
 800d3e6:	4413      	add	r3, r2
 800d3e8:	009b      	lsls	r3, r3, #2
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7fe f876 	bl	800b4dc <VL53L0X_isqrt>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	005b      	lsls	r3, r3, #1
 800d3f4:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800d3f6:	68bb      	ldr	r3, [r7, #8]
 800d3f8:	891b      	ldrh	r3, [r3, #8]
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3fe:	fb02 f303 	mul.w	r3, r2, r3
 800d402:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d404:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d406:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d40c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d40e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800d410:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800d414:	4a14      	ldr	r2, [pc, #80]	; (800d468 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d416:	fba2 2303 	umull	r2, r3, r2, r3
 800d41a:	099b      	lsrs	r3, r3, #6
 800d41c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800d41e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d420:	041b      	lsls	r3, r3, #16
 800d422:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d426:	4a10      	ldr	r2, [pc, #64]	; (800d468 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800d428:	fba2 2303 	umull	r2, r3, r2, r3
 800d42c:	099b      	lsrs	r3, r3, #6
 800d42e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800d430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800d436:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d43e:	2b00      	cmp	r3, #0
 800d440:	bfb8      	it	lt
 800d442:	425b      	neglt	r3, r3
 800d444:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800d446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d448:	021b      	lsls	r3, r3, #8
 800d44a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800d44c:	68bb      	ldr	r3, [r7, #8]
 800d44e:	7e1b      	ldrb	r3, [r3, #24]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d00b      	beq.n	800d46c <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800d454:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d458:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d45c:	e033      	b.n	800d4c6 <VL53L0X_calc_sigma_estimate+0x30e>
 800d45e:	bf00      	nop
 800d460:	028f87ae 	.word	0x028f87ae
 800d464:	0006999a 	.word	0x0006999a
 800d468:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800d46c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d46e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d472:	fbb2 f3f3 	udiv	r3, r2, r3
 800d476:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800d47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47c:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800d480:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d484:	fb02 f303 	mul.w	r3, r2, r3
 800d488:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800d48c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d492:	4413      	add	r3, r2
 800d494:	0c1b      	lsrs	r3, r3, #16
 800d496:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800d49a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d49e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d4a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800d4a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4aa:	085b      	lsrs	r3, r3, #1
 800d4ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800d4b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4b4:	fb03 f303 	mul.w	r3, r3, r3
 800d4b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800d4bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4c0:	0b9b      	lsrs	r3, r3, #14
 800d4c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800d4c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d4ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d4cc:	fb02 f303 	mul.w	r3, r2, r3
 800d4d0:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4d8:	0c1b      	lsrs	r3, r3, #16
 800d4da:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800d4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4de:	fb03 f303 	mul.w	r3, r3, r3
 800d4e2:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800d4e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d4e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800d4ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ec:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800d4f0:	0c1b      	lsrs	r3, r3, #16
 800d4f2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800d4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f6:	fb03 f303 	mul.w	r3, r3, r3
 800d4fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800d4fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d500:	4413      	add	r3, r2
 800d502:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800d504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d506:	f7fd ffe9 	bl	800b4dc <VL53L0X_isqrt>
 800d50a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800d50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d50e:	041b      	lsls	r3, r3, #16
 800d510:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800d512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d514:	3332      	adds	r3, #50	; 0x32
 800d516:	4a4b      	ldr	r2, [pc, #300]	; (800d644 <VL53L0X_calc_sigma_estimate+0x48c>)
 800d518:	fba2 2303 	umull	r2, r3, r2, r3
 800d51c:	095a      	lsrs	r2, r3, #5
 800d51e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d520:	fbb2 f3f3 	udiv	r3, r2, r3
 800d524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800d528:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d52c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800d530:	fb02 f303 	mul.w	r3, r2, r3
 800d534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800d538:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d53c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800d540:	3308      	adds	r3, #8
 800d542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800d546:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d54a:	4a3f      	ldr	r2, [pc, #252]	; (800d648 <VL53L0X_calc_sigma_estimate+0x490>)
 800d54c:	fba2 2303 	umull	r2, r3, r2, r3
 800d550:	0b5b      	lsrs	r3, r3, #13
 800d552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800d556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d55a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d902      	bls.n	800d566 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800d560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d562:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800d566:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d56a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d56e:	4413      	add	r3, r2
 800d570:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800d574:	4a35      	ldr	r2, [pc, #212]	; (800d64c <VL53L0X_calc_sigma_estimate+0x494>)
 800d576:	fba2 2303 	umull	r2, r3, r2, r3
 800d57a:	099b      	lsrs	r3, r3, #6
 800d57c:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800d582:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d586:	441a      	add	r2, r3
 800d588:	6a3b      	ldr	r3, [r7, #32]
 800d58a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d58e:	4618      	mov	r0, r3
 800d590:	f7fd ffa4 	bl	800b4dc <VL53L0X_isqrt>
 800d594:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	021b      	lsls	r3, r3, #8
 800d59a:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800d59c:	69fb      	ldr	r3, [r7, #28]
 800d59e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800d5a2:	4a2a      	ldr	r2, [pc, #168]	; (800d64c <VL53L0X_calc_sigma_estimate+0x494>)
 800d5a4:	fba2 2303 	umull	r2, r3, r2, r3
 800d5a8:	099b      	lsrs	r3, r3, #6
 800d5aa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800d5ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d5b0:	fb03 f303 	mul.w	r3, r3, r3
 800d5b4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	fb03 f303 	mul.w	r3, r3, r3
 800d5bc:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800d5be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c2:	4413      	add	r3, r2
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	f7fd ff89 	bl	800b4dc <VL53L0X_isqrt>
 800d5ca:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800d5cc:	69bb      	ldr	r3, [r7, #24]
 800d5ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d5d2:	fb02 f303 	mul.w	r3, r2, r3
 800d5d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800d5da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d009      	beq.n	800d5f4 <VL53L0X_calc_sigma_estimate+0x43c>
 800d5e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d005      	beq.n	800d5f4 <VL53L0X_calc_sigma_estimate+0x43c>
 800d5e8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d5ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d903      	bls.n	800d5fc <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800d5f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d5f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d602:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800d60e:	6939      	ldr	r1, [r7, #16]
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	9303      	str	r3, [sp, #12]
 800d614:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d618:	9302      	str	r3, [sp, #8]
 800d61a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800d61e:	9301      	str	r3, [sp, #4]
 800d620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d622:	9300      	str	r3, [sp, #0]
 800d624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d62a:	68f8      	ldr	r0, [r7, #12]
 800d62c:	f7ff fca8 	bl	800cf80 <VL53L0X_calc_dmax>
 800d630:	4603      	mov	r3, r0
 800d632:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d636:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	37c0      	adds	r7, #192	; 0xc0
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	51eb851f 	.word	0x51eb851f
 800d648:	d1b71759 	.word	0xd1b71759
 800d64c:	10624dd3 	.word	0x10624dd3

0800d650 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b090      	sub	sp, #64	; 0x40
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	607a      	str	r2, [r7, #4]
 800d65a:	461a      	mov	r2, r3
 800d65c:	460b      	mov	r3, r1
 800d65e:	72fb      	strb	r3, [r7, #11]
 800d660:	4613      	mov	r3, r2
 800d662:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d664:	2300      	movs	r3, #0
 800d666:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800d67c:	2300      	movs	r3, #0
 800d67e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800d69a:	2300      	movs	r3, #0
 800d69c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800d6a2:	7afb      	ldrb	r3, [r7, #11]
 800d6a4:	10db      	asrs	r3, r3, #3
 800d6a6:	b2db      	uxtb	r3, r3
 800d6a8:	f003 030f 	and.w	r3, r3, #15
 800d6ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800d6b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d017      	beq.n	800d6e8 <VL53L0X_get_pal_range_status+0x98>
 800d6b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6bc:	2b05      	cmp	r3, #5
 800d6be:	d013      	beq.n	800d6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800d6c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6c4:	2b07      	cmp	r3, #7
 800d6c6:	d00f      	beq.n	800d6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800d6c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6cc:	2b0c      	cmp	r3, #12
 800d6ce:	d00b      	beq.n	800d6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800d6d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6d4:	2b0d      	cmp	r3, #13
 800d6d6:	d007      	beq.n	800d6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800d6d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6dc:	2b0e      	cmp	r3, #14
 800d6de:	d003      	beq.n	800d6e8 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800d6e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d6e4:	2b0f      	cmp	r3, #15
 800d6e6:	d103      	bne.n	800d6f0 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800d6ee:	e002      	b.n	800d6f6 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d6f6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d109      	bne.n	800d712 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d6fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d702:	461a      	mov	r2, r3
 800d704:	2100      	movs	r1, #0
 800d706:	68f8      	ldr	r0, [r7, #12]
 800d708:	f7fc f9ec 	bl	8009ae4 <VL53L0X_GetLimitCheckEnable>
 800d70c:	4603      	mov	r3, r0
 800d70e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800d712:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d716:	2b00      	cmp	r3, #0
 800d718:	d02e      	beq.n	800d778 <VL53L0X_get_pal_range_status+0x128>
 800d71a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d12a      	bne.n	800d778 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800d722:	f107 0310 	add.w	r3, r7, #16
 800d726:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d72a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d72c:	68f8      	ldr	r0, [r7, #12]
 800d72e:	f7ff fd43 	bl	800d1b8 <VL53L0X_calc_sigma_estimate>
 800d732:	4603      	mov	r3, r0
 800d734:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800d738:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d103      	bne.n	800d748 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800d740:	693b      	ldr	r3, [r7, #16]
 800d742:	b29a      	uxth	r2, r3
 800d744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d746:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800d748:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d113      	bne.n	800d778 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800d750:	f107 0320 	add.w	r3, r7, #32
 800d754:	461a      	mov	r2, r3
 800d756:	2100      	movs	r1, #0
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7fc fa49 	bl	8009bf0 <VL53L0X_GetLimitCheckValue>
 800d75e:	4603      	mov	r3, r0
 800d760:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d006      	beq.n	800d778 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800d76a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d76c:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800d76e:	429a      	cmp	r2, r3
 800d770:	d902      	bls.n	800d778 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800d772:	2301      	movs	r3, #1
 800d774:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d778:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d109      	bne.n	800d794 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d780:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800d784:	461a      	mov	r2, r3
 800d786:	2102      	movs	r1, #2
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7fc f9ab 	bl	8009ae4 <VL53L0X_GetLimitCheckEnable>
 800d78e:	4603      	mov	r3, r0
 800d790:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800d794:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d044      	beq.n	800d826 <VL53L0X_get_pal_range_status+0x1d6>
 800d79c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d140      	bne.n	800d826 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d7a4:	f107 031c 	add.w	r3, r7, #28
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	2102      	movs	r1, #2
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7fc fa1f 	bl	8009bf0 <VL53L0X_GetLimitCheckValue>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800d7b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d107      	bne.n	800d7d0 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	21ff      	movs	r1, #255	; 0xff
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f000 f9bb 	bl	800db40 <VL53L0X_WrByte>
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800d7d0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d109      	bne.n	800d7ec <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800d7d8:	f107 0316 	add.w	r3, r7, #22
 800d7dc:	461a      	mov	r2, r3
 800d7de:	21b6      	movs	r1, #182	; 0xb6
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f000 fa59 	bl	800dc98 <VL53L0X_RdWord>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800d7ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d107      	bne.n	800d804 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	21ff      	movs	r1, #255	; 0xff
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f000 f9a1 	bl	800db40 <VL53L0X_WrByte>
 800d7fe:	4603      	mov	r3, r0
 800d800:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800d804:	8afb      	ldrh	r3, [r7, #22]
 800d806:	025b      	lsls	r3, r3, #9
 800d808:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d80e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800d812:	69fb      	ldr	r3, [r7, #28]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d006      	beq.n	800d826 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800d818:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800d81a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d81c:	429a      	cmp	r2, r3
 800d81e:	d902      	bls.n	800d826 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800d820:	2301      	movs	r3, #1
 800d822:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800d826:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d109      	bne.n	800d842 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d82e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d832:	461a      	mov	r2, r3
 800d834:	2103      	movs	r1, #3
 800d836:	68f8      	ldr	r0, [r7, #12]
 800d838:	f7fc f954 	bl	8009ae4 <VL53L0X_GetLimitCheckEnable>
 800d83c:	4603      	mov	r3, r0
 800d83e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800d842:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d846:	2b00      	cmp	r3, #0
 800d848:	d023      	beq.n	800d892 <VL53L0X_get_pal_range_status+0x242>
 800d84a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d11f      	bne.n	800d892 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800d852:	893b      	ldrh	r3, [r7, #8]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d102      	bne.n	800d85e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800d858:	2300      	movs	r3, #0
 800d85a:	637b      	str	r3, [r7, #52]	; 0x34
 800d85c:	e005      	b.n	800d86a <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	021a      	lsls	r2, r3, #8
 800d862:	893b      	ldrh	r3, [r7, #8]
 800d864:	fbb2 f3f3 	udiv	r3, r2, r3
 800d868:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800d86a:	f107 0318 	add.w	r3, r7, #24
 800d86e:	461a      	mov	r2, r3
 800d870:	2103      	movs	r1, #3
 800d872:	68f8      	ldr	r0, [r7, #12]
 800d874:	f7fc f9bc 	bl	8009bf0 <VL53L0X_GetLimitCheckValue>
 800d878:	4603      	mov	r3, r0
 800d87a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d006      	beq.n	800d892 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800d884:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800d886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d888:	429a      	cmp	r2, r3
 800d88a:	d202      	bcs.n	800d892 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800d88c:	2301      	movs	r3, #1
 800d88e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d892:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d896:	2b00      	cmp	r3, #0
 800d898:	d14a      	bne.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800d89a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800d89e:	2b01      	cmp	r3, #1
 800d8a0:	d103      	bne.n	800d8aa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800d8a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8a4:	22ff      	movs	r2, #255	; 0xff
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e042      	b.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800d8aa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d007      	beq.n	800d8c2 <VL53L0X_get_pal_range_status+0x272>
 800d8b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8b6:	2b02      	cmp	r3, #2
 800d8b8:	d003      	beq.n	800d8c2 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800d8ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d103      	bne.n	800d8ca <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800d8c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8c4:	2205      	movs	r2, #5
 800d8c6:	701a      	strb	r2, [r3, #0]
 800d8c8:	e032      	b.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800d8ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8ce:	2b06      	cmp	r3, #6
 800d8d0:	d003      	beq.n	800d8da <VL53L0X_get_pal_range_status+0x28a>
 800d8d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8d6:	2b09      	cmp	r3, #9
 800d8d8:	d103      	bne.n	800d8e2 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800d8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8dc:	2204      	movs	r2, #4
 800d8de:	701a      	strb	r2, [r3, #0]
 800d8e0:	e026      	b.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800d8e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8e6:	2b08      	cmp	r3, #8
 800d8e8:	d007      	beq.n	800d8fa <VL53L0X_get_pal_range_status+0x2aa>
 800d8ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d8ee:	2b0a      	cmp	r3, #10
 800d8f0:	d003      	beq.n	800d8fa <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800d8f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d103      	bne.n	800d902 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800d8fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	701a      	strb	r2, [r3, #0]
 800d900:	e016      	b.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800d902:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d906:	2b04      	cmp	r3, #4
 800d908:	d003      	beq.n	800d912 <VL53L0X_get_pal_range_status+0x2c2>
 800d90a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d103      	bne.n	800d91a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800d912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d914:	2202      	movs	r2, #2
 800d916:	701a      	strb	r2, [r3, #0]
 800d918:	e00a      	b.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800d91a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d91e:	2b01      	cmp	r3, #1
 800d920:	d103      	bne.n	800d92a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800d922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d924:	2201      	movs	r2, #1
 800d926:	701a      	strb	r2, [r3, #0]
 800d928:	e002      	b.n	800d930 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800d92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800d930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d102      	bne.n	800d93e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800d938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d93a:	2200      	movs	r2, #0
 800d93c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800d93e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800d942:	461a      	mov	r2, r3
 800d944:	2101      	movs	r1, #1
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f7fc f8cc 	bl	8009ae4 <VL53L0X_GetLimitCheckEnable>
 800d94c:	4603      	mov	r3, r0
 800d94e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800d952:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d956:	2b00      	cmp	r3, #0
 800d958:	d14f      	bne.n	800d9fa <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800d95a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <VL53L0X_get_pal_range_status+0x31a>
 800d962:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800d966:	2b01      	cmp	r3, #1
 800d968:	d103      	bne.n	800d972 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800d96a:	2301      	movs	r3, #1
 800d96c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d970:	e002      	b.n	800d978 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800d972:	2300      	movs	r3, #0
 800d974:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d97e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800d982:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800d986:	2b04      	cmp	r3, #4
 800d988:	d003      	beq.n	800d992 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800d98a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d103      	bne.n	800d99a <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800d992:	2301      	movs	r3, #1
 800d994:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d998:	e002      	b.n	800d9a0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800d99a:	2300      	movs	r3, #0
 800d99c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d9a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800d9aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d003      	beq.n	800d9ba <VL53L0X_get_pal_range_status+0x36a>
 800d9b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d9b6:	2b01      	cmp	r3, #1
 800d9b8:	d103      	bne.n	800d9c2 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9c0:	e002      	b.n	800d9c8 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d9ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800d9d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d003      	beq.n	800d9e2 <VL53L0X_get_pal_range_status+0x392>
 800d9da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d103      	bne.n	800d9ea <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800d9e8:	e002      	b.n	800d9f0 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800d9f6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800d9fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3740      	adds	r7, #64	; 0x40
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}

0800da06 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800da06:	b580      	push	{r7, lr}
 800da08:	b088      	sub	sp, #32
 800da0a:	af02      	add	r7, sp, #8
 800da0c:	60f8      	str	r0, [r7, #12]
 800da0e:	60b9      	str	r1, [r7, #8]
 800da10:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	330a      	adds	r3, #10
 800da16:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800da24:	b299      	uxth	r1, r3
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	b29a      	uxth	r2, r3
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	9300      	str	r3, [sp, #0]
 800da2e:	4613      	mov	r3, r2
 800da30:	68ba      	ldr	r2, [r7, #8]
 800da32:	f7f4 fe4b 	bl	80026cc <HAL_I2C_Master_Transmit>
 800da36:	4603      	mov	r3, r0
 800da38:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800da3a:	693b      	ldr	r3, [r7, #16]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3718      	adds	r7, #24
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800da44:	b580      	push	{r7, lr}
 800da46:	b088      	sub	sp, #32
 800da48:	af02      	add	r7, sp, #8
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	330a      	adds	r3, #10
 800da54:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800da62:	f043 0301 	orr.w	r3, r3, #1
 800da66:	b2db      	uxtb	r3, r3
 800da68:	b299      	uxth	r1, r3
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	b29a      	uxth	r2, r3
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	4613      	mov	r3, r2
 800da74:	68ba      	ldr	r2, [r7, #8]
 800da76:	f7f4 ff27 	bl	80028c8 <HAL_I2C_Master_Receive>
 800da7a:	4603      	mov	r3, r0
 800da7c:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800da7e:	693b      	ldr	r3, [r7, #16]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3718      	adds	r7, #24
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}

0800da88 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800da88:	b580      	push	{r7, lr}
 800da8a:	b086      	sub	sp, #24
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	607a      	str	r2, [r7, #4]
 800da92:	603b      	str	r3, [r7, #0]
 800da94:	460b      	mov	r3, r1
 800da96:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da98:	2300      	movs	r3, #0
 800da9a:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	2b3f      	cmp	r3, #63	; 0x3f
 800daa0:	d902      	bls.n	800daa8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800daa2:	f06f 0303 	mvn.w	r3, #3
 800daa6:	e016      	b.n	800dad6 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800daa8:	4a0d      	ldr	r2, [pc, #52]	; (800dae0 <VL53L0X_WriteMulti+0x58>)
 800daaa:	7afb      	ldrb	r3, [r7, #11]
 800daac:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800daae:	683a      	ldr	r2, [r7, #0]
 800dab0:	6879      	ldr	r1, [r7, #4]
 800dab2:	480c      	ldr	r0, [pc, #48]	; (800dae4 <VL53L0X_WriteMulti+0x5c>)
 800dab4:	f006 fab8 	bl	8014028 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	3301      	adds	r3, #1
 800dabc:	461a      	mov	r2, r3
 800dabe:	4908      	ldr	r1, [pc, #32]	; (800dae0 <VL53L0X_WriteMulti+0x58>)
 800dac0:	68f8      	ldr	r0, [r7, #12]
 800dac2:	f7ff ffa0 	bl	800da06 <_I2CWrite>
 800dac6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dac8:	693b      	ldr	r3, [r7, #16]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dace:	23ec      	movs	r3, #236	; 0xec
 800dad0:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dad2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3718      	adds	r7, #24
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	200008c0 	.word	0x200008c0
 800dae4:	200008c1 	.word	0x200008c1

0800dae8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800dae8:	b580      	push	{r7, lr}
 800daea:	b086      	sub	sp, #24
 800daec:	af00      	add	r7, sp, #0
 800daee:	60f8      	str	r0, [r7, #12]
 800daf0:	607a      	str	r2, [r7, #4]
 800daf2:	603b      	str	r3, [r7, #0]
 800daf4:	460b      	mov	r3, r1
 800daf6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800daf8:	2300      	movs	r3, #0
 800dafa:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dafc:	f107 030b 	add.w	r3, r7, #11
 800db00:	2201      	movs	r2, #1
 800db02:	4619      	mov	r1, r3
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f7ff ff7e 	bl	800da06 <_I2CWrite>
 800db0a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d002      	beq.n	800db18 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800db12:	23ec      	movs	r3, #236	; 0xec
 800db14:	75fb      	strb	r3, [r7, #23]
        goto done;
 800db16:	e00c      	b.n	800db32 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800db18:	683a      	ldr	r2, [r7, #0]
 800db1a:	6879      	ldr	r1, [r7, #4]
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f7ff ff91 	bl	800da44 <_I2CRead>
 800db22:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800db24:	693b      	ldr	r3, [r7, #16]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800db2a:	23ec      	movs	r3, #236	; 0xec
 800db2c:	75fb      	strb	r3, [r7, #23]
 800db2e:	e000      	b.n	800db32 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800db30:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800db32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800db36:	4618      	mov	r0, r3
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}
	...

0800db40 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	460b      	mov	r3, r1
 800db4a:	70fb      	strb	r3, [r7, #3]
 800db4c:	4613      	mov	r3, r2
 800db4e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800db54:	4a0b      	ldr	r2, [pc, #44]	; (800db84 <VL53L0X_WrByte+0x44>)
 800db56:	78fb      	ldrb	r3, [r7, #3]
 800db58:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800db5a:	4a0a      	ldr	r2, [pc, #40]	; (800db84 <VL53L0X_WrByte+0x44>)
 800db5c:	78bb      	ldrb	r3, [r7, #2]
 800db5e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800db60:	2202      	movs	r2, #2
 800db62:	4908      	ldr	r1, [pc, #32]	; (800db84 <VL53L0X_WrByte+0x44>)
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f7ff ff4e 	bl	800da06 <_I2CWrite>
 800db6a:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800db6c:	68bb      	ldr	r3, [r7, #8]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800db72:	23ec      	movs	r3, #236	; 0xec
 800db74:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800db76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800db7a:	4618      	mov	r0, r3
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	200008c0 	.word	0x200008c0

0800db88 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800db88:	b580      	push	{r7, lr}
 800db8a:	b084      	sub	sp, #16
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	6078      	str	r0, [r7, #4]
 800db90:	460b      	mov	r3, r1
 800db92:	70fb      	strb	r3, [r7, #3]
 800db94:	4613      	mov	r3, r2
 800db96:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800db98:	2300      	movs	r3, #0
 800db9a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800db9c:	4a0e      	ldr	r2, [pc, #56]	; (800dbd8 <VL53L0X_WrWord+0x50>)
 800db9e:	78fb      	ldrb	r3, [r7, #3]
 800dba0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800dba2:	883b      	ldrh	r3, [r7, #0]
 800dba4:	0a1b      	lsrs	r3, r3, #8
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	b2da      	uxtb	r2, r3
 800dbaa:	4b0b      	ldr	r3, [pc, #44]	; (800dbd8 <VL53L0X_WrWord+0x50>)
 800dbac:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800dbae:	883b      	ldrh	r3, [r7, #0]
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	4b09      	ldr	r3, [pc, #36]	; (800dbd8 <VL53L0X_WrWord+0x50>)
 800dbb4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800dbb6:	2203      	movs	r2, #3
 800dbb8:	4907      	ldr	r1, [pc, #28]	; (800dbd8 <VL53L0X_WrWord+0x50>)
 800dbba:	6878      	ldr	r0, [r7, #4]
 800dbbc:	f7ff ff23 	bl	800da06 <_I2CWrite>
 800dbc0:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d001      	beq.n	800dbcc <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dbc8:	23ec      	movs	r3, #236	; 0xec
 800dbca:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800dbcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	3710      	adds	r7, #16
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}
 800dbd8:	200008c0 	.word	0x200008c0

0800dbdc <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	4608      	mov	r0, r1
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	461a      	mov	r2, r3
 800dbea:	4603      	mov	r3, r0
 800dbec:	70fb      	strb	r3, [r7, #3]
 800dbee:	460b      	mov	r3, r1
 800dbf0:	70bb      	strb	r3, [r7, #2]
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800dbfa:	f107 020e 	add.w	r2, r7, #14
 800dbfe:	78fb      	ldrb	r3, [r7, #3]
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f81e 	bl	800dc44 <VL53L0X_RdByte>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800dc0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d110      	bne.n	800dc36 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800dc14:	7bba      	ldrb	r2, [r7, #14]
 800dc16:	78bb      	ldrb	r3, [r7, #2]
 800dc18:	4013      	ands	r3, r2
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	787b      	ldrb	r3, [r7, #1]
 800dc1e:	4313      	orrs	r3, r2
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800dc24:	7bba      	ldrb	r2, [r7, #14]
 800dc26:	78fb      	ldrb	r3, [r7, #3]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff ff88 	bl	800db40 <VL53L0X_WrByte>
 800dc30:	4603      	mov	r3, r0
 800dc32:	73fb      	strb	r3, [r7, #15]
 800dc34:	e000      	b.n	800dc38 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800dc36:	bf00      	nop
done:
    return Status;
 800dc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3710      	adds	r7, #16
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b086      	sub	sp, #24
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	60f8      	str	r0, [r7, #12]
 800dc4c:	460b      	mov	r3, r1
 800dc4e:	607a      	str	r2, [r7, #4]
 800dc50:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dc52:	2300      	movs	r3, #0
 800dc54:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dc56:	f107 030b 	add.w	r3, r7, #11
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f7ff fed1 	bl	800da06 <_I2CWrite>
 800dc64:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d002      	beq.n	800dc72 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc6c:	23ec      	movs	r3, #236	; 0xec
 800dc6e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dc70:	e00c      	b.n	800dc8c <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800dc72:	2201      	movs	r2, #1
 800dc74:	6879      	ldr	r1, [r7, #4]
 800dc76:	68f8      	ldr	r0, [r7, #12]
 800dc78:	f7ff fee4 	bl	800da44 <_I2CRead>
 800dc7c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dc84:	23ec      	movs	r3, #236	; 0xec
 800dc86:	75fb      	strb	r3, [r7, #23]
 800dc88:	e000      	b.n	800dc8c <VL53L0X_RdByte+0x48>
    }
done:
 800dc8a:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800dc8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3718      	adds	r7, #24
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b086      	sub	sp, #24
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	60f8      	str	r0, [r7, #12]
 800dca0:	460b      	mov	r3, r1
 800dca2:	607a      	str	r2, [r7, #4]
 800dca4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dca6:	2300      	movs	r3, #0
 800dca8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dcaa:	f107 030b 	add.w	r3, r7, #11
 800dcae:	2201      	movs	r2, #1
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f7ff fea7 	bl	800da06 <_I2CWrite>
 800dcb8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d002      	beq.n	800dcc6 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dcc0:	23ec      	movs	r3, #236	; 0xec
 800dcc2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dcc4:	e017      	b.n	800dcf6 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800dcc6:	2202      	movs	r2, #2
 800dcc8:	490e      	ldr	r1, [pc, #56]	; (800dd04 <VL53L0X_RdWord+0x6c>)
 800dcca:	68f8      	ldr	r0, [r7, #12]
 800dccc:	f7ff feba 	bl	800da44 <_I2CRead>
 800dcd0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d002      	beq.n	800dcde <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dcd8:	23ec      	movs	r3, #236	; 0xec
 800dcda:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dcdc:	e00b      	b.n	800dcf6 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800dcde:	4b09      	ldr	r3, [pc, #36]	; (800dd04 <VL53L0X_RdWord+0x6c>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	021b      	lsls	r3, r3, #8
 800dce6:	b29a      	uxth	r2, r3
 800dce8:	4b06      	ldr	r3, [pc, #24]	; (800dd04 <VL53L0X_RdWord+0x6c>)
 800dcea:	785b      	ldrb	r3, [r3, #1]
 800dcec:	b29b      	uxth	r3, r3
 800dcee:	4413      	add	r3, r2
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800dcf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	3718      	adds	r7, #24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	200008c0 	.word	0x200008c0

0800dd08 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b086      	sub	sp, #24
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	60f8      	str	r0, [r7, #12]
 800dd10:	460b      	mov	r3, r1
 800dd12:	607a      	str	r2, [r7, #4]
 800dd14:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800dd16:	2300      	movs	r3, #0
 800dd18:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800dd1a:	f107 030b 	add.w	r3, r7, #11
 800dd1e:	2201      	movs	r2, #1
 800dd20:	4619      	mov	r1, r3
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f7ff fe6f 	bl	800da06 <_I2CWrite>
 800dd28:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d002      	beq.n	800dd36 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd30:	23ec      	movs	r3, #236	; 0xec
 800dd32:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dd34:	e01b      	b.n	800dd6e <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800dd36:	2204      	movs	r2, #4
 800dd38:	4910      	ldr	r1, [pc, #64]	; (800dd7c <VL53L0X_RdDWord+0x74>)
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f7ff fe82 	bl	800da44 <_I2CRead>
 800dd40:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d002      	beq.n	800dd4e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800dd48:	23ec      	movs	r3, #236	; 0xec
 800dd4a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800dd4c:	e00f      	b.n	800dd6e <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800dd4e:	4b0b      	ldr	r3, [pc, #44]	; (800dd7c <VL53L0X_RdDWord+0x74>)
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	061a      	lsls	r2, r3, #24
 800dd54:	4b09      	ldr	r3, [pc, #36]	; (800dd7c <VL53L0X_RdDWord+0x74>)
 800dd56:	785b      	ldrb	r3, [r3, #1]
 800dd58:	041b      	lsls	r3, r3, #16
 800dd5a:	441a      	add	r2, r3
 800dd5c:	4b07      	ldr	r3, [pc, #28]	; (800dd7c <VL53L0X_RdDWord+0x74>)
 800dd5e:	789b      	ldrb	r3, [r3, #2]
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	4413      	add	r3, r2
 800dd64:	4a05      	ldr	r2, [pc, #20]	; (800dd7c <VL53L0X_RdDWord+0x74>)
 800dd66:	78d2      	ldrb	r2, [r2, #3]
 800dd68:	441a      	add	r2, r3
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800dd6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3718      	adds	r7, #24
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	200008c0 	.word	0x200008c0

0800dd80 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800dd8c:	2002      	movs	r0, #2
 800dd8e:	f7f3 fd09 	bl	80017a4 <HAL_Delay>
    return status;
 800dd92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b084      	sub	sp, #16
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	460b      	mov	r3, r1
 800ddaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ddac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ddb0:	f006 f8d0 	bl	8013f54 <USBD_static_malloc>
 800ddb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d109      	bne.n	800ddd0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	32b0      	adds	r2, #176	; 0xb0
 800ddc6:	2100      	movs	r1, #0
 800ddc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ddcc:	2302      	movs	r3, #2
 800ddce:	e0d4      	b.n	800df7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ddd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ddd4:	2100      	movs	r1, #0
 800ddd6:	68f8      	ldr	r0, [r7, #12]
 800ddd8:	f006 f934 	bl	8014044 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	32b0      	adds	r2, #176	; 0xb0
 800dde6:	68f9      	ldr	r1, [r7, #12]
 800dde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	32b0      	adds	r2, #176	; 0xb0
 800ddf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	7c1b      	ldrb	r3, [r3, #16]
 800de04:	2b00      	cmp	r3, #0
 800de06:	d138      	bne.n	800de7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de08:	4b5e      	ldr	r3, [pc, #376]	; (800df84 <USBD_CDC_Init+0x1e4>)
 800de0a:	7819      	ldrb	r1, [r3, #0]
 800de0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de10:	2202      	movs	r2, #2
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f005 ff7b 	bl	8013d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de18:	4b5a      	ldr	r3, [pc, #360]	; (800df84 <USBD_CDC_Init+0x1e4>)
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	f003 020f 	and.w	r2, r3, #15
 800de20:	6879      	ldr	r1, [r7, #4]
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	440b      	add	r3, r1
 800de2c:	3324      	adds	r3, #36	; 0x24
 800de2e:	2201      	movs	r2, #1
 800de30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de32:	4b55      	ldr	r3, [pc, #340]	; (800df88 <USBD_CDC_Init+0x1e8>)
 800de34:	7819      	ldrb	r1, [r3, #0]
 800de36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de3a:	2202      	movs	r2, #2
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f005 ff66 	bl	8013d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de42:	4b51      	ldr	r3, [pc, #324]	; (800df88 <USBD_CDC_Init+0x1e8>)
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	f003 020f 	and.w	r2, r3, #15
 800de4a:	6879      	ldr	r1, [r7, #4]
 800de4c:	4613      	mov	r3, r2
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	4413      	add	r3, r2
 800de52:	009b      	lsls	r3, r3, #2
 800de54:	440b      	add	r3, r1
 800de56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de5a:	2201      	movs	r2, #1
 800de5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de5e:	4b4b      	ldr	r3, [pc, #300]	; (800df8c <USBD_CDC_Init+0x1ec>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	f003 020f 	and.w	r2, r3, #15
 800de66:	6879      	ldr	r1, [r7, #4]
 800de68:	4613      	mov	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	4413      	add	r3, r2
 800de6e:	009b      	lsls	r3, r3, #2
 800de70:	440b      	add	r3, r1
 800de72:	3326      	adds	r3, #38	; 0x26
 800de74:	2210      	movs	r2, #16
 800de76:	801a      	strh	r2, [r3, #0]
 800de78:	e035      	b.n	800dee6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de7a:	4b42      	ldr	r3, [pc, #264]	; (800df84 <USBD_CDC_Init+0x1e4>)
 800de7c:	7819      	ldrb	r1, [r3, #0]
 800de7e:	2340      	movs	r3, #64	; 0x40
 800de80:	2202      	movs	r2, #2
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f005 ff43 	bl	8013d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de88:	4b3e      	ldr	r3, [pc, #248]	; (800df84 <USBD_CDC_Init+0x1e4>)
 800de8a:	781b      	ldrb	r3, [r3, #0]
 800de8c:	f003 020f 	and.w	r2, r3, #15
 800de90:	6879      	ldr	r1, [r7, #4]
 800de92:	4613      	mov	r3, r2
 800de94:	009b      	lsls	r3, r3, #2
 800de96:	4413      	add	r3, r2
 800de98:	009b      	lsls	r3, r3, #2
 800de9a:	440b      	add	r3, r1
 800de9c:	3324      	adds	r3, #36	; 0x24
 800de9e:	2201      	movs	r2, #1
 800dea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800dea2:	4b39      	ldr	r3, [pc, #228]	; (800df88 <USBD_CDC_Init+0x1e8>)
 800dea4:	7819      	ldrb	r1, [r3, #0]
 800dea6:	2340      	movs	r3, #64	; 0x40
 800dea8:	2202      	movs	r2, #2
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f005 ff2f 	bl	8013d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800deb0:	4b35      	ldr	r3, [pc, #212]	; (800df88 <USBD_CDC_Init+0x1e8>)
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	f003 020f 	and.w	r2, r3, #15
 800deb8:	6879      	ldr	r1, [r7, #4]
 800deba:	4613      	mov	r3, r2
 800debc:	009b      	lsls	r3, r3, #2
 800debe:	4413      	add	r3, r2
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	440b      	add	r3, r1
 800dec4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dec8:	2201      	movs	r2, #1
 800deca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800decc:	4b2f      	ldr	r3, [pc, #188]	; (800df8c <USBD_CDC_Init+0x1ec>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	f003 020f 	and.w	r2, r3, #15
 800ded4:	6879      	ldr	r1, [r7, #4]
 800ded6:	4613      	mov	r3, r2
 800ded8:	009b      	lsls	r3, r3, #2
 800deda:	4413      	add	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	440b      	add	r3, r1
 800dee0:	3326      	adds	r3, #38	; 0x26
 800dee2:	2210      	movs	r2, #16
 800dee4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dee6:	4b29      	ldr	r3, [pc, #164]	; (800df8c <USBD_CDC_Init+0x1ec>)
 800dee8:	7819      	ldrb	r1, [r3, #0]
 800deea:	2308      	movs	r3, #8
 800deec:	2203      	movs	r2, #3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f005 ff0d 	bl	8013d0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800def4:	4b25      	ldr	r3, [pc, #148]	; (800df8c <USBD_CDC_Init+0x1ec>)
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	f003 020f 	and.w	r2, r3, #15
 800defc:	6879      	ldr	r1, [r7, #4]
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	440b      	add	r3, r1
 800df08:	3324      	adds	r3, #36	; 0x24
 800df0a:	2201      	movs	r2, #1
 800df0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	2200      	movs	r2, #0
 800df12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	33b0      	adds	r3, #176	; 0xb0
 800df20:	009b      	lsls	r3, r3, #2
 800df22:	4413      	add	r3, r2
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	2200      	movs	r2, #0
 800df36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800df40:	2b00      	cmp	r3, #0
 800df42:	d101      	bne.n	800df48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800df44:	2302      	movs	r3, #2
 800df46:	e018      	b.n	800df7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7c1b      	ldrb	r3, [r3, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d10a      	bne.n	800df66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df50:	4b0d      	ldr	r3, [pc, #52]	; (800df88 <USBD_CDC_Init+0x1e8>)
 800df52:	7819      	ldrb	r1, [r3, #0]
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df5e:	6878      	ldr	r0, [r7, #4]
 800df60:	f005 ffc4 	bl	8013eec <USBD_LL_PrepareReceive>
 800df64:	e008      	b.n	800df78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df66:	4b08      	ldr	r3, [pc, #32]	; (800df88 <USBD_CDC_Init+0x1e8>)
 800df68:	7819      	ldrb	r1, [r3, #0]
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df70:	2340      	movs	r3, #64	; 0x40
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f005 ffba 	bl	8013eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df78:	2300      	movs	r3, #0
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3710      	adds	r7, #16
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	2000034f 	.word	0x2000034f
 800df88:	20000350 	.word	0x20000350
 800df8c:	20000351 	.word	0x20000351

0800df90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b082      	sub	sp, #8
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	460b      	mov	r3, r1
 800df9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800df9c:	4b3a      	ldr	r3, [pc, #232]	; (800e088 <USBD_CDC_DeInit+0xf8>)
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f005 fed9 	bl	8013d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800dfa8:	4b37      	ldr	r3, [pc, #220]	; (800e088 <USBD_CDC_DeInit+0xf8>)
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	f003 020f 	and.w	r2, r3, #15
 800dfb0:	6879      	ldr	r1, [r7, #4]
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	009b      	lsls	r3, r3, #2
 800dfb6:	4413      	add	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	440b      	add	r3, r1
 800dfbc:	3324      	adds	r3, #36	; 0x24
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800dfc2:	4b32      	ldr	r3, [pc, #200]	; (800e08c <USBD_CDC_DeInit+0xfc>)
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	6878      	ldr	r0, [r7, #4]
 800dfca:	f005 fec6 	bl	8013d5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800dfce:	4b2f      	ldr	r3, [pc, #188]	; (800e08c <USBD_CDC_DeInit+0xfc>)
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	f003 020f 	and.w	r2, r3, #15
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	440b      	add	r3, r1
 800dfe2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dfea:	4b29      	ldr	r3, [pc, #164]	; (800e090 <USBD_CDC_DeInit+0x100>)
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	4619      	mov	r1, r3
 800dff0:	6878      	ldr	r0, [r7, #4]
 800dff2:	f005 feb2 	bl	8013d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dff6:	4b26      	ldr	r3, [pc, #152]	; (800e090 <USBD_CDC_DeInit+0x100>)
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	f003 020f 	and.w	r2, r3, #15
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	4613      	mov	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	440b      	add	r3, r1
 800e00a:	3324      	adds	r3, #36	; 0x24
 800e00c:	2200      	movs	r2, #0
 800e00e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e010:	4b1f      	ldr	r3, [pc, #124]	; (800e090 <USBD_CDC_DeInit+0x100>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	f003 020f 	and.w	r2, r3, #15
 800e018:	6879      	ldr	r1, [r7, #4]
 800e01a:	4613      	mov	r3, r2
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	4413      	add	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	440b      	add	r3, r1
 800e024:	3326      	adds	r3, #38	; 0x26
 800e026:	2200      	movs	r2, #0
 800e028:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	32b0      	adds	r2, #176	; 0xb0
 800e034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d01f      	beq.n	800e07c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	33b0      	adds	r3, #176	; 0xb0
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	4413      	add	r3, r2
 800e04a:	685b      	ldr	r3, [r3, #4]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	32b0      	adds	r2, #176	; 0xb0
 800e05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e05e:	4618      	mov	r0, r3
 800e060:	f005 ff86 	bl	8013f70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	32b0      	adds	r2, #176	; 0xb0
 800e06e:	2100      	movs	r1, #0
 800e070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2200      	movs	r2, #0
 800e078:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e07c:	2300      	movs	r3, #0
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	2000034f 	.word	0x2000034f
 800e08c:	20000350 	.word	0x20000350
 800e090:	20000351 	.word	0x20000351

0800e094 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b086      	sub	sp, #24
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	32b0      	adds	r2, #176	; 0xb0
 800e0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e0ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d101      	bne.n	800e0c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e0bf      	b.n	800e244 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e0c4:	683b      	ldr	r3, [r7, #0]
 800e0c6:	781b      	ldrb	r3, [r3, #0]
 800e0c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d050      	beq.n	800e172 <USBD_CDC_Setup+0xde>
 800e0d0:	2b20      	cmp	r3, #32
 800e0d2:	f040 80af 	bne.w	800e234 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	88db      	ldrh	r3, [r3, #6]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d03a      	beq.n	800e154 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	b25b      	sxtb	r3, r3
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	da1b      	bge.n	800e120 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e0ee:	687a      	ldr	r2, [r7, #4]
 800e0f0:	33b0      	adds	r3, #176	; 0xb0
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4413      	add	r3, r2
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	689b      	ldr	r3, [r3, #8]
 800e0fa:	683a      	ldr	r2, [r7, #0]
 800e0fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e0fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e100:	683a      	ldr	r2, [r7, #0]
 800e102:	88d2      	ldrh	r2, [r2, #6]
 800e104:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	88db      	ldrh	r3, [r3, #6]
 800e10a:	2b07      	cmp	r3, #7
 800e10c:	bf28      	it	cs
 800e10e:	2307      	movcs	r3, #7
 800e110:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	89fa      	ldrh	r2, [r7, #14]
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f001 fd43 	bl	800fba4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e11e:	e090      	b.n	800e242 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	785a      	ldrb	r2, [r3, #1]
 800e124:	693b      	ldr	r3, [r7, #16]
 800e126:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	88db      	ldrh	r3, [r3, #6]
 800e12e:	2b3f      	cmp	r3, #63	; 0x3f
 800e130:	d803      	bhi.n	800e13a <USBD_CDC_Setup+0xa6>
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	88db      	ldrh	r3, [r3, #6]
 800e136:	b2da      	uxtb	r2, r3
 800e138:	e000      	b.n	800e13c <USBD_CDC_Setup+0xa8>
 800e13a:	2240      	movs	r2, #64	; 0x40
 800e13c:	693b      	ldr	r3, [r7, #16]
 800e13e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e142:	6939      	ldr	r1, [r7, #16]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e14a:	461a      	mov	r2, r3
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f001 fd55 	bl	800fbfc <USBD_CtlPrepareRx>
      break;
 800e152:	e076      	b.n	800e242 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	33b0      	adds	r3, #176	; 0xb0
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	685b      	ldr	r3, [r3, #4]
 800e164:	689b      	ldr	r3, [r3, #8]
 800e166:	683a      	ldr	r2, [r7, #0]
 800e168:	7850      	ldrb	r0, [r2, #1]
 800e16a:	2200      	movs	r2, #0
 800e16c:	6839      	ldr	r1, [r7, #0]
 800e16e:	4798      	blx	r3
      break;
 800e170:	e067      	b.n	800e242 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	785b      	ldrb	r3, [r3, #1]
 800e176:	2b0b      	cmp	r3, #11
 800e178:	d851      	bhi.n	800e21e <USBD_CDC_Setup+0x18a>
 800e17a:	a201      	add	r2, pc, #4	; (adr r2, 800e180 <USBD_CDC_Setup+0xec>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e1b1 	.word	0x0800e1b1
 800e184:	0800e22d 	.word	0x0800e22d
 800e188:	0800e21f 	.word	0x0800e21f
 800e18c:	0800e21f 	.word	0x0800e21f
 800e190:	0800e21f 	.word	0x0800e21f
 800e194:	0800e21f 	.word	0x0800e21f
 800e198:	0800e21f 	.word	0x0800e21f
 800e19c:	0800e21f 	.word	0x0800e21f
 800e1a0:	0800e21f 	.word	0x0800e21f
 800e1a4:	0800e21f 	.word	0x0800e21f
 800e1a8:	0800e1db 	.word	0x0800e1db
 800e1ac:	0800e205 	.word	0x0800e205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b03      	cmp	r3, #3
 800e1ba:	d107      	bne.n	800e1cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e1bc:	f107 030a 	add.w	r3, r7, #10
 800e1c0:	2202      	movs	r2, #2
 800e1c2:	4619      	mov	r1, r3
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f001 fced 	bl	800fba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1ca:	e032      	b.n	800e232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e1cc:	6839      	ldr	r1, [r7, #0]
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f001 fc77 	bl	800fac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1d4:	2303      	movs	r3, #3
 800e1d6:	75fb      	strb	r3, [r7, #23]
          break;
 800e1d8:	e02b      	b.n	800e232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b03      	cmp	r3, #3
 800e1e4:	d107      	bne.n	800e1f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e1e6:	f107 030d 	add.w	r3, r7, #13
 800e1ea:	2201      	movs	r2, #1
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f001 fcd8 	bl	800fba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1f4:	e01d      	b.n	800e232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e1f6:	6839      	ldr	r1, [r7, #0]
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f001 fc62 	bl	800fac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1fe:	2303      	movs	r3, #3
 800e200:	75fb      	strb	r3, [r7, #23]
          break;
 800e202:	e016      	b.n	800e232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20a:	b2db      	uxtb	r3, r3
 800e20c:	2b03      	cmp	r3, #3
 800e20e:	d00f      	beq.n	800e230 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f001 fc55 	bl	800fac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800e218:	2303      	movs	r3, #3
 800e21a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e21c:	e008      	b.n	800e230 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f001 fc4e 	bl	800fac2 <USBD_CtlError>
          ret = USBD_FAIL;
 800e226:	2303      	movs	r3, #3
 800e228:	75fb      	strb	r3, [r7, #23]
          break;
 800e22a:	e002      	b.n	800e232 <USBD_CDC_Setup+0x19e>
          break;
 800e22c:	bf00      	nop
 800e22e:	e008      	b.n	800e242 <USBD_CDC_Setup+0x1ae>
          break;
 800e230:	bf00      	nop
      }
      break;
 800e232:	e006      	b.n	800e242 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e234:	6839      	ldr	r1, [r7, #0]
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f001 fc43 	bl	800fac2 <USBD_CtlError>
      ret = USBD_FAIL;
 800e23c:	2303      	movs	r3, #3
 800e23e:	75fb      	strb	r3, [r7, #23]
      break;
 800e240:	bf00      	nop
  }

  return (uint8_t)ret;
 800e242:	7dfb      	ldrb	r3, [r7, #23]
}
 800e244:	4618      	mov	r0, r3
 800e246:	3718      	adds	r7, #24
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b084      	sub	sp, #16
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	460b      	mov	r3, r1
 800e256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e25e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	32b0      	adds	r2, #176	; 0xb0
 800e26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d101      	bne.n	800e276 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e272:	2303      	movs	r3, #3
 800e274:	e065      	b.n	800e342 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	32b0      	adds	r2, #176	; 0xb0
 800e280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e284:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e286:	78fb      	ldrb	r3, [r7, #3]
 800e288:	f003 020f 	and.w	r2, r3, #15
 800e28c:	6879      	ldr	r1, [r7, #4]
 800e28e:	4613      	mov	r3, r2
 800e290:	009b      	lsls	r3, r3, #2
 800e292:	4413      	add	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	440b      	add	r3, r1
 800e298:	3318      	adds	r3, #24
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d02f      	beq.n	800e300 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e2a0:	78fb      	ldrb	r3, [r7, #3]
 800e2a2:	f003 020f 	and.w	r2, r3, #15
 800e2a6:	6879      	ldr	r1, [r7, #4]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	440b      	add	r3, r1
 800e2b2:	3318      	adds	r3, #24
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	f003 010f 	and.w	r1, r3, #15
 800e2bc:	68f8      	ldr	r0, [r7, #12]
 800e2be:	460b      	mov	r3, r1
 800e2c0:	00db      	lsls	r3, r3, #3
 800e2c2:	440b      	add	r3, r1
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	4403      	add	r3, r0
 800e2c8:	3348      	adds	r3, #72	; 0x48
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2d0:	fb01 f303 	mul.w	r3, r1, r3
 800e2d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d112      	bne.n	800e300 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e2da:	78fb      	ldrb	r3, [r7, #3]
 800e2dc:	f003 020f 	and.w	r2, r3, #15
 800e2e0:	6879      	ldr	r1, [r7, #4]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	009b      	lsls	r3, r3, #2
 800e2e6:	4413      	add	r3, r2
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	440b      	add	r3, r1
 800e2ec:	3318      	adds	r3, #24
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e2f2:	78f9      	ldrb	r1, [r7, #3]
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f005 fdd6 	bl	8013eaa <USBD_LL_Transmit>
 800e2fe:	e01f      	b.n	800e340 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2200      	movs	r2, #0
 800e304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e30e:	687a      	ldr	r2, [r7, #4]
 800e310:	33b0      	adds	r3, #176	; 0xb0
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	4413      	add	r3, r2
 800e316:	685b      	ldr	r3, [r3, #4]
 800e318:	691b      	ldr	r3, [r3, #16]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d010      	beq.n	800e340 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	33b0      	adds	r3, #176	; 0xb0
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	4413      	add	r3, r2
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	68ba      	ldr	r2, [r7, #8]
 800e332:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e336:	68ba      	ldr	r2, [r7, #8]
 800e338:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e33c:	78fa      	ldrb	r2, [r7, #3]
 800e33e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e340:	2300      	movs	r3, #0
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	460b      	mov	r3, r1
 800e354:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	32b0      	adds	r2, #176	; 0xb0
 800e360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e364:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	32b0      	adds	r2, #176	; 0xb0
 800e370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e378:	2303      	movs	r3, #3
 800e37a:	e01a      	b.n	800e3b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e37c:	78fb      	ldrb	r3, [r7, #3]
 800e37e:	4619      	mov	r1, r3
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f005 fdd4 	bl	8013f2e <USBD_LL_GetRxDataSize>
 800e386:	4602      	mov	r2, r0
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	33b0      	adds	r3, #176	; 0xb0
 800e398:	009b      	lsls	r3, r3, #2
 800e39a:	4413      	add	r3, r2
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	68fa      	ldr	r2, [r7, #12]
 800e3a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e3b0:	2300      	movs	r3, #0
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}

0800e3ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e3ba:	b580      	push	{r7, lr}
 800e3bc:	b084      	sub	sp, #16
 800e3be:	af00      	add	r7, sp, #0
 800e3c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	32b0      	adds	r2, #176	; 0xb0
 800e3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d101      	bne.n	800e3dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	e025      	b.n	800e428 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	33b0      	adds	r3, #176	; 0xb0
 800e3e6:	009b      	lsls	r3, r3, #2
 800e3e8:	4413      	add	r3, r2
 800e3ea:	685b      	ldr	r3, [r3, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d01a      	beq.n	800e426 <USBD_CDC_EP0_RxReady+0x6c>
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e3f6:	2bff      	cmp	r3, #255	; 0xff
 800e3f8:	d015      	beq.n	800e426 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	33b0      	adds	r3, #176	; 0xb0
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	689b      	ldr	r3, [r3, #8]
 800e40c:	68fa      	ldr	r2, [r7, #12]
 800e40e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e412:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e414:	68fa      	ldr	r2, [r7, #12]
 800e416:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e41a:	b292      	uxth	r2, r2
 800e41c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	22ff      	movs	r2, #255	; 0xff
 800e422:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e426:	2300      	movs	r3, #0
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3710      	adds	r7, #16
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e438:	2182      	movs	r1, #130	; 0x82
 800e43a:	4818      	ldr	r0, [pc, #96]	; (800e49c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e43c:	f000 fd09 	bl	800ee52 <USBD_GetEpDesc>
 800e440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e442:	2101      	movs	r1, #1
 800e444:	4815      	ldr	r0, [pc, #84]	; (800e49c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e446:	f000 fd04 	bl	800ee52 <USBD_GetEpDesc>
 800e44a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e44c:	2181      	movs	r1, #129	; 0x81
 800e44e:	4813      	ldr	r0, [pc, #76]	; (800e49c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e450:	f000 fcff 	bl	800ee52 <USBD_GetEpDesc>
 800e454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e456:	697b      	ldr	r3, [r7, #20]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e45c:	697b      	ldr	r3, [r7, #20]
 800e45e:	2210      	movs	r2, #16
 800e460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d006      	beq.n	800e476 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e468:	693b      	ldr	r3, [r7, #16]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e470:	711a      	strb	r2, [r3, #4]
 800e472:	2200      	movs	r2, #0
 800e474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d006      	beq.n	800e48a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	2200      	movs	r2, #0
 800e480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e484:	711a      	strb	r2, [r3, #4]
 800e486:	2200      	movs	r2, #0
 800e488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2243      	movs	r2, #67	; 0x43
 800e48e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e490:	4b02      	ldr	r3, [pc, #8]	; (800e49c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e492:	4618      	mov	r0, r3
 800e494:	3718      	adds	r7, #24
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	2000030c 	.word	0x2000030c

0800e4a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e4a0:	b580      	push	{r7, lr}
 800e4a2:	b086      	sub	sp, #24
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4a8:	2182      	movs	r1, #130	; 0x82
 800e4aa:	4818      	ldr	r0, [pc, #96]	; (800e50c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4ac:	f000 fcd1 	bl	800ee52 <USBD_GetEpDesc>
 800e4b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	4815      	ldr	r0, [pc, #84]	; (800e50c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4b6:	f000 fccc 	bl	800ee52 <USBD_GetEpDesc>
 800e4ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4bc:	2181      	movs	r1, #129	; 0x81
 800e4be:	4813      	ldr	r0, [pc, #76]	; (800e50c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e4c0:	f000 fcc7 	bl	800ee52 <USBD_GetEpDesc>
 800e4c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d002      	beq.n	800e4d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	2210      	movs	r2, #16
 800e4d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4d2:	693b      	ldr	r3, [r7, #16]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d006      	beq.n	800e4e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4d8:	693b      	ldr	r3, [r7, #16]
 800e4da:	2200      	movs	r2, #0
 800e4dc:	711a      	strb	r2, [r3, #4]
 800e4de:	2200      	movs	r2, #0
 800e4e0:	f042 0202 	orr.w	r2, r2, #2
 800e4e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d006      	beq.n	800e4fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	711a      	strb	r2, [r3, #4]
 800e4f2:	2200      	movs	r2, #0
 800e4f4:	f042 0202 	orr.w	r2, r2, #2
 800e4f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	2243      	movs	r2, #67	; 0x43
 800e4fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e500:	4b02      	ldr	r3, [pc, #8]	; (800e50c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e502:	4618      	mov	r0, r3
 800e504:	3718      	adds	r7, #24
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}
 800e50a:	bf00      	nop
 800e50c:	2000030c 	.word	0x2000030c

0800e510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e518:	2182      	movs	r1, #130	; 0x82
 800e51a:	4818      	ldr	r0, [pc, #96]	; (800e57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e51c:	f000 fc99 	bl	800ee52 <USBD_GetEpDesc>
 800e520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e522:	2101      	movs	r1, #1
 800e524:	4815      	ldr	r0, [pc, #84]	; (800e57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e526:	f000 fc94 	bl	800ee52 <USBD_GetEpDesc>
 800e52a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e52c:	2181      	movs	r1, #129	; 0x81
 800e52e:	4813      	ldr	r0, [pc, #76]	; (800e57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e530:	f000 fc8f 	bl	800ee52 <USBD_GetEpDesc>
 800e534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d002      	beq.n	800e542 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	2210      	movs	r2, #16
 800e540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e542:	693b      	ldr	r3, [r7, #16]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d006      	beq.n	800e556 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e550:	711a      	strb	r2, [r3, #4]
 800e552:	2200      	movs	r2, #0
 800e554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d006      	beq.n	800e56a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2200      	movs	r2, #0
 800e560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e564:	711a      	strb	r2, [r3, #4]
 800e566:	2200      	movs	r2, #0
 800e568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2243      	movs	r2, #67	; 0x43
 800e56e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e570:	4b02      	ldr	r3, [pc, #8]	; (800e57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e572:	4618      	mov	r0, r3
 800e574:	3718      	adds	r7, #24
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	2000030c 	.word	0x2000030c

0800e580 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	220a      	movs	r2, #10
 800e58c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e58e:	4b03      	ldr	r3, [pc, #12]	; (800e59c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e590:	4618      	mov	r0, r3
 800e592:	370c      	adds	r7, #12
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	200002c8 	.word	0x200002c8

0800e5a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e5a0:	b480      	push	{r7}
 800e5a2:	b083      	sub	sp, #12
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e5aa:	683b      	ldr	r3, [r7, #0]
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	d101      	bne.n	800e5b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e5b0:	2303      	movs	r3, #3
 800e5b2:	e009      	b.n	800e5c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	33b0      	adds	r3, #176	; 0xb0
 800e5be:	009b      	lsls	r3, r3, #2
 800e5c0:	4413      	add	r3, r2
 800e5c2:	683a      	ldr	r2, [r7, #0]
 800e5c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e5c6:	2300      	movs	r3, #0
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr

0800e5d4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e5d4:	b480      	push	{r7}
 800e5d6:	b087      	sub	sp, #28
 800e5d8:	af00      	add	r7, sp, #0
 800e5da:	60f8      	str	r0, [r7, #12]
 800e5dc:	60b9      	str	r1, [r7, #8]
 800e5de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	32b0      	adds	r2, #176	; 0xb0
 800e5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ee:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e5f6:	2303      	movs	r3, #3
 800e5f8:	e008      	b.n	800e60c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	68ba      	ldr	r2, [r7, #8]
 800e5fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	687a      	ldr	r2, [r7, #4]
 800e606:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	371c      	adds	r7, #28
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	32b0      	adds	r2, #176	; 0xb0
 800e62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e630:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d101      	bne.n	800e63c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e638:	2303      	movs	r3, #3
 800e63a:	e004      	b.n	800e646 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e644:	2300      	movs	r3, #0
}
 800e646:	4618      	mov	r0, r3
 800e648:	3714      	adds	r7, #20
 800e64a:	46bd      	mov	sp, r7
 800e64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e650:	4770      	bx	lr
	...

0800e654 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b084      	sub	sp, #16
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	32b0      	adds	r2, #176	; 0xb0
 800e666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e66a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	32b0      	adds	r2, #176	; 0xb0
 800e676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d101      	bne.n	800e682 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e67e:	2303      	movs	r3, #3
 800e680:	e018      	b.n	800e6b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	7c1b      	ldrb	r3, [r3, #16]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d10a      	bne.n	800e6a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e68a:	4b0c      	ldr	r3, [pc, #48]	; (800e6bc <USBD_CDC_ReceivePacket+0x68>)
 800e68c:	7819      	ldrb	r1, [r3, #0]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e694:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e698:	6878      	ldr	r0, [r7, #4]
 800e69a:	f005 fc27 	bl	8013eec <USBD_LL_PrepareReceive>
 800e69e:	e008      	b.n	800e6b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6a0:	4b06      	ldr	r3, [pc, #24]	; (800e6bc <USBD_CDC_ReceivePacket+0x68>)
 800e6a2:	7819      	ldrb	r1, [r3, #0]
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6aa:	2340      	movs	r3, #64	; 0x40
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f005 fc1d 	bl	8013eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e6b2:	2300      	movs	r3, #0
}
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	3710      	adds	r7, #16
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	bd80      	pop	{r7, pc}
 800e6bc:	20000350 	.word	0x20000350

0800e6c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d101      	bne.n	800e6d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e6d4:	2303      	movs	r3, #3
 800e6d6:	e01f      	b.n	800e718 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	2200      	movs	r2, #0
 800e6dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d003      	beq.n	800e6fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	79fa      	ldrb	r2, [r7, #7]
 800e70a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f005 fa97 	bl	8013c40 <USBD_LL_Init>
 800e712:	4603      	mov	r3, r0
 800e714:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e716:	7dfb      	ldrb	r3, [r7, #23]
}
 800e718:	4618      	mov	r0, r3
 800e71a:	3718      	adds	r7, #24
 800e71c:	46bd      	mov	sp, r7
 800e71e:	bd80      	pop	{r7, pc}

0800e720 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b084      	sub	sp, #16
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
 800e728:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d101      	bne.n	800e738 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e734:	2303      	movs	r3, #3
 800e736:	e025      	b.n	800e784 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	683a      	ldr	r2, [r7, #0]
 800e73c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	32ae      	adds	r2, #174	; 0xae
 800e74a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e74e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00f      	beq.n	800e774 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	32ae      	adds	r2, #174	; 0xae
 800e75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e764:	f107 020e 	add.w	r2, r7, #14
 800e768:	4610      	mov	r0, r2
 800e76a:	4798      	blx	r3
 800e76c:	4602      	mov	r2, r0
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e77a:	1c5a      	adds	r2, r3, #1
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e782:	2300      	movs	r3, #0
}
 800e784:	4618      	mov	r0, r3
 800e786:	3710      	adds	r7, #16
 800e788:	46bd      	mov	sp, r7
 800e78a:	bd80      	pop	{r7, pc}

0800e78c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f005 fa9f 	bl	8013cd8 <USBD_LL_Start>
 800e79a:	4603      	mov	r3, r0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3708      	adds	r7, #8
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b083      	sub	sp, #12
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	370c      	adds	r7, #12
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b8:	4770      	bx	lr

0800e7ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7ba:	b580      	push	{r7, lr}
 800e7bc:	b084      	sub	sp, #16
 800e7be:	af00      	add	r7, sp, #0
 800e7c0:	6078      	str	r0, [r7, #4]
 800e7c2:	460b      	mov	r3, r1
 800e7c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d009      	beq.n	800e7e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	78fa      	ldrb	r2, [r7, #3]
 800e7de:	4611      	mov	r1, r2
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	4798      	blx	r3
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	460b      	mov	r3, r1
 800e7fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7fe:	2300      	movs	r3, #0
 800e800:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	78fa      	ldrb	r2, [r7, #3]
 800e80c:	4611      	mov	r1, r2
 800e80e:	6878      	ldr	r0, [r7, #4]
 800e810:	4798      	blx	r3
 800e812:	4603      	mov	r3, r0
 800e814:	2b00      	cmp	r3, #0
 800e816:	d001      	beq.n	800e81c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e818:	2303      	movs	r3, #3
 800e81a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3710      	adds	r7, #16
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b084      	sub	sp, #16
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	4618      	mov	r0, r3
 800e83a:	f001 f908 	bl	800fa4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e84c:	461a      	mov	r2, r3
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e85a:	f003 031f 	and.w	r3, r3, #31
 800e85e:	2b02      	cmp	r3, #2
 800e860:	d01a      	beq.n	800e898 <USBD_LL_SetupStage+0x72>
 800e862:	2b02      	cmp	r3, #2
 800e864:	d822      	bhi.n	800e8ac <USBD_LL_SetupStage+0x86>
 800e866:	2b00      	cmp	r3, #0
 800e868:	d002      	beq.n	800e870 <USBD_LL_SetupStage+0x4a>
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	d00a      	beq.n	800e884 <USBD_LL_SetupStage+0x5e>
 800e86e:	e01d      	b.n	800e8ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e876:	4619      	mov	r1, r3
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f000 fb5f 	bl	800ef3c <USBD_StdDevReq>
 800e87e:	4603      	mov	r3, r0
 800e880:	73fb      	strb	r3, [r7, #15]
      break;
 800e882:	e020      	b.n	800e8c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e88a:	4619      	mov	r1, r3
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 fbc7 	bl	800f020 <USBD_StdItfReq>
 800e892:	4603      	mov	r3, r0
 800e894:	73fb      	strb	r3, [r7, #15]
      break;
 800e896:	e016      	b.n	800e8c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 fc29 	bl	800f0f8 <USBD_StdEPReq>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e8aa:	e00c      	b.n	800e8c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e8b6:	b2db      	uxtb	r3, r3
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	6878      	ldr	r0, [r7, #4]
 800e8bc:	f005 fa6c 	bl	8013d98 <USBD_LL_StallEP>
 800e8c0:	4603      	mov	r3, r0
 800e8c2:	73fb      	strb	r3, [r7, #15]
      break;
 800e8c4:	bf00      	nop
  }

  return ret;
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	460b      	mov	r3, r1
 800e8da:	607a      	str	r2, [r7, #4]
 800e8dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e8e2:	7afb      	ldrb	r3, [r7, #11]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d16e      	bne.n	800e9c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e8ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e8f6:	2b03      	cmp	r3, #3
 800e8f8:	f040 8098 	bne.w	800ea2c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	689a      	ldr	r2, [r3, #8]
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	68db      	ldr	r3, [r3, #12]
 800e904:	429a      	cmp	r2, r3
 800e906:	d913      	bls.n	800e930 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	689a      	ldr	r2, [r3, #8]
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	1ad2      	subs	r2, r2, r3
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	68da      	ldr	r2, [r3, #12]
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	689b      	ldr	r3, [r3, #8]
 800e91e:	4293      	cmp	r3, r2
 800e920:	bf28      	it	cs
 800e922:	4613      	movcs	r3, r2
 800e924:	461a      	mov	r2, r3
 800e926:	6879      	ldr	r1, [r7, #4]
 800e928:	68f8      	ldr	r0, [r7, #12]
 800e92a:	f001 f984 	bl	800fc36 <USBD_CtlContinueRx>
 800e92e:	e07d      	b.n	800ea2c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e936:	f003 031f 	and.w	r3, r3, #31
 800e93a:	2b02      	cmp	r3, #2
 800e93c:	d014      	beq.n	800e968 <USBD_LL_DataOutStage+0x98>
 800e93e:	2b02      	cmp	r3, #2
 800e940:	d81d      	bhi.n	800e97e <USBD_LL_DataOutStage+0xae>
 800e942:	2b00      	cmp	r3, #0
 800e944:	d002      	beq.n	800e94c <USBD_LL_DataOutStage+0x7c>
 800e946:	2b01      	cmp	r3, #1
 800e948:	d003      	beq.n	800e952 <USBD_LL_DataOutStage+0x82>
 800e94a:	e018      	b.n	800e97e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e94c:	2300      	movs	r3, #0
 800e94e:	75bb      	strb	r3, [r7, #22]
            break;
 800e950:	e018      	b.n	800e984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e958:	b2db      	uxtb	r3, r3
 800e95a:	4619      	mov	r1, r3
 800e95c:	68f8      	ldr	r0, [r7, #12]
 800e95e:	f000 fa5e 	bl	800ee1e <USBD_CoreFindIF>
 800e962:	4603      	mov	r3, r0
 800e964:	75bb      	strb	r3, [r7, #22]
            break;
 800e966:	e00d      	b.n	800e984 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e96e:	b2db      	uxtb	r3, r3
 800e970:	4619      	mov	r1, r3
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f000 fa60 	bl	800ee38 <USBD_CoreFindEP>
 800e978:	4603      	mov	r3, r0
 800e97a:	75bb      	strb	r3, [r7, #22]
            break;
 800e97c:	e002      	b.n	800e984 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e97e:	2300      	movs	r3, #0
 800e980:	75bb      	strb	r3, [r7, #22]
            break;
 800e982:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e984:	7dbb      	ldrb	r3, [r7, #22]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d119      	bne.n	800e9be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b03      	cmp	r3, #3
 800e994:	d113      	bne.n	800e9be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e996:	7dba      	ldrb	r2, [r7, #22]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	32ae      	adds	r2, #174	; 0xae
 800e99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d00b      	beq.n	800e9be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e9a6:	7dba      	ldrb	r2, [r7, #22]
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e9ae:	7dba      	ldrb	r2, [r7, #22]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	32ae      	adds	r2, #174	; 0xae
 800e9b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	68f8      	ldr	r0, [r7, #12]
 800e9bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e9be:	68f8      	ldr	r0, [r7, #12]
 800e9c0:	f001 f94a 	bl	800fc58 <USBD_CtlSendStatus>
 800e9c4:	e032      	b.n	800ea2c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800e9c6:	7afb      	ldrb	r3, [r7, #11]
 800e9c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e9cc:	b2db      	uxtb	r3, r3
 800e9ce:	4619      	mov	r1, r3
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 fa31 	bl	800ee38 <USBD_CoreFindEP>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e9da:	7dbb      	ldrb	r3, [r7, #22]
 800e9dc:	2bff      	cmp	r3, #255	; 0xff
 800e9de:	d025      	beq.n	800ea2c <USBD_LL_DataOutStage+0x15c>
 800e9e0:	7dbb      	ldrb	r3, [r7, #22]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d122      	bne.n	800ea2c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9ec:	b2db      	uxtb	r3, r3
 800e9ee:	2b03      	cmp	r3, #3
 800e9f0:	d117      	bne.n	800ea22 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800e9f2:	7dba      	ldrb	r2, [r7, #22]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	32ae      	adds	r2, #174	; 0xae
 800e9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9fc:	699b      	ldr	r3, [r3, #24]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00f      	beq.n	800ea22 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ea02:	7dba      	ldrb	r2, [r7, #22]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ea0a:	7dba      	ldrb	r2, [r7, #22]
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	32ae      	adds	r2, #174	; 0xae
 800ea10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	7afa      	ldrb	r2, [r7, #11]
 800ea18:	4611      	mov	r1, r2
 800ea1a:	68f8      	ldr	r0, [r7, #12]
 800ea1c:	4798      	blx	r3
 800ea1e:	4603      	mov	r3, r0
 800ea20:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ea22:	7dfb      	ldrb	r3, [r7, #23]
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ea28:	7dfb      	ldrb	r3, [r7, #23]
 800ea2a:	e000      	b.n	800ea2e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ea2c:	2300      	movs	r3, #0
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3718      	adds	r7, #24
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b086      	sub	sp, #24
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	60f8      	str	r0, [r7, #12]
 800ea3e:	460b      	mov	r3, r1
 800ea40:	607a      	str	r2, [r7, #4]
 800ea42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ea44:	7afb      	ldrb	r3, [r7, #11]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d16f      	bne.n	800eb2a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3314      	adds	r3, #20
 800ea4e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d15a      	bne.n	800eb10 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	689a      	ldr	r2, [r3, #8]
 800ea5e:	693b      	ldr	r3, [r7, #16]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d914      	bls.n	800ea90 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	689a      	ldr	r2, [r3, #8]
 800ea6a:	693b      	ldr	r3, [r7, #16]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	1ad2      	subs	r2, r2, r3
 800ea70:	693b      	ldr	r3, [r7, #16]
 800ea72:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	689b      	ldr	r3, [r3, #8]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	6879      	ldr	r1, [r7, #4]
 800ea7c:	68f8      	ldr	r0, [r7, #12]
 800ea7e:	f001 f8ac 	bl	800fbda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea82:	2300      	movs	r3, #0
 800ea84:	2200      	movs	r2, #0
 800ea86:	2100      	movs	r1, #0
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f005 fa2f 	bl	8013eec <USBD_LL_PrepareReceive>
 800ea8e:	e03f      	b.n	800eb10 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ea90:	693b      	ldr	r3, [r7, #16]
 800ea92:	68da      	ldr	r2, [r3, #12]
 800ea94:	693b      	ldr	r3, [r7, #16]
 800ea96:	689b      	ldr	r3, [r3, #8]
 800ea98:	429a      	cmp	r2, r3
 800ea9a:	d11c      	bne.n	800ead6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ea9c:	693b      	ldr	r3, [r7, #16]
 800ea9e:	685a      	ldr	r2, [r3, #4]
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d316      	bcc.n	800ead6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eaa8:	693b      	ldr	r3, [r7, #16]
 800eaaa:	685a      	ldr	r2, [r3, #4]
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d20f      	bcs.n	800ead6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eab6:	2200      	movs	r2, #0
 800eab8:	2100      	movs	r1, #0
 800eaba:	68f8      	ldr	r0, [r7, #12]
 800eabc:	f001 f88d 	bl	800fbda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	2200      	movs	r2, #0
 800eac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eac8:	2300      	movs	r3, #0
 800eaca:	2200      	movs	r2, #0
 800eacc:	2100      	movs	r1, #0
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f005 fa0c 	bl	8013eec <USBD_LL_PrepareReceive>
 800ead4:	e01c      	b.n	800eb10 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eadc:	b2db      	uxtb	r3, r3
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d10f      	bne.n	800eb02 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d009      	beq.n	800eb02 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	68f8      	ldr	r0, [r7, #12]
 800eb00:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb02:	2180      	movs	r1, #128	; 0x80
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f005 f947 	bl	8013d98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f001 f8b7 	bl	800fc7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d03a      	beq.n	800eb90 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eb1a:	68f8      	ldr	r0, [r7, #12]
 800eb1c:	f7ff fe42 	bl	800e7a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	2200      	movs	r2, #0
 800eb24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eb28:	e032      	b.n	800eb90 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800eb2a:	7afb      	ldrb	r3, [r7, #11]
 800eb2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb30:	b2db      	uxtb	r3, r3
 800eb32:	4619      	mov	r1, r3
 800eb34:	68f8      	ldr	r0, [r7, #12]
 800eb36:	f000 f97f 	bl	800ee38 <USBD_CoreFindEP>
 800eb3a:	4603      	mov	r3, r0
 800eb3c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb3e:	7dfb      	ldrb	r3, [r7, #23]
 800eb40:	2bff      	cmp	r3, #255	; 0xff
 800eb42:	d025      	beq.n	800eb90 <USBD_LL_DataInStage+0x15a>
 800eb44:	7dfb      	ldrb	r3, [r7, #23]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d122      	bne.n	800eb90 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b03      	cmp	r3, #3
 800eb54:	d11c      	bne.n	800eb90 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800eb56:	7dfa      	ldrb	r2, [r7, #23]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	32ae      	adds	r2, #174	; 0xae
 800eb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb60:	695b      	ldr	r3, [r3, #20]
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d014      	beq.n	800eb90 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800eb66:	7dfa      	ldrb	r2, [r7, #23]
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800eb6e:	7dfa      	ldrb	r2, [r7, #23]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	32ae      	adds	r2, #174	; 0xae
 800eb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800eb78:	695b      	ldr	r3, [r3, #20]
 800eb7a:	7afa      	ldrb	r2, [r7, #11]
 800eb7c:	4611      	mov	r1, r2
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	4798      	blx	r3
 800eb82:	4603      	mov	r3, r0
 800eb84:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800eb86:	7dbb      	ldrb	r3, [r7, #22]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800eb8c:	7dbb      	ldrb	r3, [r7, #22]
 800eb8e:	e000      	b.n	800eb92 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800eb90:	2300      	movs	r3, #0
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	3718      	adds	r7, #24
 800eb96:	46bd      	mov	sp, r7
 800eb98:	bd80      	pop	{r7, pc}

0800eb9a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800eb9a:	b580      	push	{r7, lr}
 800eb9c:	b084      	sub	sp, #16
 800eb9e:	af00      	add	r7, sp, #0
 800eba0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800eba2:	2300      	movs	r3, #0
 800eba4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2201      	movs	r2, #1
 800ebaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d014      	beq.n	800ec00 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebdc:	685b      	ldr	r3, [r3, #4]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d00e      	beq.n	800ec00 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebe8:	685b      	ldr	r3, [r3, #4]
 800ebea:	687a      	ldr	r2, [r7, #4]
 800ebec:	6852      	ldr	r2, [r2, #4]
 800ebee:	b2d2      	uxtb	r2, r2
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	4798      	blx	r3
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ebfc:	2303      	movs	r3, #3
 800ebfe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec00:	2340      	movs	r3, #64	; 0x40
 800ec02:	2200      	movs	r2, #0
 800ec04:	2100      	movs	r1, #0
 800ec06:	6878      	ldr	r0, [r7, #4]
 800ec08:	f005 f881 	bl	8013d0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2240      	movs	r2, #64	; 0x40
 800ec18:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec1c:	2340      	movs	r3, #64	; 0x40
 800ec1e:	2200      	movs	r2, #0
 800ec20:	2180      	movs	r1, #128	; 0x80
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f005 f873 	bl	8013d0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	2240      	movs	r2, #64	; 0x40
 800ec32:	621a      	str	r2, [r3, #32]

  return ret;
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	b083      	sub	sp, #12
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	460b      	mov	r3, r1
 800ec48:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	78fa      	ldrb	r2, [r7, #3]
 800ec4e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ec50:	2300      	movs	r3, #0
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec6c:	b2da      	uxtb	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2204      	movs	r2, #4
 800ec78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	370c      	adds	r7, #12
 800ec82:	46bd      	mov	sp, r7
 800ec84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec88:	4770      	bx	lr

0800ec8a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b083      	sub	sp, #12
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	2b04      	cmp	r3, #4
 800ec9c:	d106      	bne.n	800ecac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ecac:	2300      	movs	r3, #0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	370c      	adds	r7, #12
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ecba:	b580      	push	{r7, lr}
 800ecbc:	b082      	sub	sp, #8
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b03      	cmp	r3, #3
 800eccc:	d110      	bne.n	800ecf0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d00b      	beq.n	800ecf0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d005      	beq.n	800ecf0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ecea:	69db      	ldr	r3, [r3, #28]
 800ecec:	6878      	ldr	r0, [r7, #4]
 800ecee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b082      	sub	sp, #8
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	6078      	str	r0, [r7, #4]
 800ed02:	460b      	mov	r3, r1
 800ed04:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	32ae      	adds	r2, #174	; 0xae
 800ed10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d101      	bne.n	800ed1c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ed18:	2303      	movs	r3, #3
 800ed1a:	e01c      	b.n	800ed56 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed22:	b2db      	uxtb	r3, r3
 800ed24:	2b03      	cmp	r3, #3
 800ed26:	d115      	bne.n	800ed54 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	32ae      	adds	r2, #174	; 0xae
 800ed32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed36:	6a1b      	ldr	r3, [r3, #32]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00b      	beq.n	800ed54 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	32ae      	adds	r2, #174	; 0xae
 800ed46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed4a:	6a1b      	ldr	r3, [r3, #32]
 800ed4c:	78fa      	ldrb	r2, [r7, #3]
 800ed4e:	4611      	mov	r1, r2
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ed54:	2300      	movs	r3, #0
}
 800ed56:	4618      	mov	r0, r3
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b082      	sub	sp, #8
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
 800ed66:	460b      	mov	r3, r1
 800ed68:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	32ae      	adds	r2, #174	; 0xae
 800ed74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d101      	bne.n	800ed80 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ed7c:	2303      	movs	r3, #3
 800ed7e:	e01c      	b.n	800edba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed86:	b2db      	uxtb	r3, r3
 800ed88:	2b03      	cmp	r3, #3
 800ed8a:	d115      	bne.n	800edb8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	32ae      	adds	r2, #174	; 0xae
 800ed96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d00b      	beq.n	800edb8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	32ae      	adds	r2, #174	; 0xae
 800edaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edb0:	78fa      	ldrb	r2, [r7, #3]
 800edb2:	4611      	mov	r1, r2
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800edb8:	2300      	movs	r3, #0
}
 800edba:	4618      	mov	r0, r3
 800edbc:	3708      	adds	r7, #8
 800edbe:	46bd      	mov	sp, r7
 800edc0:	bd80      	pop	{r7, pc}

0800edc2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800edc2:	b480      	push	{r7}
 800edc4:	b083      	sub	sp, #12
 800edc6:	af00      	add	r7, sp, #0
 800edc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800edca:	2300      	movs	r3, #0
}
 800edcc:	4618      	mov	r0, r3
 800edce:	370c      	adds	r7, #12
 800edd0:	46bd      	mov	sp, r7
 800edd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd6:	4770      	bx	lr

0800edd8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b084      	sub	sp, #16
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ede0:	2300      	movs	r3, #0
 800ede2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d00e      	beq.n	800ee14 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	6852      	ldr	r2, [r2, #4]
 800ee02:	b2d2      	uxtb	r2, r2
 800ee04:	4611      	mov	r1, r2
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	4798      	blx	r3
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ee10:	2303      	movs	r3, #3
 800ee12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ee1e:	b480      	push	{r7}
 800ee20:	b083      	sub	sp, #12
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	460b      	mov	r3, r1
 800ee28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ee2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ee38:	b480      	push	{r7}
 800ee3a:	b083      	sub	sp, #12
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	460b      	mov	r3, r1
 800ee42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ee44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ee46:	4618      	mov	r0, r3
 800ee48:	370c      	adds	r7, #12
 800ee4a:	46bd      	mov	sp, r7
 800ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee50:	4770      	bx	lr

0800ee52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ee52:	b580      	push	{r7, lr}
 800ee54:	b086      	sub	sp, #24
 800ee56:	af00      	add	r7, sp, #0
 800ee58:	6078      	str	r0, [r7, #4]
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ee66:	2300      	movs	r3, #0
 800ee68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	885b      	ldrh	r3, [r3, #2]
 800ee6e:	b29a      	uxth	r2, r3
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	781b      	ldrb	r3, [r3, #0]
 800ee74:	b29b      	uxth	r3, r3
 800ee76:	429a      	cmp	r2, r3
 800ee78:	d920      	bls.n	800eebc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	b29b      	uxth	r3, r3
 800ee80:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ee82:	e013      	b.n	800eeac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ee84:	f107 030a 	add.w	r3, r7, #10
 800ee88:	4619      	mov	r1, r3
 800ee8a:	6978      	ldr	r0, [r7, #20]
 800ee8c:	f000 f81b 	bl	800eec6 <USBD_GetNextDesc>
 800ee90:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	785b      	ldrb	r3, [r3, #1]
 800ee96:	2b05      	cmp	r3, #5
 800ee98:	d108      	bne.n	800eeac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ee9e:	693b      	ldr	r3, [r7, #16]
 800eea0:	789b      	ldrb	r3, [r3, #2]
 800eea2:	78fa      	ldrb	r2, [r7, #3]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d008      	beq.n	800eeba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	885b      	ldrh	r3, [r3, #2]
 800eeb0:	b29a      	uxth	r2, r3
 800eeb2:	897b      	ldrh	r3, [r7, #10]
 800eeb4:	429a      	cmp	r2, r3
 800eeb6:	d8e5      	bhi.n	800ee84 <USBD_GetEpDesc+0x32>
 800eeb8:	e000      	b.n	800eebc <USBD_GetEpDesc+0x6a>
          break;
 800eeba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800eebc:	693b      	ldr	r3, [r7, #16]
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3718      	adds	r7, #24
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}

0800eec6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800eec6:	b480      	push	{r7}
 800eec8:	b085      	sub	sp, #20
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
 800eece:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800eed4:	683b      	ldr	r3, [r7, #0]
 800eed6:	881a      	ldrh	r2, [r3, #0]
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	781b      	ldrb	r3, [r3, #0]
 800eedc:	b29b      	uxth	r3, r3
 800eede:	4413      	add	r3, r2
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	4413      	add	r3, r2
 800eef0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800eef2:	68fb      	ldr	r3, [r7, #12]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef00:	b480      	push	{r7}
 800ef02:	b087      	sub	sp, #28
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	781b      	ldrb	r3, [r3, #0]
 800ef10:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	3301      	adds	r3, #1
 800ef16:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef18:	697b      	ldr	r3, [r7, #20]
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef1e:	8a3b      	ldrh	r3, [r7, #16]
 800ef20:	021b      	lsls	r3, r3, #8
 800ef22:	b21a      	sxth	r2, r3
 800ef24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef28:	4313      	orrs	r3, r2
 800ef2a:	b21b      	sxth	r3, r3
 800ef2c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef2e:	89fb      	ldrh	r3, [r7, #14]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	371c      	adds	r7, #28
 800ef34:	46bd      	mov	sp, r7
 800ef36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef3a:	4770      	bx	lr

0800ef3c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b084      	sub	sp, #16
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef46:	2300      	movs	r3, #0
 800ef48:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ef52:	2b40      	cmp	r3, #64	; 0x40
 800ef54:	d005      	beq.n	800ef62 <USBD_StdDevReq+0x26>
 800ef56:	2b40      	cmp	r3, #64	; 0x40
 800ef58:	d857      	bhi.n	800f00a <USBD_StdDevReq+0xce>
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d00f      	beq.n	800ef7e <USBD_StdDevReq+0x42>
 800ef5e:	2b20      	cmp	r3, #32
 800ef60:	d153      	bne.n	800f00a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	32ae      	adds	r2, #174	; 0xae
 800ef6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef70:	689b      	ldr	r3, [r3, #8]
 800ef72:	6839      	ldr	r1, [r7, #0]
 800ef74:	6878      	ldr	r0, [r7, #4]
 800ef76:	4798      	blx	r3
 800ef78:	4603      	mov	r3, r0
 800ef7a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef7c:	e04a      	b.n	800f014 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	785b      	ldrb	r3, [r3, #1]
 800ef82:	2b09      	cmp	r3, #9
 800ef84:	d83b      	bhi.n	800effe <USBD_StdDevReq+0xc2>
 800ef86:	a201      	add	r2, pc, #4	; (adr r2, 800ef8c <USBD_StdDevReq+0x50>)
 800ef88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8c:	0800efe1 	.word	0x0800efe1
 800ef90:	0800eff5 	.word	0x0800eff5
 800ef94:	0800efff 	.word	0x0800efff
 800ef98:	0800efeb 	.word	0x0800efeb
 800ef9c:	0800efff 	.word	0x0800efff
 800efa0:	0800efbf 	.word	0x0800efbf
 800efa4:	0800efb5 	.word	0x0800efb5
 800efa8:	0800efff 	.word	0x0800efff
 800efac:	0800efd7 	.word	0x0800efd7
 800efb0:	0800efc9 	.word	0x0800efc9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800efb4:	6839      	ldr	r1, [r7, #0]
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f000 fa3c 	bl	800f434 <USBD_GetDescriptor>
          break;
 800efbc:	e024      	b.n	800f008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800efbe:	6839      	ldr	r1, [r7, #0]
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f000 fba1 	bl	800f708 <USBD_SetAddress>
          break;
 800efc6:	e01f      	b.n	800f008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800efc8:	6839      	ldr	r1, [r7, #0]
 800efca:	6878      	ldr	r0, [r7, #4]
 800efcc:	f000 fbe0 	bl	800f790 <USBD_SetConfig>
 800efd0:	4603      	mov	r3, r0
 800efd2:	73fb      	strb	r3, [r7, #15]
          break;
 800efd4:	e018      	b.n	800f008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	6878      	ldr	r0, [r7, #4]
 800efda:	f000 fc83 	bl	800f8e4 <USBD_GetConfig>
          break;
 800efde:	e013      	b.n	800f008 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800efe0:	6839      	ldr	r1, [r7, #0]
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f000 fcb4 	bl	800f950 <USBD_GetStatus>
          break;
 800efe8:	e00e      	b.n	800f008 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f000 fce3 	bl	800f9b8 <USBD_SetFeature>
          break;
 800eff2:	e009      	b.n	800f008 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eff4:	6839      	ldr	r1, [r7, #0]
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 fd07 	bl	800fa0a <USBD_ClrFeature>
          break;
 800effc:	e004      	b.n	800f008 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800effe:	6839      	ldr	r1, [r7, #0]
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f000 fd5e 	bl	800fac2 <USBD_CtlError>
          break;
 800f006:	bf00      	nop
      }
      break;
 800f008:	e004      	b.n	800f014 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f00a:	6839      	ldr	r1, [r7, #0]
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f000 fd58 	bl	800fac2 <USBD_CtlError>
      break;
 800f012:	bf00      	nop
  }

  return ret;
 800f014:	7bfb      	ldrb	r3, [r7, #15]
}
 800f016:	4618      	mov	r0, r3
 800f018:	3710      	adds	r7, #16
 800f01a:	46bd      	mov	sp, r7
 800f01c:	bd80      	pop	{r7, pc}
 800f01e:	bf00      	nop

0800f020 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b084      	sub	sp, #16
 800f024:	af00      	add	r7, sp, #0
 800f026:	6078      	str	r0, [r7, #4]
 800f028:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f02e:	683b      	ldr	r3, [r7, #0]
 800f030:	781b      	ldrb	r3, [r3, #0]
 800f032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f036:	2b40      	cmp	r3, #64	; 0x40
 800f038:	d005      	beq.n	800f046 <USBD_StdItfReq+0x26>
 800f03a:	2b40      	cmp	r3, #64	; 0x40
 800f03c:	d852      	bhi.n	800f0e4 <USBD_StdItfReq+0xc4>
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d001      	beq.n	800f046 <USBD_StdItfReq+0x26>
 800f042:	2b20      	cmp	r3, #32
 800f044:	d14e      	bne.n	800f0e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f04c:	b2db      	uxtb	r3, r3
 800f04e:	3b01      	subs	r3, #1
 800f050:	2b02      	cmp	r3, #2
 800f052:	d840      	bhi.n	800f0d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	889b      	ldrh	r3, [r3, #4]
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	2b01      	cmp	r3, #1
 800f05c:	d836      	bhi.n	800f0cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	889b      	ldrh	r3, [r3, #4]
 800f062:	b2db      	uxtb	r3, r3
 800f064:	4619      	mov	r1, r3
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7ff fed9 	bl	800ee1e <USBD_CoreFindIF>
 800f06c:	4603      	mov	r3, r0
 800f06e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f070:	7bbb      	ldrb	r3, [r7, #14]
 800f072:	2bff      	cmp	r3, #255	; 0xff
 800f074:	d01d      	beq.n	800f0b2 <USBD_StdItfReq+0x92>
 800f076:	7bbb      	ldrb	r3, [r7, #14]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d11a      	bne.n	800f0b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f07c:	7bba      	ldrb	r2, [r7, #14]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	32ae      	adds	r2, #174	; 0xae
 800f082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f086:	689b      	ldr	r3, [r3, #8]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d00f      	beq.n	800f0ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f08c:	7bba      	ldrb	r2, [r7, #14]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f094:	7bba      	ldrb	r2, [r7, #14]
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	32ae      	adds	r2, #174	; 0xae
 800f09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	6839      	ldr	r1, [r7, #0]
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	4798      	blx	r3
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f0aa:	e004      	b.n	800f0b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f0ac:	2303      	movs	r3, #3
 800f0ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f0b0:	e001      	b.n	800f0b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f0b2:	2303      	movs	r3, #3
 800f0b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	88db      	ldrh	r3, [r3, #6]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d110      	bne.n	800f0e0 <USBD_StdItfReq+0xc0>
 800f0be:	7bfb      	ldrb	r3, [r7, #15]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d10d      	bne.n	800f0e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f000 fdc7 	bl	800fc58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f0ca:	e009      	b.n	800f0e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f0cc:	6839      	ldr	r1, [r7, #0]
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f000 fcf7 	bl	800fac2 <USBD_CtlError>
          break;
 800f0d4:	e004      	b.n	800f0e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f0d6:	6839      	ldr	r1, [r7, #0]
 800f0d8:	6878      	ldr	r0, [r7, #4]
 800f0da:	f000 fcf2 	bl	800fac2 <USBD_CtlError>
          break;
 800f0de:	e000      	b.n	800f0e2 <USBD_StdItfReq+0xc2>
          break;
 800f0e0:	bf00      	nop
      }
      break;
 800f0e2:	e004      	b.n	800f0ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f0e4:	6839      	ldr	r1, [r7, #0]
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 fceb 	bl	800fac2 <USBD_CtlError>
      break;
 800f0ec:	bf00      	nop
  }

  return ret;
 800f0ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3710      	adds	r7, #16
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}

0800f0f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	889b      	ldrh	r3, [r3, #4]
 800f10a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f114:	2b40      	cmp	r3, #64	; 0x40
 800f116:	d007      	beq.n	800f128 <USBD_StdEPReq+0x30>
 800f118:	2b40      	cmp	r3, #64	; 0x40
 800f11a:	f200 817f 	bhi.w	800f41c <USBD_StdEPReq+0x324>
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d02a      	beq.n	800f178 <USBD_StdEPReq+0x80>
 800f122:	2b20      	cmp	r3, #32
 800f124:	f040 817a 	bne.w	800f41c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f128:	7bbb      	ldrb	r3, [r7, #14]
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff fe83 	bl	800ee38 <USBD_CoreFindEP>
 800f132:	4603      	mov	r3, r0
 800f134:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f136:	7b7b      	ldrb	r3, [r7, #13]
 800f138:	2bff      	cmp	r3, #255	; 0xff
 800f13a:	f000 8174 	beq.w	800f426 <USBD_StdEPReq+0x32e>
 800f13e:	7b7b      	ldrb	r3, [r7, #13]
 800f140:	2b00      	cmp	r3, #0
 800f142:	f040 8170 	bne.w	800f426 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f146:	7b7a      	ldrb	r2, [r7, #13]
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f14e:	7b7a      	ldrb	r2, [r7, #13]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	32ae      	adds	r2, #174	; 0xae
 800f154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f158:	689b      	ldr	r3, [r3, #8]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 8163 	beq.w	800f426 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f160:	7b7a      	ldrb	r2, [r7, #13]
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	32ae      	adds	r2, #174	; 0xae
 800f166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f16a:	689b      	ldr	r3, [r3, #8]
 800f16c:	6839      	ldr	r1, [r7, #0]
 800f16e:	6878      	ldr	r0, [r7, #4]
 800f170:	4798      	blx	r3
 800f172:	4603      	mov	r3, r0
 800f174:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f176:	e156      	b.n	800f426 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	785b      	ldrb	r3, [r3, #1]
 800f17c:	2b03      	cmp	r3, #3
 800f17e:	d008      	beq.n	800f192 <USBD_StdEPReq+0x9a>
 800f180:	2b03      	cmp	r3, #3
 800f182:	f300 8145 	bgt.w	800f410 <USBD_StdEPReq+0x318>
 800f186:	2b00      	cmp	r3, #0
 800f188:	f000 809b 	beq.w	800f2c2 <USBD_StdEPReq+0x1ca>
 800f18c:	2b01      	cmp	r3, #1
 800f18e:	d03c      	beq.n	800f20a <USBD_StdEPReq+0x112>
 800f190:	e13e      	b.n	800f410 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f198:	b2db      	uxtb	r3, r3
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d002      	beq.n	800f1a4 <USBD_StdEPReq+0xac>
 800f19e:	2b03      	cmp	r3, #3
 800f1a0:	d016      	beq.n	800f1d0 <USBD_StdEPReq+0xd8>
 800f1a2:	e02c      	b.n	800f1fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1a4:	7bbb      	ldrb	r3, [r7, #14]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d00d      	beq.n	800f1c6 <USBD_StdEPReq+0xce>
 800f1aa:	7bbb      	ldrb	r3, [r7, #14]
 800f1ac:	2b80      	cmp	r3, #128	; 0x80
 800f1ae:	d00a      	beq.n	800f1c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1b0:	7bbb      	ldrb	r3, [r7, #14]
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	6878      	ldr	r0, [r7, #4]
 800f1b6:	f004 fdef 	bl	8013d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f1ba:	2180      	movs	r1, #128	; 0x80
 800f1bc:	6878      	ldr	r0, [r7, #4]
 800f1be:	f004 fdeb 	bl	8013d98 <USBD_LL_StallEP>
 800f1c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f1c4:	e020      	b.n	800f208 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f1c6:	6839      	ldr	r1, [r7, #0]
 800f1c8:	6878      	ldr	r0, [r7, #4]
 800f1ca:	f000 fc7a 	bl	800fac2 <USBD_CtlError>
              break;
 800f1ce:	e01b      	b.n	800f208 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	885b      	ldrh	r3, [r3, #2]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d10e      	bne.n	800f1f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f1d8:	7bbb      	ldrb	r3, [r7, #14]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d00b      	beq.n	800f1f6 <USBD_StdEPReq+0xfe>
 800f1de:	7bbb      	ldrb	r3, [r7, #14]
 800f1e0:	2b80      	cmp	r3, #128	; 0x80
 800f1e2:	d008      	beq.n	800f1f6 <USBD_StdEPReq+0xfe>
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	88db      	ldrh	r3, [r3, #6]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d104      	bne.n	800f1f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f1ec:	7bbb      	ldrb	r3, [r7, #14]
 800f1ee:	4619      	mov	r1, r3
 800f1f0:	6878      	ldr	r0, [r7, #4]
 800f1f2:	f004 fdd1 	bl	8013d98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f000 fd2e 	bl	800fc58 <USBD_CtlSendStatus>

              break;
 800f1fc:	e004      	b.n	800f208 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f1fe:	6839      	ldr	r1, [r7, #0]
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f000 fc5e 	bl	800fac2 <USBD_CtlError>
              break;
 800f206:	bf00      	nop
          }
          break;
 800f208:	e107      	b.n	800f41a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f210:	b2db      	uxtb	r3, r3
 800f212:	2b02      	cmp	r3, #2
 800f214:	d002      	beq.n	800f21c <USBD_StdEPReq+0x124>
 800f216:	2b03      	cmp	r3, #3
 800f218:	d016      	beq.n	800f248 <USBD_StdEPReq+0x150>
 800f21a:	e04b      	b.n	800f2b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f21c:	7bbb      	ldrb	r3, [r7, #14]
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d00d      	beq.n	800f23e <USBD_StdEPReq+0x146>
 800f222:	7bbb      	ldrb	r3, [r7, #14]
 800f224:	2b80      	cmp	r3, #128	; 0x80
 800f226:	d00a      	beq.n	800f23e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	4619      	mov	r1, r3
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f004 fdb3 	bl	8013d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f232:	2180      	movs	r1, #128	; 0x80
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f004 fdaf 	bl	8013d98 <USBD_LL_StallEP>
 800f23a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f23c:	e040      	b.n	800f2c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f23e:	6839      	ldr	r1, [r7, #0]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f000 fc3e 	bl	800fac2 <USBD_CtlError>
              break;
 800f246:	e03b      	b.n	800f2c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	885b      	ldrh	r3, [r3, #2]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d136      	bne.n	800f2be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f250:	7bbb      	ldrb	r3, [r7, #14]
 800f252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f256:	2b00      	cmp	r3, #0
 800f258:	d004      	beq.n	800f264 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f25a:	7bbb      	ldrb	r3, [r7, #14]
 800f25c:	4619      	mov	r1, r3
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f004 fdb9 	bl	8013dd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fcf7 	bl	800fc58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f26a:	7bbb      	ldrb	r3, [r7, #14]
 800f26c:	4619      	mov	r1, r3
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7ff fde2 	bl	800ee38 <USBD_CoreFindEP>
 800f274:	4603      	mov	r3, r0
 800f276:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f278:	7b7b      	ldrb	r3, [r7, #13]
 800f27a:	2bff      	cmp	r3, #255	; 0xff
 800f27c:	d01f      	beq.n	800f2be <USBD_StdEPReq+0x1c6>
 800f27e:	7b7b      	ldrb	r3, [r7, #13]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d11c      	bne.n	800f2be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f284:	7b7a      	ldrb	r2, [r7, #13]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f28c:	7b7a      	ldrb	r2, [r7, #13]
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	32ae      	adds	r2, #174	; 0xae
 800f292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f296:	689b      	ldr	r3, [r3, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d010      	beq.n	800f2be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f29c:	7b7a      	ldrb	r2, [r7, #13]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	32ae      	adds	r2, #174	; 0xae
 800f2a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2a6:	689b      	ldr	r3, [r3, #8]
 800f2a8:	6839      	ldr	r1, [r7, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	4798      	blx	r3
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f2b2:	e004      	b.n	800f2be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f2b4:	6839      	ldr	r1, [r7, #0]
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 fc03 	bl	800fac2 <USBD_CtlError>
              break;
 800f2bc:	e000      	b.n	800f2c0 <USBD_StdEPReq+0x1c8>
              break;
 800f2be:	bf00      	nop
          }
          break;
 800f2c0:	e0ab      	b.n	800f41a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	2b02      	cmp	r3, #2
 800f2cc:	d002      	beq.n	800f2d4 <USBD_StdEPReq+0x1dc>
 800f2ce:	2b03      	cmp	r3, #3
 800f2d0:	d032      	beq.n	800f338 <USBD_StdEPReq+0x240>
 800f2d2:	e097      	b.n	800f404 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f2d4:	7bbb      	ldrb	r3, [r7, #14]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d007      	beq.n	800f2ea <USBD_StdEPReq+0x1f2>
 800f2da:	7bbb      	ldrb	r3, [r7, #14]
 800f2dc:	2b80      	cmp	r3, #128	; 0x80
 800f2de:	d004      	beq.n	800f2ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f2e0:	6839      	ldr	r1, [r7, #0]
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 fbed 	bl	800fac2 <USBD_CtlError>
                break;
 800f2e8:	e091      	b.n	800f40e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f2ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	da0b      	bge.n	800f30a <USBD_StdEPReq+0x212>
 800f2f2:	7bbb      	ldrb	r3, [r7, #14]
 800f2f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2f8:	4613      	mov	r3, r2
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	4413      	add	r3, r2
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	3310      	adds	r3, #16
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	4413      	add	r3, r2
 800f306:	3304      	adds	r3, #4
 800f308:	e00b      	b.n	800f322 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f30a:	7bbb      	ldrb	r3, [r7, #14]
 800f30c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f310:	4613      	mov	r3, r2
 800f312:	009b      	lsls	r3, r3, #2
 800f314:	4413      	add	r3, r2
 800f316:	009b      	lsls	r3, r3, #2
 800f318:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f31c:	687a      	ldr	r2, [r7, #4]
 800f31e:	4413      	add	r3, r2
 800f320:	3304      	adds	r3, #4
 800f322:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f324:	68bb      	ldr	r3, [r7, #8]
 800f326:	2200      	movs	r2, #0
 800f328:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	2202      	movs	r2, #2
 800f32e:	4619      	mov	r1, r3
 800f330:	6878      	ldr	r0, [r7, #4]
 800f332:	f000 fc37 	bl	800fba4 <USBD_CtlSendData>
              break;
 800f336:	e06a      	b.n	800f40e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	da11      	bge.n	800f364 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f340:	7bbb      	ldrb	r3, [r7, #14]
 800f342:	f003 020f 	and.w	r2, r3, #15
 800f346:	6879      	ldr	r1, [r7, #4]
 800f348:	4613      	mov	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	440b      	add	r3, r1
 800f352:	3324      	adds	r3, #36	; 0x24
 800f354:	881b      	ldrh	r3, [r3, #0]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d117      	bne.n	800f38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f35a:	6839      	ldr	r1, [r7, #0]
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f000 fbb0 	bl	800fac2 <USBD_CtlError>
                  break;
 800f362:	e054      	b.n	800f40e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f364:	7bbb      	ldrb	r3, [r7, #14]
 800f366:	f003 020f 	and.w	r2, r3, #15
 800f36a:	6879      	ldr	r1, [r7, #4]
 800f36c:	4613      	mov	r3, r2
 800f36e:	009b      	lsls	r3, r3, #2
 800f370:	4413      	add	r3, r2
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	440b      	add	r3, r1
 800f376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d104      	bne.n	800f38a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f000 fb9d 	bl	800fac2 <USBD_CtlError>
                  break;
 800f388:	e041      	b.n	800f40e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f38a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	da0b      	bge.n	800f3aa <USBD_StdEPReq+0x2b2>
 800f392:	7bbb      	ldrb	r3, [r7, #14]
 800f394:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f398:	4613      	mov	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4413      	add	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	3310      	adds	r3, #16
 800f3a2:	687a      	ldr	r2, [r7, #4]
 800f3a4:	4413      	add	r3, r2
 800f3a6:	3304      	adds	r3, #4
 800f3a8:	e00b      	b.n	800f3c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3aa:	7bbb      	ldrb	r3, [r7, #14]
 800f3ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3b0:	4613      	mov	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4413      	add	r3, r2
 800f3b6:	009b      	lsls	r3, r3, #2
 800f3b8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	4413      	add	r3, r2
 800f3c0:	3304      	adds	r3, #4
 800f3c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f3c4:	7bbb      	ldrb	r3, [r7, #14]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d002      	beq.n	800f3d0 <USBD_StdEPReq+0x2d8>
 800f3ca:	7bbb      	ldrb	r3, [r7, #14]
 800f3cc:	2b80      	cmp	r3, #128	; 0x80
 800f3ce:	d103      	bne.n	800f3d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f3d0:	68bb      	ldr	r3, [r7, #8]
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	601a      	str	r2, [r3, #0]
 800f3d6:	e00e      	b.n	800f3f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f3d8:	7bbb      	ldrb	r3, [r7, #14]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f004 fd19 	bl	8013e14 <USBD_LL_IsStallEP>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d003      	beq.n	800f3f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	601a      	str	r2, [r3, #0]
 800f3ee:	e002      	b.n	800f3f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fbd1 	bl	800fba4 <USBD_CtlSendData>
              break;
 800f402:	e004      	b.n	800f40e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f404:	6839      	ldr	r1, [r7, #0]
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 fb5b 	bl	800fac2 <USBD_CtlError>
              break;
 800f40c:	bf00      	nop
          }
          break;
 800f40e:	e004      	b.n	800f41a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f410:	6839      	ldr	r1, [r7, #0]
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 fb55 	bl	800fac2 <USBD_CtlError>
          break;
 800f418:	bf00      	nop
      }
      break;
 800f41a:	e005      	b.n	800f428 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f41c:	6839      	ldr	r1, [r7, #0]
 800f41e:	6878      	ldr	r0, [r7, #4]
 800f420:	f000 fb4f 	bl	800fac2 <USBD_CtlError>
      break;
 800f424:	e000      	b.n	800f428 <USBD_StdEPReq+0x330>
      break;
 800f426:	bf00      	nop
  }

  return ret;
 800f428:	7bfb      	ldrb	r3, [r7, #15]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3710      	adds	r7, #16
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
	...

0800f434 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b084      	sub	sp, #16
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
 800f43c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f43e:	2300      	movs	r3, #0
 800f440:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f442:	2300      	movs	r3, #0
 800f444:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f446:	2300      	movs	r3, #0
 800f448:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	885b      	ldrh	r3, [r3, #2]
 800f44e:	0a1b      	lsrs	r3, r3, #8
 800f450:	b29b      	uxth	r3, r3
 800f452:	3b01      	subs	r3, #1
 800f454:	2b06      	cmp	r3, #6
 800f456:	f200 8128 	bhi.w	800f6aa <USBD_GetDescriptor+0x276>
 800f45a:	a201      	add	r2, pc, #4	; (adr r2, 800f460 <USBD_GetDescriptor+0x2c>)
 800f45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f460:	0800f47d 	.word	0x0800f47d
 800f464:	0800f495 	.word	0x0800f495
 800f468:	0800f4d5 	.word	0x0800f4d5
 800f46c:	0800f6ab 	.word	0x0800f6ab
 800f470:	0800f6ab 	.word	0x0800f6ab
 800f474:	0800f64b 	.word	0x0800f64b
 800f478:	0800f677 	.word	0x0800f677
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	7c12      	ldrb	r2, [r2, #16]
 800f488:	f107 0108 	add.w	r1, r7, #8
 800f48c:	4610      	mov	r0, r2
 800f48e:	4798      	blx	r3
 800f490:	60f8      	str	r0, [r7, #12]
      break;
 800f492:	e112      	b.n	800f6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	7c1b      	ldrb	r3, [r3, #16]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d10d      	bne.n	800f4b8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4a4:	f107 0208 	add.w	r2, r7, #8
 800f4a8:	4610      	mov	r0, r2
 800f4aa:	4798      	blx	r3
 800f4ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	3301      	adds	r3, #1
 800f4b2:	2202      	movs	r2, #2
 800f4b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f4b6:	e100      	b.n	800f6ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4c0:	f107 0208 	add.w	r2, r7, #8
 800f4c4:	4610      	mov	r0, r2
 800f4c6:	4798      	blx	r3
 800f4c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	3301      	adds	r3, #1
 800f4ce:	2202      	movs	r2, #2
 800f4d0:	701a      	strb	r2, [r3, #0]
      break;
 800f4d2:	e0f2      	b.n	800f6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	885b      	ldrh	r3, [r3, #2]
 800f4d8:	b2db      	uxtb	r3, r3
 800f4da:	2b05      	cmp	r3, #5
 800f4dc:	f200 80ac 	bhi.w	800f638 <USBD_GetDescriptor+0x204>
 800f4e0:	a201      	add	r2, pc, #4	; (adr r2, 800f4e8 <USBD_GetDescriptor+0xb4>)
 800f4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4e6:	bf00      	nop
 800f4e8:	0800f501 	.word	0x0800f501
 800f4ec:	0800f535 	.word	0x0800f535
 800f4f0:	0800f569 	.word	0x0800f569
 800f4f4:	0800f59d 	.word	0x0800f59d
 800f4f8:	0800f5d1 	.word	0x0800f5d1
 800f4fc:	0800f605 	.word	0x0800f605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f506:	685b      	ldr	r3, [r3, #4]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d00b      	beq.n	800f524 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f512:	685b      	ldr	r3, [r3, #4]
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	7c12      	ldrb	r2, [r2, #16]
 800f518:	f107 0108 	add.w	r1, r7, #8
 800f51c:	4610      	mov	r0, r2
 800f51e:	4798      	blx	r3
 800f520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f522:	e091      	b.n	800f648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f524:	6839      	ldr	r1, [r7, #0]
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 facb 	bl	800fac2 <USBD_CtlError>
            err++;
 800f52c:	7afb      	ldrb	r3, [r7, #11]
 800f52e:	3301      	adds	r3, #1
 800f530:	72fb      	strb	r3, [r7, #11]
          break;
 800f532:	e089      	b.n	800f648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f53a:	689b      	ldr	r3, [r3, #8]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00b      	beq.n	800f558 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	687a      	ldr	r2, [r7, #4]
 800f54a:	7c12      	ldrb	r2, [r2, #16]
 800f54c:	f107 0108 	add.w	r1, r7, #8
 800f550:	4610      	mov	r0, r2
 800f552:	4798      	blx	r3
 800f554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f556:	e077      	b.n	800f648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f558:	6839      	ldr	r1, [r7, #0]
 800f55a:	6878      	ldr	r0, [r7, #4]
 800f55c:	f000 fab1 	bl	800fac2 <USBD_CtlError>
            err++;
 800f560:	7afb      	ldrb	r3, [r7, #11]
 800f562:	3301      	adds	r3, #1
 800f564:	72fb      	strb	r3, [r7, #11]
          break;
 800f566:	e06f      	b.n	800f648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f56e:	68db      	ldr	r3, [r3, #12]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d00b      	beq.n	800f58c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	7c12      	ldrb	r2, [r2, #16]
 800f580:	f107 0108 	add.w	r1, r7, #8
 800f584:	4610      	mov	r0, r2
 800f586:	4798      	blx	r3
 800f588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f58a:	e05d      	b.n	800f648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 fa97 	bl	800fac2 <USBD_CtlError>
            err++;
 800f594:	7afb      	ldrb	r3, [r7, #11]
 800f596:	3301      	adds	r3, #1
 800f598:	72fb      	strb	r3, [r7, #11]
          break;
 800f59a:	e055      	b.n	800f648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5a2:	691b      	ldr	r3, [r3, #16]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d00b      	beq.n	800f5c0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5ae:	691b      	ldr	r3, [r3, #16]
 800f5b0:	687a      	ldr	r2, [r7, #4]
 800f5b2:	7c12      	ldrb	r2, [r2, #16]
 800f5b4:	f107 0108 	add.w	r1, r7, #8
 800f5b8:	4610      	mov	r0, r2
 800f5ba:	4798      	blx	r3
 800f5bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5be:	e043      	b.n	800f648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5c0:	6839      	ldr	r1, [r7, #0]
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f000 fa7d 	bl	800fac2 <USBD_CtlError>
            err++;
 800f5c8:	7afb      	ldrb	r3, [r7, #11]
 800f5ca:	3301      	adds	r3, #1
 800f5cc:	72fb      	strb	r3, [r7, #11]
          break;
 800f5ce:	e03b      	b.n	800f648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5d6:	695b      	ldr	r3, [r3, #20]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d00b      	beq.n	800f5f4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5e2:	695b      	ldr	r3, [r3, #20]
 800f5e4:	687a      	ldr	r2, [r7, #4]
 800f5e6:	7c12      	ldrb	r2, [r2, #16]
 800f5e8:	f107 0108 	add.w	r1, r7, #8
 800f5ec:	4610      	mov	r0, r2
 800f5ee:	4798      	blx	r3
 800f5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5f2:	e029      	b.n	800f648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 fa63 	bl	800fac2 <USBD_CtlError>
            err++;
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	3301      	adds	r3, #1
 800f600:	72fb      	strb	r3, [r7, #11]
          break;
 800f602:	e021      	b.n	800f648 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f60a:	699b      	ldr	r3, [r3, #24]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d00b      	beq.n	800f628 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f616:	699b      	ldr	r3, [r3, #24]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	7c12      	ldrb	r2, [r2, #16]
 800f61c:	f107 0108 	add.w	r1, r7, #8
 800f620:	4610      	mov	r0, r2
 800f622:	4798      	blx	r3
 800f624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f626:	e00f      	b.n	800f648 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f628:	6839      	ldr	r1, [r7, #0]
 800f62a:	6878      	ldr	r0, [r7, #4]
 800f62c:	f000 fa49 	bl	800fac2 <USBD_CtlError>
            err++;
 800f630:	7afb      	ldrb	r3, [r7, #11]
 800f632:	3301      	adds	r3, #1
 800f634:	72fb      	strb	r3, [r7, #11]
          break;
 800f636:	e007      	b.n	800f648 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f638:	6839      	ldr	r1, [r7, #0]
 800f63a:	6878      	ldr	r0, [r7, #4]
 800f63c:	f000 fa41 	bl	800fac2 <USBD_CtlError>
          err++;
 800f640:	7afb      	ldrb	r3, [r7, #11]
 800f642:	3301      	adds	r3, #1
 800f644:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f646:	bf00      	nop
      }
      break;
 800f648:	e037      	b.n	800f6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	7c1b      	ldrb	r3, [r3, #16]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d109      	bne.n	800f666 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f65a:	f107 0208 	add.w	r2, r7, #8
 800f65e:	4610      	mov	r0, r2
 800f660:	4798      	blx	r3
 800f662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f664:	e029      	b.n	800f6ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f666:	6839      	ldr	r1, [r7, #0]
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fa2a 	bl	800fac2 <USBD_CtlError>
        err++;
 800f66e:	7afb      	ldrb	r3, [r7, #11]
 800f670:	3301      	adds	r3, #1
 800f672:	72fb      	strb	r3, [r7, #11]
      break;
 800f674:	e021      	b.n	800f6ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	7c1b      	ldrb	r3, [r3, #16]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d10d      	bne.n	800f69a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f686:	f107 0208 	add.w	r2, r7, #8
 800f68a:	4610      	mov	r0, r2
 800f68c:	4798      	blx	r3
 800f68e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	3301      	adds	r3, #1
 800f694:	2207      	movs	r2, #7
 800f696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f698:	e00f      	b.n	800f6ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f69a:	6839      	ldr	r1, [r7, #0]
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 fa10 	bl	800fac2 <USBD_CtlError>
        err++;
 800f6a2:	7afb      	ldrb	r3, [r7, #11]
 800f6a4:	3301      	adds	r3, #1
 800f6a6:	72fb      	strb	r3, [r7, #11]
      break;
 800f6a8:	e007      	b.n	800f6ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f6aa:	6839      	ldr	r1, [r7, #0]
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 fa08 	bl	800fac2 <USBD_CtlError>
      err++;
 800f6b2:	7afb      	ldrb	r3, [r7, #11]
 800f6b4:	3301      	adds	r3, #1
 800f6b6:	72fb      	strb	r3, [r7, #11]
      break;
 800f6b8:	bf00      	nop
  }

  if (err != 0U)
 800f6ba:	7afb      	ldrb	r3, [r7, #11]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d11e      	bne.n	800f6fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	88db      	ldrh	r3, [r3, #6]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d016      	beq.n	800f6f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f6c8:	893b      	ldrh	r3, [r7, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d00e      	beq.n	800f6ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	88da      	ldrh	r2, [r3, #6]
 800f6d2:	893b      	ldrh	r3, [r7, #8]
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	bf28      	it	cs
 800f6d8:	4613      	movcs	r3, r2
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f6de:	893b      	ldrh	r3, [r7, #8]
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	68f9      	ldr	r1, [r7, #12]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f000 fa5d 	bl	800fba4 <USBD_CtlSendData>
 800f6ea:	e009      	b.n	800f700 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f6ec:	6839      	ldr	r1, [r7, #0]
 800f6ee:	6878      	ldr	r0, [r7, #4]
 800f6f0:	f000 f9e7 	bl	800fac2 <USBD_CtlError>
 800f6f4:	e004      	b.n	800f700 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f6f6:	6878      	ldr	r0, [r7, #4]
 800f6f8:	f000 faae 	bl	800fc58 <USBD_CtlSendStatus>
 800f6fc:	e000      	b.n	800f700 <USBD_GetDescriptor+0x2cc>
    return;
 800f6fe:	bf00      	nop
  }
}
 800f700:	3710      	adds	r7, #16
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}
 800f706:	bf00      	nop

0800f708 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b084      	sub	sp, #16
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f712:	683b      	ldr	r3, [r7, #0]
 800f714:	889b      	ldrh	r3, [r3, #4]
 800f716:	2b00      	cmp	r3, #0
 800f718:	d131      	bne.n	800f77e <USBD_SetAddress+0x76>
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	88db      	ldrh	r3, [r3, #6]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d12d      	bne.n	800f77e <USBD_SetAddress+0x76>
 800f722:	683b      	ldr	r3, [r7, #0]
 800f724:	885b      	ldrh	r3, [r3, #2]
 800f726:	2b7f      	cmp	r3, #127	; 0x7f
 800f728:	d829      	bhi.n	800f77e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f72a:	683b      	ldr	r3, [r7, #0]
 800f72c:	885b      	ldrh	r3, [r3, #2]
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	2b03      	cmp	r3, #3
 800f740:	d104      	bne.n	800f74c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f742:	6839      	ldr	r1, [r7, #0]
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 f9bc 	bl	800fac2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f74a:	e01d      	b.n	800f788 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	7bfa      	ldrb	r2, [r7, #15]
 800f750:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f754:	7bfb      	ldrb	r3, [r7, #15]
 800f756:	4619      	mov	r1, r3
 800f758:	6878      	ldr	r0, [r7, #4]
 800f75a:	f004 fb87 	bl	8013e6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fa7a 	bl	800fc58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f764:	7bfb      	ldrb	r3, [r7, #15]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d004      	beq.n	800f774 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2202      	movs	r2, #2
 800f76e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f772:	e009      	b.n	800f788 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	2201      	movs	r2, #1
 800f778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f77c:	e004      	b.n	800f788 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f77e:	6839      	ldr	r1, [r7, #0]
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 f99e 	bl	800fac2 <USBD_CtlError>
  }
}
 800f786:	bf00      	nop
 800f788:	bf00      	nop
 800f78a:	3710      	adds	r7, #16
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}

0800f790 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f790:	b580      	push	{r7, lr}
 800f792:	b084      	sub	sp, #16
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
 800f798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f79a:	2300      	movs	r3, #0
 800f79c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	885b      	ldrh	r3, [r3, #2]
 800f7a2:	b2da      	uxtb	r2, r3
 800f7a4:	4b4e      	ldr	r3, [pc, #312]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f7a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f7a8:	4b4d      	ldr	r3, [pc, #308]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2b01      	cmp	r3, #1
 800f7ae:	d905      	bls.n	800f7bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f7b0:	6839      	ldr	r1, [r7, #0]
 800f7b2:	6878      	ldr	r0, [r7, #4]
 800f7b4:	f000 f985 	bl	800fac2 <USBD_CtlError>
    return USBD_FAIL;
 800f7b8:	2303      	movs	r3, #3
 800f7ba:	e08c      	b.n	800f8d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	2b02      	cmp	r3, #2
 800f7c6:	d002      	beq.n	800f7ce <USBD_SetConfig+0x3e>
 800f7c8:	2b03      	cmp	r3, #3
 800f7ca:	d029      	beq.n	800f820 <USBD_SetConfig+0x90>
 800f7cc:	e075      	b.n	800f8ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f7ce:	4b44      	ldr	r3, [pc, #272]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d020      	beq.n	800f818 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f7d6:	4b42      	ldr	r3, [pc, #264]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f7d8:	781b      	ldrb	r3, [r3, #0]
 800f7da:	461a      	mov	r2, r3
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f7e0:	4b3f      	ldr	r3, [pc, #252]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f7e2:	781b      	ldrb	r3, [r3, #0]
 800f7e4:	4619      	mov	r1, r3
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	f7fe ffe7 	bl	800e7ba <USBD_SetClassConfig>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f7f0:	7bfb      	ldrb	r3, [r7, #15]
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d008      	beq.n	800f808 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f7f6:	6839      	ldr	r1, [r7, #0]
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 f962 	bl	800fac2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2202      	movs	r2, #2
 800f802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f806:	e065      	b.n	800f8d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f808:	6878      	ldr	r0, [r7, #4]
 800f80a:	f000 fa25 	bl	800fc58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2203      	movs	r2, #3
 800f812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f816:	e05d      	b.n	800f8d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f000 fa1d 	bl	800fc58 <USBD_CtlSendStatus>
      break;
 800f81e:	e059      	b.n	800f8d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f820:	4b2f      	ldr	r3, [pc, #188]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f822:	781b      	ldrb	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d112      	bne.n	800f84e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	2202      	movs	r2, #2
 800f82c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f830:	4b2b      	ldr	r3, [pc, #172]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f832:	781b      	ldrb	r3, [r3, #0]
 800f834:	461a      	mov	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f83a:	4b29      	ldr	r3, [pc, #164]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f83c:	781b      	ldrb	r3, [r3, #0]
 800f83e:	4619      	mov	r1, r3
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f7fe ffd6 	bl	800e7f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f846:	6878      	ldr	r0, [r7, #4]
 800f848:	f000 fa06 	bl	800fc58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f84c:	e042      	b.n	800f8d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f84e:	4b24      	ldr	r3, [pc, #144]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	461a      	mov	r2, r3
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	685b      	ldr	r3, [r3, #4]
 800f858:	429a      	cmp	r2, r3
 800f85a:	d02a      	beq.n	800f8b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	685b      	ldr	r3, [r3, #4]
 800f860:	b2db      	uxtb	r3, r3
 800f862:	4619      	mov	r1, r3
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7fe ffc4 	bl	800e7f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f86a:	4b1d      	ldr	r3, [pc, #116]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f86c:	781b      	ldrb	r3, [r3, #0]
 800f86e:	461a      	mov	r2, r3
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f874:	4b1a      	ldr	r3, [pc, #104]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f876:	781b      	ldrb	r3, [r3, #0]
 800f878:	4619      	mov	r1, r3
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7fe ff9d 	bl	800e7ba <USBD_SetClassConfig>
 800f880:	4603      	mov	r3, r0
 800f882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f884:	7bfb      	ldrb	r3, [r7, #15]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d00f      	beq.n	800f8aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f88a:	6839      	ldr	r1, [r7, #0]
 800f88c:	6878      	ldr	r0, [r7, #4]
 800f88e:	f000 f918 	bl	800fac2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	685b      	ldr	r3, [r3, #4]
 800f896:	b2db      	uxtb	r3, r3
 800f898:	4619      	mov	r1, r3
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	f7fe ffa9 	bl	800e7f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	2202      	movs	r2, #2
 800f8a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f8a8:	e014      	b.n	800f8d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f8aa:	6878      	ldr	r0, [r7, #4]
 800f8ac:	f000 f9d4 	bl	800fc58 <USBD_CtlSendStatus>
      break;
 800f8b0:	e010      	b.n	800f8d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f000 f9d0 	bl	800fc58 <USBD_CtlSendStatus>
      break;
 800f8b8:	e00c      	b.n	800f8d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f8ba:	6839      	ldr	r1, [r7, #0]
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 f900 	bl	800fac2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f8c2:	4b07      	ldr	r3, [pc, #28]	; (800f8e0 <USBD_SetConfig+0x150>)
 800f8c4:	781b      	ldrb	r3, [r3, #0]
 800f8c6:	4619      	mov	r1, r3
 800f8c8:	6878      	ldr	r0, [r7, #4]
 800f8ca:	f7fe ff92 	bl	800e7f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f8ce:	2303      	movs	r3, #3
 800f8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800f8d2:	bf00      	nop
  }

  return ret;
 800f8d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	3710      	adds	r7, #16
 800f8da:	46bd      	mov	sp, r7
 800f8dc:	bd80      	pop	{r7, pc}
 800f8de:	bf00      	nop
 800f8e0:	20000900 	.word	0x20000900

0800f8e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	88db      	ldrh	r3, [r3, #6]
 800f8f2:	2b01      	cmp	r3, #1
 800f8f4:	d004      	beq.n	800f900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f8f6:	6839      	ldr	r1, [r7, #0]
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f000 f8e2 	bl	800fac2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f8fe:	e023      	b.n	800f948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f906:	b2db      	uxtb	r3, r3
 800f908:	2b02      	cmp	r3, #2
 800f90a:	dc02      	bgt.n	800f912 <USBD_GetConfig+0x2e>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	dc03      	bgt.n	800f918 <USBD_GetConfig+0x34>
 800f910:	e015      	b.n	800f93e <USBD_GetConfig+0x5a>
 800f912:	2b03      	cmp	r3, #3
 800f914:	d00b      	beq.n	800f92e <USBD_GetConfig+0x4a>
 800f916:	e012      	b.n	800f93e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	3308      	adds	r3, #8
 800f922:	2201      	movs	r2, #1
 800f924:	4619      	mov	r1, r3
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f000 f93c 	bl	800fba4 <USBD_CtlSendData>
        break;
 800f92c:	e00c      	b.n	800f948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	3304      	adds	r3, #4
 800f932:	2201      	movs	r2, #1
 800f934:	4619      	mov	r1, r3
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f000 f934 	bl	800fba4 <USBD_CtlSendData>
        break;
 800f93c:	e004      	b.n	800f948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f93e:	6839      	ldr	r1, [r7, #0]
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	f000 f8be 	bl	800fac2 <USBD_CtlError>
        break;
 800f946:	bf00      	nop
}
 800f948:	bf00      	nop
 800f94a:	3708      	adds	r7, #8
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f960:	b2db      	uxtb	r3, r3
 800f962:	3b01      	subs	r3, #1
 800f964:	2b02      	cmp	r3, #2
 800f966:	d81e      	bhi.n	800f9a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	88db      	ldrh	r3, [r3, #6]
 800f96c:	2b02      	cmp	r3, #2
 800f96e:	d004      	beq.n	800f97a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	6878      	ldr	r0, [r7, #4]
 800f974:	f000 f8a5 	bl	800fac2 <USBD_CtlError>
        break;
 800f978:	e01a      	b.n	800f9b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2201      	movs	r2, #1
 800f97e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f986:	2b00      	cmp	r3, #0
 800f988:	d005      	beq.n	800f996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	f043 0202 	orr.w	r2, r3, #2
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	330c      	adds	r3, #12
 800f99a:	2202      	movs	r2, #2
 800f99c:	4619      	mov	r1, r3
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f000 f900 	bl	800fba4 <USBD_CtlSendData>
      break;
 800f9a4:	e004      	b.n	800f9b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f9a6:	6839      	ldr	r1, [r7, #0]
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 f88a 	bl	800fac2 <USBD_CtlError>
      break;
 800f9ae:	bf00      	nop
  }
}
 800f9b0:	bf00      	nop
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}

0800f9b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9b8:	b580      	push	{r7, lr}
 800f9ba:	b082      	sub	sp, #8
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	885b      	ldrh	r3, [r3, #2]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d107      	bne.n	800f9da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2201      	movs	r2, #1
 800f9ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f9d2:	6878      	ldr	r0, [r7, #4]
 800f9d4:	f000 f940 	bl	800fc58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800f9d8:	e013      	b.n	800fa02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	885b      	ldrh	r3, [r3, #2]
 800f9de:	2b02      	cmp	r3, #2
 800f9e0:	d10b      	bne.n	800f9fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800f9e2:	683b      	ldr	r3, [r7, #0]
 800f9e4:	889b      	ldrh	r3, [r3, #4]
 800f9e6:	0a1b      	lsrs	r3, r3, #8
 800f9e8:	b29b      	uxth	r3, r3
 800f9ea:	b2da      	uxtb	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800f9f2:	6878      	ldr	r0, [r7, #4]
 800f9f4:	f000 f930 	bl	800fc58 <USBD_CtlSendStatus>
}
 800f9f8:	e003      	b.n	800fa02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800f9fa:	6839      	ldr	r1, [r7, #0]
 800f9fc:	6878      	ldr	r0, [r7, #4]
 800f9fe:	f000 f860 	bl	800fac2 <USBD_CtlError>
}
 800fa02:	bf00      	nop
 800fa04:	3708      	adds	r7, #8
 800fa06:	46bd      	mov	sp, r7
 800fa08:	bd80      	pop	{r7, pc}

0800fa0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b082      	sub	sp, #8
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
 800fa12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa1a:	b2db      	uxtb	r3, r3
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	2b02      	cmp	r3, #2
 800fa20:	d80b      	bhi.n	800fa3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	885b      	ldrh	r3, [r3, #2]
 800fa26:	2b01      	cmp	r3, #1
 800fa28:	d10c      	bne.n	800fa44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fa32:	6878      	ldr	r0, [r7, #4]
 800fa34:	f000 f910 	bl	800fc58 <USBD_CtlSendStatus>
      }
      break;
 800fa38:	e004      	b.n	800fa44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fa3a:	6839      	ldr	r1, [r7, #0]
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f840 	bl	800fac2 <USBD_CtlError>
      break;
 800fa42:	e000      	b.n	800fa46 <USBD_ClrFeature+0x3c>
      break;
 800fa44:	bf00      	nop
  }
}
 800fa46:	bf00      	nop
 800fa48:	3708      	adds	r7, #8
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	bd80      	pop	{r7, pc}

0800fa4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800fa4e:	b580      	push	{r7, lr}
 800fa50:	b084      	sub	sp, #16
 800fa52:	af00      	add	r7, sp, #0
 800fa54:	6078      	str	r0, [r7, #4]
 800fa56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fa58:	683b      	ldr	r3, [r7, #0]
 800fa5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	781a      	ldrb	r2, [r3, #0]
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	3301      	adds	r3, #1
 800fa68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	781a      	ldrb	r2, [r3, #0]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	3301      	adds	r3, #1
 800fa76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fa78:	68f8      	ldr	r0, [r7, #12]
 800fa7a:	f7ff fa41 	bl	800ef00 <SWAPBYTE>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	461a      	mov	r2, r3
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	3301      	adds	r3, #1
 800fa8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	3301      	adds	r3, #1
 800fa90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	f7ff fa34 	bl	800ef00 <SWAPBYTE>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	461a      	mov	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	3301      	adds	r3, #1
 800faa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	3301      	adds	r3, #1
 800faaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800faac:	68f8      	ldr	r0, [r7, #12]
 800faae:	f7ff fa27 	bl	800ef00 <SWAPBYTE>
 800fab2:	4603      	mov	r3, r0
 800fab4:	461a      	mov	r2, r3
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	80da      	strh	r2, [r3, #6]
}
 800faba:	bf00      	nop
 800fabc:	3710      	adds	r7, #16
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b082      	sub	sp, #8
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800facc:	2180      	movs	r1, #128	; 0x80
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	f004 f962 	bl	8013d98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fad4:	2100      	movs	r1, #0
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f004 f95e 	bl	8013d98 <USBD_LL_StallEP>
}
 800fadc:	bf00      	nop
 800fade:	3708      	adds	r7, #8
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}

0800fae4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b086      	sub	sp, #24
 800fae8:	af00      	add	r7, sp, #0
 800faea:	60f8      	str	r0, [r7, #12]
 800faec:	60b9      	str	r1, [r7, #8]
 800faee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800faf0:	2300      	movs	r3, #0
 800faf2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d036      	beq.n	800fb68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fafe:	6938      	ldr	r0, [r7, #16]
 800fb00:	f000 f836 	bl	800fb70 <USBD_GetLen>
 800fb04:	4603      	mov	r3, r0
 800fb06:	3301      	adds	r3, #1
 800fb08:	b29b      	uxth	r3, r3
 800fb0a:	005b      	lsls	r3, r3, #1
 800fb0c:	b29a      	uxth	r2, r3
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fb12:	7dfb      	ldrb	r3, [r7, #23]
 800fb14:	68ba      	ldr	r2, [r7, #8]
 800fb16:	4413      	add	r3, r2
 800fb18:	687a      	ldr	r2, [r7, #4]
 800fb1a:	7812      	ldrb	r2, [r2, #0]
 800fb1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	3301      	adds	r3, #1
 800fb22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fb24:	7dfb      	ldrb	r3, [r7, #23]
 800fb26:	68ba      	ldr	r2, [r7, #8]
 800fb28:	4413      	add	r3, r2
 800fb2a:	2203      	movs	r2, #3
 800fb2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800fb2e:	7dfb      	ldrb	r3, [r7, #23]
 800fb30:	3301      	adds	r3, #1
 800fb32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fb34:	e013      	b.n	800fb5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fb36:	7dfb      	ldrb	r3, [r7, #23]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	4413      	add	r3, r2
 800fb3c:	693a      	ldr	r2, [r7, #16]
 800fb3e:	7812      	ldrb	r2, [r2, #0]
 800fb40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	3301      	adds	r3, #1
 800fb46:	613b      	str	r3, [r7, #16]
    idx++;
 800fb48:	7dfb      	ldrb	r3, [r7, #23]
 800fb4a:	3301      	adds	r3, #1
 800fb4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fb4e:	7dfb      	ldrb	r3, [r7, #23]
 800fb50:	68ba      	ldr	r2, [r7, #8]
 800fb52:	4413      	add	r3, r2
 800fb54:	2200      	movs	r2, #0
 800fb56:	701a      	strb	r2, [r3, #0]
    idx++;
 800fb58:	7dfb      	ldrb	r3, [r7, #23]
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	781b      	ldrb	r3, [r3, #0]
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	d1e7      	bne.n	800fb36 <USBD_GetString+0x52>
 800fb66:	e000      	b.n	800fb6a <USBD_GetString+0x86>
    return;
 800fb68:	bf00      	nop
  }
}
 800fb6a:	3718      	adds	r7, #24
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fb70:	b480      	push	{r7}
 800fb72:	b085      	sub	sp, #20
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fb80:	e005      	b.n	800fb8e <USBD_GetLen+0x1e>
  {
    len++;
 800fb82:	7bfb      	ldrb	r3, [r7, #15]
 800fb84:	3301      	adds	r3, #1
 800fb86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	781b      	ldrb	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1f5      	bne.n	800fb82 <USBD_GetLen+0x12>
  }

  return len;
 800fb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	3714      	adds	r7, #20
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b084      	sub	sp, #16
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2202      	movs	r2, #2
 800fbb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fbb8:	68fb      	ldr	r3, [r7, #12]
 800fbba:	687a      	ldr	r2, [r7, #4]
 800fbbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	68ba      	ldr	r2, [r7, #8]
 800fbc8:	2100      	movs	r1, #0
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	f004 f96d 	bl	8013eaa <USBD_LL_Transmit>

  return USBD_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	4618      	mov	r0, r3
 800fbd4:	3710      	adds	r7, #16
 800fbd6:	46bd      	mov	sp, r7
 800fbd8:	bd80      	pop	{r7, pc}

0800fbda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fbda:	b580      	push	{r7, lr}
 800fbdc:	b084      	sub	sp, #16
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	2100      	movs	r1, #0
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f004 f95c 	bl	8013eaa <USBD_LL_Transmit>

  return USBD_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	60b9      	str	r1, [r7, #8]
 800fc06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	2203      	movs	r2, #3
 800fc0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	687a      	ldr	r2, [r7, #4]
 800fc14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	687a      	ldr	r2, [r7, #4]
 800fc1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	68ba      	ldr	r2, [r7, #8]
 800fc24:	2100      	movs	r1, #0
 800fc26:	68f8      	ldr	r0, [r7, #12]
 800fc28:	f004 f960 	bl	8013eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3710      	adds	r7, #16
 800fc32:	46bd      	mov	sp, r7
 800fc34:	bd80      	pop	{r7, pc}

0800fc36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fc36:	b580      	push	{r7, lr}
 800fc38:	b084      	sub	sp, #16
 800fc3a:	af00      	add	r7, sp, #0
 800fc3c:	60f8      	str	r0, [r7, #12]
 800fc3e:	60b9      	str	r1, [r7, #8]
 800fc40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	68ba      	ldr	r2, [r7, #8]
 800fc46:	2100      	movs	r1, #0
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	f004 f94f 	bl	8013eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3710      	adds	r7, #16
 800fc54:	46bd      	mov	sp, r7
 800fc56:	bd80      	pop	{r7, pc}

0800fc58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fc58:	b580      	push	{r7, lr}
 800fc5a:	b082      	sub	sp, #8
 800fc5c:	af00      	add	r7, sp, #0
 800fc5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2204      	movs	r2, #4
 800fc64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fc68:	2300      	movs	r3, #0
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f004 f91b 	bl	8013eaa <USBD_LL_Transmit>

  return USBD_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2205      	movs	r2, #5
 800fc8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fc8e:	2300      	movs	r3, #0
 800fc90:	2200      	movs	r2, #0
 800fc92:	2100      	movs	r1, #0
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f004 f929 	bl	8013eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fc9a:	2300      	movs	r3, #0
}
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	3708      	adds	r7, #8
 800fca0:	46bd      	mov	sp, r7
 800fca2:	bd80      	pop	{r7, pc}

0800fca4 <__NVIC_SetPriority>:
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	4603      	mov	r3, r0
 800fcac:	6039      	str	r1, [r7, #0]
 800fcae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fcb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	db0a      	blt.n	800fcce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	b2da      	uxtb	r2, r3
 800fcbc:	490c      	ldr	r1, [pc, #48]	; (800fcf0 <__NVIC_SetPriority+0x4c>)
 800fcbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fcc2:	0112      	lsls	r2, r2, #4
 800fcc4:	b2d2      	uxtb	r2, r2
 800fcc6:	440b      	add	r3, r1
 800fcc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800fccc:	e00a      	b.n	800fce4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	b2da      	uxtb	r2, r3
 800fcd2:	4908      	ldr	r1, [pc, #32]	; (800fcf4 <__NVIC_SetPriority+0x50>)
 800fcd4:	79fb      	ldrb	r3, [r7, #7]
 800fcd6:	f003 030f 	and.w	r3, r3, #15
 800fcda:	3b04      	subs	r3, #4
 800fcdc:	0112      	lsls	r2, r2, #4
 800fcde:	b2d2      	uxtb	r2, r2
 800fce0:	440b      	add	r3, r1
 800fce2:	761a      	strb	r2, [r3, #24]
}
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr
 800fcf0:	e000e100 	.word	0xe000e100
 800fcf4:	e000ed00 	.word	0xe000ed00

0800fcf8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	f06f 0004 	mvn.w	r0, #4
 800fd02:	f7ff ffcf 	bl	800fca4 <__NVIC_SetPriority>
#endif
}
 800fd06:	bf00      	nop
 800fd08:	bd80      	pop	{r7, pc}
	...

0800fd0c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800fd0c:	b480      	push	{r7}
 800fd0e:	b083      	sub	sp, #12
 800fd10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd12:	f3ef 8305 	mrs	r3, IPSR
 800fd16:	603b      	str	r3, [r7, #0]
  return(result);
 800fd18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d003      	beq.n	800fd26 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800fd1e:	f06f 0305 	mvn.w	r3, #5
 800fd22:	607b      	str	r3, [r7, #4]
 800fd24:	e00c      	b.n	800fd40 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800fd26:	4b0a      	ldr	r3, [pc, #40]	; (800fd50 <osKernelInitialize+0x44>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d105      	bne.n	800fd3a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800fd2e:	4b08      	ldr	r3, [pc, #32]	; (800fd50 <osKernelInitialize+0x44>)
 800fd30:	2201      	movs	r2, #1
 800fd32:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800fd34:	2300      	movs	r3, #0
 800fd36:	607b      	str	r3, [r7, #4]
 800fd38:	e002      	b.n	800fd40 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800fd3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fd40:	687b      	ldr	r3, [r7, #4]
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	370c      	adds	r7, #12
 800fd46:	46bd      	mov	sp, r7
 800fd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4c:	4770      	bx	lr
 800fd4e:	bf00      	nop
 800fd50:	20000904 	.word	0x20000904

0800fd54 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd5a:	f3ef 8305 	mrs	r3, IPSR
 800fd5e:	603b      	str	r3, [r7, #0]
  return(result);
 800fd60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d003      	beq.n	800fd6e <osKernelStart+0x1a>
    stat = osErrorISR;
 800fd66:	f06f 0305 	mvn.w	r3, #5
 800fd6a:	607b      	str	r3, [r7, #4]
 800fd6c:	e010      	b.n	800fd90 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800fd6e:	4b0b      	ldr	r3, [pc, #44]	; (800fd9c <osKernelStart+0x48>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2b01      	cmp	r3, #1
 800fd74:	d109      	bne.n	800fd8a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800fd76:	f7ff ffbf 	bl	800fcf8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800fd7a:	4b08      	ldr	r3, [pc, #32]	; (800fd9c <osKernelStart+0x48>)
 800fd7c:	2202      	movs	r2, #2
 800fd7e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800fd80:	f001 fd38 	bl	80117f4 <vTaskStartScheduler>
      stat = osOK;
 800fd84:	2300      	movs	r3, #0
 800fd86:	607b      	str	r3, [r7, #4]
 800fd88:	e002      	b.n	800fd90 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800fd8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd8e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800fd90:	687b      	ldr	r3, [r7, #4]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3708      	adds	r7, #8
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	20000904 	.word	0x20000904

0800fda0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b082      	sub	sp, #8
 800fda4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fda6:	f3ef 8305 	mrs	r3, IPSR
 800fdaa:	603b      	str	r3, [r7, #0]
  return(result);
 800fdac:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d003      	beq.n	800fdba <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800fdb2:	f001 fe4b 	bl	8011a4c <xTaskGetTickCountFromISR>
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	e002      	b.n	800fdc0 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800fdba:	f001 fe37 	bl	8011a2c <xTaskGetTickCount>
 800fdbe:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800fdc0:	687b      	ldr	r3, [r7, #4]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3708      	adds	r7, #8
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}

0800fdca <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800fdca:	b580      	push	{r7, lr}
 800fdcc:	b08e      	sub	sp, #56	; 0x38
 800fdce:	af04      	add	r7, sp, #16
 800fdd0:	60f8      	str	r0, [r7, #12]
 800fdd2:	60b9      	str	r1, [r7, #8]
 800fdd4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fdda:	f3ef 8305 	mrs	r3, IPSR
 800fdde:	617b      	str	r3, [r7, #20]
  return(result);
 800fde0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d17e      	bne.n	800fee4 <osThreadNew+0x11a>
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d07b      	beq.n	800fee4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800fdec:	2380      	movs	r3, #128	; 0x80
 800fdee:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800fdf0:	2318      	movs	r3, #24
 800fdf2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800fdf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdfc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d045      	beq.n	800fe90 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d002      	beq.n	800fe12 <osThreadNew+0x48>
        name = attr->name;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d002      	beq.n	800fe20 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	699b      	ldr	r3, [r3, #24]
 800fe1e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d008      	beq.n	800fe38 <osThreadNew+0x6e>
 800fe26:	69fb      	ldr	r3, [r7, #28]
 800fe28:	2b38      	cmp	r3, #56	; 0x38
 800fe2a:	d805      	bhi.n	800fe38 <osThreadNew+0x6e>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	f003 0301 	and.w	r3, r3, #1
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d001      	beq.n	800fe3c <osThreadNew+0x72>
        return (NULL);
 800fe38:	2300      	movs	r3, #0
 800fe3a:	e054      	b.n	800fee6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	695b      	ldr	r3, [r3, #20]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d003      	beq.n	800fe4c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	695b      	ldr	r3, [r3, #20]
 800fe48:	089b      	lsrs	r3, r3, #2
 800fe4a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	689b      	ldr	r3, [r3, #8]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d00e      	beq.n	800fe72 <osThreadNew+0xa8>
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	68db      	ldr	r3, [r3, #12]
 800fe58:	2bbb      	cmp	r3, #187	; 0xbb
 800fe5a:	d90a      	bls.n	800fe72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d006      	beq.n	800fe72 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	695b      	ldr	r3, [r3, #20]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d002      	beq.n	800fe72 <osThreadNew+0xa8>
        mem = 1;
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	61bb      	str	r3, [r7, #24]
 800fe70:	e010      	b.n	800fe94 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	689b      	ldr	r3, [r3, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d10c      	bne.n	800fe94 <osThreadNew+0xca>
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	68db      	ldr	r3, [r3, #12]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d108      	bne.n	800fe94 <osThreadNew+0xca>
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	691b      	ldr	r3, [r3, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d104      	bne.n	800fe94 <osThreadNew+0xca>
          mem = 0;
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	61bb      	str	r3, [r7, #24]
 800fe8e:	e001      	b.n	800fe94 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800fe90:	2300      	movs	r3, #0
 800fe92:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	2b01      	cmp	r3, #1
 800fe98:	d110      	bne.n	800febc <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fea2:	9202      	str	r2, [sp, #8]
 800fea4:	9301      	str	r3, [sp, #4]
 800fea6:	69fb      	ldr	r3, [r7, #28]
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	6a3a      	ldr	r2, [r7, #32]
 800feae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f001 fa35 	bl	8011320 <xTaskCreateStatic>
 800feb6:	4603      	mov	r3, r0
 800feb8:	613b      	str	r3, [r7, #16]
 800feba:	e013      	b.n	800fee4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d110      	bne.n	800fee4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fec2:	6a3b      	ldr	r3, [r7, #32]
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	f107 0310 	add.w	r3, r7, #16
 800feca:	9301      	str	r3, [sp, #4]
 800fecc:	69fb      	ldr	r3, [r7, #28]
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f001 fa80 	bl	80113da <xTaskCreate>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d001      	beq.n	800fee4 <osThreadNew+0x11a>
            hTask = NULL;
 800fee0:	2300      	movs	r3, #0
 800fee2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fee4:	693b      	ldr	r3, [r7, #16]
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3728      	adds	r7, #40	; 0x28
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}

0800feee <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800feee:	b580      	push	{r7, lr}
 800fef0:	b084      	sub	sp, #16
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fef6:	f3ef 8305 	mrs	r3, IPSR
 800fefa:	60bb      	str	r3, [r7, #8]
  return(result);
 800fefc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d003      	beq.n	800ff0a <osDelay+0x1c>
    stat = osErrorISR;
 800ff02:	f06f 0305 	mvn.w	r3, #5
 800ff06:	60fb      	str	r3, [r7, #12]
 800ff08:	e007      	b.n	800ff1a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d002      	beq.n	800ff1a <osDelay+0x2c>
      vTaskDelay(ticks);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f001 fc39 	bl	801178c <vTaskDelay>
    }
  }

  return (stat);
 800ff1a:	68fb      	ldr	r3, [r7, #12]
}
 800ff1c:	4618      	mov	r0, r3
 800ff1e:	3710      	adds	r7, #16
 800ff20:	46bd      	mov	sp, r7
 800ff22:	bd80      	pop	{r7, pc}

0800ff24 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b086      	sub	sp, #24
 800ff28:	af00      	add	r7, sp, #0
 800ff2a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff2c:	f3ef 8305 	mrs	r3, IPSR
 800ff30:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff32:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d003      	beq.n	800ff40 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800ff38:	f06f 0305 	mvn.w	r3, #5
 800ff3c:	617b      	str	r3, [r7, #20]
 800ff3e:	e019      	b.n	800ff74 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 800ff40:	2300      	movs	r3, #0
 800ff42:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800ff44:	f001 fd72 	bl	8011a2c <xTaskGetTickCount>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 800ff4c:	68bb      	ldr	r3, [r7, #8]
 800ff4e:	687a      	ldr	r2, [r7, #4]
 800ff50:	1ad3      	subs	r3, r2, r3
 800ff52:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 800ff54:	693b      	ldr	r3, [r7, #16]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d009      	beq.n	800ff6e <osDelayUntil+0x4a>
 800ff5a:	693b      	ldr	r3, [r7, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	db06      	blt.n	800ff6e <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 800ff60:	f107 0308 	add.w	r3, r7, #8
 800ff64:	6939      	ldr	r1, [r7, #16]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f001 fb92 	bl	8011690 <vTaskDelayUntil>
 800ff6c:	e002      	b.n	800ff74 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 800ff6e:	f06f 0303 	mvn.w	r3, #3
 800ff72:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ff74:	697b      	ldr	r3, [r7, #20]
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3718      	adds	r7, #24
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}

0800ff7e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ff7e:	b580      	push	{r7, lr}
 800ff80:	b08a      	sub	sp, #40	; 0x28
 800ff82:	af02      	add	r7, sp, #8
 800ff84:	60f8      	str	r0, [r7, #12]
 800ff86:	60b9      	str	r1, [r7, #8]
 800ff88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ff8a:	2300      	movs	r3, #0
 800ff8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff8e:	f3ef 8305 	mrs	r3, IPSR
 800ff92:	613b      	str	r3, [r7, #16]
  return(result);
 800ff94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d175      	bne.n	8010086 <osSemaphoreNew+0x108>
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d072      	beq.n	8010086 <osSemaphoreNew+0x108>
 800ffa0:	68ba      	ldr	r2, [r7, #8]
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d86e      	bhi.n	8010086 <osSemaphoreNew+0x108>
    mem = -1;
 800ffa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ffac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d015      	beq.n	800ffe0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d006      	beq.n	800ffca <osSemaphoreNew+0x4c>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	2b4f      	cmp	r3, #79	; 0x4f
 800ffc2:	d902      	bls.n	800ffca <osSemaphoreNew+0x4c>
        mem = 1;
 800ffc4:	2301      	movs	r3, #1
 800ffc6:	61bb      	str	r3, [r7, #24]
 800ffc8:	e00c      	b.n	800ffe4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	689b      	ldr	r3, [r3, #8]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d108      	bne.n	800ffe4 <osSemaphoreNew+0x66>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d104      	bne.n	800ffe4 <osSemaphoreNew+0x66>
          mem = 0;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	61bb      	str	r3, [r7, #24]
 800ffde:	e001      	b.n	800ffe4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ffe4:	69bb      	ldr	r3, [r7, #24]
 800ffe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffea:	d04c      	beq.n	8010086 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	2b01      	cmp	r3, #1
 800fff0:	d128      	bne.n	8010044 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800fff2:	69bb      	ldr	r3, [r7, #24]
 800fff4:	2b01      	cmp	r3, #1
 800fff6:	d10a      	bne.n	801000e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	2203      	movs	r2, #3
 800fffe:	9200      	str	r2, [sp, #0]
 8010000:	2200      	movs	r2, #0
 8010002:	2100      	movs	r1, #0
 8010004:	2001      	movs	r0, #1
 8010006:	f000 fb09 	bl	801061c <xQueueGenericCreateStatic>
 801000a:	61f8      	str	r0, [r7, #28]
 801000c:	e005      	b.n	801001a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 801000e:	2203      	movs	r2, #3
 8010010:	2100      	movs	r1, #0
 8010012:	2001      	movs	r0, #1
 8010014:	f000 fb7a 	bl	801070c <xQueueGenericCreate>
 8010018:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801001a:	69fb      	ldr	r3, [r7, #28]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d022      	beq.n	8010066 <osSemaphoreNew+0xe8>
 8010020:	68bb      	ldr	r3, [r7, #8]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d01f      	beq.n	8010066 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010026:	2300      	movs	r3, #0
 8010028:	2200      	movs	r2, #0
 801002a:	2100      	movs	r1, #0
 801002c:	69f8      	ldr	r0, [r7, #28]
 801002e:	f000 fc35 	bl	801089c <xQueueGenericSend>
 8010032:	4603      	mov	r3, r0
 8010034:	2b01      	cmp	r3, #1
 8010036:	d016      	beq.n	8010066 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010038:	69f8      	ldr	r0, [r7, #28]
 801003a:	f000 ffb5 	bl	8010fa8 <vQueueDelete>
            hSemaphore = NULL;
 801003e:	2300      	movs	r3, #0
 8010040:	61fb      	str	r3, [r7, #28]
 8010042:	e010      	b.n	8010066 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	2b01      	cmp	r3, #1
 8010048:	d108      	bne.n	801005c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	689b      	ldr	r3, [r3, #8]
 801004e:	461a      	mov	r2, r3
 8010050:	68b9      	ldr	r1, [r7, #8]
 8010052:	68f8      	ldr	r0, [r7, #12]
 8010054:	f000 fbb7 	bl	80107c6 <xQueueCreateCountingSemaphoreStatic>
 8010058:	61f8      	str	r0, [r7, #28]
 801005a:	e004      	b.n	8010066 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801005c:	68b9      	ldr	r1, [r7, #8]
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 fbe8 	bl	8010834 <xQueueCreateCountingSemaphore>
 8010064:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010066:	69fb      	ldr	r3, [r7, #28]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d00c      	beq.n	8010086 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d003      	beq.n	801007a <osSemaphoreNew+0xfc>
          name = attr->name;
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	617b      	str	r3, [r7, #20]
 8010078:	e001      	b.n	801007e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801007a:	2300      	movs	r3, #0
 801007c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801007e:	6979      	ldr	r1, [r7, #20]
 8010080:	69f8      	ldr	r0, [r7, #28]
 8010082:	f001 f8c5 	bl	8011210 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010086:	69fb      	ldr	r3, [r7, #28]
}
 8010088:	4618      	mov	r0, r3
 801008a:	3720      	adds	r7, #32
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8010090:	b580      	push	{r7, lr}
 8010092:	b086      	sub	sp, #24
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801009c:	2300      	movs	r3, #0
 801009e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d103      	bne.n	80100ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80100a6:	f06f 0303 	mvn.w	r3, #3
 80100aa:	617b      	str	r3, [r7, #20]
 80100ac:	e02c      	b.n	8010108 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80100ae:	f3ef 8305 	mrs	r3, IPSR
 80100b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80100b4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d01a      	beq.n	80100f0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80100ba:	2300      	movs	r3, #0
 80100bc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80100be:	f107 0308 	add.w	r3, r7, #8
 80100c2:	4619      	mov	r1, r3
 80100c4:	6938      	ldr	r0, [r7, #16]
 80100c6:	f000 fd82 	bl	8010bce <xQueueGiveFromISR>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b01      	cmp	r3, #1
 80100ce:	d003      	beq.n	80100d8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80100d0:	f06f 0302 	mvn.w	r3, #2
 80100d4:	617b      	str	r3, [r7, #20]
 80100d6:	e017      	b.n	8010108 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d014      	beq.n	8010108 <osSemaphoreRelease+0x78>
 80100de:	4b0d      	ldr	r3, [pc, #52]	; (8010114 <osSemaphoreRelease+0x84>)
 80100e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100e4:	601a      	str	r2, [r3, #0]
 80100e6:	f3bf 8f4f 	dsb	sy
 80100ea:	f3bf 8f6f 	isb	sy
 80100ee:	e00b      	b.n	8010108 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80100f0:	2300      	movs	r3, #0
 80100f2:	2200      	movs	r2, #0
 80100f4:	2100      	movs	r1, #0
 80100f6:	6938      	ldr	r0, [r7, #16]
 80100f8:	f000 fbd0 	bl	801089c <xQueueGenericSend>
 80100fc:	4603      	mov	r3, r0
 80100fe:	2b01      	cmp	r3, #1
 8010100:	d002      	beq.n	8010108 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8010102:	f06f 0302 	mvn.w	r3, #2
 8010106:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8010108:	697b      	ldr	r3, [r7, #20]
}
 801010a:	4618      	mov	r0, r3
 801010c:	3718      	adds	r7, #24
 801010e:	46bd      	mov	sp, r7
 8010110:	bd80      	pop	{r7, pc}
 8010112:	bf00      	nop
 8010114:	e000ed04 	.word	0xe000ed04

08010118 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8010118:	b580      	push	{r7, lr}
 801011a:	b08a      	sub	sp, #40	; 0x28
 801011c:	af02      	add	r7, sp, #8
 801011e:	60f8      	str	r0, [r7, #12]
 8010120:	60b9      	str	r1, [r7, #8]
 8010122:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8010124:	2300      	movs	r3, #0
 8010126:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010128:	f3ef 8305 	mrs	r3, IPSR
 801012c:	613b      	str	r3, [r7, #16]
  return(result);
 801012e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8010130:	2b00      	cmp	r3, #0
 8010132:	d15f      	bne.n	80101f4 <osMessageQueueNew+0xdc>
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d05c      	beq.n	80101f4 <osMessageQueueNew+0xdc>
 801013a:	68bb      	ldr	r3, [r7, #8]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d059      	beq.n	80101f4 <osMessageQueueNew+0xdc>
    mem = -1;
 8010140:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010144:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2b00      	cmp	r3, #0
 801014a:	d029      	beq.n	80101a0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	689b      	ldr	r3, [r3, #8]
 8010150:	2b00      	cmp	r3, #0
 8010152:	d012      	beq.n	801017a <osMessageQueueNew+0x62>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	68db      	ldr	r3, [r3, #12]
 8010158:	2b4f      	cmp	r3, #79	; 0x4f
 801015a:	d90e      	bls.n	801017a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010160:	2b00      	cmp	r3, #0
 8010162:	d00a      	beq.n	801017a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	695a      	ldr	r2, [r3, #20]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	68b9      	ldr	r1, [r7, #8]
 801016c:	fb01 f303 	mul.w	r3, r1, r3
 8010170:	429a      	cmp	r2, r3
 8010172:	d302      	bcc.n	801017a <osMessageQueueNew+0x62>
        mem = 1;
 8010174:	2301      	movs	r3, #1
 8010176:	61bb      	str	r3, [r7, #24]
 8010178:	e014      	b.n	80101a4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	689b      	ldr	r3, [r3, #8]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d110      	bne.n	80101a4 <osMessageQueueNew+0x8c>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	68db      	ldr	r3, [r3, #12]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d10c      	bne.n	80101a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801018e:	2b00      	cmp	r3, #0
 8010190:	d108      	bne.n	80101a4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	695b      	ldr	r3, [r3, #20]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d104      	bne.n	80101a4 <osMessageQueueNew+0x8c>
          mem = 0;
 801019a:	2300      	movs	r3, #0
 801019c:	61bb      	str	r3, [r7, #24]
 801019e:	e001      	b.n	80101a4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80101a0:	2300      	movs	r3, #0
 80101a2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80101a4:	69bb      	ldr	r3, [r7, #24]
 80101a6:	2b01      	cmp	r3, #1
 80101a8:	d10b      	bne.n	80101c2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	691a      	ldr	r2, [r3, #16]
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	689b      	ldr	r3, [r3, #8]
 80101b2:	2100      	movs	r1, #0
 80101b4:	9100      	str	r1, [sp, #0]
 80101b6:	68b9      	ldr	r1, [r7, #8]
 80101b8:	68f8      	ldr	r0, [r7, #12]
 80101ba:	f000 fa2f 	bl	801061c <xQueueGenericCreateStatic>
 80101be:	61f8      	str	r0, [r7, #28]
 80101c0:	e008      	b.n	80101d4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80101c2:	69bb      	ldr	r3, [r7, #24]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d105      	bne.n	80101d4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80101c8:	2200      	movs	r2, #0
 80101ca:	68b9      	ldr	r1, [r7, #8]
 80101cc:	68f8      	ldr	r0, [r7, #12]
 80101ce:	f000 fa9d 	bl	801070c <xQueueGenericCreate>
 80101d2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00c      	beq.n	80101f4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d003      	beq.n	80101e8 <osMessageQueueNew+0xd0>
        name = attr->name;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	617b      	str	r3, [r7, #20]
 80101e6:	e001      	b.n	80101ec <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80101e8:	2300      	movs	r3, #0
 80101ea:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80101ec:	6979      	ldr	r1, [r7, #20]
 80101ee:	69f8      	ldr	r0, [r7, #28]
 80101f0:	f001 f80e 	bl	8011210 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80101f4:	69fb      	ldr	r3, [r7, #28]
}
 80101f6:	4618      	mov	r0, r3
 80101f8:	3720      	adds	r7, #32
 80101fa:	46bd      	mov	sp, r7
 80101fc:	bd80      	pop	{r7, pc}
	...

08010200 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8010200:	b580      	push	{r7, lr}
 8010202:	b088      	sub	sp, #32
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	603b      	str	r3, [r7, #0]
 801020c:	4613      	mov	r3, r2
 801020e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8010214:	2300      	movs	r3, #0
 8010216:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010218:	f3ef 8305 	mrs	r3, IPSR
 801021c:	617b      	str	r3, [r7, #20]
  return(result);
 801021e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8010220:	2b00      	cmp	r3, #0
 8010222:	d028      	beq.n	8010276 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010224:	69bb      	ldr	r3, [r7, #24]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d005      	beq.n	8010236 <osMessageQueuePut+0x36>
 801022a:	68bb      	ldr	r3, [r7, #8]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d002      	beq.n	8010236 <osMessageQueuePut+0x36>
 8010230:	683b      	ldr	r3, [r7, #0]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d003      	beq.n	801023e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8010236:	f06f 0303 	mvn.w	r3, #3
 801023a:	61fb      	str	r3, [r7, #28]
 801023c:	e038      	b.n	80102b0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801023e:	2300      	movs	r3, #0
 8010240:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010242:	f107 0210 	add.w	r2, r7, #16
 8010246:	2300      	movs	r3, #0
 8010248:	68b9      	ldr	r1, [r7, #8]
 801024a:	69b8      	ldr	r0, [r7, #24]
 801024c:	f000 fc24 	bl	8010a98 <xQueueGenericSendFromISR>
 8010250:	4603      	mov	r3, r0
 8010252:	2b01      	cmp	r3, #1
 8010254:	d003      	beq.n	801025e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8010256:	f06f 0302 	mvn.w	r3, #2
 801025a:	61fb      	str	r3, [r7, #28]
 801025c:	e028      	b.n	80102b0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d025      	beq.n	80102b0 <osMessageQueuePut+0xb0>
 8010264:	4b15      	ldr	r3, [pc, #84]	; (80102bc <osMessageQueuePut+0xbc>)
 8010266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026a:	601a      	str	r2, [r3, #0]
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	f3bf 8f6f 	isb	sy
 8010274:	e01c      	b.n	80102b0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d002      	beq.n	8010282 <osMessageQueuePut+0x82>
 801027c:	68bb      	ldr	r3, [r7, #8]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d103      	bne.n	801028a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8010282:	f06f 0303 	mvn.w	r3, #3
 8010286:	61fb      	str	r3, [r7, #28]
 8010288:	e012      	b.n	80102b0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801028a:	2300      	movs	r3, #0
 801028c:	683a      	ldr	r2, [r7, #0]
 801028e:	68b9      	ldr	r1, [r7, #8]
 8010290:	69b8      	ldr	r0, [r7, #24]
 8010292:	f000 fb03 	bl	801089c <xQueueGenericSend>
 8010296:	4603      	mov	r3, r0
 8010298:	2b01      	cmp	r3, #1
 801029a:	d009      	beq.n	80102b0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	2b00      	cmp	r3, #0
 80102a0:	d003      	beq.n	80102aa <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80102a2:	f06f 0301 	mvn.w	r3, #1
 80102a6:	61fb      	str	r3, [r7, #28]
 80102a8:	e002      	b.n	80102b0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80102aa:	f06f 0302 	mvn.w	r3, #2
 80102ae:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80102b0:	69fb      	ldr	r3, [r7, #28]
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	3720      	adds	r7, #32
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	e000ed04 	.word	0xe000ed04

080102c0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80102c0:	b580      	push	{r7, lr}
 80102c2:	b088      	sub	sp, #32
 80102c4:	af00      	add	r7, sp, #0
 80102c6:	60f8      	str	r0, [r7, #12]
 80102c8:	60b9      	str	r1, [r7, #8]
 80102ca:	607a      	str	r2, [r7, #4]
 80102cc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80102d2:	2300      	movs	r3, #0
 80102d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102d6:	f3ef 8305 	mrs	r3, IPSR
 80102da:	617b      	str	r3, [r7, #20]
  return(result);
 80102dc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d028      	beq.n	8010334 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d005      	beq.n	80102f4 <osMessageQueueGet+0x34>
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d002      	beq.n	80102f4 <osMessageQueueGet+0x34>
 80102ee:	683b      	ldr	r3, [r7, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d003      	beq.n	80102fc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80102f4:	f06f 0303 	mvn.w	r3, #3
 80102f8:	61fb      	str	r3, [r7, #28]
 80102fa:	e037      	b.n	801036c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80102fc:	2300      	movs	r3, #0
 80102fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8010300:	f107 0310 	add.w	r3, r7, #16
 8010304:	461a      	mov	r2, r3
 8010306:	68b9      	ldr	r1, [r7, #8]
 8010308:	69b8      	ldr	r0, [r7, #24]
 801030a:	f000 fdcd 	bl	8010ea8 <xQueueReceiveFromISR>
 801030e:	4603      	mov	r3, r0
 8010310:	2b01      	cmp	r3, #1
 8010312:	d003      	beq.n	801031c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8010314:	f06f 0302 	mvn.w	r3, #2
 8010318:	61fb      	str	r3, [r7, #28]
 801031a:	e027      	b.n	801036c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d024      	beq.n	801036c <osMessageQueueGet+0xac>
 8010322:	4b15      	ldr	r3, [pc, #84]	; (8010378 <osMessageQueueGet+0xb8>)
 8010324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010328:	601a      	str	r2, [r3, #0]
 801032a:	f3bf 8f4f 	dsb	sy
 801032e:	f3bf 8f6f 	isb	sy
 8010332:	e01b      	b.n	801036c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010334:	69bb      	ldr	r3, [r7, #24]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d002      	beq.n	8010340 <osMessageQueueGet+0x80>
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d103      	bne.n	8010348 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8010340:	f06f 0303 	mvn.w	r3, #3
 8010344:	61fb      	str	r3, [r7, #28]
 8010346:	e011      	b.n	801036c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010348:	683a      	ldr	r2, [r7, #0]
 801034a:	68b9      	ldr	r1, [r7, #8]
 801034c:	69b8      	ldr	r0, [r7, #24]
 801034e:	f000 fccb 	bl	8010ce8 <xQueueReceive>
 8010352:	4603      	mov	r3, r0
 8010354:	2b01      	cmp	r3, #1
 8010356:	d009      	beq.n	801036c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	2b00      	cmp	r3, #0
 801035c:	d003      	beq.n	8010366 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801035e:	f06f 0301 	mvn.w	r3, #1
 8010362:	61fb      	str	r3, [r7, #28]
 8010364:	e002      	b.n	801036c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8010366:	f06f 0302 	mvn.w	r3, #2
 801036a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801036c:	69fb      	ldr	r3, [r7, #28]
}
 801036e:	4618      	mov	r0, r3
 8010370:	3720      	adds	r7, #32
 8010372:	46bd      	mov	sp, r7
 8010374:	bd80      	pop	{r7, pc}
 8010376:	bf00      	nop
 8010378:	e000ed04 	.word	0xe000ed04

0801037c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 801037c:	b480      	push	{r7}
 801037e:	b085      	sub	sp, #20
 8010380:	af00      	add	r7, sp, #0
 8010382:	60f8      	str	r0, [r7, #12]
 8010384:	60b9      	str	r1, [r7, #8]
 8010386:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	4a07      	ldr	r2, [pc, #28]	; (80103a8 <vApplicationGetIdleTaskMemory+0x2c>)
 801038c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	4a06      	ldr	r2, [pc, #24]	; (80103ac <vApplicationGetIdleTaskMemory+0x30>)
 8010392:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2280      	movs	r2, #128	; 0x80
 8010398:	601a      	str	r2, [r3, #0]
}
 801039a:	bf00      	nop
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
 80103a6:	bf00      	nop
 80103a8:	20000908 	.word	0x20000908
 80103ac:	200009c4 	.word	0x200009c4

080103b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80103b0:	b480      	push	{r7}
 80103b2:	b085      	sub	sp, #20
 80103b4:	af00      	add	r7, sp, #0
 80103b6:	60f8      	str	r0, [r7, #12]
 80103b8:	60b9      	str	r1, [r7, #8]
 80103ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	4a07      	ldr	r2, [pc, #28]	; (80103dc <vApplicationGetTimerTaskMemory+0x2c>)
 80103c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	4a06      	ldr	r2, [pc, #24]	; (80103e0 <vApplicationGetTimerTaskMemory+0x30>)
 80103c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103ce:	601a      	str	r2, [r3, #0]
}
 80103d0:	bf00      	nop
 80103d2:	3714      	adds	r7, #20
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr
 80103dc:	20000bc4 	.word	0x20000bc4
 80103e0:	20000c80 	.word	0x20000c80

080103e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80103e4:	b480      	push	{r7}
 80103e6:	b083      	sub	sp, #12
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f103 0208 	add.w	r2, r3, #8
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	f103 0208 	add.w	r2, r3, #8
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f103 0208 	add.w	r2, r3, #8
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010418:	bf00      	nop
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010432:	bf00      	nop
 8010434:	370c      	adds	r7, #12
 8010436:	46bd      	mov	sp, r7
 8010438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043c:	4770      	bx	lr

0801043e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801043e:	b480      	push	{r7}
 8010440:	b085      	sub	sp, #20
 8010442:	af00      	add	r7, sp, #0
 8010444:	6078      	str	r0, [r7, #4]
 8010446:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	689a      	ldr	r2, [r3, #8]
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	689b      	ldr	r3, [r3, #8]
 8010460:	683a      	ldr	r2, [r7, #0]
 8010462:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	683a      	ldr	r2, [r7, #0]
 8010468:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	687a      	ldr	r2, [r7, #4]
 801046e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	1c5a      	adds	r2, r3, #1
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	601a      	str	r2, [r3, #0]
}
 801047a:	bf00      	nop
 801047c:	3714      	adds	r7, #20
 801047e:	46bd      	mov	sp, r7
 8010480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010484:	4770      	bx	lr

08010486 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010486:	b480      	push	{r7}
 8010488:	b085      	sub	sp, #20
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801049c:	d103      	bne.n	80104a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	691b      	ldr	r3, [r3, #16]
 80104a2:	60fb      	str	r3, [r7, #12]
 80104a4:	e00c      	b.n	80104c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	3308      	adds	r3, #8
 80104aa:	60fb      	str	r3, [r7, #12]
 80104ac:	e002      	b.n	80104b4 <vListInsert+0x2e>
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	685b      	ldr	r3, [r3, #4]
 80104b2:	60fb      	str	r3, [r7, #12]
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	685b      	ldr	r3, [r3, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	68ba      	ldr	r2, [r7, #8]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d2f6      	bcs.n	80104ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	685a      	ldr	r2, [r3, #4]
 80104c4:	683b      	ldr	r3, [r7, #0]
 80104c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	685b      	ldr	r3, [r3, #4]
 80104cc:	683a      	ldr	r2, [r7, #0]
 80104ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	683a      	ldr	r2, [r7, #0]
 80104da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	1c5a      	adds	r2, r3, #1
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	601a      	str	r2, [r3, #0]
}
 80104ec:	bf00      	nop
 80104ee:	3714      	adds	r7, #20
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr

080104f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80104f8:	b480      	push	{r7}
 80104fa:	b085      	sub	sp, #20
 80104fc:	af00      	add	r7, sp, #0
 80104fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	691b      	ldr	r3, [r3, #16]
 8010504:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	685b      	ldr	r3, [r3, #4]
 801050a:	687a      	ldr	r2, [r7, #4]
 801050c:	6892      	ldr	r2, [r2, #8]
 801050e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	689b      	ldr	r3, [r3, #8]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	6852      	ldr	r2, [r2, #4]
 8010518:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	685b      	ldr	r3, [r3, #4]
 801051e:	687a      	ldr	r2, [r7, #4]
 8010520:	429a      	cmp	r2, r3
 8010522:	d103      	bne.n	801052c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	689a      	ldr	r2, [r3, #8]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	1e5a      	subs	r2, r3, #1
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
}
 8010540:	4618      	mov	r0, r3
 8010542:	3714      	adds	r7, #20
 8010544:	46bd      	mov	sp, r7
 8010546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054a:	4770      	bx	lr

0801054c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b084      	sub	sp, #16
 8010550:	af00      	add	r7, sp, #0
 8010552:	6078      	str	r0, [r7, #4]
 8010554:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d10a      	bne.n	8010576 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010564:	f383 8811 	msr	BASEPRI, r3
 8010568:	f3bf 8f6f 	isb	sy
 801056c:	f3bf 8f4f 	dsb	sy
 8010570:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010572:	bf00      	nop
 8010574:	e7fe      	b.n	8010574 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8010576:	f002 fb05 	bl	8012b84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	681a      	ldr	r2, [r3, #0]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010582:	68f9      	ldr	r1, [r7, #12]
 8010584:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010586:	fb01 f303 	mul.w	r3, r1, r3
 801058a:	441a      	add	r2, r3
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2200      	movs	r2, #0
 8010594:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	681a      	ldr	r2, [r3, #0]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80105a6:	3b01      	subs	r3, #1
 80105a8:	68f9      	ldr	r1, [r7, #12]
 80105aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80105ac:	fb01 f303 	mul.w	r3, r1, r3
 80105b0:	441a      	add	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	22ff      	movs	r2, #255	; 0xff
 80105ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	22ff      	movs	r2, #255	; 0xff
 80105c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d114      	bne.n	80105f6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	691b      	ldr	r3, [r3, #16]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d01a      	beq.n	801060a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	3310      	adds	r3, #16
 80105d8:	4618      	mov	r0, r3
 80105da:	f001 fbb7 	bl	8011d4c <xTaskRemoveFromEventList>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d012      	beq.n	801060a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80105e4:	4b0c      	ldr	r3, [pc, #48]	; (8010618 <xQueueGenericReset+0xcc>)
 80105e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105ea:	601a      	str	r2, [r3, #0]
 80105ec:	f3bf 8f4f 	dsb	sy
 80105f0:	f3bf 8f6f 	isb	sy
 80105f4:	e009      	b.n	801060a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	3310      	adds	r3, #16
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7ff fef2 	bl	80103e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	3324      	adds	r3, #36	; 0x24
 8010604:	4618      	mov	r0, r3
 8010606:	f7ff feed 	bl	80103e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801060a:	f002 faeb 	bl	8012be4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801060e:	2301      	movs	r3, #1
}
 8010610:	4618      	mov	r0, r3
 8010612:	3710      	adds	r7, #16
 8010614:	46bd      	mov	sp, r7
 8010616:	bd80      	pop	{r7, pc}
 8010618:	e000ed04 	.word	0xe000ed04

0801061c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801061c:	b580      	push	{r7, lr}
 801061e:	b08e      	sub	sp, #56	; 0x38
 8010620:	af02      	add	r7, sp, #8
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	607a      	str	r2, [r7, #4]
 8010628:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10a      	bne.n	8010646 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8010630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010634:	f383 8811 	msr	BASEPRI, r3
 8010638:	f3bf 8f6f 	isb	sy
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010642:	bf00      	nop
 8010644:	e7fe      	b.n	8010644 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010646:	683b      	ldr	r3, [r7, #0]
 8010648:	2b00      	cmp	r3, #0
 801064a:	d10a      	bne.n	8010662 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801064c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010650:	f383 8811 	msr	BASEPRI, r3
 8010654:	f3bf 8f6f 	isb	sy
 8010658:	f3bf 8f4f 	dsb	sy
 801065c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801065e:	bf00      	nop
 8010660:	e7fe      	b.n	8010660 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	2b00      	cmp	r3, #0
 8010666:	d002      	beq.n	801066e <xQueueGenericCreateStatic+0x52>
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d001      	beq.n	8010672 <xQueueGenericCreateStatic+0x56>
 801066e:	2301      	movs	r3, #1
 8010670:	e000      	b.n	8010674 <xQueueGenericCreateStatic+0x58>
 8010672:	2300      	movs	r3, #0
 8010674:	2b00      	cmp	r3, #0
 8010676:	d10a      	bne.n	801068e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8010678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	623b      	str	r3, [r7, #32]
}
 801068a:	bf00      	nop
 801068c:	e7fe      	b.n	801068c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d102      	bne.n	801069a <xQueueGenericCreateStatic+0x7e>
 8010694:	68bb      	ldr	r3, [r7, #8]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d101      	bne.n	801069e <xQueueGenericCreateStatic+0x82>
 801069a:	2301      	movs	r3, #1
 801069c:	e000      	b.n	80106a0 <xQueueGenericCreateStatic+0x84>
 801069e:	2300      	movs	r3, #0
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d10a      	bne.n	80106ba <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80106a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	61fb      	str	r3, [r7, #28]
}
 80106b6:	bf00      	nop
 80106b8:	e7fe      	b.n	80106b8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80106ba:	2350      	movs	r3, #80	; 0x50
 80106bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	2b50      	cmp	r3, #80	; 0x50
 80106c2:	d00a      	beq.n	80106da <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80106c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106c8:	f383 8811 	msr	BASEPRI, r3
 80106cc:	f3bf 8f6f 	isb	sy
 80106d0:	f3bf 8f4f 	dsb	sy
 80106d4:	61bb      	str	r3, [r7, #24]
}
 80106d6:	bf00      	nop
 80106d8:	e7fe      	b.n	80106d8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80106da:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80106dc:	683b      	ldr	r3, [r7, #0]
 80106de:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80106e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d00d      	beq.n	8010702 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80106e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e8:	2201      	movs	r2, #1
 80106ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80106ee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80106f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f4:	9300      	str	r3, [sp, #0]
 80106f6:	4613      	mov	r3, r2
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	68b9      	ldr	r1, [r7, #8]
 80106fc:	68f8      	ldr	r0, [r7, #12]
 80106fe:	f000 f83f 	bl	8010780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010704:	4618      	mov	r0, r3
 8010706:	3730      	adds	r7, #48	; 0x30
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}

0801070c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801070c:	b580      	push	{r7, lr}
 801070e:	b08a      	sub	sp, #40	; 0x28
 8010710:	af02      	add	r7, sp, #8
 8010712:	60f8      	str	r0, [r7, #12]
 8010714:	60b9      	str	r1, [r7, #8]
 8010716:	4613      	mov	r3, r2
 8010718:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d10a      	bne.n	8010736 <xQueueGenericCreate+0x2a>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	613b      	str	r3, [r7, #16]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	68ba      	ldr	r2, [r7, #8]
 801073a:	fb02 f303 	mul.w	r3, r2, r3
 801073e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010740:	69fb      	ldr	r3, [r7, #28]
 8010742:	3350      	adds	r3, #80	; 0x50
 8010744:	4618      	mov	r0, r3
 8010746:	f002 fb3f 	bl	8012dc8 <pvPortMalloc>
 801074a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d011      	beq.n	8010776 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010752:	69bb      	ldr	r3, [r7, #24]
 8010754:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	3350      	adds	r3, #80	; 0x50
 801075a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010764:	79fa      	ldrb	r2, [r7, #7]
 8010766:	69bb      	ldr	r3, [r7, #24]
 8010768:	9300      	str	r3, [sp, #0]
 801076a:	4613      	mov	r3, r2
 801076c:	697a      	ldr	r2, [r7, #20]
 801076e:	68b9      	ldr	r1, [r7, #8]
 8010770:	68f8      	ldr	r0, [r7, #12]
 8010772:	f000 f805 	bl	8010780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010776:	69bb      	ldr	r3, [r7, #24]
	}
 8010778:	4618      	mov	r0, r3
 801077a:	3720      	adds	r7, #32
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b084      	sub	sp, #16
 8010784:	af00      	add	r7, sp, #0
 8010786:	60f8      	str	r0, [r7, #12]
 8010788:	60b9      	str	r1, [r7, #8]
 801078a:	607a      	str	r2, [r7, #4]
 801078c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d103      	bne.n	801079c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	69ba      	ldr	r2, [r7, #24]
 8010798:	601a      	str	r2, [r3, #0]
 801079a:	e002      	b.n	80107a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	687a      	ldr	r2, [r7, #4]
 80107a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80107a2:	69bb      	ldr	r3, [r7, #24]
 80107a4:	68fa      	ldr	r2, [r7, #12]
 80107a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	68ba      	ldr	r2, [r7, #8]
 80107ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80107ae:	2101      	movs	r1, #1
 80107b0:	69b8      	ldr	r0, [r7, #24]
 80107b2:	f7ff fecb 	bl	801054c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	78fa      	ldrb	r2, [r7, #3]
 80107ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80107be:	bf00      	nop
 80107c0:	3710      	adds	r7, #16
 80107c2:	46bd      	mov	sp, r7
 80107c4:	bd80      	pop	{r7, pc}

080107c6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80107c6:	b580      	push	{r7, lr}
 80107c8:	b08a      	sub	sp, #40	; 0x28
 80107ca:	af02      	add	r7, sp, #8
 80107cc:	60f8      	str	r0, [r7, #12]
 80107ce:	60b9      	str	r1, [r7, #8]
 80107d0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10a      	bne.n	80107ee <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80107d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107dc:	f383 8811 	msr	BASEPRI, r3
 80107e0:	f3bf 8f6f 	isb	sy
 80107e4:	f3bf 8f4f 	dsb	sy
 80107e8:	61bb      	str	r3, [r7, #24]
}
 80107ea:	bf00      	nop
 80107ec:	e7fe      	b.n	80107ec <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80107ee:	68ba      	ldr	r2, [r7, #8]
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d90a      	bls.n	801080c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	617b      	str	r3, [r7, #20]
}
 8010808:	bf00      	nop
 801080a:	e7fe      	b.n	801080a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801080c:	2302      	movs	r3, #2
 801080e:	9300      	str	r3, [sp, #0]
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2200      	movs	r2, #0
 8010814:	2100      	movs	r1, #0
 8010816:	68f8      	ldr	r0, [r7, #12]
 8010818:	f7ff ff00 	bl	801061c <xQueueGenericCreateStatic>
 801081c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d002      	beq.n	801082a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8010824:	69fb      	ldr	r3, [r7, #28]
 8010826:	68ba      	ldr	r2, [r7, #8]
 8010828:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801082a:	69fb      	ldr	r3, [r7, #28]
	}
 801082c:	4618      	mov	r0, r3
 801082e:	3720      	adds	r7, #32
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}

08010834 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8010834:	b580      	push	{r7, lr}
 8010836:	b086      	sub	sp, #24
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d10a      	bne.n	801085a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8010844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010848:	f383 8811 	msr	BASEPRI, r3
 801084c:	f3bf 8f6f 	isb	sy
 8010850:	f3bf 8f4f 	dsb	sy
 8010854:	613b      	str	r3, [r7, #16]
}
 8010856:	bf00      	nop
 8010858:	e7fe      	b.n	8010858 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801085a:	683a      	ldr	r2, [r7, #0]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	429a      	cmp	r2, r3
 8010860:	d90a      	bls.n	8010878 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8010862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010866:	f383 8811 	msr	BASEPRI, r3
 801086a:	f3bf 8f6f 	isb	sy
 801086e:	f3bf 8f4f 	dsb	sy
 8010872:	60fb      	str	r3, [r7, #12]
}
 8010874:	bf00      	nop
 8010876:	e7fe      	b.n	8010876 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8010878:	2202      	movs	r2, #2
 801087a:	2100      	movs	r1, #0
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f7ff ff45 	bl	801070c <xQueueGenericCreate>
 8010882:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	2b00      	cmp	r3, #0
 8010888:	d002      	beq.n	8010890 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801088a:	697b      	ldr	r3, [r7, #20]
 801088c:	683a      	ldr	r2, [r7, #0]
 801088e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010890:	697b      	ldr	r3, [r7, #20]
	}
 8010892:	4618      	mov	r0, r3
 8010894:	3718      	adds	r7, #24
 8010896:	46bd      	mov	sp, r7
 8010898:	bd80      	pop	{r7, pc}
	...

0801089c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801089c:	b580      	push	{r7, lr}
 801089e:	b08e      	sub	sp, #56	; 0x38
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
 80108a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80108aa:	2300      	movs	r3, #0
 80108ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80108b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d10a      	bne.n	80108ce <xQueueGenericSend+0x32>
	__asm volatile
 80108b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108bc:	f383 8811 	msr	BASEPRI, r3
 80108c0:	f3bf 8f6f 	isb	sy
 80108c4:	f3bf 8f4f 	dsb	sy
 80108c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80108ca:	bf00      	nop
 80108cc:	e7fe      	b.n	80108cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d103      	bne.n	80108dc <xQueueGenericSend+0x40>
 80108d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d101      	bne.n	80108e0 <xQueueGenericSend+0x44>
 80108dc:	2301      	movs	r3, #1
 80108de:	e000      	b.n	80108e2 <xQueueGenericSend+0x46>
 80108e0:	2300      	movs	r3, #0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d10a      	bne.n	80108fc <xQueueGenericSend+0x60>
	__asm volatile
 80108e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80108f8:	bf00      	nop
 80108fa:	e7fe      	b.n	80108fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80108fc:	683b      	ldr	r3, [r7, #0]
 80108fe:	2b02      	cmp	r3, #2
 8010900:	d103      	bne.n	801090a <xQueueGenericSend+0x6e>
 8010902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010906:	2b01      	cmp	r3, #1
 8010908:	d101      	bne.n	801090e <xQueueGenericSend+0x72>
 801090a:	2301      	movs	r3, #1
 801090c:	e000      	b.n	8010910 <xQueueGenericSend+0x74>
 801090e:	2300      	movs	r3, #0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d10a      	bne.n	801092a <xQueueGenericSend+0x8e>
	__asm volatile
 8010914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010918:	f383 8811 	msr	BASEPRI, r3
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	f3bf 8f4f 	dsb	sy
 8010924:	623b      	str	r3, [r7, #32]
}
 8010926:	bf00      	nop
 8010928:	e7fe      	b.n	8010928 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801092a:	f001 fbd1 	bl	80120d0 <xTaskGetSchedulerState>
 801092e:	4603      	mov	r3, r0
 8010930:	2b00      	cmp	r3, #0
 8010932:	d102      	bne.n	801093a <xQueueGenericSend+0x9e>
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d101      	bne.n	801093e <xQueueGenericSend+0xa2>
 801093a:	2301      	movs	r3, #1
 801093c:	e000      	b.n	8010940 <xQueueGenericSend+0xa4>
 801093e:	2300      	movs	r3, #0
 8010940:	2b00      	cmp	r3, #0
 8010942:	d10a      	bne.n	801095a <xQueueGenericSend+0xbe>
	__asm volatile
 8010944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	61fb      	str	r3, [r7, #28]
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801095a:	f002 f913 	bl	8012b84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010966:	429a      	cmp	r2, r3
 8010968:	d302      	bcc.n	8010970 <xQueueGenericSend+0xd4>
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	2b02      	cmp	r3, #2
 801096e:	d129      	bne.n	80109c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	68b9      	ldr	r1, [r7, #8]
 8010974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010976:	f000 fb3a 	bl	8010fee <prvCopyDataToQueue>
 801097a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801097c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010980:	2b00      	cmp	r3, #0
 8010982:	d010      	beq.n	80109a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010986:	3324      	adds	r3, #36	; 0x24
 8010988:	4618      	mov	r0, r3
 801098a:	f001 f9df 	bl	8011d4c <xTaskRemoveFromEventList>
 801098e:	4603      	mov	r3, r0
 8010990:	2b00      	cmp	r3, #0
 8010992:	d013      	beq.n	80109bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010994:	4b3f      	ldr	r3, [pc, #252]	; (8010a94 <xQueueGenericSend+0x1f8>)
 8010996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801099a:	601a      	str	r2, [r3, #0]
 801099c:	f3bf 8f4f 	dsb	sy
 80109a0:	f3bf 8f6f 	isb	sy
 80109a4:	e00a      	b.n	80109bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80109a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d007      	beq.n	80109bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80109ac:	4b39      	ldr	r3, [pc, #228]	; (8010a94 <xQueueGenericSend+0x1f8>)
 80109ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80109bc:	f002 f912 	bl	8012be4 <vPortExitCritical>
				return pdPASS;
 80109c0:	2301      	movs	r3, #1
 80109c2:	e063      	b.n	8010a8c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d103      	bne.n	80109d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80109ca:	f002 f90b 	bl	8012be4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80109ce:	2300      	movs	r3, #0
 80109d0:	e05c      	b.n	8010a8c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80109d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d106      	bne.n	80109e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80109d8:	f107 0314 	add.w	r3, r7, #20
 80109dc:	4618      	mov	r0, r3
 80109de:	f001 fa19 	bl	8011e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80109e2:	2301      	movs	r3, #1
 80109e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80109e6:	f002 f8fd 	bl	8012be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80109ea:	f000 ff73 	bl	80118d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80109ee:	f002 f8c9 	bl	8012b84 <vPortEnterCritical>
 80109f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80109f8:	b25b      	sxtb	r3, r3
 80109fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80109fe:	d103      	bne.n	8010a08 <xQueueGenericSend+0x16c>
 8010a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a02:	2200      	movs	r2, #0
 8010a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010a0e:	b25b      	sxtb	r3, r3
 8010a10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010a14:	d103      	bne.n	8010a1e <xQueueGenericSend+0x182>
 8010a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a18:	2200      	movs	r2, #0
 8010a1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010a1e:	f002 f8e1 	bl	8012be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010a22:	1d3a      	adds	r2, r7, #4
 8010a24:	f107 0314 	add.w	r3, r7, #20
 8010a28:	4611      	mov	r1, r2
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f001 fa08 	bl	8011e40 <xTaskCheckForTimeOut>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d124      	bne.n	8010a80 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010a36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a38:	f000 fbd1 	bl	80111de <prvIsQueueFull>
 8010a3c:	4603      	mov	r3, r0
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d018      	beq.n	8010a74 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a44:	3310      	adds	r3, #16
 8010a46:	687a      	ldr	r2, [r7, #4]
 8010a48:	4611      	mov	r1, r2
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f001 f92e 	bl	8011cac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a52:	f000 fb5c 	bl	801110e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010a56:	f000 ff4b 	bl	80118f0 <xTaskResumeAll>
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f47f af7c 	bne.w	801095a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8010a62:	4b0c      	ldr	r3, [pc, #48]	; (8010a94 <xQueueGenericSend+0x1f8>)
 8010a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	f3bf 8f4f 	dsb	sy
 8010a6e:	f3bf 8f6f 	isb	sy
 8010a72:	e772      	b.n	801095a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a76:	f000 fb4a 	bl	801110e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010a7a:	f000 ff39 	bl	80118f0 <xTaskResumeAll>
 8010a7e:	e76c      	b.n	801095a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010a80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a82:	f000 fb44 	bl	801110e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010a86:	f000 ff33 	bl	80118f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010a8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3738      	adds	r7, #56	; 0x38
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}
 8010a94:	e000ed04 	.word	0xe000ed04

08010a98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b090      	sub	sp, #64	; 0x40
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8010aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d10a      	bne.n	8010ac6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ab4:	f383 8811 	msr	BASEPRI, r3
 8010ab8:	f3bf 8f6f 	isb	sy
 8010abc:	f3bf 8f4f 	dsb	sy
 8010ac0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010ac2:	bf00      	nop
 8010ac4:	e7fe      	b.n	8010ac4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ac6:	68bb      	ldr	r3, [r7, #8]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d103      	bne.n	8010ad4 <xQueueGenericSendFromISR+0x3c>
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d101      	bne.n	8010ad8 <xQueueGenericSendFromISR+0x40>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	e000      	b.n	8010ada <xQueueGenericSendFromISR+0x42>
 8010ad8:	2300      	movs	r3, #0
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d10a      	bne.n	8010af4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8010ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae2:	f383 8811 	msr	BASEPRI, r3
 8010ae6:	f3bf 8f6f 	isb	sy
 8010aea:	f3bf 8f4f 	dsb	sy
 8010aee:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010af0:	bf00      	nop
 8010af2:	e7fe      	b.n	8010af2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d103      	bne.n	8010b02 <xQueueGenericSendFromISR+0x6a>
 8010afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010afe:	2b01      	cmp	r3, #1
 8010b00:	d101      	bne.n	8010b06 <xQueueGenericSendFromISR+0x6e>
 8010b02:	2301      	movs	r3, #1
 8010b04:	e000      	b.n	8010b08 <xQueueGenericSendFromISR+0x70>
 8010b06:	2300      	movs	r3, #0
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d10a      	bne.n	8010b22 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8010b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b10:	f383 8811 	msr	BASEPRI, r3
 8010b14:	f3bf 8f6f 	isb	sy
 8010b18:	f3bf 8f4f 	dsb	sy
 8010b1c:	623b      	str	r3, [r7, #32]
}
 8010b1e:	bf00      	nop
 8010b20:	e7fe      	b.n	8010b20 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010b22:	f002 f911 	bl	8012d48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010b26:	f3ef 8211 	mrs	r2, BASEPRI
 8010b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2e:	f383 8811 	msr	BASEPRI, r3
 8010b32:	f3bf 8f6f 	isb	sy
 8010b36:	f3bf 8f4f 	dsb	sy
 8010b3a:	61fa      	str	r2, [r7, #28]
 8010b3c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010b3e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010b40:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d302      	bcc.n	8010b54 <xQueueGenericSendFromISR+0xbc>
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	2b02      	cmp	r3, #2
 8010b52:	d12f      	bne.n	8010bb4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b62:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010b64:	683a      	ldr	r2, [r7, #0]
 8010b66:	68b9      	ldr	r1, [r7, #8]
 8010b68:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010b6a:	f000 fa40 	bl	8010fee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010b6e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8010b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010b76:	d112      	bne.n	8010b9e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d016      	beq.n	8010bae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b82:	3324      	adds	r3, #36	; 0x24
 8010b84:	4618      	mov	r0, r3
 8010b86:	f001 f8e1 	bl	8011d4c <xTaskRemoveFromEventList>
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00e      	beq.n	8010bae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d00b      	beq.n	8010bae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	2201      	movs	r2, #1
 8010b9a:	601a      	str	r2, [r3, #0]
 8010b9c:	e007      	b.n	8010bae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010ba2:	3301      	adds	r3, #1
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	b25a      	sxtb	r2, r3
 8010ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8010bb2:	e001      	b.n	8010bb8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010bc2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3740      	adds	r7, #64	; 0x40
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010bce:	b580      	push	{r7, lr}
 8010bd0:	b08e      	sub	sp, #56	; 0x38
 8010bd2:	af00      	add	r7, sp, #0
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d10a      	bne.n	8010bf8 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8010be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010be6:	f383 8811 	msr	BASEPRI, r3
 8010bea:	f3bf 8f6f 	isb	sy
 8010bee:	f3bf 8f4f 	dsb	sy
 8010bf2:	623b      	str	r3, [r7, #32]
}
 8010bf4:	bf00      	nop
 8010bf6:	e7fe      	b.n	8010bf6 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d00a      	beq.n	8010c16 <xQueueGiveFromISR+0x48>
	__asm volatile
 8010c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c04:	f383 8811 	msr	BASEPRI, r3
 8010c08:	f3bf 8f6f 	isb	sy
 8010c0c:	f3bf 8f4f 	dsb	sy
 8010c10:	61fb      	str	r3, [r7, #28]
}
 8010c12:	bf00      	nop
 8010c14:	e7fe      	b.n	8010c14 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d103      	bne.n	8010c26 <xQueueGiveFromISR+0x58>
 8010c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c20:	689b      	ldr	r3, [r3, #8]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d101      	bne.n	8010c2a <xQueueGiveFromISR+0x5c>
 8010c26:	2301      	movs	r3, #1
 8010c28:	e000      	b.n	8010c2c <xQueueGiveFromISR+0x5e>
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10a      	bne.n	8010c46 <xQueueGiveFromISR+0x78>
	__asm volatile
 8010c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	61bb      	str	r3, [r7, #24]
}
 8010c42:	bf00      	nop
 8010c44:	e7fe      	b.n	8010c44 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010c46:	f002 f87f 	bl	8012d48 <vPortValidateInterruptPriority>
	__asm volatile
 8010c4a:	f3ef 8211 	mrs	r2, BASEPRI
 8010c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c52:	f383 8811 	msr	BASEPRI, r3
 8010c56:	f3bf 8f6f 	isb	sy
 8010c5a:	f3bf 8f4f 	dsb	sy
 8010c5e:	617a      	str	r2, [r7, #20]
 8010c60:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010c62:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010c64:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c72:	429a      	cmp	r2, r3
 8010c74:	d22b      	bcs.n	8010cce <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c82:	1c5a      	adds	r2, r3, #1
 8010c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c86:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010c88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010c90:	d112      	bne.n	8010cb8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d016      	beq.n	8010cc8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c9c:	3324      	adds	r3, #36	; 0x24
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f001 f854 	bl	8011d4c <xTaskRemoveFromEventList>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d00e      	beq.n	8010cc8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d00b      	beq.n	8010cc8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010cb0:	683b      	ldr	r3, [r7, #0]
 8010cb2:	2201      	movs	r2, #1
 8010cb4:	601a      	str	r2, [r3, #0]
 8010cb6:	e007      	b.n	8010cc8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cbc:	3301      	adds	r3, #1
 8010cbe:	b2db      	uxtb	r3, r3
 8010cc0:	b25a      	sxtb	r2, r3
 8010cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010cc8:	2301      	movs	r3, #1
 8010cca:	637b      	str	r3, [r7, #52]	; 0x34
 8010ccc:	e001      	b.n	8010cd2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8010cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	f383 8811 	msr	BASEPRI, r3
}
 8010cdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010cde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3738      	adds	r7, #56	; 0x38
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b08c      	sub	sp, #48	; 0x30
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	60f8      	str	r0, [r7, #12]
 8010cf0:	60b9      	str	r1, [r7, #8]
 8010cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d10a      	bne.n	8010d18 <xQueueReceive+0x30>
	__asm volatile
 8010d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d06:	f383 8811 	msr	BASEPRI, r3
 8010d0a:	f3bf 8f6f 	isb	sy
 8010d0e:	f3bf 8f4f 	dsb	sy
 8010d12:	623b      	str	r3, [r7, #32]
}
 8010d14:	bf00      	nop
 8010d16:	e7fe      	b.n	8010d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d18:	68bb      	ldr	r3, [r7, #8]
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d103      	bne.n	8010d26 <xQueueReceive+0x3e>
 8010d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d101      	bne.n	8010d2a <xQueueReceive+0x42>
 8010d26:	2301      	movs	r3, #1
 8010d28:	e000      	b.n	8010d2c <xQueueReceive+0x44>
 8010d2a:	2300      	movs	r3, #0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	d10a      	bne.n	8010d46 <xQueueReceive+0x5e>
	__asm volatile
 8010d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d34:	f383 8811 	msr	BASEPRI, r3
 8010d38:	f3bf 8f6f 	isb	sy
 8010d3c:	f3bf 8f4f 	dsb	sy
 8010d40:	61fb      	str	r3, [r7, #28]
}
 8010d42:	bf00      	nop
 8010d44:	e7fe      	b.n	8010d44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010d46:	f001 f9c3 	bl	80120d0 <xTaskGetSchedulerState>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d102      	bne.n	8010d56 <xQueueReceive+0x6e>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d101      	bne.n	8010d5a <xQueueReceive+0x72>
 8010d56:	2301      	movs	r3, #1
 8010d58:	e000      	b.n	8010d5c <xQueueReceive+0x74>
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d10a      	bne.n	8010d76 <xQueueReceive+0x8e>
	__asm volatile
 8010d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d64:	f383 8811 	msr	BASEPRI, r3
 8010d68:	f3bf 8f6f 	isb	sy
 8010d6c:	f3bf 8f4f 	dsb	sy
 8010d70:	61bb      	str	r3, [r7, #24]
}
 8010d72:	bf00      	nop
 8010d74:	e7fe      	b.n	8010d74 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010d76:	f001 ff05 	bl	8012b84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d01f      	beq.n	8010dc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010d86:	68b9      	ldr	r1, [r7, #8]
 8010d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d8a:	f000 f99a 	bl	80110c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d90:	1e5a      	subs	r2, r3, #1
 8010d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d98:	691b      	ldr	r3, [r3, #16]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00f      	beq.n	8010dbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010da0:	3310      	adds	r3, #16
 8010da2:	4618      	mov	r0, r3
 8010da4:	f000 ffd2 	bl	8011d4c <xTaskRemoveFromEventList>
 8010da8:	4603      	mov	r3, r0
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d007      	beq.n	8010dbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010dae:	4b3d      	ldr	r3, [pc, #244]	; (8010ea4 <xQueueReceive+0x1bc>)
 8010db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010db4:	601a      	str	r2, [r3, #0]
 8010db6:	f3bf 8f4f 	dsb	sy
 8010dba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010dbe:	f001 ff11 	bl	8012be4 <vPortExitCritical>
				return pdPASS;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	e069      	b.n	8010e9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d103      	bne.n	8010dd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010dcc:	f001 ff0a 	bl	8012be4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	e062      	b.n	8010e9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d106      	bne.n	8010de8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010dda:	f107 0310 	add.w	r3, r7, #16
 8010dde:	4618      	mov	r0, r3
 8010de0:	f001 f818 	bl	8011e14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010de4:	2301      	movs	r3, #1
 8010de6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010de8:	f001 fefc 	bl	8012be4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010dec:	f000 fd72 	bl	80118d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010df0:	f001 fec8 	bl	8012b84 <vPortEnterCritical>
 8010df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010dfa:	b25b      	sxtb	r3, r3
 8010dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e00:	d103      	bne.n	8010e0a <xQueueReceive+0x122>
 8010e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e04:	2200      	movs	r2, #0
 8010e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010e10:	b25b      	sxtb	r3, r3
 8010e12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010e16:	d103      	bne.n	8010e20 <xQueueReceive+0x138>
 8010e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010e20:	f001 fee0 	bl	8012be4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010e24:	1d3a      	adds	r2, r7, #4
 8010e26:	f107 0310 	add.w	r3, r7, #16
 8010e2a:	4611      	mov	r1, r2
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f001 f807 	bl	8011e40 <xTaskCheckForTimeOut>
 8010e32:	4603      	mov	r3, r0
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d123      	bne.n	8010e80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e3a:	f000 f9ba 	bl	80111b2 <prvIsQueueEmpty>
 8010e3e:	4603      	mov	r3, r0
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d017      	beq.n	8010e74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	3324      	adds	r3, #36	; 0x24
 8010e48:	687a      	ldr	r2, [r7, #4]
 8010e4a:	4611      	mov	r1, r2
 8010e4c:	4618      	mov	r0, r3
 8010e4e:	f000 ff2d 	bl	8011cac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8010e52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e54:	f000 f95b 	bl	801110e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010e58:	f000 fd4a 	bl	80118f0 <xTaskResumeAll>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d189      	bne.n	8010d76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8010e62:	4b10      	ldr	r3, [pc, #64]	; (8010ea4 <xQueueReceive+0x1bc>)
 8010e64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e68:	601a      	str	r2, [r3, #0]
 8010e6a:	f3bf 8f4f 	dsb	sy
 8010e6e:	f3bf 8f6f 	isb	sy
 8010e72:	e780      	b.n	8010d76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010e74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e76:	f000 f94a 	bl	801110e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010e7a:	f000 fd39 	bl	80118f0 <xTaskResumeAll>
 8010e7e:	e77a      	b.n	8010d76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8010e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e82:	f000 f944 	bl	801110e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010e86:	f000 fd33 	bl	80118f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e8c:	f000 f991 	bl	80111b2 <prvIsQueueEmpty>
 8010e90:	4603      	mov	r3, r0
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	f43f af6f 	beq.w	8010d76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010e98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3730      	adds	r7, #48	; 0x30
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bd80      	pop	{r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	e000ed04 	.word	0xe000ed04

08010ea8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b08e      	sub	sp, #56	; 0x38
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d10a      	bne.n	8010ed4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010ebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ec2:	f383 8811 	msr	BASEPRI, r3
 8010ec6:	f3bf 8f6f 	isb	sy
 8010eca:	f3bf 8f4f 	dsb	sy
 8010ece:	623b      	str	r3, [r7, #32]
}
 8010ed0:	bf00      	nop
 8010ed2:	e7fe      	b.n	8010ed2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d103      	bne.n	8010ee2 <xQueueReceiveFromISR+0x3a>
 8010eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d101      	bne.n	8010ee6 <xQueueReceiveFromISR+0x3e>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e000      	b.n	8010ee8 <xQueueReceiveFromISR+0x40>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10a      	bne.n	8010f02 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef0:	f383 8811 	msr	BASEPRI, r3
 8010ef4:	f3bf 8f6f 	isb	sy
 8010ef8:	f3bf 8f4f 	dsb	sy
 8010efc:	61fb      	str	r3, [r7, #28]
}
 8010efe:	bf00      	nop
 8010f00:	e7fe      	b.n	8010f00 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010f02:	f001 ff21 	bl	8012d48 <vPortValidateInterruptPriority>
	__asm volatile
 8010f06:	f3ef 8211 	mrs	r2, BASEPRI
 8010f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f0e:	f383 8811 	msr	BASEPRI, r3
 8010f12:	f3bf 8f6f 	isb	sy
 8010f16:	f3bf 8f4f 	dsb	sy
 8010f1a:	61ba      	str	r2, [r7, #24]
 8010f1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010f1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010f20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010f26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d02f      	beq.n	8010f8e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010f38:	68b9      	ldr	r1, [r7, #8]
 8010f3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f3c:	f000 f8c1 	bl	80110c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f42:	1e5a      	subs	r2, r3, #1
 8010f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f46:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8010f48:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8010f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010f50:	d112      	bne.n	8010f78 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f54:	691b      	ldr	r3, [r3, #16]
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d016      	beq.n	8010f88 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	3310      	adds	r3, #16
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f000 fef4 	bl	8011d4c <xTaskRemoveFromEventList>
 8010f64:	4603      	mov	r3, r0
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d00e      	beq.n	8010f88 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d00b      	beq.n	8010f88 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	2201      	movs	r2, #1
 8010f74:	601a      	str	r2, [r3, #0]
 8010f76:	e007      	b.n	8010f88 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8010f78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	b2db      	uxtb	r3, r3
 8010f80:	b25a      	sxtb	r2, r3
 8010f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8010f88:	2301      	movs	r3, #1
 8010f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8010f8c:	e001      	b.n	8010f92 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	637b      	str	r3, [r7, #52]	; 0x34
 8010f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8010f96:	693b      	ldr	r3, [r7, #16]
 8010f98:	f383 8811 	msr	BASEPRI, r3
}
 8010f9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010fa0:	4618      	mov	r0, r3
 8010fa2:	3738      	adds	r7, #56	; 0x38
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	bd80      	pop	{r7, pc}

08010fa8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010fa8:	b580      	push	{r7, lr}
 8010faa:	b084      	sub	sp, #16
 8010fac:	af00      	add	r7, sp, #0
 8010fae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d10a      	bne.n	8010fd0 <vQueueDelete+0x28>
	__asm volatile
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	60bb      	str	r3, [r7, #8]
}
 8010fcc:	bf00      	nop
 8010fce:	e7fe      	b.n	8010fce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	f000 f947 	bl	8011264 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d102      	bne.n	8010fe6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f001 ffbd 	bl	8012f60 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010fe6:	bf00      	nop
 8010fe8:	3710      	adds	r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}

08010fee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010fee:	b580      	push	{r7, lr}
 8010ff0:	b086      	sub	sp, #24
 8010ff2:	af00      	add	r7, sp, #0
 8010ff4:	60f8      	str	r0, [r7, #12]
 8010ff6:	60b9      	str	r1, [r7, #8]
 8010ff8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011002:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011008:	2b00      	cmp	r3, #0
 801100a:	d10d      	bne.n	8011028 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d14d      	bne.n	80110b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	689b      	ldr	r3, [r3, #8]
 8011018:	4618      	mov	r0, r3
 801101a:	f001 f877 	bl	801210c <xTaskPriorityDisinherit>
 801101e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011020:	68fb      	ldr	r3, [r7, #12]
 8011022:	2200      	movs	r2, #0
 8011024:	609a      	str	r2, [r3, #8]
 8011026:	e043      	b.n	80110b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d119      	bne.n	8011062 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	6858      	ldr	r0, [r3, #4]
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011036:	461a      	mov	r2, r3
 8011038:	68b9      	ldr	r1, [r7, #8]
 801103a:	f002 fff5 	bl	8014028 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	685a      	ldr	r2, [r3, #4]
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011046:	441a      	add	r2, r3
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	685a      	ldr	r2, [r3, #4]
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	689b      	ldr	r3, [r3, #8]
 8011054:	429a      	cmp	r2, r3
 8011056:	d32b      	bcc.n	80110b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	681a      	ldr	r2, [r3, #0]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	605a      	str	r2, [r3, #4]
 8011060:	e026      	b.n	80110b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	68d8      	ldr	r0, [r3, #12]
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801106a:	461a      	mov	r2, r3
 801106c:	68b9      	ldr	r1, [r7, #8]
 801106e:	f002 ffdb 	bl	8014028 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	68da      	ldr	r2, [r3, #12]
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801107a:	425b      	negs	r3, r3
 801107c:	441a      	add	r2, r3
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	68da      	ldr	r2, [r3, #12]
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	681b      	ldr	r3, [r3, #0]
 801108a:	429a      	cmp	r2, r3
 801108c:	d207      	bcs.n	801109e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	689a      	ldr	r2, [r3, #8]
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011096:	425b      	negs	r3, r3
 8011098:	441a      	add	r2, r3
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	2b02      	cmp	r3, #2
 80110a2:	d105      	bne.n	80110b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d002      	beq.n	80110b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	3b01      	subs	r3, #1
 80110ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80110b0:	693b      	ldr	r3, [r7, #16]
 80110b2:	1c5a      	adds	r2, r3, #1
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80110b8:	697b      	ldr	r3, [r7, #20]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b082      	sub	sp, #8
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d018      	beq.n	8011106 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	68da      	ldr	r2, [r3, #12]
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110dc:	441a      	add	r2, r3
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	68da      	ldr	r2, [r3, #12]
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	689b      	ldr	r3, [r3, #8]
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d303      	bcc.n	80110f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	681a      	ldr	r2, [r3, #0]
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	68d9      	ldr	r1, [r3, #12]
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80110fe:	461a      	mov	r2, r3
 8011100:	6838      	ldr	r0, [r7, #0]
 8011102:	f002 ff91 	bl	8014028 <memcpy>
	}
}
 8011106:	bf00      	nop
 8011108:	3708      	adds	r7, #8
 801110a:	46bd      	mov	sp, r7
 801110c:	bd80      	pop	{r7, pc}

0801110e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801110e:	b580      	push	{r7, lr}
 8011110:	b084      	sub	sp, #16
 8011112:	af00      	add	r7, sp, #0
 8011114:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011116:	f001 fd35 	bl	8012b84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011120:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011122:	e011      	b.n	8011148 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011128:	2b00      	cmp	r3, #0
 801112a:	d012      	beq.n	8011152 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	3324      	adds	r3, #36	; 0x24
 8011130:	4618      	mov	r0, r3
 8011132:	f000 fe0b 	bl	8011d4c <xTaskRemoveFromEventList>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d001      	beq.n	8011140 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801113c:	f000 fee2 	bl	8011f04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011140:	7bfb      	ldrb	r3, [r7, #15]
 8011142:	3b01      	subs	r3, #1
 8011144:	b2db      	uxtb	r3, r3
 8011146:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801114c:	2b00      	cmp	r3, #0
 801114e:	dce9      	bgt.n	8011124 <prvUnlockQueue+0x16>
 8011150:	e000      	b.n	8011154 <prvUnlockQueue+0x46>
					break;
 8011152:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	22ff      	movs	r2, #255	; 0xff
 8011158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801115c:	f001 fd42 	bl	8012be4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011160:	f001 fd10 	bl	8012b84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801116a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801116c:	e011      	b.n	8011192 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	691b      	ldr	r3, [r3, #16]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d012      	beq.n	801119c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	3310      	adds	r3, #16
 801117a:	4618      	mov	r0, r3
 801117c:	f000 fde6 	bl	8011d4c <xTaskRemoveFromEventList>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d001      	beq.n	801118a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011186:	f000 febd 	bl	8011f04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801118a:	7bbb      	ldrb	r3, [r7, #14]
 801118c:	3b01      	subs	r3, #1
 801118e:	b2db      	uxtb	r3, r3
 8011190:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011196:	2b00      	cmp	r3, #0
 8011198:	dce9      	bgt.n	801116e <prvUnlockQueue+0x60>
 801119a:	e000      	b.n	801119e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801119c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	22ff      	movs	r2, #255	; 0xff
 80111a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80111a6:	f001 fd1d 	bl	8012be4 <vPortExitCritical>
}
 80111aa:	bf00      	nop
 80111ac:	3710      	adds	r7, #16
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b084      	sub	sp, #16
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111ba:	f001 fce3 	bl	8012b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d102      	bne.n	80111cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80111c6:	2301      	movs	r3, #1
 80111c8:	60fb      	str	r3, [r7, #12]
 80111ca:	e001      	b.n	80111d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80111cc:	2300      	movs	r3, #0
 80111ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80111d0:	f001 fd08 	bl	8012be4 <vPortExitCritical>

	return xReturn;
 80111d4:	68fb      	ldr	r3, [r7, #12]
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3710      	adds	r7, #16
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80111de:	b580      	push	{r7, lr}
 80111e0:	b084      	sub	sp, #16
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80111e6:	f001 fccd 	bl	8012b84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80111f2:	429a      	cmp	r2, r3
 80111f4:	d102      	bne.n	80111fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80111f6:	2301      	movs	r3, #1
 80111f8:	60fb      	str	r3, [r7, #12]
 80111fa:	e001      	b.n	8011200 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80111fc:	2300      	movs	r3, #0
 80111fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011200:	f001 fcf0 	bl	8012be4 <vPortExitCritical>

	return xReturn;
 8011204:	68fb      	ldr	r3, [r7, #12]
}
 8011206:	4618      	mov	r0, r3
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
	...

08011210 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011210:	b480      	push	{r7}
 8011212:	b085      	sub	sp, #20
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
 8011218:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801121a:	2300      	movs	r3, #0
 801121c:	60fb      	str	r3, [r7, #12]
 801121e:	e014      	b.n	801124a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011220:	4a0f      	ldr	r2, [pc, #60]	; (8011260 <vQueueAddToRegistry+0x50>)
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d10b      	bne.n	8011244 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801122c:	490c      	ldr	r1, [pc, #48]	; (8011260 <vQueueAddToRegistry+0x50>)
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	683a      	ldr	r2, [r7, #0]
 8011232:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011236:	4a0a      	ldr	r2, [pc, #40]	; (8011260 <vQueueAddToRegistry+0x50>)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	00db      	lsls	r3, r3, #3
 801123c:	4413      	add	r3, r2
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011242:	e006      	b.n	8011252 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	3301      	adds	r3, #1
 8011248:	60fb      	str	r3, [r7, #12]
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	2b07      	cmp	r3, #7
 801124e:	d9e7      	bls.n	8011220 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8011250:	bf00      	nop
 8011252:	bf00      	nop
 8011254:	3714      	adds	r7, #20
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	20001080 	.word	0x20001080

08011264 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011264:	b480      	push	{r7}
 8011266:	b085      	sub	sp, #20
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801126c:	2300      	movs	r3, #0
 801126e:	60fb      	str	r3, [r7, #12]
 8011270:	e016      	b.n	80112a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011272:	4a10      	ldr	r2, [pc, #64]	; (80112b4 <vQueueUnregisterQueue+0x50>)
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	00db      	lsls	r3, r3, #3
 8011278:	4413      	add	r3, r2
 801127a:	685b      	ldr	r3, [r3, #4]
 801127c:	687a      	ldr	r2, [r7, #4]
 801127e:	429a      	cmp	r2, r3
 8011280:	d10b      	bne.n	801129a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011282:	4a0c      	ldr	r2, [pc, #48]	; (80112b4 <vQueueUnregisterQueue+0x50>)
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	2100      	movs	r1, #0
 8011288:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801128c:	4a09      	ldr	r2, [pc, #36]	; (80112b4 <vQueueUnregisterQueue+0x50>)
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	00db      	lsls	r3, r3, #3
 8011292:	4413      	add	r3, r2
 8011294:	2200      	movs	r2, #0
 8011296:	605a      	str	r2, [r3, #4]
				break;
 8011298:	e006      	b.n	80112a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	3301      	adds	r3, #1
 801129e:	60fb      	str	r3, [r7, #12]
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2b07      	cmp	r3, #7
 80112a4:	d9e5      	bls.n	8011272 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80112a6:	bf00      	nop
 80112a8:	bf00      	nop
 80112aa:	3714      	adds	r7, #20
 80112ac:	46bd      	mov	sp, r7
 80112ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b2:	4770      	bx	lr
 80112b4:	20001080 	.word	0x20001080

080112b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b086      	sub	sp, #24
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80112c8:	f001 fc5c 	bl	8012b84 <vPortEnterCritical>
 80112cc:	697b      	ldr	r3, [r7, #20]
 80112ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80112d2:	b25b      	sxtb	r3, r3
 80112d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112d8:	d103      	bne.n	80112e2 <vQueueWaitForMessageRestricted+0x2a>
 80112da:	697b      	ldr	r3, [r7, #20]
 80112dc:	2200      	movs	r2, #0
 80112de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112e8:	b25b      	sxtb	r3, r3
 80112ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80112ee:	d103      	bne.n	80112f8 <vQueueWaitForMessageRestricted+0x40>
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	2200      	movs	r2, #0
 80112f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112f8:	f001 fc74 	bl	8012be4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80112fc:	697b      	ldr	r3, [r7, #20]
 80112fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011300:	2b00      	cmp	r3, #0
 8011302:	d106      	bne.n	8011312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	3324      	adds	r3, #36	; 0x24
 8011308:	687a      	ldr	r2, [r7, #4]
 801130a:	68b9      	ldr	r1, [r7, #8]
 801130c:	4618      	mov	r0, r3
 801130e:	f000 fcf1 	bl	8011cf4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8011312:	6978      	ldr	r0, [r7, #20]
 8011314:	f7ff fefb 	bl	801110e <prvUnlockQueue>
	}
 8011318:	bf00      	nop
 801131a:	3718      	adds	r7, #24
 801131c:	46bd      	mov	sp, r7
 801131e:	bd80      	pop	{r7, pc}

08011320 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011320:	b580      	push	{r7, lr}
 8011322:	b08e      	sub	sp, #56	; 0x38
 8011324:	af04      	add	r7, sp, #16
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	60b9      	str	r1, [r7, #8]
 801132a:	607a      	str	r2, [r7, #4]
 801132c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801132e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011330:	2b00      	cmp	r3, #0
 8011332:	d10a      	bne.n	801134a <xTaskCreateStatic+0x2a>
	__asm volatile
 8011334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011338:	f383 8811 	msr	BASEPRI, r3
 801133c:	f3bf 8f6f 	isb	sy
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	623b      	str	r3, [r7, #32]
}
 8011346:	bf00      	nop
 8011348:	e7fe      	b.n	8011348 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801134a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134c:	2b00      	cmp	r3, #0
 801134e:	d10a      	bne.n	8011366 <xTaskCreateStatic+0x46>
	__asm volatile
 8011350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011354:	f383 8811 	msr	BASEPRI, r3
 8011358:	f3bf 8f6f 	isb	sy
 801135c:	f3bf 8f4f 	dsb	sy
 8011360:	61fb      	str	r3, [r7, #28]
}
 8011362:	bf00      	nop
 8011364:	e7fe      	b.n	8011364 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011366:	23bc      	movs	r3, #188	; 0xbc
 8011368:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	2bbc      	cmp	r3, #188	; 0xbc
 801136e:	d00a      	beq.n	8011386 <xTaskCreateStatic+0x66>
	__asm volatile
 8011370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011374:	f383 8811 	msr	BASEPRI, r3
 8011378:	f3bf 8f6f 	isb	sy
 801137c:	f3bf 8f4f 	dsb	sy
 8011380:	61bb      	str	r3, [r7, #24]
}
 8011382:	bf00      	nop
 8011384:	e7fe      	b.n	8011384 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011386:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801138a:	2b00      	cmp	r3, #0
 801138c:	d01e      	beq.n	80113cc <xTaskCreateStatic+0xac>
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	2b00      	cmp	r3, #0
 8011392:	d01b      	beq.n	80113cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011396:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801139a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801139c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113a0:	2202      	movs	r2, #2
 80113a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80113a6:	2300      	movs	r3, #0
 80113a8:	9303      	str	r3, [sp, #12]
 80113aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ac:	9302      	str	r3, [sp, #8]
 80113ae:	f107 0314 	add.w	r3, r7, #20
 80113b2:	9301      	str	r3, [sp, #4]
 80113b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113b6:	9300      	str	r3, [sp, #0]
 80113b8:	683b      	ldr	r3, [r7, #0]
 80113ba:	687a      	ldr	r2, [r7, #4]
 80113bc:	68b9      	ldr	r1, [r7, #8]
 80113be:	68f8      	ldr	r0, [r7, #12]
 80113c0:	f000 f850 	bl	8011464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80113c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80113c6:	f000 f8f3 	bl	80115b0 <prvAddNewTaskToReadyList>
 80113ca:	e001      	b.n	80113d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80113cc:	2300      	movs	r3, #0
 80113ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80113d0:	697b      	ldr	r3, [r7, #20]
	}
 80113d2:	4618      	mov	r0, r3
 80113d4:	3728      	adds	r7, #40	; 0x28
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}

080113da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80113da:	b580      	push	{r7, lr}
 80113dc:	b08c      	sub	sp, #48	; 0x30
 80113de:	af04      	add	r7, sp, #16
 80113e0:	60f8      	str	r0, [r7, #12]
 80113e2:	60b9      	str	r1, [r7, #8]
 80113e4:	603b      	str	r3, [r7, #0]
 80113e6:	4613      	mov	r3, r2
 80113e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80113ea:	88fb      	ldrh	r3, [r7, #6]
 80113ec:	009b      	lsls	r3, r3, #2
 80113ee:	4618      	mov	r0, r3
 80113f0:	f001 fcea 	bl	8012dc8 <pvPortMalloc>
 80113f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d00e      	beq.n	801141a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80113fc:	20bc      	movs	r0, #188	; 0xbc
 80113fe:	f001 fce3 	bl	8012dc8 <pvPortMalloc>
 8011402:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011404:	69fb      	ldr	r3, [r7, #28]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d003      	beq.n	8011412 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	697a      	ldr	r2, [r7, #20]
 801140e:	631a      	str	r2, [r3, #48]	; 0x30
 8011410:	e005      	b.n	801141e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011412:	6978      	ldr	r0, [r7, #20]
 8011414:	f001 fda4 	bl	8012f60 <vPortFree>
 8011418:	e001      	b.n	801141e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801141a:	2300      	movs	r3, #0
 801141c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d017      	beq.n	8011454 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	2200      	movs	r2, #0
 8011428:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801142c:	88fa      	ldrh	r2, [r7, #6]
 801142e:	2300      	movs	r3, #0
 8011430:	9303      	str	r3, [sp, #12]
 8011432:	69fb      	ldr	r3, [r7, #28]
 8011434:	9302      	str	r3, [sp, #8]
 8011436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011438:	9301      	str	r3, [sp, #4]
 801143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143c:	9300      	str	r3, [sp, #0]
 801143e:	683b      	ldr	r3, [r7, #0]
 8011440:	68b9      	ldr	r1, [r7, #8]
 8011442:	68f8      	ldr	r0, [r7, #12]
 8011444:	f000 f80e 	bl	8011464 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011448:	69f8      	ldr	r0, [r7, #28]
 801144a:	f000 f8b1 	bl	80115b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801144e:	2301      	movs	r3, #1
 8011450:	61bb      	str	r3, [r7, #24]
 8011452:	e002      	b.n	801145a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011454:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011458:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801145a:	69bb      	ldr	r3, [r7, #24]
	}
 801145c:	4618      	mov	r0, r3
 801145e:	3720      	adds	r7, #32
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b088      	sub	sp, #32
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
 8011470:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	461a      	mov	r2, r3
 801147c:	21a5      	movs	r1, #165	; 0xa5
 801147e:	f002 fde1 	bl	8014044 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801148c:	3b01      	subs	r3, #1
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4413      	add	r3, r2
 8011492:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011494:	69bb      	ldr	r3, [r7, #24]
 8011496:	f023 0307 	bic.w	r3, r3, #7
 801149a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801149c:	69bb      	ldr	r3, [r7, #24]
 801149e:	f003 0307 	and.w	r3, r3, #7
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d00a      	beq.n	80114bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80114a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114aa:	f383 8811 	msr	BASEPRI, r3
 80114ae:	f3bf 8f6f 	isb	sy
 80114b2:	f3bf 8f4f 	dsb	sy
 80114b6:	617b      	str	r3, [r7, #20]
}
 80114b8:	bf00      	nop
 80114ba:	e7fe      	b.n	80114ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d01f      	beq.n	8011502 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114c2:	2300      	movs	r3, #0
 80114c4:	61fb      	str	r3, [r7, #28]
 80114c6:	e012      	b.n	80114ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80114c8:	68ba      	ldr	r2, [r7, #8]
 80114ca:	69fb      	ldr	r3, [r7, #28]
 80114cc:	4413      	add	r3, r2
 80114ce:	7819      	ldrb	r1, [r3, #0]
 80114d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80114d2:	69fb      	ldr	r3, [r7, #28]
 80114d4:	4413      	add	r3, r2
 80114d6:	3334      	adds	r3, #52	; 0x34
 80114d8:	460a      	mov	r2, r1
 80114da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80114dc:	68ba      	ldr	r2, [r7, #8]
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	4413      	add	r3, r2
 80114e2:	781b      	ldrb	r3, [r3, #0]
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d006      	beq.n	80114f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	3301      	adds	r3, #1
 80114ec:	61fb      	str	r3, [r7, #28]
 80114ee:	69fb      	ldr	r3, [r7, #28]
 80114f0:	2b0f      	cmp	r3, #15
 80114f2:	d9e9      	bls.n	80114c8 <prvInitialiseNewTask+0x64>
 80114f4:	e000      	b.n	80114f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80114f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80114f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114fa:	2200      	movs	r2, #0
 80114fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011500:	e003      	b.n	801150a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011504:	2200      	movs	r2, #0
 8011506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801150c:	2b37      	cmp	r3, #55	; 0x37
 801150e:	d901      	bls.n	8011514 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011510:	2337      	movs	r3, #55	; 0x37
 8011512:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011516:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011518:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801151a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801151e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011522:	2200      	movs	r2, #0
 8011524:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011528:	3304      	adds	r3, #4
 801152a:	4618      	mov	r0, r3
 801152c:	f7fe ff7a 	bl	8010424 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011532:	3318      	adds	r3, #24
 8011534:	4618      	mov	r0, r3
 8011536:	f7fe ff75 	bl	8010424 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801153a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801153c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801153e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011542:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011548:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801154a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801154c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801154e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011552:	2200      	movs	r2, #0
 8011554:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155a:	2200      	movs	r2, #0
 801155c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8011560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011562:	3354      	adds	r3, #84	; 0x54
 8011564:	2260      	movs	r2, #96	; 0x60
 8011566:	2100      	movs	r1, #0
 8011568:	4618      	mov	r0, r3
 801156a:	f002 fd6b 	bl	8014044 <memset>
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	4a0c      	ldr	r2, [pc, #48]	; (80115a4 <prvInitialiseNewTask+0x140>)
 8011572:	659a      	str	r2, [r3, #88]	; 0x58
 8011574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011576:	4a0c      	ldr	r2, [pc, #48]	; (80115a8 <prvInitialiseNewTask+0x144>)
 8011578:	65da      	str	r2, [r3, #92]	; 0x5c
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	4a0b      	ldr	r2, [pc, #44]	; (80115ac <prvInitialiseNewTask+0x148>)
 801157e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011580:	683a      	ldr	r2, [r7, #0]
 8011582:	68f9      	ldr	r1, [r7, #12]
 8011584:	69b8      	ldr	r0, [r7, #24]
 8011586:	f001 f9d1 	bl	801292c <pxPortInitialiseStack>
 801158a:	4602      	mov	r2, r0
 801158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801158e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011592:	2b00      	cmp	r3, #0
 8011594:	d002      	beq.n	801159c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011598:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801159a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801159c:	bf00      	nop
 801159e:	3720      	adds	r7, #32
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	0801450c 	.word	0x0801450c
 80115a8:	0801452c 	.word	0x0801452c
 80115ac:	080144ec 	.word	0x080144ec

080115b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80115b0:	b580      	push	{r7, lr}
 80115b2:	b082      	sub	sp, #8
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80115b8:	f001 fae4 	bl	8012b84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80115bc:	4b2d      	ldr	r3, [pc, #180]	; (8011674 <prvAddNewTaskToReadyList+0xc4>)
 80115be:	681b      	ldr	r3, [r3, #0]
 80115c0:	3301      	adds	r3, #1
 80115c2:	4a2c      	ldr	r2, [pc, #176]	; (8011674 <prvAddNewTaskToReadyList+0xc4>)
 80115c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80115c6:	4b2c      	ldr	r3, [pc, #176]	; (8011678 <prvAddNewTaskToReadyList+0xc8>)
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d109      	bne.n	80115e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80115ce:	4a2a      	ldr	r2, [pc, #168]	; (8011678 <prvAddNewTaskToReadyList+0xc8>)
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80115d4:	4b27      	ldr	r3, [pc, #156]	; (8011674 <prvAddNewTaskToReadyList+0xc4>)
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	2b01      	cmp	r3, #1
 80115da:	d110      	bne.n	80115fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80115dc:	f000 fcb6 	bl	8011f4c <prvInitialiseTaskLists>
 80115e0:	e00d      	b.n	80115fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80115e2:	4b26      	ldr	r3, [pc, #152]	; (801167c <prvAddNewTaskToReadyList+0xcc>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d109      	bne.n	80115fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80115ea:	4b23      	ldr	r3, [pc, #140]	; (8011678 <prvAddNewTaskToReadyList+0xc8>)
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f4:	429a      	cmp	r2, r3
 80115f6:	d802      	bhi.n	80115fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80115f8:	4a1f      	ldr	r2, [pc, #124]	; (8011678 <prvAddNewTaskToReadyList+0xc8>)
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80115fe:	4b20      	ldr	r3, [pc, #128]	; (8011680 <prvAddNewTaskToReadyList+0xd0>)
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	3301      	adds	r3, #1
 8011604:	4a1e      	ldr	r2, [pc, #120]	; (8011680 <prvAddNewTaskToReadyList+0xd0>)
 8011606:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011608:	4b1d      	ldr	r3, [pc, #116]	; (8011680 <prvAddNewTaskToReadyList+0xd0>)
 801160a:	681a      	ldr	r2, [r3, #0]
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011614:	4b1b      	ldr	r3, [pc, #108]	; (8011684 <prvAddNewTaskToReadyList+0xd4>)
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	429a      	cmp	r2, r3
 801161a:	d903      	bls.n	8011624 <prvAddNewTaskToReadyList+0x74>
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011620:	4a18      	ldr	r2, [pc, #96]	; (8011684 <prvAddNewTaskToReadyList+0xd4>)
 8011622:	6013      	str	r3, [r2, #0]
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011628:	4613      	mov	r3, r2
 801162a:	009b      	lsls	r3, r3, #2
 801162c:	4413      	add	r3, r2
 801162e:	009b      	lsls	r3, r3, #2
 8011630:	4a15      	ldr	r2, [pc, #84]	; (8011688 <prvAddNewTaskToReadyList+0xd8>)
 8011632:	441a      	add	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	3304      	adds	r3, #4
 8011638:	4619      	mov	r1, r3
 801163a:	4610      	mov	r0, r2
 801163c:	f7fe feff 	bl	801043e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011640:	f001 fad0 	bl	8012be4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011644:	4b0d      	ldr	r3, [pc, #52]	; (801167c <prvAddNewTaskToReadyList+0xcc>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d00e      	beq.n	801166a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801164c:	4b0a      	ldr	r3, [pc, #40]	; (8011678 <prvAddNewTaskToReadyList+0xc8>)
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011656:	429a      	cmp	r2, r3
 8011658:	d207      	bcs.n	801166a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801165a:	4b0c      	ldr	r3, [pc, #48]	; (801168c <prvAddNewTaskToReadyList+0xdc>)
 801165c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011660:	601a      	str	r2, [r3, #0]
 8011662:	f3bf 8f4f 	dsb	sy
 8011666:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801166a:	bf00      	nop
 801166c:	3708      	adds	r7, #8
 801166e:	46bd      	mov	sp, r7
 8011670:	bd80      	pop	{r7, pc}
 8011672:	bf00      	nop
 8011674:	20001594 	.word	0x20001594
 8011678:	200010c0 	.word	0x200010c0
 801167c:	200015a0 	.word	0x200015a0
 8011680:	200015b0 	.word	0x200015b0
 8011684:	2000159c 	.word	0x2000159c
 8011688:	200010c4 	.word	0x200010c4
 801168c:	e000ed04 	.word	0xe000ed04

08011690 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8011690:	b580      	push	{r7, lr}
 8011692:	b08a      	sub	sp, #40	; 0x28
 8011694:	af00      	add	r7, sp, #0
 8011696:	6078      	str	r0, [r7, #4]
 8011698:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 801169a:	2300      	movs	r3, #0
 801169c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d10a      	bne.n	80116ba <vTaskDelayUntil+0x2a>
	__asm volatile
 80116a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a8:	f383 8811 	msr	BASEPRI, r3
 80116ac:	f3bf 8f6f 	isb	sy
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	617b      	str	r3, [r7, #20]
}
 80116b6:	bf00      	nop
 80116b8:	e7fe      	b.n	80116b8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d10a      	bne.n	80116d6 <vTaskDelayUntil+0x46>
	__asm volatile
 80116c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116c4:	f383 8811 	msr	BASEPRI, r3
 80116c8:	f3bf 8f6f 	isb	sy
 80116cc:	f3bf 8f4f 	dsb	sy
 80116d0:	613b      	str	r3, [r7, #16]
}
 80116d2:	bf00      	nop
 80116d4:	e7fe      	b.n	80116d4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80116d6:	4b2a      	ldr	r3, [pc, #168]	; (8011780 <vTaskDelayUntil+0xf0>)
 80116d8:	681b      	ldr	r3, [r3, #0]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00a      	beq.n	80116f4 <vTaskDelayUntil+0x64>
	__asm volatile
 80116de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e2:	f383 8811 	msr	BASEPRI, r3
 80116e6:	f3bf 8f6f 	isb	sy
 80116ea:	f3bf 8f4f 	dsb	sy
 80116ee:	60fb      	str	r3, [r7, #12]
}
 80116f0:	bf00      	nop
 80116f2:	e7fe      	b.n	80116f2 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80116f4:	f000 f8ee 	bl	80118d4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80116f8:	4b22      	ldr	r3, [pc, #136]	; (8011784 <vTaskDelayUntil+0xf4>)
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	683a      	ldr	r2, [r7, #0]
 8011704:	4413      	add	r3, r2
 8011706:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	6a3a      	ldr	r2, [r7, #32]
 801170e:	429a      	cmp	r2, r3
 8011710:	d20b      	bcs.n	801172a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	69fa      	ldr	r2, [r7, #28]
 8011718:	429a      	cmp	r2, r3
 801171a:	d211      	bcs.n	8011740 <vTaskDelayUntil+0xb0>
 801171c:	69fa      	ldr	r2, [r7, #28]
 801171e:	6a3b      	ldr	r3, [r7, #32]
 8011720:	429a      	cmp	r2, r3
 8011722:	d90d      	bls.n	8011740 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8011724:	2301      	movs	r3, #1
 8011726:	627b      	str	r3, [r7, #36]	; 0x24
 8011728:	e00a      	b.n	8011740 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	69fa      	ldr	r2, [r7, #28]
 8011730:	429a      	cmp	r2, r3
 8011732:	d303      	bcc.n	801173c <vTaskDelayUntil+0xac>
 8011734:	69fa      	ldr	r2, [r7, #28]
 8011736:	6a3b      	ldr	r3, [r7, #32]
 8011738:	429a      	cmp	r2, r3
 801173a:	d901      	bls.n	8011740 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 801173c:	2301      	movs	r3, #1
 801173e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	69fa      	ldr	r2, [r7, #28]
 8011744:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8011746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011748:	2b00      	cmp	r3, #0
 801174a:	d006      	beq.n	801175a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 801174c:	69fa      	ldr	r2, [r7, #28]
 801174e:	6a3b      	ldr	r3, [r7, #32]
 8011750:	1ad3      	subs	r3, r2, r3
 8011752:	2100      	movs	r1, #0
 8011754:	4618      	mov	r0, r3
 8011756:	f000 fd47 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 801175a:	f000 f8c9 	bl	80118f0 <xTaskResumeAll>
 801175e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011760:	69bb      	ldr	r3, [r7, #24]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d107      	bne.n	8011776 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8011766:	4b08      	ldr	r3, [pc, #32]	; (8011788 <vTaskDelayUntil+0xf8>)
 8011768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801176c:	601a      	str	r2, [r3, #0]
 801176e:	f3bf 8f4f 	dsb	sy
 8011772:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011776:	bf00      	nop
 8011778:	3728      	adds	r7, #40	; 0x28
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}
 801177e:	bf00      	nop
 8011780:	200015bc 	.word	0x200015bc
 8011784:	20001598 	.word	0x20001598
 8011788:	e000ed04 	.word	0xe000ed04

0801178c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011794:	2300      	movs	r3, #0
 8011796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d017      	beq.n	80117ce <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801179e:	4b13      	ldr	r3, [pc, #76]	; (80117ec <vTaskDelay+0x60>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d00a      	beq.n	80117bc <vTaskDelay+0x30>
	__asm volatile
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	60bb      	str	r3, [r7, #8]
}
 80117b8:	bf00      	nop
 80117ba:	e7fe      	b.n	80117ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80117bc:	f000 f88a 	bl	80118d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80117c0:	2100      	movs	r1, #0
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 fd10 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80117c8:	f000 f892 	bl	80118f0 <xTaskResumeAll>
 80117cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d107      	bne.n	80117e4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80117d4:	4b06      	ldr	r3, [pc, #24]	; (80117f0 <vTaskDelay+0x64>)
 80117d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117da:	601a      	str	r2, [r3, #0]
 80117dc:	f3bf 8f4f 	dsb	sy
 80117e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80117e4:	bf00      	nop
 80117e6:	3710      	adds	r7, #16
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}
 80117ec:	200015bc 	.word	0x200015bc
 80117f0:	e000ed04 	.word	0xe000ed04

080117f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b08a      	sub	sp, #40	; 0x28
 80117f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80117fa:	2300      	movs	r3, #0
 80117fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80117fe:	2300      	movs	r3, #0
 8011800:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011802:	463a      	mov	r2, r7
 8011804:	1d39      	adds	r1, r7, #4
 8011806:	f107 0308 	add.w	r3, r7, #8
 801180a:	4618      	mov	r0, r3
 801180c:	f7fe fdb6 	bl	801037c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011810:	6839      	ldr	r1, [r7, #0]
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	68ba      	ldr	r2, [r7, #8]
 8011816:	9202      	str	r2, [sp, #8]
 8011818:	9301      	str	r3, [sp, #4]
 801181a:	2300      	movs	r3, #0
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	2300      	movs	r3, #0
 8011820:	460a      	mov	r2, r1
 8011822:	4924      	ldr	r1, [pc, #144]	; (80118b4 <vTaskStartScheduler+0xc0>)
 8011824:	4824      	ldr	r0, [pc, #144]	; (80118b8 <vTaskStartScheduler+0xc4>)
 8011826:	f7ff fd7b 	bl	8011320 <xTaskCreateStatic>
 801182a:	4603      	mov	r3, r0
 801182c:	4a23      	ldr	r2, [pc, #140]	; (80118bc <vTaskStartScheduler+0xc8>)
 801182e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011830:	4b22      	ldr	r3, [pc, #136]	; (80118bc <vTaskStartScheduler+0xc8>)
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	2b00      	cmp	r3, #0
 8011836:	d002      	beq.n	801183e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011838:	2301      	movs	r3, #1
 801183a:	617b      	str	r3, [r7, #20]
 801183c:	e001      	b.n	8011842 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801183e:	2300      	movs	r3, #0
 8011840:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	2b01      	cmp	r3, #1
 8011846:	d102      	bne.n	801184e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011848:	f000 fd22 	bl	8012290 <xTimerCreateTimerTask>
 801184c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d11b      	bne.n	801188c <vTaskStartScheduler+0x98>
	__asm volatile
 8011854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011858:	f383 8811 	msr	BASEPRI, r3
 801185c:	f3bf 8f6f 	isb	sy
 8011860:	f3bf 8f4f 	dsb	sy
 8011864:	613b      	str	r3, [r7, #16]
}
 8011866:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011868:	4b15      	ldr	r3, [pc, #84]	; (80118c0 <vTaskStartScheduler+0xcc>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	3354      	adds	r3, #84	; 0x54
 801186e:	4a15      	ldr	r2, [pc, #84]	; (80118c4 <vTaskStartScheduler+0xd0>)
 8011870:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011872:	4b15      	ldr	r3, [pc, #84]	; (80118c8 <vTaskStartScheduler+0xd4>)
 8011874:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011878:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801187a:	4b14      	ldr	r3, [pc, #80]	; (80118cc <vTaskStartScheduler+0xd8>)
 801187c:	2201      	movs	r2, #1
 801187e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011880:	4b13      	ldr	r3, [pc, #76]	; (80118d0 <vTaskStartScheduler+0xdc>)
 8011882:	2200      	movs	r2, #0
 8011884:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011886:	f001 f8db 	bl	8012a40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801188a:	e00e      	b.n	80118aa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011892:	d10a      	bne.n	80118aa <vTaskStartScheduler+0xb6>
	__asm volatile
 8011894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011898:	f383 8811 	msr	BASEPRI, r3
 801189c:	f3bf 8f6f 	isb	sy
 80118a0:	f3bf 8f4f 	dsb	sy
 80118a4:	60fb      	str	r3, [r7, #12]
}
 80118a6:	bf00      	nop
 80118a8:	e7fe      	b.n	80118a8 <vTaskStartScheduler+0xb4>
}
 80118aa:	bf00      	nop
 80118ac:	3718      	adds	r7, #24
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	080142cc 	.word	0x080142cc
 80118b8:	08011f1d 	.word	0x08011f1d
 80118bc:	200015b8 	.word	0x200015b8
 80118c0:	200010c0 	.word	0x200010c0
 80118c4:	200003c0 	.word	0x200003c0
 80118c8:	200015b4 	.word	0x200015b4
 80118cc:	200015a0 	.word	0x200015a0
 80118d0:	20001598 	.word	0x20001598

080118d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80118d4:	b480      	push	{r7}
 80118d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80118d8:	4b04      	ldr	r3, [pc, #16]	; (80118ec <vTaskSuspendAll+0x18>)
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	3301      	adds	r3, #1
 80118de:	4a03      	ldr	r2, [pc, #12]	; (80118ec <vTaskSuspendAll+0x18>)
 80118e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80118e2:	bf00      	nop
 80118e4:	46bd      	mov	sp, r7
 80118e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ea:	4770      	bx	lr
 80118ec:	200015bc 	.word	0x200015bc

080118f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b084      	sub	sp, #16
 80118f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80118f6:	2300      	movs	r3, #0
 80118f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80118fa:	2300      	movs	r3, #0
 80118fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80118fe:	4b42      	ldr	r3, [pc, #264]	; (8011a08 <xTaskResumeAll+0x118>)
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d10a      	bne.n	801191c <xTaskResumeAll+0x2c>
	__asm volatile
 8011906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190a:	f383 8811 	msr	BASEPRI, r3
 801190e:	f3bf 8f6f 	isb	sy
 8011912:	f3bf 8f4f 	dsb	sy
 8011916:	603b      	str	r3, [r7, #0]
}
 8011918:	bf00      	nop
 801191a:	e7fe      	b.n	801191a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801191c:	f001 f932 	bl	8012b84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011920:	4b39      	ldr	r3, [pc, #228]	; (8011a08 <xTaskResumeAll+0x118>)
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	3b01      	subs	r3, #1
 8011926:	4a38      	ldr	r2, [pc, #224]	; (8011a08 <xTaskResumeAll+0x118>)
 8011928:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801192a:	4b37      	ldr	r3, [pc, #220]	; (8011a08 <xTaskResumeAll+0x118>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d162      	bne.n	80119f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011932:	4b36      	ldr	r3, [pc, #216]	; (8011a0c <xTaskResumeAll+0x11c>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d05e      	beq.n	80119f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801193a:	e02f      	b.n	801199c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801193c:	4b34      	ldr	r3, [pc, #208]	; (8011a10 <xTaskResumeAll+0x120>)
 801193e:	68db      	ldr	r3, [r3, #12]
 8011940:	68db      	ldr	r3, [r3, #12]
 8011942:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	3318      	adds	r3, #24
 8011948:	4618      	mov	r0, r3
 801194a:	f7fe fdd5 	bl	80104f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	3304      	adds	r3, #4
 8011952:	4618      	mov	r0, r3
 8011954:	f7fe fdd0 	bl	80104f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801195c:	4b2d      	ldr	r3, [pc, #180]	; (8011a14 <xTaskResumeAll+0x124>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	429a      	cmp	r2, r3
 8011962:	d903      	bls.n	801196c <xTaskResumeAll+0x7c>
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011968:	4a2a      	ldr	r2, [pc, #168]	; (8011a14 <xTaskResumeAll+0x124>)
 801196a:	6013      	str	r3, [r2, #0]
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011970:	4613      	mov	r3, r2
 8011972:	009b      	lsls	r3, r3, #2
 8011974:	4413      	add	r3, r2
 8011976:	009b      	lsls	r3, r3, #2
 8011978:	4a27      	ldr	r2, [pc, #156]	; (8011a18 <xTaskResumeAll+0x128>)
 801197a:	441a      	add	r2, r3
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	3304      	adds	r3, #4
 8011980:	4619      	mov	r1, r3
 8011982:	4610      	mov	r0, r2
 8011984:	f7fe fd5b 	bl	801043e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801198c:	4b23      	ldr	r3, [pc, #140]	; (8011a1c <xTaskResumeAll+0x12c>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011992:	429a      	cmp	r2, r3
 8011994:	d302      	bcc.n	801199c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011996:	4b22      	ldr	r3, [pc, #136]	; (8011a20 <xTaskResumeAll+0x130>)
 8011998:	2201      	movs	r2, #1
 801199a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801199c:	4b1c      	ldr	r3, [pc, #112]	; (8011a10 <xTaskResumeAll+0x120>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d1cb      	bne.n	801193c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d001      	beq.n	80119ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80119aa:	f000 fb71 	bl	8012090 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80119ae:	4b1d      	ldr	r3, [pc, #116]	; (8011a24 <xTaskResumeAll+0x134>)
 80119b0:	681b      	ldr	r3, [r3, #0]
 80119b2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d010      	beq.n	80119dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80119ba:	f000 f859 	bl	8011a70 <xTaskIncrementTick>
 80119be:	4603      	mov	r3, r0
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d002      	beq.n	80119ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80119c4:	4b16      	ldr	r3, [pc, #88]	; (8011a20 <xTaskResumeAll+0x130>)
 80119c6:	2201      	movs	r2, #1
 80119c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	3b01      	subs	r3, #1
 80119ce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d1f1      	bne.n	80119ba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80119d6:	4b13      	ldr	r3, [pc, #76]	; (8011a24 <xTaskResumeAll+0x134>)
 80119d8:	2200      	movs	r2, #0
 80119da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80119dc:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <xTaskResumeAll+0x130>)
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d009      	beq.n	80119f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80119e4:	2301      	movs	r3, #1
 80119e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80119e8:	4b0f      	ldr	r3, [pc, #60]	; (8011a28 <xTaskResumeAll+0x138>)
 80119ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ee:	601a      	str	r2, [r3, #0]
 80119f0:	f3bf 8f4f 	dsb	sy
 80119f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80119f8:	f001 f8f4 	bl	8012be4 <vPortExitCritical>

	return xAlreadyYielded;
 80119fc:	68bb      	ldr	r3, [r7, #8]
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3710      	adds	r7, #16
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	200015bc 	.word	0x200015bc
 8011a0c:	20001594 	.word	0x20001594
 8011a10:	20001554 	.word	0x20001554
 8011a14:	2000159c 	.word	0x2000159c
 8011a18:	200010c4 	.word	0x200010c4
 8011a1c:	200010c0 	.word	0x200010c0
 8011a20:	200015a8 	.word	0x200015a8
 8011a24:	200015a4 	.word	0x200015a4
 8011a28:	e000ed04 	.word	0xe000ed04

08011a2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b083      	sub	sp, #12
 8011a30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011a32:	4b05      	ldr	r3, [pc, #20]	; (8011a48 <xTaskGetTickCount+0x1c>)
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011a38:	687b      	ldr	r3, [r7, #4]
}
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop
 8011a48:	20001598 	.word	0x20001598

08011a4c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b082      	sub	sp, #8
 8011a50:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011a52:	f001 f979 	bl	8012d48 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011a56:	2300      	movs	r3, #0
 8011a58:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011a5a:	4b04      	ldr	r3, [pc, #16]	; (8011a6c <xTaskGetTickCountFromISR+0x20>)
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011a60:	683b      	ldr	r3, [r7, #0]
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3708      	adds	r7, #8
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}
 8011a6a:	bf00      	nop
 8011a6c:	20001598 	.word	0x20001598

08011a70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b086      	sub	sp, #24
 8011a74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011a76:	2300      	movs	r3, #0
 8011a78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011a7a:	4b4f      	ldr	r3, [pc, #316]	; (8011bb8 <xTaskIncrementTick+0x148>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	f040 808f 	bne.w	8011ba2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011a84:	4b4d      	ldr	r3, [pc, #308]	; (8011bbc <xTaskIncrementTick+0x14c>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	3301      	adds	r3, #1
 8011a8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011a8c:	4a4b      	ldr	r2, [pc, #300]	; (8011bbc <xTaskIncrementTick+0x14c>)
 8011a8e:	693b      	ldr	r3, [r7, #16]
 8011a90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d120      	bne.n	8011ada <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8011a98:	4b49      	ldr	r3, [pc, #292]	; (8011bc0 <xTaskIncrementTick+0x150>)
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00a      	beq.n	8011ab8 <xTaskIncrementTick+0x48>
	__asm volatile
 8011aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aa6:	f383 8811 	msr	BASEPRI, r3
 8011aaa:	f3bf 8f6f 	isb	sy
 8011aae:	f3bf 8f4f 	dsb	sy
 8011ab2:	603b      	str	r3, [r7, #0]
}
 8011ab4:	bf00      	nop
 8011ab6:	e7fe      	b.n	8011ab6 <xTaskIncrementTick+0x46>
 8011ab8:	4b41      	ldr	r3, [pc, #260]	; (8011bc0 <xTaskIncrementTick+0x150>)
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	60fb      	str	r3, [r7, #12]
 8011abe:	4b41      	ldr	r3, [pc, #260]	; (8011bc4 <xTaskIncrementTick+0x154>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4a3f      	ldr	r2, [pc, #252]	; (8011bc0 <xTaskIncrementTick+0x150>)
 8011ac4:	6013      	str	r3, [r2, #0]
 8011ac6:	4a3f      	ldr	r2, [pc, #252]	; (8011bc4 <xTaskIncrementTick+0x154>)
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	6013      	str	r3, [r2, #0]
 8011acc:	4b3e      	ldr	r3, [pc, #248]	; (8011bc8 <xTaskIncrementTick+0x158>)
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	3301      	adds	r3, #1
 8011ad2:	4a3d      	ldr	r2, [pc, #244]	; (8011bc8 <xTaskIncrementTick+0x158>)
 8011ad4:	6013      	str	r3, [r2, #0]
 8011ad6:	f000 fadb 	bl	8012090 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011ada:	4b3c      	ldr	r3, [pc, #240]	; (8011bcc <xTaskIncrementTick+0x15c>)
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	693a      	ldr	r2, [r7, #16]
 8011ae0:	429a      	cmp	r2, r3
 8011ae2:	d349      	bcc.n	8011b78 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011ae4:	4b36      	ldr	r3, [pc, #216]	; (8011bc0 <xTaskIncrementTick+0x150>)
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d104      	bne.n	8011af8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011aee:	4b37      	ldr	r3, [pc, #220]	; (8011bcc <xTaskIncrementTick+0x15c>)
 8011af0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011af4:	601a      	str	r2, [r3, #0]
					break;
 8011af6:	e03f      	b.n	8011b78 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011af8:	4b31      	ldr	r3, [pc, #196]	; (8011bc0 <xTaskIncrementTick+0x150>)
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	68db      	ldr	r3, [r3, #12]
 8011afe:	68db      	ldr	r3, [r3, #12]
 8011b00:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	685b      	ldr	r3, [r3, #4]
 8011b06:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011b08:	693a      	ldr	r2, [r7, #16]
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d203      	bcs.n	8011b18 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011b10:	4a2e      	ldr	r2, [pc, #184]	; (8011bcc <xTaskIncrementTick+0x15c>)
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011b16:	e02f      	b.n	8011b78 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011b18:	68bb      	ldr	r3, [r7, #8]
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7fe fceb 	bl	80104f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b22:	68bb      	ldr	r3, [r7, #8]
 8011b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d004      	beq.n	8011b34 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b2a:	68bb      	ldr	r3, [r7, #8]
 8011b2c:	3318      	adds	r3, #24
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7fe fce2 	bl	80104f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011b34:	68bb      	ldr	r3, [r7, #8]
 8011b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b38:	4b25      	ldr	r3, [pc, #148]	; (8011bd0 <xTaskIncrementTick+0x160>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	429a      	cmp	r2, r3
 8011b3e:	d903      	bls.n	8011b48 <xTaskIncrementTick+0xd8>
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b44:	4a22      	ldr	r2, [pc, #136]	; (8011bd0 <xTaskIncrementTick+0x160>)
 8011b46:	6013      	str	r3, [r2, #0]
 8011b48:	68bb      	ldr	r3, [r7, #8]
 8011b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b4c:	4613      	mov	r3, r2
 8011b4e:	009b      	lsls	r3, r3, #2
 8011b50:	4413      	add	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4a1f      	ldr	r2, [pc, #124]	; (8011bd4 <xTaskIncrementTick+0x164>)
 8011b56:	441a      	add	r2, r3
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	3304      	adds	r3, #4
 8011b5c:	4619      	mov	r1, r3
 8011b5e:	4610      	mov	r0, r2
 8011b60:	f7fe fc6d 	bl	801043e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b68:	4b1b      	ldr	r3, [pc, #108]	; (8011bd8 <xTaskIncrementTick+0x168>)
 8011b6a:	681b      	ldr	r3, [r3, #0]
 8011b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b6e:	429a      	cmp	r2, r3
 8011b70:	d3b8      	bcc.n	8011ae4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011b72:	2301      	movs	r3, #1
 8011b74:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011b76:	e7b5      	b.n	8011ae4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011b78:	4b17      	ldr	r3, [pc, #92]	; (8011bd8 <xTaskIncrementTick+0x168>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b7e:	4915      	ldr	r1, [pc, #84]	; (8011bd4 <xTaskIncrementTick+0x164>)
 8011b80:	4613      	mov	r3, r2
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4413      	add	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	440b      	add	r3, r1
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	2b01      	cmp	r3, #1
 8011b8e:	d901      	bls.n	8011b94 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011b90:	2301      	movs	r3, #1
 8011b92:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011b94:	4b11      	ldr	r3, [pc, #68]	; (8011bdc <xTaskIncrementTick+0x16c>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d007      	beq.n	8011bac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011b9c:	2301      	movs	r3, #1
 8011b9e:	617b      	str	r3, [r7, #20]
 8011ba0:	e004      	b.n	8011bac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011ba2:	4b0f      	ldr	r3, [pc, #60]	; (8011be0 <xTaskIncrementTick+0x170>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	4a0d      	ldr	r2, [pc, #52]	; (8011be0 <xTaskIncrementTick+0x170>)
 8011baa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8011bac:	697b      	ldr	r3, [r7, #20]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	3718      	adds	r7, #24
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	bd80      	pop	{r7, pc}
 8011bb6:	bf00      	nop
 8011bb8:	200015bc 	.word	0x200015bc
 8011bbc:	20001598 	.word	0x20001598
 8011bc0:	2000154c 	.word	0x2000154c
 8011bc4:	20001550 	.word	0x20001550
 8011bc8:	200015ac 	.word	0x200015ac
 8011bcc:	200015b4 	.word	0x200015b4
 8011bd0:	2000159c 	.word	0x2000159c
 8011bd4:	200010c4 	.word	0x200010c4
 8011bd8:	200010c0 	.word	0x200010c0
 8011bdc:	200015a8 	.word	0x200015a8
 8011be0:	200015a4 	.word	0x200015a4

08011be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011be4:	b480      	push	{r7}
 8011be6:	b085      	sub	sp, #20
 8011be8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011bea:	4b2a      	ldr	r3, [pc, #168]	; (8011c94 <vTaskSwitchContext+0xb0>)
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d003      	beq.n	8011bfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011bf2:	4b29      	ldr	r3, [pc, #164]	; (8011c98 <vTaskSwitchContext+0xb4>)
 8011bf4:	2201      	movs	r2, #1
 8011bf6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011bf8:	e046      	b.n	8011c88 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8011bfa:	4b27      	ldr	r3, [pc, #156]	; (8011c98 <vTaskSwitchContext+0xb4>)
 8011bfc:	2200      	movs	r2, #0
 8011bfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c00:	4b26      	ldr	r3, [pc, #152]	; (8011c9c <vTaskSwitchContext+0xb8>)
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	60fb      	str	r3, [r7, #12]
 8011c06:	e010      	b.n	8011c2a <vTaskSwitchContext+0x46>
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d10a      	bne.n	8011c24 <vTaskSwitchContext+0x40>
	__asm volatile
 8011c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c12:	f383 8811 	msr	BASEPRI, r3
 8011c16:	f3bf 8f6f 	isb	sy
 8011c1a:	f3bf 8f4f 	dsb	sy
 8011c1e:	607b      	str	r3, [r7, #4]
}
 8011c20:	bf00      	nop
 8011c22:	e7fe      	b.n	8011c22 <vTaskSwitchContext+0x3e>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	3b01      	subs	r3, #1
 8011c28:	60fb      	str	r3, [r7, #12]
 8011c2a:	491d      	ldr	r1, [pc, #116]	; (8011ca0 <vTaskSwitchContext+0xbc>)
 8011c2c:	68fa      	ldr	r2, [r7, #12]
 8011c2e:	4613      	mov	r3, r2
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	4413      	add	r3, r2
 8011c34:	009b      	lsls	r3, r3, #2
 8011c36:	440b      	add	r3, r1
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d0e4      	beq.n	8011c08 <vTaskSwitchContext+0x24>
 8011c3e:	68fa      	ldr	r2, [r7, #12]
 8011c40:	4613      	mov	r3, r2
 8011c42:	009b      	lsls	r3, r3, #2
 8011c44:	4413      	add	r3, r2
 8011c46:	009b      	lsls	r3, r3, #2
 8011c48:	4a15      	ldr	r2, [pc, #84]	; (8011ca0 <vTaskSwitchContext+0xbc>)
 8011c4a:	4413      	add	r3, r2
 8011c4c:	60bb      	str	r3, [r7, #8]
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	685b      	ldr	r3, [r3, #4]
 8011c52:	685a      	ldr	r2, [r3, #4]
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	605a      	str	r2, [r3, #4]
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	685a      	ldr	r2, [r3, #4]
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	3308      	adds	r3, #8
 8011c60:	429a      	cmp	r2, r3
 8011c62:	d104      	bne.n	8011c6e <vTaskSwitchContext+0x8a>
 8011c64:	68bb      	ldr	r3, [r7, #8]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	685a      	ldr	r2, [r3, #4]
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	605a      	str	r2, [r3, #4]
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	68db      	ldr	r3, [r3, #12]
 8011c74:	4a0b      	ldr	r2, [pc, #44]	; (8011ca4 <vTaskSwitchContext+0xc0>)
 8011c76:	6013      	str	r3, [r2, #0]
 8011c78:	4a08      	ldr	r2, [pc, #32]	; (8011c9c <vTaskSwitchContext+0xb8>)
 8011c7a:	68fb      	ldr	r3, [r7, #12]
 8011c7c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011c7e:	4b09      	ldr	r3, [pc, #36]	; (8011ca4 <vTaskSwitchContext+0xc0>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	3354      	adds	r3, #84	; 0x54
 8011c84:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <vTaskSwitchContext+0xc4>)
 8011c86:	6013      	str	r3, [r2, #0]
}
 8011c88:	bf00      	nop
 8011c8a:	3714      	adds	r7, #20
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c92:	4770      	bx	lr
 8011c94:	200015bc 	.word	0x200015bc
 8011c98:	200015a8 	.word	0x200015a8
 8011c9c:	2000159c 	.word	0x2000159c
 8011ca0:	200010c4 	.word	0x200010c4
 8011ca4:	200010c0 	.word	0x200010c0
 8011ca8:	200003c0 	.word	0x200003c0

08011cac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b084      	sub	sp, #16
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d10a      	bne.n	8011cd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cc0:	f383 8811 	msr	BASEPRI, r3
 8011cc4:	f3bf 8f6f 	isb	sy
 8011cc8:	f3bf 8f4f 	dsb	sy
 8011ccc:	60fb      	str	r3, [r7, #12]
}
 8011cce:	bf00      	nop
 8011cd0:	e7fe      	b.n	8011cd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011cd2:	4b07      	ldr	r3, [pc, #28]	; (8011cf0 <vTaskPlaceOnEventList+0x44>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	3318      	adds	r3, #24
 8011cd8:	4619      	mov	r1, r3
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7fe fbd3 	bl	8010486 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ce0:	2101      	movs	r1, #1
 8011ce2:	6838      	ldr	r0, [r7, #0]
 8011ce4:	f000 fa80 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
}
 8011ce8:	bf00      	nop
 8011cea:	3710      	adds	r7, #16
 8011cec:	46bd      	mov	sp, r7
 8011cee:	bd80      	pop	{r7, pc}
 8011cf0:	200010c0 	.word	0x200010c0

08011cf4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d10a      	bne.n	8011d1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0a:	f383 8811 	msr	BASEPRI, r3
 8011d0e:	f3bf 8f6f 	isb	sy
 8011d12:	f3bf 8f4f 	dsb	sy
 8011d16:	617b      	str	r3, [r7, #20]
}
 8011d18:	bf00      	nop
 8011d1a:	e7fe      	b.n	8011d1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011d1c:	4b0a      	ldr	r3, [pc, #40]	; (8011d48 <vTaskPlaceOnEventListRestricted+0x54>)
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	3318      	adds	r3, #24
 8011d22:	4619      	mov	r1, r3
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	f7fe fb8a 	bl	801043e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d002      	beq.n	8011d36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8011d30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011d36:	6879      	ldr	r1, [r7, #4]
 8011d38:	68b8      	ldr	r0, [r7, #8]
 8011d3a:	f000 fa55 	bl	80121e8 <prvAddCurrentTaskToDelayedList>
	}
 8011d3e:	bf00      	nop
 8011d40:	3718      	adds	r7, #24
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}
 8011d46:	bf00      	nop
 8011d48:	200010c0 	.word	0x200010c0

08011d4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b086      	sub	sp, #24
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	68db      	ldr	r3, [r3, #12]
 8011d58:	68db      	ldr	r3, [r3, #12]
 8011d5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d10a      	bne.n	8011d78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d66:	f383 8811 	msr	BASEPRI, r3
 8011d6a:	f3bf 8f6f 	isb	sy
 8011d6e:	f3bf 8f4f 	dsb	sy
 8011d72:	60fb      	str	r3, [r7, #12]
}
 8011d74:	bf00      	nop
 8011d76:	e7fe      	b.n	8011d76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	3318      	adds	r3, #24
 8011d7c:	4618      	mov	r0, r3
 8011d7e:	f7fe fbbb 	bl	80104f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d82:	4b1e      	ldr	r3, [pc, #120]	; (8011dfc <xTaskRemoveFromEventList+0xb0>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d11d      	bne.n	8011dc6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011d8a:	693b      	ldr	r3, [r7, #16]
 8011d8c:	3304      	adds	r3, #4
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7fe fbb2 	bl	80104f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011d94:	693b      	ldr	r3, [r7, #16]
 8011d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d98:	4b19      	ldr	r3, [pc, #100]	; (8011e00 <xTaskRemoveFromEventList+0xb4>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	429a      	cmp	r2, r3
 8011d9e:	d903      	bls.n	8011da8 <xTaskRemoveFromEventList+0x5c>
 8011da0:	693b      	ldr	r3, [r7, #16]
 8011da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011da4:	4a16      	ldr	r2, [pc, #88]	; (8011e00 <xTaskRemoveFromEventList+0xb4>)
 8011da6:	6013      	str	r3, [r2, #0]
 8011da8:	693b      	ldr	r3, [r7, #16]
 8011daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dac:	4613      	mov	r3, r2
 8011dae:	009b      	lsls	r3, r3, #2
 8011db0:	4413      	add	r3, r2
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4a13      	ldr	r2, [pc, #76]	; (8011e04 <xTaskRemoveFromEventList+0xb8>)
 8011db6:	441a      	add	r2, r3
 8011db8:	693b      	ldr	r3, [r7, #16]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	f7fe fb3d 	bl	801043e <vListInsertEnd>
 8011dc4:	e005      	b.n	8011dd2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011dc6:	693b      	ldr	r3, [r7, #16]
 8011dc8:	3318      	adds	r3, #24
 8011dca:	4619      	mov	r1, r3
 8011dcc:	480e      	ldr	r0, [pc, #56]	; (8011e08 <xTaskRemoveFromEventList+0xbc>)
 8011dce:	f7fe fb36 	bl	801043e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dd6:	4b0d      	ldr	r3, [pc, #52]	; (8011e0c <xTaskRemoveFromEventList+0xc0>)
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	d905      	bls.n	8011dec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011de0:	2301      	movs	r3, #1
 8011de2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011de4:	4b0a      	ldr	r3, [pc, #40]	; (8011e10 <xTaskRemoveFromEventList+0xc4>)
 8011de6:	2201      	movs	r2, #1
 8011de8:	601a      	str	r2, [r3, #0]
 8011dea:	e001      	b.n	8011df0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011dec:	2300      	movs	r3, #0
 8011dee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011df0:	697b      	ldr	r3, [r7, #20]
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3718      	adds	r7, #24
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	200015bc 	.word	0x200015bc
 8011e00:	2000159c 	.word	0x2000159c
 8011e04:	200010c4 	.word	0x200010c4
 8011e08:	20001554 	.word	0x20001554
 8011e0c:	200010c0 	.word	0x200010c0
 8011e10:	200015a8 	.word	0x200015a8

08011e14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011e1c:	4b06      	ldr	r3, [pc, #24]	; (8011e38 <vTaskInternalSetTimeOutState+0x24>)
 8011e1e:	681a      	ldr	r2, [r3, #0]
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011e24:	4b05      	ldr	r3, [pc, #20]	; (8011e3c <vTaskInternalSetTimeOutState+0x28>)
 8011e26:	681a      	ldr	r2, [r3, #0]
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	605a      	str	r2, [r3, #4]
}
 8011e2c:	bf00      	nop
 8011e2e:	370c      	adds	r7, #12
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	200015ac 	.word	0x200015ac
 8011e3c:	20001598 	.word	0x20001598

08011e40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b088      	sub	sp, #32
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d10a      	bne.n	8011e66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e54:	f383 8811 	msr	BASEPRI, r3
 8011e58:	f3bf 8f6f 	isb	sy
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	613b      	str	r3, [r7, #16]
}
 8011e62:	bf00      	nop
 8011e64:	e7fe      	b.n	8011e64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d10a      	bne.n	8011e82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	60fb      	str	r3, [r7, #12]
}
 8011e7e:	bf00      	nop
 8011e80:	e7fe      	b.n	8011e80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011e82:	f000 fe7f 	bl	8012b84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011e86:	4b1d      	ldr	r3, [pc, #116]	; (8011efc <xTaskCheckForTimeOut+0xbc>)
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	685b      	ldr	r3, [r3, #4]
 8011e90:	69ba      	ldr	r2, [r7, #24]
 8011e92:	1ad3      	subs	r3, r2, r3
 8011e94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	681b      	ldr	r3, [r3, #0]
 8011e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e9e:	d102      	bne.n	8011ea6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	61fb      	str	r3, [r7, #28]
 8011ea4:	e023      	b.n	8011eee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	681a      	ldr	r2, [r3, #0]
 8011eaa:	4b15      	ldr	r3, [pc, #84]	; (8011f00 <xTaskCheckForTimeOut+0xc0>)
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	429a      	cmp	r2, r3
 8011eb0:	d007      	beq.n	8011ec2 <xTaskCheckForTimeOut+0x82>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	69ba      	ldr	r2, [r7, #24]
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d302      	bcc.n	8011ec2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	61fb      	str	r3, [r7, #28]
 8011ec0:	e015      	b.n	8011eee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	697a      	ldr	r2, [r7, #20]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d20b      	bcs.n	8011ee4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	1ad2      	subs	r2, r2, r3
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011ed8:	6878      	ldr	r0, [r7, #4]
 8011eda:	f7ff ff9b 	bl	8011e14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	61fb      	str	r3, [r7, #28]
 8011ee2:	e004      	b.n	8011eee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	2200      	movs	r2, #0
 8011ee8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011eea:	2301      	movs	r3, #1
 8011eec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011eee:	f000 fe79 	bl	8012be4 <vPortExitCritical>

	return xReturn;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3720      	adds	r7, #32
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	20001598 	.word	0x20001598
 8011f00:	200015ac 	.word	0x200015ac

08011f04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011f04:	b480      	push	{r7}
 8011f06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011f08:	4b03      	ldr	r3, [pc, #12]	; (8011f18 <vTaskMissedYield+0x14>)
 8011f0a:	2201      	movs	r2, #1
 8011f0c:	601a      	str	r2, [r3, #0]
}
 8011f0e:	bf00      	nop
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr
 8011f18:	200015a8 	.word	0x200015a8

08011f1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011f1c:	b580      	push	{r7, lr}
 8011f1e:	b082      	sub	sp, #8
 8011f20:	af00      	add	r7, sp, #0
 8011f22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011f24:	f000 f852 	bl	8011fcc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011f28:	4b06      	ldr	r3, [pc, #24]	; (8011f44 <prvIdleTask+0x28>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d9f9      	bls.n	8011f24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011f30:	4b05      	ldr	r3, [pc, #20]	; (8011f48 <prvIdleTask+0x2c>)
 8011f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f36:	601a      	str	r2, [r3, #0]
 8011f38:	f3bf 8f4f 	dsb	sy
 8011f3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011f40:	e7f0      	b.n	8011f24 <prvIdleTask+0x8>
 8011f42:	bf00      	nop
 8011f44:	200010c4 	.word	0x200010c4
 8011f48:	e000ed04 	.word	0xe000ed04

08011f4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b082      	sub	sp, #8
 8011f50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f52:	2300      	movs	r3, #0
 8011f54:	607b      	str	r3, [r7, #4]
 8011f56:	e00c      	b.n	8011f72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	4613      	mov	r3, r2
 8011f5c:	009b      	lsls	r3, r3, #2
 8011f5e:	4413      	add	r3, r2
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	4a12      	ldr	r2, [pc, #72]	; (8011fac <prvInitialiseTaskLists+0x60>)
 8011f64:	4413      	add	r3, r2
 8011f66:	4618      	mov	r0, r3
 8011f68:	f7fe fa3c 	bl	80103e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	3301      	adds	r3, #1
 8011f70:	607b      	str	r3, [r7, #4]
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	2b37      	cmp	r3, #55	; 0x37
 8011f76:	d9ef      	bls.n	8011f58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011f78:	480d      	ldr	r0, [pc, #52]	; (8011fb0 <prvInitialiseTaskLists+0x64>)
 8011f7a:	f7fe fa33 	bl	80103e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011f7e:	480d      	ldr	r0, [pc, #52]	; (8011fb4 <prvInitialiseTaskLists+0x68>)
 8011f80:	f7fe fa30 	bl	80103e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011f84:	480c      	ldr	r0, [pc, #48]	; (8011fb8 <prvInitialiseTaskLists+0x6c>)
 8011f86:	f7fe fa2d 	bl	80103e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011f8a:	480c      	ldr	r0, [pc, #48]	; (8011fbc <prvInitialiseTaskLists+0x70>)
 8011f8c:	f7fe fa2a 	bl	80103e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011f90:	480b      	ldr	r0, [pc, #44]	; (8011fc0 <prvInitialiseTaskLists+0x74>)
 8011f92:	f7fe fa27 	bl	80103e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011f96:	4b0b      	ldr	r3, [pc, #44]	; (8011fc4 <prvInitialiseTaskLists+0x78>)
 8011f98:	4a05      	ldr	r2, [pc, #20]	; (8011fb0 <prvInitialiseTaskLists+0x64>)
 8011f9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011f9c:	4b0a      	ldr	r3, [pc, #40]	; (8011fc8 <prvInitialiseTaskLists+0x7c>)
 8011f9e:	4a05      	ldr	r2, [pc, #20]	; (8011fb4 <prvInitialiseTaskLists+0x68>)
 8011fa0:	601a      	str	r2, [r3, #0]
}
 8011fa2:	bf00      	nop
 8011fa4:	3708      	adds	r7, #8
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop
 8011fac:	200010c4 	.word	0x200010c4
 8011fb0:	20001524 	.word	0x20001524
 8011fb4:	20001538 	.word	0x20001538
 8011fb8:	20001554 	.word	0x20001554
 8011fbc:	20001568 	.word	0x20001568
 8011fc0:	20001580 	.word	0x20001580
 8011fc4:	2000154c 	.word	0x2000154c
 8011fc8:	20001550 	.word	0x20001550

08011fcc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b082      	sub	sp, #8
 8011fd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011fd2:	e019      	b.n	8012008 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011fd4:	f000 fdd6 	bl	8012b84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fd8:	4b10      	ldr	r3, [pc, #64]	; (801201c <prvCheckTasksWaitingTermination+0x50>)
 8011fda:	68db      	ldr	r3, [r3, #12]
 8011fdc:	68db      	ldr	r3, [r3, #12]
 8011fde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	3304      	adds	r3, #4
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fe fa87 	bl	80104f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011fea:	4b0d      	ldr	r3, [pc, #52]	; (8012020 <prvCheckTasksWaitingTermination+0x54>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	3b01      	subs	r3, #1
 8011ff0:	4a0b      	ldr	r2, [pc, #44]	; (8012020 <prvCheckTasksWaitingTermination+0x54>)
 8011ff2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011ff4:	4b0b      	ldr	r3, [pc, #44]	; (8012024 <prvCheckTasksWaitingTermination+0x58>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	3b01      	subs	r3, #1
 8011ffa:	4a0a      	ldr	r2, [pc, #40]	; (8012024 <prvCheckTasksWaitingTermination+0x58>)
 8011ffc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011ffe:	f000 fdf1 	bl	8012be4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f810 	bl	8012028 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012008:	4b06      	ldr	r3, [pc, #24]	; (8012024 <prvCheckTasksWaitingTermination+0x58>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d1e1      	bne.n	8011fd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012010:	bf00      	nop
 8012012:	bf00      	nop
 8012014:	3708      	adds	r7, #8
 8012016:	46bd      	mov	sp, r7
 8012018:	bd80      	pop	{r7, pc}
 801201a:	bf00      	nop
 801201c:	20001568 	.word	0x20001568
 8012020:	20001594 	.word	0x20001594
 8012024:	2000157c 	.word	0x2000157c

08012028 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012028:	b580      	push	{r7, lr}
 801202a:	b084      	sub	sp, #16
 801202c:	af00      	add	r7, sp, #0
 801202e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	3354      	adds	r3, #84	; 0x54
 8012034:	4618      	mov	r0, r3
 8012036:	f002 f81b 	bl	8014070 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8012040:	2b00      	cmp	r3, #0
 8012042:	d108      	bne.n	8012056 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012048:	4618      	mov	r0, r3
 801204a:	f000 ff89 	bl	8012f60 <vPortFree>
				vPortFree( pxTCB );
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f000 ff86 	bl	8012f60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012054:	e018      	b.n	8012088 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801205c:	2b01      	cmp	r3, #1
 801205e:	d103      	bne.n	8012068 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012060:	6878      	ldr	r0, [r7, #4]
 8012062:	f000 ff7d 	bl	8012f60 <vPortFree>
	}
 8012066:	e00f      	b.n	8012088 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801206e:	2b02      	cmp	r3, #2
 8012070:	d00a      	beq.n	8012088 <prvDeleteTCB+0x60>
	__asm volatile
 8012072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012076:	f383 8811 	msr	BASEPRI, r3
 801207a:	f3bf 8f6f 	isb	sy
 801207e:	f3bf 8f4f 	dsb	sy
 8012082:	60fb      	str	r3, [r7, #12]
}
 8012084:	bf00      	nop
 8012086:	e7fe      	b.n	8012086 <prvDeleteTCB+0x5e>
	}
 8012088:	bf00      	nop
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bd80      	pop	{r7, pc}

08012090 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012096:	4b0c      	ldr	r3, [pc, #48]	; (80120c8 <prvResetNextTaskUnblockTime+0x38>)
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d104      	bne.n	80120aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80120a0:	4b0a      	ldr	r3, [pc, #40]	; (80120cc <prvResetNextTaskUnblockTime+0x3c>)
 80120a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80120a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80120a8:	e008      	b.n	80120bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80120aa:	4b07      	ldr	r3, [pc, #28]	; (80120c8 <prvResetNextTaskUnblockTime+0x38>)
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	68db      	ldr	r3, [r3, #12]
 80120b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	4a04      	ldr	r2, [pc, #16]	; (80120cc <prvResetNextTaskUnblockTime+0x3c>)
 80120ba:	6013      	str	r3, [r2, #0]
}
 80120bc:	bf00      	nop
 80120be:	370c      	adds	r7, #12
 80120c0:	46bd      	mov	sp, r7
 80120c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c6:	4770      	bx	lr
 80120c8:	2000154c 	.word	0x2000154c
 80120cc:	200015b4 	.word	0x200015b4

080120d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80120d0:	b480      	push	{r7}
 80120d2:	b083      	sub	sp, #12
 80120d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80120d6:	4b0b      	ldr	r3, [pc, #44]	; (8012104 <xTaskGetSchedulerState+0x34>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d102      	bne.n	80120e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80120de:	2301      	movs	r3, #1
 80120e0:	607b      	str	r3, [r7, #4]
 80120e2:	e008      	b.n	80120f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120e4:	4b08      	ldr	r3, [pc, #32]	; (8012108 <xTaskGetSchedulerState+0x38>)
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d102      	bne.n	80120f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80120ec:	2302      	movs	r3, #2
 80120ee:	607b      	str	r3, [r7, #4]
 80120f0:	e001      	b.n	80120f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80120f2:	2300      	movs	r3, #0
 80120f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80120f6:	687b      	ldr	r3, [r7, #4]
	}
 80120f8:	4618      	mov	r0, r3
 80120fa:	370c      	adds	r7, #12
 80120fc:	46bd      	mov	sp, r7
 80120fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012102:	4770      	bx	lr
 8012104:	200015a0 	.word	0x200015a0
 8012108:	200015bc 	.word	0x200015bc

0801210c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801210c:	b580      	push	{r7, lr}
 801210e:	b086      	sub	sp, #24
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012118:	2300      	movs	r3, #0
 801211a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d056      	beq.n	80121d0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012122:	4b2e      	ldr	r3, [pc, #184]	; (80121dc <xTaskPriorityDisinherit+0xd0>)
 8012124:	681b      	ldr	r3, [r3, #0]
 8012126:	693a      	ldr	r2, [r7, #16]
 8012128:	429a      	cmp	r2, r3
 801212a:	d00a      	beq.n	8012142 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012130:	f383 8811 	msr	BASEPRI, r3
 8012134:	f3bf 8f6f 	isb	sy
 8012138:	f3bf 8f4f 	dsb	sy
 801213c:	60fb      	str	r3, [r7, #12]
}
 801213e:	bf00      	nop
 8012140:	e7fe      	b.n	8012140 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012142:	693b      	ldr	r3, [r7, #16]
 8012144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012146:	2b00      	cmp	r3, #0
 8012148:	d10a      	bne.n	8012160 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801214a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801214e:	f383 8811 	msr	BASEPRI, r3
 8012152:	f3bf 8f6f 	isb	sy
 8012156:	f3bf 8f4f 	dsb	sy
 801215a:	60bb      	str	r3, [r7, #8]
}
 801215c:	bf00      	nop
 801215e:	e7fe      	b.n	801215e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012164:	1e5a      	subs	r2, r3, #1
 8012166:	693b      	ldr	r3, [r7, #16]
 8012168:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012172:	429a      	cmp	r2, r3
 8012174:	d02c      	beq.n	80121d0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801217a:	2b00      	cmp	r3, #0
 801217c:	d128      	bne.n	80121d0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801217e:	693b      	ldr	r3, [r7, #16]
 8012180:	3304      	adds	r3, #4
 8012182:	4618      	mov	r0, r3
 8012184:	f7fe f9b8 	bl	80104f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801218c:	693b      	ldr	r3, [r7, #16]
 801218e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012194:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012198:	693b      	ldr	r3, [r7, #16]
 801219a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a0:	4b0f      	ldr	r3, [pc, #60]	; (80121e0 <xTaskPriorityDisinherit+0xd4>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	429a      	cmp	r2, r3
 80121a6:	d903      	bls.n	80121b0 <xTaskPriorityDisinherit+0xa4>
 80121a8:	693b      	ldr	r3, [r7, #16]
 80121aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ac:	4a0c      	ldr	r2, [pc, #48]	; (80121e0 <xTaskPriorityDisinherit+0xd4>)
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b4:	4613      	mov	r3, r2
 80121b6:	009b      	lsls	r3, r3, #2
 80121b8:	4413      	add	r3, r2
 80121ba:	009b      	lsls	r3, r3, #2
 80121bc:	4a09      	ldr	r2, [pc, #36]	; (80121e4 <xTaskPriorityDisinherit+0xd8>)
 80121be:	441a      	add	r2, r3
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	3304      	adds	r3, #4
 80121c4:	4619      	mov	r1, r3
 80121c6:	4610      	mov	r0, r2
 80121c8:	f7fe f939 	bl	801043e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80121cc:	2301      	movs	r3, #1
 80121ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80121d0:	697b      	ldr	r3, [r7, #20]
	}
 80121d2:	4618      	mov	r0, r3
 80121d4:	3718      	adds	r7, #24
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop
 80121dc:	200010c0 	.word	0x200010c0
 80121e0:	2000159c 	.word	0x2000159c
 80121e4:	200010c4 	.word	0x200010c4

080121e8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b084      	sub	sp, #16
 80121ec:	af00      	add	r7, sp, #0
 80121ee:	6078      	str	r0, [r7, #4]
 80121f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80121f2:	4b21      	ldr	r3, [pc, #132]	; (8012278 <prvAddCurrentTaskToDelayedList+0x90>)
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80121f8:	4b20      	ldr	r3, [pc, #128]	; (801227c <prvAddCurrentTaskToDelayedList+0x94>)
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	3304      	adds	r3, #4
 80121fe:	4618      	mov	r0, r3
 8012200:	f7fe f97a 	bl	80104f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801220a:	d10a      	bne.n	8012222 <prvAddCurrentTaskToDelayedList+0x3a>
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d007      	beq.n	8012222 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012212:	4b1a      	ldr	r3, [pc, #104]	; (801227c <prvAddCurrentTaskToDelayedList+0x94>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	3304      	adds	r3, #4
 8012218:	4619      	mov	r1, r3
 801221a:	4819      	ldr	r0, [pc, #100]	; (8012280 <prvAddCurrentTaskToDelayedList+0x98>)
 801221c:	f7fe f90f 	bl	801043e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012220:	e026      	b.n	8012270 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012222:	68fa      	ldr	r2, [r7, #12]
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	4413      	add	r3, r2
 8012228:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801222a:	4b14      	ldr	r3, [pc, #80]	; (801227c <prvAddCurrentTaskToDelayedList+0x94>)
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	68ba      	ldr	r2, [r7, #8]
 8012230:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012232:	68ba      	ldr	r2, [r7, #8]
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	429a      	cmp	r2, r3
 8012238:	d209      	bcs.n	801224e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801223a:	4b12      	ldr	r3, [pc, #72]	; (8012284 <prvAddCurrentTaskToDelayedList+0x9c>)
 801223c:	681a      	ldr	r2, [r3, #0]
 801223e:	4b0f      	ldr	r3, [pc, #60]	; (801227c <prvAddCurrentTaskToDelayedList+0x94>)
 8012240:	681b      	ldr	r3, [r3, #0]
 8012242:	3304      	adds	r3, #4
 8012244:	4619      	mov	r1, r3
 8012246:	4610      	mov	r0, r2
 8012248:	f7fe f91d 	bl	8010486 <vListInsert>
}
 801224c:	e010      	b.n	8012270 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801224e:	4b0e      	ldr	r3, [pc, #56]	; (8012288 <prvAddCurrentTaskToDelayedList+0xa0>)
 8012250:	681a      	ldr	r2, [r3, #0]
 8012252:	4b0a      	ldr	r3, [pc, #40]	; (801227c <prvAddCurrentTaskToDelayedList+0x94>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	3304      	adds	r3, #4
 8012258:	4619      	mov	r1, r3
 801225a:	4610      	mov	r0, r2
 801225c:	f7fe f913 	bl	8010486 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012260:	4b0a      	ldr	r3, [pc, #40]	; (801228c <prvAddCurrentTaskToDelayedList+0xa4>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	68ba      	ldr	r2, [r7, #8]
 8012266:	429a      	cmp	r2, r3
 8012268:	d202      	bcs.n	8012270 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801226a:	4a08      	ldr	r2, [pc, #32]	; (801228c <prvAddCurrentTaskToDelayedList+0xa4>)
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	6013      	str	r3, [r2, #0]
}
 8012270:	bf00      	nop
 8012272:	3710      	adds	r7, #16
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	20001598 	.word	0x20001598
 801227c:	200010c0 	.word	0x200010c0
 8012280:	20001580 	.word	0x20001580
 8012284:	20001550 	.word	0x20001550
 8012288:	2000154c 	.word	0x2000154c
 801228c:	200015b4 	.word	0x200015b4

08012290 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b08a      	sub	sp, #40	; 0x28
 8012294:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012296:	2300      	movs	r3, #0
 8012298:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801229a:	f000 fb07 	bl	80128ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801229e:	4b1c      	ldr	r3, [pc, #112]	; (8012310 <xTimerCreateTimerTask+0x80>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d021      	beq.n	80122ea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80122a6:	2300      	movs	r3, #0
 80122a8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80122aa:	2300      	movs	r3, #0
 80122ac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80122ae:	1d3a      	adds	r2, r7, #4
 80122b0:	f107 0108 	add.w	r1, r7, #8
 80122b4:	f107 030c 	add.w	r3, r7, #12
 80122b8:	4618      	mov	r0, r3
 80122ba:	f7fe f879 	bl	80103b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80122be:	6879      	ldr	r1, [r7, #4]
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	68fa      	ldr	r2, [r7, #12]
 80122c4:	9202      	str	r2, [sp, #8]
 80122c6:	9301      	str	r3, [sp, #4]
 80122c8:	2302      	movs	r3, #2
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	2300      	movs	r3, #0
 80122ce:	460a      	mov	r2, r1
 80122d0:	4910      	ldr	r1, [pc, #64]	; (8012314 <xTimerCreateTimerTask+0x84>)
 80122d2:	4811      	ldr	r0, [pc, #68]	; (8012318 <xTimerCreateTimerTask+0x88>)
 80122d4:	f7ff f824 	bl	8011320 <xTaskCreateStatic>
 80122d8:	4603      	mov	r3, r0
 80122da:	4a10      	ldr	r2, [pc, #64]	; (801231c <xTimerCreateTimerTask+0x8c>)
 80122dc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80122de:	4b0f      	ldr	r3, [pc, #60]	; (801231c <xTimerCreateTimerTask+0x8c>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d001      	beq.n	80122ea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80122e6:	2301      	movs	r3, #1
 80122e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	d10a      	bne.n	8012306 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80122f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f4:	f383 8811 	msr	BASEPRI, r3
 80122f8:	f3bf 8f6f 	isb	sy
 80122fc:	f3bf 8f4f 	dsb	sy
 8012300:	613b      	str	r3, [r7, #16]
}
 8012302:	bf00      	nop
 8012304:	e7fe      	b.n	8012304 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012306:	697b      	ldr	r3, [r7, #20]
}
 8012308:	4618      	mov	r0, r3
 801230a:	3718      	adds	r7, #24
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	200015f0 	.word	0x200015f0
 8012314:	080142d4 	.word	0x080142d4
 8012318:	08012455 	.word	0x08012455
 801231c:	200015f4 	.word	0x200015f4

08012320 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b08a      	sub	sp, #40	; 0x28
 8012324:	af00      	add	r7, sp, #0
 8012326:	60f8      	str	r0, [r7, #12]
 8012328:	60b9      	str	r1, [r7, #8]
 801232a:	607a      	str	r2, [r7, #4]
 801232c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801232e:	2300      	movs	r3, #0
 8012330:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	2b00      	cmp	r3, #0
 8012336:	d10a      	bne.n	801234e <xTimerGenericCommand+0x2e>
	__asm volatile
 8012338:	f04f 0350 	mov.w	r3, #80	; 0x50
 801233c:	f383 8811 	msr	BASEPRI, r3
 8012340:	f3bf 8f6f 	isb	sy
 8012344:	f3bf 8f4f 	dsb	sy
 8012348:	623b      	str	r3, [r7, #32]
}
 801234a:	bf00      	nop
 801234c:	e7fe      	b.n	801234c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801234e:	4b1a      	ldr	r3, [pc, #104]	; (80123b8 <xTimerGenericCommand+0x98>)
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d02a      	beq.n	80123ac <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012356:	68bb      	ldr	r3, [r7, #8]
 8012358:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	2b05      	cmp	r3, #5
 8012366:	dc18      	bgt.n	801239a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8012368:	f7ff feb2 	bl	80120d0 <xTaskGetSchedulerState>
 801236c:	4603      	mov	r3, r0
 801236e:	2b02      	cmp	r3, #2
 8012370:	d109      	bne.n	8012386 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8012372:	4b11      	ldr	r3, [pc, #68]	; (80123b8 <xTimerGenericCommand+0x98>)
 8012374:	6818      	ldr	r0, [r3, #0]
 8012376:	f107 0110 	add.w	r1, r7, #16
 801237a:	2300      	movs	r3, #0
 801237c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801237e:	f7fe fa8d 	bl	801089c <xQueueGenericSend>
 8012382:	6278      	str	r0, [r7, #36]	; 0x24
 8012384:	e012      	b.n	80123ac <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012386:	4b0c      	ldr	r3, [pc, #48]	; (80123b8 <xTimerGenericCommand+0x98>)
 8012388:	6818      	ldr	r0, [r3, #0]
 801238a:	f107 0110 	add.w	r1, r7, #16
 801238e:	2300      	movs	r3, #0
 8012390:	2200      	movs	r2, #0
 8012392:	f7fe fa83 	bl	801089c <xQueueGenericSend>
 8012396:	6278      	str	r0, [r7, #36]	; 0x24
 8012398:	e008      	b.n	80123ac <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801239a:	4b07      	ldr	r3, [pc, #28]	; (80123b8 <xTimerGenericCommand+0x98>)
 801239c:	6818      	ldr	r0, [r3, #0]
 801239e:	f107 0110 	add.w	r1, r7, #16
 80123a2:	2300      	movs	r3, #0
 80123a4:	683a      	ldr	r2, [r7, #0]
 80123a6:	f7fe fb77 	bl	8010a98 <xQueueGenericSendFromISR>
 80123aa:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80123ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3728      	adds	r7, #40	; 0x28
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	200015f0 	.word	0x200015f0

080123bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b088      	sub	sp, #32
 80123c0:	af02      	add	r7, sp, #8
 80123c2:	6078      	str	r0, [r7, #4]
 80123c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80123c6:	4b22      	ldr	r3, [pc, #136]	; (8012450 <prvProcessExpiredTimer+0x94>)
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	68db      	ldr	r3, [r3, #12]
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123d0:	697b      	ldr	r3, [r7, #20]
 80123d2:	3304      	adds	r3, #4
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fe f88f 	bl	80104f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80123da:	697b      	ldr	r3, [r7, #20]
 80123dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80123e0:	f003 0304 	and.w	r3, r3, #4
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d022      	beq.n	801242e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	699a      	ldr	r2, [r3, #24]
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	18d1      	adds	r1, r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	683a      	ldr	r2, [r7, #0]
 80123f4:	6978      	ldr	r0, [r7, #20]
 80123f6:	f000 f8d1 	bl	801259c <prvInsertTimerInActiveList>
 80123fa:	4603      	mov	r3, r0
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d01f      	beq.n	8012440 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012400:	2300      	movs	r3, #0
 8012402:	9300      	str	r3, [sp, #0]
 8012404:	2300      	movs	r3, #0
 8012406:	687a      	ldr	r2, [r7, #4]
 8012408:	2100      	movs	r1, #0
 801240a:	6978      	ldr	r0, [r7, #20]
 801240c:	f7ff ff88 	bl	8012320 <xTimerGenericCommand>
 8012410:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8012412:	693b      	ldr	r3, [r7, #16]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d113      	bne.n	8012440 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801241c:	f383 8811 	msr	BASEPRI, r3
 8012420:	f3bf 8f6f 	isb	sy
 8012424:	f3bf 8f4f 	dsb	sy
 8012428:	60fb      	str	r3, [r7, #12]
}
 801242a:	bf00      	nop
 801242c:	e7fe      	b.n	801242c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801242e:	697b      	ldr	r3, [r7, #20]
 8012430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012434:	f023 0301 	bic.w	r3, r3, #1
 8012438:	b2da      	uxtb	r2, r3
 801243a:	697b      	ldr	r3, [r7, #20]
 801243c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012440:	697b      	ldr	r3, [r7, #20]
 8012442:	6a1b      	ldr	r3, [r3, #32]
 8012444:	6978      	ldr	r0, [r7, #20]
 8012446:	4798      	blx	r3
}
 8012448:	bf00      	nop
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	200015e8 	.word	0x200015e8

08012454 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b084      	sub	sp, #16
 8012458:	af00      	add	r7, sp, #0
 801245a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801245c:	f107 0308 	add.w	r3, r7, #8
 8012460:	4618      	mov	r0, r3
 8012462:	f000 f857 	bl	8012514 <prvGetNextExpireTime>
 8012466:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	4619      	mov	r1, r3
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f000 f803 	bl	8012478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8012472:	f000 f8d5 	bl	8012620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012476:	e7f1      	b.n	801245c <prvTimerTask+0x8>

08012478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b084      	sub	sp, #16
 801247c:	af00      	add	r7, sp, #0
 801247e:	6078      	str	r0, [r7, #4]
 8012480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8012482:	f7ff fa27 	bl	80118d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012486:	f107 0308 	add.w	r3, r7, #8
 801248a:	4618      	mov	r0, r3
 801248c:	f000 f866 	bl	801255c <prvSampleTimeNow>
 8012490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8012492:	68bb      	ldr	r3, [r7, #8]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d130      	bne.n	80124fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012498:	683b      	ldr	r3, [r7, #0]
 801249a:	2b00      	cmp	r3, #0
 801249c:	d10a      	bne.n	80124b4 <prvProcessTimerOrBlockTask+0x3c>
 801249e:	687a      	ldr	r2, [r7, #4]
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	429a      	cmp	r2, r3
 80124a4:	d806      	bhi.n	80124b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80124a6:	f7ff fa23 	bl	80118f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80124aa:	68f9      	ldr	r1, [r7, #12]
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f7ff ff85 	bl	80123bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80124b2:	e024      	b.n	80124fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d008      	beq.n	80124cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80124ba:	4b13      	ldr	r3, [pc, #76]	; (8012508 <prvProcessTimerOrBlockTask+0x90>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	d101      	bne.n	80124c8 <prvProcessTimerOrBlockTask+0x50>
 80124c4:	2301      	movs	r3, #1
 80124c6:	e000      	b.n	80124ca <prvProcessTimerOrBlockTask+0x52>
 80124c8:	2300      	movs	r3, #0
 80124ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80124cc:	4b0f      	ldr	r3, [pc, #60]	; (801250c <prvProcessTimerOrBlockTask+0x94>)
 80124ce:	6818      	ldr	r0, [r3, #0]
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	1ad3      	subs	r3, r2, r3
 80124d6:	683a      	ldr	r2, [r7, #0]
 80124d8:	4619      	mov	r1, r3
 80124da:	f7fe feed 	bl	80112b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80124de:	f7ff fa07 	bl	80118f0 <xTaskResumeAll>
 80124e2:	4603      	mov	r3, r0
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d10a      	bne.n	80124fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80124e8:	4b09      	ldr	r3, [pc, #36]	; (8012510 <prvProcessTimerOrBlockTask+0x98>)
 80124ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124ee:	601a      	str	r2, [r3, #0]
 80124f0:	f3bf 8f4f 	dsb	sy
 80124f4:	f3bf 8f6f 	isb	sy
}
 80124f8:	e001      	b.n	80124fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80124fa:	f7ff f9f9 	bl	80118f0 <xTaskResumeAll>
}
 80124fe:	bf00      	nop
 8012500:	3710      	adds	r7, #16
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	200015ec 	.word	0x200015ec
 801250c:	200015f0 	.word	0x200015f0
 8012510:	e000ed04 	.word	0xe000ed04

08012514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012514:	b480      	push	{r7}
 8012516:	b085      	sub	sp, #20
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801251c:	4b0e      	ldr	r3, [pc, #56]	; (8012558 <prvGetNextExpireTime+0x44>)
 801251e:	681b      	ldr	r3, [r3, #0]
 8012520:	681b      	ldr	r3, [r3, #0]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d101      	bne.n	801252a <prvGetNextExpireTime+0x16>
 8012526:	2201      	movs	r2, #1
 8012528:	e000      	b.n	801252c <prvGetNextExpireTime+0x18>
 801252a:	2200      	movs	r2, #0
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8012530:	687b      	ldr	r3, [r7, #4]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d105      	bne.n	8012544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012538:	4b07      	ldr	r3, [pc, #28]	; (8012558 <prvGetNextExpireTime+0x44>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	68db      	ldr	r3, [r3, #12]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	60fb      	str	r3, [r7, #12]
 8012542:	e001      	b.n	8012548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012544:	2300      	movs	r3, #0
 8012546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012548:	68fb      	ldr	r3, [r7, #12]
}
 801254a:	4618      	mov	r0, r3
 801254c:	3714      	adds	r7, #20
 801254e:	46bd      	mov	sp, r7
 8012550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012554:	4770      	bx	lr
 8012556:	bf00      	nop
 8012558:	200015e8 	.word	0x200015e8

0801255c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801255c:	b580      	push	{r7, lr}
 801255e:	b084      	sub	sp, #16
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8012564:	f7ff fa62 	bl	8011a2c <xTaskGetTickCount>
 8012568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801256a:	4b0b      	ldr	r3, [pc, #44]	; (8012598 <prvSampleTimeNow+0x3c>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	68fa      	ldr	r2, [r7, #12]
 8012570:	429a      	cmp	r2, r3
 8012572:	d205      	bcs.n	8012580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012574:	f000 f936 	bl	80127e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2201      	movs	r2, #1
 801257c:	601a      	str	r2, [r3, #0]
 801257e:	e002      	b.n	8012586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2200      	movs	r2, #0
 8012584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012586:	4a04      	ldr	r2, [pc, #16]	; (8012598 <prvSampleTimeNow+0x3c>)
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801258c:	68fb      	ldr	r3, [r7, #12]
}
 801258e:	4618      	mov	r0, r3
 8012590:	3710      	adds	r7, #16
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}
 8012596:	bf00      	nop
 8012598:	200015f8 	.word	0x200015f8

0801259c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	60f8      	str	r0, [r7, #12]
 80125a4:	60b9      	str	r1, [r7, #8]
 80125a6:	607a      	str	r2, [r7, #4]
 80125a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80125aa:	2300      	movs	r3, #0
 80125ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	68ba      	ldr	r2, [r7, #8]
 80125b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	68fa      	ldr	r2, [r7, #12]
 80125b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80125ba:	68ba      	ldr	r2, [r7, #8]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d812      	bhi.n	80125e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125c2:	687a      	ldr	r2, [r7, #4]
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	1ad2      	subs	r2, r2, r3
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	699b      	ldr	r3, [r3, #24]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d302      	bcc.n	80125d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80125d0:	2301      	movs	r3, #1
 80125d2:	617b      	str	r3, [r7, #20]
 80125d4:	e01b      	b.n	801260e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80125d6:	4b10      	ldr	r3, [pc, #64]	; (8012618 <prvInsertTimerInActiveList+0x7c>)
 80125d8:	681a      	ldr	r2, [r3, #0]
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	3304      	adds	r3, #4
 80125de:	4619      	mov	r1, r3
 80125e0:	4610      	mov	r0, r2
 80125e2:	f7fd ff50 	bl	8010486 <vListInsert>
 80125e6:	e012      	b.n	801260e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80125e8:	687a      	ldr	r2, [r7, #4]
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d206      	bcs.n	80125fe <prvInsertTimerInActiveList+0x62>
 80125f0:	68ba      	ldr	r2, [r7, #8]
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	429a      	cmp	r2, r3
 80125f6:	d302      	bcc.n	80125fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80125f8:	2301      	movs	r3, #1
 80125fa:	617b      	str	r3, [r7, #20]
 80125fc:	e007      	b.n	801260e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80125fe:	4b07      	ldr	r3, [pc, #28]	; (801261c <prvInsertTimerInActiveList+0x80>)
 8012600:	681a      	ldr	r2, [r3, #0]
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	3304      	adds	r3, #4
 8012606:	4619      	mov	r1, r3
 8012608:	4610      	mov	r0, r2
 801260a:	f7fd ff3c 	bl	8010486 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801260e:	697b      	ldr	r3, [r7, #20]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	200015ec 	.word	0x200015ec
 801261c:	200015e8 	.word	0x200015e8

08012620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b08e      	sub	sp, #56	; 0x38
 8012624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012626:	e0ca      	b.n	80127be <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2b00      	cmp	r3, #0
 801262c:	da18      	bge.n	8012660 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801262e:	1d3b      	adds	r3, r7, #4
 8012630:	3304      	adds	r3, #4
 8012632:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012636:	2b00      	cmp	r3, #0
 8012638:	d10a      	bne.n	8012650 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801263a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263e:	f383 8811 	msr	BASEPRI, r3
 8012642:	f3bf 8f6f 	isb	sy
 8012646:	f3bf 8f4f 	dsb	sy
 801264a:	61fb      	str	r3, [r7, #28]
}
 801264c:	bf00      	nop
 801264e:	e7fe      	b.n	801264e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012656:	6850      	ldr	r0, [r2, #4]
 8012658:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801265a:	6892      	ldr	r2, [r2, #8]
 801265c:	4611      	mov	r1, r2
 801265e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	2b00      	cmp	r3, #0
 8012664:	f2c0 80aa 	blt.w	80127bc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801266e:	695b      	ldr	r3, [r3, #20]
 8012670:	2b00      	cmp	r3, #0
 8012672:	d004      	beq.n	801267e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012676:	3304      	adds	r3, #4
 8012678:	4618      	mov	r0, r3
 801267a:	f7fd ff3d 	bl	80104f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801267e:	463b      	mov	r3, r7
 8012680:	4618      	mov	r0, r3
 8012682:	f7ff ff6b 	bl	801255c <prvSampleTimeNow>
 8012686:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2b09      	cmp	r3, #9
 801268c:	f200 8097 	bhi.w	80127be <prvProcessReceivedCommands+0x19e>
 8012690:	a201      	add	r2, pc, #4	; (adr r2, 8012698 <prvProcessReceivedCommands+0x78>)
 8012692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012696:	bf00      	nop
 8012698:	080126c1 	.word	0x080126c1
 801269c:	080126c1 	.word	0x080126c1
 80126a0:	080126c1 	.word	0x080126c1
 80126a4:	08012735 	.word	0x08012735
 80126a8:	08012749 	.word	0x08012749
 80126ac:	08012793 	.word	0x08012793
 80126b0:	080126c1 	.word	0x080126c1
 80126b4:	080126c1 	.word	0x080126c1
 80126b8:	08012735 	.word	0x08012735
 80126bc:	08012749 	.word	0x08012749
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80126c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126c6:	f043 0301 	orr.w	r3, r3, #1
 80126ca:	b2da      	uxtb	r2, r3
 80126cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80126d2:	68ba      	ldr	r2, [r7, #8]
 80126d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126d6:	699b      	ldr	r3, [r3, #24]
 80126d8:	18d1      	adds	r1, r2, r3
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126e0:	f7ff ff5c 	bl	801259c <prvInsertTimerInActiveList>
 80126e4:	4603      	mov	r3, r0
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d069      	beq.n	80127be <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80126ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ec:	6a1b      	ldr	r3, [r3, #32]
 80126ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80126f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80126f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80126f8:	f003 0304 	and.w	r3, r3, #4
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d05e      	beq.n	80127be <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012700:	68ba      	ldr	r2, [r7, #8]
 8012702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012704:	699b      	ldr	r3, [r3, #24]
 8012706:	441a      	add	r2, r3
 8012708:	2300      	movs	r3, #0
 801270a:	9300      	str	r3, [sp, #0]
 801270c:	2300      	movs	r3, #0
 801270e:	2100      	movs	r1, #0
 8012710:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012712:	f7ff fe05 	bl	8012320 <xTimerGenericCommand>
 8012716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012718:	6a3b      	ldr	r3, [r7, #32]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d14f      	bne.n	80127be <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	61bb      	str	r3, [r7, #24]
}
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012736:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801273a:	f023 0301 	bic.w	r3, r3, #1
 801273e:	b2da      	uxtb	r2, r3
 8012740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012746:	e03a      	b.n	80127be <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801274e:	f043 0301 	orr.w	r3, r3, #1
 8012752:	b2da      	uxtb	r2, r3
 8012754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012756:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801275a:	68ba      	ldr	r2, [r7, #8]
 801275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	699b      	ldr	r3, [r3, #24]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d10a      	bne.n	801277e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8012768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801276c:	f383 8811 	msr	BASEPRI, r3
 8012770:	f3bf 8f6f 	isb	sy
 8012774:	f3bf 8f4f 	dsb	sy
 8012778:	617b      	str	r3, [r7, #20]
}
 801277a:	bf00      	nop
 801277c:	e7fe      	b.n	801277c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	699a      	ldr	r2, [r3, #24]
 8012782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012784:	18d1      	adds	r1, r2, r3
 8012786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801278a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801278c:	f7ff ff06 	bl	801259c <prvInsertTimerInActiveList>
					break;
 8012790:	e015      	b.n	80127be <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012798:	f003 0302 	and.w	r3, r3, #2
 801279c:	2b00      	cmp	r3, #0
 801279e:	d103      	bne.n	80127a8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80127a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80127a2:	f000 fbdd 	bl	8012f60 <vPortFree>
 80127a6:	e00a      	b.n	80127be <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127ae:	f023 0301 	bic.w	r3, r3, #1
 80127b2:	b2da      	uxtb	r2, r3
 80127b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80127ba:	e000      	b.n	80127be <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80127bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80127be:	4b08      	ldr	r3, [pc, #32]	; (80127e0 <prvProcessReceivedCommands+0x1c0>)
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	1d39      	adds	r1, r7, #4
 80127c4:	2200      	movs	r2, #0
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fa8e 	bl	8010ce8 <xQueueReceive>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	f47f af2a 	bne.w	8012628 <prvProcessReceivedCommands+0x8>
	}
}
 80127d4:	bf00      	nop
 80127d6:	bf00      	nop
 80127d8:	3730      	adds	r7, #48	; 0x30
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	200015f0 	.word	0x200015f0

080127e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b088      	sub	sp, #32
 80127e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80127ea:	e048      	b.n	801287e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80127ec:	4b2d      	ldr	r3, [pc, #180]	; (80128a4 <prvSwitchTimerLists+0xc0>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127f6:	4b2b      	ldr	r3, [pc, #172]	; (80128a4 <prvSwitchTimerLists+0xc0>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	3304      	adds	r3, #4
 8012804:	4618      	mov	r0, r3
 8012806:	f7fd fe77 	bl	80104f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	6a1b      	ldr	r3, [r3, #32]
 801280e:	68f8      	ldr	r0, [r7, #12]
 8012810:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012818:	f003 0304 	and.w	r3, r3, #4
 801281c:	2b00      	cmp	r3, #0
 801281e:	d02e      	beq.n	801287e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	699b      	ldr	r3, [r3, #24]
 8012824:	693a      	ldr	r2, [r7, #16]
 8012826:	4413      	add	r3, r2
 8012828:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801282a:	68ba      	ldr	r2, [r7, #8]
 801282c:	693b      	ldr	r3, [r7, #16]
 801282e:	429a      	cmp	r2, r3
 8012830:	d90e      	bls.n	8012850 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	68ba      	ldr	r2, [r7, #8]
 8012836:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	68fa      	ldr	r2, [r7, #12]
 801283c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801283e:	4b19      	ldr	r3, [pc, #100]	; (80128a4 <prvSwitchTimerLists+0xc0>)
 8012840:	681a      	ldr	r2, [r3, #0]
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	3304      	adds	r3, #4
 8012846:	4619      	mov	r1, r3
 8012848:	4610      	mov	r0, r2
 801284a:	f7fd fe1c 	bl	8010486 <vListInsert>
 801284e:	e016      	b.n	801287e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012850:	2300      	movs	r3, #0
 8012852:	9300      	str	r3, [sp, #0]
 8012854:	2300      	movs	r3, #0
 8012856:	693a      	ldr	r2, [r7, #16]
 8012858:	2100      	movs	r1, #0
 801285a:	68f8      	ldr	r0, [r7, #12]
 801285c:	f7ff fd60 	bl	8012320 <xTimerGenericCommand>
 8012860:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	2b00      	cmp	r3, #0
 8012866:	d10a      	bne.n	801287e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8012868:	f04f 0350 	mov.w	r3, #80	; 0x50
 801286c:	f383 8811 	msr	BASEPRI, r3
 8012870:	f3bf 8f6f 	isb	sy
 8012874:	f3bf 8f4f 	dsb	sy
 8012878:	603b      	str	r3, [r7, #0]
}
 801287a:	bf00      	nop
 801287c:	e7fe      	b.n	801287c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801287e:	4b09      	ldr	r3, [pc, #36]	; (80128a4 <prvSwitchTimerLists+0xc0>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d1b1      	bne.n	80127ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012888:	4b06      	ldr	r3, [pc, #24]	; (80128a4 <prvSwitchTimerLists+0xc0>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801288e:	4b06      	ldr	r3, [pc, #24]	; (80128a8 <prvSwitchTimerLists+0xc4>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	4a04      	ldr	r2, [pc, #16]	; (80128a4 <prvSwitchTimerLists+0xc0>)
 8012894:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012896:	4a04      	ldr	r2, [pc, #16]	; (80128a8 <prvSwitchTimerLists+0xc4>)
 8012898:	697b      	ldr	r3, [r7, #20]
 801289a:	6013      	str	r3, [r2, #0]
}
 801289c:	bf00      	nop
 801289e:	3718      	adds	r7, #24
 80128a0:	46bd      	mov	sp, r7
 80128a2:	bd80      	pop	{r7, pc}
 80128a4:	200015e8 	.word	0x200015e8
 80128a8:	200015ec 	.word	0x200015ec

080128ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80128ac:	b580      	push	{r7, lr}
 80128ae:	b082      	sub	sp, #8
 80128b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80128b2:	f000 f967 	bl	8012b84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80128b6:	4b15      	ldr	r3, [pc, #84]	; (801290c <prvCheckForValidListAndQueue+0x60>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d120      	bne.n	8012900 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80128be:	4814      	ldr	r0, [pc, #80]	; (8012910 <prvCheckForValidListAndQueue+0x64>)
 80128c0:	f7fd fd90 	bl	80103e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80128c4:	4813      	ldr	r0, [pc, #76]	; (8012914 <prvCheckForValidListAndQueue+0x68>)
 80128c6:	f7fd fd8d 	bl	80103e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80128ca:	4b13      	ldr	r3, [pc, #76]	; (8012918 <prvCheckForValidListAndQueue+0x6c>)
 80128cc:	4a10      	ldr	r2, [pc, #64]	; (8012910 <prvCheckForValidListAndQueue+0x64>)
 80128ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80128d0:	4b12      	ldr	r3, [pc, #72]	; (801291c <prvCheckForValidListAndQueue+0x70>)
 80128d2:	4a10      	ldr	r2, [pc, #64]	; (8012914 <prvCheckForValidListAndQueue+0x68>)
 80128d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80128d6:	2300      	movs	r3, #0
 80128d8:	9300      	str	r3, [sp, #0]
 80128da:	4b11      	ldr	r3, [pc, #68]	; (8012920 <prvCheckForValidListAndQueue+0x74>)
 80128dc:	4a11      	ldr	r2, [pc, #68]	; (8012924 <prvCheckForValidListAndQueue+0x78>)
 80128de:	2110      	movs	r1, #16
 80128e0:	200a      	movs	r0, #10
 80128e2:	f7fd fe9b 	bl	801061c <xQueueGenericCreateStatic>
 80128e6:	4603      	mov	r3, r0
 80128e8:	4a08      	ldr	r2, [pc, #32]	; (801290c <prvCheckForValidListAndQueue+0x60>)
 80128ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80128ec:	4b07      	ldr	r3, [pc, #28]	; (801290c <prvCheckForValidListAndQueue+0x60>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d005      	beq.n	8012900 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80128f4:	4b05      	ldr	r3, [pc, #20]	; (801290c <prvCheckForValidListAndQueue+0x60>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	490b      	ldr	r1, [pc, #44]	; (8012928 <prvCheckForValidListAndQueue+0x7c>)
 80128fa:	4618      	mov	r0, r3
 80128fc:	f7fe fc88 	bl	8011210 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012900:	f000 f970 	bl	8012be4 <vPortExitCritical>
}
 8012904:	bf00      	nop
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	200015f0 	.word	0x200015f0
 8012910:	200015c0 	.word	0x200015c0
 8012914:	200015d4 	.word	0x200015d4
 8012918:	200015e8 	.word	0x200015e8
 801291c:	200015ec 	.word	0x200015ec
 8012920:	2000169c 	.word	0x2000169c
 8012924:	200015fc 	.word	0x200015fc
 8012928:	080142dc 	.word	0x080142dc

0801292c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801292c:	b480      	push	{r7}
 801292e:	b085      	sub	sp, #20
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	3b04      	subs	r3, #4
 801293c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012944:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	3b04      	subs	r3, #4
 801294a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	f023 0201 	bic.w	r2, r3, #1
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	3b04      	subs	r3, #4
 801295a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801295c:	4a0c      	ldr	r2, [pc, #48]	; (8012990 <pxPortInitialiseStack+0x64>)
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	3b14      	subs	r3, #20
 8012966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012968:	687a      	ldr	r2, [r7, #4]
 801296a:	68fb      	ldr	r3, [r7, #12]
 801296c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	3b04      	subs	r3, #4
 8012972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	f06f 0202 	mvn.w	r2, #2
 801297a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	3b20      	subs	r3, #32
 8012980:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012982:	68fb      	ldr	r3, [r7, #12]
}
 8012984:	4618      	mov	r0, r3
 8012986:	3714      	adds	r7, #20
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr
 8012990:	08012995 	.word	0x08012995

08012994 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012994:	b480      	push	{r7}
 8012996:	b085      	sub	sp, #20
 8012998:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801299a:	2300      	movs	r3, #0
 801299c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801299e:	4b12      	ldr	r3, [pc, #72]	; (80129e8 <prvTaskExitError+0x54>)
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80129a6:	d00a      	beq.n	80129be <prvTaskExitError+0x2a>
	__asm volatile
 80129a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ac:	f383 8811 	msr	BASEPRI, r3
 80129b0:	f3bf 8f6f 	isb	sy
 80129b4:	f3bf 8f4f 	dsb	sy
 80129b8:	60fb      	str	r3, [r7, #12]
}
 80129ba:	bf00      	nop
 80129bc:	e7fe      	b.n	80129bc <prvTaskExitError+0x28>
	__asm volatile
 80129be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129c2:	f383 8811 	msr	BASEPRI, r3
 80129c6:	f3bf 8f6f 	isb	sy
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	60bb      	str	r3, [r7, #8]
}
 80129d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80129d2:	bf00      	nop
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d0fc      	beq.n	80129d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80129da:	bf00      	nop
 80129dc:	bf00      	nop
 80129de:	3714      	adds	r7, #20
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr
 80129e8:	20000354 	.word	0x20000354
 80129ec:	00000000 	.word	0x00000000

080129f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80129f0:	4b07      	ldr	r3, [pc, #28]	; (8012a10 <pxCurrentTCBConst2>)
 80129f2:	6819      	ldr	r1, [r3, #0]
 80129f4:	6808      	ldr	r0, [r1, #0]
 80129f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129fa:	f380 8809 	msr	PSP, r0
 80129fe:	f3bf 8f6f 	isb	sy
 8012a02:	f04f 0000 	mov.w	r0, #0
 8012a06:	f380 8811 	msr	BASEPRI, r0
 8012a0a:	4770      	bx	lr
 8012a0c:	f3af 8000 	nop.w

08012a10 <pxCurrentTCBConst2>:
 8012a10:	200010c0 	.word	0x200010c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012a14:	bf00      	nop
 8012a16:	bf00      	nop

08012a18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012a18:	4808      	ldr	r0, [pc, #32]	; (8012a3c <prvPortStartFirstTask+0x24>)
 8012a1a:	6800      	ldr	r0, [r0, #0]
 8012a1c:	6800      	ldr	r0, [r0, #0]
 8012a1e:	f380 8808 	msr	MSP, r0
 8012a22:	f04f 0000 	mov.w	r0, #0
 8012a26:	f380 8814 	msr	CONTROL, r0
 8012a2a:	b662      	cpsie	i
 8012a2c:	b661      	cpsie	f
 8012a2e:	f3bf 8f4f 	dsb	sy
 8012a32:	f3bf 8f6f 	isb	sy
 8012a36:	df00      	svc	0
 8012a38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012a3a:	bf00      	nop
 8012a3c:	e000ed08 	.word	0xe000ed08

08012a40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b086      	sub	sp, #24
 8012a44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012a46:	4b46      	ldr	r3, [pc, #280]	; (8012b60 <xPortStartScheduler+0x120>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	4a46      	ldr	r2, [pc, #280]	; (8012b64 <xPortStartScheduler+0x124>)
 8012a4c:	4293      	cmp	r3, r2
 8012a4e:	d10a      	bne.n	8012a66 <xPortStartScheduler+0x26>
	__asm volatile
 8012a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a54:	f383 8811 	msr	BASEPRI, r3
 8012a58:	f3bf 8f6f 	isb	sy
 8012a5c:	f3bf 8f4f 	dsb	sy
 8012a60:	613b      	str	r3, [r7, #16]
}
 8012a62:	bf00      	nop
 8012a64:	e7fe      	b.n	8012a64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012a66:	4b3e      	ldr	r3, [pc, #248]	; (8012b60 <xPortStartScheduler+0x120>)
 8012a68:	681b      	ldr	r3, [r3, #0]
 8012a6a:	4a3f      	ldr	r2, [pc, #252]	; (8012b68 <xPortStartScheduler+0x128>)
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	d10a      	bne.n	8012a86 <xPortStartScheduler+0x46>
	__asm volatile
 8012a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a74:	f383 8811 	msr	BASEPRI, r3
 8012a78:	f3bf 8f6f 	isb	sy
 8012a7c:	f3bf 8f4f 	dsb	sy
 8012a80:	60fb      	str	r3, [r7, #12]
}
 8012a82:	bf00      	nop
 8012a84:	e7fe      	b.n	8012a84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012a86:	4b39      	ldr	r3, [pc, #228]	; (8012b6c <xPortStartScheduler+0x12c>)
 8012a88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	781b      	ldrb	r3, [r3, #0]
 8012a8e:	b2db      	uxtb	r3, r3
 8012a90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012a92:	697b      	ldr	r3, [r7, #20]
 8012a94:	22ff      	movs	r2, #255	; 0xff
 8012a96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012a98:	697b      	ldr	r3, [r7, #20]
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	b2db      	uxtb	r3, r3
 8012a9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012aa0:	78fb      	ldrb	r3, [r7, #3]
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012aa8:	b2da      	uxtb	r2, r3
 8012aaa:	4b31      	ldr	r3, [pc, #196]	; (8012b70 <xPortStartScheduler+0x130>)
 8012aac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012aae:	4b31      	ldr	r3, [pc, #196]	; (8012b74 <xPortStartScheduler+0x134>)
 8012ab0:	2207      	movs	r2, #7
 8012ab2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ab4:	e009      	b.n	8012aca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012ab6:	4b2f      	ldr	r3, [pc, #188]	; (8012b74 <xPortStartScheduler+0x134>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	3b01      	subs	r3, #1
 8012abc:	4a2d      	ldr	r2, [pc, #180]	; (8012b74 <xPortStartScheduler+0x134>)
 8012abe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012ac0:	78fb      	ldrb	r3, [r7, #3]
 8012ac2:	b2db      	uxtb	r3, r3
 8012ac4:	005b      	lsls	r3, r3, #1
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012aca:	78fb      	ldrb	r3, [r7, #3]
 8012acc:	b2db      	uxtb	r3, r3
 8012ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012ad2:	2b80      	cmp	r3, #128	; 0x80
 8012ad4:	d0ef      	beq.n	8012ab6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012ad6:	4b27      	ldr	r3, [pc, #156]	; (8012b74 <xPortStartScheduler+0x134>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	f1c3 0307 	rsb	r3, r3, #7
 8012ade:	2b04      	cmp	r3, #4
 8012ae0:	d00a      	beq.n	8012af8 <xPortStartScheduler+0xb8>
	__asm volatile
 8012ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae6:	f383 8811 	msr	BASEPRI, r3
 8012aea:	f3bf 8f6f 	isb	sy
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	60bb      	str	r3, [r7, #8]
}
 8012af4:	bf00      	nop
 8012af6:	e7fe      	b.n	8012af6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012af8:	4b1e      	ldr	r3, [pc, #120]	; (8012b74 <xPortStartScheduler+0x134>)
 8012afa:	681b      	ldr	r3, [r3, #0]
 8012afc:	021b      	lsls	r3, r3, #8
 8012afe:	4a1d      	ldr	r2, [pc, #116]	; (8012b74 <xPortStartScheduler+0x134>)
 8012b00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b02:	4b1c      	ldr	r3, [pc, #112]	; (8012b74 <xPortStartScheduler+0x134>)
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b0a:	4a1a      	ldr	r2, [pc, #104]	; (8012b74 <xPortStartScheduler+0x134>)
 8012b0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	b2da      	uxtb	r2, r3
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b16:	4b18      	ldr	r3, [pc, #96]	; (8012b78 <xPortStartScheduler+0x138>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	4a17      	ldr	r2, [pc, #92]	; (8012b78 <xPortStartScheduler+0x138>)
 8012b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012b20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012b22:	4b15      	ldr	r3, [pc, #84]	; (8012b78 <xPortStartScheduler+0x138>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	4a14      	ldr	r2, [pc, #80]	; (8012b78 <xPortStartScheduler+0x138>)
 8012b28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012b2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012b2e:	f000 f8dd 	bl	8012cec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012b32:	4b12      	ldr	r3, [pc, #72]	; (8012b7c <xPortStartScheduler+0x13c>)
 8012b34:	2200      	movs	r2, #0
 8012b36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012b38:	f000 f8fc 	bl	8012d34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012b3c:	4b10      	ldr	r3, [pc, #64]	; (8012b80 <xPortStartScheduler+0x140>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	4a0f      	ldr	r2, [pc, #60]	; (8012b80 <xPortStartScheduler+0x140>)
 8012b42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012b46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012b48:	f7ff ff66 	bl	8012a18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012b4c:	f7ff f84a 	bl	8011be4 <vTaskSwitchContext>
	prvTaskExitError();
 8012b50:	f7ff ff20 	bl	8012994 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012b54:	2300      	movs	r3, #0
}
 8012b56:	4618      	mov	r0, r3
 8012b58:	3718      	adds	r7, #24
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	bd80      	pop	{r7, pc}
 8012b5e:	bf00      	nop
 8012b60:	e000ed00 	.word	0xe000ed00
 8012b64:	410fc271 	.word	0x410fc271
 8012b68:	410fc270 	.word	0x410fc270
 8012b6c:	e000e400 	.word	0xe000e400
 8012b70:	200016ec 	.word	0x200016ec
 8012b74:	200016f0 	.word	0x200016f0
 8012b78:	e000ed20 	.word	0xe000ed20
 8012b7c:	20000354 	.word	0x20000354
 8012b80:	e000ef34 	.word	0xe000ef34

08012b84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012b84:	b480      	push	{r7}
 8012b86:	b083      	sub	sp, #12
 8012b88:	af00      	add	r7, sp, #0
	__asm volatile
 8012b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b8e:	f383 8811 	msr	BASEPRI, r3
 8012b92:	f3bf 8f6f 	isb	sy
 8012b96:	f3bf 8f4f 	dsb	sy
 8012b9a:	607b      	str	r3, [r7, #4]
}
 8012b9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012b9e:	4b0f      	ldr	r3, [pc, #60]	; (8012bdc <vPortEnterCritical+0x58>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	3301      	adds	r3, #1
 8012ba4:	4a0d      	ldr	r2, [pc, #52]	; (8012bdc <vPortEnterCritical+0x58>)
 8012ba6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012ba8:	4b0c      	ldr	r3, [pc, #48]	; (8012bdc <vPortEnterCritical+0x58>)
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b01      	cmp	r3, #1
 8012bae:	d10f      	bne.n	8012bd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012bb0:	4b0b      	ldr	r3, [pc, #44]	; (8012be0 <vPortEnterCritical+0x5c>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	b2db      	uxtb	r3, r3
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d00a      	beq.n	8012bd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8012bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bbe:	f383 8811 	msr	BASEPRI, r3
 8012bc2:	f3bf 8f6f 	isb	sy
 8012bc6:	f3bf 8f4f 	dsb	sy
 8012bca:	603b      	str	r3, [r7, #0]
}
 8012bcc:	bf00      	nop
 8012bce:	e7fe      	b.n	8012bce <vPortEnterCritical+0x4a>
	}
}
 8012bd0:	bf00      	nop
 8012bd2:	370c      	adds	r7, #12
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	20000354 	.word	0x20000354
 8012be0:	e000ed04 	.word	0xe000ed04

08012be4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012be4:	b480      	push	{r7}
 8012be6:	b083      	sub	sp, #12
 8012be8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012bea:	4b12      	ldr	r3, [pc, #72]	; (8012c34 <vPortExitCritical+0x50>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d10a      	bne.n	8012c08 <vPortExitCritical+0x24>
	__asm volatile
 8012bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf6:	f383 8811 	msr	BASEPRI, r3
 8012bfa:	f3bf 8f6f 	isb	sy
 8012bfe:	f3bf 8f4f 	dsb	sy
 8012c02:	607b      	str	r3, [r7, #4]
}
 8012c04:	bf00      	nop
 8012c06:	e7fe      	b.n	8012c06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012c08:	4b0a      	ldr	r3, [pc, #40]	; (8012c34 <vPortExitCritical+0x50>)
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	4a09      	ldr	r2, [pc, #36]	; (8012c34 <vPortExitCritical+0x50>)
 8012c10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012c12:	4b08      	ldr	r3, [pc, #32]	; (8012c34 <vPortExitCritical+0x50>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d105      	bne.n	8012c26 <vPortExitCritical+0x42>
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c1e:	683b      	ldr	r3, [r7, #0]
 8012c20:	f383 8811 	msr	BASEPRI, r3
}
 8012c24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012c26:	bf00      	nop
 8012c28:	370c      	adds	r7, #12
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c30:	4770      	bx	lr
 8012c32:	bf00      	nop
 8012c34:	20000354 	.word	0x20000354
	...

08012c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012c40:	f3ef 8009 	mrs	r0, PSP
 8012c44:	f3bf 8f6f 	isb	sy
 8012c48:	4b15      	ldr	r3, [pc, #84]	; (8012ca0 <pxCurrentTCBConst>)
 8012c4a:	681a      	ldr	r2, [r3, #0]
 8012c4c:	f01e 0f10 	tst.w	lr, #16
 8012c50:	bf08      	it	eq
 8012c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c5a:	6010      	str	r0, [r2, #0]
 8012c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012c64:	f380 8811 	msr	BASEPRI, r0
 8012c68:	f3bf 8f4f 	dsb	sy
 8012c6c:	f3bf 8f6f 	isb	sy
 8012c70:	f7fe ffb8 	bl	8011be4 <vTaskSwitchContext>
 8012c74:	f04f 0000 	mov.w	r0, #0
 8012c78:	f380 8811 	msr	BASEPRI, r0
 8012c7c:	bc09      	pop	{r0, r3}
 8012c7e:	6819      	ldr	r1, [r3, #0]
 8012c80:	6808      	ldr	r0, [r1, #0]
 8012c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c86:	f01e 0f10 	tst.w	lr, #16
 8012c8a:	bf08      	it	eq
 8012c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012c90:	f380 8809 	msr	PSP, r0
 8012c94:	f3bf 8f6f 	isb	sy
 8012c98:	4770      	bx	lr
 8012c9a:	bf00      	nop
 8012c9c:	f3af 8000 	nop.w

08012ca0 <pxCurrentTCBConst>:
 8012ca0:	200010c0 	.word	0x200010c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ca4:	bf00      	nop
 8012ca6:	bf00      	nop

08012ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
	__asm volatile
 8012cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cb2:	f383 8811 	msr	BASEPRI, r3
 8012cb6:	f3bf 8f6f 	isb	sy
 8012cba:	f3bf 8f4f 	dsb	sy
 8012cbe:	607b      	str	r3, [r7, #4]
}
 8012cc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012cc2:	f7fe fed5 	bl	8011a70 <xTaskIncrementTick>
 8012cc6:	4603      	mov	r3, r0
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d003      	beq.n	8012cd4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012ccc:	4b06      	ldr	r3, [pc, #24]	; (8012ce8 <xPortSysTickHandler+0x40>)
 8012cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cd2:	601a      	str	r2, [r3, #0]
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	f383 8811 	msr	BASEPRI, r3
}
 8012cde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012ce0:	bf00      	nop
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}
 8012ce8:	e000ed04 	.word	0xe000ed04

08012cec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012cec:	b480      	push	{r7}
 8012cee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012cf0:	4b0b      	ldr	r3, [pc, #44]	; (8012d20 <vPortSetupTimerInterrupt+0x34>)
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012cf6:	4b0b      	ldr	r3, [pc, #44]	; (8012d24 <vPortSetupTimerInterrupt+0x38>)
 8012cf8:	2200      	movs	r2, #0
 8012cfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012cfc:	4b0a      	ldr	r3, [pc, #40]	; (8012d28 <vPortSetupTimerInterrupt+0x3c>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4a0a      	ldr	r2, [pc, #40]	; (8012d2c <vPortSetupTimerInterrupt+0x40>)
 8012d02:	fba2 2303 	umull	r2, r3, r2, r3
 8012d06:	099b      	lsrs	r3, r3, #6
 8012d08:	4a09      	ldr	r2, [pc, #36]	; (8012d30 <vPortSetupTimerInterrupt+0x44>)
 8012d0a:	3b01      	subs	r3, #1
 8012d0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012d0e:	4b04      	ldr	r3, [pc, #16]	; (8012d20 <vPortSetupTimerInterrupt+0x34>)
 8012d10:	2207      	movs	r2, #7
 8012d12:	601a      	str	r2, [r3, #0]
}
 8012d14:	bf00      	nop
 8012d16:	46bd      	mov	sp, r7
 8012d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1c:	4770      	bx	lr
 8012d1e:	bf00      	nop
 8012d20:	e000e010 	.word	0xe000e010
 8012d24:	e000e018 	.word	0xe000e018
 8012d28:	20000000 	.word	0x20000000
 8012d2c:	10624dd3 	.word	0x10624dd3
 8012d30:	e000e014 	.word	0xe000e014

08012d34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012d34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012d44 <vPortEnableVFP+0x10>
 8012d38:	6801      	ldr	r1, [r0, #0]
 8012d3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012d3e:	6001      	str	r1, [r0, #0]
 8012d40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012d42:	bf00      	nop
 8012d44:	e000ed88 	.word	0xe000ed88

08012d48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012d48:	b480      	push	{r7}
 8012d4a:	b085      	sub	sp, #20
 8012d4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012d4e:	f3ef 8305 	mrs	r3, IPSR
 8012d52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	2b0f      	cmp	r3, #15
 8012d58:	d914      	bls.n	8012d84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012d5a:	4a17      	ldr	r2, [pc, #92]	; (8012db8 <vPortValidateInterruptPriority+0x70>)
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	4413      	add	r3, r2
 8012d60:	781b      	ldrb	r3, [r3, #0]
 8012d62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012d64:	4b15      	ldr	r3, [pc, #84]	; (8012dbc <vPortValidateInterruptPriority+0x74>)
 8012d66:	781b      	ldrb	r3, [r3, #0]
 8012d68:	7afa      	ldrb	r2, [r7, #11]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d20a      	bcs.n	8012d84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d72:	f383 8811 	msr	BASEPRI, r3
 8012d76:	f3bf 8f6f 	isb	sy
 8012d7a:	f3bf 8f4f 	dsb	sy
 8012d7e:	607b      	str	r3, [r7, #4]
}
 8012d80:	bf00      	nop
 8012d82:	e7fe      	b.n	8012d82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012d84:	4b0e      	ldr	r3, [pc, #56]	; (8012dc0 <vPortValidateInterruptPriority+0x78>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012d8c:	4b0d      	ldr	r3, [pc, #52]	; (8012dc4 <vPortValidateInterruptPriority+0x7c>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	429a      	cmp	r2, r3
 8012d92:	d90a      	bls.n	8012daa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d98:	f383 8811 	msr	BASEPRI, r3
 8012d9c:	f3bf 8f6f 	isb	sy
 8012da0:	f3bf 8f4f 	dsb	sy
 8012da4:	603b      	str	r3, [r7, #0]
}
 8012da6:	bf00      	nop
 8012da8:	e7fe      	b.n	8012da8 <vPortValidateInterruptPriority+0x60>
	}
 8012daa:	bf00      	nop
 8012dac:	3714      	adds	r7, #20
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr
 8012db6:	bf00      	nop
 8012db8:	e000e3f0 	.word	0xe000e3f0
 8012dbc:	200016ec 	.word	0x200016ec
 8012dc0:	e000ed0c 	.word	0xe000ed0c
 8012dc4:	200016f0 	.word	0x200016f0

08012dc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b08a      	sub	sp, #40	; 0x28
 8012dcc:	af00      	add	r7, sp, #0
 8012dce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012dd4:	f7fe fd7e 	bl	80118d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012dd8:	4b5b      	ldr	r3, [pc, #364]	; (8012f48 <pvPortMalloc+0x180>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d101      	bne.n	8012de4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012de0:	f000 f920 	bl	8013024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012de4:	4b59      	ldr	r3, [pc, #356]	; (8012f4c <pvPortMalloc+0x184>)
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	4013      	ands	r3, r2
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f040 8093 	bne.w	8012f18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d01d      	beq.n	8012e34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012df8:	2208      	movs	r2, #8
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	f003 0307 	and.w	r3, r3, #7
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d014      	beq.n	8012e34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	f023 0307 	bic.w	r3, r3, #7
 8012e10:	3308      	adds	r3, #8
 8012e12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f003 0307 	and.w	r3, r3, #7
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d00a      	beq.n	8012e34 <pvPortMalloc+0x6c>
	__asm volatile
 8012e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e22:	f383 8811 	msr	BASEPRI, r3
 8012e26:	f3bf 8f6f 	isb	sy
 8012e2a:	f3bf 8f4f 	dsb	sy
 8012e2e:	617b      	str	r3, [r7, #20]
}
 8012e30:	bf00      	nop
 8012e32:	e7fe      	b.n	8012e32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d06e      	beq.n	8012f18 <pvPortMalloc+0x150>
 8012e3a:	4b45      	ldr	r3, [pc, #276]	; (8012f50 <pvPortMalloc+0x188>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d869      	bhi.n	8012f18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012e44:	4b43      	ldr	r3, [pc, #268]	; (8012f54 <pvPortMalloc+0x18c>)
 8012e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012e48:	4b42      	ldr	r3, [pc, #264]	; (8012f54 <pvPortMalloc+0x18c>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e4e:	e004      	b.n	8012e5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	687a      	ldr	r2, [r7, #4]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d903      	bls.n	8012e6c <pvPortMalloc+0xa4>
 8012e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d1f1      	bne.n	8012e50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012e6c:	4b36      	ldr	r3, [pc, #216]	; (8012f48 <pvPortMalloc+0x180>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d050      	beq.n	8012f18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012e76:	6a3b      	ldr	r3, [r7, #32]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	2208      	movs	r2, #8
 8012e7c:	4413      	add	r3, r2
 8012e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e82:	681a      	ldr	r2, [r3, #0]
 8012e84:	6a3b      	ldr	r3, [r7, #32]
 8012e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	1ad2      	subs	r2, r2, r3
 8012e90:	2308      	movs	r3, #8
 8012e92:	005b      	lsls	r3, r3, #1
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d91f      	bls.n	8012ed8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	4413      	add	r3, r2
 8012e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ea0:	69bb      	ldr	r3, [r7, #24]
 8012ea2:	f003 0307 	and.w	r3, r3, #7
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d00a      	beq.n	8012ec0 <pvPortMalloc+0xf8>
	__asm volatile
 8012eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eae:	f383 8811 	msr	BASEPRI, r3
 8012eb2:	f3bf 8f6f 	isb	sy
 8012eb6:	f3bf 8f4f 	dsb	sy
 8012eba:	613b      	str	r3, [r7, #16]
}
 8012ebc:	bf00      	nop
 8012ebe:	e7fe      	b.n	8012ebe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec2:	685a      	ldr	r2, [r3, #4]
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	1ad2      	subs	r2, r2, r3
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012ed2:	69b8      	ldr	r0, [r7, #24]
 8012ed4:	f000 f908 	bl	80130e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012ed8:	4b1d      	ldr	r3, [pc, #116]	; (8012f50 <pvPortMalloc+0x188>)
 8012eda:	681a      	ldr	r2, [r3, #0]
 8012edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ede:	685b      	ldr	r3, [r3, #4]
 8012ee0:	1ad3      	subs	r3, r2, r3
 8012ee2:	4a1b      	ldr	r2, [pc, #108]	; (8012f50 <pvPortMalloc+0x188>)
 8012ee4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012ee6:	4b1a      	ldr	r3, [pc, #104]	; (8012f50 <pvPortMalloc+0x188>)
 8012ee8:	681a      	ldr	r2, [r3, #0]
 8012eea:	4b1b      	ldr	r3, [pc, #108]	; (8012f58 <pvPortMalloc+0x190>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d203      	bcs.n	8012efa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ef2:	4b17      	ldr	r3, [pc, #92]	; (8012f50 <pvPortMalloc+0x188>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	4a18      	ldr	r2, [pc, #96]	; (8012f58 <pvPortMalloc+0x190>)
 8012ef8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012efc:	685a      	ldr	r2, [r3, #4]
 8012efe:	4b13      	ldr	r3, [pc, #76]	; (8012f4c <pvPortMalloc+0x184>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	431a      	orrs	r2, r3
 8012f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f0a:	2200      	movs	r2, #0
 8012f0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012f0e:	4b13      	ldr	r3, [pc, #76]	; (8012f5c <pvPortMalloc+0x194>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	3301      	adds	r3, #1
 8012f14:	4a11      	ldr	r2, [pc, #68]	; (8012f5c <pvPortMalloc+0x194>)
 8012f16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012f18:	f7fe fcea 	bl	80118f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f1c:	69fb      	ldr	r3, [r7, #28]
 8012f1e:	f003 0307 	and.w	r3, r3, #7
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d00a      	beq.n	8012f3c <pvPortMalloc+0x174>
	__asm volatile
 8012f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f2a:	f383 8811 	msr	BASEPRI, r3
 8012f2e:	f3bf 8f6f 	isb	sy
 8012f32:	f3bf 8f4f 	dsb	sy
 8012f36:	60fb      	str	r3, [r7, #12]
}
 8012f38:	bf00      	nop
 8012f3a:	e7fe      	b.n	8012f3a <pvPortMalloc+0x172>
	return pvReturn;
 8012f3c:	69fb      	ldr	r3, [r7, #28]
}
 8012f3e:	4618      	mov	r0, r3
 8012f40:	3728      	adds	r7, #40	; 0x28
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	200052fc 	.word	0x200052fc
 8012f4c:	20005310 	.word	0x20005310
 8012f50:	20005300 	.word	0x20005300
 8012f54:	200052f4 	.word	0x200052f4
 8012f58:	20005304 	.word	0x20005304
 8012f5c:	20005308 	.word	0x20005308

08012f60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b086      	sub	sp, #24
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d04d      	beq.n	801300e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012f72:	2308      	movs	r3, #8
 8012f74:	425b      	negs	r3, r3
 8012f76:	697a      	ldr	r2, [r7, #20]
 8012f78:	4413      	add	r3, r2
 8012f7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012f7c:	697b      	ldr	r3, [r7, #20]
 8012f7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012f80:	693b      	ldr	r3, [r7, #16]
 8012f82:	685a      	ldr	r2, [r3, #4]
 8012f84:	4b24      	ldr	r3, [pc, #144]	; (8013018 <vPortFree+0xb8>)
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4013      	ands	r3, r2
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d10a      	bne.n	8012fa4 <vPortFree+0x44>
	__asm volatile
 8012f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f92:	f383 8811 	msr	BASEPRI, r3
 8012f96:	f3bf 8f6f 	isb	sy
 8012f9a:	f3bf 8f4f 	dsb	sy
 8012f9e:	60fb      	str	r3, [r7, #12]
}
 8012fa0:	bf00      	nop
 8012fa2:	e7fe      	b.n	8012fa2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012fa4:	693b      	ldr	r3, [r7, #16]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d00a      	beq.n	8012fc2 <vPortFree+0x62>
	__asm volatile
 8012fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb0:	f383 8811 	msr	BASEPRI, r3
 8012fb4:	f3bf 8f6f 	isb	sy
 8012fb8:	f3bf 8f4f 	dsb	sy
 8012fbc:	60bb      	str	r3, [r7, #8]
}
 8012fbe:	bf00      	nop
 8012fc0:	e7fe      	b.n	8012fc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012fc2:	693b      	ldr	r3, [r7, #16]
 8012fc4:	685a      	ldr	r2, [r3, #4]
 8012fc6:	4b14      	ldr	r3, [pc, #80]	; (8013018 <vPortFree+0xb8>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	4013      	ands	r3, r2
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d01e      	beq.n	801300e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012fd0:	693b      	ldr	r3, [r7, #16]
 8012fd2:	681b      	ldr	r3, [r3, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d11a      	bne.n	801300e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012fd8:	693b      	ldr	r3, [r7, #16]
 8012fda:	685a      	ldr	r2, [r3, #4]
 8012fdc:	4b0e      	ldr	r3, [pc, #56]	; (8013018 <vPortFree+0xb8>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	43db      	mvns	r3, r3
 8012fe2:	401a      	ands	r2, r3
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012fe8:	f7fe fc74 	bl	80118d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	685a      	ldr	r2, [r3, #4]
 8012ff0:	4b0a      	ldr	r3, [pc, #40]	; (801301c <vPortFree+0xbc>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	4a09      	ldr	r2, [pc, #36]	; (801301c <vPortFree+0xbc>)
 8012ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012ffa:	6938      	ldr	r0, [r7, #16]
 8012ffc:	f000 f874 	bl	80130e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013000:	4b07      	ldr	r3, [pc, #28]	; (8013020 <vPortFree+0xc0>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	3301      	adds	r3, #1
 8013006:	4a06      	ldr	r2, [pc, #24]	; (8013020 <vPortFree+0xc0>)
 8013008:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801300a:	f7fe fc71 	bl	80118f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801300e:	bf00      	nop
 8013010:	3718      	adds	r7, #24
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	20005310 	.word	0x20005310
 801301c:	20005300 	.word	0x20005300
 8013020:	2000530c 	.word	0x2000530c

08013024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013024:	b480      	push	{r7}
 8013026:	b085      	sub	sp, #20
 8013028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801302a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801302e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013030:	4b27      	ldr	r3, [pc, #156]	; (80130d0 <prvHeapInit+0xac>)
 8013032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	f003 0307 	and.w	r3, r3, #7
 801303a:	2b00      	cmp	r3, #0
 801303c:	d00c      	beq.n	8013058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	3307      	adds	r3, #7
 8013042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	f023 0307 	bic.w	r3, r3, #7
 801304a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801304c:	68ba      	ldr	r2, [r7, #8]
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	1ad3      	subs	r3, r2, r3
 8013052:	4a1f      	ldr	r2, [pc, #124]	; (80130d0 <prvHeapInit+0xac>)
 8013054:	4413      	add	r3, r2
 8013056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801305c:	4a1d      	ldr	r2, [pc, #116]	; (80130d4 <prvHeapInit+0xb0>)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013062:	4b1c      	ldr	r3, [pc, #112]	; (80130d4 <prvHeapInit+0xb0>)
 8013064:	2200      	movs	r2, #0
 8013066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	68ba      	ldr	r2, [r7, #8]
 801306c:	4413      	add	r3, r2
 801306e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013070:	2208      	movs	r2, #8
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	1a9b      	subs	r3, r3, r2
 8013076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	f023 0307 	bic.w	r3, r3, #7
 801307e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	4a15      	ldr	r2, [pc, #84]	; (80130d8 <prvHeapInit+0xb4>)
 8013084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013086:	4b14      	ldr	r3, [pc, #80]	; (80130d8 <prvHeapInit+0xb4>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	2200      	movs	r2, #0
 801308c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801308e:	4b12      	ldr	r3, [pc, #72]	; (80130d8 <prvHeapInit+0xb4>)
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	2200      	movs	r2, #0
 8013094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	1ad2      	subs	r2, r2, r3
 80130a0:	683b      	ldr	r3, [r7, #0]
 80130a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80130a4:	4b0c      	ldr	r3, [pc, #48]	; (80130d8 <prvHeapInit+0xb4>)
 80130a6:	681a      	ldr	r2, [r3, #0]
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	685b      	ldr	r3, [r3, #4]
 80130b0:	4a0a      	ldr	r2, [pc, #40]	; (80130dc <prvHeapInit+0xb8>)
 80130b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	685b      	ldr	r3, [r3, #4]
 80130b8:	4a09      	ldr	r2, [pc, #36]	; (80130e0 <prvHeapInit+0xbc>)
 80130ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80130bc:	4b09      	ldr	r3, [pc, #36]	; (80130e4 <prvHeapInit+0xc0>)
 80130be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80130c2:	601a      	str	r2, [r3, #0]
}
 80130c4:	bf00      	nop
 80130c6:	3714      	adds	r7, #20
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr
 80130d0:	200016f4 	.word	0x200016f4
 80130d4:	200052f4 	.word	0x200052f4
 80130d8:	200052fc 	.word	0x200052fc
 80130dc:	20005304 	.word	0x20005304
 80130e0:	20005300 	.word	0x20005300
 80130e4:	20005310 	.word	0x20005310

080130e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80130e8:	b480      	push	{r7}
 80130ea:	b085      	sub	sp, #20
 80130ec:	af00      	add	r7, sp, #0
 80130ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80130f0:	4b28      	ldr	r3, [pc, #160]	; (8013194 <prvInsertBlockIntoFreeList+0xac>)
 80130f2:	60fb      	str	r3, [r7, #12]
 80130f4:	e002      	b.n	80130fc <prvInsertBlockIntoFreeList+0x14>
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	60fb      	str	r3, [r7, #12]
 80130fc:	68fb      	ldr	r3, [r7, #12]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	687a      	ldr	r2, [r7, #4]
 8013102:	429a      	cmp	r2, r3
 8013104:	d8f7      	bhi.n	80130f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801310a:	68fb      	ldr	r3, [r7, #12]
 801310c:	685b      	ldr	r3, [r3, #4]
 801310e:	68ba      	ldr	r2, [r7, #8]
 8013110:	4413      	add	r3, r2
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	429a      	cmp	r2, r3
 8013116:	d108      	bne.n	801312a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	685a      	ldr	r2, [r3, #4]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	441a      	add	r2, r3
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	685b      	ldr	r3, [r3, #4]
 8013132:	68ba      	ldr	r2, [r7, #8]
 8013134:	441a      	add	r2, r3
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	429a      	cmp	r2, r3
 801313c:	d118      	bne.n	8013170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	681a      	ldr	r2, [r3, #0]
 8013142:	4b15      	ldr	r3, [pc, #84]	; (8013198 <prvInsertBlockIntoFreeList+0xb0>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d00d      	beq.n	8013166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	685a      	ldr	r2, [r3, #4]
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	685b      	ldr	r3, [r3, #4]
 8013154:	441a      	add	r2, r3
 8013156:	687b      	ldr	r3, [r7, #4]
 8013158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	601a      	str	r2, [r3, #0]
 8013164:	e008      	b.n	8013178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013166:	4b0c      	ldr	r3, [pc, #48]	; (8013198 <prvInsertBlockIntoFreeList+0xb0>)
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	601a      	str	r2, [r3, #0]
 801316e:	e003      	b.n	8013178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	681a      	ldr	r2, [r3, #0]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013178:	68fa      	ldr	r2, [r7, #12]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	429a      	cmp	r2, r3
 801317e:	d002      	beq.n	8013186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013186:	bf00      	nop
 8013188:	3714      	adds	r7, #20
 801318a:	46bd      	mov	sp, r7
 801318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013190:	4770      	bx	lr
 8013192:	bf00      	nop
 8013194:	200052f4 	.word	0x200052f4
 8013198:	200052fc 	.word	0x200052fc

0801319c <COM_Init>:
#include "COM.h"

extern osMessageQueueId_t xFIFO_COMHandle;

void COM_Init(void)
{
 801319c:	b480      	push	{r7}
 801319e:	af00      	add	r7, sp, #0

}
 80131a0:	bf00      	nop
 80131a2:	46bd      	mov	sp, r7
 80131a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a8:	4770      	bx	lr

080131aa <vTaskCOM_Runnable>:

void vTaskCOM_Runnable(void)
{
 80131aa:	b580      	push	{r7, lr}
 80131ac:	af00      	add	r7, sp, #0
	COM_Init();
 80131ae:	f7ff fff5 	bl	801319c <COM_Init>
	for(;;)
 80131b2:	e7fe      	b.n	80131b2 <vTaskCOM_Runnable+0x8>

080131b4 <DiagAppl_Init>:
 *      Author: lord448
 */


void DiagAppl_Init(void)
{
 80131b4:	b480      	push	{r7}
 80131b6:	af00      	add	r7, sp, #0

}
 80131b8:	bf00      	nop
 80131ba:	46bd      	mov	sp, r7
 80131bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131c0:	4770      	bx	lr

080131c2 <vTaskDiagAppl_Runnable>:

void vTaskDiagAppl_Runnable(void)
{
 80131c2:	b580      	push	{r7, lr}
 80131c4:	af00      	add	r7, sp, #0
	DiagAppl_Init();
 80131c6:	f7ff fff5 	bl	80131b4 <DiagAppl_Init>
	for(;;)
 80131ca:	e7fe      	b.n	80131ca <vTaskDiagAppl_Runnable+0x8>

080131cc <DistanceSensor_Init>:

extern osMessageQueueId_t xFIFO_COMHandle;
extern osMessageQueueId_t xFIFO_DistanceHandle;

void DistanceSensor_Init(void)
{
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	af00      	add	r7, sp, #0
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;

	Dev->I2cHandle = &hi2c1;
 80131d2:	4b3a      	ldr	r3, [pc, #232]	; (80132bc <DistanceSensor_Init+0xf0>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4a3a      	ldr	r2, [pc, #232]	; (80132c0 <DistanceSensor_Init+0xf4>)
 80131d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
	Dev->I2cDevAddr = VL53L0X_ADDR;
 80131dc:	4b37      	ldr	r3, [pc, #220]	; (80132bc <DistanceSensor_Init+0xf0>)
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	2252      	movs	r2, #82	; 0x52
 80131e2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	//Disable XSHUT
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_RESET);
 80131e6:	2200      	movs	r2, #0
 80131e8:	2180      	movs	r1, #128	; 0x80
 80131ea:	4836      	ldr	r0, [pc, #216]	; (80132c4 <DistanceSensor_Init+0xf8>)
 80131ec:	f7ef f910 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80131f0:	2014      	movs	r0, #20
 80131f2:	f7ee fad7 	bl	80017a4 <HAL_Delay>

	//Enable XSHUT
	HAL_GPIO_WritePin(TOF_XSHUT_GPIO_Port, TOF_XSHUT_Pin, GPIO_PIN_SET);
 80131f6:	2201      	movs	r2, #1
 80131f8:	2180      	movs	r1, #128	; 0x80
 80131fa:	4832      	ldr	r0, [pc, #200]	; (80132c4 <DistanceSensor_Init+0xf8>)
 80131fc:	f7ef f908 	bl	8002410 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8013200:	2014      	movs	r0, #20
 8013202:	f7ee facf 	bl	80017a4 <HAL_Delay>

	VL53L0X_WaitDeviceBooted( Dev );
 8013206:	4b2d      	ldr	r3, [pc, #180]	; (80132bc <DistanceSensor_Init+0xf0>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4618      	mov	r0, r3
 801320c:	f7f6 f8c4 	bl	8009398 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8013210:	4b2a      	ldr	r3, [pc, #168]	; (80132bc <DistanceSensor_Init+0xf0>)
 8013212:	681b      	ldr	r3, [r3, #0]
 8013214:	4618      	mov	r0, r3
 8013216:	f7f5 fdd9 	bl	8008dcc <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 801321a:	4b28      	ldr	r3, [pc, #160]	; (80132bc <DistanceSensor_Init+0xf0>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	4618      	mov	r0, r3
 8013220:	f7f5 ff38 	bl	8009094 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8013224:	4b25      	ldr	r3, [pc, #148]	; (80132bc <DistanceSensor_Init+0xf0>)
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	1c7a      	adds	r2, r7, #1
 801322a:	1cb9      	adds	r1, r7, #2
 801322c:	4618      	mov	r0, r3
 801322e:	f7f6 fdd3 	bl	8009dd8 <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8013232:	4b22      	ldr	r3, [pc, #136]	; (80132bc <DistanceSensor_Init+0xf0>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	1cfa      	adds	r2, r7, #3
 8013238:	1d39      	adds	r1, r7, #4
 801323a:	4618      	mov	r0, r3
 801323c:	f7f7 fa5a 	bl	800a6f4 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8013240:	4b1e      	ldr	r3, [pc, #120]	; (80132bc <DistanceSensor_Init+0xf0>)
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	2100      	movs	r1, #0
 8013246:	4618      	mov	r0, r3
 8013248:	f7f6 f944 	bl	80094d4 <VL53L0X_SetDeviceMode>

	//Enable/Disable Sigma and Signal check
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 801324c:	4b1b      	ldr	r3, [pc, #108]	; (80132bc <DistanceSensor_Init+0xf0>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2201      	movs	r2, #1
 8013252:	2100      	movs	r1, #0
 8013254:	4618      	mov	r0, r3
 8013256:	f7f6 fbb9 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 801325a:	4b18      	ldr	r3, [pc, #96]	; (80132bc <DistanceSensor_Init+0xf0>)
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	2201      	movs	r2, #1
 8013260:	2101      	movs	r1, #1
 8013262:	4618      	mov	r0, r3
 8013264:	f7f6 fbb2 	bl	80099cc <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 8013268:	4b14      	ldr	r3, [pc, #80]	; (80132bc <DistanceSensor_Init+0xf0>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	f641 1299 	movw	r2, #6553	; 0x1999
 8013270:	2101      	movs	r1, #1
 8013272:	4618      	mov	r0, r3
 8013274:	f7f6 fc5a 	bl	8009b2c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8013278:	4b10      	ldr	r3, [pc, #64]	; (80132bc <DistanceSensor_Init+0xf0>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8013280:	2100      	movs	r1, #0
 8013282:	4618      	mov	r0, r3
 8013284:	f7f6 fc52 	bl	8009b2c <VL53L0X_SetLimitCheckValue>
	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 8013288:	4b0c      	ldr	r3, [pc, #48]	; (80132bc <DistanceSensor_Init+0xf0>)
 801328a:	681b      	ldr	r3, [r3, #0]
 801328c:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8013290:	4618      	mov	r0, r3
 8013292:	f7f6 f97d 	bl	8009590 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8013296:	4b09      	ldr	r3, [pc, #36]	; (80132bc <DistanceSensor_Init+0xf0>)
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	2212      	movs	r2, #18
 801329c:	2100      	movs	r1, #0
 801329e:	4618      	mov	r0, r3
 80132a0:	f7f6 f99c 	bl	80095dc <VL53L0X_SetVcselPulsePeriod>
	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80132a4:	4b05      	ldr	r3, [pc, #20]	; (80132bc <DistanceSensor_Init+0xf0>)
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	220e      	movs	r2, #14
 80132aa:	2101      	movs	r1, #1
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7f6 f995 	bl	80095dc <VL53L0X_SetVcselPulsePeriod>
}
 80132b2:	bf00      	nop
 80132b4:	3708      	adds	r7, #8
 80132b6:	46bd      	mov	sp, r7
 80132b8:	bd80      	pop	{r7, pc}
 80132ba:	bf00      	nop
 80132bc:	20000358 	.word	0x20000358
 80132c0:	20000440 	.word	0x20000440
 80132c4:	40020400 	.word	0x40020400

080132c8 <DistanceSensor_MainRunnable>:

void DistanceSensor_MainRunnable(void)
{
 80132c8:	b580      	push	{r7, lr}
 80132ca:	b084      	sub	sp, #16
 80132cc:	af00      	add	r7, sp, #0
	const uint32_t MeasureTolerance = 5;
 80132ce:	2305      	movs	r3, #5
 80132d0:	60fb      	str	r3, [r7, #12]
	const uint32_t Reference = 520;
 80132d2:	f44f 7302 	mov.w	r3, #520	; 0x208
 80132d6:	60bb      	str	r3, [r7, #8]
	static uint16_t distance, past_measure;
	PDU_t distance_PDU;

	VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 80132d8:	4b1d      	ldr	r3, [pc, #116]	; (8013350 <DistanceSensor_MainRunnable+0x88>)
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	491d      	ldr	r1, [pc, #116]	; (8013354 <DistanceSensor_MainRunnable+0x8c>)
 80132de:	4618      	mov	r0, r3
 80132e0:	f7f7 f81c 	bl	800a31c <VL53L0X_PerformSingleRangingMeasurement>
	if(RangingData.RangeStatus == 0)
 80132e4:	4b1b      	ldr	r3, [pc, #108]	; (8013354 <DistanceSensor_MainRunnable+0x8c>)
 80132e6:	7e1b      	ldrb	r3, [r3, #24]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d129      	bne.n	8013340 <DistanceSensor_MainRunnable+0x78>
  {
		if(RangingData.RangeMilliMeter > past_measure+MeasureTolerance || RangingData.RangeMilliMeter < past_measure-MeasureTolerance)
 80132ec:	4b19      	ldr	r3, [pc, #100]	; (8013354 <DistanceSensor_MainRunnable+0x8c>)
 80132ee:	891b      	ldrh	r3, [r3, #8]
 80132f0:	461a      	mov	r2, r3
 80132f2:	4b19      	ldr	r3, [pc, #100]	; (8013358 <DistanceSensor_MainRunnable+0x90>)
 80132f4:	881b      	ldrh	r3, [r3, #0]
 80132f6:	4619      	mov	r1, r3
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	440b      	add	r3, r1
 80132fc:	429a      	cmp	r2, r3
 80132fe:	d809      	bhi.n	8013314 <DistanceSensor_MainRunnable+0x4c>
 8013300:	4b14      	ldr	r3, [pc, #80]	; (8013354 <DistanceSensor_MainRunnable+0x8c>)
 8013302:	891b      	ldrh	r3, [r3, #8]
 8013304:	461a      	mov	r2, r3
 8013306:	4b14      	ldr	r3, [pc, #80]	; (8013358 <DistanceSensor_MainRunnable+0x90>)
 8013308:	881b      	ldrh	r3, [r3, #0]
 801330a:	4619      	mov	r1, r3
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	1acb      	subs	r3, r1, r3
 8013310:	429a      	cmp	r2, r3
 8013312:	d215      	bcs.n	8013340 <DistanceSensor_MainRunnable+0x78>
		{
			distance = Reference - RangingData.RangeMilliMeter;
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	b29a      	uxth	r2, r3
 8013318:	4b0e      	ldr	r3, [pc, #56]	; (8013354 <DistanceSensor_MainRunnable+0x8c>)
 801331a:	891b      	ldrh	r3, [r3, #8]
 801331c:	1ad3      	subs	r3, r2, r3
 801331e:	b29a      	uxth	r2, r3
 8013320:	4b0e      	ldr	r3, [pc, #56]	; (801335c <DistanceSensor_MainRunnable+0x94>)
 8013322:	801a      	strh	r2, [r3, #0]
			//distance_PDU.rawData = distance;
			//distance_PDU.chunks[4] = 0; /*TODO: Add the message ID*/
			osMessageQueuePut(xFIFO_DistanceHandle, &distance, 0U, 0U); /*Sending to PID*/
 8013324:	4b0e      	ldr	r3, [pc, #56]	; (8013360 <DistanceSensor_MainRunnable+0x98>)
 8013326:	6818      	ldr	r0, [r3, #0]
 8013328:	2300      	movs	r3, #0
 801332a:	2200      	movs	r2, #0
 801332c:	490b      	ldr	r1, [pc, #44]	; (801335c <DistanceSensor_MainRunnable+0x94>)
 801332e:	f7fc ff67 	bl	8010200 <osMessageQueuePut>
			osMessageQueuePut(xFIFO_COMHandle, &distance_PDU, 0U, 0U); /*Sending to COM*/
 8013332:	4b0c      	ldr	r3, [pc, #48]	; (8013364 <DistanceSensor_MainRunnable+0x9c>)
 8013334:	6818      	ldr	r0, [r3, #0]
 8013336:	4639      	mov	r1, r7
 8013338:	2300      	movs	r3, #0
 801333a:	2200      	movs	r2, #0
 801333c:	f7fc ff60 	bl	8010200 <osMessageQueuePut>
		}
	}
	past_measure = RangingData.RangeMilliMeter;
 8013340:	4b04      	ldr	r3, [pc, #16]	; (8013354 <DistanceSensor_MainRunnable+0x8c>)
 8013342:	891a      	ldrh	r2, [r3, #8]
 8013344:	4b04      	ldr	r3, [pc, #16]	; (8013358 <DistanceSensor_MainRunnable+0x90>)
 8013346:	801a      	strh	r2, [r3, #0]
}
 8013348:	bf00      	nop
 801334a:	3710      	adds	r7, #16
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	20000358 	.word	0x20000358
 8013354:	200054a4 	.word	0x200054a4
 8013358:	200054c0 	.word	0x200054c0
 801335c:	200054c2 	.word	0x200054c2
 8013360:	20000864 	.word	0x20000864
 8013364:	20000860 	.word	0x20000860

08013368 <EcuM_Init>:
 *      Author: lord448
 */


void EcuM_Init(void)
{
 8013368:	b480      	push	{r7}
 801336a:	af00      	add	r7, sp, #0

}
 801336c:	bf00      	nop
 801336e:	46bd      	mov	sp, r7
 8013370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013374:	4770      	bx	lr

08013376 <vTaskEcuM_Runnable>:

void vTaskEcuM_Runnable(void)
{
 8013376:	b580      	push	{r7, lr}
 8013378:	af00      	add	r7, sp, #0
	EcuM_Init();
 801337a:	f7ff fff5 	bl	8013368 <EcuM_Init>
	for(;;)
 801337e:	e7fe      	b.n	801337e <vTaskEcuM_Runnable+0x8>

08013380 <FAN_Init>:
 *  Created on: May 29, 2024
 *      Author: lord448
 */

void FAN_Init(void)
{
 8013380:	b480      	push	{r7}
 8013382:	af00      	add	r7, sp, #0
	/*Init the timers*/
}
 8013384:	bf00      	nop
 8013386:	46bd      	mov	sp, r7
 8013388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338c:	4770      	bx	lr

0801338e <FAN_MainRunnable>:

void FAN_MainRunnable(void)
{
 801338e:	b480      	push	{r7}
 8013390:	af00      	add	r7, sp, #0

}
 8013392:	bf00      	nop
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <vTaskModeManager_Runnable>:
 *      Author: lord448
 */


void vTaskModeManager_Runnable(void)
{
 801339c:	b480      	push	{r7}
 801339e:	af00      	add	r7, sp, #0

	for(;;)
 80133a0:	e7fe      	b.n	80133a0 <vTaskModeManager_Runnable+0x4>

080133a2 <PID_SetConfigs>:
		.Past_Error = 0,
		.Set_Point = 0
};

static PID_SetConfigs(PIDConfigs *configs)
{
 80133a2:	b480      	push	{r7}
 80133a4:	b083      	sub	sp, #12
 80133a6:	af00      	add	r7, sp, #0
 80133a8:	6078      	str	r0, [r7, #4]
  /*TODO: Change the configs of the global PID structure based on the pointer*/
}
 80133aa:	bf00      	nop
 80133ac:	4618      	mov	r0, r3
 80133ae:	370c      	adds	r7, #12
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr

080133b8 <vTaskPID_Runnable>:


}

void vTaskPID_Runnable(void)
{
 80133b8:	b580      	push	{r7, lr}
 80133ba:	b08a      	sub	sp, #40	; 0x28
 80133bc:	af00      	add	r7, sp, #0
	uint32_t distance = 0;
 80133be:	2300      	movs	r3, #0
 80133c0:	627b      	str	r3, [r7, #36]	; 0x24
	PDU_t ControlAction_PDU;

	for(;;)
	{
		/*Check if there are some new configurations*/
		if(osMessageQueueGet(xFIFO_PIDConfigsHandle, &FIFOConfigs, NULL, 0) == osOK){
 80133c2:	4b7a      	ldr	r3, [pc, #488]	; (80135ac <vTaskPID_Runnable+0x1f4>)
 80133c4:	6818      	ldr	r0, [r3, #0]
 80133c6:	f107 0108 	add.w	r1, r7, #8
 80133ca:	2300      	movs	r3, #0
 80133cc:	2200      	movs	r2, #0
 80133ce:	f7fc ff77 	bl	80102c0 <osMessageQueueGet>
 80133d2:	4603      	mov	r3, r0
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d104      	bne.n	80133e2 <vTaskPID_Runnable+0x2a>
			/*There are configurations to set*/
			PID_SetConfigs(&FIFOConfigs);
 80133d8:	f107 0308 	add.w	r3, r7, #8
 80133dc:	4618      	mov	r0, r3
 80133de:	f7ff ffe0 	bl	80133a2 <PID_SetConfigs>
		}
		/*Get Distance*/
		/*TODO: Possible avoid blocking mode in order to check configs (depends of CPU load)*/
		(void)osMessageQueueGet(xFIFO_DistanceHandle, &distance, NULL, osWaitForever);
 80133e2:	4b73      	ldr	r3, [pc, #460]	; (80135b0 <vTaskPID_Runnable+0x1f8>)
 80133e4:	6818      	ldr	r0, [r3, #0]
 80133e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80133ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80133ee:	2200      	movs	r2, #0
 80133f0:	f7fc ff66 	bl	80102c0 <osMessageQueueGet>
		PID.Error = PID.Set_Point - distance;
 80133f4:	4b6f      	ldr	r3, [pc, #444]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80133f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80133f8:	461a      	mov	r2, r3
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fc:	1ad3      	subs	r3, r2, r3
 80133fe:	461a      	mov	r2, r3
 8013400:	4b6c      	ldr	r3, [pc, #432]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013402:	62da      	str	r2, [r3, #44]	; 0x2c
		PID.Control.P =  (float)PID.Error * PID.Gains.Kp;
 8013404:	4b6b      	ldr	r3, [pc, #428]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013408:	ee07 3a90 	vmov	s15, r3
 801340c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013410:	4b68      	ldr	r3, [pc, #416]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013412:	edd3 7a00 	vldr	s15, [r3]
 8013416:	ee67 7a27 	vmul.f32	s15, s14, s15
 801341a:	4b66      	ldr	r3, [pc, #408]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801341c:	edc3 7a03 	vstr	s15, [r3, #12]
		PID.Control.I += (float)PID.Error * PID.Gains.Ki;
 8013420:	4b64      	ldr	r3, [pc, #400]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013422:	ed93 7a04 	vldr	s14, [r3, #16]
 8013426:	4b63      	ldr	r3, [pc, #396]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801342a:	ee07 3a90 	vmov	s15, r3
 801342e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8013432:	4b60      	ldr	r3, [pc, #384]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013434:	edd3 7a01 	vldr	s15, [r3, #4]
 8013438:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801343c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8013440:	4b5c      	ldr	r3, [pc, #368]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013442:	edc3 7a04 	vstr	s15, [r3, #16]
		PID.Control.D =  (float)(PID.Error - PID.Past_Error) * PID.Gains.Kd;
 8013446:	4b5b      	ldr	r3, [pc, #364]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801344a:	4b5a      	ldr	r3, [pc, #360]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801344e:	1ad3      	subs	r3, r2, r3
 8013450:	ee07 3a90 	vmov	s15, r3
 8013454:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013458:	4b56      	ldr	r3, [pc, #344]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801345a:	edd3 7a02 	vldr	s15, [r3, #8]
 801345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013462:	4b54      	ldr	r3, [pc, #336]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013464:	edc3 7a05 	vstr	s15, [r3, #20]
		/*Constraints check on the PID algorithm (recommended only for I)*/
		if(NO_LIMIT != PID.Limits.P){
 8013468:	4b52      	ldr	r3, [pc, #328]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801346a:	699b      	ldr	r3, [r3, #24]
 801346c:	2200      	movs	r2, #0
 801346e:	4293      	cmp	r3, r2
 8013470:	d016      	beq.n	80134a0 <vTaskPID_Runnable+0xe8>
			/*There are constraints on the P control action*/
			if(PID.Control.P > PID.Limits.P) {
 8013472:	4b50      	ldr	r3, [pc, #320]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013474:	ed93 7a03 	vldr	s14, [r3, #12]
 8013478:	4b4e      	ldr	r3, [pc, #312]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801347a:	699b      	ldr	r3, [r3, #24]
 801347c:	ee07 3a90 	vmov	s15, r3
 8013480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801348c:	dd08      	ble.n	80134a0 <vTaskPID_Runnable+0xe8>
				PID.Control.P = PID.Limits.P;
 801348e:	4b49      	ldr	r3, [pc, #292]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013490:	699b      	ldr	r3, [r3, #24]
 8013492:	ee07 3a90 	vmov	s15, r3
 8013496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801349a:	4b46      	ldr	r3, [pc, #280]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801349c:	edc3 7a03 	vstr	s15, [r3, #12]
			}
		}
		if(NO_LIMIT != PID.Limits.I){
 80134a0:	4b44      	ldr	r3, [pc, #272]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134a2:	69db      	ldr	r3, [r3, #28]
 80134a4:	2200      	movs	r2, #0
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d016      	beq.n	80134d8 <vTaskPID_Runnable+0x120>
			/*There are constraints on the I control action*/
			if(PID.Control.I > PID.Limits.I) {
 80134aa:	4b42      	ldr	r3, [pc, #264]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134ac:	ed93 7a04 	vldr	s14, [r3, #16]
 80134b0:	4b40      	ldr	r3, [pc, #256]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134b2:	69db      	ldr	r3, [r3, #28]
 80134b4:	ee07 3a90 	vmov	s15, r3
 80134b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134c4:	dd08      	ble.n	80134d8 <vTaskPID_Runnable+0x120>
				PID.Control.I = PID.Limits.I;
 80134c6:	4b3b      	ldr	r3, [pc, #236]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134c8:	69db      	ldr	r3, [r3, #28]
 80134ca:	ee07 3a90 	vmov	s15, r3
 80134ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134d2:	4b38      	ldr	r3, [pc, #224]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134d4:	edc3 7a04 	vstr	s15, [r3, #16]
			}
		}
		if(NO_LIMIT != PID.Limits.D){
 80134d8:	4b36      	ldr	r3, [pc, #216]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134da:	6a1b      	ldr	r3, [r3, #32]
 80134dc:	2200      	movs	r2, #0
 80134de:	4293      	cmp	r3, r2
 80134e0:	d016      	beq.n	8013510 <vTaskPID_Runnable+0x158>
			/*There are constraints on the D control action*/
			if(PID.Control.D > PID.Limits.D) {
 80134e2:	4b34      	ldr	r3, [pc, #208]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134e4:	ed93 7a05 	vldr	s14, [r3, #20]
 80134e8:	4b32      	ldr	r3, [pc, #200]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80134ea:	6a1b      	ldr	r3, [r3, #32]
 80134ec:	ee07 3a90 	vmov	s15, r3
 80134f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80134f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80134f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80134fc:	dd08      	ble.n	8013510 <vTaskPID_Runnable+0x158>
				PID.Control.D = PID.Limits.D;
 80134fe:	4b2d      	ldr	r3, [pc, #180]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013500:	6a1b      	ldr	r3, [r3, #32]
 8013502:	ee07 3a90 	vmov	s15, r3
 8013506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801350a:	4b2a      	ldr	r3, [pc, #168]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801350c:	edc3 7a05 	vstr	s15, [r3, #20]
			}
		}
		/*Calculating control action*/
		PID.ControlAction = PID.Control.P + PID.Control.I + PID.Control.D;
 8013510:	4b28      	ldr	r3, [pc, #160]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013512:	ed93 7a03 	vldr	s14, [r3, #12]
 8013516:	4b27      	ldr	r3, [pc, #156]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013518:	edd3 7a04 	vldr	s15, [r3, #16]
 801351c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8013520:	4b24      	ldr	r3, [pc, #144]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013522:	edd3 7a05 	vldr	s15, [r3, #20]
 8013526:	ee77 7a27 	vadd.f32	s15, s14, s15
 801352a:	4b22      	ldr	r3, [pc, #136]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801352c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		/*Constraints for the control action*/
		if(PID.ControlAction < 0)
 8013530:	4b20      	ldr	r3, [pc, #128]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013532:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013536:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353e:	d513      	bpl.n	8013568 <vTaskPID_Runnable+0x1b0>
			PID.ControlAction = ABS(PID.ControlAction);
 8013540:	4b1c      	ldr	r3, [pc, #112]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013542:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801354e:	dd03      	ble.n	8013558 <vTaskPID_Runnable+0x1a0>
 8013550:	4b18      	ldr	r3, [pc, #96]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013552:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8013556:	e004      	b.n	8013562 <vTaskPID_Runnable+0x1aa>
 8013558:	4b16      	ldr	r3, [pc, #88]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801355a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 801355e:	eef1 7a67 	vneg.f32	s15, s15
 8013562:	4b14      	ldr	r3, [pc, #80]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013564:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		if(PID.ControlAction > PID.Limits.Control)
 8013568:	4b12      	ldr	r3, [pc, #72]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 801356a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801356e:	4b11      	ldr	r3, [pc, #68]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013570:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8013574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801357c:	dd03      	ble.n	8013586 <vTaskPID_Runnable+0x1ce>
			PID.ControlAction = PID.Limits.Control;
 801357e:	4b0d      	ldr	r3, [pc, #52]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013582:	4a0c      	ldr	r2, [pc, #48]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 8013584:	6293      	str	r3, [r2, #40]	; 0x28
		/*Sending to the actuator*/
		osMessageQueuePut(xFIFO_ControlActionHandle, &PID.ControlAction, 0U, 0U);
 8013586:	4b0c      	ldr	r3, [pc, #48]	; (80135b8 <vTaskPID_Runnable+0x200>)
 8013588:	6818      	ldr	r0, [r3, #0]
 801358a:	2300      	movs	r3, #0
 801358c:	2200      	movs	r2, #0
 801358e:	490b      	ldr	r1, [pc, #44]	; (80135bc <vTaskPID_Runnable+0x204>)
 8013590:	f7fc fe36 	bl	8010200 <osMessageQueuePut>
		/*Sending to the COM module*/
		//ControlAction_PDU = COM_CreatePDU(0, PID.ControlAction);
		osMessageQueuePut(xFIFO_COMHandle, &ControlAction_PDU, 0U, 0U);
 8013594:	4b0a      	ldr	r3, [pc, #40]	; (80135c0 <vTaskPID_Runnable+0x208>)
 8013596:	6818      	ldr	r0, [r3, #0]
 8013598:	4639      	mov	r1, r7
 801359a:	2300      	movs	r3, #0
 801359c:	2200      	movs	r2, #0
 801359e:	f7fc fe2f 	bl	8010200 <osMessageQueuePut>
		PID.Past_Error = PID.Error;
 80135a2:	4b04      	ldr	r3, [pc, #16]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80135a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a6:	4a03      	ldr	r2, [pc, #12]	; (80135b4 <vTaskPID_Runnable+0x1fc>)
 80135a8:	6313      	str	r3, [r2, #48]	; 0x30
		if(osMessageQueueGet(xFIFO_PIDConfigsHandle, &FIFOConfigs, NULL, 0) == osOK){
 80135aa:	e70a      	b.n	80133c2 <vTaskPID_Runnable+0xa>
 80135ac:	2000086c 	.word	0x2000086c
 80135b0:	20000864 	.word	0x20000864
 80135b4:	200054c4 	.word	0x200054c4
 80135b8:	20000868 	.word	0x20000868
 80135bc:	200054ec 	.word	0x200054ec
 80135c0:	20000860 	.word	0x20000860

080135c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80135c8:	2200      	movs	r2, #0
 80135ca:	4912      	ldr	r1, [pc, #72]	; (8013614 <MX_USB_DEVICE_Init+0x50>)
 80135cc:	4812      	ldr	r0, [pc, #72]	; (8013618 <MX_USB_DEVICE_Init+0x54>)
 80135ce:	f7fb f877 	bl	800e6c0 <USBD_Init>
 80135d2:	4603      	mov	r3, r0
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d001      	beq.n	80135dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80135d8:	f7ed fcc2 	bl	8000f60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80135dc:	490f      	ldr	r1, [pc, #60]	; (801361c <MX_USB_DEVICE_Init+0x58>)
 80135de:	480e      	ldr	r0, [pc, #56]	; (8013618 <MX_USB_DEVICE_Init+0x54>)
 80135e0:	f7fb f89e 	bl	800e720 <USBD_RegisterClass>
 80135e4:	4603      	mov	r3, r0
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d001      	beq.n	80135ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80135ea:	f7ed fcb9 	bl	8000f60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80135ee:	490c      	ldr	r1, [pc, #48]	; (8013620 <MX_USB_DEVICE_Init+0x5c>)
 80135f0:	4809      	ldr	r0, [pc, #36]	; (8013618 <MX_USB_DEVICE_Init+0x54>)
 80135f2:	f7fa ffd5 	bl	800e5a0 <USBD_CDC_RegisterInterface>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d001      	beq.n	8013600 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80135fc:	f7ed fcb0 	bl	8000f60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013600:	4805      	ldr	r0, [pc, #20]	; (8013618 <MX_USB_DEVICE_Init+0x54>)
 8013602:	f7fb f8c3 	bl	800e78c <USBD_Start>
 8013606:	4603      	mov	r3, r0
 8013608:	2b00      	cmp	r3, #0
 801360a:	d001      	beq.n	8013610 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801360c:	f7ed fca8 	bl	8000f60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013610:	bf00      	nop
 8013612:	bd80      	pop	{r7, pc}
 8013614:	20000370 	.word	0x20000370
 8013618:	200054fc 	.word	0x200054fc
 801361c:	200002d4 	.word	0x200002d4
 8013620:	2000035c 	.word	0x2000035c

08013624 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013628:	2200      	movs	r2, #0
 801362a:	4905      	ldr	r1, [pc, #20]	; (8013640 <CDC_Init_FS+0x1c>)
 801362c:	4805      	ldr	r0, [pc, #20]	; (8013644 <CDC_Init_FS+0x20>)
 801362e:	f7fa ffd1 	bl	800e5d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013632:	4905      	ldr	r1, [pc, #20]	; (8013648 <CDC_Init_FS+0x24>)
 8013634:	4803      	ldr	r0, [pc, #12]	; (8013644 <CDC_Init_FS+0x20>)
 8013636:	f7fa ffef 	bl	800e618 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801363a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801363c:	4618      	mov	r0, r3
 801363e:	bd80      	pop	{r7, pc}
 8013640:	20005fd8 	.word	0x20005fd8
 8013644:	200054fc 	.word	0x200054fc
 8013648:	200057d8 	.word	0x200057d8

0801364c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801364c:	b480      	push	{r7}
 801364e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013650:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013652:	4618      	mov	r0, r3
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr

0801365c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801365c:	b480      	push	{r7}
 801365e:	b083      	sub	sp, #12
 8013660:	af00      	add	r7, sp, #0
 8013662:	4603      	mov	r3, r0
 8013664:	6039      	str	r1, [r7, #0]
 8013666:	71fb      	strb	r3, [r7, #7]
 8013668:	4613      	mov	r3, r2
 801366a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801366c:	79fb      	ldrb	r3, [r7, #7]
 801366e:	2b23      	cmp	r3, #35	; 0x23
 8013670:	d84a      	bhi.n	8013708 <CDC_Control_FS+0xac>
 8013672:	a201      	add	r2, pc, #4	; (adr r2, 8013678 <CDC_Control_FS+0x1c>)
 8013674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013678:	08013709 	.word	0x08013709
 801367c:	08013709 	.word	0x08013709
 8013680:	08013709 	.word	0x08013709
 8013684:	08013709 	.word	0x08013709
 8013688:	08013709 	.word	0x08013709
 801368c:	08013709 	.word	0x08013709
 8013690:	08013709 	.word	0x08013709
 8013694:	08013709 	.word	0x08013709
 8013698:	08013709 	.word	0x08013709
 801369c:	08013709 	.word	0x08013709
 80136a0:	08013709 	.word	0x08013709
 80136a4:	08013709 	.word	0x08013709
 80136a8:	08013709 	.word	0x08013709
 80136ac:	08013709 	.word	0x08013709
 80136b0:	08013709 	.word	0x08013709
 80136b4:	08013709 	.word	0x08013709
 80136b8:	08013709 	.word	0x08013709
 80136bc:	08013709 	.word	0x08013709
 80136c0:	08013709 	.word	0x08013709
 80136c4:	08013709 	.word	0x08013709
 80136c8:	08013709 	.word	0x08013709
 80136cc:	08013709 	.word	0x08013709
 80136d0:	08013709 	.word	0x08013709
 80136d4:	08013709 	.word	0x08013709
 80136d8:	08013709 	.word	0x08013709
 80136dc:	08013709 	.word	0x08013709
 80136e0:	08013709 	.word	0x08013709
 80136e4:	08013709 	.word	0x08013709
 80136e8:	08013709 	.word	0x08013709
 80136ec:	08013709 	.word	0x08013709
 80136f0:	08013709 	.word	0x08013709
 80136f4:	08013709 	.word	0x08013709
 80136f8:	08013709 	.word	0x08013709
 80136fc:	08013709 	.word	0x08013709
 8013700:	08013709 	.word	0x08013709
 8013704:	08013709 	.word	0x08013709
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013708:	bf00      	nop
  }

  return (USBD_OK);
 801370a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801370c:	4618      	mov	r0, r3
 801370e:	370c      	adds	r7, #12
 8013710:	46bd      	mov	sp, r7
 8013712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013716:	4770      	bx	lr

08013718 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013718:	b580      	push	{r7, lr}
 801371a:	b084      	sub	sp, #16
 801371c:	af00      	add	r7, sp, #0
 801371e:	6078      	str	r0, [r7, #4]
 8013720:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013722:	6879      	ldr	r1, [r7, #4]
 8013724:	4813      	ldr	r0, [pc, #76]	; (8013774 <CDC_Receive_FS+0x5c>)
 8013726:	f7fa ff77 	bl	800e618 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801372a:	4812      	ldr	r0, [pc, #72]	; (8013774 <CDC_Receive_FS+0x5c>)
 801372c:	f7fa ff92 	bl	800e654 <USBD_CDC_ReceivePacket>
  memset(ResBuffer, '\0', 64); //Clear the buffer
 8013730:	2240      	movs	r2, #64	; 0x40
 8013732:	2100      	movs	r1, #0
 8013734:	4810      	ldr	r0, [pc, #64]	; (8013778 <CDC_Receive_FS+0x60>)
 8013736:	f000 fc85 	bl	8014044 <memset>
  uint8_t len = (uint8_t)*Len;
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	681b      	ldr	r3, [r3, #0]
 801373e:	73fb      	strb	r3, [r7, #15]
  memcpy(ResBuffer, Buf, len); //Copy the data to buffer
 8013740:	7bfb      	ldrb	r3, [r7, #15]
 8013742:	461a      	mov	r2, r3
 8013744:	6879      	ldr	r1, [r7, #4]
 8013746:	480c      	ldr	r0, [pc, #48]	; (8013778 <CDC_Receive_FS+0x60>)
 8013748:	f000 fc6e 	bl	8014028 <memcpy>
  memset(Buf, '\0', len); //Clear Buf
 801374c:	7bfb      	ldrb	r3, [r7, #15]
 801374e:	461a      	mov	r2, r3
 8013750:	2100      	movs	r1, #0
 8013752:	6878      	ldr	r0, [r7, #4]
 8013754:	f000 fc76 	bl	8014044 <memset>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8013758:	2201      	movs	r2, #1
 801375a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801375e:	4807      	ldr	r0, [pc, #28]	; (801377c <CDC_Receive_FS+0x64>)
 8013760:	f7ee fe56 	bl	8002410 <HAL_GPIO_WritePin>
  ReceiveFlag = 1;
 8013764:	4b06      	ldr	r3, [pc, #24]	; (8013780 <CDC_Receive_FS+0x68>)
 8013766:	2201      	movs	r2, #1
 8013768:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 801376a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801376c:	4618      	mov	r0, r3
 801376e:	3710      	adds	r7, #16
 8013770:	46bd      	mov	sp, r7
 8013772:	bd80      	pop	{r7, pc}
 8013774:	200054fc 	.word	0x200054fc
 8013778:	20000878 	.word	0x20000878
 801377c:	40020800 	.word	0x40020800
 8013780:	200008b8 	.word	0x200008b8

08013784 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013784:	b480      	push	{r7}
 8013786:	b087      	sub	sp, #28
 8013788:	af00      	add	r7, sp, #0
 801378a:	60f8      	str	r0, [r7, #12]
 801378c:	60b9      	str	r1, [r7, #8]
 801378e:	4613      	mov	r3, r2
 8013790:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013792:	2300      	movs	r3, #0
 8013794:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013796:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801379a:	4618      	mov	r0, r3
 801379c:	371c      	adds	r7, #28
 801379e:	46bd      	mov	sp, r7
 80137a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a4:	4770      	bx	lr
	...

080137a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	4603      	mov	r3, r0
 80137b0:	6039      	str	r1, [r7, #0]
 80137b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	2212      	movs	r2, #18
 80137b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80137ba:	4b03      	ldr	r3, [pc, #12]	; (80137c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80137bc:	4618      	mov	r0, r3
 80137be:	370c      	adds	r7, #12
 80137c0:	46bd      	mov	sp, r7
 80137c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c6:	4770      	bx	lr
 80137c8:	2000038c 	.word	0x2000038c

080137cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137cc:	b480      	push	{r7}
 80137ce:	b083      	sub	sp, #12
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	4603      	mov	r3, r0
 80137d4:	6039      	str	r1, [r7, #0]
 80137d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	2204      	movs	r2, #4
 80137dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80137de:	4b03      	ldr	r3, [pc, #12]	; (80137ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80137e0:	4618      	mov	r0, r3
 80137e2:	370c      	adds	r7, #12
 80137e4:	46bd      	mov	sp, r7
 80137e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ea:	4770      	bx	lr
 80137ec:	200003a0 	.word	0x200003a0

080137f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80137f0:	b580      	push	{r7, lr}
 80137f2:	b082      	sub	sp, #8
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	4603      	mov	r3, r0
 80137f8:	6039      	str	r1, [r7, #0]
 80137fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80137fc:	79fb      	ldrb	r3, [r7, #7]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d105      	bne.n	801380e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013802:	683a      	ldr	r2, [r7, #0]
 8013804:	4907      	ldr	r1, [pc, #28]	; (8013824 <USBD_FS_ProductStrDescriptor+0x34>)
 8013806:	4808      	ldr	r0, [pc, #32]	; (8013828 <USBD_FS_ProductStrDescriptor+0x38>)
 8013808:	f7fc f96c 	bl	800fae4 <USBD_GetString>
 801380c:	e004      	b.n	8013818 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801380e:	683a      	ldr	r2, [r7, #0]
 8013810:	4904      	ldr	r1, [pc, #16]	; (8013824 <USBD_FS_ProductStrDescriptor+0x34>)
 8013812:	4805      	ldr	r0, [pc, #20]	; (8013828 <USBD_FS_ProductStrDescriptor+0x38>)
 8013814:	f7fc f966 	bl	800fae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8013818:	4b02      	ldr	r3, [pc, #8]	; (8013824 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801381a:	4618      	mov	r0, r3
 801381c:	3708      	adds	r7, #8
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop
 8013824:	200067d8 	.word	0x200067d8
 8013828:	080142e4 	.word	0x080142e4

0801382c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801382c:	b580      	push	{r7, lr}
 801382e:	b082      	sub	sp, #8
 8013830:	af00      	add	r7, sp, #0
 8013832:	4603      	mov	r3, r0
 8013834:	6039      	str	r1, [r7, #0]
 8013836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013838:	683a      	ldr	r2, [r7, #0]
 801383a:	4904      	ldr	r1, [pc, #16]	; (801384c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801383c:	4804      	ldr	r0, [pc, #16]	; (8013850 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801383e:	f7fc f951 	bl	800fae4 <USBD_GetString>
  return USBD_StrDesc;
 8013842:	4b02      	ldr	r3, [pc, #8]	; (801384c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013844:	4618      	mov	r0, r3
 8013846:	3708      	adds	r7, #8
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}
 801384c:	200067d8 	.word	0x200067d8
 8013850:	080142fc 	.word	0x080142fc

08013854 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b082      	sub	sp, #8
 8013858:	af00      	add	r7, sp, #0
 801385a:	4603      	mov	r3, r0
 801385c:	6039      	str	r1, [r7, #0]
 801385e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	221a      	movs	r2, #26
 8013864:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013866:	f000 f843 	bl	80138f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801386a:	4b02      	ldr	r3, [pc, #8]	; (8013874 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801386c:	4618      	mov	r0, r3
 801386e:	3708      	adds	r7, #8
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}
 8013874:	200003a4 	.word	0x200003a4

08013878 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	4603      	mov	r3, r0
 8013880:	6039      	str	r1, [r7, #0]
 8013882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013884:	79fb      	ldrb	r3, [r7, #7]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d105      	bne.n	8013896 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801388a:	683a      	ldr	r2, [r7, #0]
 801388c:	4907      	ldr	r1, [pc, #28]	; (80138ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801388e:	4808      	ldr	r0, [pc, #32]	; (80138b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013890:	f7fc f928 	bl	800fae4 <USBD_GetString>
 8013894:	e004      	b.n	80138a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013896:	683a      	ldr	r2, [r7, #0]
 8013898:	4904      	ldr	r1, [pc, #16]	; (80138ac <USBD_FS_ConfigStrDescriptor+0x34>)
 801389a:	4805      	ldr	r0, [pc, #20]	; (80138b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801389c:	f7fc f922 	bl	800fae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80138a0:	4b02      	ldr	r3, [pc, #8]	; (80138ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	3708      	adds	r7, #8
 80138a6:	46bd      	mov	sp, r7
 80138a8:	bd80      	pop	{r7, pc}
 80138aa:	bf00      	nop
 80138ac:	200067d8 	.word	0x200067d8
 80138b0:	08014310 	.word	0x08014310

080138b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	4603      	mov	r3, r0
 80138bc:	6039      	str	r1, [r7, #0]
 80138be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80138c0:	79fb      	ldrb	r3, [r7, #7]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d105      	bne.n	80138d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138c6:	683a      	ldr	r2, [r7, #0]
 80138c8:	4907      	ldr	r1, [pc, #28]	; (80138e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138ca:	4808      	ldr	r0, [pc, #32]	; (80138ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138cc:	f7fc f90a 	bl	800fae4 <USBD_GetString>
 80138d0:	e004      	b.n	80138dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80138d2:	683a      	ldr	r2, [r7, #0]
 80138d4:	4904      	ldr	r1, [pc, #16]	; (80138e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80138d6:	4805      	ldr	r0, [pc, #20]	; (80138ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80138d8:	f7fc f904 	bl	800fae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80138dc:	4b02      	ldr	r3, [pc, #8]	; (80138e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80138de:	4618      	mov	r0, r3
 80138e0:	3708      	adds	r7, #8
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
 80138e6:	bf00      	nop
 80138e8:	200067d8 	.word	0x200067d8
 80138ec:	0801431c 	.word	0x0801431c

080138f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80138f6:	4b0f      	ldr	r3, [pc, #60]	; (8013934 <Get_SerialNum+0x44>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80138fc:	4b0e      	ldr	r3, [pc, #56]	; (8013938 <Get_SerialNum+0x48>)
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013902:	4b0e      	ldr	r3, [pc, #56]	; (801393c <Get_SerialNum+0x4c>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	4413      	add	r3, r2
 801390e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d009      	beq.n	801392a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013916:	2208      	movs	r2, #8
 8013918:	4909      	ldr	r1, [pc, #36]	; (8013940 <Get_SerialNum+0x50>)
 801391a:	68f8      	ldr	r0, [r7, #12]
 801391c:	f000 f814 	bl	8013948 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013920:	2204      	movs	r2, #4
 8013922:	4908      	ldr	r1, [pc, #32]	; (8013944 <Get_SerialNum+0x54>)
 8013924:	68b8      	ldr	r0, [r7, #8]
 8013926:	f000 f80f 	bl	8013948 <IntToUnicode>
  }
}
 801392a:	bf00      	nop
 801392c:	3710      	adds	r7, #16
 801392e:	46bd      	mov	sp, r7
 8013930:	bd80      	pop	{r7, pc}
 8013932:	bf00      	nop
 8013934:	1fff7a10 	.word	0x1fff7a10
 8013938:	1fff7a14 	.word	0x1fff7a14
 801393c:	1fff7a18 	.word	0x1fff7a18
 8013940:	200003a6 	.word	0x200003a6
 8013944:	200003b6 	.word	0x200003b6

08013948 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013948:	b480      	push	{r7}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	60b9      	str	r1, [r7, #8]
 8013952:	4613      	mov	r3, r2
 8013954:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013956:	2300      	movs	r3, #0
 8013958:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801395a:	2300      	movs	r3, #0
 801395c:	75fb      	strb	r3, [r7, #23]
 801395e:	e027      	b.n	80139b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013960:	68fb      	ldr	r3, [r7, #12]
 8013962:	0f1b      	lsrs	r3, r3, #28
 8013964:	2b09      	cmp	r3, #9
 8013966:	d80b      	bhi.n	8013980 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	0f1b      	lsrs	r3, r3, #28
 801396c:	b2da      	uxtb	r2, r3
 801396e:	7dfb      	ldrb	r3, [r7, #23]
 8013970:	005b      	lsls	r3, r3, #1
 8013972:	4619      	mov	r1, r3
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	440b      	add	r3, r1
 8013978:	3230      	adds	r2, #48	; 0x30
 801397a:	b2d2      	uxtb	r2, r2
 801397c:	701a      	strb	r2, [r3, #0]
 801397e:	e00a      	b.n	8013996 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013980:	68fb      	ldr	r3, [r7, #12]
 8013982:	0f1b      	lsrs	r3, r3, #28
 8013984:	b2da      	uxtb	r2, r3
 8013986:	7dfb      	ldrb	r3, [r7, #23]
 8013988:	005b      	lsls	r3, r3, #1
 801398a:	4619      	mov	r1, r3
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	440b      	add	r3, r1
 8013990:	3237      	adds	r2, #55	; 0x37
 8013992:	b2d2      	uxtb	r2, r2
 8013994:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	011b      	lsls	r3, r3, #4
 801399a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801399c:	7dfb      	ldrb	r3, [r7, #23]
 801399e:	005b      	lsls	r3, r3, #1
 80139a0:	3301      	adds	r3, #1
 80139a2:	68ba      	ldr	r2, [r7, #8]
 80139a4:	4413      	add	r3, r2
 80139a6:	2200      	movs	r2, #0
 80139a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80139aa:	7dfb      	ldrb	r3, [r7, #23]
 80139ac:	3301      	adds	r3, #1
 80139ae:	75fb      	strb	r3, [r7, #23]
 80139b0:	7dfa      	ldrb	r2, [r7, #23]
 80139b2:	79fb      	ldrb	r3, [r7, #7]
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d3d3      	bcc.n	8013960 <IntToUnicode+0x18>
  }
}
 80139b8:	bf00      	nop
 80139ba:	bf00      	nop
 80139bc:	371c      	adds	r7, #28
 80139be:	46bd      	mov	sp, r7
 80139c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c4:	4770      	bx	lr
	...

080139c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b08a      	sub	sp, #40	; 0x28
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80139d0:	f107 0314 	add.w	r3, r7, #20
 80139d4:	2200      	movs	r2, #0
 80139d6:	601a      	str	r2, [r3, #0]
 80139d8:	605a      	str	r2, [r3, #4]
 80139da:	609a      	str	r2, [r3, #8]
 80139dc:	60da      	str	r2, [r3, #12]
 80139de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80139e8:	d13a      	bne.n	8013a60 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80139ea:	2300      	movs	r3, #0
 80139ec:	613b      	str	r3, [r7, #16]
 80139ee:	4b1e      	ldr	r3, [pc, #120]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 80139f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139f2:	4a1d      	ldr	r2, [pc, #116]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 80139f4:	f043 0301 	orr.w	r3, r3, #1
 80139f8:	6313      	str	r3, [r2, #48]	; 0x30
 80139fa:	4b1b      	ldr	r3, [pc, #108]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 80139fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139fe:	f003 0301 	and.w	r3, r3, #1
 8013a02:	613b      	str	r3, [r7, #16]
 8013a04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013a06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013a0c:	2302      	movs	r3, #2
 8013a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a10:	2300      	movs	r3, #0
 8013a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013a14:	2303      	movs	r3, #3
 8013a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013a18:	230a      	movs	r3, #10
 8013a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013a1c:	f107 0314 	add.w	r3, r7, #20
 8013a20:	4619      	mov	r1, r3
 8013a22:	4812      	ldr	r0, [pc, #72]	; (8013a6c <HAL_PCD_MspInit+0xa4>)
 8013a24:	f7ee fb70 	bl	8002108 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013a28:	4b0f      	ldr	r3, [pc, #60]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 8013a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013a2c:	4a0e      	ldr	r2, [pc, #56]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 8013a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a32:	6353      	str	r3, [r2, #52]	; 0x34
 8013a34:	2300      	movs	r3, #0
 8013a36:	60fb      	str	r3, [r7, #12]
 8013a38:	4b0b      	ldr	r3, [pc, #44]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 8013a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a3c:	4a0a      	ldr	r2, [pc, #40]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 8013a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013a42:	6453      	str	r3, [r2, #68]	; 0x44
 8013a44:	4b08      	ldr	r3, [pc, #32]	; (8013a68 <HAL_PCD_MspInit+0xa0>)
 8013a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013a4c:	60fb      	str	r3, [r7, #12]
 8013a4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013a50:	2200      	movs	r2, #0
 8013a52:	2105      	movs	r1, #5
 8013a54:	2043      	movs	r0, #67	; 0x43
 8013a56:	f7ed ffa4 	bl	80019a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013a5a:	2043      	movs	r0, #67	; 0x43
 8013a5c:	f7ed ffbd 	bl	80019da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013a60:	bf00      	nop
 8013a62:	3728      	adds	r7, #40	; 0x28
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	40023800 	.word	0x40023800
 8013a6c:	40020000 	.word	0x40020000

08013a70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8013a84:	4619      	mov	r1, r3
 8013a86:	4610      	mov	r0, r2
 8013a88:	f7fa fecd 	bl	800e826 <USBD_LL_SetupStage>
}
 8013a8c:	bf00      	nop
 8013a8e:	3708      	adds	r7, #8
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}

08013a94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013a94:	b580      	push	{r7, lr}
 8013a96:	b082      	sub	sp, #8
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	460b      	mov	r3, r1
 8013a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013aa6:	78fa      	ldrb	r2, [r7, #3]
 8013aa8:	6879      	ldr	r1, [r7, #4]
 8013aaa:	4613      	mov	r3, r2
 8013aac:	00db      	lsls	r3, r3, #3
 8013aae:	4413      	add	r3, r2
 8013ab0:	009b      	lsls	r3, r3, #2
 8013ab2:	440b      	add	r3, r1
 8013ab4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8013ab8:	681a      	ldr	r2, [r3, #0]
 8013aba:	78fb      	ldrb	r3, [r7, #3]
 8013abc:	4619      	mov	r1, r3
 8013abe:	f7fa ff07 	bl	800e8d0 <USBD_LL_DataOutStage>
}
 8013ac2:	bf00      	nop
 8013ac4:	3708      	adds	r7, #8
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}

08013aca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013aca:	b580      	push	{r7, lr}
 8013acc:	b082      	sub	sp, #8
 8013ace:	af00      	add	r7, sp, #0
 8013ad0:	6078      	str	r0, [r7, #4]
 8013ad2:	460b      	mov	r3, r1
 8013ad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013adc:	78fa      	ldrb	r2, [r7, #3]
 8013ade:	6879      	ldr	r1, [r7, #4]
 8013ae0:	4613      	mov	r3, r2
 8013ae2:	00db      	lsls	r3, r3, #3
 8013ae4:	4413      	add	r3, r2
 8013ae6:	009b      	lsls	r3, r3, #2
 8013ae8:	440b      	add	r3, r1
 8013aea:	334c      	adds	r3, #76	; 0x4c
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	78fb      	ldrb	r3, [r7, #3]
 8013af0:	4619      	mov	r1, r3
 8013af2:	f7fa ffa0 	bl	800ea36 <USBD_LL_DataInStage>
}
 8013af6:	bf00      	nop
 8013af8:	3708      	adds	r7, #8
 8013afa:	46bd      	mov	sp, r7
 8013afc:	bd80      	pop	{r7, pc}

08013afe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013afe:	b580      	push	{r7, lr}
 8013b00:	b082      	sub	sp, #8
 8013b02:	af00      	add	r7, sp, #0
 8013b04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7fb f8d4 	bl	800ecba <USBD_LL_SOF>
}
 8013b12:	bf00      	nop
 8013b14:	3708      	adds	r7, #8
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}

08013b1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	b084      	sub	sp, #16
 8013b1e:	af00      	add	r7, sp, #0
 8013b20:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013b22:	2301      	movs	r3, #1
 8013b24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	68db      	ldr	r3, [r3, #12]
 8013b2a:	2b02      	cmp	r3, #2
 8013b2c:	d001      	beq.n	8013b32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8013b2e:	f7ed fa17 	bl	8000f60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b38:	7bfa      	ldrb	r2, [r7, #15]
 8013b3a:	4611      	mov	r1, r2
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7fb f87e 	bl	800ec3e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f7fb f826 	bl	800eb9a <USBD_LL_Reset>
}
 8013b4e:	bf00      	nop
 8013b50:	3710      	adds	r7, #16
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bd80      	pop	{r7, pc}
	...

08013b58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b082      	sub	sp, #8
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fb f879 	bl	800ec5e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	687a      	ldr	r2, [r7, #4]
 8013b78:	6812      	ldr	r2, [r2, #0]
 8013b7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013b7e:	f043 0301 	orr.w	r3, r3, #1
 8013b82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	6a1b      	ldr	r3, [r3, #32]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d005      	beq.n	8013b98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013b8c:	4b04      	ldr	r3, [pc, #16]	; (8013ba0 <HAL_PCD_SuspendCallback+0x48>)
 8013b8e:	691b      	ldr	r3, [r3, #16]
 8013b90:	4a03      	ldr	r2, [pc, #12]	; (8013ba0 <HAL_PCD_SuspendCallback+0x48>)
 8013b92:	f043 0306 	orr.w	r3, r3, #6
 8013b96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013b98:	bf00      	nop
 8013b9a:	3708      	adds	r7, #8
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	e000ed00 	.word	0xe000ed00

08013ba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	f7fb f869 	bl	800ec8a <USBD_LL_Resume>
}
 8013bb8:	bf00      	nop
 8013bba:	3708      	adds	r7, #8
 8013bbc:	46bd      	mov	sp, r7
 8013bbe:	bd80      	pop	{r7, pc}

08013bc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013bc0:	b580      	push	{r7, lr}
 8013bc2:	b082      	sub	sp, #8
 8013bc4:	af00      	add	r7, sp, #0
 8013bc6:	6078      	str	r0, [r7, #4]
 8013bc8:	460b      	mov	r3, r1
 8013bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bd2:	78fa      	ldrb	r2, [r7, #3]
 8013bd4:	4611      	mov	r1, r2
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f7fb f8c1 	bl	800ed5e <USBD_LL_IsoOUTIncomplete>
}
 8013bdc:	bf00      	nop
 8013bde:	3708      	adds	r7, #8
 8013be0:	46bd      	mov	sp, r7
 8013be2:	bd80      	pop	{r7, pc}

08013be4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b082      	sub	sp, #8
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
 8013bec:	460b      	mov	r3, r1
 8013bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013bf6:	78fa      	ldrb	r2, [r7, #3]
 8013bf8:	4611      	mov	r1, r2
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f7fb f87d 	bl	800ecfa <USBD_LL_IsoINIncomplete>
}
 8013c00:	bf00      	nop
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b082      	sub	sp, #8
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c16:	4618      	mov	r0, r3
 8013c18:	f7fb f8d3 	bl	800edc2 <USBD_LL_DevConnected>
}
 8013c1c:	bf00      	nop
 8013c1e:	3708      	adds	r7, #8
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b082      	sub	sp, #8
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013c32:	4618      	mov	r0, r3
 8013c34:	f7fb f8d0 	bl	800edd8 <USBD_LL_DevDisconnected>
}
 8013c38:	bf00      	nop
 8013c3a:	3708      	adds	r7, #8
 8013c3c:	46bd      	mov	sp, r7
 8013c3e:	bd80      	pop	{r7, pc}

08013c40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	b082      	sub	sp, #8
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	781b      	ldrb	r3, [r3, #0]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d13c      	bne.n	8013cca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8013c50:	4a20      	ldr	r2, [pc, #128]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	4a1e      	ldr	r2, [pc, #120]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8013c60:	4b1c      	ldr	r3, [pc, #112]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8013c66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8013c68:	4b1a      	ldr	r3, [pc, #104]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c6a:	2204      	movs	r2, #4
 8013c6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8013c6e:	4b19      	ldr	r3, [pc, #100]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c70:	2202      	movs	r2, #2
 8013c72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013c74:	4b17      	ldr	r3, [pc, #92]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c76:	2200      	movs	r2, #0
 8013c78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013c7a:	4b16      	ldr	r3, [pc, #88]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c7c:	2202      	movs	r2, #2
 8013c7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8013c80:	4b14      	ldr	r3, [pc, #80]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c82:	2200      	movs	r2, #0
 8013c84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013c86:	4b13      	ldr	r3, [pc, #76]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c88:	2200      	movs	r2, #0
 8013c8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8013c8c:	4b11      	ldr	r3, [pc, #68]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c8e:	2200      	movs	r2, #0
 8013c90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013c92:	4b10      	ldr	r3, [pc, #64]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c94:	2200      	movs	r2, #0
 8013c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013c98:	4b0e      	ldr	r3, [pc, #56]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013c9e:	480d      	ldr	r0, [pc, #52]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013ca0:	f7ef fbb7 	bl	8003412 <HAL_PCD_Init>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d001      	beq.n	8013cae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8013caa:	f7ed f959 	bl	8000f60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013cae:	2180      	movs	r1, #128	; 0x80
 8013cb0:	4808      	ldr	r0, [pc, #32]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013cb2:	f7f0 fe0e 	bl	80048d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8013cb6:	2240      	movs	r2, #64	; 0x40
 8013cb8:	2100      	movs	r1, #0
 8013cba:	4806      	ldr	r0, [pc, #24]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013cbc:	f7f0 fdc2 	bl	8004844 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013cc0:	2280      	movs	r2, #128	; 0x80
 8013cc2:	2101      	movs	r1, #1
 8013cc4:	4803      	ldr	r0, [pc, #12]	; (8013cd4 <USBD_LL_Init+0x94>)
 8013cc6:	f7f0 fdbd 	bl	8004844 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8013cca:	2300      	movs	r3, #0
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3708      	adds	r7, #8
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	200069d8 	.word	0x200069d8

08013cd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ce4:	2300      	movs	r3, #0
 8013ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7ef fcac 	bl	800364c <HAL_PCD_Start>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013cf8:	7bfb      	ldrb	r3, [r7, #15]
 8013cfa:	4618      	mov	r0, r3
 8013cfc:	f000 f942 	bl	8013f84 <USBD_Get_USB_Status>
 8013d00:	4603      	mov	r3, r0
 8013d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3710      	adds	r7, #16
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b084      	sub	sp, #16
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	4608      	mov	r0, r1
 8013d18:	4611      	mov	r1, r2
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	70fb      	strb	r3, [r7, #3]
 8013d20:	460b      	mov	r3, r1
 8013d22:	70bb      	strb	r3, [r7, #2]
 8013d24:	4613      	mov	r3, r2
 8013d26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013d36:	78bb      	ldrb	r3, [r7, #2]
 8013d38:	883a      	ldrh	r2, [r7, #0]
 8013d3a:	78f9      	ldrb	r1, [r7, #3]
 8013d3c:	f7f0 f97d 	bl	800403a <HAL_PCD_EP_Open>
 8013d40:	4603      	mov	r3, r0
 8013d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d44:	7bfb      	ldrb	r3, [r7, #15]
 8013d46:	4618      	mov	r0, r3
 8013d48:	f000 f91c 	bl	8013f84 <USBD_Get_USB_Status>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d5a:	b580      	push	{r7, lr}
 8013d5c:	b084      	sub	sp, #16
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
 8013d62:	460b      	mov	r3, r1
 8013d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013d66:	2300      	movs	r3, #0
 8013d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013d74:	78fa      	ldrb	r2, [r7, #3]
 8013d76:	4611      	mov	r1, r2
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f7f0 f9c6 	bl	800410a <HAL_PCD_EP_Close>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013d82:	7bfb      	ldrb	r3, [r7, #15]
 8013d84:	4618      	mov	r0, r3
 8013d86:	f000 f8fd 	bl	8013f84 <USBD_Get_USB_Status>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3710      	adds	r7, #16
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b084      	sub	sp, #16
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	460b      	mov	r3, r1
 8013da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013da4:	2300      	movs	r3, #0
 8013da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013da8:	2300      	movs	r3, #0
 8013daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013db2:	78fa      	ldrb	r2, [r7, #3]
 8013db4:	4611      	mov	r1, r2
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7f0 fa9e 	bl	80042f8 <HAL_PCD_EP_SetStall>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dc0:	7bfb      	ldrb	r3, [r7, #15]
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f000 f8de 	bl	8013f84 <USBD_Get_USB_Status>
 8013dc8:	4603      	mov	r3, r0
 8013dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3710      	adds	r7, #16
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013dd6:	b580      	push	{r7, lr}
 8013dd8:	b084      	sub	sp, #16
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013de2:	2300      	movs	r3, #0
 8013de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013df0:	78fa      	ldrb	r2, [r7, #3]
 8013df2:	4611      	mov	r1, r2
 8013df4:	4618      	mov	r0, r3
 8013df6:	f7f0 fae3 	bl	80043c0 <HAL_PCD_EP_ClrStall>
 8013dfa:	4603      	mov	r3, r0
 8013dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013dfe:	7bfb      	ldrb	r3, [r7, #15]
 8013e00:	4618      	mov	r0, r3
 8013e02:	f000 f8bf 	bl	8013f84 <USBD_Get_USB_Status>
 8013e06:	4603      	mov	r3, r0
 8013e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3710      	adds	r7, #16
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd80      	pop	{r7, pc}

08013e14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013e14:	b480      	push	{r7}
 8013e16:	b085      	sub	sp, #20
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	460b      	mov	r3, r1
 8013e1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e2c:	2b00      	cmp	r3, #0
 8013e2e:	da0b      	bge.n	8013e48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013e30:	78fb      	ldrb	r3, [r7, #3]
 8013e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e36:	68f9      	ldr	r1, [r7, #12]
 8013e38:	4613      	mov	r3, r2
 8013e3a:	00db      	lsls	r3, r3, #3
 8013e3c:	4413      	add	r3, r2
 8013e3e:	009b      	lsls	r3, r3, #2
 8013e40:	440b      	add	r3, r1
 8013e42:	333e      	adds	r3, #62	; 0x3e
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	e00b      	b.n	8013e60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013e48:	78fb      	ldrb	r3, [r7, #3]
 8013e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013e4e:	68f9      	ldr	r1, [r7, #12]
 8013e50:	4613      	mov	r3, r2
 8013e52:	00db      	lsls	r3, r3, #3
 8013e54:	4413      	add	r3, r2
 8013e56:	009b      	lsls	r3, r3, #2
 8013e58:	440b      	add	r3, r1
 8013e5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013e5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013e60:	4618      	mov	r0, r3
 8013e62:	3714      	adds	r7, #20
 8013e64:	46bd      	mov	sp, r7
 8013e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e6a:	4770      	bx	lr

08013e6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013e6c:	b580      	push	{r7, lr}
 8013e6e:	b084      	sub	sp, #16
 8013e70:	af00      	add	r7, sp, #0
 8013e72:	6078      	str	r0, [r7, #4]
 8013e74:	460b      	mov	r3, r1
 8013e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013e78:	2300      	movs	r3, #0
 8013e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013e86:	78fa      	ldrb	r2, [r7, #3]
 8013e88:	4611      	mov	r1, r2
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	f7f0 f8b0 	bl	8003ff0 <HAL_PCD_SetAddress>
 8013e90:	4603      	mov	r3, r0
 8013e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013e94:	7bfb      	ldrb	r3, [r7, #15]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f000 f874 	bl	8013f84 <USBD_Get_USB_Status>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3710      	adds	r7, #16
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}

08013eaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013eaa:	b580      	push	{r7, lr}
 8013eac:	b086      	sub	sp, #24
 8013eae:	af00      	add	r7, sp, #0
 8013eb0:	60f8      	str	r0, [r7, #12]
 8013eb2:	607a      	str	r2, [r7, #4]
 8013eb4:	603b      	str	r3, [r7, #0]
 8013eb6:	460b      	mov	r3, r1
 8013eb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013eba:	2300      	movs	r3, #0
 8013ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013ec8:	7af9      	ldrb	r1, [r7, #11]
 8013eca:	683b      	ldr	r3, [r7, #0]
 8013ecc:	687a      	ldr	r2, [r7, #4]
 8013ece:	f7f0 f9c9 	bl	8004264 <HAL_PCD_EP_Transmit>
 8013ed2:	4603      	mov	r3, r0
 8013ed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	4618      	mov	r0, r3
 8013eda:	f000 f853 	bl	8013f84 <USBD_Get_USB_Status>
 8013ede:	4603      	mov	r3, r0
 8013ee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	3718      	adds	r7, #24
 8013ee8:	46bd      	mov	sp, r7
 8013eea:	bd80      	pop	{r7, pc}

08013eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b086      	sub	sp, #24
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	60f8      	str	r0, [r7, #12]
 8013ef4:	607a      	str	r2, [r7, #4]
 8013ef6:	603b      	str	r3, [r7, #0]
 8013ef8:	460b      	mov	r3, r1
 8013efa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013efc:	2300      	movs	r3, #0
 8013efe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f00:	2300      	movs	r3, #0
 8013f02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013f0a:	7af9      	ldrb	r1, [r7, #11]
 8013f0c:	683b      	ldr	r3, [r7, #0]
 8013f0e:	687a      	ldr	r2, [r7, #4]
 8013f10:	f7f0 f945 	bl	800419e <HAL_PCD_EP_Receive>
 8013f14:	4603      	mov	r3, r0
 8013f16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013f18:	7dfb      	ldrb	r3, [r7, #23]
 8013f1a:	4618      	mov	r0, r3
 8013f1c:	f000 f832 	bl	8013f84 <USBD_Get_USB_Status>
 8013f20:	4603      	mov	r3, r0
 8013f22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013f24:	7dbb      	ldrb	r3, [r7, #22]
}
 8013f26:	4618      	mov	r0, r3
 8013f28:	3718      	adds	r7, #24
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	bd80      	pop	{r7, pc}

08013f2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013f2e:	b580      	push	{r7, lr}
 8013f30:	b082      	sub	sp, #8
 8013f32:	af00      	add	r7, sp, #0
 8013f34:	6078      	str	r0, [r7, #4]
 8013f36:	460b      	mov	r3, r1
 8013f38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013f40:	78fa      	ldrb	r2, [r7, #3]
 8013f42:	4611      	mov	r1, r2
 8013f44:	4618      	mov	r0, r3
 8013f46:	f7f0 f975 	bl	8004234 <HAL_PCD_EP_GetRxCount>
 8013f4a:	4603      	mov	r3, r0
}
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3708      	adds	r7, #8
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd80      	pop	{r7, pc}

08013f54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b083      	sub	sp, #12
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013f5c:	4b03      	ldr	r3, [pc, #12]	; (8013f6c <USBD_static_malloc+0x18>)
}
 8013f5e:	4618      	mov	r0, r3
 8013f60:	370c      	adds	r7, #12
 8013f62:	46bd      	mov	sp, r7
 8013f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f68:	4770      	bx	lr
 8013f6a:	bf00      	nop
 8013f6c:	20006ee4 	.word	0x20006ee4

08013f70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013f70:	b480      	push	{r7}
 8013f72:	b083      	sub	sp, #12
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]

}
 8013f78:	bf00      	nop
 8013f7a:	370c      	adds	r7, #12
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f82:	4770      	bx	lr

08013f84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013f84:	b480      	push	{r7}
 8013f86:	b085      	sub	sp, #20
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013f8e:	2300      	movs	r3, #0
 8013f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013f92:	79fb      	ldrb	r3, [r7, #7]
 8013f94:	2b03      	cmp	r3, #3
 8013f96:	d817      	bhi.n	8013fc8 <USBD_Get_USB_Status+0x44>
 8013f98:	a201      	add	r2, pc, #4	; (adr r2, 8013fa0 <USBD_Get_USB_Status+0x1c>)
 8013f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f9e:	bf00      	nop
 8013fa0:	08013fb1 	.word	0x08013fb1
 8013fa4:	08013fb7 	.word	0x08013fb7
 8013fa8:	08013fbd 	.word	0x08013fbd
 8013fac:	08013fc3 	.word	0x08013fc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013fb0:	2300      	movs	r3, #0
 8013fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8013fb4:	e00b      	b.n	8013fce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013fb6:	2303      	movs	r3, #3
 8013fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8013fba:	e008      	b.n	8013fce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013fbc:	2301      	movs	r3, #1
 8013fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8013fc0:	e005      	b.n	8013fce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013fc2:	2303      	movs	r3, #3
 8013fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8013fc6:	e002      	b.n	8013fce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013fc8:	2303      	movs	r3, #3
 8013fca:	73fb      	strb	r3, [r7, #15]
    break;
 8013fcc:	bf00      	nop
  }
  return usb_status;
 8013fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3714      	adds	r7, #20
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <__libc_init_array>:
 8013fdc:	b570      	push	{r4, r5, r6, lr}
 8013fde:	4d0d      	ldr	r5, [pc, #52]	; (8014014 <__libc_init_array+0x38>)
 8013fe0:	4c0d      	ldr	r4, [pc, #52]	; (8014018 <__libc_init_array+0x3c>)
 8013fe2:	1b64      	subs	r4, r4, r5
 8013fe4:	10a4      	asrs	r4, r4, #2
 8013fe6:	2600      	movs	r6, #0
 8013fe8:	42a6      	cmp	r6, r4
 8013fea:	d109      	bne.n	8014000 <__libc_init_array+0x24>
 8013fec:	4d0b      	ldr	r5, [pc, #44]	; (801401c <__libc_init_array+0x40>)
 8013fee:	4c0c      	ldr	r4, [pc, #48]	; (8014020 <__libc_init_array+0x44>)
 8013ff0:	f000 f8fa 	bl	80141e8 <_init>
 8013ff4:	1b64      	subs	r4, r4, r5
 8013ff6:	10a4      	asrs	r4, r4, #2
 8013ff8:	2600      	movs	r6, #0
 8013ffa:	42a6      	cmp	r6, r4
 8013ffc:	d105      	bne.n	801400a <__libc_init_array+0x2e>
 8013ffe:	bd70      	pop	{r4, r5, r6, pc}
 8014000:	f855 3b04 	ldr.w	r3, [r5], #4
 8014004:	4798      	blx	r3
 8014006:	3601      	adds	r6, #1
 8014008:	e7ee      	b.n	8013fe8 <__libc_init_array+0xc>
 801400a:	f855 3b04 	ldr.w	r3, [r5], #4
 801400e:	4798      	blx	r3
 8014010:	3601      	adds	r6, #1
 8014012:	e7f2      	b.n	8013ffa <__libc_init_array+0x1e>
 8014014:	08014554 	.word	0x08014554
 8014018:	08014554 	.word	0x08014554
 801401c:	08014554 	.word	0x08014554
 8014020:	08014558 	.word	0x08014558

08014024 <__retarget_lock_acquire_recursive>:
 8014024:	4770      	bx	lr

08014026 <__retarget_lock_release_recursive>:
 8014026:	4770      	bx	lr

08014028 <memcpy>:
 8014028:	440a      	add	r2, r1
 801402a:	4291      	cmp	r1, r2
 801402c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8014030:	d100      	bne.n	8014034 <memcpy+0xc>
 8014032:	4770      	bx	lr
 8014034:	b510      	push	{r4, lr}
 8014036:	f811 4b01 	ldrb.w	r4, [r1], #1
 801403a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801403e:	4291      	cmp	r1, r2
 8014040:	d1f9      	bne.n	8014036 <memcpy+0xe>
 8014042:	bd10      	pop	{r4, pc}

08014044 <memset>:
 8014044:	4402      	add	r2, r0
 8014046:	4603      	mov	r3, r0
 8014048:	4293      	cmp	r3, r2
 801404a:	d100      	bne.n	801404e <memset+0xa>
 801404c:	4770      	bx	lr
 801404e:	f803 1b01 	strb.w	r1, [r3], #1
 8014052:	e7f9      	b.n	8014048 <memset+0x4>

08014054 <cleanup_glue>:
 8014054:	b538      	push	{r3, r4, r5, lr}
 8014056:	460c      	mov	r4, r1
 8014058:	6809      	ldr	r1, [r1, #0]
 801405a:	4605      	mov	r5, r0
 801405c:	b109      	cbz	r1, 8014062 <cleanup_glue+0xe>
 801405e:	f7ff fff9 	bl	8014054 <cleanup_glue>
 8014062:	4621      	mov	r1, r4
 8014064:	4628      	mov	r0, r5
 8014066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801406a:	f000 b871 	b.w	8014150 <_free_r>
	...

08014070 <_reclaim_reent>:
 8014070:	4b2c      	ldr	r3, [pc, #176]	; (8014124 <_reclaim_reent+0xb4>)
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	4283      	cmp	r3, r0
 8014076:	b570      	push	{r4, r5, r6, lr}
 8014078:	4604      	mov	r4, r0
 801407a:	d051      	beq.n	8014120 <_reclaim_reent+0xb0>
 801407c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801407e:	b143      	cbz	r3, 8014092 <_reclaim_reent+0x22>
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	2b00      	cmp	r3, #0
 8014084:	d14a      	bne.n	801411c <_reclaim_reent+0xac>
 8014086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014088:	6819      	ldr	r1, [r3, #0]
 801408a:	b111      	cbz	r1, 8014092 <_reclaim_reent+0x22>
 801408c:	4620      	mov	r0, r4
 801408e:	f000 f85f 	bl	8014150 <_free_r>
 8014092:	6961      	ldr	r1, [r4, #20]
 8014094:	b111      	cbz	r1, 801409c <_reclaim_reent+0x2c>
 8014096:	4620      	mov	r0, r4
 8014098:	f000 f85a 	bl	8014150 <_free_r>
 801409c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801409e:	b111      	cbz	r1, 80140a6 <_reclaim_reent+0x36>
 80140a0:	4620      	mov	r0, r4
 80140a2:	f000 f855 	bl	8014150 <_free_r>
 80140a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80140a8:	b111      	cbz	r1, 80140b0 <_reclaim_reent+0x40>
 80140aa:	4620      	mov	r0, r4
 80140ac:	f000 f850 	bl	8014150 <_free_r>
 80140b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80140b2:	b111      	cbz	r1, 80140ba <_reclaim_reent+0x4a>
 80140b4:	4620      	mov	r0, r4
 80140b6:	f000 f84b 	bl	8014150 <_free_r>
 80140ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80140bc:	b111      	cbz	r1, 80140c4 <_reclaim_reent+0x54>
 80140be:	4620      	mov	r0, r4
 80140c0:	f000 f846 	bl	8014150 <_free_r>
 80140c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80140c6:	b111      	cbz	r1, 80140ce <_reclaim_reent+0x5e>
 80140c8:	4620      	mov	r0, r4
 80140ca:	f000 f841 	bl	8014150 <_free_r>
 80140ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80140d0:	b111      	cbz	r1, 80140d8 <_reclaim_reent+0x68>
 80140d2:	4620      	mov	r0, r4
 80140d4:	f000 f83c 	bl	8014150 <_free_r>
 80140d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140da:	b111      	cbz	r1, 80140e2 <_reclaim_reent+0x72>
 80140dc:	4620      	mov	r0, r4
 80140de:	f000 f837 	bl	8014150 <_free_r>
 80140e2:	69a3      	ldr	r3, [r4, #24]
 80140e4:	b1e3      	cbz	r3, 8014120 <_reclaim_reent+0xb0>
 80140e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80140e8:	4620      	mov	r0, r4
 80140ea:	4798      	blx	r3
 80140ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80140ee:	b1b9      	cbz	r1, 8014120 <_reclaim_reent+0xb0>
 80140f0:	4620      	mov	r0, r4
 80140f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80140f6:	f7ff bfad 	b.w	8014054 <cleanup_glue>
 80140fa:	5949      	ldr	r1, [r1, r5]
 80140fc:	b941      	cbnz	r1, 8014110 <_reclaim_reent+0xa0>
 80140fe:	3504      	adds	r5, #4
 8014100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014102:	2d80      	cmp	r5, #128	; 0x80
 8014104:	68d9      	ldr	r1, [r3, #12]
 8014106:	d1f8      	bne.n	80140fa <_reclaim_reent+0x8a>
 8014108:	4620      	mov	r0, r4
 801410a:	f000 f821 	bl	8014150 <_free_r>
 801410e:	e7ba      	b.n	8014086 <_reclaim_reent+0x16>
 8014110:	680e      	ldr	r6, [r1, #0]
 8014112:	4620      	mov	r0, r4
 8014114:	f000 f81c 	bl	8014150 <_free_r>
 8014118:	4631      	mov	r1, r6
 801411a:	e7ef      	b.n	80140fc <_reclaim_reent+0x8c>
 801411c:	2500      	movs	r5, #0
 801411e:	e7ef      	b.n	8014100 <_reclaim_reent+0x90>
 8014120:	bd70      	pop	{r4, r5, r6, pc}
 8014122:	bf00      	nop
 8014124:	200003c0 	.word	0x200003c0

08014128 <strcpy>:
 8014128:	4603      	mov	r3, r0
 801412a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801412e:	f803 2b01 	strb.w	r2, [r3], #1
 8014132:	2a00      	cmp	r2, #0
 8014134:	d1f9      	bne.n	801412a <strcpy+0x2>
 8014136:	4770      	bx	lr

08014138 <__malloc_lock>:
 8014138:	4801      	ldr	r0, [pc, #4]	; (8014140 <__malloc_lock+0x8>)
 801413a:	f7ff bf73 	b.w	8014024 <__retarget_lock_acquire_recursive>
 801413e:	bf00      	nop
 8014140:	20007104 	.word	0x20007104

08014144 <__malloc_unlock>:
 8014144:	4801      	ldr	r0, [pc, #4]	; (801414c <__malloc_unlock+0x8>)
 8014146:	f7ff bf6e 	b.w	8014026 <__retarget_lock_release_recursive>
 801414a:	bf00      	nop
 801414c:	20007104 	.word	0x20007104

08014150 <_free_r>:
 8014150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014152:	2900      	cmp	r1, #0
 8014154:	d044      	beq.n	80141e0 <_free_r+0x90>
 8014156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801415a:	9001      	str	r0, [sp, #4]
 801415c:	2b00      	cmp	r3, #0
 801415e:	f1a1 0404 	sub.w	r4, r1, #4
 8014162:	bfb8      	it	lt
 8014164:	18e4      	addlt	r4, r4, r3
 8014166:	f7ff ffe7 	bl	8014138 <__malloc_lock>
 801416a:	4a1e      	ldr	r2, [pc, #120]	; (80141e4 <_free_r+0x94>)
 801416c:	9801      	ldr	r0, [sp, #4]
 801416e:	6813      	ldr	r3, [r2, #0]
 8014170:	b933      	cbnz	r3, 8014180 <_free_r+0x30>
 8014172:	6063      	str	r3, [r4, #4]
 8014174:	6014      	str	r4, [r2, #0]
 8014176:	b003      	add	sp, #12
 8014178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801417c:	f7ff bfe2 	b.w	8014144 <__malloc_unlock>
 8014180:	42a3      	cmp	r3, r4
 8014182:	d908      	bls.n	8014196 <_free_r+0x46>
 8014184:	6825      	ldr	r5, [r4, #0]
 8014186:	1961      	adds	r1, r4, r5
 8014188:	428b      	cmp	r3, r1
 801418a:	bf01      	itttt	eq
 801418c:	6819      	ldreq	r1, [r3, #0]
 801418e:	685b      	ldreq	r3, [r3, #4]
 8014190:	1949      	addeq	r1, r1, r5
 8014192:	6021      	streq	r1, [r4, #0]
 8014194:	e7ed      	b.n	8014172 <_free_r+0x22>
 8014196:	461a      	mov	r2, r3
 8014198:	685b      	ldr	r3, [r3, #4]
 801419a:	b10b      	cbz	r3, 80141a0 <_free_r+0x50>
 801419c:	42a3      	cmp	r3, r4
 801419e:	d9fa      	bls.n	8014196 <_free_r+0x46>
 80141a0:	6811      	ldr	r1, [r2, #0]
 80141a2:	1855      	adds	r5, r2, r1
 80141a4:	42a5      	cmp	r5, r4
 80141a6:	d10b      	bne.n	80141c0 <_free_r+0x70>
 80141a8:	6824      	ldr	r4, [r4, #0]
 80141aa:	4421      	add	r1, r4
 80141ac:	1854      	adds	r4, r2, r1
 80141ae:	42a3      	cmp	r3, r4
 80141b0:	6011      	str	r1, [r2, #0]
 80141b2:	d1e0      	bne.n	8014176 <_free_r+0x26>
 80141b4:	681c      	ldr	r4, [r3, #0]
 80141b6:	685b      	ldr	r3, [r3, #4]
 80141b8:	6053      	str	r3, [r2, #4]
 80141ba:	4421      	add	r1, r4
 80141bc:	6011      	str	r1, [r2, #0]
 80141be:	e7da      	b.n	8014176 <_free_r+0x26>
 80141c0:	d902      	bls.n	80141c8 <_free_r+0x78>
 80141c2:	230c      	movs	r3, #12
 80141c4:	6003      	str	r3, [r0, #0]
 80141c6:	e7d6      	b.n	8014176 <_free_r+0x26>
 80141c8:	6825      	ldr	r5, [r4, #0]
 80141ca:	1961      	adds	r1, r4, r5
 80141cc:	428b      	cmp	r3, r1
 80141ce:	bf04      	itt	eq
 80141d0:	6819      	ldreq	r1, [r3, #0]
 80141d2:	685b      	ldreq	r3, [r3, #4]
 80141d4:	6063      	str	r3, [r4, #4]
 80141d6:	bf04      	itt	eq
 80141d8:	1949      	addeq	r1, r1, r5
 80141da:	6021      	streq	r1, [r4, #0]
 80141dc:	6054      	str	r4, [r2, #4]
 80141de:	e7ca      	b.n	8014176 <_free_r+0x26>
 80141e0:	b003      	add	sp, #12
 80141e2:	bd30      	pop	{r4, r5, pc}
 80141e4:	20007108 	.word	0x20007108

080141e8 <_init>:
 80141e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141ea:	bf00      	nop
 80141ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141ee:	bc08      	pop	{r3}
 80141f0:	469e      	mov	lr, r3
 80141f2:	4770      	bx	lr

080141f4 <_fini>:
 80141f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141f6:	bf00      	nop
 80141f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141fa:	bc08      	pop	{r3}
 80141fc:	469e      	mov	lr, r3
 80141fe:	4770      	bx	lr
