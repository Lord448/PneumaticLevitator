
Daughterboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001f490  0800c774  0800c774  0001c774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802bc04  0802bc04  00040090  2**0
                  CONTENTS
  4 .ARM          00000008  0802bc04  0802bc04  0003bc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802bc0c  0802bc0c  00040090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802bc0c  0802bc0c  0003bc0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802bc10  0802bc10  0003bc10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0802bc14  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e9c  20000090  0802bca4  00040090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004f2c  0802bca4  00044f2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000224d6  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000439d  00000000  00000000  00062596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c80  00000000  00000000  00066938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad8  00000000  00000000  000685b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b3d  00000000  00000000  0006a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001edd4  00000000  00000000  0006fbcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009eaa6  00000000  00000000  0008e9a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d447  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e74  00000000  00000000  0012d498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000090 	.word	0x20000090
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c75c 	.word	0x0800c75c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000094 	.word	0x20000094
 80001dc:	0800c75c 	.word	0x0800c75c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f001 feee 	bl	8002368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f848 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f9c6 	bl	8000920 <MX_GPIO_Init>
  MX_DMA_Init();
 8000594:	f000 f966 	bl	8000864 <MX_DMA_Init>
  MX_SPI1_Init();
 8000598:	f000 f8aa 	bl	80006f0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800059c:	f000 f8de 	bl	800075c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80005a0:	f000 f934 	bl	800080c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005a4:	f008 fe2c 	bl	8009200 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005a8:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <main+0x6c>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4811      	ldr	r0, [pc, #68]	; (80005f4 <main+0x70>)
 80005ae:	f008 fe71 	bl	8009294 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a10      	ldr	r2, [pc, #64]	; (80005f8 <main+0x74>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLCD */
  TaskLCDHandle = osThreadNew(vTaskLCD, NULL, &TaskLCD_attributes);
 80005b8:	4a10      	ldr	r2, [pc, #64]	; (80005fc <main+0x78>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4810      	ldr	r0, [pc, #64]	; (8000600 <main+0x7c>)
 80005be:	f008 fe69 	bl	8009294 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <main+0x80>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of TaskBlink */
  TaskBlinkHandle = osThreadNew(vTaskBlink, NULL, &TaskBlink_attributes);
 80005c8:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <main+0x84>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	480f      	ldr	r0, [pc, #60]	; (800060c <main+0x88>)
 80005ce:	f008 fe61 	bl	8009294 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <main+0x8c>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of TaskLeds */
  TaskLedsHandle = osThreadNew(vTaskLeds, NULL, &TaskLeds_attributes);
 80005d8:	4a0e      	ldr	r2, [pc, #56]	; (8000614 <main+0x90>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480e      	ldr	r0, [pc, #56]	; (8000618 <main+0x94>)
 80005de:	f008 fe59 	bl	8009294 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0d      	ldr	r2, [pc, #52]	; (800061c <main+0x98>)
 80005e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e8:	f008 fe2e 	bl	8009248 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x68>
 80005ee:	bf00      	nop
 80005f0:	0800c89c 	.word	0x0800c89c
 80005f4:	08000ae9 	.word	0x08000ae9
 80005f8:	200002b0 	.word	0x200002b0
 80005fc:	0800c8c0 	.word	0x0800c8c0
 8000600:	08000af9 	.word	0x08000af9
 8000604:	200002b4 	.word	0x200002b4
 8000608:	0800c8e4 	.word	0x0800c8e4
 800060c:	08000b39 	.word	0x08000b39
 8000610:	200002b8 	.word	0x200002b8
 8000614:	0800c908 	.word	0x0800c908
 8000618:	08000b59 	.word	0x08000b59
 800061c:	200002bc 	.word	0x200002bc

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	; 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f00b fbae 	bl	800bd90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <SystemClock_Config+0xc8>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a26      	ldr	r2, [pc, #152]	; (80006e8 <SystemClock_Config+0xc8>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <SystemClock_Config+0xc8>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b21      	ldr	r3, [pc, #132]	; (80006ec <SystemClock_Config+0xcc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a20      	ldr	r2, [pc, #128]	; (80006ec <SystemClock_Config+0xcc>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1e      	ldr	r3, [pc, #120]	; (80006ec <SystemClock_Config+0xcc>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800067c:	2301      	movs	r3, #1
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800068a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000690:	230c      	movs	r3, #12
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000694:	2360      	movs	r3, #96	; 0x60
 8000696:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800069c:	2304      	movs	r3, #4
 800069e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f002 fe2f 	bl	8003308 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 fa72 	bl	8000b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006ca:	f107 030c 	add.w	r3, r7, #12
 80006ce:	2103      	movs	r1, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f003 f891 	bl	80037f8 <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006dc:	f000 fa5c 	bl	8000b98 <Error_Handler>
  }
}
 80006e0:	bf00      	nop
 80006e2:	3750      	adds	r7, #80	; 0x50
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40007000 	.word	0x40007000

080006f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_SPI1_Init+0x64>)
 80006f6:	4a18      	ldr	r2, [pc, #96]	; (8000758 <MX_SPI1_Init+0x68>)
 80006f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006fa:	4b16      	ldr	r3, [pc, #88]	; (8000754 <MX_SPI1_Init+0x64>)
 80006fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_SPI1_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_SPI1_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_SPI1_Init+0x64>)
 8000710:	2202      	movs	r2, #2
 8000712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000722:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_SPI1_Init+0x64>)
 800073c:	220a      	movs	r2, #10
 800073e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_SPI1_Init+0x64>)
 8000742:	f003 fa39 	bl	8003bb8 <HAL_SPI_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800074c:	f000 fa24 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200000ac 	.word	0x200000ac
 8000758:	40013000 	.word	0x40013000

0800075c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b08c      	sub	sp, #48	; 0x30
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2224      	movs	r2, #36	; 0x24
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f00b fb10 	bl	800bd90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <MX_TIM1_Init+0xa8>)
 800077a:	4a23      	ldr	r2, [pc, #140]	; (8000808 <MX_TIM1_Init+0xac>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b21      	ldr	r3, [pc, #132]	; (8000804 <MX_TIM1_Init+0xa8>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1f      	ldr	r3, [pc, #124]	; (8000804 <MX_TIM1_Init+0xa8>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_TIM1_Init+0xa8>)
 800078c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000790:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b1c      	ldr	r3, [pc, #112]	; (8000804 <MX_TIM1_Init+0xa8>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000798:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <MX_TIM1_Init+0xa8>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <MX_TIM1_Init+0xa8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007ac:	2301      	movs	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007bc:	2301      	movs	r3, #1
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	4619      	mov	r1, r3
 80007ce:	480d      	ldr	r0, [pc, #52]	; (8000804 <MX_TIM1_Init+0xa8>)
 80007d0:	f003 fdd8 	bl	8004384 <HAL_TIM_Encoder_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80007da:	f000 f9dd 	bl	8000b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4806      	ldr	r0, [pc, #24]	; (8000804 <MX_TIM1_Init+0xa8>)
 80007ec:	f003 fef0 	bl	80045d0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80007f6:	f000 f9cf 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	3730      	adds	r7, #48	; 0x30
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000164 	.word	0x20000164
 8000808:	40010000 	.word	0x40010000

0800080c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000812:	4a13      	ldr	r2, [pc, #76]	; (8000860 <MX_USART1_UART_Init+0x54>)
 8000814:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000818:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 800081c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000820:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000824:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART1_UART_Init+0x50>)
 800082e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000832:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000836:	220c      	movs	r2, #12
 8000838:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART1_UART_Init+0x50>)
 800083c:	2200      	movs	r2, #0
 800083e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000842:	2200      	movs	r2, #0
 8000844:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART1_UART_Init+0x50>)
 8000848:	f003 ff30 	bl	80046ac <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 8000852:	f000 f9a1 	bl	8000b98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200001ac 	.word	0x200001ac
 8000860:	40011000 	.word	0x40011000

08000864 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b29      	ldr	r3, [pc, #164]	; (8000914 <MX_DMA_Init+0xb0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a28      	ldr	r2, [pc, #160]	; (8000914 <MX_DMA_Init+0xb0>)
 8000874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b26      	ldr	r3, [pc, #152]	; (8000914 <MX_DMA_Init+0xb0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8000886:	4b24      	ldr	r3, [pc, #144]	; (8000918 <MX_DMA_Init+0xb4>)
 8000888:	4a24      	ldr	r2, [pc, #144]	; (800091c <MX_DMA_Init+0xb8>)
 800088a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <MX_DMA_Init+0xb4>)
 800088e:	2200      	movs	r2, #0
 8000890:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000892:	4b21      	ldr	r3, [pc, #132]	; (8000918 <MX_DMA_Init+0xb4>)
 8000894:	2280      	movs	r2, #128	; 0x80
 8000896:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_DMA_Init+0xb4>)
 800089a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800089e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 80008a0:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <MX_DMA_Init+0xb4>)
 80008a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008a6:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_DMA_Init+0xb4>)
 80008aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80008ae:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80008b0:	4b19      	ldr	r3, [pc, #100]	; (8000918 <MX_DMA_Init+0xb4>)
 80008b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b6:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 80008b8:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_DMA_Init+0xb4>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_LOW;
 80008be:	4b16      	ldr	r3, [pc, #88]	; (8000918 <MX_DMA_Init+0xb4>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_DMA_Init+0xb4>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <MX_DMA_Init+0xb4>)
 80008cc:	2203      	movs	r2, #3
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_DMA_Init+0xb4>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80008d6:	4b10      	ldr	r3, [pc, #64]	; (8000918 <MX_DMA_Init+0xb4>)
 80008d8:	2200      	movs	r2, #0
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 80008dc:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_DMA_Init+0xb4>)
 80008de:	f001 feeb 	bl	80026b8 <HAL_DMA_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA_Init+0x88>
  {
    Error_Handler( );
 80008e8:	f000 f956 	bl	8000b98 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2105      	movs	r1, #5
 80008f0:	203a      	movs	r0, #58	; 0x3a
 80008f2:	f001 feaa 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80008f6:	203a      	movs	r0, #58	; 0x3a
 80008f8:	f001 fec3 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80008fc:	2200      	movs	r2, #0
 80008fe:	2105      	movs	r1, #5
 8000900:	2046      	movs	r0, #70	; 0x46
 8000902:	f001 fea2 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000906:	2046      	movs	r0, #70	; 0x46
 8000908:	f001 febb 	bl	8002682 <HAL_NVIC_EnableIRQ>

}
 800090c:	bf00      	nop
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40023800 	.word	0x40023800
 8000918:	20000250 	.word	0x20000250
 800091c:	40026428 	.word	0x40026428

08000920 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
 800092e:	605a      	str	r2, [r3, #4]
 8000930:	609a      	str	r2, [r3, #8]
 8000932:	60da      	str	r2, [r3, #12]
 8000934:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b67      	ldr	r3, [pc, #412]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a66      	ldr	r2, [pc, #408]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000940:	f043 0304 	orr.w	r3, r3, #4
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b64      	ldr	r3, [pc, #400]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0304 	and.w	r3, r3, #4
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b60      	ldr	r3, [pc, #384]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a5f      	ldr	r2, [pc, #380]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 800095c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b5d      	ldr	r3, [pc, #372]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	4b59      	ldr	r3, [pc, #356]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a58      	ldr	r2, [pc, #352]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	4b52      	ldr	r3, [pc, #328]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <MX_GPIO_Init+0x1b8>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GP_GPIO_Port, LED_GP_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ac:	484b      	ldr	r0, [pc, #300]	; (8000adc <MX_GPIO_Init+0x1bc>)
 80009ae:	f002 fc53 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2150      	movs	r1, #80	; 0x50
 80009b6:	484a      	ldr	r0, [pc, #296]	; (8000ae0 <MX_GPIO_Init+0x1c0>)
 80009b8:	f002 fc4e 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin|LCD_BLK_Pin, GPIO_PIN_SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2103      	movs	r1, #3
 80009c0:	4848      	ldr	r0, [pc, #288]	; (8000ae4 <MX_GPIO_Init+0x1c4>)
 80009c2:	f002 fc49 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80009cc:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x1c4>)
 80009ce:	f002 fc43 	bl	8003258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GP_Pin */
  GPIO_InitStruct.Pin = LED_GP_Pin;
 80009d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d8:	2301      	movs	r3, #1
 80009da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009dc:	2300      	movs	r3, #0
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GP_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	483c      	ldr	r0, [pc, #240]	; (8000adc <MX_GPIO_Init+0x1bc>)
 80009ec:	f002 fab0 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : Down_IT_Pin */
  GPIO_InitStruct.Pin = Down_IT_Pin;
 80009f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Down_IT_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4835      	ldr	r0, [pc, #212]	; (8000adc <MX_GPIO_Init+0x1bc>)
 8000a08:	f002 faa2 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IT_Pin Ok_IT_Pin Right_IT_Pin Up_IT_Pin
                           EncoderSW_Pin */
  GPIO_InitStruct.Pin = Left_IT_Pin|Ok_IT_Pin|Right_IT_Pin|Up_IT_Pin
 8000a0c:	f240 430f 	movw	r3, #1039	; 0x40f
 8000a10:	617b      	str	r3, [r7, #20]
                          |EncoderSW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a12:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	482f      	ldr	r0, [pc, #188]	; (8000ae0 <MX_GPIO_Init+0x1c0>)
 8000a24:	f002 fa94 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|LCD_RST_Pin;
 8000a28:	2350      	movs	r3, #80	; 0x50
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4828      	ldr	r0, [pc, #160]	; (8000ae0 <MX_GPIO_Init+0x1c0>)
 8000a40:	f002 fa86 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CS_Pin LCD_BLK_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_BLK_Pin;
 8000a44:	2303      	movs	r3, #3
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a54:	f107 0314 	add.w	r3, r7, #20
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4822      	ldr	r0, [pc, #136]	; (8000ae4 <MX_GPIO_Init+0x1c4>)
 8000a5c:	f002 fa78 	bl	8002f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_COMM_Pin LED_USB_Pin LED_CONTROL_Pin */
  GPIO_InitStruct.Pin = LED_COMM_Pin|LED_USB_Pin|LED_CONTROL_Pin;
 8000a60:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	2301      	movs	r3, #1
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	481a      	ldr	r0, [pc, #104]	; (8000ae4 <MX_GPIO_Init+0x1c4>)
 8000a7a:	f002 fa69 	bl	8002f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	2105      	movs	r1, #5
 8000a82:	2006      	movs	r0, #6
 8000a84:	f001 fde1 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a88:	2006      	movs	r0, #6
 8000a8a:	f001 fdfa 	bl	8002682 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2105      	movs	r1, #5
 8000a92:	2007      	movs	r0, #7
 8000a94:	f001 fdd9 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a98:	2007      	movs	r0, #7
 8000a9a:	f001 fdf2 	bl	8002682 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2105      	movs	r1, #5
 8000aa2:	2008      	movs	r0, #8
 8000aa4:	f001 fdd1 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000aa8:	2008      	movs	r0, #8
 8000aaa:	f001 fdea 	bl	8002682 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2105      	movs	r1, #5
 8000ab2:	2009      	movs	r0, #9
 8000ab4:	f001 fdc9 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ab8:	2009      	movs	r0, #9
 8000aba:	f001 fde2 	bl	8002682 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2105      	movs	r1, #5
 8000ac2:	2028      	movs	r0, #40	; 0x28
 8000ac4:	f001 fdc1 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ac8:	2028      	movs	r0, #40	; 0x28
 8000aca:	f001 fdda 	bl	8002682 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	; 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020000 	.word	0x40020000
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000af0:	2001      	movs	r0, #1
 8000af2:	f008 fc61 	bl	80093b8 <osDelay>
 8000af6:	e7fb      	b.n	8000af0 <StartDefaultTask+0x8>

08000af8 <vTaskLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLCD */
void vTaskLCD(void *argument)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	 * Stack usage for the
	 * image processing with
	 * chunks of 256 Bytes
	 */
	uint16_t *ITMLogoRAMBuffer;
	ITMLogoRAMBuffer = (uint16_t*)calloc(ITMLOGO_SIZE, sizeof(uint16_t));
 8000b00:	2102      	movs	r1, #2
 8000b02:	f246 0039 	movw	r0, #24633	; 0x6039
 8000b06:	f00b f8f9 	bl	800bcfc <calloc>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	60fb      	str	r3, [r7, #12]
	HAL_DMA_Start(&hdma_memtomem_dma2_stream1, (uint32_t)&ITMLogo.p, (uint32_t)ITMLogoRAMBuffer, ITMLOGO_SIZE);
 8000b0e:	4908      	ldr	r1, [pc, #32]	; (8000b30 <vTaskLCD+0x38>)
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	f246 0339 	movw	r3, #24633	; 0x6039
 8000b16:	4807      	ldr	r0, [pc, #28]	; (8000b34 <vTaskLCD+0x3c>)
 8000b18:	f001 fe7c 	bl	8002814 <HAL_DMA_Start>

	LCD_init();
 8000b1c:	f000 fe46 	bl	80017ac <LCD_init>
	LCD_Test();
 8000b20:	f000 feec 	bl	80018fc <LCD_Test>
	free(ITMLogoRAMBuffer);
 8000b24:	68f8      	ldr	r0, [r7, #12]
 8000b26:	f00b f91d 	bl	800bd64 <free>
  for(;;)
  {
  	LCD_Test();
 8000b2a:	f000 fee7 	bl	80018fc <LCD_Test>
 8000b2e:	e7fc      	b.n	8000b2a <vTaskLCD+0x32>
 8000b30:	2000001c 	.word	0x2000001c
 8000b34:	20000250 	.word	0x20000250

08000b38 <vTaskBlink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskBlink */
void vTaskBlink(void *argument)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskBlink */

  for(;;)
  {
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000b40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <vTaskBlink+0x1c>)
 8000b46:	f002 fba0 	bl	800328a <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(250));
 8000b4a:	20fa      	movs	r0, #250	; 0xfa
 8000b4c:	f008 fc34 	bl	80093b8 <osDelay>
    HAL_GPIO_TogglePin(LED_GP_GPIO_Port, LED_GP_Pin);
 8000b50:	e7f6      	b.n	8000b40 <vTaskBlink+0x8>
 8000b52:	bf00      	nop
 8000b54:	40020800 	.word	0x40020800

08000b58 <vTaskLeds>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vTaskLeds */
void vTaskLeds(void *argument)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vTaskLeds */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <vTaskLeds+0x3c>)
 8000b66:	f002 fb90 	bl	800328a <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000b6a:	2064      	movs	r0, #100	; 0x64
 8000b6c:	f008 fc24 	bl	80093b8 <osDelay>
    HAL_GPIO_TogglePin(LED_USB_GPIO_Port, LED_USB_Pin);
 8000b70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b74:	4807      	ldr	r0, [pc, #28]	; (8000b94 <vTaskLeds+0x3c>)
 8000b76:	f002 fb88 	bl	800328a <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000b7a:	2064      	movs	r0, #100	; 0x64
 8000b7c:	f008 fc1c 	bl	80093b8 <osDelay>
    HAL_GPIO_TogglePin(LED_CONTROL_GPIO_Port, LED_CONTROL_Pin);
 8000b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <vTaskLeds+0x3c>)
 8000b86:	f002 fb80 	bl	800328a <HAL_GPIO_TogglePin>
    osDelay(pdMS_TO_TICKS(100));
 8000b8a:	2064      	movs	r0, #100	; 0x64
 8000b8c:	f008 fc14 	bl	80093b8 <osDelay>
    HAL_GPIO_TogglePin(LED_COMM_GPIO_Port, LED_COMM_Pin);
 8000b90:	e7e6      	b.n	8000b60 <vTaskLeds+0x8>
 8000b92:	bf00      	nop
 8000b94:	40020400 	.word	0x40020400

08000b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b9c:	b672      	cpsid	i
}
 8000b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <Error_Handler+0x8>
	...

08000ba4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	607b      	str	r3, [r7, #4]
 8000bae:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb2:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	4b0b      	ldr	r3, [pc, #44]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd6:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <HAL_MspInit+0x54>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	210f      	movs	r1, #15
 8000be6:	f06f 0001 	mvn.w	r0, #1
 8000bea:	f001 fd2e 	bl	800264a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40023800 	.word	0x40023800

08000bfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a30      	ldr	r2, [pc, #192]	; (8000cdc <HAL_SPI_MspInit+0xe0>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d15a      	bne.n	8000cd4 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	4b2f      	ldr	r3, [pc, #188]	; (8000ce0 <HAL_SPI_MspInit+0xe4>)
 8000c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c26:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <HAL_SPI_MspInit+0xe4>)
 8000c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <HAL_SPI_MspInit+0xe4>)
 8000c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	4b28      	ldr	r3, [pc, #160]	; (8000ce0 <HAL_SPI_MspInit+0xe4>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a27      	ldr	r2, [pc, #156]	; (8000ce0 <HAL_SPI_MspInit+0xe4>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <HAL_SPI_MspInit+0xe4>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	60fb      	str	r3, [r7, #12]
 8000c54:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDO_Pin;
 8000c56:	23a0      	movs	r3, #160	; 0xa0
 8000c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	2303      	movs	r3, #3
 8000c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c66:	2305      	movs	r3, #5
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0314 	add.w	r3, r7, #20
 8000c6e:	4619      	mov	r1, r3
 8000c70:	481c      	ldr	r0, [pc, #112]	; (8000ce4 <HAL_SPI_MspInit+0xe8>)
 8000c72:	f002 f96d 	bl	8002f50 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream2;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000c78:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <HAL_SPI_MspInit+0xf0>)
 8000c7a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_2;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000c7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c82:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000c86:	2240      	movs	r2, #64	; 0x40
 8000c88:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c96:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c98:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c9e:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000ca4:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000cac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000cba:	f001 fcfd 	bl	80026b8 <HAL_DMA_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8000cc4:	f7ff ff68 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a07      	ldr	r2, [pc, #28]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000ccc:	649a      	str	r2, [r3, #72]	; 0x48
 8000cce:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <HAL_SPI_MspInit+0xec>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	; 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40013000 	.word	0x40013000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	20000104 	.word	0x20000104
 8000cec:	40026440 	.word	0x40026440

08000cf0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]
 8000d06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <HAL_TIM_Encoder_MspInit+0x84>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d12c      	bne.n	8000d6c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6453      	str	r3, [r2, #68]	; 0x44
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	613b      	str	r3, [r7, #16]
 8000d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d38:	f043 0301 	orr.w	r3, r3, #1
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_TIM_Encoder_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = EncoderA_Pin|EncoderB_Pin;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_TIM_Encoder_MspInit+0x8c>)
 8000d68:	f002 f8f2 	bl	8002f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3728      	adds	r7, #40	; 0x28
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40010000 	.word	0x40010000
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020000 	.word	0x40020000

08000d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a44      	ldr	r2, [pc, #272]	; (8000eb0 <HAL_UART_MspInit+0x130>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	f040 8081 	bne.w	8000ea6 <HAL_UART_MspInit+0x126>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
 8000da8:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000dae:	f043 0310 	orr.w	r3, r3, #16
 8000db2:	6453      	str	r3, [r2, #68]	; 0x44
 8000db4:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a3a      	ldr	r2, [pc, #232]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b34      	ldr	r3, [pc, #208]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	6313      	str	r3, [r2, #48]	; 0x30
 8000dec:	4b31      	ldr	r3, [pc, #196]	; (8000eb4 <HAL_UART_MspInit+0x134>)
 8000dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000df8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2300      	movs	r3, #0
 8000e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e0a:	2307      	movs	r3, #7
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4828      	ldr	r0, [pc, #160]	; (8000eb8 <HAL_UART_MspInit+0x138>)
 8000e16:	f002 f89b 	bl	8002f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e1a:	2308      	movs	r3, #8
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4821      	ldr	r0, [pc, #132]	; (8000ebc <HAL_UART_MspInit+0x13c>)
 8000e36:	f002 f88b 	bl	8002f50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <HAL_UART_MspInit+0x144>)
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e4a:	2240      	movs	r2, #64	; 0x40
 8000e4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e7c:	f001 fc1c 	bl	80026b8 <HAL_DMA_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8000e86:	f7ff fe87 	bl	8000b98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a0c      	ldr	r2, [pc, #48]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <HAL_UART_MspInit+0x140>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000e96:	2200      	movs	r2, #0
 8000e98:	2105      	movs	r1, #5
 8000e9a:	2025      	movs	r0, #37	; 0x25
 8000e9c:	f001 fbd5 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000ea0:	2025      	movs	r0, #37	; 0x25
 8000ea2:	f001 fbee 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ea6:	bf00      	nop
 8000ea8:	3728      	adds	r7, #40	; 0x28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40011000 	.word	0x40011000
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40020000 	.word	0x40020000
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	200001f0 	.word	0x200001f0
 8000ec4:	400264b8 	.word	0x400264b8

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f001 fa88 	bl	800240c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000efc:	f009 fe94 	bl	800ac28 <xTaskGetSchedulerState>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d001      	beq.n	8000f0a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f06:	f00a fc7f 	bl	800b808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Left_IT_Pin);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f002 f9d4 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Ok_IT_Pin);
 8000f20:	2002      	movs	r0, #2
 8000f22:	f002 f9cd 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_IT_Pin);
 8000f2e:	2004      	movs	r0, #4
 8000f30:	f002 f9c6 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Up_IT_Pin);
 8000f3c:	2008      	movs	r0, #8
 8000f3e:	f002 f9bf 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <USART1_IRQHandler+0x10>)
 8000f4e:	f003 fbfb 	bl	8004748 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200001ac 	.word	0x200001ac

08000f5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EncoderSW_Pin);
 8000f60:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f64:	f002 f9ac 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Down_IT_Pin);
 8000f68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000f6c:	f002 f9a8 	bl	80032c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000f78:	4802      	ldr	r0, [pc, #8]	; (8000f84 <DMA2_Stream2_IRQHandler+0x10>)
 8000f7a:	f001 fd71 	bl	8002a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000104 	.word	0x20000104

08000f88 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <DMA2_Stream7_IRQHandler+0x10>)
 8000f8e:	f001 fd67 	bl	8002a60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200001f0 	.word	0x200001f0

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f00a fe9e 	bl	800bd0c <__errno>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20020000 	.word	0x20020000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	200002c0 	.word	0x200002c0
 8001004:	20004f30 	.word	0x20004f30

08001008 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SystemInit+0x20>)
 800100e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <SystemInit+0x20>)
 8001014:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001018:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001064 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001032:	490e      	ldr	r1, [pc, #56]	; (800106c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001034:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001036:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001038:	e002      	b.n	8001040 <LoopCopyDataInit>

0800103a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800103c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800103e:	3304      	adds	r3, #4

08001040 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001040:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001042:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001044:	d3f9      	bcc.n	800103a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001048:	4c0b      	ldr	r4, [pc, #44]	; (8001078 <LoopFillZerobss+0x26>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800104c:	e001      	b.n	8001052 <LoopFillZerobss>

0800104e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800104e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001050:	3204      	adds	r2, #4

08001052 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001052:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001054:	d3fb      	bcc.n	800104e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001056:	f7ff ffd7 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800105a:	f00a fe5d 	bl	800bd18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fa91 	bl	8000584 <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001070:	0802bc14 	.word	0x0802bc14
  ldr r2, =_sbss
 8001074:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001078:	20004f2c 	.word	0x20004f2c

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <setSPI_Size+0x84>)
 800108c:	f993 3000 	ldrsb.w	r3, [r3]
 8001090:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001094:	429a      	cmp	r2, r3
 8001096:	d02e      	beq.n	80010f6 <setSPI_Size+0x76>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 8001098:	4b1b      	ldr	r3, [pc, #108]	; (8001108 <setSPI_Size+0x88>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <setSPI_Size+0x88>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010a6:	601a      	str	r2, [r3, #0]

    config.spi_sz=size;
 80010a8:	4a16      	ldr	r2, [pc, #88]	; (8001104 <setSPI_Size+0x84>)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d10c      	bne.n	80010d0 <setSPI_Size+0x50>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 80010b6:	4b14      	ldr	r3, [pc, #80]	; (8001108 <setSPI_Size+0x88>)
 80010b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010bc:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 |= SPI_CR1_DFF;
 80010be:	4b12      	ldr	r3, [pc, #72]	; (8001108 <setSPI_Size+0x88>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681a      	ldr	r2, [r3, #0]
 80010c4:	4b10      	ldr	r3, [pc, #64]	; (8001108 <setSPI_Size+0x88>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	e00a      	b.n	80010e6 <setSPI_Size+0x66>
    }
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d0:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <setSPI_Size+0x88>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
      LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
 80010d6:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <setSPI_Size+0x88>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <setSPI_Size+0x88>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010e4:	601a      	str	r2, [r3, #0]
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <setSPI_Size+0x88>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <setSPI_Size+0x88>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010f4:	601a      	str	r2, [r3, #0]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000004 	.word	0x20000004
 8001108:	200000ac 	.word	0x200000ac

0800110c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	4613      	mov	r3, r2
 800111a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800111c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ffad 	bl	8001080 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <setDMAMemMode+0x120>)
 8001128:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800112c:	461a      	mov	r2, r3
 800112e:	79bb      	ldrb	r3, [r7, #6]
 8001130:	429a      	cmp	r2, r3
 8001132:	d106      	bne.n	8001142 <setDMAMemMode+0x36>
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <setDMAMemMode+0x120>)
 8001136:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800113a:	461a      	mov	r2, r3
 800113c:	79fb      	ldrb	r3, [r7, #7]
 800113e:	429a      	cmp	r2, r3
 8001140:	d06f      	beq.n	8001222 <setDMAMemMode+0x116>
    config.dma_sz =size;
 8001142:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001146:	4b39      	ldr	r3, [pc, #228]	; (800122c <setDMAMemMode+0x120>)
 8001148:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800114a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800114e:	4b37      	ldr	r3, [pc, #220]	; (800122c <setDMAMemMode+0x120>)
 8001150:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);
 8001152:	4b37      	ldr	r3, [pc, #220]	; (8001230 <setDMAMemMode+0x124>)
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b35      	ldr	r3, [pc, #212]	; (8001230 <setDMAMemMode+0x124>)
 800115c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f022 0201 	bic.w	r2, r2, #1
 8001164:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
 8001166:	bf00      	nop
 8001168:	4b31      	ldr	r3, [pc, #196]	; (8001230 <setDMAMemMode+0x124>)
 800116a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f7      	bne.n	8001168 <setDMAMemMode+0x5c>
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
#endif
    if(memInc==mem_increase){
 8001178:	79fb      	ldrb	r3, [r7, #7]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d10f      	bne.n	800119e <setDMAMemMode+0x92>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <setDMAMemMode+0x124>)
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001186:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
 8001188:	4b29      	ldr	r3, [pc, #164]	; (8001230 <setDMAMemMode+0x124>)
 800118a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <setDMAMemMode+0x124>)
 8001192:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800119a:	601a      	str	r2, [r3, #0]
 800119c:	e00d      	b.n	80011ba <setDMAMemMode+0xae>
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <setDMAMemMode+0x124>)
 80011a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <setDMAMemMode+0x124>)
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <setDMAMemMode+0x124>)
 80011b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b8:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
#endif
    }

    if(size==mode_16bit){
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d116      	bne.n	80011ee <setDMAMemMode+0xe2>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <setDMAMemMode+0x124>)
 80011c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011c8:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <setDMAMemMode+0x124>)
 80011cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d2:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <setDMAMemMode+0x124>)
 80011d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80011e0:	4b13      	ldr	r3, [pc, #76]	; (8001230 <setDMAMemMode+0x124>)
 80011e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e011      	b.n	8001212 <setDMAMemMode+0x106>
                                                   (1<<DMA_CCR_PSIZE_Pos | 1<<DMA_CCR_MSIZE_Pos);
#endif

    }
    else{
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <setDMAMemMode+0x124>)
 80011f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <setDMAMemMode+0x124>)
 80011f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011fa:	2200      	movs	r2, #0
 80011fc:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk));
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <setDMAMemMode+0x124>)
 8001200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <setDMAMemMode+0x124>)
 8001208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8001210:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
    __HAL_SPI_ENABLE(&LCD_HANDLE);
 8001212:	4b07      	ldr	r3, [pc, #28]	; (8001230 <setDMAMemMode+0x124>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <setDMAMemMode+0x124>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001220:	601a      	str	r2, [r3, #0]
  }
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000004 	.word	0x20000004
 8001230:	200000ac 	.word	0x200000ac

08001234 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff ff1d 	bl	8001080 <setSPI_Size>
  LCD_PIN(LCD_DC,RESET);
 8001246:	4b12      	ldr	r3, [pc, #72]	; (8001290 <LCD_WriteCommand+0x5c>)
 8001248:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800124c:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <LCD_WriteCommand+0x60>)
 8001250:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001254:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 8001256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800125a:	2201      	movs	r2, #1
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <LCD_WriteCommand+0x64>)
 8001260:	f002 fd33 	bl	8003cca <HAL_SPI_Transmit>
  if(argc){
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <LCD_WriteCommand+0x4e>
    LCD_PIN(LCD_DC,SET);
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <LCD_WriteCommand+0x5c>)
 800126c:	2210      	movs	r2, #16
 800126e:	619a      	str	r2, [r3, #24]
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	1c59      	adds	r1, r3, #1
 8001274:	78fb      	ldrb	r3, [r7, #3]
 8001276:	b29a      	uxth	r2, r3
 8001278:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <LCD_WriteCommand+0x64>)
 800127e:	f002 fd24 	bl	8003cca <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001282:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LCD_WriteCommand+0x60>)
 8001284:	2201      	movs	r2, #1
 8001286:	619a      	str	r2, [r3, #24]
#endif
}
 8001288:	bf00      	nop
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	200000ac 	.word	0x200000ac

0800129c <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  LCD_PIN(LCD_DC,SET);
 80012a6:	4b2e      	ldr	r3, [pc, #184]	; (8001360 <LCD_WriteData+0xc4>)
 80012a8:	2210      	movs	r2, #16
 80012aa:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 80012ac:	4b2d      	ldr	r3, [pc, #180]	; (8001364 <LCD_WriteData+0xc8>)
 80012ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012b2:	619a      	str	r2, [r3, #24]
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80012b4:	e049      	b.n	800134a <LCD_WriteData+0xae>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012bc:	4293      	cmp	r3, r2
 80012be:	bf28      	it	cs
 80012c0:	4613      	movcs	r3, r2
 80012c2:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_min_Sz){
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d924      	bls.n	8001314 <LCD_WriteData+0x78>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 80012ca:	89fb      	ldrh	r3, [r7, #14]
 80012cc:	461a      	mov	r2, r3
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4825      	ldr	r0, [pc, #148]	; (8001368 <LCD_WriteData+0xcc>)
 80012d2:	f002 fe37 	bl	8003f44 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!= HAL_DMA_STATE_READY);
 80012d6:	bf00      	nop
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <LCD_WriteData+0xcc>)
 80012da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fd49 	bl	8002d74 <HAL_DMA_GetState>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d1f7      	bne.n	80012d8 <LCD_WriteData+0x3c>
      if(config.dma_mem_inc==mem_increase){
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <LCD_WriteData+0xd0>)
 80012ea:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d127      	bne.n	8001342 <LCD_WriteData+0xa6>
        if(config.dma_sz==mode_16bit)
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <LCD_WriteData+0xd0>)
 80012f4:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d104      	bne.n	8001306 <LCD_WriteData+0x6a>
          buff += chunk_size;
 80012fc:	89fb      	ldrh	r3, [r7, #14]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	e01d      	b.n	8001342 <LCD_WriteData+0xa6>
        else
          buff += chunk_size*2;
 8001306:	89fb      	ldrh	r3, [r7, #14]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	e016      	b.n	8001342 <LCD_WriteData+0xa6>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 8001314:	89fa      	ldrh	r2, [r7, #14]
 8001316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <LCD_WriteData+0xcc>)
 800131e:	f002 fcd4 	bl	8003cca <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <LCD_WriteData+0xd0>)
 8001324:	f993 3000 	ldrsb.w	r3, [r3]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d104      	bne.n	8001336 <LCD_WriteData+0x9a>
        buff += chunk_size;
 800132c:	89fb      	ldrh	r3, [r7, #14]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	e005      	b.n	8001342 <LCD_WriteData+0xa6>
      else
        buff += chunk_size*2;
 8001336:	89fb      	ldrh	r3, [r7, #14]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	461a      	mov	r2, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	607b      	str	r3, [r7, #4]

    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8001342:	89fb      	ldrh	r3, [r7, #14]
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d1b2      	bne.n	80012b6 <LCD_WriteData+0x1a>
  }
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001350:	4b04      	ldr	r3, [pc, #16]	; (8001364 <LCD_WriteData+0xc8>)
 8001352:	2201      	movs	r2, #1
 8001354:	619a      	str	r2, [r3, #24]
#endif
}
 8001356:	bf00      	nop
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40020000 	.word	0x40020000
 8001364:	40020400 	.word	0x40020400
 8001368:	200000ac 	.word	0x200000ac
 800136c:	20000004 	.word	0x20000004

08001370 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b08b      	sub	sp, #44	; 0x2c
 8001374:	af00      	add	r7, sp, #0
 8001376:	4604      	mov	r4, r0
 8001378:	4608      	mov	r0, r1
 800137a:	4611      	mov	r1, r2
 800137c:	461a      	mov	r2, r3
 800137e:	4623      	mov	r3, r4
 8001380:	80fb      	strh	r3, [r7, #6]
 8001382:	4603      	mov	r3, r0
 8001384:	80bb      	strh	r3, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	807b      	strh	r3, [r7, #2]
 800138a:	4613      	mov	r3, r2
 800138c:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 8001396:	88bb      	ldrh	r3, [r7, #4]
 8001398:	847b      	strh	r3, [r7, #34]	; 0x22
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 800139e:	232a      	movs	r3, #42	; 0x2a
 80013a0:	763b      	strb	r3, [r7, #24]
 80013a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80013a6:	121b      	asrs	r3, r3, #8
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	767b      	strb	r3, [r7, #25]
 80013ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	76bb      	strb	r3, [r7, #26]
 80013b4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80013b8:	121b      	asrs	r3, r3, #8
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	76fb      	strb	r3, [r7, #27]
 80013c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80013c6:	f107 0318 	add.w	r3, r7, #24
 80013ca:	2104      	movs	r1, #4
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff31 	bl	8001234 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 80013d2:	232b      	movs	r3, #43	; 0x2b
 80013d4:	743b      	strb	r3, [r7, #16]
 80013d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80013da:	121b      	asrs	r3, r3, #8
 80013dc:	b21b      	sxth	r3, r3
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	747b      	strb	r3, [r7, #17]
 80013e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	74bb      	strb	r3, [r7, #18]
 80013e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013ec:	121b      	asrs	r3, r3, #8
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	74fb      	strb	r3, [r7, #19]
 80013f4:	8c3b      	ldrh	r3, [r7, #32]
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2104      	movs	r1, #4
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff17 	bl	8001234 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 8001406:	232c      	movs	r3, #44	; 0x2c
 8001408:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff0f 	bl	8001234 <LCD_WriteCommand>
  }
}
 8001416:	bf00      	nop
 8001418:	372c      	adds	r7, #44	; 0x2c
 800141a:	46bd      	mov	sp, r7
 800141c:	bd90      	pop	{r4, r7, pc}
	...

08001420 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	80fb      	strh	r3, [r7, #6]
 800142a:	460b      	mov	r3, r1
 800142c:	80bb      	strh	r3, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 8001432:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db30      	blt.n	800149c <LCD_DrawPixel+0x7c>
 800143a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800143e:	2bef      	cmp	r3, #239	; 0xef
 8001440:	dc2c      	bgt.n	800149c <LCD_DrawPixel+0x7c>
 8001442:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db28      	blt.n	800149c <LCD_DrawPixel+0x7c>
     (y < 0) || (y > LCD_HEIGHT-1))
 800144a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800144e:	2bef      	cmp	r3, #239	; 0xef
 8001450:	dc24      	bgt.n	800149c <LCD_DrawPixel+0x7c>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b29b      	uxth	r3, r3
 8001458:	b2db      	uxtb	r3, r3
 800145a:	733b      	strb	r3, [r7, #12]
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	b2db      	uxtb	r3, r3
 8001460:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 8001462:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001466:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800146a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800146e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001472:	f7ff ff7d 	bl	8001370 <LCD_SetAddressWindow>

  LCD_PIN(LCD_DC,SET);
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <LCD_DrawPixel+0x84>)
 8001478:	2210      	movs	r2, #16
 800147a:	619a      	str	r2, [r3, #24]
#ifdef LCD_CS
  LCD_PIN(LCD_CS,RESET);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <LCD_DrawPixel+0x88>)
 800147e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001482:	619a      	str	r2, [r3, #24]
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 8001484:	f107 010c 	add.w	r1, r7, #12
 8001488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148c:	2202      	movs	r2, #2
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <LCD_DrawPixel+0x8c>)
 8001490:	f002 fc1b 	bl	8003cca <HAL_SPI_Transmit>
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 8001494:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <LCD_DrawPixel+0x88>)
 8001496:	2201      	movs	r2, #1
 8001498:	619a      	str	r2, [r3, #24]
 800149a:	e000      	b.n	800149e <LCD_DrawPixel+0x7e>
    return;
 800149c:	bf00      	nop
#endif
}
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40020400 	.word	0x40020400
 80014ac:	200000ac 	.word	0x200000ac

080014b0 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0a4      	sub	sp, #144	; 0x90
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_min_Sz)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d905      	bls.n	80014ce <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 80014c2:	1cbb      	adds	r3, r7, #2
 80014c4:	6879      	ldr	r1, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fee8 	bl	800129c <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 80014cc:	e02f      	b.n	800152e <LCD_FillPixels+0x7e>
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80014d4:	e00c      	b.n	80014f0 <LCD_FillPixels+0x40>
      fill[t]=color;
 80014d6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3390      	adds	r3, #144	; 0x90
 80014e0:	443b      	add	r3, r7
 80014e2:	f823 2c84 	strh.w	r2, [r3, #-132]
    for(uint8_t t=0;t<(pixels<64 ? pixels : 64);t++){                                 // Fill the buffer with the color
 80014e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80014ea:	3301      	adds	r3, #1
 80014ec:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80014f0:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b40      	cmp	r3, #64	; 0x40
 80014f8:	bf28      	it	cs
 80014fa:	2340      	movcs	r3, #64	; 0x40
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d3ea      	bcc.n	80014d6 <LCD_FillPixels+0x26>
    while(pixels){                                                                    // Send 64 pixel blocks
 8001500:	e012      	b.n	8001528 <LCD_FillPixels+0x78>
      uint8_t sz = (pixels<64 ? pixels : 64);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b40      	cmp	r3, #64	; 0x40
 8001506:	bf28      	it	cs
 8001508:	2340      	movcs	r3, #64	; 0x40
 800150a:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
      LCD_WriteData((uint8_t*)fill, sz);
 800150e:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 8001512:	f107 030c 	add.w	r3, r7, #12
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f7ff febf 	bl	800129c <LCD_WriteData>
      pixels-=sz;
 800151e:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                    // Send 64 pixel blocks
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1e9      	bne.n	8001502 <LCD_FillPixels+0x52>
}
 800152e:	bf00      	nop
 8001530:	3790      	adds	r7, #144	; 0x90
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 8001538:	b590      	push	{r4, r7, lr}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	4604      	mov	r4, r0
 8001540:	4608      	mov	r0, r1
 8001542:	4611      	mov	r1, r2
 8001544:	461a      	mov	r2, r3
 8001546:	4623      	mov	r3, r4
 8001548:	80fb      	strh	r3, [r7, #6]
 800154a:	4603      	mov	r3, r0
 800154c:	80bb      	strh	r3, [r7, #4]
 800154e:	460b      	mov	r3, r1
 8001550:	807b      	strh	r3, [r7, #2]
 8001552:	4613      	mov	r3, r2
 8001554:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800155e:	d105      	bne.n	800156c <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8001560:	2100      	movs	r1, #0
 8001562:	2001      	movs	r0, #1
 8001564:	f7ff fdd2 	bl	800110c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 8001568:	2300      	movs	r3, #0
 800156a:	e011      	b.n	8001590 <LCD_FillArea+0x58>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 800156c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001570:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001574:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001578:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800157c:	f7ff fef8 	bl	8001370 <LCD_SetAddressWindow>
#ifdef USE_DMA
  setDMAMemMode(mem_fixed, mode_16bit); //setDMAMemMode(mem_fixed, mode_16bit);
 8001580:	2101      	movs	r1, #1
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fdc2 	bl	800110c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  LCD_PIN(LCD_DC,SET);
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <LCD_FillArea+0x60>)
 800158a:	2210      	movs	r2, #16
 800158c:	619a      	str	r2, [r3, #24]
  return LCD_FillPixels;
 800158e:	4b03      	ldr	r3, [pc, #12]	; (800159c <LCD_FillArea+0x64>)
}
 8001590:	4618      	mov	r0, r3
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	bd90      	pop	{r4, r7, pc}
 8001598:	40020000 	.word	0x40020000
 800159c:	080014b1 	.word	0x080014b1

080015a0 <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4604      	mov	r4, r0
 80015a8:	4608      	mov	r0, r1
 80015aa:	4611      	mov	r1, r2
 80015ac:	461a      	mov	r2, r3
 80015ae:	4623      	mov	r3, r4
 80015b0:	80fb      	strh	r3, [r7, #6]
 80015b2:	4603      	mov	r3, r0
 80015b4:	80bb      	strh	r3, [r7, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	807b      	strh	r3, [r7, #2]
 80015ba:	4613      	mov	r3, r2
 80015bc:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80015be:	887a      	ldrh	r2, [r7, #2]
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	4619      	mov	r1, r3
 80015c8:	883a      	ldrh	r2, [r7, #0]
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	fb01 f303 	mul.w	r3, r1, r3
 80015d4:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 80015d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80015da:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80015de:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80015e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80015e6:	f7ff fec3 	bl	8001370 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80015ea:	2101      	movs	r1, #1
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fd8d 	bl	800110c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 80015f2:	8c3b      	ldrh	r3, [r7, #32]
 80015f4:	4619      	mov	r1, r3
 80015f6:	68f8      	ldr	r0, [r7, #12]
 80015f8:	f7ff ff5a 	bl	80014b0 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit); //setDMAMemMode(mem_increase, mode_16bit);
 80015fc:	2100      	movs	r1, #0
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fd84 	bl	800110c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bd90      	pop	{r4, r7, pc}

0800160e <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800160e:	b590      	push	{r4, r7, lr}
 8001610:	b085      	sub	sp, #20
 8001612:	af00      	add	r7, sp, #0
 8001614:	4603      	mov	r3, r0
 8001616:	603a      	str	r2, [r7, #0]
 8001618:	80fb      	strh	r3, [r7, #6]
 800161a:	460b      	mov	r3, r1
 800161c:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	889b      	ldrh	r3, [r3, #4]
 8001622:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	88db      	ldrh	r3, [r3, #6]
 8001628:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2bef      	cmp	r3, #239	; 0xef
 800162e:	d837      	bhi.n	80016a0 <LCD_DrawImage+0x92>
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	2bef      	cmp	r3, #239	; 0xef
 8001634:	d834      	bhi.n	80016a0 <LCD_DrawImage+0x92>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8001636:	88fa      	ldrh	r2, [r7, #6]
 8001638:	89fb      	ldrh	r3, [r7, #14]
 800163a:	4413      	add	r3, r2
 800163c:	2bf0      	cmp	r3, #240	; 0xf0
 800163e:	dc31      	bgt.n	80016a4 <LCD_DrawImage+0x96>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 8001640:	88ba      	ldrh	r2, [r7, #4]
 8001642:	89bb      	ldrh	r3, [r7, #12]
 8001644:	4413      	add	r3, r2
 8001646:	2bf0      	cmp	r3, #240	; 0xf0
 8001648:	dc2e      	bgt.n	80016a8 <LCD_DrawImage+0x9a>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	7a1b      	ldrb	r3, [r3, #8]
 800164e:	2b10      	cmp	r3, #16
 8001650:	d12c      	bne.n	80016ac <LCD_DrawImage+0x9e>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8001652:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001656:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800165a:	88fa      	ldrh	r2, [r7, #6]
 800165c:	89fb      	ldrh	r3, [r7, #14]
 800165e:	4413      	add	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	3b01      	subs	r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	b21c      	sxth	r4, r3
 8001668:	88ba      	ldrh	r2, [r7, #4]
 800166a:	89bb      	ldrh	r3, [r7, #12]
 800166c:	4413      	add	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	3b01      	subs	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	b21b      	sxth	r3, r3
 8001676:	4622      	mov	r2, r4
 8001678:	f7ff fe7a 	bl	8001370 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);  //setDMAMemMode(mem_increase, mode_16bit);                                                          // Set SPI and DMA to 16 bit, enable memory increase
 800167c:	2101      	movs	r1, #1
 800167e:	2001      	movs	r0, #1
 8001680:	f7ff fd44 	bl	800110c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6818      	ldr	r0, [r3, #0]
 8001688:	89fb      	ldrh	r3, [r7, #14]
 800168a:	89ba      	ldrh	r2, [r7, #12]
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	4619      	mov	r1, r3
 8001692:	f7ff fe03 	bl	800129c <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 8001696:	2100      	movs	r1, #0
 8001698:	2001      	movs	r0, #1
 800169a:	f7ff fd37 	bl	800110c <setDMAMemMode>
 800169e:	e006      	b.n	80016ae <LCD_DrawImage+0xa0>
    return;
 80016a0:	bf00      	nop
 80016a2:	e004      	b.n	80016ae <LCD_DrawImage+0xa0>
    return;
 80016a4:	bf00      	nop
 80016a6:	e002      	b.n	80016ae <LCD_DrawImage+0xa0>
    return;
 80016a8:	bf00      	nop
 80016aa:	e000      	b.n	80016ae <LCD_DrawImage+0xa0>
    return;
 80016ac:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}

080016b4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af02      	add	r7, sp, #8
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4623      	mov	r3, r4
 80016c4:	80fb      	strh	r3, [r7, #6]
 80016c6:	4603      	mov	r3, r0
 80016c8:	80bb      	strh	r3, [r7, #4]
 80016ca:	460b      	mov	r3, r1
 80016cc:	807b      	strh	r3, [r7, #2]
 80016ce:	4613      	mov	r3, r2
 80016d0:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	887b      	ldrh	r3, [r7, #2]
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d10a      	bne.n	80016f0 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 80016da:	88ba      	ldrh	r2, [r7, #4]
 80016dc:	883b      	ldrh	r3, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d918      	bls.n	8001714 <LCD_DrawLine+0x60>
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	81bb      	strh	r3, [r7, #12]
 80016e6:	883b      	ldrh	r3, [r7, #0]
 80016e8:	80bb      	strh	r3, [r7, #4]
 80016ea:	89bb      	ldrh	r3, [r7, #12]
 80016ec:	803b      	strh	r3, [r7, #0]
 80016ee:	e011      	b.n	8001714 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 80016f0:	88ba      	ldrh	r2, [r7, #4]
 80016f2:	883b      	ldrh	r3, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d10a      	bne.n	800170e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 80016f8:	88fa      	ldrh	r2, [r7, #6]
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d909      	bls.n	8001714 <LCD_DrawLine+0x60>
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	81fb      	strh	r3, [r7, #14]
 8001704:	887b      	ldrh	r3, [r7, #2]
 8001706:	80fb      	strh	r3, [r7, #6]
 8001708:	89fb      	ldrh	r3, [r7, #14]
 800170a:	807b      	strh	r3, [r7, #2]
 800170c:	e002      	b.n	8001714 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001712:	e009      	b.n	8001728 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8001714:	883c      	ldrh	r4, [r7, #0]
 8001716:	887a      	ldrh	r2, [r7, #2]
 8001718:	88b9      	ldrh	r1, [r7, #4]
 800171a:	88f8      	ldrh	r0, [r7, #6]
 800171c:	8c3b      	ldrh	r3, [r7, #32]
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	4623      	mov	r3, r4
 8001722:	f7ff ff3d 	bl	80015a0 <LCD_Fill>
  return UG_RESULT_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bd90      	pop	{r4, r7, pc}

08001730 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4603      	mov	r3, r0
 800173c:	81fb      	strh	r3, [r7, #14]
 800173e:	460b      	mov	r3, r1
 8001740:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f003 ff50 	bl	80055e8 <UG_FontSelect>
  UG_SetForecolor(color);
 8001748:	8b3b      	ldrh	r3, [r7, #24]
 800174a:	4618      	mov	r0, r3
 800174c:	f004 fd94 	bl	8006278 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8001750:	8bbb      	ldrh	r3, [r7, #28]
 8001752:	4618      	mov	r0, r3
 8001754:	f004 fda2 	bl	800629c <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8001758:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800175c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001760:	68ba      	ldr	r2, [r7, #8]
 8001762:	4618      	mov	r0, r3
 8001764:	f004 fd00 	bl	8006168 <UG_PutString>
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <LCD_setPower+0x14>
 8001780:	2329      	movs	r3, #41	; 0x29
 8001782:	e000      	b.n	8001786 <LCD_setPower+0x16>
 8001784:	2328      	movs	r3, #40	; 0x28
 8001786:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fd50 	bl	8001234 <LCD_WriteCommand>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <LCD_Update>:

static void LCD_Update(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80017a0:	2100      	movs	r1, #0
 80017a2:	2001      	movs	r0, #1
 80017a4:	f7ff fcb2 	bl	800110c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  LCD_PIN(LCD_CS,SET);
 80017b2:	4b28      	ldr	r3, [pc, #160]	; (8001854 <LCD_init+0xa8>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	619a      	str	r2, [r3, #24]
#endif
#ifdef LCD_RST
  LCD_PIN(LCD_RST,RESET);
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <LCD_init+0xac>)
 80017ba:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80017be:	619a      	str	r2, [r3, #24]
  HAL_Delay(25);
 80017c0:	2019      	movs	r0, #25
 80017c2:	f000 fe43 	bl	800244c <HAL_Delay>
  LCD_PIN(LCD_RST,SET);
 80017c6:	4b24      	ldr	r3, [pc, #144]	; (8001858 <LCD_init+0xac>)
 80017c8:	2240      	movs	r2, #64	; 0x40
 80017ca:	619a      	str	r2, [r3, #24]
  HAL_Delay(200);
 80017cc:	20c8      	movs	r0, #200	; 0xc8
 80017ce:	f000 fe3d 	bl	800244c <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 80017d2:	4922      	ldr	r1, [pc, #136]	; (800185c <LCD_init+0xb0>)
 80017d4:	4822      	ldr	r0, [pc, #136]	; (8001860 <LCD_init+0xb4>)
 80017d6:	f003 fe95 	bl	8005504 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 80017da:	4922      	ldr	r1, [pc, #136]	; (8001864 <LCD_init+0xb8>)
 80017dc:	2000      	movs	r0, #0
 80017de:	f005 fd1d 	bl	800721c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 80017e2:	4921      	ldr	r1, [pc, #132]	; (8001868 <LCD_init+0xbc>)
 80017e4:	2001      	movs	r0, #1
 80017e6:	f005 fd19 	bl	800721c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 80017ea:	4920      	ldr	r1, [pc, #128]	; (800186c <LCD_init+0xc0>)
 80017ec:	2002      	movs	r0, #2
 80017ee:	f005 fd15 	bl	800721c <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 80017f2:	491f      	ldr	r1, [pc, #124]	; (8001870 <LCD_init+0xc4>)
 80017f4:	2003      	movs	r0, #3
 80017f6:	f005 fd11 	bl	800721c <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f004 fd7c 	bl	80062f8 <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8001800:	2000      	movs	r0, #0
 8001802:	f004 fd8d 	bl	8006320 <UG_FontSetVSpace>

  //LCD_SetRotation(LCD_ROTATION_CMD);
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001806:	2300      	movs	r3, #0
 8001808:	80fb      	strh	r3, [r7, #6]
 800180a:	e013      	b.n	8001834 <LCD_init+0x88>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 800180c:	88fb      	ldrh	r3, [r7, #6]
 800180e:	3301      	adds	r3, #1
 8001810:	4a18      	ldr	r2, [pc, #96]	; (8001874 <LCD_init+0xc8>)
 8001812:	441a      	add	r2, r3
 8001814:	88fb      	ldrh	r3, [r7, #6]
 8001816:	4917      	ldr	r1, [pc, #92]	; (8001874 <LCD_init+0xc8>)
 8001818:	5ccb      	ldrb	r3, [r1, r3]
 800181a:	4619      	mov	r1, r3
 800181c:	4610      	mov	r0, r2
 800181e:	f7ff fd09 	bl	8001234 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	4a13      	ldr	r2, [pc, #76]	; (8001874 <LCD_init+0xc8>)
 8001826:	5cd3      	ldrb	r3, [r2, r3]
 8001828:	b29a      	uxth	r2, r3
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	4413      	add	r3, r2
 800182e:	b29b      	uxth	r3, r3
 8001830:	3302      	adds	r3, #2
 8001832:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8001834:	88fb      	ldrh	r3, [r7, #6]
 8001836:	2b4b      	cmp	r3, #75	; 0x4b
 8001838:	d9e8      	bls.n	800180c <LCD_init+0x60>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 800183a:	2000      	movs	r0, #0
 800183c:	f003 fee4 	bl	8005608 <UG_FillScreen>
  LCD_setPower(ENABLE);
 8001840:	2001      	movs	r0, #1
 8001842:	f7ff ff95 	bl	8001770 <LCD_setPower>
  UG_Update();
 8001846:	f005 fd0b 	bl	8007260 <UG_Update>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40020400 	.word	0x40020400
 8001858:	40020000 	.word	0x40020000
 800185c:	20000008 	.word	0x20000008
 8001860:	200002e4 	.word	0x200002e4
 8001864:	080016b5 	.word	0x080016b5
 8001868:	080015a1 	.word	0x080015a1
 800186c:	08001539 	.word	0x08001539
 8001870:	0800160f 	.word	0x0800160f
 8001874:	0800c944 	.word	0x0800c944

08001878 <clearTime>:


#define DEFAULT_FONT FONT_6X8

static uint32_t draw_time=0;
static void clearTime(void){
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  draw_time=HAL_GetTick();
 800187c:	f000 fdda 	bl	8002434 <HAL_GetTick>
 8001880:	4603      	mov	r3, r0
 8001882:	4a02      	ldr	r2, [pc, #8]	; (800188c <clearTime+0x14>)
 8001884:	6013      	str	r3, [r2, #0]
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20000340 	.word	0x20000340

08001890 <printTime>:
static void printTime(void){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
  char str[8];
  uint8_t t = UG_FontGetTransparency();
 8001896:	f004 fd69 	bl	800636c <UG_FontGetTransparency>
 800189a:	4603      	mov	r3, r0
 800189c:	73fb      	strb	r3, [r7, #15]
  sprintf(str,"%lums",HAL_GetTick()-draw_time);
 800189e:	f000 fdc9 	bl	8002434 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <printTime+0x60>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	1ad2      	subs	r2, r2, r3
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4911      	ldr	r1, [pc, #68]	; (80018f4 <printTime+0x64>)
 80018ae:	4618      	mov	r0, r3
 80018b0:	f00a fbe6 	bl	800c080 <siprintf>
  UG_FontSelect(DEFAULT_FONT);
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <printTime+0x68>)
 80018b6:	f003 fe97 	bl	80055e8 <UG_FontSelect>
  UG_SetForecolor(C_YELLOW);
 80018ba:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80018be:	f004 fcdb 	bl	8006278 <UG_SetForecolor>
  UG_SetBackcolor(C_BLACK);
 80018c2:	2000      	movs	r0, #0
 80018c4:	f004 fcea 	bl	800629c <UG_SetBackcolor>
  UG_FontSetTransparency(0);
 80018c8:	2000      	movs	r0, #0
 80018ca:	f004 fd3d 	bl	8006348 <UG_FontSetTransparency>
  UG_PutString(10, 15, str);
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	461a      	mov	r2, r3
 80018d2:	210f      	movs	r1, #15
 80018d4:	200a      	movs	r0, #10
 80018d6:	f004 fc47 	bl	8006168 <UG_PutString>
  UG_FontSetTransparency(t);
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	4618      	mov	r0, r3
 80018de:	f004 fd33 	bl	8006348 <UG_FontSetTransparency>
  UG_Update();
 80018e2:	f005 fcbd 	bl	8007260 <UG_Update>
}
 80018e6:	bf00      	nop
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000340 	.word	0x20000340
 80018f4:	0800c7a0 	.word	0x0800c7a0
 80018f8:	0801f28c 	.word	0x0801f28c

080018fc <LCD_Test>:
static UG_BUTTON button_1;
static UG_TEXTBOX textbox_1;
static UG_OBJECT obj_buff_wnd_1[MAX_OBJECTS];
static UG_PROGRESS pgb;
void LCD_Test(void)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b091      	sub	sp, #68	; 0x44
 8001900:	af04      	add	r7, sp, #16

  int16_t x=40,y=40,rad=20,count=0;
 8001902:	2328      	movs	r3, #40	; 0x28
 8001904:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001906:	2328      	movs	r3, #40	; 0x28
 8001908:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800190a:	2314      	movs	r3, #20
 800190c:	827b      	strh	r3, [r7, #18]
 800190e:	2300      	movs	r3, #0
 8001910:	857b      	strh	r3, [r7, #42]	; 0x2a
  int8_t xadd=2,yadd=2,dstep=2;
 8001912:	2302      	movs	r3, #2
 8001914:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001918:	2302      	movs	r3, #2
 800191a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800191e:	2302      	movs	r3, #2
 8001920:	747b      	strb	r3, [r7, #17]
  uint8_t r=0,g=0,b=0, t;
 8001922:	2300      	movs	r3, #0
 8001924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001928:	2300      	movs	r3, #0
 800192a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800192e:	2300      	movs	r3, #0
 8001930:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  uint32_t start, show;

  UG_FontSetTransparency(1);
 8001934:	2001      	movs	r0, #1
 8001936:	f004 fd07 	bl	8006348 <UG_FontSetTransparency>

  UG_FillScreen(C_BLACK);
 800193a:	2000      	movs	r0, #0
 800193c:	f003 fe64 	bl	8005608 <UG_FillScreen>

  LCD_PutStr(50, 56, "STARTING TEST", DEFAULT_FONT, C_GREEN, C_BLACK);
 8001940:	2300      	movs	r3, #0
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	4bc0      	ldr	r3, [pc, #768]	; (8001c4c <LCD_Test+0x350>)
 800194c:	4ac0      	ldr	r2, [pc, #768]	; (8001c50 <LCD_Test+0x354>)
 800194e:	2138      	movs	r1, #56	; 0x38
 8001950:	2032      	movs	r0, #50	; 0x32
 8001952:	f7ff feed 	bl	8001730 <LCD_PutStr>
  HAL_Delay(500);
 8001956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800195a:	f000 fd77 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_BLACK);
 800195e:	2000      	movs	r0, #0
 8001960:	f003 fe52 	bl	8005608 <UG_FillScreen>
  show=start=HAL_GetTick();
 8001964:	f000 fd66 	bl	8002434 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	623b      	str	r3, [r7, #32]
  t = UG_FontGetTransparency();
 800196e:	f004 fcfd 	bl	800636c <UG_FontGetTransparency>
 8001972:	4603      	mov	r3, r0
 8001974:	72fb      	strb	r3, [r7, #11]
  while(HAL_GetTick()-start<4000){
 8001976:	e0a8      	b.n	8001aca <LCD_Test+0x1ce>
    UG_FillFrame(x-rad, y-rad, x+rad, y+rad, C_BLACK);
 8001978:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800197a:	8a7b      	ldrh	r3, [r7, #18]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	b218      	sxth	r0, r3
 8001982:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001984:	8a7b      	ldrh	r3, [r7, #18]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	b29b      	uxth	r3, r3
 800198a:	b219      	sxth	r1, r3
 800198c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800198e:	8a7b      	ldrh	r3, [r7, #18]
 8001990:	4413      	add	r3, r2
 8001992:	b29b      	uxth	r3, r3
 8001994:	b21c      	sxth	r4, r3
 8001996:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001998:	8a7b      	ldrh	r3, [r7, #18]
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21b      	sxth	r3, r3
 80019a0:	2200      	movs	r2, #0
 80019a2:	9200      	str	r2, [sp, #0]
 80019a4:	4622      	mov	r2, r4
 80019a6:	f003 fe53 	bl	8005650 <UG_FillFrame>
    x+=xadd;
 80019aa:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019b2:	4413      	add	r3, r2
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    y+=yadd;
 80019b8:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80019bc:	b29a      	uxth	r2, r3
 80019be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80019c0:	4413      	add	r3, r2
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(x-rad<1){
 80019c6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80019ca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dc0a      	bgt.n	80019ea <LCD_Test+0xee>
      xadd=dstep;
 80019d4:	7c7b      	ldrb	r3, [r7, #17]
 80019d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 80019da:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 80019de:	b29a      	uxth	r2, r3
 80019e0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80019e2:	4413      	add	r3, r2
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80019e8:	e012      	b.n	8001a10 <LCD_Test+0x114>
    }
    else if(x+rad>(LCD_WIDTH-1)){
 80019ea:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80019ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019f2:	4413      	add	r3, r2
 80019f4:	2bef      	cmp	r3, #239	; 0xef
 80019f6:	dd0b      	ble.n	8001a10 <LCD_Test+0x114>
      xadd=-dstep;
 80019f8:	7c7b      	ldrb	r3, [r7, #17]
 80019fa:	425b      	negs	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
      x+=xadd;
 8001a02:	f997 3029 	ldrsb.w	r3, [r7, #41]	; 0x29
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001a0a:	4413      	add	r3, r2
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    }

    if(y-rad<1){
 8001a10:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001a14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	dc0a      	bgt.n	8001a34 <LCD_Test+0x138>
      yadd=dstep;
 8001a1e:	7c7b      	ldrb	r3, [r7, #17]
 8001a20:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001a24:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a2c:	4413      	add	r3, r2
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001a32:	e012      	b.n	8001a5a <LCD_Test+0x15e>
    }
    else if(y+rad>(LCD_HEIGHT-1)){
 8001a34:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001a38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	2bef      	cmp	r3, #239	; 0xef
 8001a40:	dd0b      	ble.n	8001a5a <LCD_Test+0x15e>
      yadd=-dstep;
 8001a42:	7c7b      	ldrb	r3, [r7, #17]
 8001a44:	425b      	negs	r3, r3
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
      y+=yadd;
 8001a4c:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001a50:	b29a      	uxth	r2, r3
 8001a52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001a54:	4413      	add	r3, r2
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }

    UG_FillCircle(x, y, rad, C_WHITE);
 8001a5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001a5e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8001a62:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8001a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a6a:	f004 f821 	bl	8005ab0 <UG_FillCircle>
    UG_FontSetTransparency(0);
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f004 fc6a 	bl	8006348 <UG_FontSetTransparency>
    LCD_PutStr(0, 0, str, DEFAULT_FONT, C_RED, C_BLACK);
 8001a74:	2300      	movs	r3, #0
 8001a76:	9301      	str	r3, [sp, #4]
 8001a78:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4b73      	ldr	r3, [pc, #460]	; (8001c4c <LCD_Test+0x350>)
 8001a80:	4a74      	ldr	r2, [pc, #464]	; (8001c54 <LCD_Test+0x358>)
 8001a82:	2100      	movs	r1, #0
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fe53 	bl	8001730 <LCD_PutStr>
    UG_FontSetTransparency(t);
 8001a8a:	7afb      	ldrb	r3, [r7, #11]
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f004 fc5b 	bl	8006348 <UG_FontSetTransparency>
    UG_Update();
 8001a92:	f005 fbe5 	bl	8007260 <UG_Update>
    count++;
 8001a96:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	857b      	strh	r3, [r7, #42]	; 0x2a
    if(HAL_GetTick()-show>999){
 8001aa2:	f000 fcc7 	bl	8002434 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ab0:	d30b      	bcc.n	8001aca <LCD_Test+0x1ce>
      show=HAL_GetTick();
 8001ab2:	f000 fcbf 	bl	8002434 <HAL_GetTick>
 8001ab6:	6238      	str	r0, [r7, #32]
      sprintf(str,"%dFPS",count);
 8001ab8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001abc:	461a      	mov	r2, r3
 8001abe:	4966      	ldr	r1, [pc, #408]	; (8001c58 <LCD_Test+0x35c>)
 8001ac0:	4864      	ldr	r0, [pc, #400]	; (8001c54 <LCD_Test+0x358>)
 8001ac2:	f00a fadd 	bl	800c080 <siprintf>
      count=0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	857b      	strh	r3, [r7, #42]	; 0x2a
  while(HAL_GetTick()-start<4000){
 8001aca:	f000 fcb3 	bl	8002434 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8001ad8:	f4ff af4e 	bcc.w	8001978 <LCD_Test+0x7c>
    }
  }

  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001adc:	2300      	movs	r3, #0
 8001ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ae2:	e019      	b.n	8001b18 <LCD_Test+0x21c>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae8:	02db      	lsls	r3, r3, #11
 8001aea:	b21a      	sxth	r2, r3
 8001aec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001af0:	015b      	lsls	r3, r3, #5
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	4313      	orrs	r3, r2
 8001af6:	b21a      	sxth	r2, r3
 8001af8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	4313      	orrs	r3, r2
 8001b00:	b21b      	sxth	r3, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fd7f 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001b0a:	f005 fba9 	bl	8007260 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, B=0
 8001b0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b12:	3301      	adds	r3, #1
 8001b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b1c:	2b1f      	cmp	r3, #31
 8001b1e:	d9e1      	bls.n	8001ae4 <LCD_Test+0x1e8>
  }
  r=31;
 8001b20:	231f      	movs	r3, #31
 8001b22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b2c:	e019      	b.n	8001b62 <LCD_Test+0x266>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001b2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b32:	02db      	lsls	r3, r3, #11
 8001b34:	b21a      	sxth	r2, r3
 8001b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b3a:	015b      	lsls	r3, r3, #5
 8001b3c:	b21b      	sxth	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b46:	b21b      	sxth	r3, r3
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	b21b      	sxth	r3, r3
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f003 fd5a 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001b54:	f005 fb84 	bl	8007260 <UG_Update>
  for(g=0; g<64;g+=2){                                      // R=31, G++, B=0
 8001b58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b66:	2b3f      	cmp	r3, #63	; 0x3f
 8001b68:	d9e1      	bls.n	8001b2e <LCD_Test+0x232>
  }
  g=63;
 8001b6a:	233f      	movs	r3, #63	; 0x3f
 8001b6c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001b70:	231c      	movs	r3, #28
 8001b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001b76:	e019      	b.n	8001bac <LCD_Test+0x2b0>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001b78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b7c:	02db      	lsls	r3, r3, #11
 8001b7e:	b21a      	sxth	r2, r3
 8001b80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b84:	015b      	lsls	r3, r3, #5
 8001b86:	b21b      	sxth	r3, r3
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	b21a      	sxth	r2, r3
 8001b8c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	b21b      	sxth	r3, r3
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f003 fd35 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001b9e:	f005 fb5f 	bl	8007260 <UG_Update>
  for(r=28; r;r--){                                         // R--, Gmax, B=0
 8001ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d1e1      	bne.n	8001b78 <LCD_Test+0x27c>
  }
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001bba:	e019      	b.n	8001bf0 <LCD_Test+0x2f4>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bc0:	02db      	lsls	r3, r3, #11
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bc8:	015b      	lsls	r3, r3, #5
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bd4:	b21b      	sxth	r3, r3
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fd13 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001be2:	f005 fb3d 	bl	8007260 <UG_Update>
  for(b=0; b<32;b++){                                       // R=0, Gmax, B++
 8001be6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bea:	3301      	adds	r3, #1
 8001bec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8001bf0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001bf4:	2b1f      	cmp	r3, #31
 8001bf6:	d9e1      	bls.n	8001bbc <LCD_Test+0x2c0>
  }
  b=31;
 8001bf8:	231f      	movs	r3, #31
 8001bfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001bfe:	2338      	movs	r3, #56	; 0x38
 8001c00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c04:	e019      	b.n	8001c3a <LCD_Test+0x33e>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c0a:	02db      	lsls	r3, r3, #11
 8001c0c:	b21a      	sxth	r2, r3
 8001c0e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c12:	015b      	lsls	r3, r3, #5
 8001c14:	b21b      	sxth	r3, r3
 8001c16:	4313      	orrs	r3, r2
 8001c18:	b21a      	sxth	r2, r3
 8001c1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21b      	sxth	r3, r3
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fcee 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001c2c:	f005 fb18 	bl	8007260 <UG_Update>
  for(g=56; g;g-=2){                                        // R=0, G--, Bmax
 8001c30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c34:	3b02      	subs	r3, #2
 8001c36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001c3a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1e1      	bne.n	8001c06 <LCD_Test+0x30a>
  }
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001c42:	2300      	movs	r3, #0
 8001c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c48:	e022      	b.n	8001c90 <LCD_Test+0x394>
 8001c4a:	bf00      	nop
 8001c4c:	0801f28c 	.word	0x0801f28c
 8001c50:	0800c7a8 	.word	0x0800c7a8
 8001c54:	200002c4 	.word	0x200002c4
 8001c58:	0800c7b8 	.word	0x0800c7b8
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c60:	02db      	lsls	r3, r3, #11
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001c68:	015b      	lsls	r3, r3, #5
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 fcc3 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001c82:	f005 faed 	bl	8007260 <UG_Update>
  for(r=0; r<32;r++){                                       // R++, G=0, Bmax
 8001c86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c94:	2b1f      	cmp	r3, #31
 8001c96:	d9e1      	bls.n	8001c5c <LCD_Test+0x360>
  }
  r=31;
 8001c98:	231f      	movs	r3, #31
 8001c9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001ca4:	e019      	b.n	8001cda <LCD_Test+0x3de>
    UG_FillScreen((uint16_t)r<<11 | g<<5 | b);
 8001ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001caa:	02db      	lsls	r3, r3, #11
 8001cac:	b21a      	sxth	r2, r3
 8001cae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	b21b      	sxth	r3, r3
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	b21a      	sxth	r2, r3
 8001cba:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	b21b      	sxth	r3, r3
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fc9e 	bl	8005608 <UG_FillScreen>
    UG_Update();
 8001ccc:	f005 fac8 	bl	8007260 <UG_Update>
  for(g=0; g<64;g+=2){                                      // Rmax, G++, Bmax
 8001cd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001cde:	2b3f      	cmp	r3, #63	; 0x3f
 8001ce0:	d9e1      	bls.n	8001ca6 <LCD_Test+0x3aa>
  }


  UG_FillScreen(C_RED);
 8001ce2:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001ce6:	f003 fc8f 	bl	8005608 <UG_FillScreen>
  UG_Update();
 8001cea:	f005 fab9 	bl	8007260 <UG_Update>
  HAL_Delay(500);
 8001cee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cf2:	f000 fbab 	bl	800244c <HAL_Delay>
  UG_FillScreen(C_GREEN);
 8001cf6:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001cfa:	f003 fc85 	bl	8005608 <UG_FillScreen>
  UG_Update();
 8001cfe:	f005 faaf 	bl	8007260 <UG_Update>
  HAL_Delay(500);
 8001d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d06:	f000 fba1 	bl	800244c <HAL_Delay>
  UG_FillScreen(C_BLUE);
 8001d0a:	201f      	movs	r0, #31
 8001d0c:	f003 fc7c 	bl	8005608 <UG_FillScreen>
  UG_Update();
 8001d10:	f005 faa6 	bl	8007260 <UG_Update>
  HAL_Delay(500);
 8001d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d18:	f000 fb98 	bl	800244c <HAL_Delay>
  UG_FillScreen(C_BLACK);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f003 fc73 	bl	8005608 <UG_FillScreen>
  UG_Update();
 8001d22:	f005 fa9d 	bl	8007260 <UG_Update>
  HAL_Delay(500);
 8001d26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d2a:	f000 fb8f 	bl	800244c <HAL_Delay>

  clearTime();
 8001d2e:	f7ff fda3 	bl	8001878 <clearTime>
  UG_FillScreen(C_WHITE);
 8001d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d36:	f003 fc67 	bl	8005608 <UG_FillScreen>
  printTime();
 8001d3a:	f7ff fda9 	bl	8001890 <printTime>
  LCD_PutStr(10, 5, "Fill", DEFAULT_FONT, C_RED, C_WHITE);
 8001d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4bd6      	ldr	r3, [pc, #856]	; (80020a4 <LCD_Test+0x7a8>)
 8001d4c:	4ad6      	ldr	r2, [pc, #856]	; (80020a8 <LCD_Test+0x7ac>)
 8001d4e:	2105      	movs	r1, #5
 8001d50:	200a      	movs	r0, #10
 8001d52:	f7ff fced 	bl	8001730 <LCD_PutStr>
  UG_Update();
 8001d56:	f005 fa83 	bl	8007260 <UG_Update>
  HAL_Delay(1000);
 8001d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d5e:	f000 fb75 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_BLACK);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f003 fc50 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Font", DEFAULT_FONT, C_RED, C_BLACK);
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001d70:	9300      	str	r3, [sp, #0]
 8001d72:	4bcc      	ldr	r3, [pc, #816]	; (80020a4 <LCD_Test+0x7a8>)
 8001d74:	4acd      	ldr	r2, [pc, #820]	; (80020ac <LCD_Test+0x7b0>)
 8001d76:	2105      	movs	r1, #5
 8001d78:	200a      	movs	r0, #10
 8001d7a:	f7ff fcd9 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001d7e:	f7ff fd7b 	bl	8001878 <clearTime>
  LCD_PutStr(10, 35, "Hello Steve!", DEFAULT_FONT, C_CYAN, C_BLACK);
 8001d82:	2300      	movs	r3, #0
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4bc5      	ldr	r3, [pc, #788]	; (80020a4 <LCD_Test+0x7a8>)
 8001d8e:	4ac8      	ldr	r2, [pc, #800]	; (80020b0 <LCD_Test+0x7b4>)
 8001d90:	2123      	movs	r1, #35	; 0x23
 8001d92:	200a      	movs	r0, #10
 8001d94:	f7ff fccc 	bl	8001730 <LCD_PutStr>
  LCD_PutStr(10, 55, "Hello Steve!", DEFAULT_FONT, C_ORANGE_RED, C_BLACK);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	f64f 2320 	movw	r3, #64032	; 0xfa20
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	4bc0      	ldr	r3, [pc, #768]	; (80020a4 <LCD_Test+0x7a8>)
 8001da4:	4ac2      	ldr	r2, [pc, #776]	; (80020b0 <LCD_Test+0x7b4>)
 8001da6:	2137      	movs	r1, #55	; 0x37
 8001da8:	200a      	movs	r0, #10
 8001daa:	f7ff fcc1 	bl	8001730 <LCD_PutStr>
  LCD_PutStr(10, 75, "Hello Steve!", DEFAULT_FONT, C_LIME_GREEN, C_BLACK);
 8001dae:	2300      	movs	r3, #0
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	f243 6366 	movw	r3, #13926	; 0x3666
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	4bba      	ldr	r3, [pc, #744]	; (80020a4 <LCD_Test+0x7a8>)
 8001dba:	4abd      	ldr	r2, [pc, #756]	; (80020b0 <LCD_Test+0x7b4>)
 8001dbc:	214b      	movs	r1, #75	; 0x4b
 8001dbe:	200a      	movs	r0, #10
 8001dc0:	f7ff fcb6 	bl	8001730 <LCD_PutStr>
  LCD_PutStr(10, 95, "Hello Steve!", DEFAULT_FONT, C_HOT_PINK, C_BLACK);
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	f64f 3356 	movw	r3, #64342	; 0xfb56
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	4bb5      	ldr	r3, [pc, #724]	; (80020a4 <LCD_Test+0x7a8>)
 8001dd0:	4ab7      	ldr	r2, [pc, #732]	; (80020b0 <LCD_Test+0x7b4>)
 8001dd2:	215f      	movs	r1, #95	; 0x5f
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f7ff fcab 	bl	8001730 <LCD_PutStr>
  UG_Update();
 8001dda:	f005 fa41 	bl	8007260 <UG_Update>
  printTime();
 8001dde:	f7ff fd57 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001de6:	f000 fb31 	bl	800244c <HAL_Delay>

#if DEMO_FLASH_KB >=128
  UG_FillScreen(C_BLACK);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f003 fc0c 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Big font", DEFAULT_FONT, C_RED, C_BLACK);
 8001df0:	2300      	movs	r3, #0
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001df8:	9300      	str	r3, [sp, #0]
 8001dfa:	4baa      	ldr	r3, [pc, #680]	; (80020a4 <LCD_Test+0x7a8>)
 8001dfc:	4aad      	ldr	r2, [pc, #692]	; (80020b4 <LCD_Test+0x7b8>)
 8001dfe:	2105      	movs	r1, #5
 8001e00:	200a      	movs	r0, #10
 8001e02:	f7ff fc95 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001e06:	f7ff fd37 	bl	8001878 <clearTime>
  LCD_PutStr(10, 35, "Hello", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	9301      	str	r3, [sp, #4]
 8001e0e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4ba8      	ldr	r3, [pc, #672]	; (80020b8 <LCD_Test+0x7bc>)
 8001e16:	4aa9      	ldr	r2, [pc, #676]	; (80020bc <LCD_Test+0x7c0>)
 8001e18:	2123      	movs	r1, #35	; 0x23
 8001e1a:	200a      	movs	r0, #10
 8001e1c:	f7ff fc88 	bl	8001730 <LCD_PutStr>
  LCD_PutStr(10, 80, "Steve!", FONT_arial_49X57, C_CYAN, C_BLACK);
 8001e20:	2300      	movs	r3, #0
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	4ba3      	ldr	r3, [pc, #652]	; (80020b8 <LCD_Test+0x7bc>)
 8001e2c:	4aa4      	ldr	r2, [pc, #656]	; (80020c0 <LCD_Test+0x7c4>)
 8001e2e:	2150      	movs	r1, #80	; 0x50
 8001e30:	200a      	movs	r0, #10
 8001e32:	f7ff fc7d 	bl	8001730 <LCD_PutStr>
  UG_Update();
 8001e36:	f005 fa13 	bl	8007260 <UG_Update>
  printTime();
 8001e3a:	f7ff fd29 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001e3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e42:	f000 fb03 	bl	800244c <HAL_Delay>
#endif

  UG_FillScreen(C_RED);
 8001e46:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e4a:	f003 fbdd 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Line", DEFAULT_FONT, C_YELLOW, C_RED);
 8001e4e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001e52:	9301      	str	r3, [sp, #4]
 8001e54:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e58:	9300      	str	r3, [sp, #0]
 8001e5a:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <LCD_Test+0x7a8>)
 8001e5c:	4a99      	ldr	r2, [pc, #612]	; (80020c4 <LCD_Test+0x7c8>)
 8001e5e:	2105      	movs	r1, #5
 8001e60:	200a      	movs	r0, #10
 8001e62:	f7ff fc65 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001e66:	f7ff fd07 	bl	8001878 <clearTime>
  UG_DrawLine(10, 30, 10, 100, C_WHITE);
 8001e6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2364      	movs	r3, #100	; 0x64
 8001e72:	220a      	movs	r2, #10
 8001e74:	211e      	movs	r1, #30
 8001e76:	200a      	movs	r0, #10
 8001e78:	f003 fef4 	bl	8005c64 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 30, C_WHITE);
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	231e      	movs	r3, #30
 8001e84:	2264      	movs	r2, #100	; 0x64
 8001e86:	211e      	movs	r1, #30
 8001e88:	200a      	movs	r0, #10
 8001e8a:	f003 feeb 	bl	8005c64 <UG_DrawLine>
  UG_DrawLine(10, 30, 100, 100, C_WHITE);
 8001e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	2364      	movs	r3, #100	; 0x64
 8001e96:	2264      	movs	r2, #100	; 0x64
 8001e98:	211e      	movs	r1, #30
 8001e9a:	200a      	movs	r0, #10
 8001e9c:	f003 fee2 	bl	8005c64 <UG_DrawLine>
  UG_Update();
 8001ea0:	f005 f9de 	bl	8007260 <UG_Update>
  printTime();
 8001ea4:	f7ff fcf4 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eac:	f000 face 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 8001eb0:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001eb4:	f003 fba8 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001eb8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ebc:	9301      	str	r3, [sp, #4]
 8001ebe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4b77      	ldr	r3, [pc, #476]	; (80020a4 <LCD_Test+0x7a8>)
 8001ec6:	4a80      	ldr	r2, [pc, #512]	; (80020c8 <LCD_Test+0x7cc>)
 8001ec8:	2105      	movs	r1, #5
 8001eca:	200a      	movs	r0, #10
 8001ecc:	f7ff fc30 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001ed0:	f7ff fcd2 	bl	8001878 <clearTime>
  UG_DrawFrame(10, 30, 100, 100, C_WHITE);
 8001ed4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2364      	movs	r3, #100	; 0x64
 8001edc:	2264      	movs	r2, #100	; 0x64
 8001ede:	211e      	movs	r1, #30
 8001ee0:	200a      	movs	r0, #10
 8001ee2:	f003 fc9e 	bl	8005822 <UG_DrawFrame>
  UG_Update();
 8001ee6:	f005 f9bb 	bl	8007260 <UG_Update>
  printTime();
 8001eea:	f7ff fcd1 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001eee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ef2:	f000 faab 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 8001ef6:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001efa:	f003 fb85 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Rect", DEFAULT_FONT, C_YELLOW, C_RED);
 8001efe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	4b66      	ldr	r3, [pc, #408]	; (80020a4 <LCD_Test+0x7a8>)
 8001f0c:	4a6f      	ldr	r2, [pc, #444]	; (80020cc <LCD_Test+0x7d0>)
 8001f0e:	2105      	movs	r1, #5
 8001f10:	200a      	movs	r0, #10
 8001f12:	f7ff fc0d 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001f16:	f7ff fcaf 	bl	8001878 <clearTime>
  UG_FillFrame(10, 30, 100, 100, C_WHITE);
 8001f1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2364      	movs	r3, #100	; 0x64
 8001f22:	2264      	movs	r2, #100	; 0x64
 8001f24:	211e      	movs	r1, #30
 8001f26:	200a      	movs	r0, #10
 8001f28:	f003 fb92 	bl	8005650 <UG_FillFrame>
  UG_Update();
 8001f2c:	f005 f998 	bl	8007260 <UG_Update>
  printTime();
 8001f30:	f7ff fcae 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001f34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f38:	f000 fa88 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f3c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f40:	f003 fb62 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Mesh.", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f44:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f48:	9301      	str	r3, [sp, #4]
 8001f4a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f4e:	9300      	str	r3, [sp, #0]
 8001f50:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <LCD_Test+0x7a8>)
 8001f52:	4a5f      	ldr	r2, [pc, #380]	; (80020d0 <LCD_Test+0x7d4>)
 8001f54:	2105      	movs	r1, #5
 8001f56:	200a      	movs	r0, #10
 8001f58:	f7ff fbea 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001f5c:	f7ff fc8c 	bl	8001878 <clearTime>
  UG_DrawMesh(10, 30, 100, 100, 5, C_WHITE);
 8001f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2305      	movs	r3, #5
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2364      	movs	r3, #100	; 0x64
 8001f6c:	2264      	movs	r2, #100	; 0x64
 8001f6e:	211e      	movs	r1, #30
 8001f70:	200a      	movs	r0, #10
 8001f72:	f003 fbdf 	bl	8005734 <UG_DrawMesh>
  UG_Update();
 8001f76:	f005 f973 	bl	8007260 <UG_Update>
  printTime();
 8001f7a:	f7ff fc89 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f82:	f000 fa63 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 8001f86:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001f8a:	f003 fb3d 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8001f8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <LCD_Test+0x7a8>)
 8001f9c:	4a4d      	ldr	r2, [pc, #308]	; (80020d4 <LCD_Test+0x7d8>)
 8001f9e:	2105      	movs	r1, #5
 8001fa0:	200a      	movs	r0, #10
 8001fa2:	f7ff fbc5 	bl	8001730 <LCD_PutStr>
  clearTime();
 8001fa6:	f7ff fc67 	bl	8001878 <clearTime>
  UG_DrawCircle(45, 65, 30, C_WHITE);
 8001faa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fae:	221e      	movs	r2, #30
 8001fb0:	2141      	movs	r1, #65	; 0x41
 8001fb2:	202d      	movs	r0, #45	; 0x2d
 8001fb4:	f003 fc96 	bl	80058e4 <UG_DrawCircle>
  UG_Update();
 8001fb8:	f005 f952 	bl	8007260 <UG_Update>
  printTime();
 8001fbc:	f7ff fc68 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8001fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fc4:	f000 fa42 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 8001fc8:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001fcc:	f003 fb1c 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Filled Circle", DEFAULT_FONT, C_YELLOW, C_RED);
 8001fd0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	4b31      	ldr	r3, [pc, #196]	; (80020a4 <LCD_Test+0x7a8>)
 8001fde:	4a3e      	ldr	r2, [pc, #248]	; (80020d8 <LCD_Test+0x7dc>)
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	200a      	movs	r0, #10
 8001fe4:	f7ff fba4 	bl	8001730 <LCD_PutStr>
  UG_Update();
 8001fe8:	f005 f93a 	bl	8007260 <UG_Update>
  clearTime();
 8001fec:	f7ff fc44 	bl	8001878 <clearTime>
  UG_FillCircle(45, 65, 30, C_WHITE);
 8001ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff4:	221e      	movs	r2, #30
 8001ff6:	2141      	movs	r1, #65	; 0x41
 8001ff8:	202d      	movs	r0, #45	; 0x2d
 8001ffa:	f003 fd59 	bl	8005ab0 <UG_FillCircle>
  UG_Update();
 8001ffe:	f005 f92f 	bl	8007260 <UG_Update>
  printTime();
 8002002:	f7ff fc45 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8002006:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800200a:	f000 fa1f 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 800200e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002012:	f003 faf9 	bl	8005608 <UG_FillScreen>
  LCD_PutStr(10, 5, "Triangle", DEFAULT_FONT, C_YELLOW, C_RED);
 8002016:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <LCD_Test+0x7a8>)
 8002024:	4a2d      	ldr	r2, [pc, #180]	; (80020dc <LCD_Test+0x7e0>)
 8002026:	2105      	movs	r1, #5
 8002028:	200a      	movs	r0, #10
 800202a:	f7ff fb81 	bl	8001730 <LCD_PutStr>
  clearTime();
 800202e:	f7ff fc23 	bl	8001878 <clearTime>
  UG_DrawTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 8002032:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2364      	movs	r3, #100	; 0x64
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	2332      	movs	r3, #50	; 0x32
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	231e      	movs	r3, #30
 8002042:	2264      	movs	r2, #100	; 0x64
 8002044:	211e      	movs	r1, #30
 8002046:	200a      	movs	r0, #10
 8002048:	f003 feec 	bl	8005e24 <UG_DrawTriangle>
  UG_Update();
 800204c:	f005 f908 	bl	8007260 <UG_Update>
  printTime();
 8002050:	f7ff fc1e 	bl	8001890 <printTime>
  HAL_Delay(1000);
 8002054:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002058:	f000 f9f8 	bl	800244c <HAL_Delay>

  UG_FillScreen(C_RED);
 800205c:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8002060:	f003 fad2 	bl	8005608 <UG_FillScreen>
  clearTime();
 8002064:	f7ff fc08 	bl	8001878 <clearTime>
  LCD_PutStr(10, 5, "Filled Tri.", DEFAULT_FONT, C_YELLOW, C_RED);
 8002068:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <LCD_Test+0x7a8>)
 8002076:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <LCD_Test+0x7e4>)
 8002078:	2105      	movs	r1, #5
 800207a:	200a      	movs	r0, #10
 800207c:	f7ff fb58 	bl	8001730 <LCD_PutStr>
  UG_FillTriangle(10, 30, 100, 30, 50, 100, C_WHITE);
 8002080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2332      	movs	r3, #50	; 0x32
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	231e      	movs	r3, #30
 8002090:	2264      	movs	r2, #100	; 0x64
 8002092:	211e      	movs	r1, #30
 8002094:	200a      	movs	r0, #10
 8002096:	f003 feff 	bl	8005e98 <UG_FillTriangle>
  UG_Update();
 800209a:	f005 f8e1 	bl	8007260 <UG_Update>
  printTime();
 800209e:	f7ff fbf7 	bl	8001890 <printTime>
 80020a2:	e01f      	b.n	80020e4 <LCD_Test+0x7e8>
 80020a4:	0801f28c 	.word	0x0801f28c
 80020a8:	0800c7c0 	.word	0x0800c7c0
 80020ac:	0800c7c8 	.word	0x0800c7c8
 80020b0:	0800c7d0 	.word	0x0800c7d0
 80020b4:	0800c7e0 	.word	0x0800c7e0
 80020b8:	0800c998 	.word	0x0800c998
 80020bc:	0800c7ec 	.word	0x0800c7ec
 80020c0:	0800c7f4 	.word	0x0800c7f4
 80020c4:	0800c7fc 	.word	0x0800c7fc
 80020c8:	0800c804 	.word	0x0800c804
 80020cc:	0800c80c 	.word	0x0800c80c
 80020d0:	0800c818 	.word	0x0800c818
 80020d4:	0800c820 	.word	0x0800c820
 80020d8:	0800c828 	.word	0x0800c828
 80020dc:	0800c838 	.word	0x0800c838
 80020e0:	0800c844 	.word	0x0800c844
  HAL_Delay(1000);
 80020e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020e8:	f000 f9b0 	bl	800244c <HAL_Delay>

  clearTime();
 80020ec:	f7ff fbc4 	bl	8001878 <clearTime>
  // Create the window
  UG_WindowCreate(&window_1, obj_buff_wnd_1, MAX_OBJECTS, window_1_callback);
 80020f0:	4b8b      	ldr	r3, [pc, #556]	; (8002320 <LCD_Test+0xa24>)
 80020f2:	220a      	movs	r2, #10
 80020f4:	498b      	ldr	r1, [pc, #556]	; (8002324 <LCD_Test+0xa28>)
 80020f6:	488c      	ldr	r0, [pc, #560]	; (8002328 <LCD_Test+0xa2c>)
 80020f8:	f005 fa92 	bl	8007620 <UG_WindowCreate>
  // Window Title
  UG_WindowSetTitleText(&window_1, "Test Window");
 80020fc:	498b      	ldr	r1, [pc, #556]	; (800232c <LCD_Test+0xa30>)
 80020fe:	488a      	ldr	r0, [pc, #552]	; (8002328 <LCD_Test+0xa2c>)
 8002100:	f005 fce4 	bl	8007acc <UG_WindowSetTitleText>
  UG_WindowSetTitleTextFont(&window_1, DEFAULT_FONT);
 8002104:	498a      	ldr	r1, [pc, #552]	; (8002330 <LCD_Test+0xa34>)
 8002106:	4888      	ldr	r0, [pc, #544]	; (8002328 <LCD_Test+0xa2c>)
 8002108:	f005 fd02 	bl	8007b10 <UG_WindowSetTitleTextFont>
  UG_WindowSetTitleHeight(&window_1, 15);
 800210c:	210f      	movs	r1, #15
 800210e:	4886      	ldr	r0, [pc, #536]	; (8002328 <LCD_Test+0xa2c>)
 8002110:	f005 fd39 	bl	8007b86 <UG_WindowSetTitleHeight>
  UG_WindowSetXStart(&window_1, 0);
 8002114:	2100      	movs	r1, #0
 8002116:	4884      	ldr	r0, [pc, #528]	; (8002328 <LCD_Test+0xa2c>)
 8002118:	f005 fd60 	bl	8007bdc <UG_WindowSetXStart>
  UG_WindowSetYStart(&window_1, 0);
 800211c:	2100      	movs	r1, #0
 800211e:	4882      	ldr	r0, [pc, #520]	; (8002328 <LCD_Test+0xa2c>)
 8002120:	f005 fd8e 	bl	8007c40 <UG_WindowSetYStart>
  UG_WindowSetXEnd(&window_1, LCD_WIDTH-1);
 8002124:	21ef      	movs	r1, #239	; 0xef
 8002126:	4880      	ldr	r0, [pc, #512]	; (8002328 <LCD_Test+0xa2c>)
 8002128:	f005 fdbc 	bl	8007ca4 <UG_WindowSetXEnd>
  UG_WindowSetYEnd(&window_1, LCD_HEIGHT-1);
 800212c:	21ef      	movs	r1, #239	; 0xef
 800212e:	487e      	ldr	r0, [pc, #504]	; (8002328 <LCD_Test+0xa2c>)
 8002130:	f005 fdea 	bl	8007d08 <UG_WindowSetYEnd>

  // Create Buttons
  UG_ButtonCreate(&window_1, &button_1, BTN_ID_0, 5, 5, 70, 35);
 8002134:	2323      	movs	r3, #35	; 0x23
 8002136:	9302      	str	r3, [sp, #8]
 8002138:	2346      	movs	r3, #70	; 0x46
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2305      	movs	r3, #5
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2305      	movs	r3, #5
 8002142:	2200      	movs	r2, #0
 8002144:	497b      	ldr	r1, [pc, #492]	; (8002334 <LCD_Test+0xa38>)
 8002146:	4878      	ldr	r0, [pc, #480]	; (8002328 <LCD_Test+0xa2c>)
 8002148:	f006 f838 	bl	80081bc <UG_ButtonCreate>
  //Label Buttons
  UG_ButtonSetFont(&window_1,BTN_ID_0,DEFAULT_FONT);
 800214c:	4a78      	ldr	r2, [pc, #480]	; (8002330 <LCD_Test+0xa34>)
 800214e:	2100      	movs	r1, #0
 8002150:	4875      	ldr	r0, [pc, #468]	; (8002328 <LCD_Test+0xa2c>)
 8002152:	f006 f933 	bl	80083bc <UG_ButtonSetFont>
  UG_ButtonSetForeColor(&window_1,BTN_ID_0, C_BLACK);
 8002156:	2200      	movs	r2, #0
 8002158:	2100      	movs	r1, #0
 800215a:	4873      	ldr	r0, [pc, #460]	; (8002328 <LCD_Test+0xa2c>)
 800215c:	f006 f8ae 	bl	80082bc <UG_ButtonSetForeColor>
  UG_ButtonSetBackColor(&window_1, BTN_ID_0, C_LIGHT_GRAY);
 8002160:	f24d 629a 	movw	r2, #54938	; 0xd69a
 8002164:	2100      	movs	r1, #0
 8002166:	4870      	ldr	r0, [pc, #448]	; (8002328 <LCD_Test+0xa2c>)
 8002168:	f006 f8d3 	bl	8008312 <UG_ButtonSetBackColor>
  UG_ButtonSetText(&window_1,BTN_ID_0,"3D Btn");
 800216c:	4a72      	ldr	r2, [pc, #456]	; (8002338 <LCD_Test+0xa3c>)
 800216e:	2100      	movs	r1, #0
 8002170:	486d      	ldr	r0, [pc, #436]	; (8002328 <LCD_Test+0xa2c>)
 8002172:	f006 f8f9 	bl	8008368 <UG_ButtonSetText>

  // Create Textbox
  UG_TextboxCreate(&window_1, &textbox_1, TXB_ID_0, 10, 40, LCD_WIDTH-20, 65);
 8002176:	2341      	movs	r3, #65	; 0x41
 8002178:	9302      	str	r3, [sp, #8]
 800217a:	23dc      	movs	r3, #220	; 0xdc
 800217c:	9301      	str	r3, [sp, #4]
 800217e:	2328      	movs	r3, #40	; 0x28
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	230a      	movs	r3, #10
 8002184:	2200      	movs	r2, #0
 8002186:	496d      	ldr	r1, [pc, #436]	; (800233c <LCD_Test+0xa40>)
 8002188:	4867      	ldr	r0, [pc, #412]	; (8002328 <LCD_Test+0xa2c>)
 800218a:	f006 fdeb 	bl	8008d64 <UG_TextboxCreate>
  UG_TextboxSetFont(&window_1, TXB_ID_0, DEFAULT_FONT);
 800218e:	4a68      	ldr	r2, [pc, #416]	; (8002330 <LCD_Test+0xa34>)
 8002190:	2100      	movs	r1, #0
 8002192:	4865      	ldr	r0, [pc, #404]	; (8002328 <LCD_Test+0xa2c>)
 8002194:	f006 fee0 	bl	8008f58 <UG_TextboxSetFont>
  UG_TextboxSetText(&window_1, TXB_ID_0, "Some Text");
 8002198:	4a69      	ldr	r2, [pc, #420]	; (8002340 <LCD_Test+0xa44>)
 800219a:	2100      	movs	r1, #0
 800219c:	4862      	ldr	r0, [pc, #392]	; (8002328 <LCD_Test+0xa2c>)
 800219e:	f006 feb1 	bl	8008f04 <UG_TextboxSetText>
  UG_TextboxSetBackColor(&window_1, TXB_ID_0, C_LIGHT_YELLOW);
 80021a2:	f64f 72fb 	movw	r2, #65531	; 0xfffb
 80021a6:	2100      	movs	r1, #0
 80021a8:	485f      	ldr	r0, [pc, #380]	; (8002328 <LCD_Test+0xa2c>)
 80021aa:	f006 fe80 	bl	8008eae <UG_TextboxSetBackColor>
  UG_TextboxSetForeColor(&window_1, TXB_ID_0, C_BLACK);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2100      	movs	r1, #0
 80021b2:	485d      	ldr	r0, [pc, #372]	; (8002328 <LCD_Test+0xa2c>)
 80021b4:	f006 fe50 	bl	8008e58 <UG_TextboxSetForeColor>
  UG_TextboxSetAlignment(&window_1, TXB_ID_0, ALIGN_CENTER);
 80021b8:	2212      	movs	r2, #18
 80021ba:	2100      	movs	r1, #0
 80021bc:	485a      	ldr	r0, [pc, #360]	; (8002328 <LCD_Test+0xa2c>)
 80021be:	f006 fef5 	bl	8008fac <UG_TextboxSetAlignment>

  // Create progress bar
  UG_ProgressCreate(&window_1, &pgb, PGB_ID_0, 10, 72, LCD_WIDTH-20, 85);
 80021c2:	2355      	movs	r3, #85	; 0x55
 80021c4:	9302      	str	r3, [sp, #8]
 80021c6:	23dc      	movs	r3, #220	; 0xdc
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	2348      	movs	r3, #72	; 0x48
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	230a      	movs	r3, #10
 80021d0:	2200      	movs	r2, #0
 80021d2:	495c      	ldr	r1, [pc, #368]	; (8002344 <LCD_Test+0xa48>)
 80021d4:	4854      	ldr	r0, [pc, #336]	; (8002328 <LCD_Test+0xa2c>)
 80021d6:	f006 fb39 	bl	800884c <UG_ProgressCreate>
  UG_ProgressSetForeColor(&window_1, PGB_ID_0, C_ROYAL_BLUE);
 80021da:	f244 325b 	movw	r2, #17243	; 0x435b
 80021de:	2100      	movs	r1, #0
 80021e0:	4851      	ldr	r0, [pc, #324]	; (8002328 <LCD_Test+0xa2c>)
 80021e2:	f006 fb97 	bl	8008914 <UG_ProgressSetForeColor>

  UG_WindowShow(&window_1);
 80021e6:	4850      	ldr	r0, [pc, #320]	; (8002328 <LCD_Test+0xa2c>)
 80021e8:	f005 fae8 	bl	80077bc <UG_WindowShow>
  UG_Update();
 80021ec:	f005 f838 	bl	8007260 <UG_Update>
  printTime();
 80021f0:	f7ff fb4e 	bl	8001890 <printTime>
  HAL_Delay(1000);
 80021f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f8:	f000 f928 	bl	800244c <HAL_Delay>
  uint32_t btn_time,progress_time,now;
  uint8_t i=0, j=0,u=0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	75fb      	strb	r3, [r7, #23]
 8002200:	2300      	movs	r3, #0
 8002202:	75bb      	strb	r3, [r7, #22]
 8002204:	2300      	movs	r3, #0
 8002206:	757b      	strb	r3, [r7, #21]
  btn_time = progress_time = HAL_GetTick();
 8002208:	f000 f914 	bl	8002434 <HAL_GetTick>
 800220c:	61b8      	str	r0, [r7, #24]
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	61fb      	str	r3, [r7, #28]
  while(1){
    now=HAL_GetTick();
 8002212:	f000 f90f 	bl	8002434 <HAL_GetTick>
 8002216:	6078      	str	r0, [r7, #4]
    if(now-btn_time>199){
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2bc7      	cmp	r3, #199	; 0xc7
 8002220:	d916      	bls.n	8002250 <LCD_Test+0x954>
      btn_time=now;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	61fb      	str	r3, [r7, #28]
      u=1;
 8002226:	2301      	movs	r3, #1
 8002228:	757b      	strb	r3, [r7, #21]
      i++;
 800222a:	7dfb      	ldrb	r3, [r7, #23]
 800222c:	3301      	adds	r3, #1
 800222e:	75fb      	strb	r3, [r7, #23]
      //UG_TouchUpdate((i&1 ? 10 : -1), (i&1 ? 31 : -1), OBJ_TOUCH_STATE_CHANGED | (i&1 ? OBJ_TOUCH_STATE_IS_PRESSED : 0));
      if(i==9){
 8002230:	7dfb      	ldrb	r3, [r7, #23]
 8002232:	2b09      	cmp	r3, #9
 8002234:	d109      	bne.n	800224a <LCD_Test+0x94e>
        UG_ButtonSetText(&window_1,BTN_ID_0,"2D Btn");
 8002236:	4a44      	ldr	r2, [pc, #272]	; (8002348 <LCD_Test+0xa4c>)
 8002238:	2100      	movs	r1, #0
 800223a:	483b      	ldr	r0, [pc, #236]	; (8002328 <LCD_Test+0xa2c>)
 800223c:	f006 f894 	bl	8008368 <UG_ButtonSetText>
        UG_ButtonSetStyle(&window_1, BTN_ID_0, BTN_STYLE_2D);
 8002240:	2200      	movs	r2, #0
 8002242:	2100      	movs	r1, #0
 8002244:	4838      	ldr	r0, [pc, #224]	; (8002328 <LCD_Test+0xa2c>)
 8002246:	f006 f8e3 	bl	8008410 <UG_ButtonSetStyle>
      }
      if(i>19){
 800224a:	7dfb      	ldrb	r3, [r7, #23]
 800224c:	2b13      	cmp	r3, #19
 800224e:	d81e      	bhi.n	800228e <LCD_Test+0x992>
        break;
      }
    }
    if(now-progress_time>19){
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b13      	cmp	r3, #19
 8002258:	d911      	bls.n	800227e <LCD_Test+0x982>
      progress_time=now;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	61bb      	str	r3, [r7, #24]
      u=1;
 800225e:	2301      	movs	r3, #1
 8002260:	757b      	strb	r3, [r7, #21]
      if(++j>100)
 8002262:	7dbb      	ldrb	r3, [r7, #22]
 8002264:	3301      	adds	r3, #1
 8002266:	75bb      	strb	r3, [r7, #22]
 8002268:	7dbb      	ldrb	r3, [r7, #22]
 800226a:	2b64      	cmp	r3, #100	; 0x64
 800226c:	d901      	bls.n	8002272 <LCD_Test+0x976>
        j=0;
 800226e:	2300      	movs	r3, #0
 8002270:	75bb      	strb	r3, [r7, #22]
      UG_ProgressSetProgress(&window_1, PGB_ID_0, j);
 8002272:	7dbb      	ldrb	r3, [r7, #22]
 8002274:	461a      	mov	r2, r3
 8002276:	2100      	movs	r1, #0
 8002278:	482b      	ldr	r0, [pc, #172]	; (8002328 <LCD_Test+0xa2c>)
 800227a:	f006 fb76 	bl	800896a <UG_ProgressSetProgress>
    }
    if(u){
 800227e:	7d7b      	ldrb	r3, [r7, #21]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0c6      	beq.n	8002212 <LCD_Test+0x916>
      u=0;
 8002284:	2300      	movs	r3, #0
 8002286:	757b      	strb	r3, [r7, #21]
      UG_Update();
 8002288:	f004 ffea 	bl	8007260 <UG_Update>
    now=HAL_GetTick();
 800228c:	e7c1      	b.n	8002212 <LCD_Test+0x916>
        break;
 800228e:	bf00      	nop
    }
  }
  UG_WindowHide(&window_1);
 8002290:	4825      	ldr	r0, [pc, #148]	; (8002328 <LCD_Test+0xa2c>)
 8002292:	f005 fab9 	bl	8007808 <UG_WindowHide>
  UG_WindowDelete(&window_1);
 8002296:	4824      	ldr	r0, [pc, #144]	; (8002328 <LCD_Test+0xa2c>)
 8002298:	f005 fa52 	bl	8007740 <UG_WindowDelete>
  UG_Update();
 800229c:	f004 ffe0 	bl	8007260 <UG_Update>
  t = UG_FontGetTransparency();
 80022a0:	f004 f864 	bl	800636c <UG_FontGetTransparency>
 80022a4:	4603      	mov	r3, r0
 80022a6:	72fb      	strb	r3, [r7, #11]
#if DEMO_FLASH_KB >=64
  UG_FillScreen(0x4b10);
 80022a8:	f644 3010 	movw	r0, #19216	; 0x4b10
 80022ac:	f003 f9ac 	bl	8005608 <UG_FillScreen>
  clearTime();
 80022b0:	f7ff fae2 	bl	8001878 <clearTime>
  UG_DrawBMP((LCD_WIDTH-ITMLogo.width)/2, (LCD_HEIGHT-ITMLogo.height)/2, &ITMLogo);
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <LCD_Test+0xa50>)
 80022b6:	889b      	ldrh	r3, [r3, #4]
 80022b8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80022bc:	0fda      	lsrs	r2, r3, #31
 80022be:	4413      	add	r3, r2
 80022c0:	105b      	asrs	r3, r3, #1
 80022c2:	b218      	sxth	r0, r3
 80022c4:	4b21      	ldr	r3, [pc, #132]	; (800234c <LCD_Test+0xa50>)
 80022c6:	88db      	ldrh	r3, [r3, #6]
 80022c8:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80022cc:	0fda      	lsrs	r2, r3, #31
 80022ce:	4413      	add	r3, r2
 80022d0:	105b      	asrs	r3, r3, #1
 80022d2:	b21b      	sxth	r3, r3
 80022d4:	4a1d      	ldr	r2, [pc, #116]	; (800234c <LCD_Test+0xa50>)
 80022d6:	4619      	mov	r1, r3
 80022d8:	f005 f882 	bl	80073e0 <UG_DrawBMP>
  UG_Update();
 80022dc:	f004 ffc0 	bl	8007260 <UG_Update>
  printTime();
 80022e0:	f7ff fad6 	bl	8001890 <printTime>
  UG_FontSetTransparency(0);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f004 f82f 	bl	8006348 <UG_FontSetTransparency>
  LCD_PutStr(10, 5, "Image", DEFAULT_FONT, C_YELLOW, C_RED);
 80022ea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80022ee:	9301      	str	r3, [sp, #4]
 80022f0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <LCD_Test+0xa34>)
 80022f8:	4a15      	ldr	r2, [pc, #84]	; (8002350 <LCD_Test+0xa54>)
 80022fa:	2105      	movs	r1, #5
 80022fc:	200a      	movs	r0, #10
 80022fe:	f7ff fa17 	bl	8001730 <LCD_PutStr>
  UG_Update();
 8002302:	f004 ffad 	bl	8007260 <UG_Update>
  UG_FontSetTransparency(t);
 8002306:	7afb      	ldrb	r3, [r7, #11]
 8002308:	4618      	mov	r0, r3
 800230a:	f004 f81d 	bl	8006348 <UG_FontSetTransparency>
#endif
  HAL_Delay(1000);
 800230e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002312:	f000 f89b 	bl	800244c <HAL_Delay>
}
 8002316:	bf00      	nop
 8002318:	3734      	adds	r7, #52	; 0x34
 800231a:	46bd      	mov	sp, r7
 800231c:	bd90      	pop	{r4, r7, pc}
 800231e:	bf00      	nop
 8002320:	08002355 	.word	0x08002355
 8002324:	200003a4 	.word	0x200003a4
 8002328:	20000344 	.word	0x20000344
 800232c:	0800c850 	.word	0x0800c850
 8002330:	0801f28c 	.word	0x0801f28c
 8002334:	20000378 	.word	0x20000378
 8002338:	0800c85c 	.word	0x0800c85c
 800233c:	20000390 	.word	0x20000390
 8002340:	0800c864 	.word	0x0800c864
 8002344:	200004e4 	.word	0x200004e4
 8002348:	0800c870 	.word	0x0800c870
 800234c:	2000001c 	.word	0x2000001c
 8002350:	0800c878 	.word	0x0800c878

08002354 <window_1_callback>:


static void window_1_callback(UG_MESSAGE *msg)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
                }
            }
        }
    }
*/
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800236c:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <HAL_Init+0x40>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <HAL_Init+0x40>)
 8002372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_Init+0x40>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <HAL_Init+0x40>)
 800237e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_Init+0x40>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_Init+0x40>)
 800238a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002390:	2003      	movs	r0, #3
 8002392:	f000 f94f 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002396:	200f      	movs	r0, #15
 8002398:	f000 f808 	bl	80023ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800239c:	f7fe fc02 	bl	8000ba4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00

080023ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023b4:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_InitTick+0x54>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b12      	ldr	r3, [pc, #72]	; (8002404 <HAL_InitTick+0x58>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ca:	4618      	mov	r0, r3
 80023cc:	f000 f967 	bl	800269e <HAL_SYSTICK_Config>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00e      	b.n	80023f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b0f      	cmp	r3, #15
 80023de:	d80a      	bhi.n	80023f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023e0:	2200      	movs	r2, #0
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023e8:	f000 f92f 	bl	800264a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023ec:	4a06      	ldr	r2, [pc, #24]	; (8002408 <HAL_InitTick+0x5c>)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	e000      	b.n	80023f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20000000 	.word	0x20000000
 8002404:	20000018 	.word	0x20000018
 8002408:	20000014 	.word	0x20000014

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000018 	.word	0x20000018
 8002430:	200004ec 	.word	0x200004ec

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	200004ec 	.word	0x200004ec

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000018 	.word	0x20000018

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff3e 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff31 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa2 	bl	80025f0 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026c4:	f7ff feb6 	bl	8002434 <HAL_GetTick>
 80026c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e099      	b.n	8002808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f022 0201 	bic.w	r2, r2, #1
 80026f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026f4:	e00f      	b.n	8002716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026f6:	f7ff fe9d 	bl	8002434 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b05      	cmp	r3, #5
 8002702:	d908      	bls.n	8002716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2220      	movs	r2, #32
 8002708:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2203      	movs	r2, #3
 800270e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e078      	b.n	8002808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1e8      	bne.n	80026f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800272c:	697a      	ldr	r2, [r7, #20]
 800272e:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_DMA_Init+0x158>)
 8002730:	4013      	ands	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4313      	orrs	r3, r2
 8002766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	2b04      	cmp	r3, #4
 800276e:	d107      	bne.n	8002780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002778:	4313      	orrs	r3, r2
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	695b      	ldr	r3, [r3, #20]
 800278e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	f023 0307 	bic.w	r3, r3, #7
 8002796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	4313      	orrs	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d117      	bne.n	80027da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00e      	beq.n	80027da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 fb4b 	bl	8002e58 <DMA_CheckFifoParam>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2240      	movs	r2, #64	; 0x40
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027d6:	2301      	movs	r3, #1
 80027d8:	e016      	b.n	8002808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 fb02 	bl	8002dec <DMA_CalcBaseAndBitshift>
 80027e8:	4603      	mov	r3, r0
 80027ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f0:	223f      	movs	r2, #63	; 0x3f
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2201      	movs	r2, #1
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	f010803f 	.word	0xf010803f

08002814 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
 8002820:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800282c:	2b01      	cmp	r3, #1
 800282e:	d101      	bne.n	8002834 <HAL_DMA_Start+0x20>
 8002830:	2302      	movs	r3, #2
 8002832:	e026      	b.n	8002882 <HAL_DMA_Start+0x6e>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d115      	bne.n	8002874 <HAL_DMA_Start+0x60>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2202      	movs	r2, #2
 800284c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fa97 	bl	8002d90 <DMA_SetConfig>

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <HAL_DMA_Start+0x6c>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800287c:	2302      	movs	r3, #2
 800287e:	75fb      	strb	r3, [r7, #23]
  } 
  return status; 
 8002880:	7dfb      	ldrb	r3, [r7, #23]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b086      	sub	sp, #24
 800288e:	af00      	add	r7, sp, #0
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	60b9      	str	r1, [r7, #8]
 8002894:	607a      	str	r2, [r7, #4]
 8002896:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002898:	2300      	movs	r3, #0
 800289a:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Start_IT+0x26>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e040      	b.n	8002932 <HAL_DMA_Start_IT+0xa8>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d12f      	bne.n	8002924 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	68b9      	ldr	r1, [r7, #8]
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fa59 	bl	8002d90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	223f      	movs	r2, #63	; 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0216 	orr.w	r2, r2, #22
 80028f8:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0208 	orr.w	r2, r2, #8
 8002910:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0201 	orr.w	r2, r2, #1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e005      	b.n	8002930 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292c:	2302      	movs	r3, #2
 800292e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002930:	7dfb      	ldrb	r3, [r7, #23]
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff fd74 	bl	8002434 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d008      	beq.n	800296c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2280      	movs	r2, #128	; 0x80
 800295e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e052      	b.n	8002a12 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0216 	bic.w	r2, r2, #22
 800297a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800298a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d103      	bne.n	800299c <HAL_DMA_Abort+0x62>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002998:	2b00      	cmp	r3, #0
 800299a:	d007      	beq.n	80029ac <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0208 	bic.w	r2, r2, #8
 80029aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0201 	bic.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029bc:	e013      	b.n	80029e6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029be:	f7ff fd39 	bl	8002434 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b05      	cmp	r3, #5
 80029ca:	d90c      	bls.n	80029e6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2203      	movs	r2, #3
 80029d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e015      	b.n	8002a12 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e4      	bne.n	80029be <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	223f      	movs	r2, #63	; 0x3f
 80029fa:	409a      	lsls	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d004      	beq.n	8002a38 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e00c      	b.n	8002a52 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2205      	movs	r2, #5
 8002a3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0201 	bic.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
	...

08002a60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a6c:	4b8e      	ldr	r3, [pc, #568]	; (8002ca8 <HAL_DMA_IRQHandler+0x248>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a8e      	ldr	r2, [pc, #568]	; (8002cac <HAL_DMA_IRQHandler+0x24c>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0a9b      	lsrs	r3, r3, #10
 8002a78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	2208      	movs	r2, #8
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4013      	ands	r3, r2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01a      	beq.n	8002acc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d013      	beq.n	8002acc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0204 	bic.w	r2, r2, #4
 8002ab2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	2208      	movs	r2, #8
 8002aba:	409a      	lsls	r2, r3
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	409a      	lsls	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d012      	beq.n	8002b02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aee:	2201      	movs	r2, #1
 8002af0:	409a      	lsls	r2, r3
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afa:	f043 0202 	orr.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2204      	movs	r2, #4
 8002b08:	409a      	lsls	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d012      	beq.n	8002b38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00b      	beq.n	8002b38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	2204      	movs	r2, #4
 8002b26:	409a      	lsls	r2, r3
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b30:	f043 0204 	orr.w	r2, r3, #4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b3c:	2210      	movs	r2, #16
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d043      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03c      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2210      	movs	r2, #16
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d018      	beq.n	8002ba2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d108      	bne.n	8002b90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d024      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	4798      	blx	r3
 8002b8e:	e01f      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d01b      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	4798      	blx	r3
 8002ba0:	e016      	b.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d107      	bne.n	8002bc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0208 	bic.w	r2, r2, #8
 8002bbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 808f 	beq.w	8002d00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 8087 	beq.w	8002d00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	409a      	lsls	r2, r3
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b05      	cmp	r3, #5
 8002c08:	d136      	bne.n	8002c78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0216 	bic.w	r2, r2, #22
 8002c18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d103      	bne.n	8002c3a <HAL_DMA_IRQHandler+0x1da>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d007      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0208 	bic.w	r2, r2, #8
 8002c48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4e:	223f      	movs	r2, #63	; 0x3f
 8002c50:	409a      	lsls	r2, r3
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d07e      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	4798      	blx	r3
        }
        return;
 8002c76:	e079      	b.n	8002d6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d01d      	beq.n	8002cc2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d10d      	bne.n	8002cb0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d031      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	4798      	blx	r3
 8002ca4:	e02c      	b.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
 8002ca6:	bf00      	nop
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d023      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	4798      	blx	r3
 8002cc0:	e01e      	b.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10f      	bne.n	8002cf0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0210 	bic.w	r2, r2, #16
 8002cde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d032      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f003 0301 	and.w	r3, r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d022      	beq.n	8002d5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2205      	movs	r2, #5
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d307      	bcc.n	8002d48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f2      	bne.n	8002d2c <HAL_DMA_IRQHandler+0x2cc>
 8002d46:	e000      	b.n	8002d4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d005      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4798      	blx	r3
 8002d6a:	e000      	b.n	8002d6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d6c:	bf00      	nop
    }
  }
}
 8002d6e:	3718      	adds	r7, #24
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d82:	b2db      	uxtb	r3, r3
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b40      	cmp	r3, #64	; 0x40
 8002dbc:	d108      	bne.n	8002dd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dce:	e007      	b.n	8002de0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	68ba      	ldr	r2, [r7, #8]
 8002dd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	60da      	str	r2, [r3, #12]
}
 8002de0:	bf00      	nop
 8002de2:	3714      	adds	r7, #20
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	3b10      	subs	r3, #16
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <DMA_CalcBaseAndBitshift+0x64>)
 8002dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002e02:	091b      	lsrs	r3, r3, #4
 8002e04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e06:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <DMA_CalcBaseAndBitshift+0x68>)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d909      	bls.n	8002e2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e22:	f023 0303 	bic.w	r3, r3, #3
 8002e26:	1d1a      	adds	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e2c:	e007      	b.n	8002e3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	aaaaaaab 	.word	0xaaaaaaab
 8002e54:	0800c990 	.word	0x0800c990

08002e58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e60:	2300      	movs	r3, #0
 8002e62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d11f      	bne.n	8002eb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d856      	bhi.n	8002f26 <DMA_CheckFifoParam+0xce>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <DMA_CheckFifoParam+0x28>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002e91 	.word	0x08002e91
 8002e84:	08002ea3 	.word	0x08002ea3
 8002e88:	08002e91 	.word	0x08002e91
 8002e8c:	08002f27 	.word	0x08002f27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d046      	beq.n	8002f2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea0:	e043      	b.n	8002f2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eaa:	d140      	bne.n	8002f2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e03d      	b.n	8002f2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eba:	d121      	bne.n	8002f00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d837      	bhi.n	8002f32 <DMA_CheckFifoParam+0xda>
 8002ec2:	a201      	add	r2, pc, #4	; (adr r2, 8002ec8 <DMA_CheckFifoParam+0x70>)
 8002ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec8:	08002ed9 	.word	0x08002ed9
 8002ecc:	08002edf 	.word	0x08002edf
 8002ed0:	08002ed9 	.word	0x08002ed9
 8002ed4:	08002ef1 	.word	0x08002ef1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e030      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d025      	beq.n	8002f36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eee:	e022      	b.n	8002f36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ef8:	d11f      	bne.n	8002f3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002efe:	e01c      	b.n	8002f3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d903      	bls.n	8002f0e <DMA_CheckFifoParam+0xb6>
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d003      	beq.n	8002f14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0c:	e018      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
      break;
 8002f12:	e015      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00e      	beq.n	8002f3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      break;
 8002f24:	e00b      	b.n	8002f3e <DMA_CheckFifoParam+0xe6>
      break;
 8002f26:	bf00      	nop
 8002f28:	e00a      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2a:	bf00      	nop
 8002f2c:	e008      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f2e:	bf00      	nop
 8002f30:	e006      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f32:	bf00      	nop
 8002f34:	e004      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e002      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;   
 8002f3a:	bf00      	nop
 8002f3c:	e000      	b.n	8002f40 <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
    }
  } 
  
  return status; 
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e159      	b.n	8003220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8148 	bne.w	800321a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f003 0303 	and.w	r3, r3, #3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d005      	beq.n	8002fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d130      	bne.n	8003004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	2203      	movs	r2, #3
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 0303 	and.w	r3, r3, #3
 800300c:	2b03      	cmp	r3, #3
 800300e:	d017      	beq.n	8003040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	2203      	movs	r2, #3
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	43db      	mvns	r3, r3
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	4013      	ands	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	005b      	lsls	r3, r3, #1
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80a2 	beq.w	800321a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b57      	ldr	r3, [pc, #348]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a56      	ldr	r2, [pc, #344]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b54      	ldr	r3, [pc, #336]	; (8003238 <HAL_GPIO_Init+0x2e8>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a52      	ldr	r2, [pc, #328]	; (800323c <HAL_GPIO_Init+0x2ec>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a49      	ldr	r2, [pc, #292]	; (8003240 <HAL_GPIO_Init+0x2f0>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d019      	beq.n	8003152 <HAL_GPIO_Init+0x202>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a48      	ldr	r2, [pc, #288]	; (8003244 <HAL_GPIO_Init+0x2f4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_GPIO_Init+0x1fe>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a47      	ldr	r2, [pc, #284]	; (8003248 <HAL_GPIO_Init+0x2f8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <HAL_GPIO_Init+0x1fa>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a46      	ldr	r2, [pc, #280]	; (800324c <HAL_GPIO_Init+0x2fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <HAL_GPIO_Init+0x1f6>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a45      	ldr	r2, [pc, #276]	; (8003250 <HAL_GPIO_Init+0x300>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d101      	bne.n	8003142 <HAL_GPIO_Init+0x1f2>
 800313e:	2304      	movs	r3, #4
 8003140:	e008      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003142:	2307      	movs	r3, #7
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003146:	2303      	movs	r3, #3
 8003148:	e004      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314a:	2302      	movs	r3, #2
 800314c:	e002      	b.n	8003154 <HAL_GPIO_Init+0x204>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_GPIO_Init+0x204>
 8003152:	2300      	movs	r3, #0
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	f002 0203 	and.w	r2, r2, #3
 800315a:	0092      	lsls	r2, r2, #2
 800315c:	4093      	lsls	r3, r2
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003164:	4935      	ldr	r1, [pc, #212]	; (800323c <HAL_GPIO_Init+0x2ec>)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	3302      	adds	r3, #2
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003196:	4a2f      	ldr	r2, [pc, #188]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319c:	4b2d      	ldr	r3, [pc, #180]	; (8003254 <HAL_GPIO_Init+0x304>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	43db      	mvns	r3, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4013      	ands	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031c0:	4a24      	ldr	r2, [pc, #144]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031c6:	4b23      	ldr	r3, [pc, #140]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	43db      	mvns	r3, r3
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	4013      	ands	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031ea:	4a1a      	ldr	r2, [pc, #104]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031f0:	4b18      	ldr	r3, [pc, #96]	; (8003254 <HAL_GPIO_Init+0x304>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	43db      	mvns	r3, r3
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	4013      	ands	r3, r2
 80031fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003214:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_GPIO_Init+0x304>)
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	3301      	adds	r3, #1
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	2b0f      	cmp	r3, #15
 8003224:	f67f aea2 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003228:	bf00      	nop
 800322a:	bf00      	nop
 800322c:	3724      	adds	r7, #36	; 0x24
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40013c00 	.word	0x40013c00

08003258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	460b      	mov	r3, r1
 8003262:	807b      	strh	r3, [r7, #2]
 8003264:	4613      	mov	r3, r2
 8003266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003268:	787b      	ldrb	r3, [r7, #1]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326e:	887a      	ldrh	r2, [r7, #2]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003274:	e003      	b.n	800327e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003276:	887b      	ldrh	r3, [r7, #2]
 8003278:	041a      	lsls	r2, r3, #16
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	619a      	str	r2, [r3, #24]
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800328a:	b480      	push	{r7}
 800328c:	b085      	sub	sp, #20
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
 8003292:	460b      	mov	r3, r1
 8003294:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800329c:	887a      	ldrh	r2, [r7, #2]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	4013      	ands	r3, r2
 80032a2:	041a      	lsls	r2, r3, #16
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43d9      	mvns	r1, r3
 80032a8:	887b      	ldrh	r3, [r7, #2]
 80032aa:	400b      	ands	r3, r1
 80032ac:	431a      	orrs	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	619a      	str	r2, [r3, #24]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
	...

080032c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80032ca:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d006      	beq.n	80032e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032d6:	4a05      	ldr	r2, [pc, #20]	; (80032ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 f806 	bl	80032f0 <HAL_GPIO_EXTI_Callback>
  }
}
 80032e4:	bf00      	nop
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40013c00 	.word	0x40013c00

080032f0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	4603      	mov	r3, r0
 80032f8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff f838 	bl	8002434 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7ff f834 	bl	8002434 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7ff f824 	bl	8002434 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7ff f820 	bl	8002434 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fe ffd9 	bl	8002434 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fe ffd5 	bl	8002434 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fe ffb8 	bl	8002434 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fe ffb4 	bl	8002434 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe ff98 	bl	8002434 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fe ff94 	bl	8002434 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe ff81 	bl	8002434 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fe ff7d 	bl	8002434 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe ff3d 	bl	8002434 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fe ff39 	bl	8002434 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fe fefe 	bl	8002434 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe fefa 	bl	8002434 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fe fee8 	bl	8002434 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fe fee4 	bl	8002434 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe feb8 	bl	8002434 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fe feb4 	bl	8002434 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fe fe8d 	bl	8002434 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fe fe89 	bl	8002434 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fe76 	bl	8002434 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fe fe72 	bl	8002434 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fe fda4 	bl	8002434 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fe fda0 	bl	8002434 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f821 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fe fd04 	bl	80023ac <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	0800c92c 	.word	0x0800c92c
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000014 	.word	0x20000014

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b090      	sub	sp, #64	; 0x40
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	2300      	movs	r3, #0
 80039d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039d4:	2300      	movs	r3, #0
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039dc:	4b59      	ldr	r3, [pc, #356]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f003 030c 	and.w	r3, r3, #12
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCC_GetSysClockFreq+0x40>
 80039e8:	2b08      	cmp	r3, #8
 80039ea:	f200 80a1 	bhi.w	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x34>
 80039f2:	2b04      	cmp	r3, #4
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x3a>
 80039f6:	e09b      	b.n	8003b30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039f8:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 80039fa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039fc:	e09b      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039fe:	4b53      	ldr	r3, [pc, #332]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003a02:	e098      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a04:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a0e:	4b4d      	ldr	r3, [pc, #308]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d028      	beq.n	8003a6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1a:	4b4a      	ldr	r3, [pc, #296]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	099b      	lsrs	r3, r3, #6
 8003a20:	2200      	movs	r2, #0
 8003a22:	623b      	str	r3, [r7, #32]
 8003a24:	627a      	str	r2, [r7, #36]	; 0x24
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a30:	fb03 f201 	mul.w	r2, r3, r1
 8003a34:	2300      	movs	r3, #0
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_RCC_GetSysClockFreq+0x188>)
 8003a3e:	fba0 1202 	umull	r1, r2, r0, r2
 8003a42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a44:	460a      	mov	r2, r1
 8003a46:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4a:	4413      	add	r3, r2
 8003a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a50:	2200      	movs	r2, #0
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	61fa      	str	r2, [r7, #28]
 8003a56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a5e:	f7fc fc0f 	bl	8000280 <__aeabi_uldivmod>
 8003a62:	4602      	mov	r2, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4613      	mov	r3, r2
 8003a68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a6a:	e053      	b.n	8003b14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a6c:	4b35      	ldr	r3, [pc, #212]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	099b      	lsrs	r3, r3, #6
 8003a72:	2200      	movs	r2, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	617a      	str	r2, [r7, #20]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a7e:	f04f 0b00 	mov.w	fp, #0
 8003a82:	4652      	mov	r2, sl
 8003a84:	465b      	mov	r3, fp
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	ebb2 080a 	subs.w	r8, r2, sl
 8003a9e:	eb63 090b 	sbc.w	r9, r3, fp
 8003aa2:	f04f 0200 	mov.w	r2, #0
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003aae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ab2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003ab6:	ebb2 0408 	subs.w	r4, r2, r8
 8003aba:	eb63 0509 	sbc.w	r5, r3, r9
 8003abe:	f04f 0200 	mov.w	r2, #0
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	00eb      	lsls	r3, r5, #3
 8003ac8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003acc:	00e2      	lsls	r2, r4, #3
 8003ace:	4614      	mov	r4, r2
 8003ad0:	461d      	mov	r5, r3
 8003ad2:	eb14 030a 	adds.w	r3, r4, sl
 8003ad6:	603b      	str	r3, [r7, #0]
 8003ad8:	eb45 030b 	adc.w	r3, r5, fp
 8003adc:	607b      	str	r3, [r7, #4]
 8003ade:	f04f 0200 	mov.w	r2, #0
 8003ae2:	f04f 0300 	mov.w	r3, #0
 8003ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aea:	4629      	mov	r1, r5
 8003aec:	028b      	lsls	r3, r1, #10
 8003aee:	4621      	mov	r1, r4
 8003af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003af4:	4621      	mov	r1, r4
 8003af6:	028a      	lsls	r2, r1, #10
 8003af8:	4610      	mov	r0, r2
 8003afa:	4619      	mov	r1, r3
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	2200      	movs	r2, #0
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	60fa      	str	r2, [r7, #12]
 8003b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b08:	f7fc fbba 	bl	8000280 <__aeabi_uldivmod>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4613      	mov	r3, r2
 8003b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	0c1b      	lsrs	r3, r3, #16
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	3301      	adds	r3, #1
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003b24:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b2e:	e002      	b.n	8003b36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b32:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3740      	adds	r7, #64	; 0x40
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b42:	bf00      	nop
 8003b44:	40023800 	.word	0x40023800
 8003b48:	00f42400 	.word	0x00f42400
 8003b4c:	017d7840 	.word	0x017d7840

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b03      	ldr	r3, [pc, #12]	; (8003b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	20000000 	.word	0x20000000

08003b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b6c:	f7ff fff0 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b05      	ldr	r3, [pc, #20]	; (8003b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	0a9b      	lsrs	r3, r3, #10
 8003b78:	f003 0307 	and.w	r3, r3, #7
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40023800 	.word	0x40023800
 8003b8c:	0800c93c 	.word	0x0800c93c

08003b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b94:	f7ff ffdc 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	0b5b      	lsrs	r3, r3, #13
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	4903      	ldr	r1, [pc, #12]	; (8003bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ba6:	5ccb      	ldrb	r3, [r1, r3]
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40023800 	.word	0x40023800
 8003bb4:	0800c93c 	.word	0x0800c93c

08003bb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e07b      	b.n	8003cc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bda:	d009      	beq.n	8003bf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
 8003be2:	e005      	b.n	8003bf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d106      	bne.n	8003c10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fc fff6 	bl	8000bfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2202      	movs	r2, #2
 8003c14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f003 0302 	and.w	r3, r3, #2
 8003c4c:	431a      	orrs	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c74:	ea42 0103 	orr.w	r1, r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0104 	and.w	r1, r3, #4
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0210 	and.w	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69da      	ldr	r2, [r3, #28]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cb0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b088      	sub	sp, #32
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	60f8      	str	r0, [r7, #12]
 8003cd2:	60b9      	str	r1, [r7, #8]
 8003cd4:	603b      	str	r3, [r7, #0]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_SPI_Transmit+0x22>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e126      	b.n	8003f3a <HAL_SPI_Transmit+0x270>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cf4:	f7fe fb9e 	bl	8002434 <HAL_GetTick>
 8003cf8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cfa:	88fb      	ldrh	r3, [r7, #6]
 8003cfc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d0e:	e10b      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Transmit+0x52>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d20:	e102      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2203      	movs	r2, #3
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d68:	d10f      	bne.n	8003d8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d94:	2b40      	cmp	r3, #64	; 0x40
 8003d96:	d007      	beq.n	8003da8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003da6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db0:	d14b      	bne.n	8003e4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <HAL_SPI_Transmit+0xf6>
 8003dba:	8afb      	ldrh	r3, [r7, #22]
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d13e      	bne.n	8003e3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc4:	881a      	ldrh	r2, [r3, #0]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	1c9a      	adds	r2, r3, #2
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003de4:	e02b      	b.n	8003e3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d112      	bne.n	8003e1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df8:	881a      	ldrh	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e04:	1c9a      	adds	r2, r3, #2
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e18:	e011      	b.n	8003e3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e1a:	f7fe fb0b 	bl	8002434 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	683a      	ldr	r2, [r7, #0]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d803      	bhi.n	8003e32 <HAL_SPI_Transmit+0x168>
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Transmit+0x16e>
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d102      	bne.n	8003e3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e3c:	e074      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1ce      	bne.n	8003de6 <HAL_SPI_Transmit+0x11c>
 8003e48:	e04c      	b.n	8003ee4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d002      	beq.n	8003e58 <HAL_SPI_Transmit+0x18e>
 8003e52:	8afb      	ldrh	r3, [r7, #22]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d140      	bne.n	8003eda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	7812      	ldrb	r2, [r2, #0]
 8003e64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e7e:	e02c      	b.n	8003eda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d113      	bne.n	8003eb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	330c      	adds	r3, #12
 8003e98:	7812      	ldrb	r2, [r2, #0]
 8003e9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	3b01      	subs	r3, #1
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003eb4:	e011      	b.n	8003eda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003eb6:	f7fe fabd 	bl	8002434 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d803      	bhi.n	8003ece <HAL_SPI_Transmit+0x204>
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ecc:	d102      	bne.n	8003ed4 <HAL_SPI_Transmit+0x20a>
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ed8:	e026      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1cd      	bne.n	8003e80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	6839      	ldr	r1, [r7, #0]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa09 	bl	8004300 <SPI_EndRxTxTransaction>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f02:	2300      	movs	r3, #0
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	77fb      	strb	r3, [r7, #31]
 8003f24:	e000      	b.n	8003f28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003f26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f38:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f52:	2300      	movs	r3, #0
 8003f54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d101      	bne.n	8003f64 <HAL_SPI_Transmit_DMA+0x20>
 8003f60:	2302      	movs	r3, #2
 8003f62:	e09b      	b.n	800409c <HAL_SPI_Transmit_DMA+0x158>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d002      	beq.n	8003f7e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8003f78:	2302      	movs	r3, #2
 8003f7a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f7c:	e089      	b.n	8004092 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Transmit_DMA+0x46>
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d102      	bne.n	8003f90 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f8e:	e080      	b.n	8004092 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	88fa      	ldrh	r2, [r7, #6]
 8003fa8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	88fa      	ldrh	r2, [r7, #6]
 8003fae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fd6:	d10f      	bne.n	8003ff8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fe6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ff6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ffc:	4a29      	ldr	r2, [pc, #164]	; (80040a4 <HAL_SPI_Transmit_DMA+0x160>)
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004004:	4a28      	ldr	r2, [pc, #160]	; (80040a8 <HAL_SPI_Transmit_DMA+0x164>)
 8004006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400c:	4a27      	ldr	r2, [pc, #156]	; (80040ac <HAL_SPI_Transmit_DMA+0x168>)
 800400e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	2200      	movs	r2, #0
 8004016:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004020:	4619      	mov	r1, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004030:	f7fe fc2b 	bl	800288a <HAL_DMA_Start_IT>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00c      	beq.n	8004054 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004052:	e01e      	b.n	8004092 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405e:	2b40      	cmp	r3, #64	; 0x40
 8004060:	d007      	beq.n	8004072 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004070:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0220 	orr.w	r2, r2, #32
 8004080:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0202 	orr.w	r2, r2, #2
 8004090:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800409a:	7dfb      	ldrb	r3, [r7, #23]
}
 800409c:	4618      	mov	r0, r3
 800409e:	3718      	adds	r7, #24
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	08004195 	.word	0x08004195
 80040a8:	080040ed 	.word	0x080040ed
 80040ac:	080041b1 	.word	0x080041b1

080040b0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040fa:	f7fe f99b 	bl	8002434 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d03b      	beq.n	8004188 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0220 	bic.w	r2, r2, #32
 800411e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0202 	bic.w	r2, r2, #2
 800412e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	2164      	movs	r1, #100	; 0x64
 8004134:	6978      	ldr	r0, [r7, #20]
 8004136:	f000 f8e3 	bl	8004300 <SPI_EndRxTxTransaction>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10a      	bne.n	800416a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004154:	2300      	movs	r3, #0
 8004156:	60fb      	str	r3, [r7, #12]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800417c:	2b00      	cmp	r3, #0
 800417e:	d003      	beq.n	8004188 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004180:	6978      	ldr	r0, [r7, #20]
 8004182:	f7ff ffa9 	bl	80040d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004186:	e002      	b.n	800418e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004188:	6978      	ldr	r0, [r7, #20]
 800418a:	f7ff ff91 	bl	80040b0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a0:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff ff8e 	bl	80040c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 0203 	bic.w	r2, r2, #3
 80041cc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f043 0210 	orr.w	r2, r3, #16
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f7ff ff78 	bl	80040d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041e8:	bf00      	nop
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	603b      	str	r3, [r7, #0]
 80041fc:	4613      	mov	r3, r2
 80041fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004200:	f7fe f918 	bl	8002434 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	4413      	add	r3, r2
 800420e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004210:	f7fe f910 	bl	8002434 <HAL_GetTick>
 8004214:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004216:	4b39      	ldr	r3, [pc, #228]	; (80042fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	015b      	lsls	r3, r3, #5
 800421c:	0d1b      	lsrs	r3, r3, #20
 800421e:	69fa      	ldr	r2, [r7, #28]
 8004220:	fb02 f303 	mul.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004226:	e054      	b.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800422e:	d050      	beq.n	80042d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004230:	f7fe f900 	bl	8002434 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	429a      	cmp	r2, r3
 800423e:	d902      	bls.n	8004246 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13d      	bne.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004254:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800425e:	d111      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004268:	d004      	beq.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004272:	d107      	bne.n	8004284 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004282:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800428c:	d10f      	bne.n	80042ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429c:	601a      	str	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e017      	b.n	80042f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4013      	ands	r3, r2
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	429a      	cmp	r2, r3
 80042e0:	bf0c      	ite	eq
 80042e2:	2301      	moveq	r3, #1
 80042e4:	2300      	movne	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	461a      	mov	r2, r3
 80042ea:	79fb      	ldrb	r3, [r7, #7]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d19b      	bne.n	8004228 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3720      	adds	r7, #32
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000000 	.word	0x20000000

08004300 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b088      	sub	sp, #32
 8004304:	af02      	add	r7, sp, #8
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800430c:	4b1b      	ldr	r3, [pc, #108]	; (800437c <SPI_EndRxTxTransaction+0x7c>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <SPI_EndRxTxTransaction+0x80>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	0d5b      	lsrs	r3, r3, #21
 8004318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800431c:	fb02 f303 	mul.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432a:	d112      	bne.n	8004352 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff5a 	bl	80041f0 <SPI_WaitFlagStateUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e00f      	b.n	8004372 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	3b01      	subs	r3, #1
 800435c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004368:	2b80      	cmp	r3, #128	; 0x80
 800436a:	d0f2      	beq.n	8004352 <SPI_EndRxTxTransaction+0x52>
 800436c:	e000      	b.n	8004370 <SPI_EndRxTxTransaction+0x70>
        break;
 800436e:	bf00      	nop
  }

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3718      	adds	r7, #24
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	20000000 	.word	0x20000000
 8004380:	165e9f81 	.word	0x165e9f81

08004384 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d101      	bne.n	8004398 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e097      	b.n	80044c8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d106      	bne.n	80043b2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fc fc9f 	bl	8000cf0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6812      	ldr	r2, [r2, #0]
 80043c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043c8:	f023 0307 	bic.w	r3, r3, #7
 80043cc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f000 f879 	bl	80044d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004406:	f023 0303 	bic.w	r3, r3, #3
 800440a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	021b      	lsls	r3, r3, #8
 8004416:	4313      	orrs	r3, r2
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004424:	f023 030c 	bic.w	r3, r3, #12
 8004428:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004430:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004434:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	021b      	lsls	r3, r3, #8
 8004440:	4313      	orrs	r3, r2
 8004442:	693a      	ldr	r2, [r7, #16]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	011a      	lsls	r2, r3, #4
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	031b      	lsls	r3, r3, #12
 8004454:	4313      	orrs	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004462:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	011b      	lsls	r3, r3, #4
 8004476:	4313      	orrs	r3, r2
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2201      	movs	r2, #1
 80044a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a34      	ldr	r2, [pc, #208]	; (80045b4 <TIM_Base_SetConfig+0xe4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00f      	beq.n	8004508 <TIM_Base_SetConfig+0x38>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ee:	d00b      	beq.n	8004508 <TIM_Base_SetConfig+0x38>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4a31      	ldr	r2, [pc, #196]	; (80045b8 <TIM_Base_SetConfig+0xe8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d007      	beq.n	8004508 <TIM_Base_SetConfig+0x38>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a30      	ldr	r2, [pc, #192]	; (80045bc <TIM_Base_SetConfig+0xec>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_Base_SetConfig+0x38>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a2f      	ldr	r2, [pc, #188]	; (80045c0 <TIM_Base_SetConfig+0xf0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d108      	bne.n	800451a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a25      	ldr	r2, [pc, #148]	; (80045b4 <TIM_Base_SetConfig+0xe4>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01b      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d017      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a22      	ldr	r2, [pc, #136]	; (80045b8 <TIM_Base_SetConfig+0xe8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a21      	ldr	r2, [pc, #132]	; (80045bc <TIM_Base_SetConfig+0xec>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00f      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a20      	ldr	r2, [pc, #128]	; (80045c0 <TIM_Base_SetConfig+0xf0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00b      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <TIM_Base_SetConfig+0xf4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d007      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a1e      	ldr	r2, [pc, #120]	; (80045c8 <TIM_Base_SetConfig+0xf8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_Base_SetConfig+0x8a>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <TIM_Base_SetConfig+0xfc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d108      	bne.n	800456c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	68fa      	ldr	r2, [r7, #12]
 8004568:	4313      	orrs	r3, r2
 800456a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689a      	ldr	r2, [r3, #8]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a08      	ldr	r2, [pc, #32]	; (80045b4 <TIM_Base_SetConfig+0xe4>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d103      	bne.n	80045a0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	691a      	ldr	r2, [r3, #16]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	615a      	str	r2, [r3, #20]
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40014000 	.word	0x40014000
 80045c8:	40014400 	.word	0x40014400
 80045cc:	40014800 	.word	0x40014800

080045d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b085      	sub	sp, #20
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d101      	bne.n	80045e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045e4:	2302      	movs	r3, #2
 80045e6:	e050      	b.n	800468a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	4313      	orrs	r3, r2
 8004618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1c      	ldr	r2, [pc, #112]	; (8004698 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d018      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004634:	d013      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00e      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a16      	ldr	r2, [pc, #88]	; (80046a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d009      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a15      	ldr	r2, [pc, #84]	; (80046a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d004      	beq.n	800465e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d10c      	bne.n	8004678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	68ba      	ldr	r2, [r7, #8]
 800466c:	4313      	orrs	r3, r2
 800466e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40000400 	.word	0x40000400
 80046a0:	40000800 	.word	0x40000800
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40014000 	.word	0x40014000

080046ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d101      	bne.n	80046be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e03f      	b.n	800473e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d106      	bne.n	80046d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	f7fc fb54 	bl	8000d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2224      	movs	r2, #36	; 0x24
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68da      	ldr	r2, [r3, #12]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 fc7b 	bl	8004fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	695a      	ldr	r2, [r3, #20]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2220      	movs	r2, #32
 8004738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0ba      	sub	sp, #232	; 0xe8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004774:	2300      	movs	r3, #0
 8004776:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800477a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004786:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800478e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004792:	f003 0320 	and.w	r3, r3, #32
 8004796:	2b00      	cmp	r3, #0
 8004798:	d009      	beq.n	80047ae <HAL_UART_IRQHandler+0x66>
 800479a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479e:	f003 0320 	and.w	r3, r3, #32
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fb65 	bl	8004e76 <UART_Receive_IT>
      return;
 80047ac:	e256      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	f000 80de 	beq.w	8004974 <HAL_UART_IRQHandler+0x22c>
 80047b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047bc:	f003 0301 	and.w	r3, r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	f000 80d1 	beq.w	8004974 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0301 	and.w	r3, r3, #1
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00b      	beq.n	80047f6 <HAL_UART_IRQHandler+0xae>
 80047de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f043 0201 	orr.w	r2, r3, #1
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0304 	and.w	r3, r3, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_UART_IRQHandler+0xd2>
 8004802:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0202 	orr.w	r2, r3, #2
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <HAL_UART_IRQHandler+0xf6>
 8004826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d011      	beq.n	800486e <HAL_UART_IRQHandler+0x126>
 800484a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d105      	bne.n	8004862 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f043 0208 	orr.w	r2, r3, #8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 81ed 	beq.w	8004c52 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487c:	f003 0320 	and.w	r3, r3, #32
 8004880:	2b00      	cmp	r3, #0
 8004882:	d008      	beq.n	8004896 <HAL_UART_IRQHandler+0x14e>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004888:	f003 0320 	and.w	r3, r3, #32
 800488c:	2b00      	cmp	r3, #0
 800488e:	d002      	beq.n	8004896 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 faf0 	bl	8004e76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a0:	2b40      	cmp	r3, #64	; 0x40
 80048a2:	bf0c      	ite	eq
 80048a4:	2301      	moveq	r3, #1
 80048a6:	2300      	movne	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 0308 	and.w	r3, r3, #8
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <HAL_UART_IRQHandler+0x17a>
 80048ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d04f      	beq.n	8004962 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f000 f9f8 	bl	8004cb8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d2:	2b40      	cmp	r3, #64	; 0x40
 80048d4:	d141      	bne.n	800495a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3314      	adds	r3, #20
 80048fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800490e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004912:	e841 2300 	strex	r3, r2, [r1]
 8004916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800491a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d1d9      	bne.n	80048d6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	2b00      	cmp	r3, #0
 8004928:	d013      	beq.n	8004952 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	4a7d      	ldr	r2, [pc, #500]	; (8004b24 <HAL_UART_IRQHandler+0x3dc>)
 8004930:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe f86f 	bl	8002a1a <HAL_DMA_Abort_IT>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800494c:	4610      	mov	r0, r2
 800494e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004950:	e00e      	b.n	8004970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f99a 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004958:	e00a      	b.n	8004970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 f996 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004960:	e006      	b.n	8004970 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 f992 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800496e:	e170      	b.n	8004c52 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	bf00      	nop
    return;
 8004972:	e16e      	b.n	8004c52 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	2b01      	cmp	r3, #1
 800497a:	f040 814a 	bne.w	8004c12 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800497e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	2b00      	cmp	r3, #0
 8004988:	f000 8143 	beq.w	8004c12 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800498c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004990:	f003 0310 	and.w	r3, r3, #16
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 813c 	beq.w	8004c12 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	f040 80b4 	bne.w	8004b28 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 8140 	beq.w	8004c56 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049de:	429a      	cmp	r2, r3
 80049e0:	f080 8139 	bcs.w	8004c56 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049ea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	f000 8088 	beq.w	8004b0a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	330c      	adds	r3, #12
 8004a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	330c      	adds	r3, #12
 8004a22:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d1d9      	bne.n	80049fa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	3314      	adds	r3, #20
 8004a4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a50:	e853 3f00 	ldrex	r3, [r3]
 8004a54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a58:	f023 0301 	bic.w	r3, r3, #1
 8004a5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	3314      	adds	r3, #20
 8004a66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a76:	e841 2300 	strex	r3, r2, [r1]
 8004a7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1e1      	bne.n	8004a46 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	3314      	adds	r3, #20
 8004a88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8c:	e853 3f00 	ldrex	r3, [r3]
 8004a90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3314      	adds	r3, #20
 8004aa2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aa8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004aae:	e841 2300 	strex	r3, r2, [r1]
 8004ab2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1e3      	bne.n	8004a82 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2220      	movs	r2, #32
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	330c      	adds	r3, #12
 8004ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ada:	f023 0310 	bic.w	r3, r3, #16
 8004ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004aec:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e3      	bne.n	8004ac8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7fd ff18 	bl	800293a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8c0 	bl	8004ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b20:	e099      	b.n	8004c56 <HAL_UART_IRQHandler+0x50e>
 8004b22:	bf00      	nop
 8004b24:	08004d7f 	.word	0x08004d7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 808b 	beq.w	8004c5a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b72:	647a      	str	r2, [r7, #68]	; 0x44
 8004b74:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e3      	bne.n	8004b4e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	623b      	str	r3, [r7, #32]
   return(result);
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004baa:	633a      	str	r2, [r7, #48]	; 0x30
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e3      	bne.n	8004b86 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0310 	bic.w	r3, r3, #16
 8004be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bf0:	61fa      	str	r2, [r7, #28]
 8004bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e3      	bne.n	8004bcc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c08:	4619      	mov	r1, r3
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f848 	bl	8004ca0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c10:	e023      	b.n	8004c5a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d009      	beq.n	8004c32 <HAL_UART_IRQHandler+0x4ea>
 8004c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 f8bb 	bl	8004da6 <UART_Transmit_IT>
    return;
 8004c30:	e014      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <HAL_UART_IRQHandler+0x514>
 8004c3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 f8fb 	bl	8004e46 <UART_EndTransmit_IT>
    return;
 8004c50:	e004      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
    return;
 8004c52:	bf00      	nop
 8004c54:	e002      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
      return;
 8004c56:	bf00      	nop
 8004c58:	e000      	b.n	8004c5c <HAL_UART_IRQHandler+0x514>
      return;
 8004c5a:	bf00      	nop
  }
}
 8004c5c:	37e8      	adds	r7, #232	; 0xe8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop

08004c64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c80:	bf00      	nop
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b095      	sub	sp, #84	; 0x54
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	330c      	adds	r3, #12
 8004cc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	e853 3f00 	ldrex	r3, [r3]
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	330c      	adds	r3, #12
 8004cde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ce0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ce6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e5      	bne.n	8004cc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3314      	adds	r3, #20
 8004cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	e853 3f00 	ldrex	r3, [r3]
 8004d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f023 0301 	bic.w	r3, r3, #1
 8004d0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	3314      	adds	r3, #20
 8004d12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d1c:	e841 2300 	strex	r3, r2, [r1]
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1e5      	bne.n	8004cf4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d119      	bne.n	8004d64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	e853 3f00 	ldrex	r3, [r3]
 8004d3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f023 0310 	bic.w	r3, r3, #16
 8004d46:	647b      	str	r3, [r7, #68]	; 0x44
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	330c      	adds	r3, #12
 8004d4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d50:	61ba      	str	r2, [r7, #24]
 8004d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d54:	6979      	ldr	r1, [r7, #20]
 8004d56:	69ba      	ldr	r2, [r7, #24]
 8004d58:	e841 2300 	strex	r3, r2, [r1]
 8004d5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1e5      	bne.n	8004d30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004d72:	bf00      	nop
 8004d74:	3754      	adds	r7, #84	; 0x54
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff ff77 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d9e:	bf00      	nop
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b085      	sub	sp, #20
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b21      	cmp	r3, #33	; 0x21
 8004db8:	d13e      	bne.n	8004e38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc2:	d114      	bne.n	8004dee <UART_Transmit_IT+0x48>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d110      	bne.n	8004dee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a1b      	ldr	r3, [r3, #32]
 8004dd0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	881b      	ldrh	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004de0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	1c9a      	adds	r2, r3, #2
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	621a      	str	r2, [r3, #32]
 8004dec:	e008      	b.n	8004e00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c59      	adds	r1, r3, #1
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	6211      	str	r1, [r2, #32]
 8004df8:	781a      	ldrb	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	3b01      	subs	r3, #1
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10f      	bne.n	8004e34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68da      	ldr	r2, [r3, #12]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e34:	2300      	movs	r3, #0
 8004e36:	e000      	b.n	8004e3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e38:	2302      	movs	r3, #2
  }
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2220      	movs	r2, #32
 8004e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff fefc 	bl	8004c64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e6c:	2300      	movs	r3, #0
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b08c      	sub	sp, #48	; 0x30
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b22      	cmp	r3, #34	; 0x22
 8004e88:	f040 80ab 	bne.w	8004fe2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e94:	d117      	bne.n	8004ec6 <UART_Receive_IT+0x50>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d113      	bne.n	8004ec6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ebe:	1c9a      	adds	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ec4:	e026      	b.n	8004f14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ed8:	d007      	beq.n	8004eea <UART_Receive_IT+0x74>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10a      	bne.n	8004ef8 <UART_Receive_IT+0x82>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d106      	bne.n	8004ef8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	e008      	b.n	8004f0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4619      	mov	r1, r3
 8004f22:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d15a      	bne.n	8004fde <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f022 0220 	bic.w	r2, r2, #32
 8004f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68da      	ldr	r2, [r3, #12]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695a      	ldr	r2, [r3, #20]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0201 	bic.w	r2, r2, #1
 8004f56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d135      	bne.n	8004fd4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	330c      	adds	r3, #12
 8004f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f023 0310 	bic.w	r3, r3, #16
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	330c      	adds	r3, #12
 8004f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f8e:	623a      	str	r2, [r7, #32]
 8004f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f92:	69f9      	ldr	r1, [r7, #28]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	e841 2300 	strex	r3, r2, [r1]
 8004f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d1e5      	bne.n	8004f6e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0310 	and.w	r3, r3, #16
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d10a      	bne.n	8004fc6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fca:	4619      	mov	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff fe67 	bl	8004ca0 <HAL_UARTEx_RxEventCallback>
 8004fd2:	e002      	b.n	8004fda <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fe4f 	bl	8004c78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e002      	b.n	8004fe4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	e000      	b.n	8004fe4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
  }
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	3730      	adds	r7, #48	; 0x30
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ff0:	b0c0      	sub	sp, #256	; 0x100
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005008:	68d9      	ldr	r1, [r3, #12]
 800500a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	ea40 0301 	orr.w	r3, r0, r1
 8005014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	431a      	orrs	r2, r3
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	431a      	orrs	r2, r3
 800502c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005044:	f021 010c 	bic.w	r1, r1, #12
 8005048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005052:	430b      	orrs	r3, r1
 8005054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005066:	6999      	ldr	r1, [r3, #24]
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	ea40 0301 	orr.w	r3, r0, r1
 8005072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	4b8f      	ldr	r3, [pc, #572]	; (80052b8 <UART_SetConfig+0x2cc>)
 800507c:	429a      	cmp	r2, r3
 800507e:	d005      	beq.n	800508c <UART_SetConfig+0xa0>
 8005080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b8d      	ldr	r3, [pc, #564]	; (80052bc <UART_SetConfig+0x2d0>)
 8005088:	429a      	cmp	r2, r3
 800508a:	d104      	bne.n	8005096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800508c:	f7fe fd80 	bl	8003b90 <HAL_RCC_GetPCLK2Freq>
 8005090:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005094:	e003      	b.n	800509e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005096:	f7fe fd67 	bl	8003b68 <HAL_RCC_GetPCLK1Freq>
 800509a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050a8:	f040 810c 	bne.w	80052c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050b0:	2200      	movs	r2, #0
 80050b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	1891      	adds	r1, r2, r2
 80050c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80050c6:	415b      	adcs	r3, r3
 80050c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80050ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80050ce:	4621      	mov	r1, r4
 80050d0:	eb12 0801 	adds.w	r8, r2, r1
 80050d4:	4629      	mov	r1, r5
 80050d6:	eb43 0901 	adc.w	r9, r3, r1
 80050da:	f04f 0200 	mov.w	r2, #0
 80050de:	f04f 0300 	mov.w	r3, #0
 80050e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050ee:	4690      	mov	r8, r2
 80050f0:	4699      	mov	r9, r3
 80050f2:	4623      	mov	r3, r4
 80050f4:	eb18 0303 	adds.w	r3, r8, r3
 80050f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80050fc:	462b      	mov	r3, r5
 80050fe:	eb49 0303 	adc.w	r3, r9, r3
 8005102:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005112:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800511a:	460b      	mov	r3, r1
 800511c:	18db      	adds	r3, r3, r3
 800511e:	653b      	str	r3, [r7, #80]	; 0x50
 8005120:	4613      	mov	r3, r2
 8005122:	eb42 0303 	adc.w	r3, r2, r3
 8005126:	657b      	str	r3, [r7, #84]	; 0x54
 8005128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800512c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005130:	f7fb f8a6 	bl	8000280 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4b61      	ldr	r3, [pc, #388]	; (80052c0 <UART_SetConfig+0x2d4>)
 800513a:	fba3 2302 	umull	r2, r3, r3, r2
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	011c      	lsls	r4, r3, #4
 8005142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800514c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	64b9      	str	r1, [r7, #72]	; 0x48
 800515c:	415b      	adcs	r3, r3
 800515e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005164:	4641      	mov	r1, r8
 8005166:	eb12 0a01 	adds.w	sl, r2, r1
 800516a:	4649      	mov	r1, r9
 800516c:	eb43 0b01 	adc.w	fp, r3, r1
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800517c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005184:	4692      	mov	sl, r2
 8005186:	469b      	mov	fp, r3
 8005188:	4643      	mov	r3, r8
 800518a:	eb1a 0303 	adds.w	r3, sl, r3
 800518e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005192:	464b      	mov	r3, r9
 8005194:	eb4b 0303 	adc.w	r3, fp, r3
 8005198:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051b0:	460b      	mov	r3, r1
 80051b2:	18db      	adds	r3, r3, r3
 80051b4:	643b      	str	r3, [r7, #64]	; 0x40
 80051b6:	4613      	mov	r3, r2
 80051b8:	eb42 0303 	adc.w	r3, r2, r3
 80051bc:	647b      	str	r3, [r7, #68]	; 0x44
 80051be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051c6:	f7fb f85b 	bl	8000280 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	4b3b      	ldr	r3, [pc, #236]	; (80052c0 <UART_SetConfig+0x2d4>)
 80051d2:	fba3 2301 	umull	r2, r3, r3, r1
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2264      	movs	r2, #100	; 0x64
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	1acb      	subs	r3, r1, r3
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80051e6:	4b36      	ldr	r3, [pc, #216]	; (80052c0 <UART_SetConfig+0x2d4>)
 80051e8:	fba3 2302 	umull	r2, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	005b      	lsls	r3, r3, #1
 80051f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051f4:	441c      	add	r4, r3
 80051f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005200:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	1891      	adds	r1, r2, r2
 800520e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005210:	415b      	adcs	r3, r3
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005218:	4641      	mov	r1, r8
 800521a:	1851      	adds	r1, r2, r1
 800521c:	6339      	str	r1, [r7, #48]	; 0x30
 800521e:	4649      	mov	r1, r9
 8005220:	414b      	adcs	r3, r1
 8005222:	637b      	str	r3, [r7, #52]	; 0x34
 8005224:	f04f 0200 	mov.w	r2, #0
 8005228:	f04f 0300 	mov.w	r3, #0
 800522c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005230:	4659      	mov	r1, fp
 8005232:	00cb      	lsls	r3, r1, #3
 8005234:	4651      	mov	r1, sl
 8005236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800523a:	4651      	mov	r1, sl
 800523c:	00ca      	lsls	r2, r1, #3
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	4603      	mov	r3, r0
 8005244:	4642      	mov	r2, r8
 8005246:	189b      	adds	r3, r3, r2
 8005248:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800524c:	464b      	mov	r3, r9
 800524e:	460a      	mov	r2, r1
 8005250:	eb42 0303 	adc.w	r3, r2, r3
 8005254:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005264:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800526c:	460b      	mov	r3, r1
 800526e:	18db      	adds	r3, r3, r3
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
 8005272:	4613      	mov	r3, r2
 8005274:	eb42 0303 	adc.w	r3, r2, r3
 8005278:	62fb      	str	r3, [r7, #44]	; 0x2c
 800527a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800527e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005282:	f7fa fffd 	bl	8000280 <__aeabi_uldivmod>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <UART_SetConfig+0x2d4>)
 800528c:	fba3 1302 	umull	r1, r3, r3, r2
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	2164      	movs	r1, #100	; 0x64
 8005294:	fb01 f303 	mul.w	r3, r1, r3
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	3332      	adds	r3, #50	; 0x32
 800529e:	4a08      	ldr	r2, [pc, #32]	; (80052c0 <UART_SetConfig+0x2d4>)
 80052a0:	fba2 2303 	umull	r2, r3, r2, r3
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	f003 0207 	and.w	r2, r3, #7
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4422      	add	r2, r4
 80052b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052b4:	e105      	b.n	80054c2 <UART_SetConfig+0x4d6>
 80052b6:	bf00      	nop
 80052b8:	40011000 	.word	0x40011000
 80052bc:	40011400 	.word	0x40011400
 80052c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c8:	2200      	movs	r2, #0
 80052ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80052ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80052d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80052d6:	4642      	mov	r2, r8
 80052d8:	464b      	mov	r3, r9
 80052da:	1891      	adds	r1, r2, r2
 80052dc:	6239      	str	r1, [r7, #32]
 80052de:	415b      	adcs	r3, r3
 80052e0:	627b      	str	r3, [r7, #36]	; 0x24
 80052e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052e6:	4641      	mov	r1, r8
 80052e8:	1854      	adds	r4, r2, r1
 80052ea:	4649      	mov	r1, r9
 80052ec:	eb43 0501 	adc.w	r5, r3, r1
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	00eb      	lsls	r3, r5, #3
 80052fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052fe:	00e2      	lsls	r2, r4, #3
 8005300:	4614      	mov	r4, r2
 8005302:	461d      	mov	r5, r3
 8005304:	4643      	mov	r3, r8
 8005306:	18e3      	adds	r3, r4, r3
 8005308:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800530c:	464b      	mov	r3, r9
 800530e:	eb45 0303 	adc.w	r3, r5, r3
 8005312:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005322:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005332:	4629      	mov	r1, r5
 8005334:	008b      	lsls	r3, r1, #2
 8005336:	4621      	mov	r1, r4
 8005338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800533c:	4621      	mov	r1, r4
 800533e:	008a      	lsls	r2, r1, #2
 8005340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005344:	f7fa ff9c 	bl	8000280 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4b60      	ldr	r3, [pc, #384]	; (80054d0 <UART_SetConfig+0x4e4>)
 800534e:	fba3 2302 	umull	r2, r3, r3, r2
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	011c      	lsls	r4, r3, #4
 8005356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800535a:	2200      	movs	r2, #0
 800535c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005368:	4642      	mov	r2, r8
 800536a:	464b      	mov	r3, r9
 800536c:	1891      	adds	r1, r2, r2
 800536e:	61b9      	str	r1, [r7, #24]
 8005370:	415b      	adcs	r3, r3
 8005372:	61fb      	str	r3, [r7, #28]
 8005374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005378:	4641      	mov	r1, r8
 800537a:	1851      	adds	r1, r2, r1
 800537c:	6139      	str	r1, [r7, #16]
 800537e:	4649      	mov	r1, r9
 8005380:	414b      	adcs	r3, r1
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005390:	4659      	mov	r1, fp
 8005392:	00cb      	lsls	r3, r1, #3
 8005394:	4651      	mov	r1, sl
 8005396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539a:	4651      	mov	r1, sl
 800539c:	00ca      	lsls	r2, r1, #3
 800539e:	4610      	mov	r0, r2
 80053a0:	4619      	mov	r1, r3
 80053a2:	4603      	mov	r3, r0
 80053a4:	4642      	mov	r2, r8
 80053a6:	189b      	adds	r3, r3, r2
 80053a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ac:	464b      	mov	r3, r9
 80053ae:	460a      	mov	r2, r1
 80053b0:	eb42 0303 	adc.w	r3, r2, r3
 80053b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80053d0:	4649      	mov	r1, r9
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053da:	4641      	mov	r1, r8
 80053dc:	008a      	lsls	r2, r1, #2
 80053de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80053e2:	f7fa ff4d 	bl	8000280 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b39      	ldr	r3, [pc, #228]	; (80054d0 <UART_SetConfig+0x4e4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	; 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	; 0x32
 80053fe:	4a34      	ldr	r2, [pc, #208]	; (80054d0 <UART_SetConfig+0x4e4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800540a:	441c      	add	r4, r3
 800540c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005410:	2200      	movs	r2, #0
 8005412:	673b      	str	r3, [r7, #112]	; 0x70
 8005414:	677a      	str	r2, [r7, #116]	; 0x74
 8005416:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800541a:	4642      	mov	r2, r8
 800541c:	464b      	mov	r3, r9
 800541e:	1891      	adds	r1, r2, r2
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	415b      	adcs	r3, r3
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800542a:	4641      	mov	r1, r8
 800542c:	1851      	adds	r1, r2, r1
 800542e:	6039      	str	r1, [r7, #0]
 8005430:	4649      	mov	r1, r9
 8005432:	414b      	adcs	r3, r1
 8005434:	607b      	str	r3, [r7, #4]
 8005436:	f04f 0200 	mov.w	r2, #0
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005442:	4659      	mov	r1, fp
 8005444:	00cb      	lsls	r3, r1, #3
 8005446:	4651      	mov	r1, sl
 8005448:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800544c:	4651      	mov	r1, sl
 800544e:	00ca      	lsls	r2, r1, #3
 8005450:	4610      	mov	r0, r2
 8005452:	4619      	mov	r1, r3
 8005454:	4603      	mov	r3, r0
 8005456:	4642      	mov	r2, r8
 8005458:	189b      	adds	r3, r3, r2
 800545a:	66bb      	str	r3, [r7, #104]	; 0x68
 800545c:	464b      	mov	r3, r9
 800545e:	460a      	mov	r2, r1
 8005460:	eb42 0303 	adc.w	r3, r2, r3
 8005464:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	663b      	str	r3, [r7, #96]	; 0x60
 8005470:	667a      	str	r2, [r7, #100]	; 0x64
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800547e:	4649      	mov	r1, r9
 8005480:	008b      	lsls	r3, r1, #2
 8005482:	4641      	mov	r1, r8
 8005484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005488:	4641      	mov	r1, r8
 800548a:	008a      	lsls	r2, r1, #2
 800548c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005490:	f7fa fef6 	bl	8000280 <__aeabi_uldivmod>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4b0d      	ldr	r3, [pc, #52]	; (80054d0 <UART_SetConfig+0x4e4>)
 800549a:	fba3 1302 	umull	r1, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2164      	movs	r1, #100	; 0x64
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	3332      	adds	r3, #50	; 0x32
 80054ac:	4a08      	ldr	r2, [pc, #32]	; (80054d0 <UART_SetConfig+0x4e4>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4422      	add	r2, r4
 80054c0:	609a      	str	r2, [r3, #8]
}
 80054c2:	bf00      	nop
 80054c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80054c8:	46bd      	mov	sp, r7
 80054ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054ce:	bf00      	nop
 80054d0:	51eb851f 	.word	0x51eb851f

080054d4 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 80054e6:	89fb      	ldrh	r3, [r7, #14]
 80054e8:	021b      	lsls	r3, r3, #8
 80054ea:	b21a      	sxth	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	b21b      	sxth	r3, r3
 80054f2:	4313      	orrs	r3, r2
 80054f4:	b21b      	sxth	r3, r3
 80054f6:	b29b      	uxth	r3, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8005504:	b480      	push	{r7}
 8005506:	b085      	sub	sp, #20
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	601a      	str	r2, [r3, #0]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
#endif
   g->char_h_space = 1;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   g->char_v_space = 1;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
   g->font=NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	611a      	str	r2, [r3, #16]
   g->currentFont.bytes_per_char = 0;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	831a      	strh	r2, [r3, #24]
   g->currentFont.char_height = 0;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	75da      	strb	r2, [r3, #23]
   g->currentFont.char_width = 0;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	759a      	strb	r2, [r3, #22]
   g->currentFont.number_of_chars = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	835a      	strh	r2, [r3, #26]
   g->currentFont.number_of_offsets = 0;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	839a      	strh	r2, [r3, #28]
   g->currentFont.widths = NULL;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
   g->currentFont.offsets = NULL;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
   g->currentFont.data = NULL;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2200      	movs	r2, #0
 8005558:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.font = NULL;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	62da      	str	r2, [r3, #44]	; 0x2c
   g->desktop_color = C_DESKTOP_COLOR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8005566:	871a      	strh	r2, [r3, #56]	; 0x38
   g->fore_color = C_WHITE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800556e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->back_color = C_BLACK;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	86da      	strh	r2, [r3, #54]	; 0x36
   g->next_window = NULL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	605a      	str	r2, [r3, #4]
   g->active_window = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	609a      	str	r2, [r3, #8]
   g->last_window = NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	60da      	str	r2, [r3, #12]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8005588:	2300      	movs	r3, #0
 800558a:	73fb      	strb	r3, [r7, #15]
 800558c:	e010      	b.n	80055b0 <UG_Init+0xac>
   {
      g->driver[i].driver = NULL;
 800558e:	7bfb      	ldrb	r3, [r7, #15]
 8005590:	687a      	ldr	r2, [r7, #4]
 8005592:	3307      	adds	r3, #7
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	2200      	movs	r2, #0
 800559a:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	3307      	adds	r3, #7
 80055a2:	00db      	lsls	r3, r3, #3
 80055a4:	4413      	add	r3, r2
 80055a6:	2200      	movs	r2, #0
 80055a8:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	3301      	adds	r3, #1
 80055ae:	73fb      	strb	r3, [r7, #15]
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b03      	cmp	r3, #3
 80055b4:	d9eb      	bls.n	800558e <UG_Init+0x8a>
   }

   gui = g;
 80055b6:	4a05      	ldr	r2, [pc, #20]	; (80055cc <UG_Init+0xc8>)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6013      	str	r3, [r2, #0]
   return 1;
 80055bc:	2301      	movs	r3, #1
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	200004f0 	.word	0x200004f0

080055d0 <UG_GetGUI>:
   gui = g;
   return 1;
}

UG_GUI* UG_GetGUI( void )
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
   return gui;
 80055d4:	4b03      	ldr	r3, [pc, #12]	; (80055e4 <UG_GetGUI+0x14>)
 80055d6:	681b      	ldr	r3, [r3, #0]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	200004f0 	.word	0x200004f0

080055e8 <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80055f0:	4b04      	ldr	r3, [pc, #16]	; (8005604 <UG_FontSelect+0x1c>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	611a      	str	r2, [r3, #16]
}
 80055f8:	bf00      	nop
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr
 8005604:	200004f0 	.word	0x200004f0

08005608 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af02      	add	r7, sp, #8
 800560e:	4603      	mov	r3, r0
 8005610:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8005612:	4b0e      	ldr	r3, [pc, #56]	; (800564c <UG_FillScreen+0x44>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	b21a      	sxth	r2, r3
 8005624:	4b09      	ldr	r3, [pc, #36]	; (800564c <UG_FillScreen+0x44>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29b      	uxth	r3, r3
 8005634:	b219      	sxth	r1, r3
 8005636:	88fb      	ldrh	r3, [r7, #6]
 8005638:	9300      	str	r3, [sp, #0]
 800563a:	460b      	mov	r3, r1
 800563c:	2100      	movs	r1, #0
 800563e:	2000      	movs	r0, #0
 8005640:	f000 f806 	bl	8005650 <UG_FillFrame>
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	200004f0 	.word	0x200004f0

08005650 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005650:	b5b0      	push	{r4, r5, r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af02      	add	r7, sp, #8
 8005656:	4604      	mov	r4, r0
 8005658:	4608      	mov	r0, r1
 800565a:	4611      	mov	r1, r2
 800565c:	461a      	mov	r2, r3
 800565e:	4623      	mov	r3, r4
 8005660:	80fb      	strh	r3, [r7, #6]
 8005662:	4603      	mov	r3, r0
 8005664:	80bb      	strh	r3, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	807b      	strh	r3, [r7, #2]
 800566a:	4613      	mov	r3, r2
 800566c:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800566e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005676:	429a      	cmp	r2, r3
 8005678:	da05      	bge.n	8005686 <UG_FillFrame+0x36>
     swap(x1,x2);
 800567a:	88fb      	ldrh	r3, [r7, #6]
 800567c:	817b      	strh	r3, [r7, #10]
 800567e:	887b      	ldrh	r3, [r7, #2]
 8005680:	80fb      	strh	r3, [r7, #6]
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 8005686:	f9b7 2000 	ldrsh.w	r2, [r7]
 800568a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	da05      	bge.n	800569e <UG_FillFrame+0x4e>
     swap(y1,y2);
 8005692:	88bb      	ldrh	r3, [r7, #4]
 8005694:	813b      	strh	r3, [r7, #8]
 8005696:	883b      	ldrh	r3, [r7, #0]
 8005698:	80bb      	strh	r3, [r7, #4]
 800569a:	893b      	ldrh	r3, [r7, #8]
 800569c:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <UG_FillFrame+0xe0>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d012      	beq.n	80056d4 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80056ae:	4b20      	ldr	r3, [pc, #128]	; (8005730 <UG_FillFrame+0xe0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b4:	461d      	mov	r5, r3
 80056b6:	f9b7 4000 	ldrsh.w	r4, [r7]
 80056ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80056be:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056c2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056c6:	8c3b      	ldrh	r3, [r7, #32]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4623      	mov	r3, r4
 80056cc:	47a8      	blx	r5
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d028      	beq.n	8005726 <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80056d4:	88bb      	ldrh	r3, [r7, #4]
 80056d6:	81bb      	strh	r3, [r7, #12]
 80056d8:	e01e      	b.n	8005718 <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	81fb      	strh	r3, [r7, #14]
 80056de:	e00f      	b.n	8005700 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80056e0:	4b13      	ldr	r3, [pc, #76]	; (8005730 <UG_FillFrame+0xe0>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	8c3a      	ldrh	r2, [r7, #32]
 80056ea:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80056ee:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80056f2:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80056f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3301      	adds	r3, #1
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	81fb      	strh	r3, [r7, #14]
 8005700:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005704:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005708:	429a      	cmp	r2, r3
 800570a:	dde9      	ble.n	80056e0 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800570c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005710:	b29b      	uxth	r3, r3
 8005712:	3301      	adds	r3, #1
 8005714:	b29b      	uxth	r3, r3
 8005716:	81bb      	strh	r3, [r7, #12]
 8005718:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800571c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005720:	429a      	cmp	r2, r3
 8005722:	ddda      	ble.n	80056da <UG_FillFrame+0x8a>
 8005724:	e000      	b.n	8005728 <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005726:	bf00      	nop
      }
   }
}
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bdb0      	pop	{r4, r5, r7, pc}
 800572e:	bf00      	nop
 8005730:	200004f0 	.word	0x200004f0

08005734 <UG_DrawMesh>:
     x++;
   }
}

void UG_DrawMesh( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_U16 spacing, UG_COLOR c )
{
 8005734:	b590      	push	{r4, r7, lr}
 8005736:	b087      	sub	sp, #28
 8005738:	af02      	add	r7, sp, #8
 800573a:	4604      	mov	r4, r0
 800573c:	4608      	mov	r0, r1
 800573e:	4611      	mov	r1, r2
 8005740:	461a      	mov	r2, r3
 8005742:	4623      	mov	r3, r4
 8005744:	80fb      	strh	r3, [r7, #6]
 8005746:	4603      	mov	r3, r0
 8005748:	80bb      	strh	r3, [r7, #4]
 800574a:	460b      	mov	r3, r1
 800574c:	807b      	strh	r3, [r7, #2]
 800574e:	4613      	mov	r3, r2
 8005750:	803b      	strh	r3, [r7, #0]
   UG_U16 p;

   if ( x2 < x1 )
 8005752:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005756:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800575a:	429a      	cmp	r2, r3
 800575c:	da05      	bge.n	800576a <UG_DrawMesh+0x36>
     swap(x1,x2);
 800575e:	88fb      	ldrh	r3, [r7, #6]
 8005760:	81bb      	strh	r3, [r7, #12]
 8005762:	887b      	ldrh	r3, [r7, #2]
 8005764:	80fb      	strh	r3, [r7, #6]
 8005766:	89bb      	ldrh	r3, [r7, #12]
 8005768:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 800576a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800576e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	da05      	bge.n	8005782 <UG_DrawMesh+0x4e>
     swap(y1,y2);
 8005776:	88bb      	ldrh	r3, [r7, #4]
 8005778:	817b      	strh	r3, [r7, #10]
 800577a:	883b      	ldrh	r3, [r7, #0]
 800577c:	80bb      	strh	r3, [r7, #4]
 800577e:	897b      	ldrh	r3, [r7, #10]
 8005780:	803b      	strh	r3, [r7, #0]

   for( p=y1; p<y2; p+=spacing )
 8005782:	88bb      	ldrh	r3, [r7, #4]
 8005784:	81fb      	strh	r3, [r7, #14]
 8005786:	e010      	b.n	80057aa <UG_DrawMesh+0x76>
   {
     UG_DrawLine(x1, p, x2, p, c);
 8005788:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800578c:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8005790:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005794:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	4623      	mov	r3, r4
 800579e:	f000 fa61 	bl	8005c64 <UG_DrawLine>
   for( p=y1; p<y2; p+=spacing )
 80057a2:	89fa      	ldrh	r2, [r7, #14]
 80057a4:	8c3b      	ldrh	r3, [r7, #32]
 80057a6:	4413      	add	r3, r2
 80057a8:	81fb      	strh	r3, [r7, #14]
 80057aa:	89fa      	ldrh	r2, [r7, #14]
 80057ac:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	dbe9      	blt.n	8005788 <UG_DrawMesh+0x54>
   }
   UG_DrawLine(x1, y2, x2, y2, c);
 80057b4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80057b8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057bc:	f9b7 1000 	ldrsh.w	r1, [r7]
 80057c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80057c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	4623      	mov	r3, r4
 80057ca:	f000 fa4b 	bl	8005c64 <UG_DrawLine>

   for( p=x1; p<x2; p+=spacing )
 80057ce:	88fb      	ldrh	r3, [r7, #6]
 80057d0:	81fb      	strh	r3, [r7, #14]
 80057d2:	e010      	b.n	80057f6 <UG_DrawMesh+0xc2>
   {
     UG_DrawLine(p, y1, p, y2, c);
 80057d4:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80057d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80057dc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80057e0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80057e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	4623      	mov	r3, r4
 80057ea:	f000 fa3b 	bl	8005c64 <UG_DrawLine>
   for( p=x1; p<x2; p+=spacing )
 80057ee:	89fa      	ldrh	r2, [r7, #14]
 80057f0:	8c3b      	ldrh	r3, [r7, #32]
 80057f2:	4413      	add	r3, r2
 80057f4:	81fb      	strh	r3, [r7, #14]
 80057f6:	89fa      	ldrh	r2, [r7, #14]
 80057f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	dbe9      	blt.n	80057d4 <UG_DrawMesh+0xa0>
   }
   UG_DrawLine(x2, y1, x2, y2, c);
 8005800:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005804:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005808:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800580c:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005812:	9300      	str	r3, [sp, #0]
 8005814:	4623      	mov	r3, r4
 8005816:	f000 fa25 	bl	8005c64 <UG_DrawLine>
}
 800581a:	bf00      	nop
 800581c:	3714      	adds	r7, #20
 800581e:	46bd      	mov	sp, r7
 8005820:	bd90      	pop	{r4, r7, pc}

08005822 <UG_DrawFrame>:

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005822:	b590      	push	{r4, r7, lr}
 8005824:	b085      	sub	sp, #20
 8005826:	af02      	add	r7, sp, #8
 8005828:	4604      	mov	r4, r0
 800582a:	4608      	mov	r0, r1
 800582c:	4611      	mov	r1, r2
 800582e:	461a      	mov	r2, r3
 8005830:	4623      	mov	r3, r4
 8005832:	80fb      	strh	r3, [r7, #6]
 8005834:	4603      	mov	r3, r0
 8005836:	80bb      	strh	r3, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8005840:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005844:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005848:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800584c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005850:	8b3b      	ldrh	r3, [r7, #24]
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4623      	mov	r3, r4
 8005856:	f000 fa05 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 800585a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800585e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005862:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005866:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800586a:	8b3b      	ldrh	r3, [r7, #24]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	4623      	mov	r3, r4
 8005870:	f000 f9f8 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 8005874:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005878:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800587c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005880:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005884:	8b3b      	ldrh	r3, [r7, #24]
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4623      	mov	r3, r4
 800588a:	f000 f9eb 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 800588e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005892:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005896:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800589a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 800589e:	8b3b      	ldrh	r3, [r7, #24]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	4623      	mov	r3, r4
 80058a4:	f000 f9de 	bl	8005c64 <UG_DrawLine>
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd90      	pop	{r4, r7, pc}

080058b0 <UG_DrawPixel>:
   UG_DrawArc(x1+r, y2-r, r, 0x30, c);
   UG_DrawArc(x2-r, y2-r, r, 0xC0, c);
}

void UG_DrawPixel( UG_S16 x0, UG_S16 y0, UG_COLOR c )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	80fb      	strh	r3, [r7, #6]
 80058ba:	460b      	mov	r3, r1
 80058bc:	80bb      	strh	r3, [r7, #4]
 80058be:	4613      	mov	r3, r2
 80058c0:	807b      	strh	r3, [r7, #2]
   gui->device->pset(x0,y0,c);
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <UG_DrawPixel+0x30>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	887a      	ldrh	r2, [r7, #2]
 80058cc:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80058d0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80058d4:	4798      	blx	r3
}
 80058d6:	bf00      	nop
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	200004f0 	.word	0x200004f0

080058e4 <UG_DrawCircle>:

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 80058e4:	b590      	push	{r4, r7, lr}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4604      	mov	r4, r0
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4623      	mov	r3, r4
 80058f4:	80fb      	strh	r3, [r7, #6]
 80058f6:	4603      	mov	r3, r0
 80058f8:	80bb      	strh	r3, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	807b      	strh	r3, [r7, #2]
 80058fe:	4613      	mov	r3, r2
 8005900:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 8005902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f2c0 80c8 	blt.w	8005a9c <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 800590c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005910:	2b00      	cmp	r3, #0
 8005912:	f2c0 80c5 	blt.w	8005aa0 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 8005916:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f340 80c2 	ble.w	8005aa4 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8005920:	887b      	ldrh	r3, [r7, #2]
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	b29b      	uxth	r3, r3
 8005926:	f1c3 0301 	rsb	r3, r3, #1
 800592a:	b29b      	uxth	r3, r3
 800592c:	827b      	strh	r3, [r7, #18]
   yd = 0;
 800592e:	2300      	movs	r3, #0
 8005930:	823b      	strh	r3, [r7, #16]
   e = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	81fb      	strh	r3, [r7, #14]
   x = r;
 8005936:	887b      	ldrh	r3, [r7, #2]
 8005938:	82fb      	strh	r3, [r7, #22]
   y = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 800593e:	e0a5      	b.n	8005a8c <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8005940:	4b5a      	ldr	r3, [pc, #360]	; (8005aac <UG_DrawCircle+0x1c8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	88f9      	ldrh	r1, [r7, #6]
 800594a:	8afa      	ldrh	r2, [r7, #22]
 800594c:	1a8a      	subs	r2, r1, r2
 800594e:	b292      	uxth	r2, r2
 8005950:	b210      	sxth	r0, r2
 8005952:	88b9      	ldrh	r1, [r7, #4]
 8005954:	8aba      	ldrh	r2, [r7, #20]
 8005956:	440a      	add	r2, r1
 8005958:	b292      	uxth	r2, r2
 800595a:	b211      	sxth	r1, r2
 800595c:	883a      	ldrh	r2, [r7, #0]
 800595e:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8005960:	4b52      	ldr	r3, [pc, #328]	; (8005aac <UG_DrawCircle+0x1c8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	88f9      	ldrh	r1, [r7, #6]
 800596a:	8afa      	ldrh	r2, [r7, #22]
 800596c:	1a8a      	subs	r2, r1, r2
 800596e:	b292      	uxth	r2, r2
 8005970:	b210      	sxth	r0, r2
 8005972:	88b9      	ldrh	r1, [r7, #4]
 8005974:	8aba      	ldrh	r2, [r7, #20]
 8005976:	1a8a      	subs	r2, r1, r2
 8005978:	b292      	uxth	r2, r2
 800597a:	b211      	sxth	r1, r2
 800597c:	883a      	ldrh	r2, [r7, #0]
 800597e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8005980:	4b4a      	ldr	r3, [pc, #296]	; (8005aac <UG_DrawCircle+0x1c8>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	88f9      	ldrh	r1, [r7, #6]
 800598a:	8afa      	ldrh	r2, [r7, #22]
 800598c:	440a      	add	r2, r1
 800598e:	b292      	uxth	r2, r2
 8005990:	b210      	sxth	r0, r2
 8005992:	88b9      	ldrh	r1, [r7, #4]
 8005994:	8aba      	ldrh	r2, [r7, #20]
 8005996:	440a      	add	r2, r1
 8005998:	b292      	uxth	r2, r2
 800599a:	b211      	sxth	r1, r2
 800599c:	883a      	ldrh	r2, [r7, #0]
 800599e:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 80059a0:	4b42      	ldr	r3, [pc, #264]	; (8005aac <UG_DrawCircle+0x1c8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	88f9      	ldrh	r1, [r7, #6]
 80059aa:	8afa      	ldrh	r2, [r7, #22]
 80059ac:	440a      	add	r2, r1
 80059ae:	b292      	uxth	r2, r2
 80059b0:	b210      	sxth	r0, r2
 80059b2:	88b9      	ldrh	r1, [r7, #4]
 80059b4:	8aba      	ldrh	r2, [r7, #20]
 80059b6:	1a8a      	subs	r2, r1, r2
 80059b8:	b292      	uxth	r2, r2
 80059ba:	b211      	sxth	r1, r2
 80059bc:	883a      	ldrh	r2, [r7, #0]
 80059be:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 80059c0:	4b3a      	ldr	r3, [pc, #232]	; (8005aac <UG_DrawCircle+0x1c8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	88f9      	ldrh	r1, [r7, #6]
 80059ca:	8aba      	ldrh	r2, [r7, #20]
 80059cc:	1a8a      	subs	r2, r1, r2
 80059ce:	b292      	uxth	r2, r2
 80059d0:	b210      	sxth	r0, r2
 80059d2:	88b9      	ldrh	r1, [r7, #4]
 80059d4:	8afa      	ldrh	r2, [r7, #22]
 80059d6:	440a      	add	r2, r1
 80059d8:	b292      	uxth	r2, r2
 80059da:	b211      	sxth	r1, r2
 80059dc:	883a      	ldrh	r2, [r7, #0]
 80059de:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 80059e0:	4b32      	ldr	r3, [pc, #200]	; (8005aac <UG_DrawCircle+0x1c8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	88f9      	ldrh	r1, [r7, #6]
 80059ea:	8aba      	ldrh	r2, [r7, #20]
 80059ec:	1a8a      	subs	r2, r1, r2
 80059ee:	b292      	uxth	r2, r2
 80059f0:	b210      	sxth	r0, r2
 80059f2:	88b9      	ldrh	r1, [r7, #4]
 80059f4:	8afa      	ldrh	r2, [r7, #22]
 80059f6:	1a8a      	subs	r2, r1, r2
 80059f8:	b292      	uxth	r2, r2
 80059fa:	b211      	sxth	r1, r2
 80059fc:	883a      	ldrh	r2, [r7, #0]
 80059fe:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 8005a00:	4b2a      	ldr	r3, [pc, #168]	; (8005aac <UG_DrawCircle+0x1c8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	88f9      	ldrh	r1, [r7, #6]
 8005a0a:	8aba      	ldrh	r2, [r7, #20]
 8005a0c:	440a      	add	r2, r1
 8005a0e:	b292      	uxth	r2, r2
 8005a10:	b210      	sxth	r0, r2
 8005a12:	88b9      	ldrh	r1, [r7, #4]
 8005a14:	8afa      	ldrh	r2, [r7, #22]
 8005a16:	440a      	add	r2, r1
 8005a18:	b292      	uxth	r2, r2
 8005a1a:	b211      	sxth	r1, r2
 8005a1c:	883a      	ldrh	r2, [r7, #0]
 8005a1e:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8005a20:	4b22      	ldr	r3, [pc, #136]	; (8005aac <UG_DrawCircle+0x1c8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	88f9      	ldrh	r1, [r7, #6]
 8005a2a:	8aba      	ldrh	r2, [r7, #20]
 8005a2c:	440a      	add	r2, r1
 8005a2e:	b292      	uxth	r2, r2
 8005a30:	b210      	sxth	r0, r2
 8005a32:	88b9      	ldrh	r1, [r7, #4]
 8005a34:	8afa      	ldrh	r2, [r7, #22]
 8005a36:	1a8a      	subs	r2, r1, r2
 8005a38:	b292      	uxth	r2, r2
 8005a3a:	b211      	sxth	r1, r2
 8005a3c:	883a      	ldrh	r2, [r7, #0]
 8005a3e:	4798      	blx	r3

      y++;
 8005a40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	3301      	adds	r3, #1
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8005a4c:	89fa      	ldrh	r2, [r7, #14]
 8005a4e:	8a3b      	ldrh	r3, [r7, #16]
 8005a50:	4413      	add	r3, r2
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 8005a56:	8a3b      	ldrh	r3, [r7, #16]
 8005a58:	3302      	adds	r3, #2
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8005a5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005a62:	005a      	lsls	r2, r3, #1
 8005a64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a68:	4413      	add	r3, r2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	dd0e      	ble.n	8005a8c <UG_DrawCircle+0x1a8>
      {
         x--;
 8005a6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	82fb      	strh	r3, [r7, #22]
         e += xd;
 8005a7a:	89fa      	ldrh	r2, [r7, #14]
 8005a7c:	8a7b      	ldrh	r3, [r7, #18]
 8005a7e:	4413      	add	r3, r2
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8005a84:	8a7b      	ldrh	r3, [r7, #18]
 8005a86:	3302      	adds	r3, #2
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8005a8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8005a90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	f6bf af53 	bge.w	8005940 <UG_DrawCircle+0x5c>
 8005a9a:	e004      	b.n	8005aa6 <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8005a9c:	bf00      	nop
 8005a9e:	e002      	b.n	8005aa6 <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8005aa0:	bf00      	nop
 8005aa2:	e000      	b.n	8005aa6 <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8005aa4:	bf00      	nop
      }
   }
}
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd90      	pop	{r4, r7, pc}
 8005aac:	200004f0 	.word	0x200004f0

08005ab0 <UG_FillCircle>:

void UG_FillCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 8005ab0:	b590      	push	{r4, r7, lr}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af02      	add	r7, sp, #8
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	4608      	mov	r0, r1
 8005aba:	4611      	mov	r1, r2
 8005abc:	461a      	mov	r2, r3
 8005abe:	4623      	mov	r3, r4
 8005ac0:	80fb      	strh	r3, [r7, #6]
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80bb      	strh	r3, [r7, #4]
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	807b      	strh	r3, [r7, #2]
 8005aca:	4613      	mov	r3, r2
 8005acc:	803b      	strh	r3, [r7, #0]
   UG_S16  x,y,xd;

   if ( x0<0 ) return;
 8005ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f2c0 80bd 	blt.w	8005c52 <UG_FillCircle+0x1a2>
   if ( y0<0 ) return;
 8005ad8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f2c0 80ba 	blt.w	8005c56 <UG_FillCircle+0x1a6>
   if ( r<=0 ) return;
 8005ae2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	f340 80b7 	ble.w	8005c5a <UG_FillCircle+0x1aa>

   xd = 3 - (r << 1);
 8005aec:	887b      	ldrh	r3, [r7, #2]
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	f1c3 0303 	rsb	r3, r3, #3
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	817b      	strh	r3, [r7, #10]
   x = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	81fb      	strh	r3, [r7, #14]
   y = r;
 8005afe:	887b      	ldrh	r3, [r7, #2]
 8005b00:	81bb      	strh	r3, [r7, #12]

   while ( x <= y )
 8005b02:	e095      	b.n	8005c30 <UG_FillCircle+0x180>
   {
     if( y > 0 )
 8005b04:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	dd33      	ble.n	8005b74 <UG_FillCircle+0xc4>
     {
        UG_DrawLine(x0 - x, y0 - y,x0 - x, y0 + y, c);
 8005b0c:	88fa      	ldrh	r2, [r7, #6]
 8005b0e:	89fb      	ldrh	r3, [r7, #14]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	b218      	sxth	r0, r3
 8005b16:	88ba      	ldrh	r2, [r7, #4]
 8005b18:	89bb      	ldrh	r3, [r7, #12]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	b29b      	uxth	r3, r3
 8005b1e:	b219      	sxth	r1, r3
 8005b20:	88fa      	ldrh	r2, [r7, #6]
 8005b22:	89fb      	ldrh	r3, [r7, #14]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	b21c      	sxth	r4, r3
 8005b2a:	88ba      	ldrh	r2, [r7, #4]
 8005b2c:	89bb      	ldrh	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	b21a      	sxth	r2, r3
 8005b34:	883b      	ldrh	r3, [r7, #0]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	4622      	mov	r2, r4
 8005b3c:	f000 f892 	bl	8005c64 <UG_DrawLine>
        UG_DrawLine(x0 + x, y0 - y,x0 + x, y0 + y, c);
 8005b40:	88fa      	ldrh	r2, [r7, #6]
 8005b42:	89fb      	ldrh	r3, [r7, #14]
 8005b44:	4413      	add	r3, r2
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	b218      	sxth	r0, r3
 8005b4a:	88ba      	ldrh	r2, [r7, #4]
 8005b4c:	89bb      	ldrh	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	b219      	sxth	r1, r3
 8005b54:	88fa      	ldrh	r2, [r7, #6]
 8005b56:	89fb      	ldrh	r3, [r7, #14]
 8005b58:	4413      	add	r3, r2
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	b21c      	sxth	r4, r3
 8005b5e:	88ba      	ldrh	r2, [r7, #4]
 8005b60:	89bb      	ldrh	r3, [r7, #12]
 8005b62:	4413      	add	r3, r2
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	b21a      	sxth	r2, r3
 8005b68:	883b      	ldrh	r3, [r7, #0]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	4622      	mov	r2, r4
 8005b70:	f000 f878 	bl	8005c64 <UG_DrawLine>
     }
     if( x > 0 )
 8005b74:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	dd33      	ble.n	8005be4 <UG_FillCircle+0x134>
     {
        UG_DrawLine(x0 - y, y0 - x,x0 - y, y0 + x, c);
 8005b7c:	88fa      	ldrh	r2, [r7, #6]
 8005b7e:	89bb      	ldrh	r3, [r7, #12]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	b218      	sxth	r0, r3
 8005b86:	88ba      	ldrh	r2, [r7, #4]
 8005b88:	89fb      	ldrh	r3, [r7, #14]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	b219      	sxth	r1, r3
 8005b90:	88fa      	ldrh	r2, [r7, #6]
 8005b92:	89bb      	ldrh	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	b21c      	sxth	r4, r3
 8005b9a:	88ba      	ldrh	r2, [r7, #4]
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	b21a      	sxth	r2, r3
 8005ba4:	883b      	ldrh	r3, [r7, #0]
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	4622      	mov	r2, r4
 8005bac:	f000 f85a 	bl	8005c64 <UG_DrawLine>
        UG_DrawLine(x0 + y, y0 - x,x0 + y, y0 + x, c);
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	89bb      	ldrh	r3, [r7, #12]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	b218      	sxth	r0, r3
 8005bba:	88ba      	ldrh	r2, [r7, #4]
 8005bbc:	89fb      	ldrh	r3, [r7, #14]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	b219      	sxth	r1, r3
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	89bb      	ldrh	r3, [r7, #12]
 8005bc8:	4413      	add	r3, r2
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	b21c      	sxth	r4, r3
 8005bce:	88ba      	ldrh	r2, [r7, #4]
 8005bd0:	89fb      	ldrh	r3, [r7, #14]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	b21a      	sxth	r2, r3
 8005bd8:	883b      	ldrh	r3, [r7, #0]
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	4622      	mov	r2, r4
 8005be0:	f000 f840 	bl	8005c64 <UG_DrawLine>
     }
     if ( xd < 0 )
 8005be4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	da09      	bge.n	8005c00 <UG_FillCircle+0x150>
     {
        xd += (x << 2) + 6;
 8005bec:	89fb      	ldrh	r3, [r7, #14]
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	897b      	ldrh	r3, [r7, #10]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3306      	adds	r3, #6
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	817b      	strh	r3, [r7, #10]
 8005bfe:	e011      	b.n	8005c24 <UG_FillCircle+0x174>
     }
     else
     {
        xd += ((x - y) << 2) + 10;
 8005c00:	89fa      	ldrh	r2, [r7, #14]
 8005c02:	89bb      	ldrh	r3, [r7, #12]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	b29a      	uxth	r2, r3
 8005c0c:	897b      	ldrh	r3, [r7, #10]
 8005c0e:	4413      	add	r3, r2
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	330a      	adds	r3, #10
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	817b      	strh	r3, [r7, #10]
        y--;
 8005c18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	81bb      	strh	r3, [r7, #12]
     }
     x++;
 8005c24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	81fb      	strh	r3, [r7, #14]
   while ( x <= y )
 8005c30:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8005c34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	f77f af63 	ble.w	8005b04 <UG_FillCircle+0x54>
   }
   UG_DrawCircle(x0, y0, r,c);
 8005c3e:	883b      	ldrh	r3, [r7, #0]
 8005c40:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005c44:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005c48:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005c4c:	f7ff fe4a 	bl	80058e4 <UG_DrawCircle>
 8005c50:	e004      	b.n	8005c5c <UG_FillCircle+0x1ac>
   if ( x0<0 ) return;
 8005c52:	bf00      	nop
 8005c54:	e002      	b.n	8005c5c <UG_FillCircle+0x1ac>
   if ( y0<0 ) return;
 8005c56:	bf00      	nop
 8005c58:	e000      	b.n	8005c5c <UG_FillCircle+0x1ac>
   if ( r<=0 ) return;
 8005c5a:	bf00      	nop
}
 8005c5c:	3714      	adds	r7, #20
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd90      	pop	{r4, r7, pc}
	...

08005c64 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8005c64:	b5b0      	push	{r4, r5, r7, lr}
 8005c66:	b08a      	sub	sp, #40	; 0x28
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	4608      	mov	r0, r1
 8005c6e:	4611      	mov	r1, r2
 8005c70:	461a      	mov	r2, r3
 8005c72:	4623      	mov	r3, r4
 8005c74:	80fb      	strh	r3, [r7, #6]
 8005c76:	4603      	mov	r3, r0
 8005c78:	80bb      	strh	r3, [r7, #4]
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	807b      	strh	r3, [r7, #2]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 8005c82:	4b67      	ldr	r3, [pc, #412]	; (8005e20 <UG_DrawLine+0x1bc>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d013      	beq.n	8005cba <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005c92:	4b63      	ldr	r3, [pc, #396]	; (8005e20 <UG_DrawLine+0x1bc>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c98:	461d      	mov	r5, r3
 8005c9a:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005c9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005ca2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005ca6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005caa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8005cac:	9300      	str	r3, [sp, #0]
 8005cae:	4623      	mov	r3, r4
 8005cb0:	47a8      	blx	r5
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 80ae 	beq.w	8005e16 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 8005cba:	887a      	ldrh	r2, [r7, #2]
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	1ad3      	subs	r3, r2, r3
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 8005cc4:	883a      	ldrh	r2, [r7, #0]
 8005cc6:	88bb      	ldrh	r3, [r7, #4]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 8005cce:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	bfb8      	it	lt
 8005cd6:	425b      	neglt	r3, r3
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 8005cdc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	bfb8      	it	lt
 8005ce4:	425b      	neglt	r3, r3
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 8005cea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	dd01      	ble.n	8005cf6 <UG_DrawLine+0x92>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e001      	b.n	8005cfa <UG_DrawLine+0x96>
 8005cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cfa:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 8005cfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	dd01      	ble.n	8005d08 <UG_DrawLine+0xa4>
 8005d04:	2301      	movs	r3, #1
 8005d06:	e001      	b.n	8005d0c <UG_DrawLine+0xa8>
 8005d08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d0c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 8005d0e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d12:	105b      	asrs	r3, r3, #1
 8005d14:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8005d16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d1a:	105b      	asrs	r3, r3, #1
 8005d1c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 8005d1e:	88fb      	ldrh	r3, [r7, #6]
 8005d20:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8005d22:	88bb      	ldrh	r3, [r7, #4]
 8005d24:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8005d26:	4b3e      	ldr	r3, [pc, #248]	; (8005e20 <UG_DrawLine+0x1bc>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005d30:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005d34:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005d38:	4798      	blx	r3

   if( dxabs >= dyabs )
 8005d3a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8005d3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	db33      	blt.n	8005dae <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8005d46:	2300      	movs	r3, #0
 8005d48:	83fb      	strh	r3, [r7, #30]
 8005d4a:	e029      	b.n	8005da0 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 8005d4c:	8b7a      	ldrh	r2, [r7, #26]
 8005d4e:	89fb      	ldrh	r3, [r7, #14]
 8005d50:	4413      	add	r3, r2
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8005d56:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8005d5a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	db09      	blt.n	8005d76 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8005d62:	8b7a      	ldrh	r2, [r7, #26]
 8005d64:	8a3b      	ldrh	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 8005d6c:	8afa      	ldrh	r2, [r7, #22]
 8005d6e:	897b      	ldrh	r3, [r7, #10]
 8005d70:	4413      	add	r3, r2
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 8005d76:	8b3a      	ldrh	r2, [r7, #24]
 8005d78:	89bb      	ldrh	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 8005d80:	4b27      	ldr	r3, [pc, #156]	; (8005e20 <UG_DrawLine+0x1bc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005d8a:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005d8e:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005d92:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 8005d94:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	83fb      	strh	r3, [r7, #30]
 8005da0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005da4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	dbcf      	blt.n	8005d4c <UG_DrawLine+0xe8>
 8005dac:	e034      	b.n	8005e18 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 8005dae:	2300      	movs	r3, #0
 8005db0:	83fb      	strh	r3, [r7, #30]
 8005db2:	e029      	b.n	8005e08 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 8005db4:	8bba      	ldrh	r2, [r7, #28]
 8005db6:	8a3b      	ldrh	r3, [r7, #16]
 8005db8:	4413      	add	r3, r2
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 8005dbe:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8005dc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	db09      	blt.n	8005dde <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 8005dca:	8bba      	ldrh	r2, [r7, #28]
 8005dcc:	89fb      	ldrh	r3, [r7, #14]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8005dd4:	8b3a      	ldrh	r2, [r7, #24]
 8005dd6:	89bb      	ldrh	r3, [r7, #12]
 8005dd8:	4413      	add	r3, r2
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 8005dde:	8afa      	ldrh	r2, [r7, #22]
 8005de0:	897b      	ldrh	r3, [r7, #10]
 8005de2:	4413      	add	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8005de8:	4b0d      	ldr	r3, [pc, #52]	; (8005e20 <UG_DrawLine+0x1bc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8005df2:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8005df6:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005dfa:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 8005dfc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3301      	adds	r3, #1
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	83fb      	strh	r3, [r7, #30]
 8005e08:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005e0c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e10:	429a      	cmp	r2, r3
 8005e12:	dbcf      	blt.n	8005db4 <UG_DrawLine+0x150>
 8005e14:	e000      	b.n	8005e18 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8005e16:	bf00      	nop
      }
   }  
}
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	200004f0 	.word	0x200004f0

08005e24 <UG_DrawTriangle>:


/* Draw a triangle */
void UG_DrawTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af02      	add	r7, sp, #8
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	4608      	mov	r0, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	461a      	mov	r2, r3
 8005e32:	4623      	mov	r3, r4
 8005e34:	80fb      	strh	r3, [r7, #6]
 8005e36:	4603      	mov	r3, r0
 8005e38:	80bb      	strh	r3, [r7, #4]
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	807b      	strh	r3, [r7, #2]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	803b      	strh	r3, [r7, #0]
  UG_DrawLine(x1, y1, x2, y2, c);
 8005e42:	f9b7 4000 	ldrsh.w	r4, [r7]
 8005e46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005e4a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005e4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005e52:	8c3b      	ldrh	r3, [r7, #32]
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4623      	mov	r3, r4
 8005e58:	f7ff ff04 	bl	8005c64 <UG_DrawLine>
  UG_DrawLine(x2, y2, x3, y3, c);
 8005e5c:	f9b7 401c 	ldrsh.w	r4, [r7, #28]
 8005e60:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8005e64:	f9b7 1000 	ldrsh.w	r1, [r7]
 8005e68:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8005e6c:	8c3b      	ldrh	r3, [r7, #32]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	4623      	mov	r3, r4
 8005e72:	f7ff fef7 	bl	8005c64 <UG_DrawLine>
  UG_DrawLine(x3, y3, x1, y1, c);
 8005e76:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005e7a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005e7e:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8005e82:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8005e86:	8c3b      	ldrh	r3, [r7, #32]
 8005e88:	9300      	str	r3, [sp, #0]
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	f7ff feea 	bl	8005c64 <UG_DrawLine>
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd90      	pop	{r4, r7, pc}

08005e98 <UG_FillTriangle>:

/* Fill a triangle */
void UG_FillTriangle( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_S16 x3, UG_S16 y3, UG_COLOR c ){
 8005e98:	b590      	push	{r4, r7, lr}
 8005e9a:	b08f      	sub	sp, #60	; 0x3c
 8005e9c:	af02      	add	r7, sp, #8
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	4608      	mov	r0, r1
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	4623      	mov	r3, r4
 8005ea8:	80fb      	strh	r3, [r7, #6]
 8005eaa:	4603      	mov	r3, r0
 8005eac:	80bb      	strh	r3, [r7, #4]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	807b      	strh	r3, [r7, #2]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	803b      	strh	r3, [r7, #0]

  UG_S16 a, b, y, last;

  /* Sort coordinates by Y order (y3 >= y2 >= y1) */
  if (y1 > y2) {
 8005eb6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005eba:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	dd0b      	ble.n	8005eda <UG_FillTriangle+0x42>
    swap(y1, y2); swap(x1, x2);
 8005ec2:	88bb      	ldrh	r3, [r7, #4]
 8005ec4:	847b      	strh	r3, [r7, #34]	; 0x22
 8005ec6:	883b      	ldrh	r3, [r7, #0]
 8005ec8:	80bb      	strh	r3, [r7, #4]
 8005eca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ecc:	803b      	strh	r3, [r7, #0]
 8005ece:	88fb      	ldrh	r3, [r7, #6]
 8005ed0:	843b      	strh	r3, [r7, #32]
 8005ed2:	887b      	ldrh	r3, [r7, #2]
 8005ed4:	80fb      	strh	r3, [r7, #6]
 8005ed6:	8c3b      	ldrh	r3, [r7, #32]
 8005ed8:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 8005eda:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005ede:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	dd0f      	ble.n	8005f06 <UG_FillTriangle+0x6e>
    swap(y3, y2); swap(x3, x2);
 8005ee6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8005eea:	83fb      	strh	r3, [r7, #30]
 8005eec:	883b      	ldrh	r3, [r7, #0]
 8005eee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8005ef2:	8bfb      	ldrh	r3, [r7, #30]
 8005ef4:	803b      	strh	r3, [r7, #0]
 8005ef6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005efa:	83bb      	strh	r3, [r7, #28]
 8005efc:	887b      	ldrh	r3, [r7, #2]
 8005efe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005f02:	8bbb      	ldrh	r3, [r7, #28]
 8005f04:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 8005f06:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f0a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	dd0b      	ble.n	8005f2a <UG_FillTriangle+0x92>
    swap(y1, y2); swap(x1, x2);
 8005f12:	88bb      	ldrh	r3, [r7, #4]
 8005f14:	837b      	strh	r3, [r7, #26]
 8005f16:	883b      	ldrh	r3, [r7, #0]
 8005f18:	80bb      	strh	r3, [r7, #4]
 8005f1a:	8b7b      	ldrh	r3, [r7, #26]
 8005f1c:	803b      	strh	r3, [r7, #0]
 8005f1e:	88fb      	ldrh	r3, [r7, #6]
 8005f20:	833b      	strh	r3, [r7, #24]
 8005f22:	887b      	ldrh	r3, [r7, #2]
 8005f24:	80fb      	strh	r3, [r7, #6]
 8005f26:	8b3b      	ldrh	r3, [r7, #24]
 8005f28:	807b      	strh	r3, [r7, #2]
  }

  /* Handle awkward all-on-same-line case as its own thing */
  if (y1 == y3) {
 8005f2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8005f2e:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d138      	bne.n	8005fa8 <UG_FillTriangle+0x110>
    a = b = x1;
 8005f36:	88fb      	ldrh	r3, [r7, #6]
 8005f38:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005f3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    if (x2 < a) {
 8005f3e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f42:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005f46:	429a      	cmp	r2, r3
 8005f48:	da02      	bge.n	8005f50 <UG_FillTriangle+0xb8>
      a = x2;
 8005f4a:	887b      	ldrh	r3, [r7, #2]
 8005f4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005f4e:	e007      	b.n	8005f60 <UG_FillTriangle+0xc8>
    } else if (x2 > b) {
 8005f50:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8005f54:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	dd01      	ble.n	8005f60 <UG_FillTriangle+0xc8>
      b = x2;
 8005f5c:	887b      	ldrh	r3, [r7, #2]
 8005f5e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    if (x3 < a) {
 8005f60:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8005f64:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	da03      	bge.n	8005f74 <UG_FillTriangle+0xdc>
      a = x3;
 8005f6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005f72:	e008      	b.n	8005f86 <UG_FillTriangle+0xee>
    } else if (x3 > b) {
 8005f74:	f9b7 2040 	ldrsh.w	r2, [r7, #64]	; 0x40
 8005f78:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	dd02      	ble.n	8005f86 <UG_FillTriangle+0xee>
      b = x3;
 8005f80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005f84:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y1, b + 1, y1, c);
 8005f86:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f88:	3301      	adds	r3, #1
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	b21a      	sxth	r2, r3
 8005f8e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 8005f92:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8005f96:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8005f9a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8005f9e:	9300      	str	r3, [sp, #0]
 8005fa0:	4623      	mov	r3, r4
 8005fa2:	f7ff fe5f 	bl	8005c64 <UG_DrawLine>
    return;
 8005fa6:	e0dc      	b.n	8006162 <UG_FillTriangle+0x2ca>
  }

  UG_S16
  dx01 = x2 - x1,
 8005fa8:	887a      	ldrh	r2, [r7, #2]
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	82fb      	strh	r3, [r7, #22]
  dy01 = y2 - y1,
 8005fb2:	883a      	ldrh	r2, [r7, #0]
 8005fb4:	88bb      	ldrh	r3, [r7, #4]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	82bb      	strh	r3, [r7, #20]
  dx02 = x3 - x1,
 8005fbc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005fc0:	88fb      	ldrh	r3, [r7, #6]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	827b      	strh	r3, [r7, #18]
  dy02 = y3 - y1,
 8005fc8:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8005fcc:	88bb      	ldrh	r3, [r7, #4]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	823b      	strh	r3, [r7, #16]
  dx12 = x3 - x2,
 8005fd4:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8005fd8:	887b      	ldrh	r3, [r7, #2]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	81fb      	strh	r3, [r7, #14]
  dy12 = y3 - y2,
 8005fe0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8005fe4:	883b      	ldrh	r3, [r7, #0]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	81bb      	strh	r3, [r7, #12]
  sa   = 0,
 8005fec:	2300      	movs	r3, #0
 8005fee:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb   = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	84bb      	strh	r3, [r7, #36]	; 0x24
   * is included here (and second loop will be skipped, avoiding a /0
   * error there), otherwise scanline y2 is skipped here and handled
   * in the second loop...which also avoids a /0 error here if y1=y2
   * (flat-topped triangle).
   */
  if (y2 == y3) {
 8005ff4:	f9b7 2000 	ldrsh.w	r2, [r7]
 8005ff8:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d102      	bne.n	8006006 <UG_FillTriangle+0x16e>
    last = y2;   /* Include y2 scanline */
 8006000:	883b      	ldrh	r3, [r7, #0]
 8006002:	853b      	strh	r3, [r7, #40]	; 0x28
 8006004:	e003      	b.n	800600e <UG_FillTriangle+0x176>
  } else {
    last = y2 - 1; /* Skip it */
 8006006:	883b      	ldrh	r3, [r7, #0]
 8006008:	3b01      	subs	r3, #1
 800600a:	b29b      	uxth	r3, r3
 800600c:	853b      	strh	r3, [r7, #40]	; 0x28
  }

  for (y = y1; y <= last; y++) {
 800600e:	88bb      	ldrh	r3, [r7, #4]
 8006010:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006012:	e041      	b.n	8006098 <UG_FillTriangle+0x200>
    a   = x1 + sa / dy01;
 8006014:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006018:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800601c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006020:	b29a      	uxth	r2, r3
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	4413      	add	r3, r2
 8006026:	b29b      	uxth	r3, r3
 8006028:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 800602a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800602e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006032:	fb92 f3f3 	sdiv	r3, r2, r3
 8006036:	b29a      	uxth	r2, r3
 8006038:	88fb      	ldrh	r3, [r7, #6]
 800603a:	4413      	add	r3, r2
 800603c:	b29b      	uxth	r3, r3
 800603e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx01;
 8006040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006042:	8afb      	ldrh	r3, [r7, #22]
 8006044:	4413      	add	r3, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 800604a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800604c:	8a7b      	ldrh	r3, [r7, #18]
 800604e:	4413      	add	r3, r2
 8006050:	b29b      	uxth	r3, r3
 8006052:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 8006054:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006058:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	dd05      	ble.n	800606c <UG_FillTriangle+0x1d4>
      swap(a, b);
 8006060:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006062:	813b      	strh	r3, [r7, #8]
 8006064:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006066:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006068:	893b      	ldrh	r3, [r7, #8]
 800606a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 800606c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800606e:	3301      	adds	r3, #1
 8006070:	b29b      	uxth	r3, r3
 8006072:	b21a      	sxth	r2, r3
 8006074:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8006078:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800607c:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006080:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	4623      	mov	r3, r4
 8006088:	f7ff fdec 	bl	8005c64 <UG_DrawLine>
  for (y = y1; y <= last; y++) {
 800608c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3301      	adds	r3, #1
 8006094:	b29b      	uxth	r3, r3
 8006096:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006098:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800609c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80060a0:	429a      	cmp	r2, r3
 80060a2:	ddb7      	ble.n	8006014 <UG_FillTriangle+0x17c>
  }

  /* For lower part of triangle, find scanline crossings for segments
   * 0-2 and 1-2.  This loop is skipped if y2=y3.
   */
  sa = dx12 * (y - y2);
 80060a4:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80060a8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	89fb      	ldrh	r3, [r7, #14]
 80060b2:	fb12 f303 	smulbb	r3, r2, r3
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	84fb      	strh	r3, [r7, #38]	; 0x26
  sb = dx02 * (y - y1);
 80060ba:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 80060be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	b29a      	uxth	r2, r3
 80060c6:	8a7b      	ldrh	r3, [r7, #18]
 80060c8:	fb12 f303 	smulbb	r3, r2, r3
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (; y <= y3; y++) {
 80060d0:	e041      	b.n	8006156 <UG_FillTriangle+0x2be>
    a   = x2 + sa / dy12;
 80060d2:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 80060d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80060da:	fb92 f3f3 	sdiv	r3, r2, r3
 80060de:	b29a      	uxth	r2, r3
 80060e0:	887b      	ldrh	r3, [r7, #2]
 80060e2:	4413      	add	r3, r2
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    b   = x1 + sb / dy02;
 80060e8:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 80060ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80060f0:	fb92 f3f3 	sdiv	r3, r2, r3
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	88fb      	ldrh	r3, [r7, #6]
 80060f8:	4413      	add	r3, r2
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	85bb      	strh	r3, [r7, #44]	; 0x2c
    sa += dx12;
 80060fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006100:	89fb      	ldrh	r3, [r7, #14]
 8006102:	4413      	add	r3, r2
 8006104:	b29b      	uxth	r3, r3
 8006106:	84fb      	strh	r3, [r7, #38]	; 0x26
    sb += dx02;
 8006108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800610a:	8a7b      	ldrh	r3, [r7, #18]
 800610c:	4413      	add	r3, r2
 800610e:	b29b      	uxth	r3, r3
 8006110:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* longhand:
       a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
       b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
       */
    if (a > b) {
 8006112:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8006116:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800611a:	429a      	cmp	r2, r3
 800611c:	dd05      	ble.n	800612a <UG_FillTriangle+0x292>
      swap(a, b);
 800611e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006120:	817b      	strh	r3, [r7, #10]
 8006122:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006124:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	85bb      	strh	r3, [r7, #44]	; 0x2c
    }
    UG_DrawLine(a, y, b + 1, y, c);
 800612a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800612c:	3301      	adds	r3, #1
 800612e:	b29b      	uxth	r3, r3
 8006130:	b21a      	sxth	r2, r3
 8006132:	f9b7 402a 	ldrsh.w	r4, [r7, #42]	; 0x2a
 8006136:	f9b7 102a 	ldrsh.w	r1, [r7, #42]	; 0x2a
 800613a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 800613e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006142:	9300      	str	r3, [sp, #0]
 8006144:	4623      	mov	r3, r4
 8006146:	f7ff fd8d 	bl	8005c64 <UG_DrawLine>
  for (; y <= y3; y++) {
 800614a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	3301      	adds	r3, #1
 8006152:	b29b      	uxth	r3, r3
 8006154:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006156:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800615a:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800615e:	429a      	cmp	r2, r3
 8006160:	ddb7      	ble.n	80060d2 <UG_FillTriangle+0x23a>
  }
}
 8006162:	3734      	adds	r7, #52	; 0x34
 8006164:	46bd      	mov	sp, r7
 8006166:	bd90      	pop	{r4, r7, pc}

08006168 <UG_PutString>:

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8006168:	b590      	push	{r4, r7, lr}
 800616a:	b087      	sub	sp, #28
 800616c:	af02      	add	r7, sp, #8
 800616e:	4603      	mov	r3, r0
 8006170:	603a      	str	r2, [r7, #0]
 8006172:	80fb      	strh	r3, [r7, #6]
 8006174:	460b      	mov	r3, r1
 8006176:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800617c:	88bb      	ldrh	r3, [r7, #4]
 800617e:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 8006180:	4b3c      	ldr	r3, [pc, #240]	; (8006274 <UG_PutString+0x10c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fa4e 	bl	8006628 <_UG_FontSelect>
   while ( *str != 0 )
 800618c:	e054      	b.n	8006238 <UG_PutString+0xd0>
      }
      else{
         chr = *str++;
      }
      #else
      chr = *str++;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	603a      	str	r2, [r7, #0]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	72fb      	strb	r3, [r7, #11]
      #endif

      if ( chr == '\n' )
 8006198:	7afb      	ldrb	r3, [r7, #11]
 800619a:	2b0a      	cmp	r3, #10
 800619c:	d105      	bne.n	80061aa <UG_PutString+0x42>
      {
         xp = gui->device->x_dim;
 800619e:	4b35      	ldr	r3, [pc, #212]	; (8006274 <UG_PutString+0x10c>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	81fb      	strh	r3, [r7, #14]
         continue;
 80061a8:	e046      	b.n	8006238 <UG_PutString+0xd0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80061aa:	7afb      	ldrb	r3, [r7, #11]
 80061ac:	2100      	movs	r1, #0
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 f8ea 	bl	8006388 <_UG_GetCharData>
 80061b4:	4603      	mov	r3, r0
 80061b6:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80061b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061c0:	d100      	bne.n	80061c4 <UG_PutString+0x5c>
 80061c2:	e039      	b.n	8006238 <UG_PutString+0xd0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80061c4:	4b2b      	ldr	r3, [pc, #172]	; (8006274 <UG_PutString+0x10c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061ce:	4619      	mov	r1, r3
 80061d0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80061d4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80061d8:	4413      	add	r3, r2
 80061da:	4299      	cmp	r1, r3
 80061dc:	dc11      	bgt.n	8006202 <UG_PutString+0x9a>
      {
         xp = x;
 80061de:	88fb      	ldrh	r3, [r7, #6]
 80061e0:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80061e2:	4b24      	ldr	r3, [pc, #144]	; (8006274 <UG_PutString+0x10c>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	7ddb      	ldrb	r3, [r3, #23]
 80061e8:	b21a      	sxth	r2, r3
 80061ea:	4b22      	ldr	r3, [pc, #136]	; (8006274 <UG_PutString+0x10c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f993 3032 	ldrsb.w	r3, [r3, #50]	; 0x32
 80061f2:	b21b      	sxth	r3, r3
 80061f4:	4413      	add	r3, r2
 80061f6:	b21b      	sxth	r3, r3
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	89bb      	ldrh	r3, [r7, #12]
 80061fc:	4413      	add	r3, r2
 80061fe:	b29b      	uxth	r3, r3
 8006200:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8006202:	4b1c      	ldr	r3, [pc, #112]	; (8006274 <UG_PutString+0x10c>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	8e9c      	ldrh	r4, [r3, #52]	; 0x34
 8006208:	4b1a      	ldr	r3, [pc, #104]	; (8006274 <UG_PutString+0x10c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800620e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8006212:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8006216:	7af8      	ldrb	r0, [r7, #11]
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4623      	mov	r3, r4
 800621c:	f000 fa82 	bl	8006724 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 8006220:	4b14      	ldr	r3, [pc, #80]	; (8006274 <UG_PutString+0x10c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8006228:	b29a      	uxth	r2, r3
 800622a:	893b      	ldrh	r3, [r7, #8]
 800622c:	4413      	add	r3, r2
 800622e:	b29a      	uxth	r2, r3
 8006230:	89fb      	ldrh	r3, [r7, #14]
 8006232:	4413      	add	r3, r2
 8006234:	b29b      	uxth	r3, r3
 8006236:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1a6      	bne.n	800618e <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 8006240:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <UG_PutString+0x10c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006248:	f003 0302 	and.w	r3, r3, #2
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00c      	beq.n	800626a <UG_PutString+0x102>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 8006250:	4b08      	ldr	r3, [pc, #32]	; (8006274 <UG_PutString+0x10c>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006256:	461c      	mov	r4, r3
 8006258:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800625c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006260:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006268:	47a0      	blx	r4
}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bd90      	pop	{r4, r7, pc}
 8006272:	bf00      	nop
 8006274:	200004f0 	.word	0x200004f0

08006278 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8006278:	b480      	push	{r7}
 800627a:	b083      	sub	sp, #12
 800627c:	af00      	add	r7, sp, #0
 800627e:	4603      	mov	r3, r0
 8006280:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <UG_SetForecolor+0x20>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	88fa      	ldrh	r2, [r7, #6]
 8006288:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
 8006296:	bf00      	nop
 8006298:	200004f0 	.word	0x200004f0

0800629c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	4603      	mov	r3, r0
 80062a4:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <UG_SetBackcolor+0x20>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	88fa      	ldrh	r2, [r7, #6]
 80062ac:	86da      	strh	r2, [r3, #54]	; 0x36
}
 80062ae:	bf00      	nop
 80062b0:	370c      	adds	r7, #12
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	200004f0 	.word	0x200004f0

080062c0 <UG_GetXDim>:

UG_S16 UG_GetXDim( void )
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
   return gui->device->x_dim;
 80062c4:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <UG_GetXDim+0x18>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	200004f0 	.word	0x200004f0

080062dc <UG_GetYDim>:

UG_S16 UG_GetYDim( void )
{
 80062dc:	b480      	push	{r7}
 80062de:	af00      	add	r7, sp, #0
   return gui->device->y_dim;
 80062e0:	4b04      	ldr	r3, [pc, #16]	; (80062f4 <UG_GetYDim+0x18>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	200004f0 	.word	0x200004f0

080062f8 <UG_FontSetHSpace>:

void UG_FontSetHSpace( UG_U16 s )
{
 80062f8:	b480      	push	{r7}
 80062fa:	b083      	sub	sp, #12
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8006302:	4b06      	ldr	r3, [pc, #24]	; (800631c <UG_FontSetHSpace+0x24>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	88fa      	ldrh	r2, [r7, #6]
 8006308:	b252      	sxtb	r2, r2
 800630a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	200004f0 	.word	0x200004f0

08006320 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	4603      	mov	r3, r0
 8006328:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800632a:	4b06      	ldr	r3, [pc, #24]	; (8006344 <UG_FontSetVSpace+0x24>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	88fa      	ldrh	r2, [r7, #6]
 8006330:	b252      	sxtb	r2, r2
 8006332:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
 8006336:	bf00      	nop
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	200004f0 	.word	0x200004f0

08006348 <UG_FontSetTransparency>:

void UG_FontSetTransparency( UG_U8 t )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
 800634e:	4603      	mov	r3, r0
 8006350:	71fb      	strb	r3, [r7, #7]
  gui->transparent_font=t;
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <UG_FontSetTransparency+0x20>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	79fa      	ldrb	r2, [r7, #7]
 8006358:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	200004f0 	.word	0x200004f0

0800636c <UG_FontGetTransparency>:

UG_U8 UG_FontGetTransparency( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return gui->transparent_font;
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <UG_FontGetTransparency+0x18>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 8006378:	4618      	mov	r0, r3
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	200004f0 	.word	0x200004f0

08006388 <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	6039      	str	r1, [r7, #0]
 8006392:	71fb      	strb	r3, [r7, #7]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8006394:	2300      	movs	r3, #0
 8006396:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 8006398:	2300      	movs	r3, #0
 800639a:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 800639c:	2300      	movs	r3, #0
 800639e:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 80063a4:	2300      	movs	r3, #0
 80063a6:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 80063a8:	4b9a      	ldr	r3, [pc, #616]	; (8006614 <_UG_GetCharData+0x28c>)
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	4b9a      	ldr	r3, [pc, #616]	; (8006618 <_UG_GetCharData+0x290>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d10f      	bne.n	80063d6 <_UG_GetCharData+0x4e>
 80063b6:	4b99      	ldr	r3, [pc, #612]	; (800661c <_UG_GetCharData+0x294>)
 80063b8:	781b      	ldrb	r3, [r3, #0]
 80063ba:	79fa      	ldrb	r2, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d10a      	bne.n	80063d6 <_UG_GetCharData+0x4e>
    if(p){
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 80063c6:	4b96      	ldr	r3, [pc, #600]	; (8006620 <_UG_GetCharData+0x298>)
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 80063ce:	4b95      	ldr	r3, [pc, #596]	; (8006624 <_UG_GetCharData+0x29c>)
 80063d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063d4:	e119      	b.n	800660a <_UG_GetCharData+0x282>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 80063d6:	4b8f      	ldr	r3, [pc, #572]	; (8006614 <_UG_GetCharData+0x28c>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	7d5b      	ldrb	r3, [r3, #21]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d07d      	beq.n	80064dc <_UG_GetCharData+0x154>
    switch ( encoding )
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	2bfc      	cmp	r3, #252	; 0xfc
 80063e4:	f300 80ce 	bgt.w	8006584 <_UG_GetCharData+0x1fc>
 80063e8:	2bd6      	cmp	r3, #214	; 0xd6
 80063ea:	da09      	bge.n	8006400 <_UG_GetCharData+0x78>
 80063ec:	2bc4      	cmp	r3, #196	; 0xc4
 80063ee:	d06c      	beq.n	80064ca <_UG_GetCharData+0x142>
 80063f0:	2bc4      	cmp	r3, #196	; 0xc4
 80063f2:	f300 80c7 	bgt.w	8006584 <_UG_GetCharData+0x1fc>
 80063f6:	2bb0      	cmp	r3, #176	; 0xb0
 80063f8:	d06d      	beq.n	80064d6 <_UG_GetCharData+0x14e>
 80063fa:	2bb5      	cmp	r3, #181	; 0xb5
 80063fc:	d068      	beq.n	80064d0 <_UG_GetCharData+0x148>
 80063fe:	e06e      	b.n	80064de <_UG_GetCharData+0x156>
 8006400:	3bd6      	subs	r3, #214	; 0xd6
 8006402:	2b26      	cmp	r3, #38	; 0x26
 8006404:	f200 80be 	bhi.w	8006584 <_UG_GetCharData+0x1fc>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <_UG_GetCharData+0x88>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	080064b3 	.word	0x080064b3
 8006414:	08006585 	.word	0x08006585
 8006418:	08006585 	.word	0x08006585
 800641c:	08006585 	.word	0x08006585
 8006420:	08006585 	.word	0x08006585
 8006424:	08006585 	.word	0x08006585
 8006428:	080064bf 	.word	0x080064bf
 800642c:	08006585 	.word	0x08006585
 8006430:	08006585 	.word	0x08006585
 8006434:	08006585 	.word	0x08006585
 8006438:	08006585 	.word	0x08006585
 800643c:	08006585 	.word	0x08006585
 8006440:	08006585 	.word	0x08006585
 8006444:	08006585 	.word	0x08006585
 8006448:	080064c5 	.word	0x080064c5
 800644c:	08006585 	.word	0x08006585
 8006450:	08006585 	.word	0x08006585
 8006454:	08006585 	.word	0x08006585
 8006458:	08006585 	.word	0x08006585
 800645c:	08006585 	.word	0x08006585
 8006460:	08006585 	.word	0x08006585
 8006464:	08006585 	.word	0x08006585
 8006468:	08006585 	.word	0x08006585
 800646c:	08006585 	.word	0x08006585
 8006470:	08006585 	.word	0x08006585
 8006474:	08006585 	.word	0x08006585
 8006478:	08006585 	.word	0x08006585
 800647c:	08006585 	.word	0x08006585
 8006480:	08006585 	.word	0x08006585
 8006484:	08006585 	.word	0x08006585
 8006488:	08006585 	.word	0x08006585
 800648c:	08006585 	.word	0x08006585
 8006490:	080064ad 	.word	0x080064ad
 8006494:	08006585 	.word	0x08006585
 8006498:	08006585 	.word	0x08006585
 800649c:	08006585 	.word	0x08006585
 80064a0:	08006585 	.word	0x08006585
 80064a4:	08006585 	.word	0x08006585
 80064a8:	080064b9 	.word	0x080064b9
    {
       case 0xF6: encoding = 0x94; break; // ö
 80064ac:	2394      	movs	r3, #148	; 0x94
 80064ae:	71fb      	strb	r3, [r7, #7]
 80064b0:	e015      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xD6: encoding = 0x99; break; // Ö
 80064b2:	2399      	movs	r3, #153	; 0x99
 80064b4:	71fb      	strb	r3, [r7, #7]
 80064b6:	e012      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xFC: encoding = 0x81; break; // ü
 80064b8:	2381      	movs	r3, #129	; 0x81
 80064ba:	71fb      	strb	r3, [r7, #7]
 80064bc:	e00f      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xDC: encoding = 0x9A; break; // Ü
 80064be:	239a      	movs	r3, #154	; 0x9a
 80064c0:	71fb      	strb	r3, [r7, #7]
 80064c2:	e00c      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xE4: encoding = 0x84; break; // ä
 80064c4:	2384      	movs	r3, #132	; 0x84
 80064c6:	71fb      	strb	r3, [r7, #7]
 80064c8:	e009      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xC4: encoding = 0x8E; break; // Ä
 80064ca:	238e      	movs	r3, #142	; 0x8e
 80064cc:	71fb      	strb	r3, [r7, #7]
 80064ce:	e006      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xB5: encoding = 0xE6; break; // µ
 80064d0:	23e6      	movs	r3, #230	; 0xe6
 80064d2:	71fb      	strb	r3, [r7, #7]
 80064d4:	e003      	b.n	80064de <_UG_GetCharData+0x156>
       case 0xB0: encoding = 0xF8; break; // °
 80064d6:	23f8      	movs	r3, #248	; 0xf8
 80064d8:	71fb      	strb	r3, [r7, #7]
 80064da:	e000      	b.n	80064de <_UG_GetCharData+0x156>
    }
  }
 80064dc:	bf00      	nop

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 80064de:	e051      	b.n	8006584 <_UG_GetCharData+0x1fc>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 80064e0:	4b4c      	ldr	r3, [pc, #304]	; (8006614 <_UG_GetCharData+0x28c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e6:	8a7a      	ldrh	r2, [r7, #18]
 80064e8:	0052      	lsls	r2, r2, #1
 80064ea:	4413      	add	r3, r2
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe fff1 	bl	80054d4 <ptr_8to16>
 80064f2:	4603      	mov	r3, r0
 80064f4:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 80064f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	da06      	bge.n	800650c <_UG_GetCharData+0x184>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 80064fe:	89fb      	ldrh	r3, [r7, #14]
 8006500:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006504:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8006506:	2301      	movs	r3, #1
 8006508:	747b      	strb	r3, [r7, #17]
 800650a:	e038      	b.n	800657e <_UG_GetCharData+0x1f6>
    }
    else if(range)                                                  // If range previously set, this is the range end
 800650c:	7c7b      	ldrb	r3, [r7, #17]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d025      	beq.n	800655e <_UG_GetCharData+0x1d6>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	b29b      	uxth	r3, r3
 8006516:	8afa      	ldrh	r2, [r7, #22]
 8006518:	429a      	cmp	r2, r3
 800651a:	d80f      	bhi.n	800653c <_UG_GetCharData+0x1b4>
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	b29b      	uxth	r3, r3
 8006520:	89fa      	ldrh	r2, [r7, #14]
 8006522:	429a      	cmp	r2, r3
 8006524:	d30a      	bcc.n	800653c <_UG_GetCharData+0x1b4>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	b29a      	uxth	r2, r3
 800652a:	8afb      	ldrh	r3, [r7, #22]
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	b29a      	uxth	r2, r3
 8006530:	8abb      	ldrh	r3, [r7, #20]
 8006532:	4413      	add	r3, r2
 8006534:	82bb      	strh	r3, [r7, #20]
        found=1;
 8006536:	2301      	movs	r3, #1
 8006538:	743b      	strb	r3, [r7, #16]
        break;
 800653a:	e02d      	b.n	8006598 <_UG_GetCharData+0x210>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	b29b      	uxth	r3, r3
 8006540:	8afa      	ldrh	r2, [r7, #22]
 8006542:	429a      	cmp	r2, r3
 8006544:	d825      	bhi.n	8006592 <_UG_GetCharData+0x20a>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8006546:	89fa      	ldrh	r2, [r7, #14]
 8006548:	8afb      	ldrh	r3, [r7, #22]
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	b29a      	uxth	r2, r3
 800654e:	8abb      	ldrh	r3, [r7, #20]
 8006550:	4413      	add	r3, r2
 8006552:	b29b      	uxth	r3, r3
 8006554:	3301      	adds	r3, #1
 8006556:	82bb      	strh	r3, [r7, #20]
      range=0;
 8006558:	2300      	movs	r3, #0
 800655a:	747b      	strb	r3, [r7, #17]
 800655c:	e00f      	b.n	800657e <_UG_GetCharData+0x1f6>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	b29b      	uxth	r3, r3
 8006562:	89fa      	ldrh	r2, [r7, #14]
 8006564:	429a      	cmp	r2, r3
 8006566:	d102      	bne.n	800656e <_UG_GetCharData+0x1e6>
      {
        found=1;
 8006568:	2301      	movs	r3, #1
 800656a:	743b      	strb	r3, [r7, #16]
        break;
 800656c:	e014      	b.n	8006598 <_UG_GetCharData+0x210>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 800656e:	79fb      	ldrb	r3, [r7, #7]
 8006570:	b29b      	uxth	r3, r3
 8006572:	89fa      	ldrh	r2, [r7, #14]
 8006574:	429a      	cmp	r2, r3
 8006576:	d80e      	bhi.n	8006596 <_UG_GetCharData+0x20e>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8006578:	8abb      	ldrh	r3, [r7, #20]
 800657a:	3301      	adds	r3, #1
 800657c:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 800657e:	8a7b      	ldrh	r3, [r7, #18]
 8006580:	3301      	adds	r3, #1
 8006582:	827b      	strh	r3, [r7, #18]
 8006584:	4b23      	ldr	r3, [pc, #140]	; (8006614 <_UG_GetCharData+0x28c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	8b9b      	ldrh	r3, [r3, #28]
 800658a:	8a7a      	ldrh	r2, [r7, #18]
 800658c:	429a      	cmp	r2, r3
 800658e:	d3a7      	bcc.n	80064e0 <_UG_GetCharData+0x158>
 8006590:	e002      	b.n	8006598 <_UG_GetCharData+0x210>
        break;
 8006592:	bf00      	nop
 8006594:	e000      	b.n	8006598 <_UG_GetCharData+0x210>
        break;
 8006596:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8006598:	7c3b      	ldrb	r3, [r7, #16]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d033      	beq.n	8006606 <_UG_GetCharData+0x27e>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 800659e:	4b1d      	ldr	r3, [pc, #116]	; (8006614 <_UG_GetCharData+0x28c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <_UG_GetCharData+0x290>)
 80065a6:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 80065a8:	4a1c      	ldr	r2, [pc, #112]	; (800661c <_UG_GetCharData+0x294>)
 80065aa:	79fb      	ldrb	r3, [r7, #7]
 80065ac:	7013      	strb	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 80065ae:	4b19      	ldr	r3, [pc, #100]	; (8006614 <_UG_GetCharData+0x28c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b4:	8aba      	ldrh	r2, [r7, #20]
 80065b6:	4917      	ldr	r1, [pc, #92]	; (8006614 <_UG_GetCharData+0x28c>)
 80065b8:	6809      	ldr	r1, [r1, #0]
 80065ba:	8b09      	ldrh	r1, [r1, #24]
 80065bc:	fb01 f202 	mul.w	r2, r1, r2
 80065c0:	4413      	add	r3, r2
 80065c2:	4a17      	ldr	r2, [pc, #92]	; (8006620 <_UG_GetCharData+0x298>)
 80065c4:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 80065c6:	4b13      	ldr	r3, [pc, #76]	; (8006614 <_UG_GetCharData+0x28c>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	6a1b      	ldr	r3, [r3, #32]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d009      	beq.n	80065e4 <_UG_GetCharData+0x25c>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 80065d0:	4b10      	ldr	r3, [pc, #64]	; (8006614 <_UG_GetCharData+0x28c>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a1a      	ldr	r2, [r3, #32]
 80065d6:	8abb      	ldrh	r3, [r7, #20]
 80065d8:	4413      	add	r3, r2
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	b21a      	sxth	r2, r3
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <_UG_GetCharData+0x29c>)
 80065e0:	801a      	strh	r2, [r3, #0]
 80065e2:	e005      	b.n	80065f0 <_UG_GetCharData+0x268>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 80065e4:	4b0b      	ldr	r3, [pc, #44]	; (8006614 <_UG_GetCharData+0x28c>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	7d9b      	ldrb	r3, [r3, #22]
 80065ea:	b21a      	sxth	r2, r3
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <_UG_GetCharData+0x29c>)
 80065ee:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <_UG_GetCharData+0x276>
      *p=last_p;                                                    // Load char bitmap address
 80065f6:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <_UG_GetCharData+0x298>)
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 80065fe:	4b09      	ldr	r3, [pc, #36]	; (8006624 <_UG_GetCharData+0x29c>)
 8006600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006604:	e001      	b.n	800660a <_UG_GetCharData+0x282>
  }
  return -1;                                                        // -1 = char not found
 8006606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	200004f0 	.word	0x200004f0
 8006618:	200004f4 	.word	0x200004f4
 800661c:	200004f8 	.word	0x200004f8
 8006620:	200004fc 	.word	0x200004fc
 8006624:	20000500 	.word	0x20000500

08006628 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8006628:	b590      	push	{r4, r7, lr}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8006630:	4b3b      	ldr	r3, [pc, #236]	; (8006720 <_UG_FontSelect+0xf8>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	429a      	cmp	r2, r3
 800663a:	d06c      	beq.n	8006716 <_UG_FontSelect+0xee>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 800663c:	4b38      	ldr	r3, [pc, #224]	; (8006720 <_UG_FontSelect+0xf8>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	62da      	str	r2, [r3, #44]	; 0x2c
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	781a      	ldrb	r2, [r3, #0]
 8006648:	4b35      	ldr	r3, [pc, #212]	; (8006720 <_UG_FontSelect+0xf8>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	751a      	strb	r2, [r3, #20]
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	607a      	str	r2, [r7, #4]
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	b25b      	sxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	da01      	bge.n	8006666 <_UG_FontSelect+0x3e>
 8006662:	2201      	movs	r2, #1
 8006664:	e000      	b.n	8006668 <_UG_FontSelect+0x40>
 8006666:	2200      	movs	r2, #0
 8006668:	4b2d      	ldr	r3, [pc, #180]	; (8006720 <_UG_FontSelect+0xf8>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	b2d2      	uxtb	r2, r2
 800666e:	755a      	strb	r2, [r3, #21]
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	4a2a      	ldr	r2, [pc, #168]	; (8006720 <_UG_FontSelect+0xf8>)
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	781b      	ldrb	r3, [r3, #0]
 800667c:	7593      	strb	r3, [r2, #22]
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	607a      	str	r2, [r7, #4]
 8006684:	4a26      	ldr	r2, [pc, #152]	; (8006720 <_UG_FontSelect+0xf8>)
 8006686:	6812      	ldr	r2, [r2, #0]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	75d3      	strb	r3, [r2, #23]
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 800668c:	4b24      	ldr	r3, [pc, #144]	; (8006720 <_UG_FontSelect+0xf8>)
 800668e:	681c      	ldr	r4, [r3, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f7fe ff1f 	bl	80054d4 <ptr_8to16>
 8006696:	4603      	mov	r3, r0
 8006698:	8363      	strh	r3, [r4, #26]
  font+=2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3302      	adds	r3, #2
 800669e:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 80066a0:	4b1f      	ldr	r3, [pc, #124]	; (8006720 <_UG_FontSelect+0xf8>)
 80066a2:	681c      	ldr	r4, [r3, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f7fe ff15 	bl	80054d4 <ptr_8to16>
 80066aa:	4603      	mov	r3, r0
 80066ac:	83a3      	strh	r3, [r4, #28]
  font+=2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3302      	adds	r3, #2
 80066b2:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <_UG_FontSelect+0xf8>)
 80066b6:	681c      	ldr	r4, [r3, #0]
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fe ff0b 	bl	80054d4 <ptr_8to16>
 80066be:	4603      	mov	r3, r0
 80066c0:	8323      	strh	r3, [r4, #24]
  font+=2;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3302      	adds	r3, #2
 80066c6:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	1c5a      	adds	r2, r3, #1
 80066cc:	607a      	str	r2, [r7, #4]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <_UG_FontSelect+0xc4>
     gui->currentFont.widths = font;                      // Save pointer to width table
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <_UG_FontSelect+0xf8>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	621a      	str	r2, [r3, #32]
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 80066dc:	4b10      	ldr	r3, [pc, #64]	; (8006720 <_UG_FontSelect+0xf8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	8b5b      	ldrh	r3, [r3, #26]
 80066e2:	461a      	mov	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4413      	add	r3, r2
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	e003      	b.n	80066f4 <_UG_FontSelect+0xcc>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <_UG_FontSelect+0xf8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2200      	movs	r2, #0
 80066f2:	621a      	str	r2, [r3, #32]
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 80066f4:	4b0a      	ldr	r3, [pc, #40]	; (8006720 <_UG_FontSelect+0xf8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	625a      	str	r2, [r3, #36]	; 0x24
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 80066fc:	4b08      	ldr	r3, [pc, #32]	; (8006720 <_UG_FontSelect+0xf8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	8b9b      	ldrh	r3, [r3, #28]
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	461a      	mov	r2, r3
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4413      	add	r3, r2
 800670a:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <_UG_FontSelect+0xf8>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
 8006714:	e000      	b.n	8006718 <_UG_FontSelect+0xf0>
    return;
 8006716:	bf00      	nop
}
 8006718:	370c      	adds	r7, #12
 800671a:	46bd      	mov	sp, r7
 800671c:	bd90      	pop	{r4, r7, pc}
 800671e:	bf00      	nop
 8006720:	200004f0 	.word	0x200004f0

08006724 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8006724:	b5b0      	push	{r4, r5, r7, lr}
 8006726:	b08c      	sub	sp, #48	; 0x30
 8006728:	af00      	add	r7, sp, #0
 800672a:	4604      	mov	r4, r0
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4623      	mov	r3, r4
 8006734:	71fb      	strb	r3, [r7, #7]
 8006736:	4603      	mov	r3, r0
 8006738:	80bb      	strh	r3, [r7, #4]
 800673a:	460b      	mov	r3, r1
 800673c:	807b      	strh	r3, [r7, #2]
 800673e:	4613      	mov	r3, r2
 8006740:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8006742:	2300      	movs	r3, #0
 8006744:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006746:	2300      	movs	r3, #0
 8006748:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800674a:	2300      	movs	r3, #0
 800674c:	847b      	strh	r3, [r7, #34]	; 0x22
 800674e:	2300      	movs	r3, #0
 8006750:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8006752:	4b8a      	ldr	r3, [pc, #552]	; (800697c <_UG_PutChar+0x258>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800675a:	75fb      	strb	r3, [r7, #23]
 800675c:	4b87      	ldr	r3, [pc, #540]	; (800697c <_UG_PutChar+0x258>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006764:	f003 0302 	and.w	r3, r3, #2
 8006768:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 800676a:	2300      	movs	r3, #0
 800676c:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 800676e:	f107 0208 	add.w	r2, r7, #8
 8006772:	79fb      	ldrb	r3, [r7, #7]
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f7ff fe06 	bl	8006388 <_UG_GetCharData>
 800677c:	4603      	mov	r3, r0
 800677e:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8006780:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006788:	d102      	bne.n	8006790 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 800678a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800678e:	e21e      	b.n	8006bce <_UG_PutChar+0x4aa>

   bn =  gui->currentFont.char_width;
 8006790:	4b7a      	ldr	r3, [pc, #488]	; (800697c <_UG_PutChar+0x258>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	7d9b      	ldrb	r3, [r3, #22]
 8006796:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8006798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <_UG_PutChar+0x7e>
     return 0;
 800679e:	2300      	movs	r3, #0
 80067a0:	e215      	b.n	8006bce <_UG_PutChar+0x4aa>
   }
   bn >>= 3;
 80067a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067a4:	08db      	lsrs	r3, r3, #3
 80067a6:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 80067a8:	4b74      	ldr	r3, [pc, #464]	; (800697c <_UG_PutChar+0x258>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	7d9b      	ldrb	r3, [r3, #22]
 80067ae:	f003 0307 	and.w	r3, r3, #7
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d002      	beq.n	80067be <_UG_PutChar+0x9a>
 80067b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067ba:	3301      	adds	r3, #1
 80067bc:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 80067be:	7dbb      	ldrb	r3, [r7, #22]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d01c      	beq.n	80067fe <_UG_PutChar+0xda>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 80067c4:	4b6d      	ldr	r3, [pc, #436]	; (800697c <_UG_PutChar+0x258>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	461d      	mov	r5, r3
 80067cc:	88ba      	ldrh	r2, [r7, #4]
 80067ce:	8abb      	ldrh	r3, [r7, #20]
 80067d0:	4413      	add	r3, r2
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	3b01      	subs	r3, #1
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	b21c      	sxth	r4, r3
 80067da:	4b68      	ldr	r3, [pc, #416]	; (800697c <_UG_PutChar+0x258>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	7ddb      	ldrb	r3, [r3, #23]
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	887b      	ldrh	r3, [r7, #2]
 80067e4:	4413      	add	r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	b21b      	sxth	r3, r3
 80067ee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80067f2:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80067f6:	4622      	mov	r2, r4
 80067f8:	47a8      	blx	r5
 80067fa:	4603      	mov	r3, r0
 80067fc:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <_UG_PutChar+0x258>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	7d1b      	ldrb	r3, [r3, #20]
 8006804:	2b00      	cmp	r3, #0
 8006806:	f040 8171 	bne.w	8006aec <_UG_PutChar+0x3c8>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 800680a:	2300      	movs	r3, #0
 800680c:	853b      	strh	r3, [r7, #40]	; 0x28
 800680e:	e0ec      	b.n	80069ea <_UG_PutChar+0x2c6>
     {
       c=0;
 8006810:	2300      	movs	r3, #0
 8006812:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8006814:	2300      	movs	r3, #0
 8006816:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006818:	e0df      	b.n	80069da <_UG_PutChar+0x2b6>
       {
         b = *data++;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	60ba      	str	r2, [r7, #8]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8006824:	2300      	movs	r3, #0
 8006826:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006828:	e0ca      	b.n	80069c0 <_UG_PutChar+0x29c>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 800682a:	7f7b      	ldrb	r3, [r7, #29]
 800682c:	f003 0301 	and.w	r3, r3, #1
 8006830:	2b00      	cmp	r3, #0
 8006832:	d033      	beq.n	800689c <_UG_PutChar+0x178>
           {
             if(driver)
 8006834:	7dbb      	ldrb	r3, [r7, #22]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d01f      	beq.n	800687a <_UG_PutChar+0x156>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 800683a:	8c3b      	ldrh	r3, [r7, #32]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <_UG_PutChar+0x132>
 8006840:	7dfb      	ldrb	r3, [r7, #23]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d107      	bne.n	8006856 <_UG_PutChar+0x132>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8006846:	8c3a      	ldrh	r2, [r7, #32]
 8006848:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	4610      	mov	r0, r2
 8006850:	4798      	blx	r3
                 bpixels=0;
 8006852:	2300      	movs	r3, #0
 8006854:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8006856:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006858:	2b00      	cmp	r3, #0
 800685a:	d10a      	bne.n	8006872 <_UG_PutChar+0x14e>
 800685c:	7dfb      	ldrb	r3, [r7, #23]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d007      	beq.n	8006872 <_UG_PutChar+0x14e>
               {
                 x0=x+c;
 8006862:	88ba      	ldrh	r2, [r7, #4]
 8006864:	8bfb      	ldrh	r3, [r7, #30]
 8006866:	4413      	add	r3, r2
 8006868:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 800686a:	887a      	ldrh	r2, [r7, #2]
 800686c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800686e:	4413      	add	r3, r2
 8006870:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8006872:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006874:	3301      	adds	r3, #1
 8006876:	847b      	strh	r3, [r7, #34]	; 0x22
 8006878:	e096      	b.n	80069a8 <_UG_PutChar+0x284>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 800687a:	4b40      	ldr	r3, [pc, #256]	; (800697c <_UG_PutChar+0x258>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	88b9      	ldrh	r1, [r7, #4]
 8006884:	8bfa      	ldrh	r2, [r7, #30]
 8006886:	440a      	add	r2, r1
 8006888:	b292      	uxth	r2, r2
 800688a:	b210      	sxth	r0, r2
 800688c:	8879      	ldrh	r1, [r7, #2]
 800688e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006890:	440a      	add	r2, r1
 8006892:	b292      	uxth	r2, r2
 8006894:	b211      	sxth	r1, r2
 8006896:	883a      	ldrh	r2, [r7, #0]
 8006898:	4798      	blx	r3
 800689a:	e085      	b.n	80069a8 <_UG_PutChar+0x284>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 800689c:	7dbb      	ldrb	r3, [r7, #22]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d06e      	beq.n	8006980 <_UG_PutChar+0x25c>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 80068a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d064      	beq.n	8006972 <_UG_PutChar+0x24e>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 80068a8:	7dfb      	ldrb	r3, [r7, #23]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d15e      	bne.n	800696c <_UG_PutChar+0x248>
                 {
                   push_pixels(fpixels,fc);
 80068ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80068b0:	8839      	ldrh	r1, [r7, #0]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
                   fpixels=0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80068bc:	e059      	b.n	8006972 <_UG_PutChar+0x24e>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 80068be:	88ba      	ldrh	r2, [r7, #4]
 80068c0:	8abb      	ldrh	r3, [r7, #20]
 80068c2:	4413      	add	r3, r2
 80068c4:	b29a      	uxth	r2, r3
 80068c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 80068cc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d003      	beq.n	80068de <_UG_PutChar+0x1ba>
 80068d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d224      	bcs.n	8006928 <_UG_PutChar+0x204>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 80068de:	4b27      	ldr	r3, [pc, #156]	; (800697c <_UG_PutChar+0x258>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e4:	461d      	mov	r5, r3
 80068e6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 80068ea:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 80068ee:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068f0:	89fb      	ldrh	r3, [r7, #14]
 80068f2:	4413      	add	r3, r2
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	3b01      	subs	r3, #1
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	b21c      	sxth	r4, r3
 80068fc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80068fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006902:	fb92 f3f3 	sdiv	r3, r2, r3
 8006906:	b29a      	uxth	r2, r3
 8006908:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800690a:	4413      	add	r3, r2
 800690c:	b29b      	uxth	r3, r3
 800690e:	b21b      	sxth	r3, r3
 8006910:	4622      	mov	r2, r4
 8006912:	47a8      	blx	r5
 8006914:	4603      	mov	r3, r0
 8006916:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006918:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800691a:	8839      	ldrh	r1, [r7, #0]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	4610      	mov	r0, r2
 8006920:	4798      	blx	r3
                       fpixels=0;
 8006922:	2300      	movs	r3, #0
 8006924:	847b      	strh	r3, [r7, #34]	; 0x22
 8006926:	e021      	b.n	800696c <_UG_PutChar+0x248>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006928:	4b14      	ldr	r3, [pc, #80]	; (800697c <_UG_PutChar+0x258>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692e:	461c      	mov	r4, r3
 8006930:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006934:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006938:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800693a:	89fb      	ldrh	r3, [r7, #14]
 800693c:	4413      	add	r3, r2
 800693e:	b29b      	uxth	r3, r3
 8006940:	3b01      	subs	r3, #1
 8006942:	b29b      	uxth	r3, r3
 8006944:	b21a      	sxth	r2, r3
 8006946:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800694a:	47a0      	blx	r4
 800694c:	4603      	mov	r3, r0
 800694e:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8006950:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006952:	8839      	ldrh	r1, [r7, #0]
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	4610      	mov	r0, r2
 8006958:	4798      	blx	r3
                       fpixels -= width;
 800695a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800695c:	89fb      	ldrh	r3, [r7, #14]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8006962:	88bb      	ldrh	r3, [r7, #4]
 8006964:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8006966:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006968:	3301      	adds	r3, #1
 800696a:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 800696c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1a5      	bne.n	80068be <_UG_PutChar+0x19a>
                     }
                   }
                 }
               }
               bpixels++;
 8006972:	8c3b      	ldrh	r3, [r7, #32]
 8006974:	3301      	adds	r3, #1
 8006976:	843b      	strh	r3, [r7, #32]
 8006978:	e016      	b.n	80069a8 <_UG_PutChar+0x284>
 800697a:	bf00      	nop
 800697c:	200004f0 	.word	0x200004f0
             }
             else if(!trans)                           // Not accelerated output
 8006980:	7dfb      	ldrb	r3, [r7, #23]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d110      	bne.n	80069a8 <_UG_PutChar+0x284>
             {
               gui->device->pset(x+c,y+j,bc);
 8006986:	4b94      	ldr	r3, [pc, #592]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	88b9      	ldrh	r1, [r7, #4]
 8006990:	8bfa      	ldrh	r2, [r7, #30]
 8006992:	440a      	add	r2, r1
 8006994:	b292      	uxth	r2, r2
 8006996:	b210      	sxth	r0, r2
 8006998:	8879      	ldrh	r1, [r7, #2]
 800699a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800699c:	440a      	add	r2, r1
 800699e:	b292      	uxth	r2, r2
 80069a0:	b211      	sxth	r1, r2
 80069a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80069a6:	4798      	blx	r3
             }
           }
           b >>= 1;
 80069a8:	7f7b      	ldrb	r3, [r7, #29]
 80069aa:	085b      	lsrs	r3, r3, #1
 80069ac:	777b      	strb	r3, [r7, #29]
           c++;
 80069ae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	3301      	adds	r3, #1
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 80069ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069bc:	3301      	adds	r3, #1
 80069be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80069c0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80069c2:	2b07      	cmp	r3, #7
 80069c4:	d806      	bhi.n	80069d4 <_UG_PutChar+0x2b0>
 80069c6:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80069ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	f6ff af2b 	blt.w	800682a <_UG_PutChar+0x106>
       for( i=0;i<bn;i++ )
 80069d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80069d6:	3301      	adds	r3, #1
 80069d8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80069da:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80069dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069de:	429a      	cmp	r2, r3
 80069e0:	f4ff af1b 	bcc.w	800681a <_UG_PutChar+0xf6>
     for( j=0;j< gui->currentFont.char_height;j++ )
 80069e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80069e6:	3301      	adds	r3, #1
 80069e8:	853b      	strh	r3, [r7, #40]	; 0x28
 80069ea:	4b7b      	ldr	r3, [pc, #492]	; (8006bd8 <_UG_PutChar+0x4b4>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	7ddb      	ldrb	r3, [r3, #23]
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069f4:	429a      	cmp	r2, r3
 80069f6:	f4ff af0b 	bcc.w	8006810 <_UG_PutChar+0xec>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 80069fa:	7dbb      	ldrb	r3, [r7, #22]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 80e4 	beq.w	8006bca <_UG_PutChar+0x4a6>
       if(bpixels && !trans)
 8006a02:	8c3b      	ldrh	r3, [r7, #32]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d009      	beq.n	8006a1c <_UG_PutChar+0x2f8>
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <_UG_PutChar+0x2f8>
       {
         push_pixels(bpixels,bc);
 8006a0e:	8c3a      	ldrh	r2, [r7, #32]
 8006a10:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	4610      	mov	r0, r2
 8006a18:	4798      	blx	r3
 8006a1a:	e0d6      	b.n	8006bca <_UG_PutChar+0x4a6>
       }
       else if(fpixels)
 8006a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f000 80d3 	beq.w	8006bca <_UG_PutChar+0x4a6>
       {
         if(!trans)
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d15c      	bne.n	8006ae4 <_UG_PutChar+0x3c0>
         {
           push_pixels(fpixels,fc);
 8006a2a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a2c:	8839      	ldrh	r1, [r7, #0]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	4610      	mov	r0, r2
 8006a32:	4798      	blx	r3
 8006a34:	e0c9      	b.n	8006bca <_UG_PutChar+0x4a6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8006a36:	88ba      	ldrh	r2, [r7, #4]
 8006a38:	8abb      	ldrh	r3, [r7, #20]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8006a44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d003      	beq.n	8006a56 <_UG_PutChar+0x332>
 8006a4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a50:	8a3b      	ldrh	r3, [r7, #16]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d224      	bcs.n	8006aa0 <_UG_PutChar+0x37c>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8006a56:	4b60      	ldr	r3, [pc, #384]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a5c:	461d      	mov	r5, r3
 8006a5e:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006a62:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006a66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a68:	8a3b      	ldrh	r3, [r7, #16]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	b21c      	sxth	r4, r3
 8006a74:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006a82:	4413      	add	r3, r2
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	b21b      	sxth	r3, r3
 8006a88:	4622      	mov	r2, r4
 8006a8a:	47a8      	blx	r5
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006a90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006a92:	8839      	ldrh	r1, [r7, #0]
 8006a94:	69bb      	ldr	r3, [r7, #24]
 8006a96:	4610      	mov	r0, r2
 8006a98:	4798      	blx	r3
               fpixels=0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a9e:	e021      	b.n	8006ae4 <_UG_PutChar+0x3c0>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8006aa0:	4b4d      	ldr	r3, [pc, #308]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006aa6:	461c      	mov	r4, r3
 8006aa8:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8006aac:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8006ab0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006ab2:	8a3b      	ldrh	r3, [r7, #16]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	b21a      	sxth	r2, r3
 8006abe:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8006ac2:	47a0      	blx	r4
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8006ac8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006aca:	8839      	ldrh	r1, [r7, #0]
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	4610      	mov	r0, r2
 8006ad0:	4798      	blx	r3
               fpixels -= width;
 8006ad2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006ad4:	8a3b      	ldrh	r3, [r7, #16]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8006ada:	88bb      	ldrh	r3, [r7, #4]
 8006adc:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 8006ade:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006ae0:	3301      	adds	r3, #1
 8006ae2:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8006ae4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1a5      	bne.n	8006a36 <_UG_PutChar+0x312>
 8006aea:	e06e      	b.n	8006bca <_UG_PutChar+0x4a6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 8006aec:	4b3a      	ldr	r3, [pc, #232]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	7d1b      	ldrb	r3, [r3, #20]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d169      	bne.n	8006bca <_UG_PutChar+0x4a6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006af6:	2300      	movs	r3, #0
 8006af8:	853b      	strh	r3, [r7, #40]	; 0x28
 8006afa:	e05f      	b.n	8006bbc <_UG_PutChar+0x498>
     {
       for( i=0;i<actual_char_width;i++ )
 8006afc:	2300      	movs	r3, #0
 8006afe:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b00:	e04a      	b.n	8006b98 <_UG_PutChar+0x474>
       {
         b = *data++;
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	60ba      	str	r2, [r7, #8]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006b0c:	883b      	ldrh	r3, [r7, #0]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	7f7a      	ldrb	r2, [r7, #29]
 8006b12:	fb03 f202 	mul.w	r2, r3, r2
 8006b16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	7f79      	ldrb	r1, [r7, #29]
 8006b1e:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8006b22:	fb01 f303 	mul.w	r3, r1, r3
 8006b26:	4413      	add	r3, r2
 8006b28:	121b      	asrs	r3, r3, #8
 8006b2a:	b21b      	sxth	r3, r3
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 8006b30:	883b      	ldrh	r3, [r7, #0]
 8006b32:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b36:	7f79      	ldrb	r1, [r7, #29]
 8006b38:	fb03 f101 	mul.w	r1, r3, r1
 8006b3c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006b40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006b44:	7f78      	ldrb	r0, [r7, #29]
 8006b46:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006b4a:	fb00 f303 	mul.w	r3, r0, r3
 8006b4e:	440b      	add	r3, r1
 8006b50:	121b      	asrs	r3, r3, #8
 8006b52:	b21b      	sxth	r3, r3
 8006b54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006b58:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	b21b      	sxth	r3, r3
 8006b5e:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 8006b60:	7dbb      	ldrb	r3, [r7, #22]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d005      	beq.n	8006b72 <_UG_PutChar+0x44e>
         {
           push_pixels(1,color);                                                          // Accelerated output
 8006b66:	8a7a      	ldrh	r2, [r7, #18]
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	4798      	blx	r3
 8006b70:	e00f      	b.n	8006b92 <_UG_PutChar+0x46e>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8006b72:	4b19      	ldr	r3, [pc, #100]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	88b9      	ldrh	r1, [r7, #4]
 8006b7c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006b7e:	440a      	add	r2, r1
 8006b80:	b292      	uxth	r2, r2
 8006b82:	b210      	sxth	r0, r2
 8006b84:	8879      	ldrh	r1, [r7, #2]
 8006b86:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006b88:	440a      	add	r2, r1
 8006b8a:	b292      	uxth	r2, r2
 8006b8c:	b211      	sxth	r1, r2
 8006b8e:	8a7a      	ldrh	r2, [r7, #18]
 8006b90:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8006b92:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b94:	3301      	adds	r3, #1
 8006b96:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006b98:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006b9a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	dbaf      	blt.n	8006b02 <_UG_PutChar+0x3de>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	4a0c      	ldr	r2, [pc, #48]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006ba6:	6812      	ldr	r2, [r2, #0]
 8006ba8:	7d92      	ldrb	r2, [r2, #22]
 8006baa:	4611      	mov	r1, r2
 8006bac:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8006bb0:	1a8a      	subs	r2, r1, r2
 8006bb2:	4413      	add	r3, r2
 8006bb4:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8006bb6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006bb8:	3301      	adds	r3, #1
 8006bba:	853b      	strh	r3, [r7, #40]	; 0x28
 8006bbc:	4b06      	ldr	r3, [pc, #24]	; (8006bd8 <_UG_PutChar+0x4b4>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	7ddb      	ldrb	r3, [r3, #23]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d398      	bcc.n	8006afc <_UG_PutChar+0x3d8>
     }
   }
   #endif
   return (actual_char_width);
 8006bca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3730      	adds	r7, #48	; 0x30
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	200004f0 	.word	0x200004f0

08006bdc <_UG_UpdateObjects>:
   }
}
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006bea:	2300      	movs	r3, #0
 8006bec:	82fb      	strh	r3, [r7, #22]
 8006bee:	e01f      	b.n	8006c30 <_UG_UpdateObjects+0x54>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	8afb      	ldrh	r3, [r7, #22]
 8006bf6:	015b      	lsls	r3, r3, #5
 8006bf8:	4413      	add	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	f003 0301 	and.w	r3, r3, #1
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10e      	bne.n	8006c2a <_UG_UpdateObjects+0x4e>
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d009      	beq.n	8006c2a <_UG_UpdateObjects+0x4e>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <_UG_UpdateObjects+0x4e>
         {
            obj->update(wnd,obj);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	6939      	ldr	r1, [r7, #16]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8006c2a:	8afb      	ldrh	r3, [r7, #22]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	82fb      	strh	r3, [r7, #22]
 8006c30:	8afa      	ldrh	r2, [r7, #22]
 8006c32:	8abb      	ldrh	r3, [r7, #20]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d3db      	bcc.n	8006bf0 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8006c38:	bf00      	nop
 8006c3a:	bf00      	nop
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
	...

08006c44 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8006c4c:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 8006c52:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006c54:	2202      	movs	r2, #2
 8006c56:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8006c5e:	2300      	movs	r3, #0
 8006c60:	82fb      	strh	r3, [r7, #22]
 8006c62:	e02f      	b.n	8006cc4 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	8afb      	ldrh	r3, [r7, #22]
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	4413      	add	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8006c76:	7bfb      	ldrb	r3, [r7, #15]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d11e      	bne.n	8006cbe <_UG_HandleEvents+0x7a>
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	f003 0302 	and.w	r3, r3, #2
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d019      	beq.n	8006cbe <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	7e9b      	ldrb	r3, [r3, #26]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d015      	beq.n	8006cbe <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 8006c92:	4a11      	ldr	r2, [pc, #68]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	7e1a      	ldrb	r2, [r3, #24]
 8006c9c:	4b0e      	ldr	r3, [pc, #56]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006c9e:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	7e5a      	ldrb	r2, [r3, #25]
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006ca6:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	7e9a      	ldrb	r2, [r3, #26]
 8006cac:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006cae:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	4808      	ldr	r0, [pc, #32]	; (8006cd8 <_UG_HandleEvents+0x94>)
 8006cb6:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 8006cbe:	8afb      	ldrh	r3, [r7, #22]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	82fb      	strh	r3, [r7, #22]
 8006cc4:	8afa      	ldrh	r2, [r7, #22]
 8006cc6:	8abb      	ldrh	r3, [r7, #20]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d3cb      	bcc.n	8006c64 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 8006ccc:	bf00      	nop
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000504 	.word	0x20000504

08006cdc <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8006cdc:	b590      	push	{r4, r7, lr}
 8006cde:	b08f      	sub	sp, #60	; 0x3c
 8006ce0:	af02      	add	r7, sp, #8
 8006ce2:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8102 	beq.w	8006ef2 <_UG_PutText+0x216>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 80fd 	beq.w	8006ef2 <_UG_PutText+0x216>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	89db      	ldrh	r3, [r3, #14]
 8006cfc:	837b      	strh	r3, [r7, #26]
   UG_S16 ys=txt->a.ys;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	895b      	ldrh	r3, [r3, #10]
 8006d02:	833b      	strh	r3, [r7, #24]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	3302      	adds	r3, #2
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	82fb      	strh	r3, [r7, #22]

   if ( (ye - ys) < char_height ){
 8006d0e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8006d12:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	f2c0 80ea 	blt.w	8006ef6 <_UG_PutText+0x21a>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	891b      	ldrh	r3, [r3, #8]
 8006d26:	82bb      	strh	r3, [r7, #20]
   UG_S16 xe=txt->a.xe;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	899b      	ldrh	r3, [r3, #12]
 8006d2c:	827b      	strh	r3, [r7, #18]
   UG_U8  align=txt->align;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7d1b      	ldrb	r3, [r3, #20]
 8006d32:	747b      	strb	r3, [r7, #17]
   UG_S16 char_h_space=txt->h_space;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	8adb      	ldrh	r3, [r3, #22]
 8006d38:	81fb      	strh	r3, [r7, #14]
   UG_S16 char_v_space=txt->v_space;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	8b1b      	ldrh	r3, [r3, #24]
 8006d3e:	81bb      	strh	r3, [r7, #12]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	623b      	str	r3, [r7, #32]
   char* c = str;
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	61fb      	str	r3, [r7, #28]

   _UG_FontSelect(txt->font);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7ff fc6a 	bl	8006628 <_UG_FontSelect>

   rc=1;
 8006d54:	2301      	movs	r3, #1
 8006d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	61fb      	str	r3, [r7, #28]
     }
     else{
       chr = *c++;
     }
     #else
     chr = *c++;
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	61fa      	str	r2, [r7, #28]
 8006d62:	781b      	ldrb	r3, [r3, #0]
 8006d64:	72fb      	strb	r3, [r7, #11]
     #endif
     if(!chr) break;
 8006d66:	7afb      	ldrb	r3, [r7, #11]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <_UG_PutText+0x9e>
     if ( chr == '\n' ) rc++;
 8006d6c:	7afb      	ldrb	r3, [r7, #11]
 8006d6e:	2b0a      	cmp	r3, #10
 8006d70:	d1f4      	bne.n	8006d5c <_UG_PutText+0x80>
 8006d72:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006d74:	3301      	adds	r3, #1
 8006d76:	85bb      	strh	r3, [r7, #44]	; 0x2c
     chr = *c++;
 8006d78:	e7f0      	b.n	8006d5c <_UG_PutText+0x80>
     if(!chr) break;
 8006d7a:	bf00      	nop
   }

   yp = 0;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 8006d80:	7c7b      	ldrb	r3, [r7, #17]
 8006d82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d01f      	beq.n	8006dca <_UG_PutText+0xee>
   {
      yp = ye - ys + 1;
 8006d8a:	8b7a      	ldrh	r2, [r7, #26]
 8006d8c:	8b3b      	ldrh	r3, [r7, #24]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	3301      	adds	r3, #1
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 8006d98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d9a:	8afb      	ldrh	r3, [r7, #22]
 8006d9c:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8006d9e:	fb11 f303 	smulbb	r3, r1, r3
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 8006daa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006dac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006dae:	3b01      	subs	r3, #1
 8006db0:	b299      	uxth	r1, r3
 8006db2:	89bb      	ldrh	r3, [r7, #12]
 8006db4:	fb11 f303 	smulbb	r3, r1, r3
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	1ad3      	subs	r3, r2, r3
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8006dc0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	f2c0 8098 	blt.w	8006efa <_UG_PutText+0x21e>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8006dca:	7c7b      	ldrb	r3, [r7, #17]
 8006dcc:	f003 0310 	and.w	r3, r3, #16
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d003      	beq.n	8006ddc <_UG_PutText+0x100>
 8006dd4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8006dd8:	105b      	asrs	r3, r3, #1
 8006dda:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8006ddc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006dde:	8b3b      	ldrh	r3, [r7, #24]
 8006de0:	4413      	add	r3, r2
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	61fb      	str	r3, [r7, #28]
      wl = 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	857b      	strh	r3, [r7, #42]	; 0x2a
        }
        else{
          chr = *c++;
        }
        #else
        chr = *c++;
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	61fa      	str	r2, [r7, #28]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	72fb      	strb	r3, [r7, #11]
        #endif
        if( chr == 0 || chr == '\n'){
 8006dfc:	7afb      	ldrb	r3, [r7, #11]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d01b      	beq.n	8006e3a <_UG_PutText+0x15e>
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	2b0a      	cmp	r3, #10
 8006e06:	d018      	beq.n	8006e3a <_UG_PutText+0x15e>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 8006e08:	7afb      	ldrb	r3, [r7, #11]
 8006e0a:	2100      	movs	r1, #0
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff fabb 	bl	8006388 <_UG_GetCharData>
 8006e12:	4603      	mov	r3, r0
 8006e14:	813b      	strh	r3, [r7, #8]
         if (w == -1){continue;}
 8006e16:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1e:	d00a      	beq.n	8006e36 <_UG_PutText+0x15a>
         sl++;
 8006e20:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e22:	3301      	adds	r3, #1
 8006e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 8006e26:	893a      	ldrh	r2, [r7, #8]
 8006e28:	89fb      	ldrh	r3, [r7, #14]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	b29a      	uxth	r2, r3
 8006e2e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e30:	4413      	add	r3, r2
 8006e32:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006e34:	e7dd      	b.n	8006df2 <_UG_PutText+0x116>
         if (w == -1){continue;}
 8006e36:	bf00      	nop
        chr = *c++;
 8006e38:	e7db      	b.n	8006df2 <_UG_PutText+0x116>
      }
      wl -= char_h_space;
 8006e3a:	89fb      	ldrh	r3, [r7, #14]
 8006e3c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8006e3e:	1ad3      	subs	r3, r2, r3
 8006e40:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 8006e42:	8a7a      	ldrh	r2, [r7, #18]
 8006e44:	8abb      	ldrh	r3, [r7, #20]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 8006e50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 8006e5a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	db4d      	blt.n	8006efe <_UG_PutText+0x222>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 8006e62:	7c7b      	ldrb	r3, [r7, #17]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d002      	beq.n	8006e72 <_UG_PutText+0x196>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006e70:	e008      	b.n	8006e84 <_UG_PutText+0x1a8>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 8006e72:	7c7b      	ldrb	r3, [r7, #17]
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d003      	beq.n	8006e84 <_UG_PutText+0x1a8>
 8006e7c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8006e80:	105b      	asrs	r3, r3, #1
 8006e82:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 8006e84:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006e86:	8abb      	ldrh	r3, [r7, #20]
 8006e88:	4413      	add	r3, r2
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	853b      	strh	r3, [r7, #40]	; 0x28
         }
         else{
           chr = *str++;
         }
         #else
         chr = *str++;
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	623a      	str	r2, [r7, #32]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	72fb      	strb	r3, [r7, #11]
         #endif
         if ( chr == 0 ){
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d031      	beq.n	8006f02 <_UG_PutText+0x226>
           return;
         }
         else if(chr=='\n'){
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	2b0a      	cmp	r3, #10
 8006ea2:	d01c      	beq.n	8006ede <_UG_PutText+0x202>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	8a1c      	ldrh	r4, [r3, #16]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	8a5b      	ldrh	r3, [r3, #18]
 8006eac:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8006eb0:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8006eb4:	7af8      	ldrb	r0, [r7, #11]
 8006eb6:	9300      	str	r3, [sp, #0]
 8006eb8:	4623      	mov	r3, r4
 8006eba:	f7ff fc33 	bl	8006724 <_UG_PutChar>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	813b      	strh	r3, [r7, #8]
         if(w!=-1)
 8006ec2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8006ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eca:	d0e0      	beq.n	8006e8e <_UG_PutText+0x1b2>
           xp += w + char_h_space;
 8006ecc:	893a      	ldrh	r2, [r7, #8]
 8006ece:	89fb      	ldrh	r3, [r7, #14]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006ed6:	4413      	add	r3, r2
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	853b      	strh	r3, [r7, #40]	; 0x28
         chr = *str++;
 8006edc:	e7d7      	b.n	8006e8e <_UG_PutText+0x1b2>
           break;
 8006ede:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8006ee0:	8afa      	ldrh	r2, [r7, #22]
 8006ee2:	89bb      	ldrh	r3, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	b29a      	uxth	r2, r3
 8006ee8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006eea:	4413      	add	r3, r2
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8006ef0:	e779      	b.n	8006de6 <_UG_PutText+0x10a>
     return;
 8006ef2:	bf00      	nop
 8006ef4:	e006      	b.n	8006f04 <_UG_PutText+0x228>
     return;
 8006ef6:	bf00      	nop
 8006ef8:	e004      	b.n	8006f04 <_UG_PutText+0x228>
        return;
 8006efa:	bf00      	nop
 8006efc:	e002      	b.n	8006f04 <_UG_PutText+0x228>
      if ( xp < 0 ) break;
 8006efe:	bf00      	nop
 8006f00:	e000      	b.n	8006f04 <_UG_PutText+0x228>
           return;
 8006f02:	bf00      	nop
   }
}
 8006f04:	3734      	adds	r7, #52	; 0x34
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd90      	pop	{r4, r7, pc}

08006f0a <_UG_SearchObject>:

UG_OBJECT* _UG_SearchObject( UG_WINDOW* wnd, UG_U8 type, UG_U8 id )
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b085      	sub	sp, #20
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
 8006f16:	4613      	mov	r3, r2
 8006f18:	70bb      	strb	r3, [r7, #2]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 8006f20:	2300      	movs	r3, #0
 8006f22:	73fb      	strb	r3, [r7, #15]
 8006f24:	e020      	b.n	8006f68 <_UG_SearchObject+0x5e>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	015b      	lsls	r3, r3, #5
 8006f2e:	4413      	add	r3, r2
 8006f30:	60bb      	str	r3, [r7, #8]
      if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	f003 0301 	and.w	r3, r3, #1
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d111      	bne.n	8006f62 <_UG_SearchObject+0x58>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00b      	beq.n	8006f62 <_UG_SearchObject+0x58>
      {
         if ( (obj->type == type) && (obj->id == id) )
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	7e1b      	ldrb	r3, [r3, #24]
 8006f4e:	78fa      	ldrb	r2, [r7, #3]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d106      	bne.n	8006f62 <_UG_SearchObject+0x58>
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	7e5b      	ldrb	r3, [r3, #25]
 8006f58:	78ba      	ldrb	r2, [r7, #2]
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d101      	bne.n	8006f62 <_UG_SearchObject+0x58>
         {
            /* Requested object found! */
            return obj;
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	e008      	b.n	8006f74 <_UG_SearchObject+0x6a>
   for(i=0;i<wnd->objcnt;i++)
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	3301      	adds	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	7bfa      	ldrb	r2, [r7, #15]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d3d9      	bcc.n	8006f26 <_UG_SearchObject+0x1c>
         }
      }
   }
   return NULL;
 8006f72:	2300      	movs	r3, #0
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <_UG_DrawObjectFrame>:

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8006f80:	b5b0      	push	{r4, r5, r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af02      	add	r7, sp, #8
 8006f86:	4604      	mov	r4, r0
 8006f88:	4608      	mov	r0, r1
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	4623      	mov	r3, r4
 8006f90:	80fb      	strh	r3, [r7, #6]
 8006f92:	4603      	mov	r3, r0
 8006f94:	80bb      	strh	r3, [r7, #4]
 8006f96:	460b      	mov	r3, r1
 8006f98:	807b      	strh	r3, [r7, #2]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 8006f9e:	887b      	ldrh	r3, [r7, #2]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	b21c      	sxth	r4, r3
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	1c9a      	adds	r2, r3, #2
 8006faa:	61ba      	str	r2, [r7, #24]
 8006fac:	881b      	ldrh	r3, [r3, #0]
 8006fae:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8006fb2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8006fb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006fba:	9300      	str	r3, [sp, #0]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	f7fe fe50 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 8006fc4:	88bb      	ldrh	r3, [r7, #4]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	b219      	sxth	r1, r3
 8006fcc:	883b      	ldrh	r3, [r7, #0]
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	b21c      	sxth	r4, r3
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	1c9a      	adds	r2, r3, #2
 8006fd8:	61ba      	str	r2, [r7, #24]
 8006fda:	881b      	ldrh	r3, [r3, #0]
 8006fdc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006fe0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	f7fe fe3c 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	1c9a      	adds	r2, r3, #2
 8006ff0:	61ba      	str	r2, [r7, #24]
 8006ff2:	881b      	ldrh	r3, [r3, #0]
 8006ff4:	f9b7 4000 	ldrsh.w	r4, [r7]
 8006ff8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8006ffc:	f9b7 1000 	ldrsh.w	r1, [r7]
 8007000:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8007004:	9300      	str	r3, [sp, #0]
 8007006:	4623      	mov	r3, r4
 8007008:	f7fe fe2c 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 800700c:	883b      	ldrh	r3, [r7, #0]
 800700e:	3b01      	subs	r3, #1
 8007010:	b29b      	uxth	r3, r3
 8007012:	b21c      	sxth	r4, r3
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	1c9a      	adds	r2, r3, #2
 8007018:	61ba      	str	r2, [r7, #24]
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8007020:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8007024:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4623      	mov	r3, r4
 800702c:	f7fe fe1a 	bl	8005c64 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	3301      	adds	r3, #1
 8007034:	b29b      	uxth	r3, r3
 8007036:	b218      	sxth	r0, r3
 8007038:	88bb      	ldrh	r3, [r7, #4]
 800703a:	3301      	adds	r3, #1
 800703c:	b29b      	uxth	r3, r3
 800703e:	b219      	sxth	r1, r3
 8007040:	887b      	ldrh	r3, [r7, #2]
 8007042:	3b02      	subs	r3, #2
 8007044:	b29b      	uxth	r3, r3
 8007046:	b21c      	sxth	r4, r3
 8007048:	88bb      	ldrh	r3, [r7, #4]
 800704a:	3301      	adds	r3, #1
 800704c:	b29b      	uxth	r3, r3
 800704e:	b21d      	sxth	r5, r3
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	1c9a      	adds	r2, r3, #2
 8007054:	61ba      	str	r2, [r7, #24]
 8007056:	881b      	ldrh	r3, [r3, #0]
 8007058:	9300      	str	r3, [sp, #0]
 800705a:	462b      	mov	r3, r5
 800705c:	4622      	mov	r2, r4
 800705e:	f7fe fe01 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8007062:	88fb      	ldrh	r3, [r7, #6]
 8007064:	3301      	adds	r3, #1
 8007066:	b29b      	uxth	r3, r3
 8007068:	b218      	sxth	r0, r3
 800706a:	88bb      	ldrh	r3, [r7, #4]
 800706c:	3302      	adds	r3, #2
 800706e:	b29b      	uxth	r3, r3
 8007070:	b219      	sxth	r1, r3
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	3301      	adds	r3, #1
 8007076:	b29b      	uxth	r3, r3
 8007078:	b21c      	sxth	r4, r3
 800707a:	883b      	ldrh	r3, [r7, #0]
 800707c:	3b02      	subs	r3, #2
 800707e:	b29b      	uxth	r3, r3
 8007080:	b21d      	sxth	r5, r3
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	1c9a      	adds	r2, r3, #2
 8007086:	61ba      	str	r2, [r7, #24]
 8007088:	881b      	ldrh	r3, [r3, #0]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	462b      	mov	r3, r5
 800708e:	4622      	mov	r2, r4
 8007090:	f7fe fde8 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 8007094:	88fb      	ldrh	r3, [r7, #6]
 8007096:	3301      	adds	r3, #1
 8007098:	b29b      	uxth	r3, r3
 800709a:	b218      	sxth	r0, r3
 800709c:	883b      	ldrh	r3, [r7, #0]
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	b219      	sxth	r1, r3
 80070a4:	887b      	ldrh	r3, [r7, #2]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	b21c      	sxth	r4, r3
 80070ac:	883b      	ldrh	r3, [r7, #0]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	b21d      	sxth	r5, r3
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	1c9a      	adds	r2, r3, #2
 80070b8:	61ba      	str	r2, [r7, #24]
 80070ba:	881b      	ldrh	r3, [r3, #0]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	462b      	mov	r3, r5
 80070c0:	4622      	mov	r2, r4
 80070c2:	f7fe fdcf 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80070c6:	887b      	ldrh	r3, [r7, #2]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	b218      	sxth	r0, r3
 80070ce:	88bb      	ldrh	r3, [r7, #4]
 80070d0:	3301      	adds	r3, #1
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	b219      	sxth	r1, r3
 80070d6:	887b      	ldrh	r3, [r7, #2]
 80070d8:	3b01      	subs	r3, #1
 80070da:	b29b      	uxth	r3, r3
 80070dc:	b21c      	sxth	r4, r3
 80070de:	883b      	ldrh	r3, [r7, #0]
 80070e0:	3b02      	subs	r3, #2
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	b21d      	sxth	r5, r3
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	1c9a      	adds	r2, r3, #2
 80070ea:	61ba      	str	r2, [r7, #24]
 80070ec:	881b      	ldrh	r3, [r3, #0]
 80070ee:	9300      	str	r3, [sp, #0]
 80070f0:	462b      	mov	r3, r5
 80070f2:	4622      	mov	r2, r4
 80070f4:	f7fe fdb6 	bl	8005c64 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 80070f8:	88fb      	ldrh	r3, [r7, #6]
 80070fa:	3302      	adds	r3, #2
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	b218      	sxth	r0, r3
 8007100:	88bb      	ldrh	r3, [r7, #4]
 8007102:	3302      	adds	r3, #2
 8007104:	b29b      	uxth	r3, r3
 8007106:	b219      	sxth	r1, r3
 8007108:	887b      	ldrh	r3, [r7, #2]
 800710a:	3b03      	subs	r3, #3
 800710c:	b29b      	uxth	r3, r3
 800710e:	b21c      	sxth	r4, r3
 8007110:	88bb      	ldrh	r3, [r7, #4]
 8007112:	3302      	adds	r3, #2
 8007114:	b29b      	uxth	r3, r3
 8007116:	b21d      	sxth	r5, r3
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	1c9a      	adds	r2, r3, #2
 800711c:	61ba      	str	r2, [r7, #24]
 800711e:	881b      	ldrh	r3, [r3, #0]
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	462b      	mov	r3, r5
 8007124:	4622      	mov	r2, r4
 8007126:	f7fe fd9d 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 800712a:	88fb      	ldrh	r3, [r7, #6]
 800712c:	3302      	adds	r3, #2
 800712e:	b29b      	uxth	r3, r3
 8007130:	b218      	sxth	r0, r3
 8007132:	88bb      	ldrh	r3, [r7, #4]
 8007134:	3303      	adds	r3, #3
 8007136:	b29b      	uxth	r3, r3
 8007138:	b219      	sxth	r1, r3
 800713a:	88fb      	ldrh	r3, [r7, #6]
 800713c:	3302      	adds	r3, #2
 800713e:	b29b      	uxth	r3, r3
 8007140:	b21c      	sxth	r4, r3
 8007142:	883b      	ldrh	r3, [r7, #0]
 8007144:	3b03      	subs	r3, #3
 8007146:	b29b      	uxth	r3, r3
 8007148:	b21d      	sxth	r5, r3
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	1c9a      	adds	r2, r3, #2
 800714e:	61ba      	str	r2, [r7, #24]
 8007150:	881b      	ldrh	r3, [r3, #0]
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	462b      	mov	r3, r5
 8007156:	4622      	mov	r2, r4
 8007158:	f7fe fd84 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	3302      	adds	r3, #2
 8007160:	b29b      	uxth	r3, r3
 8007162:	b218      	sxth	r0, r3
 8007164:	883b      	ldrh	r3, [r7, #0]
 8007166:	3b02      	subs	r3, #2
 8007168:	b29b      	uxth	r3, r3
 800716a:	b219      	sxth	r1, r3
 800716c:	887b      	ldrh	r3, [r7, #2]
 800716e:	3b02      	subs	r3, #2
 8007170:	b29b      	uxth	r3, r3
 8007172:	b21c      	sxth	r4, r3
 8007174:	883b      	ldrh	r3, [r7, #0]
 8007176:	3b02      	subs	r3, #2
 8007178:	b29b      	uxth	r3, r3
 800717a:	b21d      	sxth	r5, r3
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	1c9a      	adds	r2, r3, #2
 8007180:	61ba      	str	r2, [r7, #24]
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	462b      	mov	r3, r5
 8007188:	4622      	mov	r2, r4
 800718a:	f7fe fd6b 	bl	8005c64 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 800718e:	887b      	ldrh	r3, [r7, #2]
 8007190:	3b02      	subs	r3, #2
 8007192:	b29b      	uxth	r3, r3
 8007194:	b218      	sxth	r0, r3
 8007196:	88bb      	ldrh	r3, [r7, #4]
 8007198:	3302      	adds	r3, #2
 800719a:	b29b      	uxth	r3, r3
 800719c:	b219      	sxth	r1, r3
 800719e:	887b      	ldrh	r3, [r7, #2]
 80071a0:	3b02      	subs	r3, #2
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b21a      	sxth	r2, r3
 80071a6:	883b      	ldrh	r3, [r7, #0]
 80071a8:	3b03      	subs	r3, #3
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	b21c      	sxth	r4, r3
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	881b      	ldrh	r3, [r3, #0]
 80071b2:	9300      	str	r3, [sp, #0]
 80071b4:	4623      	mov	r3, r4
 80071b6:	f7fe fd55 	bl	8005c64 <UG_DrawLine>
}
 80071ba:	bf00      	nop
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bdb0      	pop	{r4, r5, r7, pc}

080071c2 <_UG_GetFreeObject>:

UG_OBJECT* _UG_GetFreeObject( UG_WINDOW* wnd )
{
 80071c2:	b480      	push	{r7}
 80071c4:	b085      	sub	sp, #20
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	6078      	str	r0, [r7, #4]
   UG_U8 i;
   UG_OBJECT* obj=(UG_OBJECT*)wnd->objlst;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	60bb      	str	r3, [r7, #8]

   for(i=0;i<wnd->objcnt;i++)
 80071d0:	2300      	movs	r3, #0
 80071d2:	73fb      	strb	r3, [r7, #15]
 80071d4:	e016      	b.n	8007204 <_UG_GetFreeObject+0x42>
   {
      obj = (UG_OBJECT*)(&wnd->objlst[i]);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	7bfb      	ldrb	r3, [r7, #15]
 80071dc:	015b      	lsls	r3, r3, #5
 80071de:	4413      	add	r3, r2
 80071e0:	60bb      	str	r3, [r7, #8]
      if ( (obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) )
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d007      	beq.n	80071fe <_UG_GetFreeObject+0x3c>
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d001      	beq.n	80071fe <_UG_GetFreeObject+0x3c>
      {
         /* Free object found! */
         return obj;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	e008      	b.n	8007210 <_UG_GetFreeObject+0x4e>
   for(i=0;i<wnd->objcnt;i++)
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	3301      	adds	r3, #1
 8007202:	73fb      	strb	r3, [r7, #15]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	7bfa      	ldrb	r2, [r7, #15]
 800720a:	429a      	cmp	r2, r3
 800720c:	d3e3      	bcc.n	80071d6 <_UG_GetFreeObject+0x14>
      }
   }
   return NULL;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007228:	79fb      	ldrb	r3, [r7, #7]
 800722a:	2b03      	cmp	r3, #3
 800722c:	d810      	bhi.n	8007250 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800722e:	4b0b      	ldr	r3, [pc, #44]	; (800725c <UG_DriverRegister+0x40>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	3307      	adds	r3, #7
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4413      	add	r3, r2
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800723e:	4b07      	ldr	r3, [pc, #28]	; (800725c <UG_DriverRegister+0x40>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	79fb      	ldrb	r3, [r7, #7]
 8007244:	3307      	adds	r3, #7
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	4413      	add	r3, r2
 800724a:	2203      	movs	r2, #3
 800724c:	721a      	strb	r2, [r3, #8]
 800724e:	e000      	b.n	8007252 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8007250:	bf00      	nop
}
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr
 800725c:	200004f0 	.word	0x200004f0

08007260 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 8007266:	4b5d      	ldr	r3, [pc, #372]	; (80073dc <UG_Update+0x17c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b00      	cmp	r3, #0
 8007274:	d00a      	beq.n	800728c <UG_Update+0x2c>
 8007276:	4b59      	ldr	r3, [pc, #356]	; (80073dc <UG_Update+0x17c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800727e:	4b57      	ldr	r3, [pc, #348]	; (80073dc <UG_Update+0x17c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 0201 	bic.w	r2, r2, #1
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 800728c:	4b53      	ldr	r3, [pc, #332]	; (80073dc <UG_Update+0x17c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	4b52      	ldr	r3, [pc, #328]	; (80073dc <UG_Update+0x17c>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	429a      	cmp	r2, r3
 800729a:	d071      	beq.n	8007380 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 800729c:	4b4f      	ldr	r3, [pc, #316]	; (80073dc <UG_Update+0x17c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d06c      	beq.n	8007380 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 80072a6:	4b4d      	ldr	r3, [pc, #308]	; (80073dc <UG_Update+0x17c>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	4b4c      	ldr	r3, [pc, #304]	; (80073dc <UG_Update+0x17c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6892      	ldr	r2, [r2, #8]
 80072b0:	60da      	str	r2, [r3, #12]
         gui->active_window = gui->next_window;
 80072b2:	4b4a      	ldr	r3, [pc, #296]	; (80073dc <UG_Update+0x17c>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	4b49      	ldr	r3, [pc, #292]	; (80073dc <UG_Update+0x17c>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6852      	ldr	r2, [r2, #4]
 80072bc:	609a      	str	r2, [r3, #8]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 80072be:	4b47      	ldr	r3, [pc, #284]	; (80073dc <UG_Update+0x17c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d045      	beq.n	8007354 <UG_Update+0xf4>
 80072c8:	4b44      	ldr	r3, [pc, #272]	; (80073dc <UG_Update+0x17c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	7d9b      	ldrb	r3, [r3, #22]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d03d      	beq.n	8007354 <UG_Update+0xf4>
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <UG_Update+0x17c>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	7a1b      	ldrb	r3, [r3, #8]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d035      	beq.n	8007354 <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80072e8:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <UG_Update+0x17c>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80072f2:	4b3a      	ldr	r3, [pc, #232]	; (80073dc <UG_Update+0x17c>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d123      	bne.n	8007348 <UG_Update+0xe8>
 8007300:	4b36      	ldr	r3, [pc, #216]	; (80073dc <UG_Update+0x17c>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800730a:	4b34      	ldr	r3, [pc, #208]	; (80073dc <UG_Update+0x17c>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007314:	429a      	cmp	r2, r3
 8007316:	d117      	bne.n	8007348 <UG_Update+0xe8>
 8007318:	4b30      	ldr	r3, [pc, #192]	; (80073dc <UG_Update+0x17c>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007322:	4b2e      	ldr	r3, [pc, #184]	; (80073dc <UG_Update+0x17c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800732c:	429a      	cmp	r2, r3
 800732e:	d10b      	bne.n	8007348 <UG_Update+0xe8>
 8007330:	4b2a      	ldr	r3, [pc, #168]	; (80073dc <UG_Update+0x17c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 800733a:	4b28      	ldr	r3, [pc, #160]	; (80073dc <UG_Update+0x17c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007344:	429a      	cmp	r2, r3
 8007346:	d005      	beq.n	8007354 <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8007348:	4b24      	ldr	r3, [pc, #144]	; (80073dc <UG_Update+0x17c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	4618      	mov	r0, r3
 8007350:	f000 fd78 	bl	8007e44 <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8007354:	4b21      	ldr	r3, [pc, #132]	; (80073dc <UG_Update+0x17c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	7a1a      	ldrb	r2, [r3, #8]
 800735c:	4b1f      	ldr	r3, [pc, #124]	; (80073dc <UG_Update+0x17c>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	689b      	ldr	r3, [r3, #8]
 8007362:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007366:	b2d2      	uxtb	r2, r2
 8007368:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 800736a:	4b1c      	ldr	r3, [pc, #112]	; (80073dc <UG_Update+0x17c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	7a1a      	ldrb	r2, [r3, #8]
 8007372:	4b1a      	ldr	r3, [pc, #104]	; (80073dc <UG_Update+0x17c>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8007380:	4b16      	ldr	r3, [pc, #88]	; (80073dc <UG_Update+0x17c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d018      	beq.n	80073bc <UG_Update+0x15c>
   {
      wnd = gui->active_window;
 800738a:	4b14      	ldr	r3, [pc, #80]	; (80073dc <UG_Update+0x17c>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	7a1b      	ldrb	r3, [r3, #8]
 8007396:	f003 0320 	and.w	r3, r3, #32
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 fdfa 	bl	8007f98 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	7a1b      	ldrb	r3, [r3, #8]
 80073a8:	f003 0308 	and.w	r3, r3, #8
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d005      	beq.n	80073bc <UG_Update+0x15c>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
         #endif
         _UG_UpdateObjects( wnd );
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f7ff fc13 	bl	8006bdc <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fc44 	bl	8006c44 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 80073bc:	4b07      	ldr	r3, [pc, #28]	; (80073dc <UG_Update+0x17c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <UG_Update+0x172>
     gui->device->flush();
 80073c8:	4b04      	ldr	r3, [pc, #16]	; (80073dc <UG_Update+0x17c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	4798      	blx	r3
   }
}
 80073d2:	bf00      	nop
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	200004f0 	.word	0x200004f0

080073e0 <UG_DrawBMP>:
   while ( (UG_U8)gui->state & UG_STATUS_WAIT_FOR_UPDATE ){};
   #endif    
}

void UG_DrawBMP( UG_S16 xp, UG_S16 yp, UG_BMP* bmp )
{
 80073e0:	b5b0      	push	{r4, r5, r7, lr}
 80073e2:	b08a      	sub	sp, #40	; 0x28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	603a      	str	r2, [r7, #0]
 80073ea:	80fb      	strh	r3, [r7, #6]
 80073ec:	460b      	mov	r3, r1
 80073ee:	80bb      	strh	r3, [r7, #4]
   UG_COLOR c;
   UG_S16 x,y;

   if ( bmp->p == NULL ) return;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	f000 810c 	beq.w	8007612 <UG_DrawBMP+0x232>

   if ( bmp->bpp == BMP_BPP_1){
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	7a1b      	ldrb	r3, [r3, #8]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d164      	bne.n	80074cc <UG_DrawBMP+0xec>
     UG_U8 xx,yy,b;
     const UG_U8* p = (UG_U8*)bmp->p;         // This is untested !
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	613b      	str	r3, [r7, #16]
      for(y=0;y<bmp->height;y++)
 8007408:	2300      	movs	r3, #0
 800740a:	847b      	strh	r3, [r7, #34]	; 0x22
 800740c:	e057      	b.n	80074be <UG_DrawBMP+0xde>
      {
         for(x=0;x<bmp->width;x++)
 800740e:	2300      	movs	r3, #0
 8007410:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007412:	e048      	b.n	80074a6 <UG_DrawBMP+0xc6>
         {
            yy = y / 8 ;
 8007414:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007418:	2b00      	cmp	r3, #0
 800741a:	da00      	bge.n	800741e <UG_DrawBMP+0x3e>
 800741c:	3307      	adds	r3, #7
 800741e:	10db      	asrs	r3, r3, #3
 8007420:	b21b      	sxth	r3, r3
 8007422:	73fb      	strb	r3, [r7, #15]
            xx = y % 8;
 8007424:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007428:	425a      	negs	r2, r3
 800742a:	f003 0307 	and.w	r3, r3, #7
 800742e:	f002 0207 	and.w	r2, r2, #7
 8007432:	bf58      	it	pl
 8007434:	4253      	negpl	r3, r2
 8007436:	b21b      	sxth	r3, r3
 8007438:	73bb      	strb	r3, [r7, #14]
            b = p[x + yy * bmp->width];
 800743a:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800743e:	7bfb      	ldrb	r3, [r7, #15]
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	8889      	ldrh	r1, [r1, #4]
 8007444:	fb01 f303 	mul.w	r3, r1, r3
 8007448:	4413      	add	r3, r2
 800744a:	461a      	mov	r2, r3
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	4413      	add	r3, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	737b      	strb	r3, [r7, #13]
            xx = 1 << xx;
 8007454:	7bbb      	ldrb	r3, [r7, #14]
 8007456:	2201      	movs	r2, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	73bb      	strb	r3, [r7, #14]
            xx = xx & b;
 800745e:	7bba      	ldrb	r2, [r7, #14]
 8007460:	7b7b      	ldrb	r3, [r7, #13]
 8007462:	4013      	ands	r3, r2
 8007464:	73bb      	strb	r3, [r7, #14]
            if(xx) c = gui->fore_color;
 8007466:	7bbb      	ldrb	r3, [r7, #14]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d004      	beq.n	8007476 <UG_DrawBMP+0x96>
 800746c:	4b6b      	ldr	r3, [pc, #428]	; (800761c <UG_DrawBMP+0x23c>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8007472:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007474:	e003      	b.n	800747e <UG_DrawBMP+0x9e>
            else c = gui->back_color;
 8007476:	4b69      	ldr	r3, [pc, #420]	; (800761c <UG_DrawBMP+0x23c>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800747c:	84fb      	strh	r3, [r7, #38]	; 0x26
            UG_DrawPixel( x + xp , y + yp , c );
 800747e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	4413      	add	r3, r2
 8007484:	b29b      	uxth	r3, r3
 8007486:	b218      	sxth	r0, r3
 8007488:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800748a:	88bb      	ldrh	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	b29b      	uxth	r3, r3
 8007490:	b21b      	sxth	r3, r3
 8007492:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007494:	4619      	mov	r1, r3
 8007496:	f7fe fa0b 	bl	80058b0 <UG_DrawPixel>
         for(x=0;x<bmp->width;x++)
 800749a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800749e:	b29b      	uxth	r3, r3
 80074a0:	3301      	adds	r3, #1
 80074a2:	b29b      	uxth	r3, r3
 80074a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80074a6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	8892      	ldrh	r2, [r2, #4]
 80074ae:	4293      	cmp	r3, r2
 80074b0:	dbb0      	blt.n	8007414 <UG_DrawBMP+0x34>
      for(y=0;y<bmp->height;y++)
 80074b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	3301      	adds	r3, #1
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80074be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80074c2:	683a      	ldr	r2, [r7, #0]
 80074c4:	88d2      	ldrh	r2, [r2, #6]
 80074c6:	4293      	cmp	r3, r2
 80074c8:	dba1      	blt.n	800740e <UG_DrawBMP+0x2e>
         }
      }
     return;
 80074ca:	e0a3      	b.n	8007614 <UG_DrawBMP+0x234>
   }
   #if defined UGUI_USE_COLOR_RGB888 || defined UGUI_USE_COLOR_RGB565
   else if ( bmp->bpp == BMP_BPP_16){
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	7a1b      	ldrb	r3, [r3, #8]
 80074d0:	2b10      	cmp	r3, #16
 80074d2:	f040 809f 	bne.w	8007614 <UG_DrawBMP+0x234>

     /* Is hardware acceleration available? */

      if ( gui->driver[DRIVER_DRAW_BMP].state & DRIVER_ENABLED)
 80074d6:	4b51      	ldr	r3, [pc, #324]	; (800761c <UG_DrawBMP+0x23c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80074de:	f003 0302 	and.w	r3, r3, #2
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <UG_DrawBMP+0x11e>
      {
        ((void(*)(UG_S16, UG_S16, UG_BMP* bmp))gui->driver[DRIVER_DRAW_BMP].driver)(xp,yp, bmp);
 80074e6:	4b4d      	ldr	r3, [pc, #308]	; (800761c <UG_DrawBMP+0x23c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ec:	461c      	mov	r4, r3
 80074ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80074f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4618      	mov	r0, r3
 80074fa:	47a0      	blx	r4
        return;
 80074fc:	e08a      	b.n	8007614 <UG_DrawBMP+0x234>
      }
      else if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED)
 80074fe:	4b47      	ldr	r3, [pc, #284]	; (800761c <UG_DrawBMP+0x23c>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007506:	f003 0302 	and.w	r3, r3, #2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d04b      	beq.n	80075a6 <UG_DrawBMP+0x1c6>
      {
         void(*push_pixels)(UG_U16, UG_COLOR) = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(xp,yp,xp+bmp->width-1,yp+bmp->height-1);
 800750e:	4b43      	ldr	r3, [pc, #268]	; (800761c <UG_DrawBMP+0x23c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007514:	461d      	mov	r5, r3
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	889a      	ldrh	r2, [r3, #4]
 800751a:	88fb      	ldrh	r3, [r7, #6]
 800751c:	4413      	add	r3, r2
 800751e:	b29b      	uxth	r3, r3
 8007520:	3b01      	subs	r3, #1
 8007522:	b29b      	uxth	r3, r3
 8007524:	b21c      	sxth	r4, r3
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88da      	ldrh	r2, [r3, #6]
 800752a:	88bb      	ldrh	r3, [r7, #4]
 800752c:	4413      	add	r3, r2
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29b      	uxth	r3, r3
 8007534:	b21b      	sxth	r3, r3
 8007536:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800753a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800753e:	4622      	mov	r2, r4
 8007540:	47a8      	blx	r5
 8007542:	4603      	mov	r3, r0
 8007544:	617b      	str	r3, [r7, #20]
         UG_U16 *p = (UG_U16*)bmp->p;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	61fb      	str	r3, [r7, #28]
         for(y=0;y<bmp->height;y++)
 800754c:	2300      	movs	r3, #0
 800754e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007550:	e022      	b.n	8007598 <UG_DrawBMP+0x1b8>
         {
           for(x=0;x<bmp->width;x++)
 8007552:	2300      	movs	r3, #0
 8007554:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007556:	e00d      	b.n	8007574 <UG_DrawBMP+0x194>
           {
             #ifdef UGUI_USE_COLOR_RGB888
             push_pixels(1, _UG_ConvertRGB565ToRGB888(*p++)); /* Convert RGB565 to RGB888 */
             #elif defined UGUI_USE_COLOR_RGB565
             push_pixels(1, *p++);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	1c9a      	adds	r2, r3, #2
 800755c:	61fa      	str	r2, [r7, #28]
 800755e:	881a      	ldrh	r2, [r3, #0]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4611      	mov	r1, r2
 8007564:	2001      	movs	r0, #1
 8007566:	4798      	blx	r3
           for(x=0;x<bmp->width;x++)
 8007568:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800756c:	b29b      	uxth	r3, r3
 800756e:	3301      	adds	r3, #1
 8007570:	b29b      	uxth	r3, r3
 8007572:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007574:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	8892      	ldrh	r2, [r2, #4]
 800757c:	4293      	cmp	r3, r2
 800757e:	dbeb      	blt.n	8007558 <UG_DrawBMP+0x178>
             #endif
           }
           yp++;
 8007580:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8007584:	b29b      	uxth	r3, r3
 8007586:	3301      	adds	r3, #1
 8007588:	b29b      	uxth	r3, r3
 800758a:	80bb      	strh	r3, [r7, #4]
         for(y=0;y<bmp->height;y++)
 800758c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007590:	b29b      	uxth	r3, r3
 8007592:	3301      	adds	r3, #1
 8007594:	b29b      	uxth	r3, r3
 8007596:	847b      	strh	r3, [r7, #34]	; 0x22
 8007598:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800759c:	683a      	ldr	r2, [r7, #0]
 800759e:	88d2      	ldrh	r2, [r2, #6]
 80075a0:	4293      	cmp	r3, r2
 80075a2:	dbd6      	blt.n	8007552 <UG_DrawBMP+0x172>
         }
         return;
 80075a4:	e036      	b.n	8007614 <UG_DrawBMP+0x234>
      }

     UG_U16 *p = (UG_U16*)bmp->p;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	61bb      	str	r3, [r7, #24]
     for(y=0;y<bmp->height;y++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	847b      	strh	r3, [r7, #34]	; 0x22
 80075b0:	e028      	b.n	8007604 <UG_DrawBMP+0x224>
     {
        for(x=0;x<bmp->width;x++)
 80075b2:	2300      	movs	r3, #0
 80075b4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075b6:	e013      	b.n	80075e0 <UG_DrawBMP+0x200>
        {
          #ifdef UGUI_USE_COLOR_RGB888
           UG_DrawPixel( xp+x , yp , _UG_ConvertRGB565ToRGB888(*p++) ); /* Convert RGB565 to RGB888 */
          #elif defined UGUI_USE_COLOR_RGB565
           UG_DrawPixel( xp+x , yp , *p++ );
 80075b8:	88fa      	ldrh	r2, [r7, #6]
 80075ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075bc:	4413      	add	r3, r2
 80075be:	b29b      	uxth	r3, r3
 80075c0:	b218      	sxth	r0, r3
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	1c9a      	adds	r2, r3, #2
 80075c6:	61ba      	str	r2, [r7, #24]
 80075c8:	881a      	ldrh	r2, [r3, #0]
 80075ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075ce:	4619      	mov	r1, r3
 80075d0:	f7fe f96e 	bl	80058b0 <UG_DrawPixel>
        for(x=0;x<bmp->width;x++)
 80075d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3301      	adds	r3, #1
 80075dc:	b29b      	uxth	r3, r3
 80075de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80075e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	8892      	ldrh	r2, [r2, #4]
 80075e8:	4293      	cmp	r3, r2
 80075ea:	dbe5      	blt.n	80075b8 <UG_DrawBMP+0x1d8>
          #endif
        }
        yp++;
 80075ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	3301      	adds	r3, #1
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	80bb      	strh	r3, [r7, #4]
     for(y=0;y<bmp->height;y++)
 80075f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	3301      	adds	r3, #1
 8007600:	b29b      	uxth	r3, r3
 8007602:	847b      	strh	r3, [r7, #34]	; 0x22
 8007604:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	88d2      	ldrh	r2, [r2, #6]
 800760c:	4293      	cmp	r3, r2
 800760e:	dbd0      	blt.n	80075b2 <UG_DrawBMP+0x1d2>
 8007610:	e000      	b.n	8007614 <UG_DrawBMP+0x234>
   if ( bmp->p == NULL ) return;
 8007612:	bf00      	nop
     }
   }
   #endif
}
 8007614:	3728      	adds	r7, #40	; 0x28
 8007616:	46bd      	mov	sp, r7
 8007618:	bdb0      	pop	{r4, r5, r7, pc}
 800761a:	bf00      	nop
 800761c:	200004f0 	.word	0x200004f0

08007620 <UG_WindowCreate>:

/* -------------------------------------------------------------------------------- */
/* -- WINDOW FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
UG_RESULT UG_WindowCreate( UG_WINDOW* wnd, UG_OBJECT* objlst, UG_U8 objcnt, void (*cb)( UG_MESSAGE* ) )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b086      	sub	sp, #24
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
   UG_U8 i;
   UG_OBJECT* obj=NULL;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]

   if ( (wnd == NULL) || (objlst == NULL) || (objcnt == 0) ) return UG_RESULT_FAIL;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d005      	beq.n	8007646 <UG_WindowCreate+0x26>
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d002      	beq.n	8007646 <UG_WindowCreate+0x26>
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d102      	bne.n	800764c <UG_WindowCreate+0x2c>
 8007646:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800764a:	e072      	b.n	8007732 <UG_WindowCreate+0x112>

   /* Initialize all objects of the window */
   for(i=0; i<objcnt; i++)
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]
 8007650:	e00d      	b.n	800766e <UG_WindowCreate+0x4e>
   {
      obj = (UG_OBJECT*)&objlst[i];
 8007652:	7dfb      	ldrb	r3, [r7, #23]
 8007654:	015b      	lsls	r3, r3, #5
 8007656:	68ba      	ldr	r2, [r7, #8]
 8007658:	4413      	add	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
      obj->state = OBJ_STATE_INIT;
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	2203      	movs	r2, #3
 8007660:	701a      	strb	r2, [r3, #0]
      obj->data = NULL;
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	2200      	movs	r2, #0
 8007666:	61da      	str	r2, [r3, #28]
   for(i=0; i<objcnt; i++)
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	3301      	adds	r3, #1
 800766c:	75fb      	strb	r3, [r7, #23]
 800766e:	7dfa      	ldrb	r2, [r7, #23]
 8007670:	79fb      	ldrb	r3, [r7, #7]
 8007672:	429a      	cmp	r2, r3
 8007674:	d3ed      	bcc.n	8007652 <UG_WindowCreate+0x32>
   }

   /* Initialize window */
   wnd->objcnt = objcnt;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	79fa      	ldrb	r2, [r7, #7]
 800767a:	701a      	strb	r2, [r3, #0]
   wnd->objlst = objlst;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	605a      	str	r2, [r3, #4]
   wnd->state = WND_STATE_VALID;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2202      	movs	r2, #2
 8007686:	721a      	strb	r2, [r3, #8]
   wnd->fc = C_FORE_COLOR;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	815a      	strh	r2, [r3, #10]
   wnd->bc = C_BACK_COLOR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f64e 727d 	movw	r2, #61309	; 0xef7d
 8007694:	819a      	strh	r2, [r3, #12]
   wnd->xs = 0;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	81da      	strh	r2, [r3, #14]
   wnd->ys = 0;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	821a      	strh	r2, [r3, #16]
   wnd->xe = UG_GetXDim()-1;
 80076a2:	f7fe fe0d 	bl	80062c0 <UG_GetXDim>
 80076a6:	4603      	mov	r3, r0
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	b21a      	sxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	825a      	strh	r2, [r3, #18]
   wnd->ye = UG_GetYDim()-1;
 80076b4:	f7fe fe12 	bl	80062dc <UG_GetYDim>
 80076b8:	4603      	mov	r3, r0
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29b      	uxth	r3, r3
 80076c0:	b21a      	sxth	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	829a      	strh	r2, [r3, #20]
   wnd->cb = cb;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	631a      	str	r2, [r3, #48]	; 0x30
   wnd->style = WND_STYLE_3D | WND_STYLE_SHOW_TITLE;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2203      	movs	r2, #3
 80076d0:	759a      	strb	r2, [r3, #22]

   /* Initialize window title-bar */
   wnd->title.str = NULL;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	619a      	str	r2, [r3, #24]
   if (gui != NULL) wnd->title.font = gui->font;
 80076d8:	4b18      	ldr	r3, [pc, #96]	; (800773c <UG_WindowCreate+0x11c>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <UG_WindowCreate+0xcc>
 80076e0:	4b16      	ldr	r3, [pc, #88]	; (800773c <UG_WindowCreate+0x11c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	691a      	ldr	r2, [r3, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	61da      	str	r2, [r3, #28]
 80076ea:	e002      	b.n	80076f2 <UG_WindowCreate+0xd2>
   else wnd->title.font = NULL;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	61da      	str	r2, [r3, #28]
   wnd->title.h_space = 2;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2202      	movs	r2, #2
 80076f6:	f883 2020 	strb.w	r2, [r3, #32]
   wnd->title.v_space = 2;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2202      	movs	r2, #2
 80076fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
   wnd->title.align = ALIGN_CENTER_LEFT;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2211      	movs	r2, #17
 8007706:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   wnd->title.fc = C_TITLE_FORE_COLOR;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007710:	849a      	strh	r2, [r3, #36]	; 0x24
   wnd->title.bc = C_TITLE_BACK_COLOR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	221f      	movs	r2, #31
 8007716:	84da      	strh	r2, [r3, #38]	; 0x26
   wnd->title.ifc = C_INACTIVE_TITLE_FORE_COLOR;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800771e:	851a      	strh	r2, [r3, #40]	; 0x28
   wnd->title.ibc = C_INACTIVE_TITLE_BACK_COLOR;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f248 4210 	movw	r2, #33808	; 0x8410
 8007726:	855a      	strh	r2, [r3, #42]	; 0x2a
   wnd->title.height = 15;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	220f      	movs	r2, #15
 800772c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

   return UG_RESULT_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	200004f0 	.word	0x200004f0

08007740 <UG_WindowDelete>:

UG_RESULT UG_WindowDelete( UG_WINDOW* wnd )
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
   if ( wnd == gui->active_window ) return UG_RESULT_FAIL;
 8007748:	4b1b      	ldr	r3, [pc, #108]	; (80077b8 <UG_WindowDelete+0x78>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	689b      	ldr	r3, [r3, #8]
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	429a      	cmp	r2, r3
 8007752:	d102      	bne.n	800775a <UG_WindowDelete+0x1a>
 8007754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007758:	e027      	b.n	80077aa <UG_WindowDelete+0x6a>

   /* Only delete valid windows */
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d022      	beq.n	80077a6 <UG_WindowDelete+0x66>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	7a1b      	ldrb	r3, [r3, #8]
 8007764:	f003 0302 	and.w	r3, r3, #2
 8007768:	2b00      	cmp	r3, #0
 800776a:	d01c      	beq.n	80077a6 <UG_WindowDelete+0x66>
   {
      wnd->state = 0;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	721a      	strb	r2, [r3, #8]
      wnd->cb = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	631a      	str	r2, [r3, #48]	; 0x30
      wnd->objcnt = 0;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
      wnd->objlst = NULL;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	605a      	str	r2, [r3, #4]
      wnd->xs = 0;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	81da      	strh	r2, [r3, #14]
      wnd->ys = 0;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	821a      	strh	r2, [r3, #16]
      wnd->xe = 0;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	825a      	strh	r2, [r3, #18]
      wnd->ye = 0;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	829a      	strh	r2, [r3, #20]
      wnd->style = 0;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	759a      	strb	r2, [r3, #22]
      return UG_RESULT_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	e001      	b.n	80077aa <UG_WindowDelete+0x6a>
   }
   return UG_RESULT_FAIL;
 80077a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	370c      	adds	r7, #12
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	200004f0 	.word	0x200004f0

080077bc <UG_WindowShow>:

UG_RESULT UG_WindowShow( UG_WINDOW* wnd )
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d013      	beq.n	80077f2 <UG_WindowShow+0x36>
   {
      /* Force an update, even if this is the active window! */
      wnd->state |= WND_STATE_VISIBLE | WND_STATE_UPDATE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	7a1b      	ldrb	r3, [r3, #8]
 80077ce:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	721a      	strb	r2, [r3, #8]
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	7a1b      	ldrb	r3, [r3, #8]
 80077dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	721a      	strb	r2, [r3, #8]
      gui->next_window = wnd;
 80077e6:	4b07      	ldr	r3, [pc, #28]	; (8007804 <UG_WindowShow+0x48>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	605a      	str	r2, [r3, #4]
      return UG_RESULT_OK;
 80077ee:	2300      	movs	r3, #0
 80077f0:	e001      	b.n	80077f6 <UG_WindowShow+0x3a>
   }
   return UG_RESULT_FAIL;
 80077f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	200004f0 	.word	0x200004f0

08007808 <UG_WindowHide>:

UG_RESULT UG_WindowHide( UG_WINDOW* wnd )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d060      	beq.n	80078d8 <UG_WindowHide+0xd0>
   {
      if ( wnd == gui->active_window )
 8007816:	4b33      	ldr	r3, [pc, #204]	; (80078e4 <UG_WindowHide+0xdc>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	429a      	cmp	r2, r3
 8007820:	d155      	bne.n	80078ce <UG_WindowHide+0xc6>
      {
         /* Is there an old window which just lost the focus? */
         if ( (gui->last_window != NULL) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8007822:	4b30      	ldr	r3, [pc, #192]	; (80078e4 <UG_WindowHide+0xdc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d039      	beq.n	80078a0 <UG_WindowHide+0x98>
 800782c:	4b2d      	ldr	r3, [pc, #180]	; (80078e4 <UG_WindowHide+0xdc>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	7a1b      	ldrb	r3, [r3, #8]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d031      	beq.n	80078a0 <UG_WindowHide+0x98>
         {
            if ( (gui->last_window->xs > wnd->xs) || (gui->last_window->ys > wnd->ys) || (gui->last_window->xe < wnd->xe) || (gui->last_window->ye < wnd->ye) )
 800783c:	4b29      	ldr	r3, [pc, #164]	; (80078e4 <UG_WindowHide+0xdc>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800784c:	429a      	cmp	r2, r3
 800784e:	dc1d      	bgt.n	800788c <UG_WindowHide+0x84>
 8007850:	4b24      	ldr	r3, [pc, #144]	; (80078e4 <UG_WindowHide+0xdc>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007860:	429a      	cmp	r2, r3
 8007862:	dc13      	bgt.n	800788c <UG_WindowHide+0x84>
 8007864:	4b1f      	ldr	r3, [pc, #124]	; (80078e4 <UG_WindowHide+0xdc>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007874:	429a      	cmp	r2, r3
 8007876:	db09      	blt.n	800788c <UG_WindowHide+0x84>
 8007878:	4b1a      	ldr	r3, [pc, #104]	; (80078e4 <UG_WindowHide+0xdc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007888:	429a      	cmp	r2, r3
 800788a:	da02      	bge.n	8007892 <UG_WindowHide+0x8a>
            {
               _UG_WindowClear( wnd );
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fc3f 	bl	8008110 <_UG_WindowClear>
            }
            gui->next_window = gui->last_window;
 8007892:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <UG_WindowHide+0xdc>)
 8007894:	681a      	ldr	r2, [r3, #0]
 8007896:	4b13      	ldr	r3, [pc, #76]	; (80078e4 <UG_WindowHide+0xdc>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68d2      	ldr	r2, [r2, #12]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	e019      	b.n	80078d4 <UG_WindowHide+0xcc>
         }
         else
         {
            gui->active_window->state &= ~WND_STATE_VISIBLE;
 80078a0:	4b10      	ldr	r3, [pc, #64]	; (80078e4 <UG_WindowHide+0xdc>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	7a1a      	ldrb	r2, [r3, #8]
 80078a8:	4b0e      	ldr	r3, [pc, #56]	; (80078e4 <UG_WindowHide+0xdc>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f022 0208 	bic.w	r2, r2, #8
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	721a      	strb	r2, [r3, #8]
            gui->active_window->state |= WND_STATE_UPDATE;
 80078b6:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <UG_WindowHide+0xdc>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	7a1a      	ldrb	r2, [r3, #8]
 80078be:	4b09      	ldr	r3, [pc, #36]	; (80078e4 <UG_WindowHide+0xdc>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f042 0220 	orr.w	r2, r2, #32
 80078c8:	b2d2      	uxtb	r2, r2
 80078ca:	721a      	strb	r2, [r3, #8]
 80078cc:	e002      	b.n	80078d4 <UG_WindowHide+0xcc>
         }
      }
      else
      {
         /* If the old window is visible, clear it! */
         _UG_WindowClear( wnd );
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fc1e 	bl	8008110 <_UG_WindowClear>
      }
      return UG_RESULT_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	e001      	b.n	80078dc <UG_WindowHide+0xd4>
   }
   return UG_RESULT_FAIL;
 80078d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80078dc:	4618      	mov	r0, r3
 80078de:	3708      	adds	r7, #8
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	200004f0 	.word	0x200004f0

080078e8 <UG_WindowResize>:

UG_RESULT UG_WindowResize( UG_WINDOW* wnd, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80078e8:	b590      	push	{r4, r7, lr}
 80078ea:	b089      	sub	sp, #36	; 0x24
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	461a      	mov	r2, r3
 80078f6:	4603      	mov	r3, r0
 80078f8:	817b      	strh	r3, [r7, #10]
 80078fa:	460b      	mov	r3, r1
 80078fc:	813b      	strh	r3, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	80fb      	strh	r3, [r7, #6]
   UG_S16 pos;
   UG_S16 xmax,ymax;

   xmax = UG_GetXDim()-1;
 8007902:	f7fe fcdd 	bl	80062c0 <UG_GetXDim>
 8007906:	4603      	mov	r3, r0
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b29b      	uxth	r3, r3
 800790e:	82fb      	strh	r3, [r7, #22]
   ymax = UG_GetYDim()-1;
 8007910:	f7fe fce4 	bl	80062dc <UG_GetYDim>
 8007914:	4603      	mov	r3, r0
 8007916:	b29b      	uxth	r3, r3
 8007918:	3b01      	subs	r3, #1
 800791a:	b29b      	uxth	r3, r3
 800791c:	82bb      	strh	r3, [r7, #20]

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 80cb 	beq.w	8007abc <UG_WindowResize+0x1d4>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7a1b      	ldrb	r3, [r3, #8]
 800792a:	f003 0302 	and.w	r3, r3, #2
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80c4 	beq.w	8007abc <UG_WindowResize+0x1d4>
   {
      /* Do some checks... */
      if ( (xs < 0) || (ys < 0) ) return UG_RESULT_FAIL;
 8007934:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007938:	2b00      	cmp	r3, #0
 800793a:	db03      	blt.n	8007944 <UG_WindowResize+0x5c>
 800793c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	da02      	bge.n	800794a <UG_WindowResize+0x62>
 8007944:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007948:	e0ba      	b.n	8007ac0 <UG_WindowResize+0x1d8>
      if ( (xe > xmax) || (ye > ymax) ) return UG_RESULT_FAIL;
 800794a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800794e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007952:	429a      	cmp	r2, r3
 8007954:	dc05      	bgt.n	8007962 <UG_WindowResize+0x7a>
 8007956:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 800795a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800795e:	429a      	cmp	r2, r3
 8007960:	dd02      	ble.n	8007968 <UG_WindowResize+0x80>
 8007962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007966:	e0ab      	b.n	8007ac0 <UG_WindowResize+0x1d8>
      pos = xe-xs;
 8007968:	88fa      	ldrh	r2, [r7, #6]
 800796a:	897b      	ldrh	r3, [r7, #10]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	b29b      	uxth	r3, r3
 8007970:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 8007972:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007976:	2b09      	cmp	r3, #9
 8007978:	dc02      	bgt.n	8007980 <UG_WindowResize+0x98>
 800797a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800797e:	e09f      	b.n	8007ac0 <UG_WindowResize+0x1d8>
      pos = ye-ys;
 8007980:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007982:	893b      	ldrh	r3, [r7, #8]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	b29b      	uxth	r3, r3
 8007988:	827b      	strh	r3, [r7, #18]
      if ( pos < 10 ) return UG_RESULT_FAIL;
 800798a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800798e:	2b09      	cmp	r3, #9
 8007990:	dc02      	bgt.n	8007998 <UG_WindowResize+0xb0>
 8007992:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007996:	e093      	b.n	8007ac0 <UG_WindowResize+0x1d8>

      /* ... and if everything is OK move the window! */
      wnd->xs = xs;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	897a      	ldrh	r2, [r7, #10]
 800799c:	81da      	strh	r2, [r3, #14]
      wnd->ys = ys;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	893a      	ldrh	r2, [r7, #8]
 80079a2:	821a      	strh	r2, [r3, #16]
      wnd->xe = xe;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	825a      	strh	r2, [r3, #18]
      wnd->ye = ye;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80079ae:	829a      	strh	r2, [r3, #20]

      if ( (wnd->state & WND_STATE_VISIBLE) && (gui->active_window == wnd) )
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	7a1b      	ldrb	r3, [r3, #8]
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d07d      	beq.n	8007ab8 <UG_WindowResize+0x1d0>
 80079bc:	4b42      	ldr	r3, [pc, #264]	; (8007ac8 <UG_WindowResize+0x1e0>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d177      	bne.n	8007ab8 <UG_WindowResize+0x1d0>
      {
         if ( wnd->ys ) UG_FillFrame(0, 0, xmax,wnd->ys-1,gui->desktop_color);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d011      	beq.n	80079f6 <UG_WindowResize+0x10e>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29b      	uxth	r3, r3
 80079de:	b219      	sxth	r1, r3
 80079e0:	4b39      	ldr	r3, [pc, #228]	; (8007ac8 <UG_WindowResize+0x1e0>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80079e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	460b      	mov	r3, r1
 80079ee:	2100      	movs	r1, #0
 80079f0:	2000      	movs	r0, #0
 80079f2:	f7fd fe2d 	bl	8005650 <UG_FillFrame>
         pos = wnd->ye+1;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3301      	adds	r3, #1
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	827b      	strh	r3, [r7, #18]
         if ( !(pos > ymax) ) UG_FillFrame(0, pos, xmax,ymax,gui->desktop_color);
 8007a04:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007a08:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	dc0d      	bgt.n	8007a2c <UG_WindowResize+0x144>
 8007a10:	4b2d      	ldr	r3, [pc, #180]	; (8007ac8 <UG_WindowResize+0x1e0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007a16:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a1e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	4603      	mov	r3, r0
 8007a26:	2000      	movs	r0, #0
 8007a28:	f7fd fe12 	bl	8005650 <UG_FillFrame>
         if ( wnd->xs ) UG_FillFrame(0, wnd->ys, wnd->xs-1,wnd->ye,gui->desktop_color);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d014      	beq.n	8007a60 <UG_WindowResize+0x178>
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	b21a      	sxth	r2, r3
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f9b3 0014 	ldrsh.w	r0, [r3, #20]
 8007a50:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <UG_WindowResize+0x1e0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007a56:	9300      	str	r3, [sp, #0]
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f7fd fdf8 	bl	8005650 <UG_FillFrame>
         pos = wnd->xe+1;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	3301      	adds	r3, #1
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	827b      	strh	r3, [r7, #18]
         if ( !(pos > xmax) ) UG_FillFrame(pos, wnd->ys,xmax,wnd->ye,gui->desktop_color);
 8007a6e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007a72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	dc10      	bgt.n	8007a9c <UG_WindowResize+0x1b4>
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8007a86:	4b10      	ldr	r3, [pc, #64]	; (8007ac8 <UG_WindowResize+0x1e0>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007a8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007a90:	f9b7 0012 	ldrsh.w	r0, [r7, #18]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4623      	mov	r3, r4
 8007a98:	f7fd fdda 	bl	8005650 <UG_FillFrame>

         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	7a1b      	ldrb	r3, [r3, #8]
 8007aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	721a      	strb	r2, [r3, #8]
         wnd->state |= WND_STATE_UPDATE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	7a1b      	ldrb	r3, [r3, #8]
 8007aae:	f043 0320 	orr.w	r3, r3, #32
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e001      	b.n	8007ac0 <UG_WindowResize+0x1d8>
   }
   return UG_RESULT_FAIL;
 8007abc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	371c      	adds	r7, #28
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd90      	pop	{r4, r7, pc}
 8007ac8:	200004f0 	.word	0x200004f0

08007acc <UG_WindowSetTitleText>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleText( UG_WINDOW* wnd, char* str )
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d011      	beq.n	8007b00 <UG_WindowSetTitleText+0x34>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	7a1b      	ldrb	r3, [r3, #8]
 8007ae0:	f003 0302 	and.w	r3, r3, #2
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00b      	beq.n	8007b00 <UG_WindowSetTitleText+0x34>
   {
      wnd->title.str = str;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	619a      	str	r2, [r3, #24]
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	7a1b      	ldrb	r3, [r3, #8]
 8007af2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e001      	b.n	8007b04 <UG_WindowSetTitleText+0x38>
   }
   return UG_RESULT_FAIL;
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	370c      	adds	r7, #12
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <UG_WindowSetTitleTextFont>:

UG_RESULT UG_WindowSetTitleTextFont( UG_WINDOW* wnd, UG_FONT* font )
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d02a      	beq.n	8007b76 <UG_WindowSetTitleTextFont+0x66>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	7a1b      	ldrb	r3, [r3, #8]
 8007b24:	f003 0302 	and.w	r3, r3, #2
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d024      	beq.n	8007b76 <UG_WindowSetTitleTextFont+0x66>
   {
      wnd->state |= WND_STATE_UPDATE | WND_STATE_REDRAW_TITLE;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	7a1b      	ldrb	r3, [r3, #8]
 8007b30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	721a      	strb	r2, [r3, #8]
      wnd->title.font = font;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	61da      	str	r2, [r3, #28]
      if ( wnd->title.height <= (UG_GetFontHeight(font) + 1) )
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007b46:	461a      	mov	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	3302      	adds	r3, #2
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	429a      	cmp	r2, r3
 8007b52:	dc0e      	bgt.n	8007b72 <UG_WindowSetTitleTextFont+0x62>
      {
         wnd->title.height = UG_GetFontWidth(font) + 2;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	3301      	adds	r3, #1
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	3302      	adds	r3, #2
 8007b5c:	b2da      	uxtb	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
         wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	7a1b      	ldrb	r3, [r3, #8]
 8007b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b6c:	b2da      	uxtb	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	721a      	strb	r2, [r3, #8]
      }
      return UG_RESULT_OK;
 8007b72:	2300      	movs	r3, #0
 8007b74:	e001      	b.n	8007b7a <UG_WindowSetTitleTextFont+0x6a>
   }
   return UG_RESULT_FAIL;
 8007b76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	370c      	adds	r7, #12
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <UG_WindowSetTitleHeight>:
   }
   return UG_RESULT_FAIL;
}

UG_RESULT UG_WindowSetTitleHeight( UG_WINDOW* wnd, UG_U8 height )
{
 8007b86:	b480      	push	{r7}
 8007b88:	b083      	sub	sp, #12
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	6078      	str	r0, [r7, #4]
 8007b8e:	460b      	mov	r3, r1
 8007b90:	70fb      	strb	r3, [r7, #3]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d019      	beq.n	8007bcc <UG_WindowSetTitleHeight+0x46>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	7a1b      	ldrb	r3, [r3, #8]
 8007b9c:	f003 0302 	and.w	r3, r3, #2
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d013      	beq.n	8007bcc <UG_WindowSetTitleHeight+0x46>
   {
      wnd->title.height = height;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	78fa      	ldrb	r2, [r7, #3]
 8007ba8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	7a1b      	ldrb	r3, [r3, #8]
 8007bb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bb4:	b2da      	uxtb	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	721a      	strb	r2, [r3, #8]
      wnd->state |= WND_STATE_UPDATE;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	7a1b      	ldrb	r3, [r3, #8]
 8007bbe:	f043 0320 	orr.w	r3, r3, #32
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	721a      	strb	r2, [r3, #8]
      return UG_RESULT_OK;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	e001      	b.n	8007bd0 <UG_WindowSetTitleHeight+0x4a>
   }
   return UG_RESULT_FAIL;
 8007bcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <UG_WindowSetXStart>:

UG_RESULT UG_WindowSetXStart( UG_WINDOW* wnd, UG_S16 xs )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	460b      	mov	r3, r1
 8007be6:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d022      	beq.n	8007c34 <UG_WindowSetXStart+0x58>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	7a1b      	ldrb	r3, [r3, #8]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d01c      	beq.n	8007c34 <UG_WindowSetXStart+0x58>
   {
      wnd->xs = xs;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	887a      	ldrh	r2, [r7, #2]
 8007bfe:	81da      	strh	r2, [r3, #14]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007c18:	9300      	str	r3, [sp, #0]
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff fe63 	bl	80078e8 <UG_WindowResize>
 8007c22:	4603      	mov	r3, r0
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c28:	d102      	bne.n	8007c30 <UG_WindowSetXStart+0x54>
 8007c2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c2e:	e003      	b.n	8007c38 <UG_WindowSetXStart+0x5c>
      return UG_RESULT_OK;
 8007c30:	2300      	movs	r3, #0
 8007c32:	e001      	b.n	8007c38 <UG_WindowSetXStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <UG_WindowSetYStart>:

UG_RESULT UG_WindowSetYStart( UG_WINDOW* wnd, UG_S16 ys )
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d022      	beq.n	8007c98 <UG_WindowSetYStart+0x58>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7a1b      	ldrb	r3, [r3, #8]
 8007c56:	f003 0302 	and.w	r3, r3, #2
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01c      	beq.n	8007c98 <UG_WindowSetYStart+0x58>
   {
      wnd->ys = ys;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	887a      	ldrh	r2, [r7, #2]
 8007c62:	821a      	strh	r2, [r3, #16]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007c7c:	9300      	str	r3, [sp, #0]
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7ff fe31 	bl	80078e8 <UG_WindowResize>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c8c:	d102      	bne.n	8007c94 <UG_WindowSetYStart+0x54>
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c92:	e003      	b.n	8007c9c <UG_WindowSetYStart+0x5c>
      return UG_RESULT_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	e001      	b.n	8007c9c <UG_WindowSetYStart+0x5c>
   }
   return UG_RESULT_FAIL;
 8007c98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UG_WindowSetXEnd>:

UG_RESULT UG_WindowSetXEnd( UG_WINDOW* wnd, UG_S16 xe )
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af02      	add	r7, sp, #8
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d022      	beq.n	8007cfc <UG_WindowSetXEnd+0x58>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	7a1b      	ldrb	r3, [r3, #8]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d01c      	beq.n	8007cfc <UG_WindowSetXEnd+0x58>
   {
      wnd->xe = xe;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	887a      	ldrh	r2, [r7, #2]
 8007cc6:	825a      	strh	r2, [r3, #18]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007ce0:	9300      	str	r3, [sp, #0]
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f7ff fdff 	bl	80078e8 <UG_WindowResize>
 8007cea:	4603      	mov	r3, r0
 8007cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cf0:	d102      	bne.n	8007cf8 <UG_WindowSetXEnd+0x54>
 8007cf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cf6:	e003      	b.n	8007d00 <UG_WindowSetXEnd+0x5c>
      return UG_RESULT_OK;
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	e001      	b.n	8007d00 <UG_WindowSetXEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <UG_WindowSetYEnd>:

UG_RESULT UG_WindowSetYEnd( UG_WINDOW* wnd, UG_S16 ye )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af02      	add	r7, sp, #8
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	460b      	mov	r3, r1
 8007d12:	807b      	strh	r3, [r7, #2]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d022      	beq.n	8007d60 <UG_WindowSetYEnd+0x58>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7a1b      	ldrb	r3, [r3, #8]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d01c      	beq.n	8007d60 <UG_WindowSetYEnd+0x58>
   {
      wnd->ye = ye;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	887a      	ldrh	r2, [r7, #2]
 8007d2a:	829a      	strh	r2, [r3, #20]
      if ( UG_WindowResize( wnd, wnd->xs, wnd->ys, wnd->xe, wnd->ye) == UG_RESULT_FAIL ) return UG_RESULT_FAIL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f9b3 0012 	ldrsh.w	r0, [r3, #18]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	4603      	mov	r3, r0
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f7ff fdcd 	bl	80078e8 <UG_WindowResize>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d54:	d102      	bne.n	8007d5c <UG_WindowSetYEnd+0x54>
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d5a:	e003      	b.n	8007d64 <UG_WindowSetYEnd+0x5c>
      return UG_RESULT_OK;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	e001      	b.n	8007d64 <UG_WindowSetYEnd+0x5c>
   }
   return UG_RESULT_FAIL;
 8007d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <UG_WindowGetArea>:
   }
   return style;
}

UG_RESULT UG_WindowGetArea( UG_WINDOW* wnd, UG_AREA* a )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d05a      	beq.n	8007e32 <UG_WindowGetArea+0xc6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	7a1b      	ldrb	r3, [r3, #8]
 8007d80:	f003 0302 	and.w	r3, r3, #2
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d054      	beq.n	8007e32 <UG_WindowGetArea+0xc6>
   {
      a->xs = wnd->xs;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	801a      	strh	r2, [r3, #0]
      a->ys = wnd->ys;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	805a      	strh	r2, [r3, #2]
      a->xe = wnd->xe;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	809a      	strh	r2, [r3, #4]
      a->ye = wnd->ye;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	80da      	strh	r2, [r3, #6]
      if ( wnd->style & WND_STYLE_3D )
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	7d9b      	ldrb	r3, [r3, #22]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d023      	beq.n	8007e04 <UG_WindowGetArea+0x98>
      {
         a->xs+=3;
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dc2:	b29b      	uxth	r3, r3
 8007dc4:	3303      	adds	r3, #3
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	b21a      	sxth	r2, r3
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	801a      	strh	r2, [r3, #0]
         a->ys+=3;
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	b21a      	sxth	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	805a      	strh	r2, [r3, #2]
         a->xe-=3;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	3b03      	subs	r3, #3
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	b21a      	sxth	r2, r3
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	809a      	strh	r2, [r3, #4]
         a->ye-=3;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	3b03      	subs	r3, #3
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	b21a      	sxth	r2, r3
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	80da      	strh	r2, [r3, #6]
      }
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	7d9b      	ldrb	r3, [r3, #22]
 8007e08:	f003 0302 	and.w	r3, r3, #2
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00e      	beq.n	8007e2e <UG_WindowGetArea+0xc2>
      {
         a->ys+= wnd->title.height+1;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	b29b      	uxth	r3, r3
 8007e24:	3301      	adds	r3, #1
 8007e26:	b29b      	uxth	r3, r3
 8007e28:	b21a      	sxth	r2, r3
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	805a      	strh	r2, [r3, #2]
      }
      return UG_RESULT_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	e001      	b.n	8007e36 <UG_WindowGetArea+0xca>
   }
   return UG_RESULT_FAIL;
 8007e32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr
	...

08007e44 <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8007e44:	b590      	push	{r4, r7, lr}
 8007e46:	b08f      	sub	sp, #60	; 0x3c
 8007e48:	af02      	add	r7, sp, #8
 8007e4a:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f000 809a 	beq.w	8007f88 <_UG_WindowDrawTitle+0x144>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	7a1b      	ldrb	r3, [r3, #8]
 8007e58:	f003 0302 	and.w	r3, r3, #2
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8093 	beq.w	8007f88 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	89db      	ldrh	r3, [r3, #14]
 8007e66:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	8a1b      	ldrh	r3, [r3, #16]
 8007e6c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	8a5b      	ldrh	r3, [r3, #18]
 8007e72:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8a9b      	ldrh	r3, [r3, #20]
 8007e78:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	7d9b      	ldrb	r3, [r3, #22]
 8007e7e:	f003 0301 	and.w	r3, r3, #1
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d00f      	beq.n	8007ea6 <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8007e86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007e88:	3303      	adds	r3, #3
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8007e8e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e90:	3303      	adds	r3, #3
 8007e92:	b29b      	uxth	r3, r3
 8007e94:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8007e96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007e98:	3b03      	subs	r3, #3
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8007e9e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007ea0:	3b03      	subs	r3, #3
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8007ea6:	4b3b      	ldr	r3, [pc, #236]	; (8007f94 <_UG_WindowDrawTitle+0x150>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d106      	bne.n	8007ec0 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007eb6:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ebc:	83bb      	strh	r3, [r7, #28]
 8007ebe:	e005      	b.n	8007ecc <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec4:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eca:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007ed6:	4413      	add	r3, r2
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	3b01      	subs	r3, #1
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b21c      	sxth	r4, r3
 8007ee0:	8bfb      	ldrh	r3, [r7, #30]
 8007ee2:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007ee6:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8007eea:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	4623      	mov	r3, r4
 8007ef2:	f7fd fbad 	bl	8005650 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	69db      	ldr	r3, [r3, #28]
 8007f00:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8007f02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f04:	3303      	adds	r3, #3
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	b21b      	sxth	r3, r3
 8007f0a:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8007f0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f0e:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8007f10:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007f12:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f1a:	b29a      	uxth	r2, r3
 8007f1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f1e:	4413      	add	r3, r2
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	3b01      	subs	r3, #1
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	b21b      	sxth	r3, r3
 8007f28:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007f30:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8007f3a:	b21b      	sxth	r3, r3
 8007f3c:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8007f44:	b21b      	sxth	r3, r3
 8007f46:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8007f48:	f107 030c 	add.w	r3, r7, #12
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f7fe fec5 	bl	8006cdc <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f58:	b29a      	uxth	r2, r3
 8007f5a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f5c:	4413      	add	r3, r2
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	b219      	sxth	r1, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007f68:	b29a      	uxth	r2, r3
 8007f6a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007f6c:	4413      	add	r3, r2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	b21b      	sxth	r3, r3
 8007f72:	f649 5413 	movw	r4, #40211	; 0x9d13
 8007f76:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8007f7a:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8007f7e:	9400      	str	r4, [sp, #0]
 8007f80:	f7fd fe70 	bl	8005c64 <UG_DrawLine>
      return UG_RESULT_OK;
 8007f84:	2300      	movs	r3, #0
 8007f86:	e001      	b.n	8007f8c <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3734      	adds	r7, #52	; 0x34
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd90      	pop	{r4, r7, pc}
 8007f94:	200004f0 	.word	0x200004f0

08007f98 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8007f98:	b590      	push	{r4, r7, lr}
 8007f9a:	b089      	sub	sp, #36	; 0x24
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	89db      	ldrh	r3, [r3, #14]
 8007fa4:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	8a1b      	ldrh	r3, [r3, #16]
 8007faa:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8a5b      	ldrh	r3, [r3, #18]
 8007fb0:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	8a9b      	ldrh	r3, [r3, #20]
 8007fb6:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	7a1b      	ldrb	r3, [r3, #8]
 8007fbc:	f023 0320 	bic.w	r3, r3, #32
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	7a1b      	ldrb	r3, [r3, #8]
 8007fca:	f003 0308 	and.w	r3, r3, #8
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	f000 8084 	beq.w	80080dc <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	7d9b      	ldrb	r3, [r3, #22]
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d021      	beq.n	8008024 <_UG_WindowUpdate+0x8c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7a1b      	ldrb	r3, [r3, #8]
 8007fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d11b      	bne.n	8008024 <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8007fec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007ff0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8007ff4:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8007ff8:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8007ffc:	4c42      	ldr	r4, [pc, #264]	; (8008108 <_UG_WindowUpdate+0x170>)
 8007ffe:	9400      	str	r4, [sp, #0]
 8008000:	f7fe ffbe 	bl	8006f80 <_UG_DrawObjectFrame>
         xs+=3;
 8008004:	8abb      	ldrh	r3, [r7, #20]
 8008006:	3303      	adds	r3, #3
 8008008:	b29b      	uxth	r3, r3
 800800a:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 800800c:	8a7b      	ldrh	r3, [r7, #18]
 800800e:	3303      	adds	r3, #3
 8008010:	b29b      	uxth	r3, r3
 8008012:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8008014:	8a3b      	ldrh	r3, [r7, #16]
 8008016:	3b03      	subs	r3, #3
 8008018:	b29b      	uxth	r3, r3
 800801a:	823b      	strh	r3, [r7, #16]
         ye-=3;
 800801c:	89fb      	ldrh	r3, [r7, #14]
 800801e:	3b03      	subs	r3, #3
 8008020:	b29b      	uxth	r3, r3
 8008022:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	7d9b      	ldrb	r3, [r3, #22]
 8008028:	f003 0302 	and.w	r3, r3, #2
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01a      	beq.n	8008066 <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7ff ff07 	bl	8007e44 <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800803c:	b29a      	uxth	r2, r3
 800803e:	8a7b      	ldrh	r3, [r7, #18]
 8008040:	4413      	add	r3, r2
 8008042:	b29b      	uxth	r3, r3
 8008044:	3301      	adds	r3, #1
 8008046:	b29b      	uxth	r3, r3
 8008048:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	7a1b      	ldrb	r3, [r3, #8]
 800804e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008052:	2b00      	cmp	r3, #0
 8008054:	d007      	beq.n	8008066 <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	7a1b      	ldrb	r3, [r3, #8]
 800805a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800805e:	b2da      	uxtb	r2, r3
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	721a      	strb	r2, [r3, #8]
            return;
 8008064:	e04d      	b.n	8008102 <_UG_WindowUpdate+0x16a>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	899b      	ldrh	r3, [r3, #12]
 800806a:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800806e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008072:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8008076:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	4623      	mov	r3, r4
 800807e:	f7fd fae7 	bl	8005650 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8008088:	2300      	movs	r3, #0
 800808a:	82fb      	strh	r3, [r7, #22]
 800808c:	e021      	b.n	80080d2 <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685a      	ldr	r2, [r3, #4]
 8008092:	8afb      	ldrh	r3, [r7, #22]
 8008094:	015b      	lsls	r3, r3, #5
 8008096:	4413      	add	r3, r2
 8008098:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d112      	bne.n	80080cc <_UG_WindowUpdate+0x134>
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	781b      	ldrb	r3, [r3, #0]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d00c      	beq.n	80080cc <_UG_WindowUpdate+0x134>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	f003 0308 	and.w	r3, r3, #8
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d006      	beq.n	80080cc <_UG_WindowUpdate+0x134>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 80080cc:	8afb      	ldrh	r3, [r7, #22]
 80080ce:	3301      	adds	r3, #1
 80080d0:	82fb      	strh	r3, [r7, #22]
 80080d2:	8afa      	ldrh	r2, [r7, #22]
 80080d4:	89bb      	ldrh	r3, [r7, #12]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d3d9      	bcc.n	800808e <_UG_WindowUpdate+0xf6>
 80080da:	e012      	b.n	8008102 <_UG_WindowUpdate+0x16a>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 80080f4:	4b05      	ldr	r3, [pc, #20]	; (800810c <_UG_WindowUpdate+0x174>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80080fa:	9300      	str	r3, [sp, #0]
 80080fc:	4623      	mov	r3, r4
 80080fe:	f7fd faa7 	bl	8005650 <UG_FillFrame>
   }
}
 8008102:	371c      	adds	r7, #28
 8008104:	46bd      	mov	sp, r7
 8008106:	bd90      	pop	{r4, r7, pc}
 8008108:	0801fa9c 	.word	0x0801fa9c
 800810c:	200004f0 	.word	0x200004f0

08008110 <_UG_WindowClear>:

static UG_RESULT _UG_WindowClear( UG_WINDOW* wnd )
{
 8008110:	b590      	push	{r4, r7, lr}
 8008112:	b085      	sub	sp, #20
 8008114:	af02      	add	r7, sp, #8
 8008116:	6078      	str	r0, [r7, #4]
   if ( wnd != NULL )
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d045      	beq.n	80081aa <_UG_WindowClear+0x9a>
   {
      if (wnd->state & WND_STATE_VISIBLE)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	7a1b      	ldrb	r3, [r3, #8]
 8008122:	f003 0308 	and.w	r3, r3, #8
 8008126:	2b00      	cmp	r3, #0
 8008128:	d03d      	beq.n	80081a6 <_UG_WindowClear+0x96>
      {
         wnd->state &= ~WND_STATE_VISIBLE;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	7a1b      	ldrb	r3, [r3, #8]
 800812e:	f023 0308 	bic.w	r3, r3, #8
 8008132:	b2da      	uxtb	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	721a      	strb	r2, [r3, #8]
         UG_FillFrame( wnd->xs, wnd->ys, wnd->xe, wnd->ye, gui->desktop_color );
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8008150:	4b19      	ldr	r3, [pc, #100]	; (80081b8 <_UG_WindowClear+0xa8>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	4623      	mov	r3, r4
 800815a:	f7fd fa79 	bl	8005650 <UG_FillFrame>

         if ( wnd != gui->active_window )
 800815e:	4b16      	ldr	r3, [pc, #88]	; (80081b8 <_UG_WindowClear+0xa8>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d01d      	beq.n	80081a6 <_UG_WindowClear+0x96>
         {
            /* If the current window is visible, update it! */
            if ( gui->active_window->state & WND_STATE_VISIBLE )
 800816a:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <_UG_WindowClear+0xa8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	7a1b      	ldrb	r3, [r3, #8]
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d015      	beq.n	80081a6 <_UG_WindowClear+0x96>
            {
               gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 800817a:	4b0f      	ldr	r3, [pc, #60]	; (80081b8 <_UG_WindowClear+0xa8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	7a1a      	ldrb	r2, [r3, #8]
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <_UG_WindowClear+0xa8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800818c:	b2d2      	uxtb	r2, r2
 800818e:	721a      	strb	r2, [r3, #8]
               gui->active_window->state |= WND_STATE_UPDATE;
 8008190:	4b09      	ldr	r3, [pc, #36]	; (80081b8 <_UG_WindowClear+0xa8>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	7a1a      	ldrb	r2, [r3, #8]
 8008198:	4b07      	ldr	r3, [pc, #28]	; (80081b8 <_UG_WindowClear+0xa8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f042 0220 	orr.w	r2, r2, #32
 80081a2:	b2d2      	uxtb	r2, r2
 80081a4:	721a      	strb	r2, [r3, #8]
            }
         }
      }
      return UG_RESULT_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	e001      	b.n	80081ae <_UG_WindowClear+0x9e>
   }
   return UG_RESULT_FAIL;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd90      	pop	{r4, r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200004f0 	.word	0x200004f0

080081bc <UG_ButtonCreate>:
const UG_COLOR pal_button_released[] = {
    C_PAL_BUTTON_RELEASED
};

UG_RESULT UG_ButtonCreate( UG_WINDOW* wnd, UG_BUTTON* btn, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	4611      	mov	r1, r2
 80081c8:	461a      	mov	r2, r3
 80081ca:	460b      	mov	r3, r1
 80081cc:	71fb      	strb	r3, [r7, #7]
 80081ce:	4613      	mov	r3, r2
 80081d0:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f7fe fff5 	bl	80071c2 <_UG_GetFreeObject>
 80081d8:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d102      	bne.n	80081e6 <UG_ButtonCreate+0x2a>
 80081e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80081e4:	e062      	b.n	80082ac <UG_ButtonCreate+0xf0>

   /* Initialize object-specific parameters */
   btn->state = BTN_STATE_RELEASED;
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	2200      	movs	r2, #0
 80081ea:	701a      	strb	r2, [r3, #0]
   btn->bc = wnd->bc;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	899a      	ldrh	r2, [r3, #12]
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	809a      	strh	r2, [r3, #4]
   btn->fc = wnd->fc;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	895a      	ldrh	r2, [r3, #10]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	805a      	strh	r2, [r3, #2]
   btn->abc = wnd->bc;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	899a      	ldrh	r2, [r3, #12]
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	811a      	strh	r2, [r3, #8]
   btn->afc = wnd->fc;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	895a      	ldrh	r2, [r3, #10]
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	80da      	strh	r2, [r3, #6]
   btn->style = BTN_STYLE_3D;
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2201      	movs	r2, #1
 8008210:	705a      	strb	r2, [r3, #1]
   btn->align = ALIGN_CENTER;
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2212      	movs	r2, #18
 8008216:	741a      	strb	r2, [r3, #16]
   btn->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8008218:	f7fd f9da 	bl	80055d0 <UG_GetGUI>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d004      	beq.n	800822c <UG_ButtonCreate+0x70>
 8008222:	f7fd f9d5 	bl	80055d0 <UG_GetGUI>
 8008226:	4603      	mov	r3, r0
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	e000      	b.n	800822e <UG_ButtonCreate+0x72>
 800822c:	2300      	movs	r3, #0
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	60d3      	str	r3, [r2, #12]
   btn->str = "-";
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	4a1f      	ldr	r2, [pc, #124]	; (80082b4 <UG_ButtonCreate+0xf8>)
 8008236:	615a      	str	r2, [r3, #20]

   /* Initialize standard object parameters */
   obj->update = _UG_ButtonUpdate;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	4a1f      	ldr	r2, [pc, #124]	; (80082b8 <UG_ButtonCreate+0xfc>)
 800823c:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_BUTTON;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2201      	movs	r2, #1
 8008242:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	2200      	movs	r2, #0
 8008248:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	88ba      	ldrh	r2, [r7, #4]
 800824e:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	8c3a      	ldrh	r2, [r7, #32]
 8008254:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800825a:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008260:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008268:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008270:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008278:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008280:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	79fa      	ldrb	r2, [r7, #7]
 8008286:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008290:	b2da      	uxtb	r2, r3
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	701a      	strb	r2, [r3, #0]
   #ifdef UGUI_USE_TOUCH
   obj->state |= OBJ_STATE_TOUCH_ENABLE;
   #endif
   obj->data = (void*)btn;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	68ba      	ldr	r2, [r7, #8]
 800829a:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f023 0301 	bic.w	r3, r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80082aa:	2300      	movs	r3, #0
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3718      	adds	r7, #24
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}
 80082b4:	0800c880 	.word	0x0800c880
 80082b8:	08008519 	.word	0x08008519

080082bc <UG_ButtonSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b084      	sub	sp, #16
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	70fb      	strb	r3, [r7, #3]
 80082c8:	4613      	mov	r3, r2
 80082ca:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 80082cc:	2300      	movs	r3, #0
 80082ce:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80082d4:	78fb      	ldrb	r3, [r7, #3]
 80082d6:	461a      	mov	r2, r3
 80082d8:	2101      	movs	r1, #1
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7fe fe15 	bl	8006f0a <_UG_SearchObject>
 80082e0:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d102      	bne.n	80082ee <UG_ButtonSetForeColor+0x32>
 80082e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082ec:	e00d      	b.n	800830a <UG_ButtonSetForeColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	69db      	ldr	r3, [r3, #28]
 80082f2:	60bb      	str	r3, [r7, #8]
   btn->fc = fc;
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	883a      	ldrh	r2, [r7, #0]
 80082f8:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008302:	b2da      	uxtb	r2, r3
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3710      	adds	r7, #16
 800830e:	46bd      	mov	sp, r7
 8008310:	bd80      	pop	{r7, pc}

08008312 <UG_ButtonSetBackColor>:

UG_RESULT UG_ButtonSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	460b      	mov	r3, r1
 800831c:	70fb      	strb	r3, [r7, #3]
 800831e:	4613      	mov	r3, r2
 8008320:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008326:	2300      	movs	r3, #0
 8008328:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800832a:	78fb      	ldrb	r3, [r7, #3]
 800832c:	461a      	mov	r2, r3
 800832e:	2101      	movs	r1, #1
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f7fe fdea 	bl	8006f0a <_UG_SearchObject>
 8008336:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <UG_ButtonSetBackColor+0x32>
 800833e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008342:	e00d      	b.n	8008360 <UG_ButtonSetBackColor+0x4e>

   btn = (UG_BUTTON*)(obj->data);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	69db      	ldr	r3, [r3, #28]
 8008348:	60bb      	str	r3, [r7, #8]
   btn->bc = bc;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	883a      	ldrh	r2, [r7, #0]
 800834e:	809a      	strh	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008358:	b2da      	uxtb	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <UG_ButtonSetText>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ButtonSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b086      	sub	sp, #24
 800836c:	af00      	add	r7, sp, #0
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	460b      	mov	r3, r1
 8008372:	607a      	str	r2, [r7, #4]
 8008374:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 800837a:	2300      	movs	r3, #0
 800837c:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 800837e:	7afb      	ldrb	r3, [r7, #11]
 8008380:	461a      	mov	r2, r3
 8008382:	2101      	movs	r1, #1
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7fe fdc0 	bl	8006f0a <_UG_SearchObject>
 800838a:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d102      	bne.n	8008398 <UG_ButtonSetText+0x30>
 8008392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008396:	e00d      	b.n	80083b4 <UG_ButtonSetText+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	69db      	ldr	r3, [r3, #28]
 800839c:	613b      	str	r3, [r7, #16]
   btn->str = str;
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	615a      	str	r2, [r3, #20]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083ac:	b2da      	uxtb	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <UG_ButtonSetFont>:

UG_RESULT UG_ButtonSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	460b      	mov	r3, r1
 80083c6:	607a      	str	r2, [r7, #4]
 80083c8:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 80083ca:	2300      	movs	r3, #0
 80083cc:	617b      	str	r3, [r7, #20]
   UG_BUTTON* btn=NULL;
 80083ce:	2300      	movs	r3, #0
 80083d0:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 80083d2:	7afb      	ldrb	r3, [r7, #11]
 80083d4:	461a      	mov	r2, r3
 80083d6:	2101      	movs	r1, #1
 80083d8:	68f8      	ldr	r0, [r7, #12]
 80083da:	f7fe fd96 	bl	8006f0a <_UG_SearchObject>
 80083de:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 80083e0:	697b      	ldr	r3, [r7, #20]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <UG_ButtonSetFont+0x30>
 80083e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083ea:	e00d      	b.n	8008408 <UG_ButtonSetFont+0x4c>

   btn = (UG_BUTTON*)(obj->data);
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	69db      	ldr	r3, [r3, #28]
 80083f0:	613b      	str	r3, [r7, #16]
   btn->font = font;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	60da      	str	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	781b      	ldrb	r3, [r3, #0]
 80083fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008400:	b2da      	uxtb	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3718      	adds	r7, #24
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <UG_ButtonSetStyle>:

UG_RESULT UG_ButtonSetStyle( UG_WINDOW* wnd, UG_U8 id, UG_U8 style )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
 800841c:	4613      	mov	r3, r2
 800841e:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008420:	2300      	movs	r3, #0
 8008422:	60fb      	str	r3, [r7, #12]
   UG_BUTTON* btn=NULL;
 8008424:	2300      	movs	r3, #0
 8008426:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_BUTTON, id );
 8008428:	78fb      	ldrb	r3, [r7, #3]
 800842a:	461a      	mov	r2, r3
 800842c:	2101      	movs	r1, #1
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f7fe fd6b 	bl	8006f0a <_UG_SearchObject>
 8008434:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d102      	bne.n	8008442 <UG_ButtonSetStyle+0x32>
 800843c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008440:	e065      	b.n	800850e <UG_ButtonSetStyle+0xfe>

   btn = (UG_BUTTON*)(obj->data);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	60bb      	str	r3, [r7, #8]

   /* Select color scheme */
   btn->style &= ~(BTN_STYLE_USE_ALTERNATE_COLORS | BTN_STYLE_TOGGLE_COLORS | BTN_STYLE_NO_BORDERS | BTN_STYLE_NO_FILL);
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	f023 031e 	bic.w	r3, r3, #30
 8008450:	b2da      	uxtb	r2, r3
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	705a      	strb	r2, [r3, #1]
   btn->state |= BTN_STATE_ALWAYS_REDRAW;
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f043 0302 	orr.w	r3, r3, #2
 800845e:	b2da      	uxtb	r2, r3
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	701a      	strb	r2, [r3, #0]
   if ( style & BTN_STYLE_NO_BORDERS )
 8008464:	78bb      	ldrb	r3, [r7, #2]
 8008466:	f003 0308 	and.w	r3, r3, #8
 800846a:	2b00      	cmp	r3, #0
 800846c:	d006      	beq.n	800847c <UG_ButtonSetStyle+0x6c>
   {
      btn->style |= BTN_STYLE_NO_BORDERS;
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	f043 0308 	orr.w	r3, r3, #8
 8008476:	b2da      	uxtb	r2, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_NO_FILL )
 800847c:	78bb      	ldrb	r3, [r7, #2]
 800847e:	f003 0310 	and.w	r3, r3, #16
 8008482:	2b00      	cmp	r3, #0
 8008484:	d006      	beq.n	8008494 <UG_ButtonSetStyle+0x84>
   {
      btn->style |= BTN_STYLE_NO_FILL;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	785b      	ldrb	r3, [r3, #1]
 800848a:	f043 0310 	orr.w	r3, r3, #16
 800848e:	b2da      	uxtb	r2, r3
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	705a      	strb	r2, [r3, #1]
   }
   if ( style & BTN_STYLE_TOGGLE_COLORS )
 8008494:	78bb      	ldrb	r3, [r7, #2]
 8008496:	f003 0302 	and.w	r3, r3, #2
 800849a:	2b00      	cmp	r3, #0
 800849c:	d007      	beq.n	80084ae <UG_ButtonSetStyle+0x9e>
   {
      btn->style |= BTN_STYLE_TOGGLE_COLORS;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	785b      	ldrb	r3, [r3, #1]
 80084a2:	f043 0302 	orr.w	r3, r3, #2
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	705a      	strb	r2, [r3, #1]
 80084ac:	e013      	b.n	80084d6 <UG_ButtonSetStyle+0xc6>
   }
   else if ( style & BTN_STYLE_USE_ALTERNATE_COLORS )
 80084ae:	78bb      	ldrb	r3, [r7, #2]
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d007      	beq.n	80084c8 <UG_ButtonSetStyle+0xb8>
   {
      btn->style |= BTN_STYLE_USE_ALTERNATE_COLORS;
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	785b      	ldrb	r3, [r3, #1]
 80084bc:	f043 0304 	orr.w	r3, r3, #4
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	705a      	strb	r2, [r3, #1]
 80084c6:	e006      	b.n	80084d6 <UG_ButtonSetStyle+0xc6>
   }
   else
   {
      btn->state &= ~BTN_STATE_ALWAYS_REDRAW;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	f023 0302 	bic.w	r3, r3, #2
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	701a      	strb	r2, [r3, #0]
   }

   /* 3D or 2D */
   if ( style & BTN_STYLE_3D )
 80084d6:	78bb      	ldrb	r3, [r7, #2]
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d007      	beq.n	80084f0 <UG_ButtonSetStyle+0xe0>
   {
      btn->style |= BTN_STYLE_3D;
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	f043 0301 	orr.w	r3, r3, #1
 80084e8:	b2da      	uxtb	r2, r3
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	705a      	strb	r2, [r3, #1]
 80084ee:	e006      	b.n	80084fe <UG_ButtonSetStyle+0xee>
   }
   else
   {
      btn->style &= ~BTN_STYLE_3D;
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	f023 0301 	bic.w	r3, r3, #1
 80084f8:	b2da      	uxtb	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	705a      	strb	r2, [r3, #1]
   }   
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008506:	b2da      	uxtb	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 800850c:	2300      	movs	r3, #0
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}
	...

08008518 <_UG_ButtonUpdate>:
   return align;
}


static void _UG_ButtonUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8008518:	b590      	push	{r4, r7, lr}
 800851a:	b091      	sub	sp, #68	; 0x44
 800851c:	af02      	add	r7, sp, #8
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
   UG_BUTTON* btn;
   UG_AREA a;
   UG_TEXT txt;
   UG_U8 d,o=0;
 8008522:	2300      	movs	r3, #0
 8008524:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   /* Get object-specific data */
   btn = (UG_BUTTON*)(obj->data);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	633b      	str	r3, [r7, #48]	; 0x30
   #endif

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 8181 	beq.w	800883e <_UG_ButtonUpdate+0x326>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	f003 0308 	and.w	r3, r3, #8
 8008544:	2b00      	cmp	r3, #0
 8008546:	f000 8157 	beq.w	80087f8 <_UG_ButtonUpdate+0x2e0>
      {
         /* Full redraw necessary? */
         if ( (obj->state & OBJ_STATE_REDRAW) || (btn->state & BTN_STATE_ALWAYS_REDRAW) )
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008552:	2b00      	cmp	r3, #0
 8008554:	d106      	bne.n	8008564 <_UG_ButtonUpdate+0x4c>
 8008556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	f000 8108 	beq.w	8008774 <_UG_ButtonUpdate+0x25c>
         {
            UG_WindowGetArea(wnd,&a);
 8008564:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008568:	4619      	mov	r1, r3
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff fbfe 	bl	8007d6c <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008576:	b29a      	uxth	r2, r3
 8008578:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800857c:	b29b      	uxth	r3, r3
 800857e:	4413      	add	r3, r2
 8008580:	b29b      	uxth	r3, r3
 8008582:	b21a      	sxth	r2, r3
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800858e:	b29a      	uxth	r2, r3
 8008590:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8008594:	b29b      	uxth	r3, r3
 8008596:	4413      	add	r3, r2
 8008598:	b29b      	uxth	r3, r3
 800859a:	b21a      	sxth	r2, r3
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80085a6:	b29a      	uxth	r2, r3
 80085a8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80085ac:	b29b      	uxth	r3, r3
 80085ae:	4413      	add	r3, r2
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	b21a      	sxth	r2, r3
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80085be:	b29a      	uxth	r2, r3
 80085c0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	4413      	add	r3, r2
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	b21a      	sxth	r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80085dc:	429a      	cmp	r2, r3
 80085de:	f300 812b 	bgt.w	8008838 <_UG_ButtonUpdate+0x320>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80085ee:	429a      	cmp	r2, r3
 80085f0:	f300 8124 	bgt.w	800883c <_UG_ButtonUpdate+0x324>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            /* 3D or 2D style? */
            d = ( btn->style & BTN_STYLE_3D )? 3:1;
 80085f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f6:	785b      	ldrb	r3, [r3, #1]
 80085f8:	f003 0301 	and.w	r3, r3, #1
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <_UG_ButtonUpdate+0xec>
 8008600:	2303      	movs	r3, #3
 8008602:	e000      	b.n	8008606 <_UG_ButtonUpdate+0xee>
 8008604:	2301      	movs	r3, #1
 8008606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            txt.bc = btn->bc;
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	889b      	ldrh	r3, [r3, #4]
 800860e:	837b      	strh	r3, [r7, #26]
            txt.fc = btn->fc;
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	885b      	ldrh	r3, [r3, #2]
 8008614:	833b      	strh	r3, [r7, #24]

            if( btn->state & BTN_STATE_PRESSED )
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	f003 0301 	and.w	r3, r3, #1
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01b      	beq.n	800865a <_UG_ButtonUpdate+0x142>
            {
              /* o is the text offset, to provide a visual effect when pressed */
              o=1;
 8008622:	2301      	movs	r3, #1
 8008624:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
               /* "toggle" style? */
               if( btn->style & BTN_STYLE_TOGGLE_COLORS )
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	f003 0302 	and.w	r3, r3, #2
 8008630:	2b00      	cmp	r3, #0
 8008632:	d006      	beq.n	8008642 <_UG_ButtonUpdate+0x12a>
               {
                  /* Swap colors */
                  txt.bc = btn->fc;
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	885b      	ldrh	r3, [r3, #2]
 8008638:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->bc;
 800863a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863c:	889b      	ldrh	r3, [r3, #4]
 800863e:	833b      	strh	r3, [r7, #24]
 8008640:	e00b      	b.n	800865a <_UG_ButtonUpdate+0x142>
               }
               /* Use alternate colors? */
               else if ( btn->style & BTN_STYLE_USE_ALTERNATE_COLORS )
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	f003 0304 	and.w	r3, r3, #4
 800864a:	2b00      	cmp	r3, #0
 800864c:	d005      	beq.n	800865a <_UG_ButtonUpdate+0x142>
               {
                  txt.bc = btn->abc;
 800864e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008650:	891b      	ldrh	r3, [r3, #8]
 8008652:	837b      	strh	r3, [r7, #26]
                  txt.fc = btn->afc;
 8008654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008656:	88db      	ldrh	r3, [r3, #6]
 8008658:	833b      	strh	r3, [r7, #24]
               }
            }
            if ( !(btn->style & BTN_STYLE_NO_FILL) )
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	785b      	ldrb	r3, [r3, #1]
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b00      	cmp	r3, #0
 8008664:	d12d      	bne.n	80086c2 <_UG_ButtonUpdate+0x1aa>
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, txt.bc);
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800866c:	b29a      	uxth	r2, r3
 800866e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008672:	b29b      	uxth	r3, r3
 8008674:	4413      	add	r3, r2
 8008676:	b29b      	uxth	r3, r3
 8008678:	b218      	sxth	r0, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008680:	b29a      	uxth	r2, r3
 8008682:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008686:	b29b      	uxth	r3, r3
 8008688:	4413      	add	r3, r2
 800868a:	b29b      	uxth	r3, r3
 800868c:	b219      	sxth	r1, r3
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008694:	b29a      	uxth	r2, r3
 8008696:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800869a:	b29b      	uxth	r3, r3
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	b29b      	uxth	r3, r3
 80086a0:	b21c      	sxth	r4, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80086a8:	b29a      	uxth	r2, r3
 80086aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	1ad3      	subs	r3, r2, r3
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	b21a      	sxth	r2, r3
 80086b6:	8b7b      	ldrh	r3, [r7, #26]
 80086b8:	9300      	str	r3, [sp, #0]
 80086ba:	4613      	mov	r3, r2
 80086bc:	4622      	mov	r2, r4
 80086be:	f7fc ffc7 	bl	8005650 <UG_FillFrame>

            /* Draw button text */
            txt.a.xs = obj->a_abs.xs+d+o;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086c8:	b29a      	uxth	r2, r3
 80086ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	4413      	add	r3, r2
 80086d2:	b29a      	uxth	r2, r3
 80086d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4413      	add	r3, r2
 80086dc:	b29b      	uxth	r3, r3
 80086de:	b21b      	sxth	r3, r3
 80086e0:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys+d+o;
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	4413      	add	r3, r2
 80086f2:	b29a      	uxth	r2, r3
 80086f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80086f8:	b29b      	uxth	r3, r3
 80086fa:	4413      	add	r3, r2
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	b21b      	sxth	r3, r3
 8008700:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe-d+o;
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008708:	b29a      	uxth	r2, r3
 800870a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800870e:	b29b      	uxth	r3, r3
 8008710:	1ad3      	subs	r3, r2, r3
 8008712:	b29a      	uxth	r2, r3
 8008714:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008718:	b29b      	uxth	r3, r3
 800871a:	4413      	add	r3, r2
 800871c:	b29b      	uxth	r3, r3
 800871e:	b21b      	sxth	r3, r3
 8008720:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye-d+o;
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008728:	b29a      	uxth	r2, r3
 800872a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800872e:	b29b      	uxth	r3, r3
 8008730:	1ad3      	subs	r3, r2, r3
 8008732:	b29a      	uxth	r2, r3
 8008734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008738:	b29b      	uxth	r3, r3
 800873a:	4413      	add	r3, r2
 800873c:	b29b      	uxth	r3, r3
 800873e:	b21b      	sxth	r3, r3
 8008740:	82fb      	strh	r3, [r7, #22]
            txt.align = btn->align;
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	7c1b      	ldrb	r3, [r3, #16]
 8008746:	773b      	strb	r3, [r7, #28]
            txt.font = btn->font;
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	60fb      	str	r3, [r7, #12]
            txt.h_space = 2;
 800874e:	2302      	movs	r3, #2
 8008750:	83fb      	strh	r3, [r7, #30]
            txt.v_space = 2;
 8008752:	2302      	movs	r3, #2
 8008754:	843b      	strh	r3, [r7, #32]
            txt.str = btn->str;
 8008756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008758:	695b      	ldr	r3, [r3, #20]
 800875a:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 800875c:	f107 0308 	add.w	r3, r7, #8
 8008760:	4618      	mov	r0, r3
 8008762:	f7fe fabb 	bl	8006cdc <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800876e:	b2da      	uxtb	r2, r3
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	701a      	strb	r2, [r3, #0]
#ifdef UGUI_USE_POSTRENDER_EVENT
            _UG_SendObjectPostrenderEvent(wnd, obj);
#endif
         }
         /* Draw button frame */
         if ( !(btn->style & BTN_STYLE_NO_BORDERS) )
 8008774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008776:	785b      	ldrb	r3, [r3, #1]
 8008778:	f003 0308 	and.w	r3, r3, #8
 800877c:	2b00      	cmp	r3, #0
 800877e:	d153      	bne.n	8008828 <_UG_ButtonUpdate+0x310>
         {
             if ( btn->style & BTN_STYLE_3D )
 8008780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008782:	785b      	ldrb	r3, [r3, #1]
 8008784:	f003 0301 	and.w	r3, r3, #1
 8008788:	2b00      	cmp	r3, #0
 800878a:	d019      	beq.n	80087c0 <_UG_ButtonUpdate+0x2a8>
             {  /* 3D */
                _UG_DrawObjectFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye, (btn->state&BTN_STATE_PRESSED)?(UG_COLOR*)pal_button_pressed:(UG_COLOR*)pal_button_released);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <_UG_ButtonUpdate+0x29c>
 80087b0:	4b24      	ldr	r3, [pc, #144]	; (8008844 <_UG_ButtonUpdate+0x32c>)
 80087b2:	e000      	b.n	80087b6 <_UG_ButtonUpdate+0x29e>
 80087b4:	4b24      	ldr	r3, [pc, #144]	; (8008848 <_UG_ButtonUpdate+0x330>)
 80087b6:	9300      	str	r3, [sp, #0]
 80087b8:	4623      	mov	r3, r4
 80087ba:	f7fe fbe1 	bl	8006f80 <_UG_DrawObjectFrame>
 80087be:	e033      	b.n	8008828 <_UG_ButtonUpdate+0x310>
             }
             else
             {  /* 2D */
                 UG_DrawFrame(obj->a_abs.xs,obj->a_abs.ys,obj->a_abs.xe,obj->a_abs.ye,(btn->state&BTN_STATE_PRESSED)?btn->abc:btn->afc);
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80087d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	f003 0301 	and.w	r3, r3, #1
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <_UG_ButtonUpdate+0x2d2>
 80087e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087e6:	891b      	ldrh	r3, [r3, #8]
 80087e8:	e001      	b.n	80087ee <_UG_ButtonUpdate+0x2d6>
 80087ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ec:	88db      	ldrh	r3, [r3, #6]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	4623      	mov	r3, r4
 80087f2:	f7fd f816 	bl	8005822 <UG_DrawFrame>
 80087f6:	e017      	b.n	8008828 <_UG_ButtonUpdate+0x310>
             }
         }
      }
      else
      {
          if ( !(btn->style & BTN_STYLE_NO_FILL) )
 80087f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fa:	785b      	ldrb	r3, [r3, #1]
 80087fc:	f003 0310 	and.w	r3, r3, #16
 8008800:	2b00      	cmp	r3, #0
 8008802:	d111      	bne.n	8008828 <_UG_ButtonUpdate+0x310>
            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	899b      	ldrh	r3, [r3, #12]
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	4623      	mov	r3, r4
 8008824:	f7fc ff14 	bl	8005650 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	f023 0320 	bic.w	r3, r3, #32
 8008830:	b2da      	uxtb	r2, r3
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	701a      	strb	r2, [r3, #0]
 8008836:	e002      	b.n	800883e <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008838:	bf00      	nop
 800883a:	e000      	b.n	800883e <_UG_ButtonUpdate+0x326>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800883c:	bf00      	nop
   }
}
 800883e:	373c      	adds	r7, #60	; 0x3c
 8008840:	46bd      	mov	sp, r7
 8008842:	bd90      	pop	{r4, r7, pc}
 8008844:	0801fab4 	.word	0x0801fab4
 8008848:	0801facc 	.word	0x0801facc

0800884c <UG_ProgressCreate>:
const UG_COLOR pal_progress[] = {
    C_PAL_PROGRESS
};

UG_RESULT UG_ProgressCreate( UG_WINDOW* wnd, UG_PROGRESS* pgb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b086      	sub	sp, #24
 8008850:	af00      	add	r7, sp, #0
 8008852:	60f8      	str	r0, [r7, #12]
 8008854:	60b9      	str	r1, [r7, #8]
 8008856:	4611      	mov	r1, r2
 8008858:	461a      	mov	r2, r3
 800885a:	460b      	mov	r3, r1
 800885c:	71fb      	strb	r3, [r7, #7]
 800885e:	4613      	mov	r3, r2
 8008860:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f7fe fcad 	bl	80071c2 <_UG_GetFreeObject>
 8008868:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d102      	bne.n	8008876 <UG_ProgressCreate+0x2a>
 8008870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008874:	e047      	b.n	8008906 <UG_ProgressCreate+0xba>

   /* Initialize object-specific parameters */
   pgb->style = PGB_STYLE_3D;
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	2201      	movs	r2, #1
 800887a:	701a      	strb	r2, [r3, #0]
   pgb->fc = wnd->fc;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	895a      	ldrh	r2, [r3, #10]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	805a      	strh	r2, [r3, #2]
   pgb->bc = wnd->bc;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	899a      	ldrh	r2, [r3, #12]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	809a      	strh	r2, [r3, #4]
   pgb->progress = 0;
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2200      	movs	r2, #0
 8008890:	719a      	strb	r2, [r3, #6]

   /* Initialize standard object parameters */
   obj->update = _UG_ProgressUpdate;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	4a1e      	ldr	r2, [pc, #120]	; (8008910 <UG_ProgressCreate+0xc4>)
 8008896:	605a      	str	r2, [r3, #4]
   obj->type = OBJ_TYPE_PROGRESS;
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	2205      	movs	r2, #5
 800889c:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2200      	movs	r2, #0
 80088a2:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	88ba      	ldrh	r2, [r7, #4]
 80088a8:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	8c3a      	ldrh	r2, [r7, #32]
 80088ae:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80088b4:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80088ba:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088c2:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ca:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088d2:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088da:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	79fa      	ldrb	r2, [r7, #7]
 80088e0:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	697b      	ldr	r3, [r7, #20]
 80088ee:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)pgb;
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	781b      	ldrb	r3, [r3, #0]
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	080089e9 	.word	0x080089e9

08008914 <UG_ProgressSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	460b      	mov	r3, r1
 800891e:	70fb      	strb	r3, [r7, #3]
 8008920:	4613      	mov	r3, r2
 8008922:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008924:	2300      	movs	r3, #0
 8008926:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 8008928:	2300      	movs	r3, #0
 800892a:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 800892c:	78fb      	ldrb	r3, [r7, #3]
 800892e:	461a      	mov	r2, r3
 8008930:	2105      	movs	r1, #5
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f7fe fae9 	bl	8006f0a <_UG_SearchObject>
 8008938:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d102      	bne.n	8008946 <UG_ProgressSetForeColor+0x32>
 8008940:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008944:	e00d      	b.n	8008962 <UG_ProgressSetForeColor+0x4e>

   pgb = (UG_PROGRESS*)(obj->data);
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	60bb      	str	r3, [r7, #8]
   pgb->fc = fc;
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	883a      	ldrh	r2, [r7, #0]
 8008950:	805a      	strh	r2, [r3, #2]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800895a:	b2da      	uxtb	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <UG_ProgressSetProgress>:

   return UG_RESULT_OK;
}

UG_RESULT UG_ProgressSetProgress( UG_WINDOW* wnd, UG_U8 id, UG_U8 progress )
{
 800896a:	b580      	push	{r7, lr}
 800896c:	b084      	sub	sp, #16
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
 8008972:	460b      	mov	r3, r1
 8008974:	70fb      	strb	r3, [r7, #3]
 8008976:	4613      	mov	r3, r2
 8008978:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 800897a:	2300      	movs	r3, #0
 800897c:	60fb      	str	r3, [r7, #12]
   UG_PROGRESS* pgb=NULL;
 800897e:	2300      	movs	r3, #0
 8008980:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_PROGRESS, id );
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	461a      	mov	r2, r3
 8008986:	2105      	movs	r1, #5
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f7fe fabe 	bl	8006f0a <_UG_SearchObject>
 800898e:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d102      	bne.n	800899c <UG_ProgressSetProgress+0x32>
 8008996:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800899a:	e020      	b.n	80089de <UG_ProgressSetProgress+0x74>

   progress = progress > 100 ? 100 : progress;
 800899c:	78bb      	ldrb	r3, [r7, #2]
 800899e:	2b64      	cmp	r3, #100	; 0x64
 80089a0:	bf28      	it	cs
 80089a2:	2364      	movcs	r3, #100	; 0x64
 80089a4:	70bb      	strb	r3, [r7, #2]

   pgb = (UG_PROGRESS*)(obj->data);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	60bb      	str	r3, [r7, #8]

   // Only update if different
   if(progress != pgb->progress)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	799b      	ldrb	r3, [r3, #6]
 80089b0:	78ba      	ldrb	r2, [r7, #2]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d012      	beq.n	80089dc <UG_ProgressSetProgress+0x72>
   {
      // Only redraw if new progress is less then actual(Need to redraw the background)
      obj->state |= OBJ_STATE_UPDATE | ((progress < pgb->progress) ? OBJ_STATE_REDRAW : 0);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	b25b      	sxtb	r3, r3
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	7992      	ldrb	r2, [r2, #6]
 80089c0:	78b9      	ldrb	r1, [r7, #2]
 80089c2:	4291      	cmp	r1, r2
 80089c4:	d201      	bcs.n	80089ca <UG_ProgressSetProgress+0x60>
 80089c6:	2260      	movs	r2, #96	; 0x60
 80089c8:	e000      	b.n	80089cc <UG_ProgressSetProgress+0x62>
 80089ca:	2220      	movs	r2, #32
 80089cc:	4313      	orrs	r3, r2
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	701a      	strb	r2, [r3, #0]
      pgb->progress = progress;
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	78ba      	ldrb	r2, [r7, #2]
 80089da:	719a      	strb	r2, [r3, #6]
   }

   return UG_RESULT_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3710      	adds	r7, #16
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
	...

080089e8 <_UG_ProgressUpdate>:
   }
   return c;
}

static void _UG_ProgressUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 80089e8:	b590      	push	{r4, r7, lr}
 80089ea:	b08b      	sub	sp, #44	; 0x2c
 80089ec:	af02      	add	r7, sp, #8
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
   UG_PROGRESS* pgb;
   UG_AREA a;
   UG_U8 d=0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	77fb      	strb	r3, [r7, #31]
   UG_S16 w, wps, wpe;

   /* Get object-specific data */
   pgb = (UG_PROGRESS*)(obj->data);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	61bb      	str	r3, [r7, #24]

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	f003 0320 	and.w	r3, r3, #32
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 81a5 	beq.w	8008d54 <_UG_ProgressUpdate+0x36c>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	f003 0308 	and.w	r3, r3, #8
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 8162 	beq.w	8008cdc <_UG_ProgressUpdate+0x2f4>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 818c 	beq.w	8008d3e <_UG_ProgressUpdate+0x356>
         {
            UG_WindowGetArea(wnd,&a);
 8008a26:	f107 0308 	add.w	r3, r7, #8
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7ff f99d 	bl	8007d6c <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8008a38:	b29a      	uxth	r2, r3
 8008a3a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008a3e:	b29b      	uxth	r3, r3
 8008a40:	4413      	add	r3, r2
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	b21a      	sxth	r2, r3
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008a50:	b29a      	uxth	r2, r3
 8008a52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008a56:	b29b      	uxth	r3, r3
 8008a58:	4413      	add	r3, r2
 8008a5a:	b29b      	uxth	r3, r3
 8008a5c:	b21a      	sxth	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008a68:	b29a      	uxth	r2, r3
 8008a6a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8008a6e:	b29b      	uxth	r3, r3
 8008a70:	4413      	add	r3, r2
 8008a72:	b29b      	uxth	r3, r3
 8008a74:	b21a      	sxth	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008a86:	b29b      	uxth	r3, r3
 8008a88:	4413      	add	r3, r2
 8008a8a:	b29b      	uxth	r3, r3
 8008a8c:	b21a      	sxth	r2, r3
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	81da      	strh	r2, [r3, #14]

            if ( obj->a_abs.ye > wnd->ye ) return;
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	f300 8155 	bgt.w	8008d4e <_UG_ProgressUpdate+0x366>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8008ab0:	429a      	cmp	r2, r3
 8008ab2:	f300 814e 	bgt.w	8008d52 <_UG_ProgressUpdate+0x36a>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            d = 1;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	77fb      	strb	r3, [r7, #31]
            /* 3D or 2D style? */
            if ( !(pgb->style & PGB_STYLE_NO_BORDERS) )
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d12e      	bne.n	8008b24 <_UG_ProgressUpdate+0x13c>
            {
               if ( pgb->style & PGB_STYLE_3D )
 8008ac6:	69bb      	ldr	r3, [r7, #24]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d013      	beq.n	8008afa <_UG_ProgressUpdate+0x112>
               {  /* 3D */
                  _UG_DrawObjectFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, (UG_COLOR*)pal_progress);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008aea:	4c9c      	ldr	r4, [pc, #624]	; (8008d5c <_UG_ProgressUpdate+0x374>)
 8008aec:	9400      	str	r4, [sp, #0]
 8008aee:	f7fe fa47 	bl	8006f80 <_UG_DrawObjectFrame>
                  d += 3;
 8008af2:	7ffb      	ldrb	r3, [r7, #31]
 8008af4:	3303      	adds	r3, #3
 8008af6:	77fb      	strb	r3, [r7, #31]
 8008af8:	e014      	b.n	8008b24 <_UG_ProgressUpdate+0x13c>
               }
               else
               {  /* 2D */
                  UG_DrawFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, pgb->fc);
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	885b      	ldrh	r3, [r3, #2]
 8008b16:	9300      	str	r3, [sp, #0]
 8008b18:	4623      	mov	r3, r4
 8008b1a:	f7fc fe82 	bl	8005822 <UG_DrawFrame>
                  d += 1;
 8008b1e:	7ffb      	ldrb	r3, [r7, #31]
 8008b20:	3301      	adds	r3, #1
 8008b22:	77fb      	strb	r3, [r7, #31]
               }
            }
            
            w   = ((obj->a_abs.xe-d)-(obj->a_abs.xs+d));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008b2a:	b29a      	uxth	r2, r3
 8008b2c:	7ffb      	ldrb	r3, [r7, #31]
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008b3a:	b299      	uxth	r1, r3
 8008b3c:	7ffb      	ldrb	r3, [r7, #31]
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	440b      	add	r3, r1
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	82fb      	strh	r3, [r7, #22]
            wps = w * pgb->progress / 100;
 8008b4a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8008b4e:	69ba      	ldr	r2, [r7, #24]
 8008b50:	7992      	ldrb	r2, [r2, #6]
 8008b52:	fb02 f303 	mul.w	r3, r2, r3
 8008b56:	4a82      	ldr	r2, [pc, #520]	; (8008d60 <_UG_ProgressUpdate+0x378>)
 8008b58:	fb82 1203 	smull	r1, r2, r2, r3
 8008b5c:	1152      	asrs	r2, r2, #5
 8008b5e:	17db      	asrs	r3, r3, #31
 8008b60:	1ad3      	subs	r3, r2, r3
 8008b62:	82bb      	strh	r3, [r7, #20]
            wpe = w - wps;
 8008b64:	8afa      	ldrh	r2, [r7, #22]
 8008b66:	8abb      	ldrh	r3, [r7, #20]
 8008b68:	1ad3      	subs	r3, r2, r3
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	827b      	strh	r3, [r7, #18]

            if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008b6e:	69bb      	ldr	r3, [r7, #24]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d17d      	bne.n	8008c76 <_UG_ProgressUpdate+0x28e>
                /* What's this for? Drawing a frame before drawing the remaining frames on top on it? Seems to do nothing, waste power? */
               //UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);

            // Draw remaining frame first
            if(wpe > 0)
 8008b7a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	dd79      	ble.n	8008c76 <_UG_ProgressUpdate+0x28e>
            {
               UG_S16 xs = obj->a_abs.xs + d + wps;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	7ffb      	ldrb	r3, [r7, #31]
 8008b8c:	b29b      	uxth	r3, r3
 8008b8e:	4413      	add	r3, r2
 8008b90:	b29a      	uxth	r2, r3
 8008b92:	8abb      	ldrh	r3, [r7, #20]
 8008b94:	4413      	add	r3, r2
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	83bb      	strh	r3, [r7, #28]
               UG_S16 xe = obj->a_abs.xe - d;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	7ffb      	ldrb	r3, [r7, #31]
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	1ad3      	subs	r3, r2, r3
 8008ba8:	b29b      	uxth	r3, r3
 8008baa:	823b      	strh	r3, [r7, #16]
               
               if ( pgb->style & PGB_STYLE_FORE_COLOR_MESH )
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d042      	beq.n	8008c3e <_UG_ProgressUpdate+0x256>
               {
                  // FIXME: Need fix, if start at 0, it is shifted 1 pixel right.
                  // Needed to match mesh pattern, otherwise it would "scroll right" 
                  if((((obj->a_abs.xs+d) & 1) && (wps & 1)) || (!((obj->a_abs.xs+d) & 1) && !(wps & 1)))
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	7ffb      	ldrb	r3, [r7, #31]
 8008bc2:	4413      	add	r3, r2
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d004      	beq.n	8008bd6 <_UG_ProgressUpdate+0x1ee>
 8008bcc:	8abb      	ldrh	r3, [r7, #20]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d10e      	bne.n	8008bf4 <_UG_ProgressUpdate+0x20c>
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	7ffb      	ldrb	r3, [r7, #31]
 8008be0:	4413      	add	r3, r2
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10a      	bne.n	8008c00 <_UG_ProgressUpdate+0x218>
 8008bea:	8abb      	ldrh	r3, [r7, #20]
 8008bec:	f003 0301 	and.w	r3, r3, #1
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d105      	bne.n	8008c00 <_UG_ProgressUpdate+0x218>
                     xs++;
 8008bf4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	b29b      	uxth	r3, r3
 8008bfe:	83bb      	strh	r3, [r7, #28]
                  UG_DrawMesh (xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, 2, pgb->fc);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	7ffb      	ldrb	r3, [r7, #31]
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	4413      	add	r3, r2
 8008c0e:	b29b      	uxth	r3, r3
 8008c10:	b219      	sxth	r1, r3
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008c18:	b29a      	uxth	r2, r3
 8008c1a:	7ffb      	ldrb	r3, [r7, #31]
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	b21c      	sxth	r4, r3
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	885b      	ldrh	r3, [r3, #2]
 8008c28:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008c2c:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008c30:	9301      	str	r3, [sp, #4]
 8008c32:	2302      	movs	r3, #2
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	4623      	mov	r3, r4
 8008c38:	f7fc fd7c 	bl	8005734 <UG_DrawMesh>
 8008c3c:	e01b      	b.n	8008c76 <_UG_ProgressUpdate+0x28e>
               }
               else
               {
                  UG_FillFrame(xs, obj->a_abs.ys+d, xe, obj->a_abs.ye-d, pgb->bc);
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	7ffb      	ldrb	r3, [r7, #31]
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	b219      	sxth	r1, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	7ffb      	ldrb	r3, [r7, #31]
 8008c5a:	b29b      	uxth	r3, r3
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	b29b      	uxth	r3, r3
 8008c60:	b21c      	sxth	r4, r3
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	889b      	ldrh	r3, [r3, #4]
 8008c66:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8008c6a:	f9b7 001c 	ldrsh.w	r0, [r7, #28]
 8008c6e:	9300      	str	r3, [sp, #0]
 8008c70:	4623      	mov	r3, r4
 8008c72:	f7fc fced 	bl	8005650 <UG_FillFrame>
               }
            }

            // Draw elapsed frame
            if(pgb->progress > 0)
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	799b      	ldrb	r3, [r3, #6]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d05f      	beq.n	8008d3e <_UG_ProgressUpdate+0x356>
            {
               UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xs+d+wps, obj->a_abs.ye-d, pgb->fc);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	7ffb      	ldrb	r3, [r7, #31]
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	b218      	sxth	r0, r3
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	7ffb      	ldrb	r3, [r7, #31]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	b29b      	uxth	r3, r3
 8008ca0:	b219      	sxth	r1, r3
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008ca8:	b29a      	uxth	r2, r3
 8008caa:	7ffb      	ldrb	r3, [r7, #31]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	4413      	add	r3, r2
 8008cb0:	b29a      	uxth	r2, r3
 8008cb2:	8abb      	ldrh	r3, [r7, #20]
 8008cb4:	4413      	add	r3, r2
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	b21c      	sxth	r4, r3
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008cc0:	b29a      	uxth	r2, r3
 8008cc2:	7ffb      	ldrb	r3, [r7, #31]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	b21a      	sxth	r2, r3
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	885b      	ldrh	r3, [r3, #2]
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	4622      	mov	r2, r4
 8008cd6:	f7fc fcbb 	bl	8005650 <UG_FillFrame>
 8008cda:	e030      	b.n	8008d3e <_UG_ProgressUpdate+0x356>
#endif
         }
      }
      else
      {
         if ( !(pgb->style & PGB_STYLE_NO_FILL) )
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d12a      	bne.n	8008d3e <_UG_ProgressUpdate+0x356>
            UG_FillFrame(obj->a_abs.xs+d, obj->a_abs.ys+d, obj->a_abs.xe-d, obj->a_abs.ye-d, wnd->bc);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	7ffb      	ldrb	r3, [r7, #31]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	4413      	add	r3, r2
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	b218      	sxth	r0, r3
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8008d00:	b29a      	uxth	r2, r3
 8008d02:	7ffb      	ldrb	r3, [r7, #31]
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	4413      	add	r3, r2
 8008d08:	b29b      	uxth	r3, r3
 8008d0a:	b219      	sxth	r1, r3
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	7ffb      	ldrb	r3, [r7, #31]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	b21c      	sxth	r4, r3
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	7ffb      	ldrb	r3, [r7, #31]
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	b21a      	sxth	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	899b      	ldrh	r3, [r3, #12]
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	4613      	mov	r3, r2
 8008d38:	4622      	mov	r2, r4
 8008d3a:	f7fc fc89 	bl	8005650 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	f023 0320 	bic.w	r3, r3, #32
 8008d46:	b2da      	uxtb	r2, r3
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	e002      	b.n	8008d54 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.ye > wnd->ye ) return;
 8008d4e:	bf00      	nop
 8008d50:	e000      	b.n	8008d54 <_UG_ProgressUpdate+0x36c>
            if ( obj->a_abs.xe > wnd->xe ) return;
 8008d52:	bf00      	nop
   }
}
 8008d54:	3724      	adds	r7, #36	; 0x24
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd90      	pop	{r4, r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	0801fae4 	.word	0x0801fae4
 8008d60:	51eb851f 	.word	0x51eb851f

08008d64 <UG_TextboxCreate>:

/* Static functions */
static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj);

UG_RESULT UG_TextboxCreate( UG_WINDOW* wnd, UG_TEXTBOX* txb, UG_U8 id, UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	4611      	mov	r1, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	460b      	mov	r3, r1
 8008d74:	71fb      	strb	r3, [r7, #7]
 8008d76:	4613      	mov	r3, r2
 8008d78:	80bb      	strh	r3, [r7, #4]
   UG_OBJECT* obj;

   obj = _UG_GetFreeObject( wnd );
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f7fe fa21 	bl	80071c2 <_UG_GetFreeObject>
 8008d80:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d102      	bne.n	8008d8e <UG_TextboxCreate+0x2a>
 8008d88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d8c:	e05d      	b.n	8008e4a <UG_TextboxCreate+0xe6>

   /* Initialize object-specific parameters */
   txb->str = NULL;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
   txb->font = UG_GetGUI() != NULL ? (UG_GetGUI()->font) : NULL;
 8008d94:	f7fc fc1c 	bl	80055d0 <UG_GetGUI>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <UG_TextboxCreate+0x44>
 8008d9e:	f7fc fc17 	bl	80055d0 <UG_GetGUI>
 8008da2:	4603      	mov	r3, r0
 8008da4:	691b      	ldr	r3, [r3, #16]
 8008da6:	e000      	b.n	8008daa <UG_TextboxCreate+0x46>
 8008da8:	2300      	movs	r3, #0
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	6053      	str	r3, [r2, #4]
   txb->style = 0; /* reserved */
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	2200      	movs	r2, #0
 8008db2:	721a      	strb	r2, [r3, #8]
   txb->fc = wnd->fc;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	895a      	ldrh	r2, [r3, #10]
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	815a      	strh	r2, [r3, #10]
   txb->bc = wnd->bc;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	899a      	ldrh	r2, [r3, #12]
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	819a      	strh	r2, [r3, #12]
   txb->align = ALIGN_CENTER;
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	2212      	movs	r2, #18
 8008dc8:	739a      	strb	r2, [r3, #14]
   txb->h_space = 0;
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	2200      	movs	r2, #0
 8008dce:	73da      	strb	r2, [r3, #15]
   txb->v_space = 0;
 8008dd0:	68bb      	ldr	r3, [r7, #8]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	741a      	strb	r2, [r3, #16]

   /* Initialize standard object parameters */
   obj->update = _UG_TextboxUpdate;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <UG_TextboxCreate+0xf0>)
 8008dda:	605a      	str	r2, [r3, #4]
   #ifdef UGUI_USE_TOUCH
   obj->touch_state = OBJ_TOUCH_STATE_INIT;
   #endif
   obj->type = OBJ_TYPE_TEXTBOX;
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	2202      	movs	r2, #2
 8008de0:	761a      	strb	r2, [r3, #24]
   obj->event = OBJ_EVENT_NONE;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	2200      	movs	r2, #0
 8008de6:	769a      	strb	r2, [r3, #26]
   obj->a_rel.xs = xs;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	88ba      	ldrh	r2, [r7, #4]
 8008dec:	821a      	strh	r2, [r3, #16]
   obj->a_rel.ys = ys;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	8c3a      	ldrh	r2, [r7, #32]
 8008df2:	825a      	strh	r2, [r3, #18]
   obj->a_rel.xe = xe;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008df8:	829a      	strh	r2, [r3, #20]
   obj->a_rel.ye = ye;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8008dfe:	82da      	strh	r2, [r3, #22]
   obj->a_abs.xs = -1;
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e06:	811a      	strh	r2, [r3, #8]
   obj->a_abs.ys = -1;
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e0e:	815a      	strh	r2, [r3, #10]
   obj->a_abs.xe = -1;
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e16:	819a      	strh	r2, [r3, #12]
   obj->a_abs.ye = -1;
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e1e:	81da      	strh	r2, [r3, #14]
   obj->id = id;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	79fa      	ldrb	r2, [r7, #7]
 8008e24:	765a      	strb	r2, [r3, #25]
   obj->state |= OBJ_STATE_VISIBLE | OBJ_STATE_REDRAW | OBJ_STATE_VALID;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	f043 034a 	orr.w	r3, r3, #74	; 0x4a
 8008e2e:	b2da      	uxtb	r2, r3
 8008e30:	697b      	ldr	r3, [r7, #20]
 8008e32:	701a      	strb	r2, [r3, #0]
   obj->data = (void*)txb;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	61da      	str	r2, [r3, #28]

   /* Update function: Do your thing! */
   obj->state &= ~OBJ_STATE_FREE;
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	f023 0301 	bic.w	r3, r3, #1
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	08009003 	.word	0x08009003

08008e58 <UG_TextboxSetForeColor>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetForeColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR fc )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	460b      	mov	r3, r1
 8008e62:	70fb      	strb	r3, [r7, #3]
 8008e64:	4613      	mov	r3, r2
 8008e66:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	461a      	mov	r2, r3
 8008e74:	2102      	movs	r1, #2
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f7fe f847 	bl	8006f0a <_UG_SearchObject>
 8008e7c:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <UG_TextboxSetForeColor+0x32>
 8008e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e88:	e00d      	b.n	8008ea6 <UG_TextboxSetForeColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	60bb      	str	r3, [r7, #8]
   txb->fc = fc;
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	883a      	ldrh	r2, [r7, #0]
 8008e94:	815a      	strh	r2, [r3, #10]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <UG_TextboxSetBackColor>:

UG_RESULT UG_TextboxSetBackColor( UG_WINDOW* wnd, UG_U8 id, UG_COLOR bc )
{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b084      	sub	sp, #16
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	70fb      	strb	r3, [r7, #3]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	803b      	strh	r3, [r7, #0]
   UG_OBJECT* obj=NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008ec6:	78fb      	ldrb	r3, [r7, #3]
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2102      	movs	r1, #2
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f7fe f81c 	bl	8006f0a <_UG_SearchObject>
 8008ed2:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d102      	bne.n	8008ee0 <UG_TextboxSetBackColor+0x32>
 8008eda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ede:	e00d      	b.n	8008efc <UG_TextboxSetBackColor+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	60bb      	str	r3, [r7, #8]
   txb->bc = bc;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	883a      	ldrh	r2, [r7, #0]
 8008eea:	819a      	strh	r2, [r3, #12]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	781b      	ldrb	r3, [r3, #0]
 8008ef0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <UG_TextboxSetText>:

UG_RESULT UG_TextboxSetText( UG_WINDOW* wnd, UG_U8 id, char* str )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	460b      	mov	r3, r1
 8008f0e:	607a      	str	r2, [r7, #4]
 8008f10:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f1a:	7afb      	ldrb	r3, [r7, #11]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	2102      	movs	r1, #2
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f7fd fff2 	bl	8006f0a <_UG_SearchObject>
 8008f26:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d102      	bne.n	8008f34 <UG_TextboxSetText+0x30>
 8008f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f32:	e00d      	b.n	8008f50 <UG_TextboxSetText+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	613b      	str	r3, [r7, #16]
   txb->str = str;
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	687a      	ldr	r2, [r7, #4]
 8008f3e:	601a      	str	r2, [r3, #0]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <UG_TextboxSetFont>:

UG_RESULT UG_TextboxSetFont( UG_WINDOW* wnd, UG_U8 id, UG_FONT* font )
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	460b      	mov	r3, r1
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	72fb      	strb	r3, [r7, #11]
   UG_OBJECT* obj=NULL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	617b      	str	r3, [r7, #20]
   UG_TEXTBOX* txb=NULL;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	613b      	str	r3, [r7, #16]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	461a      	mov	r2, r3
 8008f72:	2102      	movs	r1, #2
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7fd ffc8 	bl	8006f0a <_UG_SearchObject>
 8008f7a:	6178      	str	r0, [r7, #20]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d102      	bne.n	8008f88 <UG_TextboxSetFont+0x30>
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f86:	e00d      	b.n	8008fa4 <UG_TextboxSetFont+0x4c>

   txb = (UG_TEXTBOX*)(obj->data);
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	69db      	ldr	r3, [r3, #28]
 8008f8c:	613b      	str	r3, [r7, #16]
   txb->font = font;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	605a      	str	r2, [r3, #4]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008f94:	697b      	ldr	r3, [r7, #20]
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008f9c:	b2da      	uxtb	r2, r3
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <UG_TextboxSetAlignment>:

   return UG_RESULT_OK;
}

UG_RESULT UG_TextboxSetAlignment( UG_WINDOW* wnd, UG_U8 id, UG_U8 align )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	460b      	mov	r3, r1
 8008fb6:	70fb      	strb	r3, [r7, #3]
 8008fb8:	4613      	mov	r3, r2
 8008fba:	70bb      	strb	r3, [r7, #2]
   UG_OBJECT* obj=NULL;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	60fb      	str	r3, [r7, #12]
   UG_TEXTBOX* txb=NULL;
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	60bb      	str	r3, [r7, #8]

   obj = _UG_SearchObject( wnd, OBJ_TYPE_TEXTBOX, id );
 8008fc4:	78fb      	ldrb	r3, [r7, #3]
 8008fc6:	461a      	mov	r2, r3
 8008fc8:	2102      	movs	r1, #2
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fd ff9d 	bl	8006f0a <_UG_SearchObject>
 8008fd0:	60f8      	str	r0, [r7, #12]
   if ( obj == NULL ) return UG_RESULT_FAIL;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <UG_TextboxSetAlignment+0x32>
 8008fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fdc:	e00d      	b.n	8008ffa <UG_TextboxSetAlignment+0x4e>

   txb = (UG_TEXTBOX*)(obj->data);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	60bb      	str	r3, [r7, #8]
   txb->align = align;
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	78ba      	ldrb	r2, [r7, #2]
 8008fe8:	739a      	strb	r2, [r3, #14]
   obj->state |= OBJ_STATE_UPDATE | OBJ_STATE_REDRAW;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008ff2:	b2da      	uxtb	r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	701a      	strb	r2, [r3, #0]

   return UG_RESULT_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <_UG_TextboxUpdate>:
   }
   return align;
}

static void _UG_TextboxUpdate(UG_WINDOW* wnd, UG_OBJECT* obj)
{
 8009002:	b590      	push	{r4, r7, lr}
 8009004:	b08f      	sub	sp, #60	; 0x3c
 8009006:	af02      	add	r7, sp, #8
 8009008:	6078      	str	r0, [r7, #4]
 800900a:	6039      	str	r1, [r7, #0]
   UG_TEXTBOX* txb;
   UG_AREA a;
   UG_TEXT txt;

   /* Get object-specific data */
   txb = (UG_TEXTBOX*)(obj->data);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	62fb      	str	r3, [r7, #44]	; 0x2c

   /* -------------------------------------------------- */
   /* Object update section                              */
   /* -------------------------------------------------- */
   if ( obj->state & OBJ_STATE_UPDATE )
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	f000 80b8 	beq.w	8009190 <_UG_TextboxUpdate+0x18e>
   {
      if ( obj->state & OBJ_STATE_VISIBLE )
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	781b      	ldrb	r3, [r3, #0]
 8009024:	f003 0308 	and.w	r3, r3, #8
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 8094 	beq.w	8009156 <_UG_TextboxUpdate+0x154>
      {
         /* Full redraw necessary? */
         if ( obj->state & OBJ_STATE_REDRAW )
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	f000 809f 	beq.w	800917a <_UG_TextboxUpdate+0x178>
         {
            UG_WindowGetArea(wnd,&a);
 800903c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009040:	4619      	mov	r1, r3
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f7fe fe92 	bl	8007d6c <UG_WindowGetArea>
            obj->a_abs.xs = obj->a_rel.xs + a.xs;
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800904e:	b29a      	uxth	r2, r3
 8009050:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009054:	b29b      	uxth	r3, r3
 8009056:	4413      	add	r3, r2
 8009058:	b29b      	uxth	r3, r3
 800905a:	b21a      	sxth	r2, r3
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	811a      	strh	r2, [r3, #8]
            obj->a_abs.ys = obj->a_rel.ys + a.ys;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8009066:	b29a      	uxth	r2, r3
 8009068:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800906c:	b29b      	uxth	r3, r3
 800906e:	4413      	add	r3, r2
 8009070:	b29b      	uxth	r3, r3
 8009072:	b21a      	sxth	r2, r3
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	815a      	strh	r2, [r3, #10]
            obj->a_abs.xe = obj->a_rel.xe + a.xs;
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800907e:	b29a      	uxth	r2, r3
 8009080:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8009084:	b29b      	uxth	r3, r3
 8009086:	4413      	add	r3, r2
 8009088:	b29b      	uxth	r3, r3
 800908a:	b21a      	sxth	r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	819a      	strh	r2, [r3, #12]
            obj->a_abs.ye = obj->a_rel.ye + a.ys;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8009096:	b29a      	uxth	r2, r3
 8009098:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800909c:	b29b      	uxth	r3, r3
 800909e:	4413      	add	r3, r2
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	b21a      	sxth	r2, r3
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	81da      	strh	r2, [r3, #14]
            if ( obj->a_abs.ye > wnd->ye ) return;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	dc68      	bgt.n	800918a <_UG_TextboxUpdate+0x188>
            if ( obj->a_abs.xe > wnd->xe ) return;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80090c4:	429a      	cmp	r2, r3
 80090c6:	dc62      	bgt.n	800918e <_UG_TextboxUpdate+0x18c>
#ifdef UGUI_USE_PRERENDER_EVENT
            _UG_SendObjectPrerenderEvent(wnd, obj);
#endif

            txt.bc = txb->bc;
 80090c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ca:	899b      	ldrh	r3, [r3, #12]
 80090cc:	837b      	strh	r3, [r7, #26]
            txt.fc = txb->fc;
 80090ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090d0:	895b      	ldrh	r3, [r3, #10]
 80090d2:	833b      	strh	r3, [r7, #24]

            UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, txt.bc);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 80090ec:	8b7b      	ldrh	r3, [r7, #26]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4623      	mov	r3, r4
 80090f2:	f7fc faad 	bl	8005650 <UG_FillFrame>

            /* Draw Textbox text */
            txt.a.xs = obj->a_abs.xs;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090fc:	823b      	strh	r3, [r7, #16]
            txt.a.ys = obj->a_abs.ys;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8009104:	827b      	strh	r3, [r7, #18]
            txt.a.xe = obj->a_abs.xe;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800910c:	82bb      	strh	r3, [r7, #20]
            txt.a.ye = obj->a_abs.ye;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8009114:	82fb      	strh	r3, [r7, #22]
            txt.align = txb->align;
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	7b9b      	ldrb	r3, [r3, #14]
 800911a:	773b      	strb	r3, [r7, #28]
            txt.font = txb->font;
 800911c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	60fb      	str	r3, [r7, #12]
            txt.h_space = txb->h_space;
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	f993 300f 	ldrsb.w	r3, [r3, #15]
 8009128:	b21b      	sxth	r3, r3
 800912a:	83fb      	strh	r3, [r7, #30]
            txt.v_space = txb->v_space;
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8009132:	b21b      	sxth	r3, r3
 8009134:	843b      	strh	r3, [r7, #32]
            txt.str = txb->str;
 8009136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	60bb      	str	r3, [r7, #8]
            _UG_PutText( &txt );
 800913c:	f107 0308 	add.w	r3, r7, #8
 8009140:	4618      	mov	r0, r3
 8009142:	f7fd fdcb 	bl	8006cdc <_UG_PutText>
            obj->state &= ~OBJ_STATE_REDRAW;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800914e:	b2da      	uxtb	r2, r3
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	701a      	strb	r2, [r3, #0]
 8009154:	e011      	b.n	800917a <_UG_TextboxUpdate+0x178>
#endif
         }
      }
      else
      {
         UG_FillFrame(obj->a_abs.xs, obj->a_abs.ys, obj->a_abs.xe, obj->a_abs.ye, wnd->bc);
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	f9b3 100a 	ldrsh.w	r1, [r3, #10]
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	f9b3 400e 	ldrsh.w	r4, [r3, #14]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	899b      	ldrh	r3, [r3, #12]
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	4623      	mov	r3, r4
 8009176:	f7fc fa6b 	bl	8005650 <UG_FillFrame>
      }
      obj->state &= ~OBJ_STATE_UPDATE;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	f023 0320 	bic.w	r3, r3, #32
 8009182:	b2da      	uxtb	r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	701a      	strb	r2, [r3, #0]
 8009188:	e002      	b.n	8009190 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.ye > wnd->ye ) return;
 800918a:	bf00      	nop
 800918c:	e000      	b.n	8009190 <_UG_TextboxUpdate+0x18e>
            if ( obj->a_abs.xe > wnd->xe ) return;
 800918e:	bf00      	nop
   }
}
 8009190:	3734      	adds	r7, #52	; 0x34
 8009192:	46bd      	mov	sp, r7
 8009194:	bd90      	pop	{r4, r7, pc}
	...

08009198 <__NVIC_SetPriority>:
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	6039      	str	r1, [r7, #0]
 80091a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	db0a      	blt.n	80091c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	b2da      	uxtb	r2, r3
 80091b0:	490c      	ldr	r1, [pc, #48]	; (80091e4 <__NVIC_SetPriority+0x4c>)
 80091b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091b6:	0112      	lsls	r2, r2, #4
 80091b8:	b2d2      	uxtb	r2, r2
 80091ba:	440b      	add	r3, r1
 80091bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80091c0:	e00a      	b.n	80091d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	4908      	ldr	r1, [pc, #32]	; (80091e8 <__NVIC_SetPriority+0x50>)
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	3b04      	subs	r3, #4
 80091d0:	0112      	lsls	r2, r2, #4
 80091d2:	b2d2      	uxtb	r2, r2
 80091d4:	440b      	add	r3, r1
 80091d6:	761a      	strb	r2, [r3, #24]
}
 80091d8:	bf00      	nop
 80091da:	370c      	adds	r7, #12
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr
 80091e4:	e000e100 	.word	0xe000e100
 80091e8:	e000ed00 	.word	0xe000ed00

080091ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80091f0:	2100      	movs	r1, #0
 80091f2:	f06f 0004 	mvn.w	r0, #4
 80091f6:	f7ff ffcf 	bl	8009198 <__NVIC_SetPriority>
#endif
}
 80091fa:	bf00      	nop
 80091fc:	bd80      	pop	{r7, pc}
	...

08009200 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009206:	f3ef 8305 	mrs	r3, IPSR
 800920a:	603b      	str	r3, [r7, #0]
  return(result);
 800920c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800920e:	2b00      	cmp	r3, #0
 8009210:	d003      	beq.n	800921a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009212:	f06f 0305 	mvn.w	r3, #5
 8009216:	607b      	str	r3, [r7, #4]
 8009218:	e00c      	b.n	8009234 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800921a:	4b0a      	ldr	r3, [pc, #40]	; (8009244 <osKernelInitialize+0x44>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009222:	4b08      	ldr	r3, [pc, #32]	; (8009244 <osKernelInitialize+0x44>)
 8009224:	2201      	movs	r2, #1
 8009226:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009228:	2300      	movs	r3, #0
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	e002      	b.n	8009234 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800922e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009232:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009234:	687b      	ldr	r3, [r7, #4]
}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr
 8009242:	bf00      	nop
 8009244:	2000050c 	.word	0x2000050c

08009248 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800924e:	f3ef 8305 	mrs	r3, IPSR
 8009252:	603b      	str	r3, [r7, #0]
  return(result);
 8009254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <osKernelStart+0x1a>
    stat = osErrorISR;
 800925a:	f06f 0305 	mvn.w	r3, #5
 800925e:	607b      	str	r3, [r7, #4]
 8009260:	e010      	b.n	8009284 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009262:	4b0b      	ldr	r3, [pc, #44]	; (8009290 <osKernelStart+0x48>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d109      	bne.n	800927e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800926a:	f7ff ffbf 	bl	80091ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800926e:	4b08      	ldr	r3, [pc, #32]	; (8009290 <osKernelStart+0x48>)
 8009270:	2202      	movs	r2, #2
 8009272:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009274:	f001 f87c 	bl	800a370 <vTaskStartScheduler>
      stat = osOK;
 8009278:	2300      	movs	r3, #0
 800927a:	607b      	str	r3, [r7, #4]
 800927c:	e002      	b.n	8009284 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800927e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009284:	687b      	ldr	r3, [r7, #4]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	2000050c 	.word	0x2000050c

08009294 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	; 0x38
 8009298:	af04      	add	r7, sp, #16
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80092a0:	2300      	movs	r3, #0
 80092a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092a4:	f3ef 8305 	mrs	r3, IPSR
 80092a8:	617b      	str	r3, [r7, #20]
  return(result);
 80092aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d17e      	bne.n	80093ae <osThreadNew+0x11a>
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d07b      	beq.n	80093ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80092b6:	2380      	movs	r3, #128	; 0x80
 80092b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80092ba:	2318      	movs	r3, #24
 80092bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80092be:	2300      	movs	r3, #0
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80092c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80092c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d045      	beq.n	800935a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d002      	beq.n	80092dc <osThreadNew+0x48>
        name = attr->name;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	699b      	ldr	r3, [r3, #24]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d002      	beq.n	80092ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699b      	ldr	r3, [r3, #24]
 80092e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d008      	beq.n	8009302 <osThreadNew+0x6e>
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	2b38      	cmp	r3, #56	; 0x38
 80092f4:	d805      	bhi.n	8009302 <osThreadNew+0x6e>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	685b      	ldr	r3, [r3, #4]
 80092fa:	f003 0301 	and.w	r3, r3, #1
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <osThreadNew+0x72>
        return (NULL);
 8009302:	2300      	movs	r3, #0
 8009304:	e054      	b.n	80093b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d003      	beq.n	8009316 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	695b      	ldr	r3, [r3, #20]
 8009312:	089b      	lsrs	r3, r3, #2
 8009314:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d00e      	beq.n	800933c <osThreadNew+0xa8>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	2bbb      	cmp	r3, #187	; 0xbb
 8009324:	d90a      	bls.n	800933c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800932a:	2b00      	cmp	r3, #0
 800932c:	d006      	beq.n	800933c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	695b      	ldr	r3, [r3, #20]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <osThreadNew+0xa8>
        mem = 1;
 8009336:	2301      	movs	r3, #1
 8009338:	61bb      	str	r3, [r7, #24]
 800933a:	e010      	b.n	800935e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d10c      	bne.n	800935e <osThreadNew+0xca>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	68db      	ldr	r3, [r3, #12]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d108      	bne.n	800935e <osThreadNew+0xca>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d104      	bne.n	800935e <osThreadNew+0xca>
          mem = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	61bb      	str	r3, [r7, #24]
 8009358:	e001      	b.n	800935e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800935a:	2300      	movs	r3, #0
 800935c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	2b01      	cmp	r3, #1
 8009362:	d110      	bne.n	8009386 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800936c:	9202      	str	r2, [sp, #8]
 800936e:	9301      	str	r3, [sp, #4]
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	9300      	str	r3, [sp, #0]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	6a3a      	ldr	r2, [r7, #32]
 8009378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f000 fe0c 	bl	8009f98 <xTaskCreateStatic>
 8009380:	4603      	mov	r3, r0
 8009382:	613b      	str	r3, [r7, #16]
 8009384:	e013      	b.n	80093ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d110      	bne.n	80093ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	b29a      	uxth	r2, r3
 8009390:	f107 0310 	add.w	r3, r7, #16
 8009394:	9301      	str	r3, [sp, #4]
 8009396:	69fb      	ldr	r3, [r7, #28]
 8009398:	9300      	str	r3, [sp, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 fe57 	bl	800a052 <xTaskCreate>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d001      	beq.n	80093ae <osThreadNew+0x11a>
            hTask = NULL;
 80093aa:	2300      	movs	r3, #0
 80093ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80093ae:	693b      	ldr	r3, [r7, #16]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3728      	adds	r7, #40	; 0x28
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093c0:	f3ef 8305 	mrs	r3, IPSR
 80093c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80093c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d003      	beq.n	80093d4 <osDelay+0x1c>
    stat = osErrorISR;
 80093cc:	f06f 0305 	mvn.w	r3, #5
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	e007      	b.n	80093e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 ff92 	bl	800a308 <vTaskDelay>
    }
  }

  return (stat);
 80093e4:	68fb      	ldr	r3, [r7, #12]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3710      	adds	r7, #16
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	60f8      	str	r0, [r7, #12]
 80093f8:	60b9      	str	r1, [r7, #8]
 80093fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4a07      	ldr	r2, [pc, #28]	; (800941c <vApplicationGetIdleTaskMemory+0x2c>)
 8009400:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4a06      	ldr	r2, [pc, #24]	; (8009420 <vApplicationGetIdleTaskMemory+0x30>)
 8009406:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2280      	movs	r2, #128	; 0x80
 800940c:	601a      	str	r2, [r3, #0]
}
 800940e:	bf00      	nop
 8009410:	3714      	adds	r7, #20
 8009412:	46bd      	mov	sp, r7
 8009414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	20000510 	.word	0x20000510
 8009420:	200005cc 	.word	0x200005cc

08009424 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009424:	b480      	push	{r7}
 8009426:	b085      	sub	sp, #20
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4a07      	ldr	r2, [pc, #28]	; (8009450 <vApplicationGetTimerTaskMemory+0x2c>)
 8009434:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	4a06      	ldr	r2, [pc, #24]	; (8009454 <vApplicationGetTimerTaskMemory+0x30>)
 800943a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009442:	601a      	str	r2, [r3, #0]
}
 8009444:	bf00      	nop
 8009446:	3714      	adds	r7, #20
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	200007cc 	.word	0x200007cc
 8009454:	20000888 	.word	0x20000888

08009458 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009458:	b480      	push	{r7}
 800945a:	b083      	sub	sp, #12
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f103 0208 	add.w	r2, r3, #8
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009470:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f103 0208 	add.w	r2, r3, #8
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f103 0208 	add.w	r2, r3, #8
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094b2:	b480      	push	{r7}
 80094b4:	b085      	sub	sp, #20
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	689a      	ldr	r2, [r3, #8]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	1c5a      	adds	r2, r3, #1
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	601a      	str	r2, [r3, #0]
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr

080094fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80094fa:	b480      	push	{r7}
 80094fc:	b085      	sub	sp, #20
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009510:	d103      	bne.n	800951a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	e00c      	b.n	8009534 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	3308      	adds	r3, #8
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	e002      	b.n	8009528 <vListInsert+0x2e>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	60fb      	str	r3, [r7, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68ba      	ldr	r2, [r7, #8]
 8009530:	429a      	cmp	r2, r3
 8009532:	d2f6      	bcs.n	8009522 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	685a      	ldr	r2, [r3, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	683a      	ldr	r2, [r7, #0]
 8009542:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	601a      	str	r2, [r3, #0]
}
 8009560:	bf00      	nop
 8009562:	3714      	adds	r7, #20
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800956c:	b480      	push	{r7}
 800956e:	b085      	sub	sp, #20
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	6892      	ldr	r2, [r2, #8]
 8009582:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	6852      	ldr	r2, [r2, #4]
 800958c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	687a      	ldr	r2, [r7, #4]
 8009594:	429a      	cmp	r2, r3
 8009596:	d103      	bne.n	80095a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	689a      	ldr	r2, [r3, #8]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	1e5a      	subs	r2, r3, #1
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80095ea:	f002 f87b 	bl	800b6e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095f6:	68f9      	ldr	r1, [r7, #12]
 80095f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80095fa:	fb01 f303 	mul.w	r3, r1, r3
 80095fe:	441a      	add	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2200      	movs	r2, #0
 8009608:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800961a:	3b01      	subs	r3, #1
 800961c:	68f9      	ldr	r1, [r7, #12]
 800961e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009620:	fb01 f303 	mul.w	r3, r1, r3
 8009624:	441a      	add	r2, r3
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	22ff      	movs	r2, #255	; 0xff
 800962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	22ff      	movs	r2, #255	; 0xff
 8009636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d114      	bne.n	800966a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01a      	beq.n	800967e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	3310      	adds	r3, #16
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f929 	bl	800a8a4 <xTaskRemoveFromEventList>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d012      	beq.n	800967e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <xQueueGenericReset+0xcc>)
 800965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800965e:	601a      	str	r2, [r3, #0]
 8009660:	f3bf 8f4f 	dsb	sy
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	e009      	b.n	800967e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	3310      	adds	r3, #16
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fef2 	bl	8009458 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3324      	adds	r3, #36	; 0x24
 8009678:	4618      	mov	r0, r3
 800967a:	f7ff feed 	bl	8009458 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800967e:	f002 f861 	bl	800b744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009682:	2301      	movs	r3, #1
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}
 800968c:	e000ed04 	.word	0xe000ed04

08009690 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009690:	b580      	push	{r7, lr}
 8009692:	b08e      	sub	sp, #56	; 0x38
 8009694:	af02      	add	r7, sp, #8
 8009696:	60f8      	str	r0, [r7, #12]
 8009698:	60b9      	str	r1, [r7, #8]
 800969a:	607a      	str	r2, [r7, #4]
 800969c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d10a      	bne.n	80096ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80096a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a8:	f383 8811 	msr	BASEPRI, r3
 80096ac:	f3bf 8f6f 	isb	sy
 80096b0:	f3bf 8f4f 	dsb	sy
 80096b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096b6:	bf00      	nop
 80096b8:	e7fe      	b.n	80096b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10a      	bne.n	80096d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d002      	beq.n	80096e2 <xQueueGenericCreateStatic+0x52>
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d001      	beq.n	80096e6 <xQueueGenericCreateStatic+0x56>
 80096e2:	2301      	movs	r3, #1
 80096e4:	e000      	b.n	80096e8 <xQueueGenericCreateStatic+0x58>
 80096e6:	2300      	movs	r3, #0
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10a      	bne.n	8009702 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80096ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f0:	f383 8811 	msr	BASEPRI, r3
 80096f4:	f3bf 8f6f 	isb	sy
 80096f8:	f3bf 8f4f 	dsb	sy
 80096fc:	623b      	str	r3, [r7, #32]
}
 80096fe:	bf00      	nop
 8009700:	e7fe      	b.n	8009700 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d102      	bne.n	800970e <xQueueGenericCreateStatic+0x7e>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <xQueueGenericCreateStatic+0x82>
 800970e:	2301      	movs	r3, #1
 8009710:	e000      	b.n	8009714 <xQueueGenericCreateStatic+0x84>
 8009712:	2300      	movs	r3, #0
 8009714:	2b00      	cmp	r3, #0
 8009716:	d10a      	bne.n	800972e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971c:	f383 8811 	msr	BASEPRI, r3
 8009720:	f3bf 8f6f 	isb	sy
 8009724:	f3bf 8f4f 	dsb	sy
 8009728:	61fb      	str	r3, [r7, #28]
}
 800972a:	bf00      	nop
 800972c:	e7fe      	b.n	800972c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800972e:	2350      	movs	r3, #80	; 0x50
 8009730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	2b50      	cmp	r3, #80	; 0x50
 8009736:	d00a      	beq.n	800974e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800973c:	f383 8811 	msr	BASEPRI, r3
 8009740:	f3bf 8f6f 	isb	sy
 8009744:	f3bf 8f4f 	dsb	sy
 8009748:	61bb      	str	r3, [r7, #24]
}
 800974a:	bf00      	nop
 800974c:	e7fe      	b.n	800974c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800974e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00d      	beq.n	8009776 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009762:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4613      	mov	r3, r2
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	68b9      	ldr	r1, [r7, #8]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f805 	bl	8009780 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009778:	4618      	mov	r0, r3
 800977a:	3730      	adds	r7, #48	; 0x30
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	607a      	str	r2, [r7, #4]
 800978c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d103      	bne.n	800979c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	69ba      	ldr	r2, [r7, #24]
 8009798:	601a      	str	r2, [r3, #0]
 800979a:	e002      	b.n	80097a2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	687a      	ldr	r2, [r7, #4]
 80097a0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	68fa      	ldr	r2, [r7, #12]
 80097a6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80097ae:	2101      	movs	r1, #1
 80097b0:	69b8      	ldr	r0, [r7, #24]
 80097b2:	f7ff ff05 	bl	80095c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	78fa      	ldrb	r2, [r7, #3]
 80097ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
	...

080097c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b08e      	sub	sp, #56	; 0x38
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
 80097d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80097d6:	2300      	movs	r3, #0
 80097d8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d10a      	bne.n	80097fa <xQueueGenericSend+0x32>
	__asm volatile
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80097f6:	bf00      	nop
 80097f8:	e7fe      	b.n	80097f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d103      	bne.n	8009808 <xQueueGenericSend+0x40>
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009804:	2b00      	cmp	r3, #0
 8009806:	d101      	bne.n	800980c <xQueueGenericSend+0x44>
 8009808:	2301      	movs	r3, #1
 800980a:	e000      	b.n	800980e <xQueueGenericSend+0x46>
 800980c:	2300      	movs	r3, #0
 800980e:	2b00      	cmp	r3, #0
 8009810:	d10a      	bne.n	8009828 <xQueueGenericSend+0x60>
	__asm volatile
 8009812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009816:	f383 8811 	msr	BASEPRI, r3
 800981a:	f3bf 8f6f 	isb	sy
 800981e:	f3bf 8f4f 	dsb	sy
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009824:	bf00      	nop
 8009826:	e7fe      	b.n	8009826 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	2b02      	cmp	r3, #2
 800982c:	d103      	bne.n	8009836 <xQueueGenericSend+0x6e>
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <xQueueGenericSend+0x72>
 8009836:	2301      	movs	r3, #1
 8009838:	e000      	b.n	800983c <xQueueGenericSend+0x74>
 800983a:	2300      	movs	r3, #0
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueGenericSend+0x8e>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009856:	f001 f9e7 	bl	800ac28 <xTaskGetSchedulerState>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d102      	bne.n	8009866 <xQueueGenericSend+0x9e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d101      	bne.n	800986a <xQueueGenericSend+0xa2>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <xQueueGenericSend+0xa4>
 800986a:	2300      	movs	r3, #0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10a      	bne.n	8009886 <xQueueGenericSend+0xbe>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	61fb      	str	r3, [r7, #28]
}
 8009882:	bf00      	nop
 8009884:	e7fe      	b.n	8009884 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009886:	f001 ff2d 	bl	800b6e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800988e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009892:	429a      	cmp	r2, r3
 8009894:	d302      	bcc.n	800989c <xQueueGenericSend+0xd4>
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	2b02      	cmp	r3, #2
 800989a:	d129      	bne.n	80098f0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800989c:	683a      	ldr	r2, [r7, #0]
 800989e:	68b9      	ldr	r1, [r7, #8]
 80098a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098a2:	f000 fa0b 	bl	8009cbc <prvCopyDataToQueue>
 80098a6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d010      	beq.n	80098d2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	3324      	adds	r3, #36	; 0x24
 80098b4:	4618      	mov	r0, r3
 80098b6:	f000 fff5 	bl	800a8a4 <xTaskRemoveFromEventList>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d013      	beq.n	80098e8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098c0:	4b3f      	ldr	r3, [pc, #252]	; (80099c0 <xQueueGenericSend+0x1f8>)
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	601a      	str	r2, [r3, #0]
 80098c8:	f3bf 8f4f 	dsb	sy
 80098cc:	f3bf 8f6f 	isb	sy
 80098d0:	e00a      	b.n	80098e8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80098d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d007      	beq.n	80098e8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80098d8:	4b39      	ldr	r3, [pc, #228]	; (80099c0 <xQueueGenericSend+0x1f8>)
 80098da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80098e8:	f001 ff2c 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e063      	b.n	80099b8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d103      	bne.n	80098fe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80098f6:	f001 ff25 	bl	800b744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80098fa:	2300      	movs	r3, #0
 80098fc:	e05c      	b.n	80099b8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80098fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009900:	2b00      	cmp	r3, #0
 8009902:	d106      	bne.n	8009912 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009904:	f107 0314 	add.w	r3, r7, #20
 8009908:	4618      	mov	r0, r3
 800990a:	f001 f82f 	bl	800a96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800990e:	2301      	movs	r3, #1
 8009910:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009912:	f001 ff17 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009916:	f000 fd9b 	bl	800a450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800991a:	f001 fee3 	bl	800b6e4 <vPortEnterCritical>
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009924:	b25b      	sxtb	r3, r3
 8009926:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800992a:	d103      	bne.n	8009934 <xQueueGenericSend+0x16c>
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800993a:	b25b      	sxtb	r3, r3
 800993c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009940:	d103      	bne.n	800994a <xQueueGenericSend+0x182>
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800994a:	f001 fefb 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800994e:	1d3a      	adds	r2, r7, #4
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	4611      	mov	r1, r2
 8009956:	4618      	mov	r0, r3
 8009958:	f001 f81e 	bl	800a998 <xTaskCheckForTimeOut>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d124      	bne.n	80099ac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009962:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009964:	f000 faa2 	bl	8009eac <prvIsQueueFull>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d018      	beq.n	80099a0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	3310      	adds	r3, #16
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4611      	mov	r1, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f000 ff44 	bl	800a804 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800997c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800997e:	f000 fa2d 	bl	8009ddc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009982:	f000 fd73 	bl	800a46c <xTaskResumeAll>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	f47f af7c 	bne.w	8009886 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800998e:	4b0c      	ldr	r3, [pc, #48]	; (80099c0 <xQueueGenericSend+0x1f8>)
 8009990:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	e772      	b.n	8009886 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a2:	f000 fa1b 	bl	8009ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099a6:	f000 fd61 	bl	800a46c <xTaskResumeAll>
 80099aa:	e76c      	b.n	8009886 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ae:	f000 fa15 	bl	8009ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099b2:	f000 fd5b 	bl	800a46c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3738      	adds	r7, #56	; 0x38
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	e000ed04 	.word	0xe000ed04

080099c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b090      	sub	sp, #64	; 0x40
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
 80099d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80099d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d103      	bne.n	8009a00 <xQueueGenericSendFromISR+0x3c>
 80099f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d101      	bne.n	8009a04 <xQueueGenericSendFromISR+0x40>
 8009a00:	2301      	movs	r3, #1
 8009a02:	e000      	b.n	8009a06 <xQueueGenericSendFromISR+0x42>
 8009a04:	2300      	movs	r3, #0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10a      	bne.n	8009a20 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	2b02      	cmp	r3, #2
 8009a24:	d103      	bne.n	8009a2e <xQueueGenericSendFromISR+0x6a>
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d101      	bne.n	8009a32 <xQueueGenericSendFromISR+0x6e>
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <xQueueGenericSendFromISR+0x70>
 8009a32:	2300      	movs	r3, #0
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	623b      	str	r3, [r7, #32]
}
 8009a4a:	bf00      	nop
 8009a4c:	e7fe      	b.n	8009a4c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a4e:	f001 ff2b 	bl	800b8a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a52:	f3ef 8211 	mrs	r2, BASEPRI
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	61fa      	str	r2, [r7, #28]
 8009a68:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009a6a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a6c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d302      	bcc.n	8009a80 <xQueueGenericSendFromISR+0xbc>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	2b02      	cmp	r3, #2
 8009a7e:	d12f      	bne.n	8009ae0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	68b9      	ldr	r1, [r7, #8]
 8009a94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009a96:	f000 f911 	bl	8009cbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a9a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009aa2:	d112      	bne.n	8009aca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d016      	beq.n	8009ada <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aae:	3324      	adds	r3, #36	; 0x24
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f000 fef7 	bl	800a8a4 <xTaskRemoveFromEventList>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00e      	beq.n	8009ada <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00b      	beq.n	8009ada <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e007      	b.n	8009ada <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ace:	3301      	adds	r3, #1
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	b25a      	sxtb	r2, r3
 8009ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ada:	2301      	movs	r3, #1
 8009adc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009ade:	e001      	b.n	8009ae4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009aee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3740      	adds	r7, #64	; 0x40
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
	...

08009afc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b08c      	sub	sp, #48	; 0x30
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	60f8      	str	r0, [r7, #12]
 8009b04:	60b9      	str	r1, [r7, #8]
 8009b06:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10a      	bne.n	8009b2c <xQueueReceive+0x30>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	623b      	str	r3, [r7, #32]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d103      	bne.n	8009b3a <xQueueReceive+0x3e>
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d101      	bne.n	8009b3e <xQueueReceive+0x42>
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e000      	b.n	8009b40 <xQueueReceive+0x44>
 8009b3e:	2300      	movs	r3, #0
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d10a      	bne.n	8009b5a <xQueueReceive+0x5e>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	61fb      	str	r3, [r7, #28]
}
 8009b56:	bf00      	nop
 8009b58:	e7fe      	b.n	8009b58 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b5a:	f001 f865 	bl	800ac28 <xTaskGetSchedulerState>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d102      	bne.n	8009b6a <xQueueReceive+0x6e>
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d101      	bne.n	8009b6e <xQueueReceive+0x72>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	e000      	b.n	8009b70 <xQueueReceive+0x74>
 8009b6e:	2300      	movs	r3, #0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <xQueueReceive+0x8e>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	61bb      	str	r3, [r7, #24]
}
 8009b86:	bf00      	nop
 8009b88:	e7fe      	b.n	8009b88 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b8a:	f001 fdab 	bl	800b6e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b92:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d01f      	beq.n	8009bda <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b9a:	68b9      	ldr	r1, [r7, #8]
 8009b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b9e:	f000 f8f7 	bl	8009d90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	1e5a      	subs	r2, r3, #1
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bac:	691b      	ldr	r3, [r3, #16]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d00f      	beq.n	8009bd2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	3310      	adds	r3, #16
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f000 fe74 	bl	800a8a4 <xTaskRemoveFromEventList>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d007      	beq.n	8009bd2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bc2:	4b3d      	ldr	r3, [pc, #244]	; (8009cb8 <xQueueReceive+0x1bc>)
 8009bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc8:	601a      	str	r2, [r3, #0]
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bd2:	f001 fdb7 	bl	800b744 <vPortExitCritical>
				return pdPASS;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e069      	b.n	8009cae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d103      	bne.n	8009be8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009be0:	f001 fdb0 	bl	800b744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009be4:	2300      	movs	r3, #0
 8009be6:	e062      	b.n	8009cae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009bee:	f107 0310 	add.w	r3, r7, #16
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 feba 	bl	800a96c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009bfc:	f001 fda2 	bl	800b744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c00:	f000 fc26 	bl	800a450 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c04:	f001 fd6e 	bl	800b6e4 <vPortEnterCritical>
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c0e:	b25b      	sxtb	r3, r3
 8009c10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c14:	d103      	bne.n	8009c1e <xQueueReceive+0x122>
 8009c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c24:	b25b      	sxtb	r3, r3
 8009c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c2a:	d103      	bne.n	8009c34 <xQueueReceive+0x138>
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c34:	f001 fd86 	bl	800b744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c38:	1d3a      	adds	r2, r7, #4
 8009c3a:	f107 0310 	add.w	r3, r7, #16
 8009c3e:	4611      	mov	r1, r2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fea9 	bl	800a998 <xTaskCheckForTimeOut>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d123      	bne.n	8009c94 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c4e:	f000 f917 	bl	8009e80 <prvIsQueueEmpty>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d017      	beq.n	8009c88 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	3324      	adds	r3, #36	; 0x24
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 fdcf 	bl	800a804 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c68:	f000 f8b8 	bl	8009ddc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c6c:	f000 fbfe 	bl	800a46c <xTaskResumeAll>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d189      	bne.n	8009b8a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009c76:	4b10      	ldr	r3, [pc, #64]	; (8009cb8 <xQueueReceive+0x1bc>)
 8009c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c7c:	601a      	str	r2, [r3, #0]
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	e780      	b.n	8009b8a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8a:	f000 f8a7 	bl	8009ddc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c8e:	f000 fbed 	bl	800a46c <xTaskResumeAll>
 8009c92:	e77a      	b.n	8009b8a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c96:	f000 f8a1 	bl	8009ddc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c9a:	f000 fbe7 	bl	800a46c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca0:	f000 f8ee 	bl	8009e80 <prvIsQueueEmpty>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	f43f af6f 	beq.w	8009b8a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3730      	adds	r7, #48	; 0x30
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b086      	sub	sp, #24
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10d      	bne.n	8009cf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d14d      	bne.n	8009d7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 ffbc 	bl	800ac64 <xTaskPriorityDisinherit>
 8009cec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	609a      	str	r2, [r3, #8]
 8009cf4:	e043      	b.n	8009d7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d119      	bne.n	8009d30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6858      	ldr	r0, [r3, #4]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d04:	461a      	mov	r2, r3
 8009d06:	68b9      	ldr	r1, [r7, #8]
 8009d08:	f002 f834 	bl	800bd74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	685a      	ldr	r2, [r3, #4]
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d14:	441a      	add	r2, r3
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d32b      	bcc.n	8009d7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	605a      	str	r2, [r3, #4]
 8009d2e:	e026      	b.n	8009d7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	68d8      	ldr	r0, [r3, #12]
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d38:	461a      	mov	r2, r3
 8009d3a:	68b9      	ldr	r1, [r7, #8]
 8009d3c:	f002 f81a 	bl	800bd74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d48:	425b      	negs	r3, r3
 8009d4a:	441a      	add	r2, r3
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	68da      	ldr	r2, [r3, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d207      	bcs.n	8009d6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	689a      	ldr	r2, [r3, #8]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d64:	425b      	negs	r3, r3
 8009d66:	441a      	add	r2, r3
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d105      	bne.n	8009d7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009d78:	693b      	ldr	r3, [r7, #16]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	1c5a      	adds	r2, r3, #1
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009d86:	697b      	ldr	r3, [r7, #20]
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d018      	beq.n	8009dd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68da      	ldr	r2, [r3, #12]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009daa:	441a      	add	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68da      	ldr	r2, [r3, #12]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d303      	bcc.n	8009dc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	68d9      	ldr	r1, [r3, #12]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dcc:	461a      	mov	r2, r3
 8009dce:	6838      	ldr	r0, [r7, #0]
 8009dd0:	f001 ffd0 	bl	800bd74 <memcpy>
	}
}
 8009dd4:	bf00      	nop
 8009dd6:	3708      	adds	r7, #8
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009de4:	f001 fc7e 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009dee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009df0:	e011      	b.n	8009e16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d012      	beq.n	8009e20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3324      	adds	r3, #36	; 0x24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f000 fd50 	bl	800a8a4 <xTaskRemoveFromEventList>
 8009e04:	4603      	mov	r3, r0
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d001      	beq.n	8009e0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e0a:	f000 fe27 	bl	800aa5c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	3b01      	subs	r3, #1
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dce9      	bgt.n	8009df2 <prvUnlockQueue+0x16>
 8009e1e:	e000      	b.n	8009e22 <prvUnlockQueue+0x46>
					break;
 8009e20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	22ff      	movs	r2, #255	; 0xff
 8009e26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e2a:	f001 fc8b 	bl	800b744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e2e:	f001 fc59 	bl	800b6e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e3a:	e011      	b.n	8009e60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d012      	beq.n	8009e6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3310      	adds	r3, #16
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f000 fd2b 	bl	800a8a4 <xTaskRemoveFromEventList>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d001      	beq.n	8009e58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e54:	f000 fe02 	bl	800aa5c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e58:	7bbb      	ldrb	r3, [r7, #14]
 8009e5a:	3b01      	subs	r3, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dce9      	bgt.n	8009e3c <prvUnlockQueue+0x60>
 8009e68:	e000      	b.n	8009e6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009e6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	22ff      	movs	r2, #255	; 0xff
 8009e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009e74:	f001 fc66 	bl	800b744 <vPortExitCritical>
}
 8009e78:	bf00      	nop
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b084      	sub	sp, #16
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009e88:	f001 fc2c 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d102      	bne.n	8009e9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009e94:	2301      	movs	r3, #1
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e001      	b.n	8009e9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009e9e:	f001 fc51 	bl	800b744 <vPortExitCritical>

	return xReturn;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}

08009eac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b084      	sub	sp, #16
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eb4:	f001 fc16 	bl	800b6e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	d102      	bne.n	8009eca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	60fb      	str	r3, [r7, #12]
 8009ec8:	e001      	b.n	8009ece <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ece:	f001 fc39 	bl	800b744 <vPortExitCritical>

	return xReturn;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009edc:	b480      	push	{r7}
 8009ede:	b085      	sub	sp, #20
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
 8009ee4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	e014      	b.n	8009f16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009eec:	4a0f      	ldr	r2, [pc, #60]	; (8009f2c <vQueueAddToRegistry+0x50>)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d10b      	bne.n	8009f10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ef8:	490c      	ldr	r1, [pc, #48]	; (8009f2c <vQueueAddToRegistry+0x50>)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f02:	4a0a      	ldr	r2, [pc, #40]	; (8009f2c <vQueueAddToRegistry+0x50>)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	4413      	add	r3, r2
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f0e:	e006      	b.n	8009f1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	3301      	adds	r3, #1
 8009f14:	60fb      	str	r3, [r7, #12]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	d9e7      	bls.n	8009eec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f1c:	bf00      	nop
 8009f1e:	bf00      	nop
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
 8009f2a:	bf00      	nop
 8009f2c:	20000c88 	.word	0x20000c88

08009f30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b086      	sub	sp, #24
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009f40:	f001 fbd0 	bl	800b6e4 <vPortEnterCritical>
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f4a:	b25b      	sxtb	r3, r3
 8009f4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f50:	d103      	bne.n	8009f5a <vQueueWaitForMessageRestricted+0x2a>
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f5a:	697b      	ldr	r3, [r7, #20]
 8009f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f60:	b25b      	sxtb	r3, r3
 8009f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f66:	d103      	bne.n	8009f70 <vQueueWaitForMessageRestricted+0x40>
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f70:	f001 fbe8 	bl	800b744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d106      	bne.n	8009f8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	3324      	adds	r3, #36	; 0x24
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	68b9      	ldr	r1, [r7, #8]
 8009f84:	4618      	mov	r0, r3
 8009f86:	f000 fc61 	bl	800a84c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009f8a:	6978      	ldr	r0, [r7, #20]
 8009f8c:	f7ff ff26 	bl	8009ddc <prvUnlockQueue>
	}
 8009f90:	bf00      	nop
 8009f92:	3718      	adds	r7, #24
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b08e      	sub	sp, #56	; 0x38
 8009f9c:	af04      	add	r7, sp, #16
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10a      	bne.n	8009fc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb0:	f383 8811 	msr	BASEPRI, r3
 8009fb4:	f3bf 8f6f 	isb	sy
 8009fb8:	f3bf 8f4f 	dsb	sy
 8009fbc:	623b      	str	r3, [r7, #32]
}
 8009fbe:	bf00      	nop
 8009fc0:	e7fe      	b.n	8009fc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d10a      	bne.n	8009fde <xTaskCreateStatic+0x46>
	__asm volatile
 8009fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61fb      	str	r3, [r7, #28]
}
 8009fda:	bf00      	nop
 8009fdc:	e7fe      	b.n	8009fdc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009fde:	23bc      	movs	r3, #188	; 0xbc
 8009fe0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009fe2:	693b      	ldr	r3, [r7, #16]
 8009fe4:	2bbc      	cmp	r3, #188	; 0xbc
 8009fe6:	d00a      	beq.n	8009ffe <xTaskCreateStatic+0x66>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	61bb      	str	r3, [r7, #24]
}
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009ffe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	2b00      	cmp	r3, #0
 800a004:	d01e      	beq.n	800a044 <xTaskCreateStatic+0xac>
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d01b      	beq.n	800a044 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a014:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	2202      	movs	r2, #2
 800a01a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a01e:	2300      	movs	r3, #0
 800a020:	9303      	str	r3, [sp, #12]
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	9302      	str	r3, [sp, #8]
 800a026:	f107 0314 	add.w	r3, r7, #20
 800a02a:	9301      	str	r3, [sp, #4]
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	9300      	str	r3, [sp, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	687a      	ldr	r2, [r7, #4]
 800a034:	68b9      	ldr	r1, [r7, #8]
 800a036:	68f8      	ldr	r0, [r7, #12]
 800a038:	f000 f850 	bl	800a0dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a03c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a03e:	f000 f8f3 	bl	800a228 <prvAddNewTaskToReadyList>
 800a042:	e001      	b.n	800a048 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a048:	697b      	ldr	r3, [r7, #20]
	}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3728      	adds	r7, #40	; 0x28
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a052:	b580      	push	{r7, lr}
 800a054:	b08c      	sub	sp, #48	; 0x30
 800a056:	af04      	add	r7, sp, #16
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	4613      	mov	r3, r2
 800a060:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a062:	88fb      	ldrh	r3, [r7, #6]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4618      	mov	r0, r3
 800a068:	f001 fc5e 	bl	800b928 <pvPortMalloc>
 800a06c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d00e      	beq.n	800a092 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a074:	20bc      	movs	r0, #188	; 0xbc
 800a076:	f001 fc57 	bl	800b928 <pvPortMalloc>
 800a07a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d003      	beq.n	800a08a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	631a      	str	r2, [r3, #48]	; 0x30
 800a088:	e005      	b.n	800a096 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a08a:	6978      	ldr	r0, [r7, #20]
 800a08c:	f001 fd18 	bl	800bac0 <vPortFree>
 800a090:	e001      	b.n	800a096 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a092:	2300      	movs	r3, #0
 800a094:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d017      	beq.n	800a0cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a09c:	69fb      	ldr	r3, [r7, #28]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a0a4:	88fa      	ldrh	r2, [r7, #6]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	9302      	str	r3, [sp, #8]
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	9301      	str	r3, [sp, #4]
 800a0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68b9      	ldr	r1, [r7, #8]
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 f80e 	bl	800a0dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0c0:	69f8      	ldr	r0, [r7, #28]
 800a0c2:	f000 f8b1 	bl	800a228 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	61bb      	str	r3, [r7, #24]
 800a0ca:	e002      	b.n	800a0d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a0d2:	69bb      	ldr	r3, [r7, #24]
	}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3720      	adds	r7, #32
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b088      	sub	sp, #32
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	60f8      	str	r0, [r7, #12]
 800a0e4:	60b9      	str	r1, [r7, #8]
 800a0e6:	607a      	str	r2, [r7, #4]
 800a0e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	21a5      	movs	r1, #165	; 0xa5
 800a0f6:	f001 fe4b 	bl	800bd90 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a104:	3b01      	subs	r3, #1
 800a106:	009b      	lsls	r3, r3, #2
 800a108:	4413      	add	r3, r2
 800a10a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a10c:	69bb      	ldr	r3, [r7, #24]
 800a10e:	f023 0307 	bic.w	r3, r3, #7
 800a112:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a114:	69bb      	ldr	r3, [r7, #24]
 800a116:	f003 0307 	and.w	r3, r3, #7
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00a      	beq.n	800a134 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	617b      	str	r3, [r7, #20]
}
 800a130:	bf00      	nop
 800a132:	e7fe      	b.n	800a132 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d01f      	beq.n	800a17a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a13a:	2300      	movs	r3, #0
 800a13c:	61fb      	str	r3, [r7, #28]
 800a13e:	e012      	b.n	800a166 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a140:	68ba      	ldr	r2, [r7, #8]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	4413      	add	r3, r2
 800a146:	7819      	ldrb	r1, [r3, #0]
 800a148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	3334      	adds	r3, #52	; 0x34
 800a150:	460a      	mov	r2, r1
 800a152:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a154:	68ba      	ldr	r2, [r7, #8]
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	4413      	add	r3, r2
 800a15a:	781b      	ldrb	r3, [r3, #0]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d006      	beq.n	800a16e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a160:	69fb      	ldr	r3, [r7, #28]
 800a162:	3301      	adds	r3, #1
 800a164:	61fb      	str	r3, [r7, #28]
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	2b0f      	cmp	r3, #15
 800a16a:	d9e9      	bls.n	800a140 <prvInitialiseNewTask+0x64>
 800a16c:	e000      	b.n	800a170 <prvInitialiseNewTask+0x94>
			{
				break;
 800a16e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a172:	2200      	movs	r2, #0
 800a174:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a178:	e003      	b.n	800a182 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a184:	2b37      	cmp	r3, #55	; 0x37
 800a186:	d901      	bls.n	800a18c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a188:	2337      	movs	r3, #55	; 0x37
 800a18a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a18e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a190:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a196:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a19a:	2200      	movs	r2, #0
 800a19c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a0:	3304      	adds	r3, #4
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f7ff f978 	bl	8009498 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1aa:	3318      	adds	r3, #24
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff f973 	bl	8009498 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a1be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a1c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a1c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1da:	3354      	adds	r3, #84	; 0x54
 800a1dc:	2260      	movs	r2, #96	; 0x60
 800a1de:	2100      	movs	r1, #0
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f001 fdd5 	bl	800bd90 <memset>
 800a1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1e8:	4a0c      	ldr	r2, [pc, #48]	; (800a21c <prvInitialiseNewTask+0x140>)
 800a1ea:	659a      	str	r2, [r3, #88]	; 0x58
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ee:	4a0c      	ldr	r2, [pc, #48]	; (800a220 <prvInitialiseNewTask+0x144>)
 800a1f0:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f4:	4a0b      	ldr	r2, [pc, #44]	; (800a224 <prvInitialiseNewTask+0x148>)
 800a1f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a1f8:	683a      	ldr	r2, [r7, #0]
 800a1fa:	68f9      	ldr	r1, [r7, #12]
 800a1fc:	69b8      	ldr	r0, [r7, #24]
 800a1fe:	f001 f941 	bl	800b484 <pxPortInitialiseStack>
 800a202:	4602      	mov	r2, r0
 800a204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a206:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d002      	beq.n	800a214 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a212:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a214:	bf00      	nop
 800a216:	3720      	adds	r7, #32
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	0802bb90 	.word	0x0802bb90
 800a220:	0802bbb0 	.word	0x0802bbb0
 800a224:	0802bb70 	.word	0x0802bb70

0800a228 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a230:	f001 fa58 	bl	800b6e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a234:	4b2d      	ldr	r3, [pc, #180]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	3301      	adds	r3, #1
 800a23a:	4a2c      	ldr	r2, [pc, #176]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a23c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a23e:	4b2c      	ldr	r3, [pc, #176]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a246:	4a2a      	ldr	r2, [pc, #168]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a24c:	4b27      	ldr	r3, [pc, #156]	; (800a2ec <prvAddNewTaskToReadyList+0xc4>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d110      	bne.n	800a276 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a254:	f000 fc26 	bl	800aaa4 <prvInitialiseTaskLists>
 800a258:	e00d      	b.n	800a276 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a25a:	4b26      	ldr	r3, [pc, #152]	; (800a2f4 <prvAddNewTaskToReadyList+0xcc>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d109      	bne.n	800a276 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a262:	4b23      	ldr	r3, [pc, #140]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d802      	bhi.n	800a276 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a270:	4a1f      	ldr	r2, [pc, #124]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a276:	4b20      	ldr	r3, [pc, #128]	; (800a2f8 <prvAddNewTaskToReadyList+0xd0>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	3301      	adds	r3, #1
 800a27c:	4a1e      	ldr	r2, [pc, #120]	; (800a2f8 <prvAddNewTaskToReadyList+0xd0>)
 800a27e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a280:	4b1d      	ldr	r3, [pc, #116]	; (800a2f8 <prvAddNewTaskToReadyList+0xd0>)
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a28c:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <prvAddNewTaskToReadyList+0xd4>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	429a      	cmp	r2, r3
 800a292:	d903      	bls.n	800a29c <prvAddNewTaskToReadyList+0x74>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a298:	4a18      	ldr	r2, [pc, #96]	; (800a2fc <prvAddNewTaskToReadyList+0xd4>)
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4a15      	ldr	r2, [pc, #84]	; (800a300 <prvAddNewTaskToReadyList+0xd8>)
 800a2aa:	441a      	add	r2, r3
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3304      	adds	r3, #4
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4610      	mov	r0, r2
 800a2b4:	f7ff f8fd 	bl	80094b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a2b8:	f001 fa44 	bl	800b744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a2bc:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <prvAddNewTaskToReadyList+0xcc>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00e      	beq.n	800a2e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a2c4:	4b0a      	ldr	r3, [pc, #40]	; (800a2f0 <prvAddNewTaskToReadyList+0xc8>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d207      	bcs.n	800a2e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a2d2:	4b0c      	ldr	r3, [pc, #48]	; (800a304 <prvAddNewTaskToReadyList+0xdc>)
 800a2d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d8:	601a      	str	r2, [r3, #0]
 800a2da:	f3bf 8f4f 	dsb	sy
 800a2de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a2e2:	bf00      	nop
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}
 800a2ea:	bf00      	nop
 800a2ec:	2000119c 	.word	0x2000119c
 800a2f0:	20000cc8 	.word	0x20000cc8
 800a2f4:	200011a8 	.word	0x200011a8
 800a2f8:	200011b8 	.word	0x200011b8
 800a2fc:	200011a4 	.word	0x200011a4
 800a300:	20000ccc 	.word	0x20000ccc
 800a304:	e000ed04 	.word	0xe000ed04

0800a308 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a310:	2300      	movs	r3, #0
 800a312:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d017      	beq.n	800a34a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a31a:	4b13      	ldr	r3, [pc, #76]	; (800a368 <vTaskDelay+0x60>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00a      	beq.n	800a338 <vTaskDelay+0x30>
	__asm volatile
 800a322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a326:	f383 8811 	msr	BASEPRI, r3
 800a32a:	f3bf 8f6f 	isb	sy
 800a32e:	f3bf 8f4f 	dsb	sy
 800a332:	60bb      	str	r3, [r7, #8]
}
 800a334:	bf00      	nop
 800a336:	e7fe      	b.n	800a336 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a338:	f000 f88a 	bl	800a450 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a33c:	2100      	movs	r1, #0
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f000 fcfe 	bl	800ad40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a344:	f000 f892 	bl	800a46c <xTaskResumeAll>
 800a348:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d107      	bne.n	800a360 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a350:	4b06      	ldr	r3, [pc, #24]	; (800a36c <vTaskDelay+0x64>)
 800a352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a356:	601a      	str	r2, [r3, #0]
 800a358:	f3bf 8f4f 	dsb	sy
 800a35c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a360:	bf00      	nop
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	200011c4 	.word	0x200011c4
 800a36c:	e000ed04 	.word	0xe000ed04

0800a370 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	; 0x28
 800a374:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a376:	2300      	movs	r3, #0
 800a378:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a37a:	2300      	movs	r3, #0
 800a37c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a37e:	463a      	mov	r2, r7
 800a380:	1d39      	adds	r1, r7, #4
 800a382:	f107 0308 	add.w	r3, r7, #8
 800a386:	4618      	mov	r0, r3
 800a388:	f7ff f832 	bl	80093f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a38c:	6839      	ldr	r1, [r7, #0]
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	68ba      	ldr	r2, [r7, #8]
 800a392:	9202      	str	r2, [sp, #8]
 800a394:	9301      	str	r3, [sp, #4]
 800a396:	2300      	movs	r3, #0
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	2300      	movs	r3, #0
 800a39c:	460a      	mov	r2, r1
 800a39e:	4924      	ldr	r1, [pc, #144]	; (800a430 <vTaskStartScheduler+0xc0>)
 800a3a0:	4824      	ldr	r0, [pc, #144]	; (800a434 <vTaskStartScheduler+0xc4>)
 800a3a2:	f7ff fdf9 	bl	8009f98 <xTaskCreateStatic>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	4a23      	ldr	r2, [pc, #140]	; (800a438 <vTaskStartScheduler+0xc8>)
 800a3aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a3ac:	4b22      	ldr	r3, [pc, #136]	; (800a438 <vTaskStartScheduler+0xc8>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d002      	beq.n	800a3ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	617b      	str	r3, [r7, #20]
 800a3b8:	e001      	b.n	800a3be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b01      	cmp	r3, #1
 800a3c2:	d102      	bne.n	800a3ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a3c4:	f000 fd10 	bl	800ade8 <xTimerCreateTimerTask>
 800a3c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a3ca:	697b      	ldr	r3, [r7, #20]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d11b      	bne.n	800a408 <vTaskStartScheduler+0x98>
	__asm volatile
 800a3d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3d4:	f383 8811 	msr	BASEPRI, r3
 800a3d8:	f3bf 8f6f 	isb	sy
 800a3dc:	f3bf 8f4f 	dsb	sy
 800a3e0:	613b      	str	r3, [r7, #16]
}
 800a3e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a3e4:	4b15      	ldr	r3, [pc, #84]	; (800a43c <vTaskStartScheduler+0xcc>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	3354      	adds	r3, #84	; 0x54
 800a3ea:	4a15      	ldr	r2, [pc, #84]	; (800a440 <vTaskStartScheduler+0xd0>)
 800a3ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a3ee:	4b15      	ldr	r3, [pc, #84]	; (800a444 <vTaskStartScheduler+0xd4>)
 800a3f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <vTaskStartScheduler+0xd8>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a3fc:	4b13      	ldr	r3, [pc, #76]	; (800a44c <vTaskStartScheduler+0xdc>)
 800a3fe:	2200      	movs	r2, #0
 800a400:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a402:	f001 f8cd 	bl	800b5a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a406:	e00e      	b.n	800a426 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a40e:	d10a      	bne.n	800a426 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a414:	f383 8811 	msr	BASEPRI, r3
 800a418:	f3bf 8f6f 	isb	sy
 800a41c:	f3bf 8f4f 	dsb	sy
 800a420:	60fb      	str	r3, [r7, #12]
}
 800a422:	bf00      	nop
 800a424:	e7fe      	b.n	800a424 <vTaskStartScheduler+0xb4>
}
 800a426:	bf00      	nop
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	0800c884 	.word	0x0800c884
 800a434:	0800aa75 	.word	0x0800aa75
 800a438:	200011c0 	.word	0x200011c0
 800a43c:	20000cc8 	.word	0x20000cc8
 800a440:	2000002c 	.word	0x2000002c
 800a444:	200011bc 	.word	0x200011bc
 800a448:	200011a8 	.word	0x200011a8
 800a44c:	200011a0 	.word	0x200011a0

0800a450 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a450:	b480      	push	{r7}
 800a452:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a454:	4b04      	ldr	r3, [pc, #16]	; (800a468 <vTaskSuspendAll+0x18>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	3301      	adds	r3, #1
 800a45a:	4a03      	ldr	r2, [pc, #12]	; (800a468 <vTaskSuspendAll+0x18>)
 800a45c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a45e:	bf00      	nop
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	200011c4 	.word	0x200011c4

0800a46c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b084      	sub	sp, #16
 800a470:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a472:	2300      	movs	r3, #0
 800a474:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a476:	2300      	movs	r3, #0
 800a478:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a47a:	4b42      	ldr	r3, [pc, #264]	; (800a584 <xTaskResumeAll+0x118>)
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10a      	bne.n	800a498 <xTaskResumeAll+0x2c>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	603b      	str	r3, [r7, #0]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a498:	f001 f924 	bl	800b6e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a49c:	4b39      	ldr	r3, [pc, #228]	; (800a584 <xTaskResumeAll+0x118>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	3b01      	subs	r3, #1
 800a4a2:	4a38      	ldr	r2, [pc, #224]	; (800a584 <xTaskResumeAll+0x118>)
 800a4a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4a6:	4b37      	ldr	r3, [pc, #220]	; (800a584 <xTaskResumeAll+0x118>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d162      	bne.n	800a574 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a4ae:	4b36      	ldr	r3, [pc, #216]	; (800a588 <xTaskResumeAll+0x11c>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d05e      	beq.n	800a574 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a4b6:	e02f      	b.n	800a518 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4b8:	4b34      	ldr	r3, [pc, #208]	; (800a58c <xTaskResumeAll+0x120>)
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3318      	adds	r3, #24
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	f7ff f851 	bl	800956c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7ff f84c 	bl	800956c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4d8:	4b2d      	ldr	r3, [pc, #180]	; (800a590 <xTaskResumeAll+0x124>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	429a      	cmp	r2, r3
 800a4de:	d903      	bls.n	800a4e8 <xTaskResumeAll+0x7c>
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4e4:	4a2a      	ldr	r2, [pc, #168]	; (800a590 <xTaskResumeAll+0x124>)
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	009b      	lsls	r3, r3, #2
 800a4f0:	4413      	add	r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4a27      	ldr	r2, [pc, #156]	; (800a594 <xTaskResumeAll+0x128>)
 800a4f6:	441a      	add	r2, r3
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3304      	adds	r3, #4
 800a4fc:	4619      	mov	r1, r3
 800a4fe:	4610      	mov	r0, r2
 800a500:	f7fe ffd7 	bl	80094b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a508:	4b23      	ldr	r3, [pc, #140]	; (800a598 <xTaskResumeAll+0x12c>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a50e:	429a      	cmp	r2, r3
 800a510:	d302      	bcc.n	800a518 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a512:	4b22      	ldr	r3, [pc, #136]	; (800a59c <xTaskResumeAll+0x130>)
 800a514:	2201      	movs	r2, #1
 800a516:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a518:	4b1c      	ldr	r3, [pc, #112]	; (800a58c <xTaskResumeAll+0x120>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d1cb      	bne.n	800a4b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d001      	beq.n	800a52a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a526:	f000 fb5f 	bl	800abe8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a52a:	4b1d      	ldr	r3, [pc, #116]	; (800a5a0 <xTaskResumeAll+0x134>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d010      	beq.n	800a558 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a536:	f000 f847 	bl	800a5c8 <xTaskIncrementTick>
 800a53a:	4603      	mov	r3, r0
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d002      	beq.n	800a546 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a540:	4b16      	ldr	r3, [pc, #88]	; (800a59c <xTaskResumeAll+0x130>)
 800a542:	2201      	movs	r2, #1
 800a544:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	3b01      	subs	r3, #1
 800a54a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1f1      	bne.n	800a536 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a552:	4b13      	ldr	r3, [pc, #76]	; (800a5a0 <xTaskResumeAll+0x134>)
 800a554:	2200      	movs	r2, #0
 800a556:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a558:	4b10      	ldr	r3, [pc, #64]	; (800a59c <xTaskResumeAll+0x130>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d009      	beq.n	800a574 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a560:	2301      	movs	r3, #1
 800a562:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a564:	4b0f      	ldr	r3, [pc, #60]	; (800a5a4 <xTaskResumeAll+0x138>)
 800a566:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	f3bf 8f4f 	dsb	sy
 800a570:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a574:	f001 f8e6 	bl	800b744 <vPortExitCritical>

	return xAlreadyYielded;
 800a578:	68bb      	ldr	r3, [r7, #8]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	200011c4 	.word	0x200011c4
 800a588:	2000119c 	.word	0x2000119c
 800a58c:	2000115c 	.word	0x2000115c
 800a590:	200011a4 	.word	0x200011a4
 800a594:	20000ccc 	.word	0x20000ccc
 800a598:	20000cc8 	.word	0x20000cc8
 800a59c:	200011b0 	.word	0x200011b0
 800a5a0:	200011ac 	.word	0x200011ac
 800a5a4:	e000ed04 	.word	0xe000ed04

0800a5a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a5ae:	4b05      	ldr	r3, [pc, #20]	; (800a5c4 <xTaskGetTickCount+0x1c>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a5b4:	687b      	ldr	r3, [r7, #4]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	200011a0 	.word	0x200011a0

0800a5c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a5d2:	4b4f      	ldr	r3, [pc, #316]	; (800a710 <xTaskIncrementTick+0x148>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f040 808f 	bne.w	800a6fa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a5dc:	4b4d      	ldr	r3, [pc, #308]	; (800a714 <xTaskIncrementTick+0x14c>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a5e4:	4a4b      	ldr	r2, [pc, #300]	; (800a714 <xTaskIncrementTick+0x14c>)
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d120      	bne.n	800a632 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a5f0:	4b49      	ldr	r3, [pc, #292]	; (800a718 <xTaskIncrementTick+0x150>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d00a      	beq.n	800a610 <xTaskIncrementTick+0x48>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	603b      	str	r3, [r7, #0]
}
 800a60c:	bf00      	nop
 800a60e:	e7fe      	b.n	800a60e <xTaskIncrementTick+0x46>
 800a610:	4b41      	ldr	r3, [pc, #260]	; (800a718 <xTaskIncrementTick+0x150>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	4b41      	ldr	r3, [pc, #260]	; (800a71c <xTaskIncrementTick+0x154>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a3f      	ldr	r2, [pc, #252]	; (800a718 <xTaskIncrementTick+0x150>)
 800a61c:	6013      	str	r3, [r2, #0]
 800a61e:	4a3f      	ldr	r2, [pc, #252]	; (800a71c <xTaskIncrementTick+0x154>)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	6013      	str	r3, [r2, #0]
 800a624:	4b3e      	ldr	r3, [pc, #248]	; (800a720 <xTaskIncrementTick+0x158>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	3301      	adds	r3, #1
 800a62a:	4a3d      	ldr	r2, [pc, #244]	; (800a720 <xTaskIncrementTick+0x158>)
 800a62c:	6013      	str	r3, [r2, #0]
 800a62e:	f000 fadb 	bl	800abe8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a632:	4b3c      	ldr	r3, [pc, #240]	; (800a724 <xTaskIncrementTick+0x15c>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	429a      	cmp	r2, r3
 800a63a:	d349      	bcc.n	800a6d0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a63c:	4b36      	ldr	r3, [pc, #216]	; (800a718 <xTaskIncrementTick+0x150>)
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d104      	bne.n	800a650 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a646:	4b37      	ldr	r3, [pc, #220]	; (800a724 <xTaskIncrementTick+0x15c>)
 800a648:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a64c:	601a      	str	r2, [r3, #0]
					break;
 800a64e:	e03f      	b.n	800a6d0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a650:	4b31      	ldr	r3, [pc, #196]	; (800a718 <xTaskIncrementTick+0x150>)
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a660:	693a      	ldr	r2, [r7, #16]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	429a      	cmp	r2, r3
 800a666:	d203      	bcs.n	800a670 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a668:	4a2e      	ldr	r2, [pc, #184]	; (800a724 <xTaskIncrementTick+0x15c>)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a66e:	e02f      	b.n	800a6d0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	3304      	adds	r3, #4
 800a674:	4618      	mov	r0, r3
 800a676:	f7fe ff79 	bl	800956c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d004      	beq.n	800a68c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	3318      	adds	r3, #24
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe ff70 	bl	800956c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	4b25      	ldr	r3, [pc, #148]	; (800a728 <xTaskIncrementTick+0x160>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	429a      	cmp	r2, r3
 800a696:	d903      	bls.n	800a6a0 <xTaskIncrementTick+0xd8>
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	4a22      	ldr	r2, [pc, #136]	; (800a728 <xTaskIncrementTick+0x160>)
 800a69e:	6013      	str	r3, [r2, #0]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a4:	4613      	mov	r3, r2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	009b      	lsls	r3, r3, #2
 800a6ac:	4a1f      	ldr	r2, [pc, #124]	; (800a72c <xTaskIncrementTick+0x164>)
 800a6ae:	441a      	add	r2, r3
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	3304      	adds	r3, #4
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	4610      	mov	r0, r2
 800a6b8:	f7fe fefb 	bl	80094b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c0:	4b1b      	ldr	r3, [pc, #108]	; (800a730 <xTaskIncrementTick+0x168>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	429a      	cmp	r2, r3
 800a6c8:	d3b8      	bcc.n	800a63c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a6ce:	e7b5      	b.n	800a63c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a6d0:	4b17      	ldr	r3, [pc, #92]	; (800a730 <xTaskIncrementTick+0x168>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6d6:	4915      	ldr	r1, [pc, #84]	; (800a72c <xTaskIncrementTick+0x164>)
 800a6d8:	4613      	mov	r3, r2
 800a6da:	009b      	lsls	r3, r3, #2
 800a6dc:	4413      	add	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	440b      	add	r3, r1
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d901      	bls.n	800a6ec <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a6ec:	4b11      	ldr	r3, [pc, #68]	; (800a734 <xTaskIncrementTick+0x16c>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d007      	beq.n	800a704 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	617b      	str	r3, [r7, #20]
 800a6f8:	e004      	b.n	800a704 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a6fa:	4b0f      	ldr	r3, [pc, #60]	; (800a738 <xTaskIncrementTick+0x170>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	4a0d      	ldr	r2, [pc, #52]	; (800a738 <xTaskIncrementTick+0x170>)
 800a702:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a704:	697b      	ldr	r3, [r7, #20]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	200011c4 	.word	0x200011c4
 800a714:	200011a0 	.word	0x200011a0
 800a718:	20001154 	.word	0x20001154
 800a71c:	20001158 	.word	0x20001158
 800a720:	200011b4 	.word	0x200011b4
 800a724:	200011bc 	.word	0x200011bc
 800a728:	200011a4 	.word	0x200011a4
 800a72c:	20000ccc 	.word	0x20000ccc
 800a730:	20000cc8 	.word	0x20000cc8
 800a734:	200011b0 	.word	0x200011b0
 800a738:	200011ac 	.word	0x200011ac

0800a73c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a742:	4b2a      	ldr	r3, [pc, #168]	; (800a7ec <vTaskSwitchContext+0xb0>)
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d003      	beq.n	800a752 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a74a:	4b29      	ldr	r3, [pc, #164]	; (800a7f0 <vTaskSwitchContext+0xb4>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a750:	e046      	b.n	800a7e0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a752:	4b27      	ldr	r3, [pc, #156]	; (800a7f0 <vTaskSwitchContext+0xb4>)
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a758:	4b26      	ldr	r3, [pc, #152]	; (800a7f4 <vTaskSwitchContext+0xb8>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	60fb      	str	r3, [r7, #12]
 800a75e:	e010      	b.n	800a782 <vTaskSwitchContext+0x46>
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d10a      	bne.n	800a77c <vTaskSwitchContext+0x40>
	__asm volatile
 800a766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a76a:	f383 8811 	msr	BASEPRI, r3
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f3bf 8f4f 	dsb	sy
 800a776:	607b      	str	r3, [r7, #4]
}
 800a778:	bf00      	nop
 800a77a:	e7fe      	b.n	800a77a <vTaskSwitchContext+0x3e>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	3b01      	subs	r3, #1
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	491d      	ldr	r1, [pc, #116]	; (800a7f8 <vTaskSwitchContext+0xbc>)
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	4613      	mov	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	4413      	add	r3, r2
 800a78c:	009b      	lsls	r3, r3, #2
 800a78e:	440b      	add	r3, r1
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d0e4      	beq.n	800a760 <vTaskSwitchContext+0x24>
 800a796:	68fa      	ldr	r2, [r7, #12]
 800a798:	4613      	mov	r3, r2
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4a15      	ldr	r2, [pc, #84]	; (800a7f8 <vTaskSwitchContext+0xbc>)
 800a7a2:	4413      	add	r3, r2
 800a7a4:	60bb      	str	r3, [r7, #8]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	685b      	ldr	r3, [r3, #4]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	605a      	str	r2, [r3, #4]
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	685a      	ldr	r2, [r3, #4]
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	3308      	adds	r3, #8
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	d104      	bne.n	800a7c6 <vTaskSwitchContext+0x8a>
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	605a      	str	r2, [r3, #4]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	4a0b      	ldr	r2, [pc, #44]	; (800a7fc <vTaskSwitchContext+0xc0>)
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	4a08      	ldr	r2, [pc, #32]	; (800a7f4 <vTaskSwitchContext+0xb8>)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a7d6:	4b09      	ldr	r3, [pc, #36]	; (800a7fc <vTaskSwitchContext+0xc0>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	3354      	adds	r3, #84	; 0x54
 800a7dc:	4a08      	ldr	r2, [pc, #32]	; (800a800 <vTaskSwitchContext+0xc4>)
 800a7de:	6013      	str	r3, [r2, #0]
}
 800a7e0:	bf00      	nop
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	200011c4 	.word	0x200011c4
 800a7f0:	200011b0 	.word	0x200011b0
 800a7f4:	200011a4 	.word	0x200011a4
 800a7f8:	20000ccc 	.word	0x20000ccc
 800a7fc:	20000cc8 	.word	0x20000cc8
 800a800:	2000002c 	.word	0x2000002c

0800a804 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a818:	f383 8811 	msr	BASEPRI, r3
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	f3bf 8f4f 	dsb	sy
 800a824:	60fb      	str	r3, [r7, #12]
}
 800a826:	bf00      	nop
 800a828:	e7fe      	b.n	800a828 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a82a:	4b07      	ldr	r3, [pc, #28]	; (800a848 <vTaskPlaceOnEventList+0x44>)
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	3318      	adds	r3, #24
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f7fe fe61 	bl	80094fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a838:	2101      	movs	r1, #1
 800a83a:	6838      	ldr	r0, [r7, #0]
 800a83c:	f000 fa80 	bl	800ad40 <prvAddCurrentTaskToDelayedList>
}
 800a840:	bf00      	nop
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}
 800a848:	20000cc8 	.word	0x20000cc8

0800a84c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d10a      	bne.n	800a874 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	617b      	str	r3, [r7, #20]
}
 800a870:	bf00      	nop
 800a872:	e7fe      	b.n	800a872 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a874:	4b0a      	ldr	r3, [pc, #40]	; (800a8a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3318      	adds	r3, #24
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f7fe fe18 	bl	80094b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d002      	beq.n	800a88e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a888:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a88c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	68b8      	ldr	r0, [r7, #8]
 800a892:	f000 fa55 	bl	800ad40 <prvAddCurrentTaskToDelayedList>
	}
 800a896:	bf00      	nop
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20000cc8 	.word	0x20000cc8

0800a8a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	68db      	ldr	r3, [r3, #12]
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a8ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8be:	f383 8811 	msr	BASEPRI, r3
 800a8c2:	f3bf 8f6f 	isb	sy
 800a8c6:	f3bf 8f4f 	dsb	sy
 800a8ca:	60fb      	str	r3, [r7, #12]
}
 800a8cc:	bf00      	nop
 800a8ce:	e7fe      	b.n	800a8ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	3318      	adds	r3, #24
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7fe fe49 	bl	800956c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8da:	4b1e      	ldr	r3, [pc, #120]	; (800a954 <xTaskRemoveFromEventList+0xb0>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d11d      	bne.n	800a91e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	3304      	adds	r3, #4
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	f7fe fe40 	bl	800956c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8f0:	4b19      	ldr	r3, [pc, #100]	; (800a958 <xTaskRemoveFromEventList+0xb4>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d903      	bls.n	800a900 <xTaskRemoveFromEventList+0x5c>
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8fc:	4a16      	ldr	r2, [pc, #88]	; (800a958 <xTaskRemoveFromEventList+0xb4>)
 800a8fe:	6013      	str	r3, [r2, #0]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a904:	4613      	mov	r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	4413      	add	r3, r2
 800a90a:	009b      	lsls	r3, r3, #2
 800a90c:	4a13      	ldr	r2, [pc, #76]	; (800a95c <xTaskRemoveFromEventList+0xb8>)
 800a90e:	441a      	add	r2, r3
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	3304      	adds	r3, #4
 800a914:	4619      	mov	r1, r3
 800a916:	4610      	mov	r0, r2
 800a918:	f7fe fdcb 	bl	80094b2 <vListInsertEnd>
 800a91c:	e005      	b.n	800a92a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	3318      	adds	r3, #24
 800a922:	4619      	mov	r1, r3
 800a924:	480e      	ldr	r0, [pc, #56]	; (800a960 <xTaskRemoveFromEventList+0xbc>)
 800a926:	f7fe fdc4 	bl	80094b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a92a:	693b      	ldr	r3, [r7, #16]
 800a92c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a92e:	4b0d      	ldr	r3, [pc, #52]	; (800a964 <xTaskRemoveFromEventList+0xc0>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a934:	429a      	cmp	r2, r3
 800a936:	d905      	bls.n	800a944 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a938:	2301      	movs	r3, #1
 800a93a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a93c:	4b0a      	ldr	r3, [pc, #40]	; (800a968 <xTaskRemoveFromEventList+0xc4>)
 800a93e:	2201      	movs	r2, #1
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	e001      	b.n	800a948 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a944:	2300      	movs	r3, #0
 800a946:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a948:	697b      	ldr	r3, [r7, #20]
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3718      	adds	r7, #24
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	200011c4 	.word	0x200011c4
 800a958:	200011a4 	.word	0x200011a4
 800a95c:	20000ccc 	.word	0x20000ccc
 800a960:	2000115c 	.word	0x2000115c
 800a964:	20000cc8 	.word	0x20000cc8
 800a968:	200011b0 	.word	0x200011b0

0800a96c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a974:	4b06      	ldr	r3, [pc, #24]	; (800a990 <vTaskInternalSetTimeOutState+0x24>)
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a97c:	4b05      	ldr	r3, [pc, #20]	; (800a994 <vTaskInternalSetTimeOutState+0x28>)
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	605a      	str	r2, [r3, #4]
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr
 800a990:	200011b4 	.word	0x200011b4
 800a994:	200011a0 	.word	0x200011a0

0800a998 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b088      	sub	sp, #32
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
 800a9a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ac:	f383 8811 	msr	BASEPRI, r3
 800a9b0:	f3bf 8f6f 	isb	sy
 800a9b4:	f3bf 8f4f 	dsb	sy
 800a9b8:	613b      	str	r3, [r7, #16]
}
 800a9ba:	bf00      	nop
 800a9bc:	e7fe      	b.n	800a9bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10a      	bne.n	800a9da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	60fb      	str	r3, [r7, #12]
}
 800a9d6:	bf00      	nop
 800a9d8:	e7fe      	b.n	800a9d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a9da:	f000 fe83 	bl	800b6e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a9de:	4b1d      	ldr	r3, [pc, #116]	; (800aa54 <xTaskCheckForTimeOut+0xbc>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9f6:	d102      	bne.n	800a9fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	61fb      	str	r3, [r7, #28]
 800a9fc:	e023      	b.n	800aa46 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4b15      	ldr	r3, [pc, #84]	; (800aa58 <xTaskCheckForTimeOut+0xc0>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	429a      	cmp	r2, r3
 800aa08:	d007      	beq.n	800aa1a <xTaskCheckForTimeOut+0x82>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	69ba      	ldr	r2, [r7, #24]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d302      	bcc.n	800aa1a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa14:	2301      	movs	r3, #1
 800aa16:	61fb      	str	r3, [r7, #28]
 800aa18:	e015      	b.n	800aa46 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	429a      	cmp	r2, r3
 800aa22:	d20b      	bcs.n	800aa3c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	681a      	ldr	r2, [r3, #0]
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	1ad2      	subs	r2, r2, r3
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff ff9b 	bl	800a96c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa36:	2300      	movs	r3, #0
 800aa38:	61fb      	str	r3, [r7, #28]
 800aa3a:	e004      	b.n	800aa46 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa42:	2301      	movs	r3, #1
 800aa44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa46:	f000 fe7d 	bl	800b744 <vPortExitCritical>

	return xReturn;
 800aa4a:	69fb      	ldr	r3, [r7, #28]
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3720      	adds	r7, #32
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	200011a0 	.word	0x200011a0
 800aa58:	200011b4 	.word	0x200011b4

0800aa5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aa60:	4b03      	ldr	r3, [pc, #12]	; (800aa70 <vTaskMissedYield+0x14>)
 800aa62:	2201      	movs	r2, #1
 800aa64:	601a      	str	r2, [r3, #0]
}
 800aa66:	bf00      	nop
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6e:	4770      	bx	lr
 800aa70:	200011b0 	.word	0x200011b0

0800aa74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b082      	sub	sp, #8
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aa7c:	f000 f852 	bl	800ab24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aa80:	4b06      	ldr	r3, [pc, #24]	; (800aa9c <prvIdleTask+0x28>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d9f9      	bls.n	800aa7c <prvIdleTask+0x8>
			{
				taskYIELD();
 800aa88:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <prvIdleTask+0x2c>)
 800aa8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa8e:	601a      	str	r2, [r3, #0]
 800aa90:	f3bf 8f4f 	dsb	sy
 800aa94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aa98:	e7f0      	b.n	800aa7c <prvIdleTask+0x8>
 800aa9a:	bf00      	nop
 800aa9c:	20000ccc 	.word	0x20000ccc
 800aaa0:	e000ed04 	.word	0xe000ed04

0800aaa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b082      	sub	sp, #8
 800aaa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaaa:	2300      	movs	r3, #0
 800aaac:	607b      	str	r3, [r7, #4]
 800aaae:	e00c      	b.n	800aaca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <prvInitialiseTaskLists+0x60>)
 800aabc:	4413      	add	r3, r2
 800aabe:	4618      	mov	r0, r3
 800aac0:	f7fe fcca 	bl	8009458 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	3301      	adds	r3, #1
 800aac8:	607b      	str	r3, [r7, #4]
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b37      	cmp	r3, #55	; 0x37
 800aace:	d9ef      	bls.n	800aab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800aad0:	480d      	ldr	r0, [pc, #52]	; (800ab08 <prvInitialiseTaskLists+0x64>)
 800aad2:	f7fe fcc1 	bl	8009458 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800aad6:	480d      	ldr	r0, [pc, #52]	; (800ab0c <prvInitialiseTaskLists+0x68>)
 800aad8:	f7fe fcbe 	bl	8009458 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aadc:	480c      	ldr	r0, [pc, #48]	; (800ab10 <prvInitialiseTaskLists+0x6c>)
 800aade:	f7fe fcbb 	bl	8009458 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aae2:	480c      	ldr	r0, [pc, #48]	; (800ab14 <prvInitialiseTaskLists+0x70>)
 800aae4:	f7fe fcb8 	bl	8009458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800aae8:	480b      	ldr	r0, [pc, #44]	; (800ab18 <prvInitialiseTaskLists+0x74>)
 800aaea:	f7fe fcb5 	bl	8009458 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800aaee:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <prvInitialiseTaskLists+0x78>)
 800aaf0:	4a05      	ldr	r2, [pc, #20]	; (800ab08 <prvInitialiseTaskLists+0x64>)
 800aaf2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aaf4:	4b0a      	ldr	r3, [pc, #40]	; (800ab20 <prvInitialiseTaskLists+0x7c>)
 800aaf6:	4a05      	ldr	r2, [pc, #20]	; (800ab0c <prvInitialiseTaskLists+0x68>)
 800aaf8:	601a      	str	r2, [r3, #0]
}
 800aafa:	bf00      	nop
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
 800ab02:	bf00      	nop
 800ab04:	20000ccc 	.word	0x20000ccc
 800ab08:	2000112c 	.word	0x2000112c
 800ab0c:	20001140 	.word	0x20001140
 800ab10:	2000115c 	.word	0x2000115c
 800ab14:	20001170 	.word	0x20001170
 800ab18:	20001188 	.word	0x20001188
 800ab1c:	20001154 	.word	0x20001154
 800ab20:	20001158 	.word	0x20001158

0800ab24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab2a:	e019      	b.n	800ab60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab2c:	f000 fdda 	bl	800b6e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab30:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <prvCheckTasksWaitingTermination+0x50>)
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	3304      	adds	r3, #4
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f7fe fd15 	bl	800956c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab42:	4b0d      	ldr	r3, [pc, #52]	; (800ab78 <prvCheckTasksWaitingTermination+0x54>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	3b01      	subs	r3, #1
 800ab48:	4a0b      	ldr	r2, [pc, #44]	; (800ab78 <prvCheckTasksWaitingTermination+0x54>)
 800ab4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab4c:	4b0b      	ldr	r3, [pc, #44]	; (800ab7c <prvCheckTasksWaitingTermination+0x58>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3b01      	subs	r3, #1
 800ab52:	4a0a      	ldr	r2, [pc, #40]	; (800ab7c <prvCheckTasksWaitingTermination+0x58>)
 800ab54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ab56:	f000 fdf5 	bl	800b744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 f810 	bl	800ab80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab60:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <prvCheckTasksWaitingTermination+0x58>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d1e1      	bne.n	800ab2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	3708      	adds	r7, #8
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}
 800ab72:	bf00      	nop
 800ab74:	20001170 	.word	0x20001170
 800ab78:	2000119c 	.word	0x2000119c
 800ab7c:	20001184 	.word	0x20001184

0800ab80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	3354      	adds	r3, #84	; 0x54
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f001 fa0b 	bl	800bfa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d108      	bne.n	800abae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	4618      	mov	r0, r3
 800aba2:	f000 ff8d 	bl	800bac0 <vPortFree>
				vPortFree( pxTCB );
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 ff8a 	bl	800bac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abac:	e018      	b.n	800abe0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d103      	bne.n	800abc0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f000 ff81 	bl	800bac0 <vPortFree>
	}
 800abbe:	e00f      	b.n	800abe0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d00a      	beq.n	800abe0 <prvDeleteTCB+0x60>
	__asm volatile
 800abca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abce:	f383 8811 	msr	BASEPRI, r3
 800abd2:	f3bf 8f6f 	isb	sy
 800abd6:	f3bf 8f4f 	dsb	sy
 800abda:	60fb      	str	r3, [r7, #12]
}
 800abdc:	bf00      	nop
 800abde:	e7fe      	b.n	800abde <prvDeleteTCB+0x5e>
	}
 800abe0:	bf00      	nop
 800abe2:	3710      	adds	r7, #16
 800abe4:	46bd      	mov	sp, r7
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abee:	4b0c      	ldr	r3, [pc, #48]	; (800ac20 <prvResetNextTaskUnblockTime+0x38>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d104      	bne.n	800ac02 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800abf8:	4b0a      	ldr	r3, [pc, #40]	; (800ac24 <prvResetNextTaskUnblockTime+0x3c>)
 800abfa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800abfe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac00:	e008      	b.n	800ac14 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac02:	4b07      	ldr	r3, [pc, #28]	; (800ac20 <prvResetNextTaskUnblockTime+0x38>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	68db      	ldr	r3, [r3, #12]
 800ac08:	68db      	ldr	r3, [r3, #12]
 800ac0a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	4a04      	ldr	r2, [pc, #16]	; (800ac24 <prvResetNextTaskUnblockTime+0x3c>)
 800ac12:	6013      	str	r3, [r2, #0]
}
 800ac14:	bf00      	nop
 800ac16:	370c      	adds	r7, #12
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	20001154 	.word	0x20001154
 800ac24:	200011bc 	.word	0x200011bc

0800ac28 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac28:	b480      	push	{r7}
 800ac2a:	b083      	sub	sp, #12
 800ac2c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac2e:	4b0b      	ldr	r3, [pc, #44]	; (800ac5c <xTaskGetSchedulerState+0x34>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d102      	bne.n	800ac3c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac36:	2301      	movs	r3, #1
 800ac38:	607b      	str	r3, [r7, #4]
 800ac3a:	e008      	b.n	800ac4e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac3c:	4b08      	ldr	r3, [pc, #32]	; (800ac60 <xTaskGetSchedulerState+0x38>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d102      	bne.n	800ac4a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac44:	2302      	movs	r3, #2
 800ac46:	607b      	str	r3, [r7, #4]
 800ac48:	e001      	b.n	800ac4e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac4e:	687b      	ldr	r3, [r7, #4]
	}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	200011a8 	.word	0x200011a8
 800ac60:	200011c4 	.word	0x200011c4

0800ac64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b086      	sub	sp, #24
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ac70:	2300      	movs	r3, #0
 800ac72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d056      	beq.n	800ad28 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ac7a:	4b2e      	ldr	r3, [pc, #184]	; (800ad34 <xTaskPriorityDisinherit+0xd0>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d00a      	beq.n	800ac9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	60fb      	str	r3, [r7, #12]
}
 800ac96:	bf00      	nop
 800ac98:	e7fe      	b.n	800ac98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac9a:	693b      	ldr	r3, [r7, #16]
 800ac9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10a      	bne.n	800acb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	60bb      	str	r3, [r7, #8]
}
 800acb4:	bf00      	nop
 800acb6:	e7fe      	b.n	800acb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acbc:	1e5a      	subs	r2, r3, #1
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acca:	429a      	cmp	r2, r3
 800accc:	d02c      	beq.n	800ad28 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d128      	bne.n	800ad28 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	3304      	adds	r3, #4
 800acda:	4618      	mov	r0, r3
 800acdc:	f7fe fc46 	bl	800956c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800acf4:	693b      	ldr	r3, [r7, #16]
 800acf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf8:	4b0f      	ldr	r3, [pc, #60]	; (800ad38 <xTaskPriorityDisinherit+0xd4>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d903      	bls.n	800ad08 <xTaskPriorityDisinherit+0xa4>
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad04:	4a0c      	ldr	r2, [pc, #48]	; (800ad38 <xTaskPriorityDisinherit+0xd4>)
 800ad06:	6013      	str	r3, [r2, #0]
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	009b      	lsls	r3, r3, #2
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	4a09      	ldr	r2, [pc, #36]	; (800ad3c <xTaskPriorityDisinherit+0xd8>)
 800ad16:	441a      	add	r2, r3
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4610      	mov	r0, r2
 800ad20:	f7fe fbc7 	bl	80094b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ad24:	2301      	movs	r3, #1
 800ad26:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad28:	697b      	ldr	r3, [r7, #20]
	}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000cc8 	.word	0x20000cc8
 800ad38:	200011a4 	.word	0x200011a4
 800ad3c:	20000ccc 	.word	0x20000ccc

0800ad40 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad4a:	4b21      	ldr	r3, [pc, #132]	; (800add0 <prvAddCurrentTaskToDelayedList+0x90>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad50:	4b20      	ldr	r3, [pc, #128]	; (800add4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	3304      	adds	r3, #4
 800ad56:	4618      	mov	r0, r3
 800ad58:	f7fe fc08 	bl	800956c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad62:	d10a      	bne.n	800ad7a <prvAddCurrentTaskToDelayedList+0x3a>
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d007      	beq.n	800ad7a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad6a:	4b1a      	ldr	r3, [pc, #104]	; (800add4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3304      	adds	r3, #4
 800ad70:	4619      	mov	r1, r3
 800ad72:	4819      	ldr	r0, [pc, #100]	; (800add8 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad74:	f7fe fb9d 	bl	80094b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad78:	e026      	b.n	800adc8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad7a:	68fa      	ldr	r2, [r7, #12]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4413      	add	r3, r2
 800ad80:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad82:	4b14      	ldr	r3, [pc, #80]	; (800add4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad8a:	68ba      	ldr	r2, [r7, #8]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d209      	bcs.n	800ada6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad92:	4b12      	ldr	r3, [pc, #72]	; (800addc <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	4b0f      	ldr	r3, [pc, #60]	; (800add4 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	3304      	adds	r3, #4
 800ad9c:	4619      	mov	r1, r3
 800ad9e:	4610      	mov	r0, r2
 800ada0:	f7fe fbab 	bl	80094fa <vListInsert>
}
 800ada4:	e010      	b.n	800adc8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ada6:	4b0e      	ldr	r3, [pc, #56]	; (800ade0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ada8:	681a      	ldr	r2, [r3, #0]
 800adaa:	4b0a      	ldr	r3, [pc, #40]	; (800add4 <prvAddCurrentTaskToDelayedList+0x94>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3304      	adds	r3, #4
 800adb0:	4619      	mov	r1, r3
 800adb2:	4610      	mov	r0, r2
 800adb4:	f7fe fba1 	bl	80094fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d202      	bcs.n	800adc8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800adc2:	4a08      	ldr	r2, [pc, #32]	; (800ade4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	6013      	str	r3, [r2, #0]
}
 800adc8:	bf00      	nop
 800adca:	3710      	adds	r7, #16
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	200011a0 	.word	0x200011a0
 800add4:	20000cc8 	.word	0x20000cc8
 800add8:	20001188 	.word	0x20001188
 800addc:	20001158 	.word	0x20001158
 800ade0:	20001154 	.word	0x20001154
 800ade4:	200011bc 	.word	0x200011bc

0800ade8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	; 0x28
 800adec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800adee:	2300      	movs	r3, #0
 800adf0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800adf2:	f000 fb07 	bl	800b404 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800adf6:	4b1c      	ldr	r3, [pc, #112]	; (800ae68 <xTimerCreateTimerTask+0x80>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d021      	beq.n	800ae42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adfe:	2300      	movs	r3, #0
 800ae00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae02:	2300      	movs	r3, #0
 800ae04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae06:	1d3a      	adds	r2, r7, #4
 800ae08:	f107 0108 	add.w	r1, r7, #8
 800ae0c:	f107 030c 	add.w	r3, r7, #12
 800ae10:	4618      	mov	r0, r3
 800ae12:	f7fe fb07 	bl	8009424 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae16:	6879      	ldr	r1, [r7, #4]
 800ae18:	68bb      	ldr	r3, [r7, #8]
 800ae1a:	68fa      	ldr	r2, [r7, #12]
 800ae1c:	9202      	str	r2, [sp, #8]
 800ae1e:	9301      	str	r3, [sp, #4]
 800ae20:	2302      	movs	r3, #2
 800ae22:	9300      	str	r3, [sp, #0]
 800ae24:	2300      	movs	r3, #0
 800ae26:	460a      	mov	r2, r1
 800ae28:	4910      	ldr	r1, [pc, #64]	; (800ae6c <xTimerCreateTimerTask+0x84>)
 800ae2a:	4811      	ldr	r0, [pc, #68]	; (800ae70 <xTimerCreateTimerTask+0x88>)
 800ae2c:	f7ff f8b4 	bl	8009f98 <xTaskCreateStatic>
 800ae30:	4603      	mov	r3, r0
 800ae32:	4a10      	ldr	r2, [pc, #64]	; (800ae74 <xTimerCreateTimerTask+0x8c>)
 800ae34:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae36:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <xTimerCreateTimerTask+0x8c>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d10a      	bne.n	800ae5e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ae48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4c:	f383 8811 	msr	BASEPRI, r3
 800ae50:	f3bf 8f6f 	isb	sy
 800ae54:	f3bf 8f4f 	dsb	sy
 800ae58:	613b      	str	r3, [r7, #16]
}
 800ae5a:	bf00      	nop
 800ae5c:	e7fe      	b.n	800ae5c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae5e:	697b      	ldr	r3, [r7, #20]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3718      	adds	r7, #24
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	200011f8 	.word	0x200011f8
 800ae6c:	0800c88c 	.word	0x0800c88c
 800ae70:	0800afad 	.word	0x0800afad
 800ae74:	200011fc 	.word	0x200011fc

0800ae78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b08a      	sub	sp, #40	; 0x28
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
 800ae84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae86:	2300      	movs	r3, #0
 800ae88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d10a      	bne.n	800aea6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ae90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae94:	f383 8811 	msr	BASEPRI, r3
 800ae98:	f3bf 8f6f 	isb	sy
 800ae9c:	f3bf 8f4f 	dsb	sy
 800aea0:	623b      	str	r3, [r7, #32]
}
 800aea2:	bf00      	nop
 800aea4:	e7fe      	b.n	800aea4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aea6:	4b1a      	ldr	r3, [pc, #104]	; (800af10 <xTimerGenericCommand+0x98>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d02a      	beq.n	800af04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b05      	cmp	r3, #5
 800aebe:	dc18      	bgt.n	800aef2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aec0:	f7ff feb2 	bl	800ac28 <xTaskGetSchedulerState>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d109      	bne.n	800aede <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aeca:	4b11      	ldr	r3, [pc, #68]	; (800af10 <xTimerGenericCommand+0x98>)
 800aecc:	6818      	ldr	r0, [r3, #0]
 800aece:	f107 0110 	add.w	r1, r7, #16
 800aed2:	2300      	movs	r3, #0
 800aed4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aed6:	f7fe fc77 	bl	80097c8 <xQueueGenericSend>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24
 800aedc:	e012      	b.n	800af04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800aede:	4b0c      	ldr	r3, [pc, #48]	; (800af10 <xTimerGenericCommand+0x98>)
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	f107 0110 	add.w	r1, r7, #16
 800aee6:	2300      	movs	r3, #0
 800aee8:	2200      	movs	r2, #0
 800aeea:	f7fe fc6d 	bl	80097c8 <xQueueGenericSend>
 800aeee:	6278      	str	r0, [r7, #36]	; 0x24
 800aef0:	e008      	b.n	800af04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aef2:	4b07      	ldr	r3, [pc, #28]	; (800af10 <xTimerGenericCommand+0x98>)
 800aef4:	6818      	ldr	r0, [r3, #0]
 800aef6:	f107 0110 	add.w	r1, r7, #16
 800aefa:	2300      	movs	r3, #0
 800aefc:	683a      	ldr	r2, [r7, #0]
 800aefe:	f7fe fd61 	bl	80099c4 <xQueueGenericSendFromISR>
 800af02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af06:	4618      	mov	r0, r3
 800af08:	3728      	adds	r7, #40	; 0x28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	200011f8 	.word	0x200011f8

0800af14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af02      	add	r7, sp, #8
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af1e:	4b22      	ldr	r3, [pc, #136]	; (800afa8 <prvProcessExpiredTimer+0x94>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	68db      	ldr	r3, [r3, #12]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	3304      	adds	r3, #4
 800af2c:	4618      	mov	r0, r3
 800af2e:	f7fe fb1d 	bl	800956c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af38:	f003 0304 	and.w	r3, r3, #4
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d022      	beq.n	800af86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	699a      	ldr	r2, [r3, #24]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	18d1      	adds	r1, r2, r3
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	6978      	ldr	r0, [r7, #20]
 800af4e:	f000 f8d1 	bl	800b0f4 <prvInsertTimerInActiveList>
 800af52:	4603      	mov	r3, r0
 800af54:	2b00      	cmp	r3, #0
 800af56:	d01f      	beq.n	800af98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af58:	2300      	movs	r3, #0
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	2300      	movs	r3, #0
 800af5e:	687a      	ldr	r2, [r7, #4]
 800af60:	2100      	movs	r1, #0
 800af62:	6978      	ldr	r0, [r7, #20]
 800af64:	f7ff ff88 	bl	800ae78 <xTimerGenericCommand>
 800af68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af6a:	693b      	ldr	r3, [r7, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d113      	bne.n	800af98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800af70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af74:	f383 8811 	msr	BASEPRI, r3
 800af78:	f3bf 8f6f 	isb	sy
 800af7c:	f3bf 8f4f 	dsb	sy
 800af80:	60fb      	str	r3, [r7, #12]
}
 800af82:	bf00      	nop
 800af84:	e7fe      	b.n	800af84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800af8c:	f023 0301 	bic.w	r3, r3, #1
 800af90:	b2da      	uxtb	r2, r3
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	6a1b      	ldr	r3, [r3, #32]
 800af9c:	6978      	ldr	r0, [r7, #20]
 800af9e:	4798      	blx	r3
}
 800afa0:	bf00      	nop
 800afa2:	3718      	adds	r7, #24
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}
 800afa8:	200011f0 	.word	0x200011f0

0800afac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afb4:	f107 0308 	add.w	r3, r7, #8
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 f857 	bl	800b06c <prvGetNextExpireTime>
 800afbe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	4619      	mov	r1, r3
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f803 	bl	800afd0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800afca:	f000 f8d5 	bl	800b178 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afce:	e7f1      	b.n	800afb4 <prvTimerTask+0x8>

0800afd0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b084      	sub	sp, #16
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
 800afd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800afda:	f7ff fa39 	bl	800a450 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	4618      	mov	r0, r3
 800afe4:	f000 f866 	bl	800b0b4 <prvSampleTimeNow>
 800afe8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d130      	bne.n	800b052 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10a      	bne.n	800b00c <prvProcessTimerOrBlockTask+0x3c>
 800aff6:	687a      	ldr	r2, [r7, #4]
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	429a      	cmp	r2, r3
 800affc:	d806      	bhi.n	800b00c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800affe:	f7ff fa35 	bl	800a46c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b002:	68f9      	ldr	r1, [r7, #12]
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ff85 	bl	800af14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b00a:	e024      	b.n	800b056 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d008      	beq.n	800b024 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b012:	4b13      	ldr	r3, [pc, #76]	; (800b060 <prvProcessTimerOrBlockTask+0x90>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d101      	bne.n	800b020 <prvProcessTimerOrBlockTask+0x50>
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <prvProcessTimerOrBlockTask+0x52>
 800b020:	2300      	movs	r3, #0
 800b022:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b024:	4b0f      	ldr	r3, [pc, #60]	; (800b064 <prvProcessTimerOrBlockTask+0x94>)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	687a      	ldr	r2, [r7, #4]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	4619      	mov	r1, r3
 800b032:	f7fe ff7d 	bl	8009f30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b036:	f7ff fa19 	bl	800a46c <xTaskResumeAll>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d10a      	bne.n	800b056 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <prvProcessTimerOrBlockTask+0x98>)
 800b042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b046:	601a      	str	r2, [r3, #0]
 800b048:	f3bf 8f4f 	dsb	sy
 800b04c:	f3bf 8f6f 	isb	sy
}
 800b050:	e001      	b.n	800b056 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b052:	f7ff fa0b 	bl	800a46c <xTaskResumeAll>
}
 800b056:	bf00      	nop
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}
 800b05e:	bf00      	nop
 800b060:	200011f4 	.word	0x200011f4
 800b064:	200011f8 	.word	0x200011f8
 800b068:	e000ed04 	.word	0xe000ed04

0800b06c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b06c:	b480      	push	{r7}
 800b06e:	b085      	sub	sp, #20
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b074:	4b0e      	ldr	r3, [pc, #56]	; (800b0b0 <prvGetNextExpireTime+0x44>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <prvGetNextExpireTime+0x16>
 800b07e:	2201      	movs	r2, #1
 800b080:	e000      	b.n	800b084 <prvGetNextExpireTime+0x18>
 800b082:	2200      	movs	r2, #0
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d105      	bne.n	800b09c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b090:	4b07      	ldr	r3, [pc, #28]	; (800b0b0 <prvGetNextExpireTime+0x44>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	60fb      	str	r3, [r7, #12]
 800b09a:	e001      	b.n	800b0a0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr
 800b0ae:	bf00      	nop
 800b0b0:	200011f0 	.word	0x200011f0

0800b0b4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0bc:	f7ff fa74 	bl	800a5a8 <xTaskGetTickCount>
 800b0c0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <prvSampleTimeNow+0x3c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	429a      	cmp	r2, r3
 800b0ca:	d205      	bcs.n	800b0d8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b0cc:	f000 f936 	bl	800b33c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2201      	movs	r2, #1
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	e002      	b.n	800b0de <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b0de:	4a04      	ldr	r2, [pc, #16]	; (800b0f0 <prvSampleTimeNow+0x3c>)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20001200 	.word	0x20001200

0800b0f4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b086      	sub	sp, #24
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	60f8      	str	r0, [r7, #12]
 800b0fc:	60b9      	str	r1, [r7, #8]
 800b0fe:	607a      	str	r2, [r7, #4]
 800b100:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b102:	2300      	movs	r3, #0
 800b104:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	429a      	cmp	r2, r3
 800b118:	d812      	bhi.n	800b140 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	1ad2      	subs	r2, r2, r3
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	699b      	ldr	r3, [r3, #24]
 800b124:	429a      	cmp	r2, r3
 800b126:	d302      	bcc.n	800b12e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b128:	2301      	movs	r3, #1
 800b12a:	617b      	str	r3, [r7, #20]
 800b12c:	e01b      	b.n	800b166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b12e:	4b10      	ldr	r3, [pc, #64]	; (800b170 <prvInsertTimerInActiveList+0x7c>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	3304      	adds	r3, #4
 800b136:	4619      	mov	r1, r3
 800b138:	4610      	mov	r0, r2
 800b13a:	f7fe f9de 	bl	80094fa <vListInsert>
 800b13e:	e012      	b.n	800b166 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b140:	687a      	ldr	r2, [r7, #4]
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	429a      	cmp	r2, r3
 800b146:	d206      	bcs.n	800b156 <prvInsertTimerInActiveList+0x62>
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d302      	bcc.n	800b156 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b150:	2301      	movs	r3, #1
 800b152:	617b      	str	r3, [r7, #20]
 800b154:	e007      	b.n	800b166 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b156:	4b07      	ldr	r3, [pc, #28]	; (800b174 <prvInsertTimerInActiveList+0x80>)
 800b158:	681a      	ldr	r2, [r3, #0]
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	3304      	adds	r3, #4
 800b15e:	4619      	mov	r1, r3
 800b160:	4610      	mov	r0, r2
 800b162:	f7fe f9ca 	bl	80094fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b166:	697b      	ldr	r3, [r7, #20]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3718      	adds	r7, #24
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	200011f4 	.word	0x200011f4
 800b174:	200011f0 	.word	0x200011f0

0800b178 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08e      	sub	sp, #56	; 0x38
 800b17c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b17e:	e0ca      	b.n	800b316 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2b00      	cmp	r3, #0
 800b184:	da18      	bge.n	800b1b8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b186:	1d3b      	adds	r3, r7, #4
 800b188:	3304      	adds	r3, #4
 800b18a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d10a      	bne.n	800b1a8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b196:	f383 8811 	msr	BASEPRI, r3
 800b19a:	f3bf 8f6f 	isb	sy
 800b19e:	f3bf 8f4f 	dsb	sy
 800b1a2:	61fb      	str	r3, [r7, #28]
}
 800b1a4:	bf00      	nop
 800b1a6:	e7fe      	b.n	800b1a6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1ae:	6850      	ldr	r0, [r2, #4]
 800b1b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1b2:	6892      	ldr	r2, [r2, #8]
 800b1b4:	4611      	mov	r1, r2
 800b1b6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f2c0 80aa 	blt.w	800b314 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fe f9cb 	bl	800956c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1d6:	463b      	mov	r3, r7
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff6b 	bl	800b0b4 <prvSampleTimeNow>
 800b1de:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	f200 8097 	bhi.w	800b316 <prvProcessReceivedCommands+0x19e>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <prvProcessReceivedCommands+0x78>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b219 	.word	0x0800b219
 800b1f4:	0800b219 	.word	0x0800b219
 800b1f8:	0800b219 	.word	0x0800b219
 800b1fc:	0800b28d 	.word	0x0800b28d
 800b200:	0800b2a1 	.word	0x0800b2a1
 800b204:	0800b2eb 	.word	0x0800b2eb
 800b208:	0800b219 	.word	0x0800b219
 800b20c:	0800b219 	.word	0x0800b219
 800b210:	0800b28d 	.word	0x0800b28d
 800b214:	0800b2a1 	.word	0x0800b2a1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b21a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b21e:	f043 0301 	orr.w	r3, r3, #1
 800b222:	b2da      	uxtb	r2, r3
 800b224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b22a:	68ba      	ldr	r2, [r7, #8]
 800b22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	18d1      	adds	r1, r2, r3
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b238:	f7ff ff5c 	bl	800b0f4 <prvInsertTimerInActiveList>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d069      	beq.n	800b316 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d05e      	beq.n	800b316 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	441a      	add	r2, r3
 800b260:	2300      	movs	r3, #0
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	2300      	movs	r3, #0
 800b266:	2100      	movs	r1, #0
 800b268:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b26a:	f7ff fe05 	bl	800ae78 <xTimerGenericCommand>
 800b26e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b270:	6a3b      	ldr	r3, [r7, #32]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d14f      	bne.n	800b316 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	61bb      	str	r3, [r7, #24]
}
 800b288:	bf00      	nop
 800b28a:	e7fe      	b.n	800b28a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b292:	f023 0301 	bic.w	r3, r3, #1
 800b296:	b2da      	uxtb	r2, r3
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b29e:	e03a      	b.n	800b316 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2a6:	f043 0301 	orr.w	r3, r3, #1
 800b2aa:	b2da      	uxtb	r2, r3
 800b2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2b2:	68ba      	ldr	r2, [r7, #8]
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d10a      	bne.n	800b2d6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c4:	f383 8811 	msr	BASEPRI, r3
 800b2c8:	f3bf 8f6f 	isb	sy
 800b2cc:	f3bf 8f4f 	dsb	sy
 800b2d0:	617b      	str	r3, [r7, #20]
}
 800b2d2:	bf00      	nop
 800b2d4:	e7fe      	b.n	800b2d4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	699a      	ldr	r2, [r3, #24]
 800b2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2dc:	18d1      	adds	r1, r2, r3
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e4:	f7ff ff06 	bl	800b0f4 <prvInsertTimerInActiveList>
					break;
 800b2e8:	e015      	b.n	800b316 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2f0:	f003 0302 	and.w	r3, r3, #2
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d103      	bne.n	800b300 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2fa:	f000 fbe1 	bl	800bac0 <vPortFree>
 800b2fe:	e00a      	b.n	800b316 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b302:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b306:	f023 0301 	bic.w	r3, r3, #1
 800b30a:	b2da      	uxtb	r2, r3
 800b30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b312:	e000      	b.n	800b316 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b314:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b316:	4b08      	ldr	r3, [pc, #32]	; (800b338 <prvProcessReceivedCommands+0x1c0>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	1d39      	adds	r1, r7, #4
 800b31c:	2200      	movs	r2, #0
 800b31e:	4618      	mov	r0, r3
 800b320:	f7fe fbec 	bl	8009afc <xQueueReceive>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	f47f af2a 	bne.w	800b180 <prvProcessReceivedCommands+0x8>
	}
}
 800b32c:	bf00      	nop
 800b32e:	bf00      	nop
 800b330:	3730      	adds	r7, #48	; 0x30
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	200011f8 	.word	0x200011f8

0800b33c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b088      	sub	sp, #32
 800b340:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b342:	e048      	b.n	800b3d6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b344:	4b2d      	ldr	r3, [pc, #180]	; (800b3fc <prvSwitchTimerLists+0xc0>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b34e:	4b2b      	ldr	r3, [pc, #172]	; (800b3fc <prvSwitchTimerLists+0xc0>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	3304      	adds	r3, #4
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7fe f905 	bl	800956c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6a1b      	ldr	r3, [r3, #32]
 800b366:	68f8      	ldr	r0, [r7, #12]
 800b368:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d02e      	beq.n	800b3d6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	693a      	ldr	r2, [r7, #16]
 800b37e:	4413      	add	r3, r2
 800b380:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	429a      	cmp	r2, r3
 800b388:	d90e      	bls.n	800b3a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	68ba      	ldr	r2, [r7, #8]
 800b38e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	68fa      	ldr	r2, [r7, #12]
 800b394:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b396:	4b19      	ldr	r3, [pc, #100]	; (800b3fc <prvSwitchTimerLists+0xc0>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fe f8aa 	bl	80094fa <vListInsert>
 800b3a6:	e016      	b.n	800b3d6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	9300      	str	r3, [sp, #0]
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	2100      	movs	r1, #0
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7ff fd60 	bl	800ae78 <xTimerGenericCommand>
 800b3b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d10a      	bne.n	800b3d6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	603b      	str	r3, [r7, #0]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3d6:	4b09      	ldr	r3, [pc, #36]	; (800b3fc <prvSwitchTimerLists+0xc0>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1b1      	bne.n	800b344 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <prvSwitchTimerLists+0xc0>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <prvSwitchTimerLists+0xc4>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a04      	ldr	r2, [pc, #16]	; (800b3fc <prvSwitchTimerLists+0xc0>)
 800b3ec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3ee:	4a04      	ldr	r2, [pc, #16]	; (800b400 <prvSwitchTimerLists+0xc4>)
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	6013      	str	r3, [r2, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	3718      	adds	r7, #24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}
 800b3fc:	200011f0 	.word	0x200011f0
 800b400:	200011f4 	.word	0x200011f4

0800b404 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b40a:	f000 f96b 	bl	800b6e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b40e:	4b15      	ldr	r3, [pc, #84]	; (800b464 <prvCheckForValidListAndQueue+0x60>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d120      	bne.n	800b458 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b416:	4814      	ldr	r0, [pc, #80]	; (800b468 <prvCheckForValidListAndQueue+0x64>)
 800b418:	f7fe f81e 	bl	8009458 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b41c:	4813      	ldr	r0, [pc, #76]	; (800b46c <prvCheckForValidListAndQueue+0x68>)
 800b41e:	f7fe f81b 	bl	8009458 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b422:	4b13      	ldr	r3, [pc, #76]	; (800b470 <prvCheckForValidListAndQueue+0x6c>)
 800b424:	4a10      	ldr	r2, [pc, #64]	; (800b468 <prvCheckForValidListAndQueue+0x64>)
 800b426:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b428:	4b12      	ldr	r3, [pc, #72]	; (800b474 <prvCheckForValidListAndQueue+0x70>)
 800b42a:	4a10      	ldr	r2, [pc, #64]	; (800b46c <prvCheckForValidListAndQueue+0x68>)
 800b42c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b42e:	2300      	movs	r3, #0
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	4b11      	ldr	r3, [pc, #68]	; (800b478 <prvCheckForValidListAndQueue+0x74>)
 800b434:	4a11      	ldr	r2, [pc, #68]	; (800b47c <prvCheckForValidListAndQueue+0x78>)
 800b436:	2110      	movs	r1, #16
 800b438:	200a      	movs	r0, #10
 800b43a:	f7fe f929 	bl	8009690 <xQueueGenericCreateStatic>
 800b43e:	4603      	mov	r3, r0
 800b440:	4a08      	ldr	r2, [pc, #32]	; (800b464 <prvCheckForValidListAndQueue+0x60>)
 800b442:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b444:	4b07      	ldr	r3, [pc, #28]	; (800b464 <prvCheckForValidListAndQueue+0x60>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d005      	beq.n	800b458 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b44c:	4b05      	ldr	r3, [pc, #20]	; (800b464 <prvCheckForValidListAndQueue+0x60>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	490b      	ldr	r1, [pc, #44]	; (800b480 <prvCheckForValidListAndQueue+0x7c>)
 800b452:	4618      	mov	r0, r3
 800b454:	f7fe fd42 	bl	8009edc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b458:	f000 f974 	bl	800b744 <vPortExitCritical>
}
 800b45c:	bf00      	nop
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200011f8 	.word	0x200011f8
 800b468:	200011c8 	.word	0x200011c8
 800b46c:	200011dc 	.word	0x200011dc
 800b470:	200011f0 	.word	0x200011f0
 800b474:	200011f4 	.word	0x200011f4
 800b478:	200012a4 	.word	0x200012a4
 800b47c:	20001204 	.word	0x20001204
 800b480:	0800c894 	.word	0x0800c894

0800b484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b484:	b480      	push	{r7}
 800b486:	b085      	sub	sp, #20
 800b488:	af00      	add	r7, sp, #0
 800b48a:	60f8      	str	r0, [r7, #12]
 800b48c:	60b9      	str	r1, [r7, #8]
 800b48e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	3b04      	subs	r3, #4
 800b494:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b49c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	3b04      	subs	r3, #4
 800b4a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	f023 0201 	bic.w	r2, r3, #1
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	3b04      	subs	r3, #4
 800b4b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4b4:	4a0c      	ldr	r2, [pc, #48]	; (800b4e8 <pxPortInitialiseStack+0x64>)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b14      	subs	r3, #20
 800b4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b04      	subs	r3, #4
 800b4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f06f 0202 	mvn.w	r2, #2
 800b4d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3b20      	subs	r3, #32
 800b4d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4da:	68fb      	ldr	r3, [r7, #12]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3714      	adds	r7, #20
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	0800b4ed 	.word	0x0800b4ed

0800b4ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b085      	sub	sp, #20
 800b4f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4f6:	4b12      	ldr	r3, [pc, #72]	; (800b540 <prvTaskExitError+0x54>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4fe:	d00a      	beq.n	800b516 <prvTaskExitError+0x2a>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	e7fe      	b.n	800b514 <prvTaskExitError+0x28>
	__asm volatile
 800b516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51a:	f383 8811 	msr	BASEPRI, r3
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f3bf 8f4f 	dsb	sy
 800b526:	60bb      	str	r3, [r7, #8]
}
 800b528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b52a:	bf00      	nop
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0fc      	beq.n	800b52c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b532:	bf00      	nop
 800b534:	bf00      	nop
 800b536:	3714      	adds	r7, #20
 800b538:	46bd      	mov	sp, r7
 800b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53e:	4770      	bx	lr
 800b540:	20000028 	.word	0x20000028
	...

0800b550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b550:	4b07      	ldr	r3, [pc, #28]	; (800b570 <pxCurrentTCBConst2>)
 800b552:	6819      	ldr	r1, [r3, #0]
 800b554:	6808      	ldr	r0, [r1, #0]
 800b556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55a:	f380 8809 	msr	PSP, r0
 800b55e:	f3bf 8f6f 	isb	sy
 800b562:	f04f 0000 	mov.w	r0, #0
 800b566:	f380 8811 	msr	BASEPRI, r0
 800b56a:	4770      	bx	lr
 800b56c:	f3af 8000 	nop.w

0800b570 <pxCurrentTCBConst2>:
 800b570:	20000cc8 	.word	0x20000cc8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b574:	bf00      	nop
 800b576:	bf00      	nop

0800b578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b578:	4808      	ldr	r0, [pc, #32]	; (800b59c <prvPortStartFirstTask+0x24>)
 800b57a:	6800      	ldr	r0, [r0, #0]
 800b57c:	6800      	ldr	r0, [r0, #0]
 800b57e:	f380 8808 	msr	MSP, r0
 800b582:	f04f 0000 	mov.w	r0, #0
 800b586:	f380 8814 	msr	CONTROL, r0
 800b58a:	b662      	cpsie	i
 800b58c:	b661      	cpsie	f
 800b58e:	f3bf 8f4f 	dsb	sy
 800b592:	f3bf 8f6f 	isb	sy
 800b596:	df00      	svc	0
 800b598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b59a:	bf00      	nop
 800b59c:	e000ed08 	.word	0xe000ed08

0800b5a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b5a6:	4b46      	ldr	r3, [pc, #280]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	4a46      	ldr	r2, [pc, #280]	; (800b6c4 <xPortStartScheduler+0x124>)
 800b5ac:	4293      	cmp	r3, r2
 800b5ae:	d10a      	bne.n	800b5c6 <xPortStartScheduler+0x26>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	613b      	str	r3, [r7, #16]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b5c6:	4b3e      	ldr	r3, [pc, #248]	; (800b6c0 <xPortStartScheduler+0x120>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a3f      	ldr	r2, [pc, #252]	; (800b6c8 <xPortStartScheduler+0x128>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d10a      	bne.n	800b5e6 <xPortStartScheduler+0x46>
	__asm volatile
 800b5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	60fb      	str	r3, [r7, #12]
}
 800b5e2:	bf00      	nop
 800b5e4:	e7fe      	b.n	800b5e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5e6:	4b39      	ldr	r3, [pc, #228]	; (800b6cc <xPortStartScheduler+0x12c>)
 800b5e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	781b      	ldrb	r3, [r3, #0]
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5f2:	697b      	ldr	r3, [r7, #20]
 800b5f4:	22ff      	movs	r2, #255	; 0xff
 800b5f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	b2db      	uxtb	r3, r3
 800b604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	4b31      	ldr	r3, [pc, #196]	; (800b6d0 <xPortStartScheduler+0x130>)
 800b60c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b60e:	4b31      	ldr	r3, [pc, #196]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b610:	2207      	movs	r2, #7
 800b612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b614:	e009      	b.n	800b62a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b616:	4b2f      	ldr	r3, [pc, #188]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	3b01      	subs	r3, #1
 800b61c:	4a2d      	ldr	r2, [pc, #180]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b61e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	b2db      	uxtb	r3, r3
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	b2db      	uxtb	r3, r3
 800b628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b62a:	78fb      	ldrb	r3, [r7, #3]
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b632:	2b80      	cmp	r3, #128	; 0x80
 800b634:	d0ef      	beq.n	800b616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b636:	4b27      	ldr	r3, [pc, #156]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f1c3 0307 	rsb	r3, r3, #7
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d00a      	beq.n	800b658 <xPortStartScheduler+0xb8>
	__asm volatile
 800b642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b646:	f383 8811 	msr	BASEPRI, r3
 800b64a:	f3bf 8f6f 	isb	sy
 800b64e:	f3bf 8f4f 	dsb	sy
 800b652:	60bb      	str	r3, [r7, #8]
}
 800b654:	bf00      	nop
 800b656:	e7fe      	b.n	800b656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b658:	4b1e      	ldr	r3, [pc, #120]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	021b      	lsls	r3, r3, #8
 800b65e:	4a1d      	ldr	r2, [pc, #116]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b662:	4b1c      	ldr	r3, [pc, #112]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b66a:	4a1a      	ldr	r2, [pc, #104]	; (800b6d4 <xPortStartScheduler+0x134>)
 800b66c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	b2da      	uxtb	r2, r3
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a17      	ldr	r2, [pc, #92]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b67c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b682:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4a14      	ldr	r2, [pc, #80]	; (800b6d8 <xPortStartScheduler+0x138>)
 800b688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b68c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b68e:	f000 f8dd 	bl	800b84c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <xPortStartScheduler+0x13c>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b698:	f000 f8fc 	bl	800b894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b69c:	4b10      	ldr	r3, [pc, #64]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	4a0f      	ldr	r2, [pc, #60]	; (800b6e0 <xPortStartScheduler+0x140>)
 800b6a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b6a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b6a8:	f7ff ff66 	bl	800b578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b6ac:	f7ff f846 	bl	800a73c <vTaskSwitchContext>
	prvTaskExitError();
 800b6b0:	f7ff ff1c 	bl	800b4ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b6b4:	2300      	movs	r3, #0
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3718      	adds	r7, #24
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	e000ed00 	.word	0xe000ed00
 800b6c4:	410fc271 	.word	0x410fc271
 800b6c8:	410fc270 	.word	0x410fc270
 800b6cc:	e000e400 	.word	0xe000e400
 800b6d0:	200012f4 	.word	0x200012f4
 800b6d4:	200012f8 	.word	0x200012f8
 800b6d8:	e000ed20 	.word	0xe000ed20
 800b6dc:	20000028 	.word	0x20000028
 800b6e0:	e000ef34 	.word	0xe000ef34

0800b6e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	607b      	str	r3, [r7, #4]
}
 800b6fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6fe:	4b0f      	ldr	r3, [pc, #60]	; (800b73c <vPortEnterCritical+0x58>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	3301      	adds	r3, #1
 800b704:	4a0d      	ldr	r2, [pc, #52]	; (800b73c <vPortEnterCritical+0x58>)
 800b706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b708:	4b0c      	ldr	r3, [pc, #48]	; (800b73c <vPortEnterCritical+0x58>)
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2b01      	cmp	r3, #1
 800b70e:	d10f      	bne.n	800b730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b710:	4b0b      	ldr	r3, [pc, #44]	; (800b740 <vPortEnterCritical+0x5c>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	b2db      	uxtb	r3, r3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d00a      	beq.n	800b730 <vPortEnterCritical+0x4c>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	603b      	str	r3, [r7, #0]
}
 800b72c:	bf00      	nop
 800b72e:	e7fe      	b.n	800b72e <vPortEnterCritical+0x4a>
	}
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr
 800b73c:	20000028 	.word	0x20000028
 800b740:	e000ed04 	.word	0xe000ed04

0800b744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <vPortExitCritical+0x50>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d10a      	bne.n	800b768 <vPortExitCritical+0x24>
	__asm volatile
 800b752:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b756:	f383 8811 	msr	BASEPRI, r3
 800b75a:	f3bf 8f6f 	isb	sy
 800b75e:	f3bf 8f4f 	dsb	sy
 800b762:	607b      	str	r3, [r7, #4]
}
 800b764:	bf00      	nop
 800b766:	e7fe      	b.n	800b766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <vPortExitCritical+0x50>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	4a09      	ldr	r2, [pc, #36]	; (800b794 <vPortExitCritical+0x50>)
 800b770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b772:	4b08      	ldr	r3, [pc, #32]	; (800b794 <vPortExitCritical+0x50>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d105      	bne.n	800b786 <vPortExitCritical+0x42>
 800b77a:	2300      	movs	r3, #0
 800b77c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	f383 8811 	msr	BASEPRI, r3
}
 800b784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b786:	bf00      	nop
 800b788:	370c      	adds	r7, #12
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	20000028 	.word	0x20000028
	...

0800b7a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b7a0:	f3ef 8009 	mrs	r0, PSP
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	4b15      	ldr	r3, [pc, #84]	; (800b800 <pxCurrentTCBConst>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	f01e 0f10 	tst.w	lr, #16
 800b7b0:	bf08      	it	eq
 800b7b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b7b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	6010      	str	r0, [r2, #0]
 800b7bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b7c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b7c4:	f380 8811 	msr	BASEPRI, r0
 800b7c8:	f3bf 8f4f 	dsb	sy
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f7fe ffb4 	bl	800a73c <vTaskSwitchContext>
 800b7d4:	f04f 0000 	mov.w	r0, #0
 800b7d8:	f380 8811 	msr	BASEPRI, r0
 800b7dc:	bc09      	pop	{r0, r3}
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	6808      	ldr	r0, [r1, #0]
 800b7e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e6:	f01e 0f10 	tst.w	lr, #16
 800b7ea:	bf08      	it	eq
 800b7ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7f0:	f380 8809 	msr	PSP, r0
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	4770      	bx	lr
 800b7fa:	bf00      	nop
 800b7fc:	f3af 8000 	nop.w

0800b800 <pxCurrentTCBConst>:
 800b800:	20000cc8 	.word	0x20000cc8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b804:	bf00      	nop
 800b806:	bf00      	nop

0800b808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b082      	sub	sp, #8
 800b80c:	af00      	add	r7, sp, #0
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	607b      	str	r3, [r7, #4]
}
 800b820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b822:	f7fe fed1 	bl	800a5c8 <xTaskIncrementTick>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d003      	beq.n	800b834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b82c:	4b06      	ldr	r3, [pc, #24]	; (800b848 <xPortSysTickHandler+0x40>)
 800b82e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b832:	601a      	str	r2, [r3, #0]
 800b834:	2300      	movs	r3, #0
 800b836:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	f383 8811 	msr	BASEPRI, r3
}
 800b83e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b84c:	b480      	push	{r7}
 800b84e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b850:	4b0b      	ldr	r3, [pc, #44]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b856:	4b0b      	ldr	r3, [pc, #44]	; (800b884 <vPortSetupTimerInterrupt+0x38>)
 800b858:	2200      	movs	r2, #0
 800b85a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b85c:	4b0a      	ldr	r3, [pc, #40]	; (800b888 <vPortSetupTimerInterrupt+0x3c>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <vPortSetupTimerInterrupt+0x40>)
 800b862:	fba2 2303 	umull	r2, r3, r2, r3
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	4a09      	ldr	r2, [pc, #36]	; (800b890 <vPortSetupTimerInterrupt+0x44>)
 800b86a:	3b01      	subs	r3, #1
 800b86c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b86e:	4b04      	ldr	r3, [pc, #16]	; (800b880 <vPortSetupTimerInterrupt+0x34>)
 800b870:	2207      	movs	r2, #7
 800b872:	601a      	str	r2, [r3, #0]
}
 800b874:	bf00      	nop
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	e000e010 	.word	0xe000e010
 800b884:	e000e018 	.word	0xe000e018
 800b888:	20000000 	.word	0x20000000
 800b88c:	10624dd3 	.word	0x10624dd3
 800b890:	e000e014 	.word	0xe000e014

0800b894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b8a4 <vPortEnableVFP+0x10>
 800b898:	6801      	ldr	r1, [r0, #0]
 800b89a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b89e:	6001      	str	r1, [r0, #0]
 800b8a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b8a2:	bf00      	nop
 800b8a4:	e000ed88 	.word	0xe000ed88

0800b8a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b8a8:	b480      	push	{r7}
 800b8aa:	b085      	sub	sp, #20
 800b8ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b8ae:	f3ef 8305 	mrs	r3, IPSR
 800b8b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b0f      	cmp	r3, #15
 800b8b8:	d914      	bls.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b8ba:	4a17      	ldr	r2, [pc, #92]	; (800b918 <vPortValidateInterruptPriority+0x70>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	4413      	add	r3, r2
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b8c4:	4b15      	ldr	r3, [pc, #84]	; (800b91c <vPortValidateInterruptPriority+0x74>)
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	7afa      	ldrb	r2, [r7, #11]
 800b8ca:	429a      	cmp	r2, r3
 800b8cc:	d20a      	bcs.n	800b8e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b8ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	607b      	str	r3, [r7, #4]
}
 800b8e0:	bf00      	nop
 800b8e2:	e7fe      	b.n	800b8e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <vPortValidateInterruptPriority+0x78>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8ec:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <vPortValidateInterruptPriority+0x7c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d90a      	bls.n	800b90a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	603b      	str	r3, [r7, #0]
}
 800b906:	bf00      	nop
 800b908:	e7fe      	b.n	800b908 <vPortValidateInterruptPriority+0x60>
	}
 800b90a:	bf00      	nop
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	e000e3f0 	.word	0xe000e3f0
 800b91c:	200012f4 	.word	0x200012f4
 800b920:	e000ed0c 	.word	0xe000ed0c
 800b924:	200012f8 	.word	0x200012f8

0800b928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b08a      	sub	sp, #40	; 0x28
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b934:	f7fe fd8c 	bl	800a450 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b938:	4b5b      	ldr	r3, [pc, #364]	; (800baa8 <pvPortMalloc+0x180>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d101      	bne.n	800b944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b940:	f000 f920 	bl	800bb84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b944:	4b59      	ldr	r3, [pc, #356]	; (800baac <pvPortMalloc+0x184>)
 800b946:	681a      	ldr	r2, [r3, #0]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	4013      	ands	r3, r2
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f040 8093 	bne.w	800ba78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d01d      	beq.n	800b994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b958:	2208      	movs	r2, #8
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	4413      	add	r3, r2
 800b95e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f003 0307 	and.w	r3, r3, #7
 800b966:	2b00      	cmp	r3, #0
 800b968:	d014      	beq.n	800b994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f023 0307 	bic.w	r3, r3, #7
 800b970:	3308      	adds	r3, #8
 800b972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f003 0307 	and.w	r3, r3, #7
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <pvPortMalloc+0x6c>
	__asm volatile
 800b97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b982:	f383 8811 	msr	BASEPRI, r3
 800b986:	f3bf 8f6f 	isb	sy
 800b98a:	f3bf 8f4f 	dsb	sy
 800b98e:	617b      	str	r3, [r7, #20]
}
 800b990:	bf00      	nop
 800b992:	e7fe      	b.n	800b992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2b00      	cmp	r3, #0
 800b998:	d06e      	beq.n	800ba78 <pvPortMalloc+0x150>
 800b99a:	4b45      	ldr	r3, [pc, #276]	; (800bab0 <pvPortMalloc+0x188>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d869      	bhi.n	800ba78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9a4:	4b43      	ldr	r3, [pc, #268]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9a8:	4b42      	ldr	r3, [pc, #264]	; (800bab4 <pvPortMalloc+0x18c>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ae:	e004      	b.n	800b9ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9bc:	685b      	ldr	r3, [r3, #4]
 800b9be:	687a      	ldr	r2, [r7, #4]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <pvPortMalloc+0xa4>
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1f1      	bne.n	800b9b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9cc:	4b36      	ldr	r3, [pc, #216]	; (800baa8 <pvPortMalloc+0x180>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d050      	beq.n	800ba78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9d6:	6a3b      	ldr	r3, [r7, #32]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2208      	movs	r2, #8
 800b9dc:	4413      	add	r3, r2
 800b9de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	681a      	ldr	r2, [r3, #0]
 800b9e4:	6a3b      	ldr	r3, [r7, #32]
 800b9e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	2308      	movs	r3, #8
 800b9f2:	005b      	lsls	r3, r3, #1
 800b9f4:	429a      	cmp	r2, r3
 800b9f6:	d91f      	bls.n	800ba38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <pvPortMalloc+0xf8>
	__asm volatile
 800ba0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba0e:	f383 8811 	msr	BASEPRI, r3
 800ba12:	f3bf 8f6f 	isb	sy
 800ba16:	f3bf 8f4f 	dsb	sy
 800ba1a:	613b      	str	r3, [r7, #16]
}
 800ba1c:	bf00      	nop
 800ba1e:	e7fe      	b.n	800ba1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	685a      	ldr	r2, [r3, #4]
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba32:	69b8      	ldr	r0, [r7, #24]
 800ba34:	f000 f908 	bl	800bc48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba38:	4b1d      	ldr	r3, [pc, #116]	; (800bab0 <pvPortMalloc+0x188>)
 800ba3a:	681a      	ldr	r2, [r3, #0]
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	685b      	ldr	r3, [r3, #4]
 800ba40:	1ad3      	subs	r3, r2, r3
 800ba42:	4a1b      	ldr	r2, [pc, #108]	; (800bab0 <pvPortMalloc+0x188>)
 800ba44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba46:	4b1a      	ldr	r3, [pc, #104]	; (800bab0 <pvPortMalloc+0x188>)
 800ba48:	681a      	ldr	r2, [r3, #0]
 800ba4a:	4b1b      	ldr	r3, [pc, #108]	; (800bab8 <pvPortMalloc+0x190>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	429a      	cmp	r2, r3
 800ba50:	d203      	bcs.n	800ba5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba52:	4b17      	ldr	r3, [pc, #92]	; (800bab0 <pvPortMalloc+0x188>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a18      	ldr	r2, [pc, #96]	; (800bab8 <pvPortMalloc+0x190>)
 800ba58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5c:	685a      	ldr	r2, [r3, #4]
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <pvPortMalloc+0x184>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	431a      	orrs	r2, r3
 800ba64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba6e:	4b13      	ldr	r3, [pc, #76]	; (800babc <pvPortMalloc+0x194>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a11      	ldr	r2, [pc, #68]	; (800babc <pvPortMalloc+0x194>)
 800ba76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba78:	f7fe fcf8 	bl	800a46c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba7c:	69fb      	ldr	r3, [r7, #28]
 800ba7e:	f003 0307 	and.w	r3, r3, #7
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00a      	beq.n	800ba9c <pvPortMalloc+0x174>
	__asm volatile
 800ba86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8a:	f383 8811 	msr	BASEPRI, r3
 800ba8e:	f3bf 8f6f 	isb	sy
 800ba92:	f3bf 8f4f 	dsb	sy
 800ba96:	60fb      	str	r3, [r7, #12]
}
 800ba98:	bf00      	nop
 800ba9a:	e7fe      	b.n	800ba9a <pvPortMalloc+0x172>
	return pvReturn;
 800ba9c:	69fb      	ldr	r3, [r7, #28]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3728      	adds	r7, #40	; 0x28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	20004f04 	.word	0x20004f04
 800baac:	20004f18 	.word	0x20004f18
 800bab0:	20004f08 	.word	0x20004f08
 800bab4:	20004efc 	.word	0x20004efc
 800bab8:	20004f0c 	.word	0x20004f0c
 800babc:	20004f10 	.word	0x20004f10

0800bac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d04d      	beq.n	800bb6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bad2:	2308      	movs	r3, #8
 800bad4:	425b      	negs	r3, r3
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	4413      	add	r3, r2
 800bada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800badc:	697b      	ldr	r3, [r7, #20]
 800bade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	685a      	ldr	r2, [r3, #4]
 800bae4:	4b24      	ldr	r3, [pc, #144]	; (800bb78 <vPortFree+0xb8>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	4013      	ands	r3, r2
 800baea:	2b00      	cmp	r3, #0
 800baec:	d10a      	bne.n	800bb04 <vPortFree+0x44>
	__asm volatile
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60fb      	str	r3, [r7, #12]
}
 800bb00:	bf00      	nop
 800bb02:	e7fe      	b.n	800bb02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00a      	beq.n	800bb22 <vPortFree+0x62>
	__asm volatile
 800bb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb10:	f383 8811 	msr	BASEPRI, r3
 800bb14:	f3bf 8f6f 	isb	sy
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	60bb      	str	r3, [r7, #8]
}
 800bb1e:	bf00      	nop
 800bb20:	e7fe      	b.n	800bb20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	685a      	ldr	r2, [r3, #4]
 800bb26:	4b14      	ldr	r3, [pc, #80]	; (800bb78 <vPortFree+0xb8>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d01e      	beq.n	800bb6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11a      	bne.n	800bb6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <vPortFree+0xb8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	43db      	mvns	r3, r3
 800bb42:	401a      	ands	r2, r3
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb48:	f7fe fc82 	bl	800a450 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	685a      	ldr	r2, [r3, #4]
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <vPortFree+0xbc>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4413      	add	r3, r2
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <vPortFree+0xbc>)
 800bb58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb5a:	6938      	ldr	r0, [r7, #16]
 800bb5c:	f000 f874 	bl	800bc48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb60:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <vPortFree+0xc0>)
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	3301      	adds	r3, #1
 800bb66:	4a06      	ldr	r2, [pc, #24]	; (800bb80 <vPortFree+0xc0>)
 800bb68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb6a:	f7fe fc7f 	bl	800a46c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb6e:	bf00      	nop
 800bb70:	3718      	adds	r7, #24
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}
 800bb76:	bf00      	nop
 800bb78:	20004f18 	.word	0x20004f18
 800bb7c:	20004f08 	.word	0x20004f08
 800bb80:	20004f14 	.word	0x20004f14

0800bb84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb90:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <prvHeapInit+0xac>)
 800bb92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f003 0307 	and.w	r3, r3, #7
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d00c      	beq.n	800bbb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	3307      	adds	r3, #7
 800bba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0307 	bic.w	r3, r3, #7
 800bbaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbac:	68ba      	ldr	r2, [r7, #8]
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	4a1f      	ldr	r2, [pc, #124]	; (800bc30 <prvHeapInit+0xac>)
 800bbb4:	4413      	add	r3, r2
 800bbb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbbc:	4a1d      	ldr	r2, [pc, #116]	; (800bc34 <prvHeapInit+0xb0>)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbc2:	4b1c      	ldr	r3, [pc, #112]	; (800bc34 <prvHeapInit+0xb0>)
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	68ba      	ldr	r2, [r7, #8]
 800bbcc:	4413      	add	r3, r2
 800bbce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbd0:	2208      	movs	r2, #8
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	1a9b      	subs	r3, r3, r2
 800bbd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	f023 0307 	bic.w	r3, r3, #7
 800bbde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	4a15      	ldr	r2, [pc, #84]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbe6:	4b14      	ldr	r3, [pc, #80]	; (800bc38 <prvHeapInit+0xb4>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	2200      	movs	r2, #0
 800bbec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbee:	4b12      	ldr	r3, [pc, #72]	; (800bc38 <prvHeapInit+0xb4>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	68fa      	ldr	r2, [r7, #12]
 800bbfe:	1ad2      	subs	r2, r2, r3
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc04:	4b0c      	ldr	r3, [pc, #48]	; (800bc38 <prvHeapInit+0xb4>)
 800bc06:	681a      	ldr	r2, [r3, #0]
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	685b      	ldr	r3, [r3, #4]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <prvHeapInit+0xb8>)
 800bc12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <prvHeapInit+0xbc>)
 800bc1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc1c:	4b09      	ldr	r3, [pc, #36]	; (800bc44 <prvHeapInit+0xc0>)
 800bc1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	3714      	adds	r7, #20
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr
 800bc30:	200012fc 	.word	0x200012fc
 800bc34:	20004efc 	.word	0x20004efc
 800bc38:	20004f04 	.word	0x20004f04
 800bc3c:	20004f0c 	.word	0x20004f0c
 800bc40:	20004f08 	.word	0x20004f08
 800bc44:	20004f18 	.word	0x20004f18

0800bc48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc50:	4b28      	ldr	r3, [pc, #160]	; (800bcf4 <prvInsertBlockIntoFreeList+0xac>)
 800bc52:	60fb      	str	r3, [r7, #12]
 800bc54:	e002      	b.n	800bc5c <prvInsertBlockIntoFreeList+0x14>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	687a      	ldr	r2, [r7, #4]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d8f7      	bhi.n	800bc56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	68ba      	ldr	r2, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d108      	bne.n	800bc8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	685a      	ldr	r2, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	441a      	add	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	68ba      	ldr	r2, [r7, #8]
 800bc94:	441a      	add	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d118      	bne.n	800bcd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	4b15      	ldr	r3, [pc, #84]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d00d      	beq.n	800bcc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	685a      	ldr	r2, [r3, #4]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	441a      	add	r2, r3
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	e008      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcc6:	4b0c      	ldr	r3, [pc, #48]	; (800bcf8 <prvInsertBlockIntoFreeList+0xb0>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	601a      	str	r2, [r3, #0]
 800bcce:	e003      	b.n	800bcd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	681a      	ldr	r2, [r3, #0]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d002      	beq.n	800bce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf0:	4770      	bx	lr
 800bcf2:	bf00      	nop
 800bcf4:	20004efc 	.word	0x20004efc
 800bcf8:	20004f04 	.word	0x20004f04

0800bcfc <calloc>:
 800bcfc:	4b02      	ldr	r3, [pc, #8]	; (800bd08 <calloc+0xc>)
 800bcfe:	460a      	mov	r2, r1
 800bd00:	4601      	mov	r1, r0
 800bd02:	6818      	ldr	r0, [r3, #0]
 800bd04:	f000 b84c 	b.w	800bda0 <_calloc_r>
 800bd08:	2000002c 	.word	0x2000002c

0800bd0c <__errno>:
 800bd0c:	4b01      	ldr	r3, [pc, #4]	; (800bd14 <__errno+0x8>)
 800bd0e:	6818      	ldr	r0, [r3, #0]
 800bd10:	4770      	bx	lr
 800bd12:	bf00      	nop
 800bd14:	2000002c 	.word	0x2000002c

0800bd18 <__libc_init_array>:
 800bd18:	b570      	push	{r4, r5, r6, lr}
 800bd1a:	4d0d      	ldr	r5, [pc, #52]	; (800bd50 <__libc_init_array+0x38>)
 800bd1c:	4c0d      	ldr	r4, [pc, #52]	; (800bd54 <__libc_init_array+0x3c>)
 800bd1e:	1b64      	subs	r4, r4, r5
 800bd20:	10a4      	asrs	r4, r4, #2
 800bd22:	2600      	movs	r6, #0
 800bd24:	42a6      	cmp	r6, r4
 800bd26:	d109      	bne.n	800bd3c <__libc_init_array+0x24>
 800bd28:	4d0b      	ldr	r5, [pc, #44]	; (800bd58 <__libc_init_array+0x40>)
 800bd2a:	4c0c      	ldr	r4, [pc, #48]	; (800bd5c <__libc_init_array+0x44>)
 800bd2c:	f000 fd16 	bl	800c75c <_init>
 800bd30:	1b64      	subs	r4, r4, r5
 800bd32:	10a4      	asrs	r4, r4, #2
 800bd34:	2600      	movs	r6, #0
 800bd36:	42a6      	cmp	r6, r4
 800bd38:	d105      	bne.n	800bd46 <__libc_init_array+0x2e>
 800bd3a:	bd70      	pop	{r4, r5, r6, pc}
 800bd3c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd40:	4798      	blx	r3
 800bd42:	3601      	adds	r6, #1
 800bd44:	e7ee      	b.n	800bd24 <__libc_init_array+0xc>
 800bd46:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd4a:	4798      	blx	r3
 800bd4c:	3601      	adds	r6, #1
 800bd4e:	e7f2      	b.n	800bd36 <__libc_init_array+0x1e>
 800bd50:	0802bc0c 	.word	0x0802bc0c
 800bd54:	0802bc0c 	.word	0x0802bc0c
 800bd58:	0802bc0c 	.word	0x0802bc0c
 800bd5c:	0802bc10 	.word	0x0802bc10

0800bd60 <__retarget_lock_acquire_recursive>:
 800bd60:	4770      	bx	lr

0800bd62 <__retarget_lock_release_recursive>:
 800bd62:	4770      	bx	lr

0800bd64 <free>:
 800bd64:	4b02      	ldr	r3, [pc, #8]	; (800bd70 <free+0xc>)
 800bd66:	4601      	mov	r1, r0
 800bd68:	6818      	ldr	r0, [r3, #0]
 800bd6a:	f000 b82f 	b.w	800bdcc <_free_r>
 800bd6e:	bf00      	nop
 800bd70:	2000002c 	.word	0x2000002c

0800bd74 <memcpy>:
 800bd74:	440a      	add	r2, r1
 800bd76:	4291      	cmp	r1, r2
 800bd78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800bd7c:	d100      	bne.n	800bd80 <memcpy+0xc>
 800bd7e:	4770      	bx	lr
 800bd80:	b510      	push	{r4, lr}
 800bd82:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd86:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd8a:	4291      	cmp	r1, r2
 800bd8c:	d1f9      	bne.n	800bd82 <memcpy+0xe>
 800bd8e:	bd10      	pop	{r4, pc}

0800bd90 <memset>:
 800bd90:	4402      	add	r2, r0
 800bd92:	4603      	mov	r3, r0
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d100      	bne.n	800bd9a <memset+0xa>
 800bd98:	4770      	bx	lr
 800bd9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd9e:	e7f9      	b.n	800bd94 <memset+0x4>

0800bda0 <_calloc_r>:
 800bda0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bda2:	fba1 2402 	umull	r2, r4, r1, r2
 800bda6:	b94c      	cbnz	r4, 800bdbc <_calloc_r+0x1c>
 800bda8:	4611      	mov	r1, r2
 800bdaa:	9201      	str	r2, [sp, #4]
 800bdac:	f000 f87a 	bl	800bea4 <_malloc_r>
 800bdb0:	9a01      	ldr	r2, [sp, #4]
 800bdb2:	4605      	mov	r5, r0
 800bdb4:	b930      	cbnz	r0, 800bdc4 <_calloc_r+0x24>
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	b003      	add	sp, #12
 800bdba:	bd30      	pop	{r4, r5, pc}
 800bdbc:	220c      	movs	r2, #12
 800bdbe:	6002      	str	r2, [r0, #0]
 800bdc0:	2500      	movs	r5, #0
 800bdc2:	e7f8      	b.n	800bdb6 <_calloc_r+0x16>
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ffe3 	bl	800bd90 <memset>
 800bdca:	e7f4      	b.n	800bdb6 <_calloc_r+0x16>

0800bdcc <_free_r>:
 800bdcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bdce:	2900      	cmp	r1, #0
 800bdd0:	d044      	beq.n	800be5c <_free_r+0x90>
 800bdd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdd6:	9001      	str	r0, [sp, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	f1a1 0404 	sub.w	r4, r1, #4
 800bdde:	bfb8      	it	lt
 800bde0:	18e4      	addlt	r4, r4, r3
 800bde2:	f000 f96d 	bl	800c0c0 <__malloc_lock>
 800bde6:	4a1e      	ldr	r2, [pc, #120]	; (800be60 <_free_r+0x94>)
 800bde8:	9801      	ldr	r0, [sp, #4]
 800bdea:	6813      	ldr	r3, [r2, #0]
 800bdec:	b933      	cbnz	r3, 800bdfc <_free_r+0x30>
 800bdee:	6063      	str	r3, [r4, #4]
 800bdf0:	6014      	str	r4, [r2, #0]
 800bdf2:	b003      	add	sp, #12
 800bdf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bdf8:	f000 b968 	b.w	800c0cc <__malloc_unlock>
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	d908      	bls.n	800be12 <_free_r+0x46>
 800be00:	6825      	ldr	r5, [r4, #0]
 800be02:	1961      	adds	r1, r4, r5
 800be04:	428b      	cmp	r3, r1
 800be06:	bf01      	itttt	eq
 800be08:	6819      	ldreq	r1, [r3, #0]
 800be0a:	685b      	ldreq	r3, [r3, #4]
 800be0c:	1949      	addeq	r1, r1, r5
 800be0e:	6021      	streq	r1, [r4, #0]
 800be10:	e7ed      	b.n	800bdee <_free_r+0x22>
 800be12:	461a      	mov	r2, r3
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	b10b      	cbz	r3, 800be1c <_free_r+0x50>
 800be18:	42a3      	cmp	r3, r4
 800be1a:	d9fa      	bls.n	800be12 <_free_r+0x46>
 800be1c:	6811      	ldr	r1, [r2, #0]
 800be1e:	1855      	adds	r5, r2, r1
 800be20:	42a5      	cmp	r5, r4
 800be22:	d10b      	bne.n	800be3c <_free_r+0x70>
 800be24:	6824      	ldr	r4, [r4, #0]
 800be26:	4421      	add	r1, r4
 800be28:	1854      	adds	r4, r2, r1
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	6011      	str	r1, [r2, #0]
 800be2e:	d1e0      	bne.n	800bdf2 <_free_r+0x26>
 800be30:	681c      	ldr	r4, [r3, #0]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	6053      	str	r3, [r2, #4]
 800be36:	4421      	add	r1, r4
 800be38:	6011      	str	r1, [r2, #0]
 800be3a:	e7da      	b.n	800bdf2 <_free_r+0x26>
 800be3c:	d902      	bls.n	800be44 <_free_r+0x78>
 800be3e:	230c      	movs	r3, #12
 800be40:	6003      	str	r3, [r0, #0]
 800be42:	e7d6      	b.n	800bdf2 <_free_r+0x26>
 800be44:	6825      	ldr	r5, [r4, #0]
 800be46:	1961      	adds	r1, r4, r5
 800be48:	428b      	cmp	r3, r1
 800be4a:	bf04      	itt	eq
 800be4c:	6819      	ldreq	r1, [r3, #0]
 800be4e:	685b      	ldreq	r3, [r3, #4]
 800be50:	6063      	str	r3, [r4, #4]
 800be52:	bf04      	itt	eq
 800be54:	1949      	addeq	r1, r1, r5
 800be56:	6021      	streq	r1, [r4, #0]
 800be58:	6054      	str	r4, [r2, #4]
 800be5a:	e7ca      	b.n	800bdf2 <_free_r+0x26>
 800be5c:	b003      	add	sp, #12
 800be5e:	bd30      	pop	{r4, r5, pc}
 800be60:	20004f20 	.word	0x20004f20

0800be64 <sbrk_aligned>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	4e0e      	ldr	r6, [pc, #56]	; (800bea0 <sbrk_aligned+0x3c>)
 800be68:	460c      	mov	r4, r1
 800be6a:	6831      	ldr	r1, [r6, #0]
 800be6c:	4605      	mov	r5, r0
 800be6e:	b911      	cbnz	r1, 800be76 <sbrk_aligned+0x12>
 800be70:	f000 f8f6 	bl	800c060 <_sbrk_r>
 800be74:	6030      	str	r0, [r6, #0]
 800be76:	4621      	mov	r1, r4
 800be78:	4628      	mov	r0, r5
 800be7a:	f000 f8f1 	bl	800c060 <_sbrk_r>
 800be7e:	1c43      	adds	r3, r0, #1
 800be80:	d00a      	beq.n	800be98 <sbrk_aligned+0x34>
 800be82:	1cc4      	adds	r4, r0, #3
 800be84:	f024 0403 	bic.w	r4, r4, #3
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d007      	beq.n	800be9c <sbrk_aligned+0x38>
 800be8c:	1a21      	subs	r1, r4, r0
 800be8e:	4628      	mov	r0, r5
 800be90:	f000 f8e6 	bl	800c060 <_sbrk_r>
 800be94:	3001      	adds	r0, #1
 800be96:	d101      	bne.n	800be9c <sbrk_aligned+0x38>
 800be98:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800be9c:	4620      	mov	r0, r4
 800be9e:	bd70      	pop	{r4, r5, r6, pc}
 800bea0:	20004f24 	.word	0x20004f24

0800bea4 <_malloc_r>:
 800bea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bea8:	1ccd      	adds	r5, r1, #3
 800beaa:	f025 0503 	bic.w	r5, r5, #3
 800beae:	3508      	adds	r5, #8
 800beb0:	2d0c      	cmp	r5, #12
 800beb2:	bf38      	it	cc
 800beb4:	250c      	movcc	r5, #12
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	4607      	mov	r7, r0
 800beba:	db01      	blt.n	800bec0 <_malloc_r+0x1c>
 800bebc:	42a9      	cmp	r1, r5
 800bebe:	d905      	bls.n	800becc <_malloc_r+0x28>
 800bec0:	230c      	movs	r3, #12
 800bec2:	603b      	str	r3, [r7, #0]
 800bec4:	2600      	movs	r6, #0
 800bec6:	4630      	mov	r0, r6
 800bec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800becc:	4e2e      	ldr	r6, [pc, #184]	; (800bf88 <_malloc_r+0xe4>)
 800bece:	f000 f8f7 	bl	800c0c0 <__malloc_lock>
 800bed2:	6833      	ldr	r3, [r6, #0]
 800bed4:	461c      	mov	r4, r3
 800bed6:	bb34      	cbnz	r4, 800bf26 <_malloc_r+0x82>
 800bed8:	4629      	mov	r1, r5
 800beda:	4638      	mov	r0, r7
 800bedc:	f7ff ffc2 	bl	800be64 <sbrk_aligned>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	4604      	mov	r4, r0
 800bee4:	d14d      	bne.n	800bf82 <_malloc_r+0xde>
 800bee6:	6834      	ldr	r4, [r6, #0]
 800bee8:	4626      	mov	r6, r4
 800beea:	2e00      	cmp	r6, #0
 800beec:	d140      	bne.n	800bf70 <_malloc_r+0xcc>
 800beee:	6823      	ldr	r3, [r4, #0]
 800bef0:	4631      	mov	r1, r6
 800bef2:	4638      	mov	r0, r7
 800bef4:	eb04 0803 	add.w	r8, r4, r3
 800bef8:	f000 f8b2 	bl	800c060 <_sbrk_r>
 800befc:	4580      	cmp	r8, r0
 800befe:	d13a      	bne.n	800bf76 <_malloc_r+0xd2>
 800bf00:	6821      	ldr	r1, [r4, #0]
 800bf02:	3503      	adds	r5, #3
 800bf04:	1a6d      	subs	r5, r5, r1
 800bf06:	f025 0503 	bic.w	r5, r5, #3
 800bf0a:	3508      	adds	r5, #8
 800bf0c:	2d0c      	cmp	r5, #12
 800bf0e:	bf38      	it	cc
 800bf10:	250c      	movcc	r5, #12
 800bf12:	4629      	mov	r1, r5
 800bf14:	4638      	mov	r0, r7
 800bf16:	f7ff ffa5 	bl	800be64 <sbrk_aligned>
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	d02b      	beq.n	800bf76 <_malloc_r+0xd2>
 800bf1e:	6823      	ldr	r3, [r4, #0]
 800bf20:	442b      	add	r3, r5
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	e00e      	b.n	800bf44 <_malloc_r+0xa0>
 800bf26:	6822      	ldr	r2, [r4, #0]
 800bf28:	1b52      	subs	r2, r2, r5
 800bf2a:	d41e      	bmi.n	800bf6a <_malloc_r+0xc6>
 800bf2c:	2a0b      	cmp	r2, #11
 800bf2e:	d916      	bls.n	800bf5e <_malloc_r+0xba>
 800bf30:	1961      	adds	r1, r4, r5
 800bf32:	42a3      	cmp	r3, r4
 800bf34:	6025      	str	r5, [r4, #0]
 800bf36:	bf18      	it	ne
 800bf38:	6059      	strne	r1, [r3, #4]
 800bf3a:	6863      	ldr	r3, [r4, #4]
 800bf3c:	bf08      	it	eq
 800bf3e:	6031      	streq	r1, [r6, #0]
 800bf40:	5162      	str	r2, [r4, r5]
 800bf42:	604b      	str	r3, [r1, #4]
 800bf44:	4638      	mov	r0, r7
 800bf46:	f104 060b 	add.w	r6, r4, #11
 800bf4a:	f000 f8bf 	bl	800c0cc <__malloc_unlock>
 800bf4e:	f026 0607 	bic.w	r6, r6, #7
 800bf52:	1d23      	adds	r3, r4, #4
 800bf54:	1af2      	subs	r2, r6, r3
 800bf56:	d0b6      	beq.n	800bec6 <_malloc_r+0x22>
 800bf58:	1b9b      	subs	r3, r3, r6
 800bf5a:	50a3      	str	r3, [r4, r2]
 800bf5c:	e7b3      	b.n	800bec6 <_malloc_r+0x22>
 800bf5e:	6862      	ldr	r2, [r4, #4]
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	bf0c      	ite	eq
 800bf64:	6032      	streq	r2, [r6, #0]
 800bf66:	605a      	strne	r2, [r3, #4]
 800bf68:	e7ec      	b.n	800bf44 <_malloc_r+0xa0>
 800bf6a:	4623      	mov	r3, r4
 800bf6c:	6864      	ldr	r4, [r4, #4]
 800bf6e:	e7b2      	b.n	800bed6 <_malloc_r+0x32>
 800bf70:	4634      	mov	r4, r6
 800bf72:	6876      	ldr	r6, [r6, #4]
 800bf74:	e7b9      	b.n	800beea <_malloc_r+0x46>
 800bf76:	230c      	movs	r3, #12
 800bf78:	603b      	str	r3, [r7, #0]
 800bf7a:	4638      	mov	r0, r7
 800bf7c:	f000 f8a6 	bl	800c0cc <__malloc_unlock>
 800bf80:	e7a1      	b.n	800bec6 <_malloc_r+0x22>
 800bf82:	6025      	str	r5, [r4, #0]
 800bf84:	e7de      	b.n	800bf44 <_malloc_r+0xa0>
 800bf86:	bf00      	nop
 800bf88:	20004f20 	.word	0x20004f20

0800bf8c <cleanup_glue>:
 800bf8c:	b538      	push	{r3, r4, r5, lr}
 800bf8e:	460c      	mov	r4, r1
 800bf90:	6809      	ldr	r1, [r1, #0]
 800bf92:	4605      	mov	r5, r0
 800bf94:	b109      	cbz	r1, 800bf9a <cleanup_glue+0xe>
 800bf96:	f7ff fff9 	bl	800bf8c <cleanup_glue>
 800bf9a:	4621      	mov	r1, r4
 800bf9c:	4628      	mov	r0, r5
 800bf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa2:	f7ff bf13 	b.w	800bdcc <_free_r>
	...

0800bfa8 <_reclaim_reent>:
 800bfa8:	4b2c      	ldr	r3, [pc, #176]	; (800c05c <_reclaim_reent+0xb4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4283      	cmp	r3, r0
 800bfae:	b570      	push	{r4, r5, r6, lr}
 800bfb0:	4604      	mov	r4, r0
 800bfb2:	d051      	beq.n	800c058 <_reclaim_reent+0xb0>
 800bfb4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800bfb6:	b143      	cbz	r3, 800bfca <_reclaim_reent+0x22>
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d14a      	bne.n	800c054 <_reclaim_reent+0xac>
 800bfbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfc0:	6819      	ldr	r1, [r3, #0]
 800bfc2:	b111      	cbz	r1, 800bfca <_reclaim_reent+0x22>
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f7ff ff01 	bl	800bdcc <_free_r>
 800bfca:	6961      	ldr	r1, [r4, #20]
 800bfcc:	b111      	cbz	r1, 800bfd4 <_reclaim_reent+0x2c>
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f7ff fefc 	bl	800bdcc <_free_r>
 800bfd4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bfd6:	b111      	cbz	r1, 800bfde <_reclaim_reent+0x36>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f7ff fef7 	bl	800bdcc <_free_r>
 800bfde:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bfe0:	b111      	cbz	r1, 800bfe8 <_reclaim_reent+0x40>
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	f7ff fef2 	bl	800bdcc <_free_r>
 800bfe8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800bfea:	b111      	cbz	r1, 800bff2 <_reclaim_reent+0x4a>
 800bfec:	4620      	mov	r0, r4
 800bfee:	f7ff feed 	bl	800bdcc <_free_r>
 800bff2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800bff4:	b111      	cbz	r1, 800bffc <_reclaim_reent+0x54>
 800bff6:	4620      	mov	r0, r4
 800bff8:	f7ff fee8 	bl	800bdcc <_free_r>
 800bffc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800bffe:	b111      	cbz	r1, 800c006 <_reclaim_reent+0x5e>
 800c000:	4620      	mov	r0, r4
 800c002:	f7ff fee3 	bl	800bdcc <_free_r>
 800c006:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c008:	b111      	cbz	r1, 800c010 <_reclaim_reent+0x68>
 800c00a:	4620      	mov	r0, r4
 800c00c:	f7ff fede 	bl	800bdcc <_free_r>
 800c010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c012:	b111      	cbz	r1, 800c01a <_reclaim_reent+0x72>
 800c014:	4620      	mov	r0, r4
 800c016:	f7ff fed9 	bl	800bdcc <_free_r>
 800c01a:	69a3      	ldr	r3, [r4, #24]
 800c01c:	b1e3      	cbz	r3, 800c058 <_reclaim_reent+0xb0>
 800c01e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c020:	4620      	mov	r0, r4
 800c022:	4798      	blx	r3
 800c024:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c026:	b1b9      	cbz	r1, 800c058 <_reclaim_reent+0xb0>
 800c028:	4620      	mov	r0, r4
 800c02a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c02e:	f7ff bfad 	b.w	800bf8c <cleanup_glue>
 800c032:	5949      	ldr	r1, [r1, r5]
 800c034:	b941      	cbnz	r1, 800c048 <_reclaim_reent+0xa0>
 800c036:	3504      	adds	r5, #4
 800c038:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c03a:	2d80      	cmp	r5, #128	; 0x80
 800c03c:	68d9      	ldr	r1, [r3, #12]
 800c03e:	d1f8      	bne.n	800c032 <_reclaim_reent+0x8a>
 800c040:	4620      	mov	r0, r4
 800c042:	f7ff fec3 	bl	800bdcc <_free_r>
 800c046:	e7ba      	b.n	800bfbe <_reclaim_reent+0x16>
 800c048:	680e      	ldr	r6, [r1, #0]
 800c04a:	4620      	mov	r0, r4
 800c04c:	f7ff febe 	bl	800bdcc <_free_r>
 800c050:	4631      	mov	r1, r6
 800c052:	e7ef      	b.n	800c034 <_reclaim_reent+0x8c>
 800c054:	2500      	movs	r5, #0
 800c056:	e7ef      	b.n	800c038 <_reclaim_reent+0x90>
 800c058:	bd70      	pop	{r4, r5, r6, pc}
 800c05a:	bf00      	nop
 800c05c:	2000002c 	.word	0x2000002c

0800c060 <_sbrk_r>:
 800c060:	b538      	push	{r3, r4, r5, lr}
 800c062:	4d06      	ldr	r5, [pc, #24]	; (800c07c <_sbrk_r+0x1c>)
 800c064:	2300      	movs	r3, #0
 800c066:	4604      	mov	r4, r0
 800c068:	4608      	mov	r0, r1
 800c06a:	602b      	str	r3, [r5, #0]
 800c06c:	f7f4 ff96 	bl	8000f9c <_sbrk>
 800c070:	1c43      	adds	r3, r0, #1
 800c072:	d102      	bne.n	800c07a <_sbrk_r+0x1a>
 800c074:	682b      	ldr	r3, [r5, #0]
 800c076:	b103      	cbz	r3, 800c07a <_sbrk_r+0x1a>
 800c078:	6023      	str	r3, [r4, #0]
 800c07a:	bd38      	pop	{r3, r4, r5, pc}
 800c07c:	20004f28 	.word	0x20004f28

0800c080 <siprintf>:
 800c080:	b40e      	push	{r1, r2, r3}
 800c082:	b500      	push	{lr}
 800c084:	b09c      	sub	sp, #112	; 0x70
 800c086:	ab1d      	add	r3, sp, #116	; 0x74
 800c088:	9002      	str	r0, [sp, #8]
 800c08a:	9006      	str	r0, [sp, #24]
 800c08c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c090:	4809      	ldr	r0, [pc, #36]	; (800c0b8 <siprintf+0x38>)
 800c092:	9107      	str	r1, [sp, #28]
 800c094:	9104      	str	r1, [sp, #16]
 800c096:	4909      	ldr	r1, [pc, #36]	; (800c0bc <siprintf+0x3c>)
 800c098:	f853 2b04 	ldr.w	r2, [r3], #4
 800c09c:	9105      	str	r1, [sp, #20]
 800c09e:	6800      	ldr	r0, [r0, #0]
 800c0a0:	9301      	str	r3, [sp, #4]
 800c0a2:	a902      	add	r1, sp, #8
 800c0a4:	f000 f874 	bl	800c190 <_svfiprintf_r>
 800c0a8:	9b02      	ldr	r3, [sp, #8]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
 800c0ae:	b01c      	add	sp, #112	; 0x70
 800c0b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b4:	b003      	add	sp, #12
 800c0b6:	4770      	bx	lr
 800c0b8:	2000002c 	.word	0x2000002c
 800c0bc:	ffff0208 	.word	0xffff0208

0800c0c0 <__malloc_lock>:
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <__malloc_lock+0x8>)
 800c0c2:	f7ff be4d 	b.w	800bd60 <__retarget_lock_acquire_recursive>
 800c0c6:	bf00      	nop
 800c0c8:	20004f1c 	.word	0x20004f1c

0800c0cc <__malloc_unlock>:
 800c0cc:	4801      	ldr	r0, [pc, #4]	; (800c0d4 <__malloc_unlock+0x8>)
 800c0ce:	f7ff be48 	b.w	800bd62 <__retarget_lock_release_recursive>
 800c0d2:	bf00      	nop
 800c0d4:	20004f1c 	.word	0x20004f1c

0800c0d8 <__ssputs_r>:
 800c0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0dc:	688e      	ldr	r6, [r1, #8]
 800c0de:	429e      	cmp	r6, r3
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	4690      	mov	r8, r2
 800c0e6:	461f      	mov	r7, r3
 800c0e8:	d838      	bhi.n	800c15c <__ssputs_r+0x84>
 800c0ea:	898a      	ldrh	r2, [r1, #12]
 800c0ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0f0:	d032      	beq.n	800c158 <__ssputs_r+0x80>
 800c0f2:	6825      	ldr	r5, [r4, #0]
 800c0f4:	6909      	ldr	r1, [r1, #16]
 800c0f6:	eba5 0901 	sub.w	r9, r5, r1
 800c0fa:	6965      	ldr	r5, [r4, #20]
 800c0fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c104:	3301      	adds	r3, #1
 800c106:	444b      	add	r3, r9
 800c108:	106d      	asrs	r5, r5, #1
 800c10a:	429d      	cmp	r5, r3
 800c10c:	bf38      	it	cc
 800c10e:	461d      	movcc	r5, r3
 800c110:	0553      	lsls	r3, r2, #21
 800c112:	d531      	bpl.n	800c178 <__ssputs_r+0xa0>
 800c114:	4629      	mov	r1, r5
 800c116:	f7ff fec5 	bl	800bea4 <_malloc_r>
 800c11a:	4606      	mov	r6, r0
 800c11c:	b950      	cbnz	r0, 800c134 <__ssputs_r+0x5c>
 800c11e:	230c      	movs	r3, #12
 800c120:	f8ca 3000 	str.w	r3, [sl]
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c12a:	81a3      	strh	r3, [r4, #12]
 800c12c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c134:	6921      	ldr	r1, [r4, #16]
 800c136:	464a      	mov	r2, r9
 800c138:	f7ff fe1c 	bl	800bd74 <memcpy>
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c146:	81a3      	strh	r3, [r4, #12]
 800c148:	6126      	str	r6, [r4, #16]
 800c14a:	6165      	str	r5, [r4, #20]
 800c14c:	444e      	add	r6, r9
 800c14e:	eba5 0509 	sub.w	r5, r5, r9
 800c152:	6026      	str	r6, [r4, #0]
 800c154:	60a5      	str	r5, [r4, #8]
 800c156:	463e      	mov	r6, r7
 800c158:	42be      	cmp	r6, r7
 800c15a:	d900      	bls.n	800c15e <__ssputs_r+0x86>
 800c15c:	463e      	mov	r6, r7
 800c15e:	6820      	ldr	r0, [r4, #0]
 800c160:	4632      	mov	r2, r6
 800c162:	4641      	mov	r1, r8
 800c164:	f000 faa8 	bl	800c6b8 <memmove>
 800c168:	68a3      	ldr	r3, [r4, #8]
 800c16a:	1b9b      	subs	r3, r3, r6
 800c16c:	60a3      	str	r3, [r4, #8]
 800c16e:	6823      	ldr	r3, [r4, #0]
 800c170:	4433      	add	r3, r6
 800c172:	6023      	str	r3, [r4, #0]
 800c174:	2000      	movs	r0, #0
 800c176:	e7db      	b.n	800c130 <__ssputs_r+0x58>
 800c178:	462a      	mov	r2, r5
 800c17a:	f000 fab7 	bl	800c6ec <_realloc_r>
 800c17e:	4606      	mov	r6, r0
 800c180:	2800      	cmp	r0, #0
 800c182:	d1e1      	bne.n	800c148 <__ssputs_r+0x70>
 800c184:	6921      	ldr	r1, [r4, #16]
 800c186:	4650      	mov	r0, sl
 800c188:	f7ff fe20 	bl	800bdcc <_free_r>
 800c18c:	e7c7      	b.n	800c11e <__ssputs_r+0x46>
	...

0800c190 <_svfiprintf_r>:
 800c190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c194:	4698      	mov	r8, r3
 800c196:	898b      	ldrh	r3, [r1, #12]
 800c198:	061b      	lsls	r3, r3, #24
 800c19a:	b09d      	sub	sp, #116	; 0x74
 800c19c:	4607      	mov	r7, r0
 800c19e:	460d      	mov	r5, r1
 800c1a0:	4614      	mov	r4, r2
 800c1a2:	d50e      	bpl.n	800c1c2 <_svfiprintf_r+0x32>
 800c1a4:	690b      	ldr	r3, [r1, #16]
 800c1a6:	b963      	cbnz	r3, 800c1c2 <_svfiprintf_r+0x32>
 800c1a8:	2140      	movs	r1, #64	; 0x40
 800c1aa:	f7ff fe7b 	bl	800bea4 <_malloc_r>
 800c1ae:	6028      	str	r0, [r5, #0]
 800c1b0:	6128      	str	r0, [r5, #16]
 800c1b2:	b920      	cbnz	r0, 800c1be <_svfiprintf_r+0x2e>
 800c1b4:	230c      	movs	r3, #12
 800c1b6:	603b      	str	r3, [r7, #0]
 800c1b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c1bc:	e0d1      	b.n	800c362 <_svfiprintf_r+0x1d2>
 800c1be:	2340      	movs	r3, #64	; 0x40
 800c1c0:	616b      	str	r3, [r5, #20]
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c6:	2320      	movs	r3, #32
 800c1c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d0:	2330      	movs	r3, #48	; 0x30
 800c1d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c37c <_svfiprintf_r+0x1ec>
 800c1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1da:	f04f 0901 	mov.w	r9, #1
 800c1de:	4623      	mov	r3, r4
 800c1e0:	469a      	mov	sl, r3
 800c1e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e6:	b10a      	cbz	r2, 800c1ec <_svfiprintf_r+0x5c>
 800c1e8:	2a25      	cmp	r2, #37	; 0x25
 800c1ea:	d1f9      	bne.n	800c1e0 <_svfiprintf_r+0x50>
 800c1ec:	ebba 0b04 	subs.w	fp, sl, r4
 800c1f0:	d00b      	beq.n	800c20a <_svfiprintf_r+0x7a>
 800c1f2:	465b      	mov	r3, fp
 800c1f4:	4622      	mov	r2, r4
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4638      	mov	r0, r7
 800c1fa:	f7ff ff6d 	bl	800c0d8 <__ssputs_r>
 800c1fe:	3001      	adds	r0, #1
 800c200:	f000 80aa 	beq.w	800c358 <_svfiprintf_r+0x1c8>
 800c204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c206:	445a      	add	r2, fp
 800c208:	9209      	str	r2, [sp, #36]	; 0x24
 800c20a:	f89a 3000 	ldrb.w	r3, [sl]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 80a2 	beq.w	800c358 <_svfiprintf_r+0x1c8>
 800c214:	2300      	movs	r3, #0
 800c216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c21a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c21e:	f10a 0a01 	add.w	sl, sl, #1
 800c222:	9304      	str	r3, [sp, #16]
 800c224:	9307      	str	r3, [sp, #28]
 800c226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c22a:	931a      	str	r3, [sp, #104]	; 0x68
 800c22c:	4654      	mov	r4, sl
 800c22e:	2205      	movs	r2, #5
 800c230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c234:	4851      	ldr	r0, [pc, #324]	; (800c37c <_svfiprintf_r+0x1ec>)
 800c236:	f7f3 ffd3 	bl	80001e0 <memchr>
 800c23a:	9a04      	ldr	r2, [sp, #16]
 800c23c:	b9d8      	cbnz	r0, 800c276 <_svfiprintf_r+0xe6>
 800c23e:	06d0      	lsls	r0, r2, #27
 800c240:	bf44      	itt	mi
 800c242:	2320      	movmi	r3, #32
 800c244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c248:	0711      	lsls	r1, r2, #28
 800c24a:	bf44      	itt	mi
 800c24c:	232b      	movmi	r3, #43	; 0x2b
 800c24e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c252:	f89a 3000 	ldrb.w	r3, [sl]
 800c256:	2b2a      	cmp	r3, #42	; 0x2a
 800c258:	d015      	beq.n	800c286 <_svfiprintf_r+0xf6>
 800c25a:	9a07      	ldr	r2, [sp, #28]
 800c25c:	4654      	mov	r4, sl
 800c25e:	2000      	movs	r0, #0
 800c260:	f04f 0c0a 	mov.w	ip, #10
 800c264:	4621      	mov	r1, r4
 800c266:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c26a:	3b30      	subs	r3, #48	; 0x30
 800c26c:	2b09      	cmp	r3, #9
 800c26e:	d94e      	bls.n	800c30e <_svfiprintf_r+0x17e>
 800c270:	b1b0      	cbz	r0, 800c2a0 <_svfiprintf_r+0x110>
 800c272:	9207      	str	r2, [sp, #28]
 800c274:	e014      	b.n	800c2a0 <_svfiprintf_r+0x110>
 800c276:	eba0 0308 	sub.w	r3, r0, r8
 800c27a:	fa09 f303 	lsl.w	r3, r9, r3
 800c27e:	4313      	orrs	r3, r2
 800c280:	9304      	str	r3, [sp, #16]
 800c282:	46a2      	mov	sl, r4
 800c284:	e7d2      	b.n	800c22c <_svfiprintf_r+0x9c>
 800c286:	9b03      	ldr	r3, [sp, #12]
 800c288:	1d19      	adds	r1, r3, #4
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	9103      	str	r1, [sp, #12]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	bfbb      	ittet	lt
 800c292:	425b      	neglt	r3, r3
 800c294:	f042 0202 	orrlt.w	r2, r2, #2
 800c298:	9307      	strge	r3, [sp, #28]
 800c29a:	9307      	strlt	r3, [sp, #28]
 800c29c:	bfb8      	it	lt
 800c29e:	9204      	strlt	r2, [sp, #16]
 800c2a0:	7823      	ldrb	r3, [r4, #0]
 800c2a2:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a4:	d10c      	bne.n	800c2c0 <_svfiprintf_r+0x130>
 800c2a6:	7863      	ldrb	r3, [r4, #1]
 800c2a8:	2b2a      	cmp	r3, #42	; 0x2a
 800c2aa:	d135      	bne.n	800c318 <_svfiprintf_r+0x188>
 800c2ac:	9b03      	ldr	r3, [sp, #12]
 800c2ae:	1d1a      	adds	r2, r3, #4
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	9203      	str	r2, [sp, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bfb8      	it	lt
 800c2b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c2bc:	3402      	adds	r4, #2
 800c2be:	9305      	str	r3, [sp, #20]
 800c2c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c38c <_svfiprintf_r+0x1fc>
 800c2c4:	7821      	ldrb	r1, [r4, #0]
 800c2c6:	2203      	movs	r2, #3
 800c2c8:	4650      	mov	r0, sl
 800c2ca:	f7f3 ff89 	bl	80001e0 <memchr>
 800c2ce:	b140      	cbz	r0, 800c2e2 <_svfiprintf_r+0x152>
 800c2d0:	2340      	movs	r3, #64	; 0x40
 800c2d2:	eba0 000a 	sub.w	r0, r0, sl
 800c2d6:	fa03 f000 	lsl.w	r0, r3, r0
 800c2da:	9b04      	ldr	r3, [sp, #16]
 800c2dc:	4303      	orrs	r3, r0
 800c2de:	3401      	adds	r4, #1
 800c2e0:	9304      	str	r3, [sp, #16]
 800c2e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e6:	4826      	ldr	r0, [pc, #152]	; (800c380 <_svfiprintf_r+0x1f0>)
 800c2e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2ec:	2206      	movs	r2, #6
 800c2ee:	f7f3 ff77 	bl	80001e0 <memchr>
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	d038      	beq.n	800c368 <_svfiprintf_r+0x1d8>
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <_svfiprintf_r+0x1f4>)
 800c2f8:	bb1b      	cbnz	r3, 800c342 <_svfiprintf_r+0x1b2>
 800c2fa:	9b03      	ldr	r3, [sp, #12]
 800c2fc:	3307      	adds	r3, #7
 800c2fe:	f023 0307 	bic.w	r3, r3, #7
 800c302:	3308      	adds	r3, #8
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c308:	4433      	add	r3, r6
 800c30a:	9309      	str	r3, [sp, #36]	; 0x24
 800c30c:	e767      	b.n	800c1de <_svfiprintf_r+0x4e>
 800c30e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c312:	460c      	mov	r4, r1
 800c314:	2001      	movs	r0, #1
 800c316:	e7a5      	b.n	800c264 <_svfiprintf_r+0xd4>
 800c318:	2300      	movs	r3, #0
 800c31a:	3401      	adds	r4, #1
 800c31c:	9305      	str	r3, [sp, #20]
 800c31e:	4619      	mov	r1, r3
 800c320:	f04f 0c0a 	mov.w	ip, #10
 800c324:	4620      	mov	r0, r4
 800c326:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c32a:	3a30      	subs	r2, #48	; 0x30
 800c32c:	2a09      	cmp	r2, #9
 800c32e:	d903      	bls.n	800c338 <_svfiprintf_r+0x1a8>
 800c330:	2b00      	cmp	r3, #0
 800c332:	d0c5      	beq.n	800c2c0 <_svfiprintf_r+0x130>
 800c334:	9105      	str	r1, [sp, #20]
 800c336:	e7c3      	b.n	800c2c0 <_svfiprintf_r+0x130>
 800c338:	fb0c 2101 	mla	r1, ip, r1, r2
 800c33c:	4604      	mov	r4, r0
 800c33e:	2301      	movs	r3, #1
 800c340:	e7f0      	b.n	800c324 <_svfiprintf_r+0x194>
 800c342:	ab03      	add	r3, sp, #12
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	462a      	mov	r2, r5
 800c348:	4b0f      	ldr	r3, [pc, #60]	; (800c388 <_svfiprintf_r+0x1f8>)
 800c34a:	a904      	add	r1, sp, #16
 800c34c:	4638      	mov	r0, r7
 800c34e:	f3af 8000 	nop.w
 800c352:	1c42      	adds	r2, r0, #1
 800c354:	4606      	mov	r6, r0
 800c356:	d1d6      	bne.n	800c306 <_svfiprintf_r+0x176>
 800c358:	89ab      	ldrh	r3, [r5, #12]
 800c35a:	065b      	lsls	r3, r3, #25
 800c35c:	f53f af2c 	bmi.w	800c1b8 <_svfiprintf_r+0x28>
 800c360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c362:	b01d      	add	sp, #116	; 0x74
 800c364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c368:	ab03      	add	r3, sp, #12
 800c36a:	9300      	str	r3, [sp, #0]
 800c36c:	462a      	mov	r2, r5
 800c36e:	4b06      	ldr	r3, [pc, #24]	; (800c388 <_svfiprintf_r+0x1f8>)
 800c370:	a904      	add	r1, sp, #16
 800c372:	4638      	mov	r0, r7
 800c374:	f000 f87a 	bl	800c46c <_printf_i>
 800c378:	e7eb      	b.n	800c352 <_svfiprintf_r+0x1c2>
 800c37a:	bf00      	nop
 800c37c:	0802bbd0 	.word	0x0802bbd0
 800c380:	0802bbda 	.word	0x0802bbda
 800c384:	00000000 	.word	0x00000000
 800c388:	0800c0d9 	.word	0x0800c0d9
 800c38c:	0802bbd6 	.word	0x0802bbd6

0800c390 <_printf_common>:
 800c390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	4616      	mov	r6, r2
 800c396:	4699      	mov	r9, r3
 800c398:	688a      	ldr	r2, [r1, #8]
 800c39a:	690b      	ldr	r3, [r1, #16]
 800c39c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	bfb8      	it	lt
 800c3a4:	4613      	movlt	r3, r2
 800c3a6:	6033      	str	r3, [r6, #0]
 800c3a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	460c      	mov	r4, r1
 800c3b0:	b10a      	cbz	r2, 800c3b6 <_printf_common+0x26>
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	6033      	str	r3, [r6, #0]
 800c3b6:	6823      	ldr	r3, [r4, #0]
 800c3b8:	0699      	lsls	r1, r3, #26
 800c3ba:	bf42      	ittt	mi
 800c3bc:	6833      	ldrmi	r3, [r6, #0]
 800c3be:	3302      	addmi	r3, #2
 800c3c0:	6033      	strmi	r3, [r6, #0]
 800c3c2:	6825      	ldr	r5, [r4, #0]
 800c3c4:	f015 0506 	ands.w	r5, r5, #6
 800c3c8:	d106      	bne.n	800c3d8 <_printf_common+0x48>
 800c3ca:	f104 0a19 	add.w	sl, r4, #25
 800c3ce:	68e3      	ldr	r3, [r4, #12]
 800c3d0:	6832      	ldr	r2, [r6, #0]
 800c3d2:	1a9b      	subs	r3, r3, r2
 800c3d4:	42ab      	cmp	r3, r5
 800c3d6:	dc26      	bgt.n	800c426 <_printf_common+0x96>
 800c3d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3dc:	1e13      	subs	r3, r2, #0
 800c3de:	6822      	ldr	r2, [r4, #0]
 800c3e0:	bf18      	it	ne
 800c3e2:	2301      	movne	r3, #1
 800c3e4:	0692      	lsls	r2, r2, #26
 800c3e6:	d42b      	bmi.n	800c440 <_printf_common+0xb0>
 800c3e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3ec:	4649      	mov	r1, r9
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	47c0      	blx	r8
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d01e      	beq.n	800c434 <_printf_common+0xa4>
 800c3f6:	6823      	ldr	r3, [r4, #0]
 800c3f8:	68e5      	ldr	r5, [r4, #12]
 800c3fa:	6832      	ldr	r2, [r6, #0]
 800c3fc:	f003 0306 	and.w	r3, r3, #6
 800c400:	2b04      	cmp	r3, #4
 800c402:	bf08      	it	eq
 800c404:	1aad      	subeq	r5, r5, r2
 800c406:	68a3      	ldr	r3, [r4, #8]
 800c408:	6922      	ldr	r2, [r4, #16]
 800c40a:	bf0c      	ite	eq
 800c40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c410:	2500      	movne	r5, #0
 800c412:	4293      	cmp	r3, r2
 800c414:	bfc4      	itt	gt
 800c416:	1a9b      	subgt	r3, r3, r2
 800c418:	18ed      	addgt	r5, r5, r3
 800c41a:	2600      	movs	r6, #0
 800c41c:	341a      	adds	r4, #26
 800c41e:	42b5      	cmp	r5, r6
 800c420:	d11a      	bne.n	800c458 <_printf_common+0xc8>
 800c422:	2000      	movs	r0, #0
 800c424:	e008      	b.n	800c438 <_printf_common+0xa8>
 800c426:	2301      	movs	r3, #1
 800c428:	4652      	mov	r2, sl
 800c42a:	4649      	mov	r1, r9
 800c42c:	4638      	mov	r0, r7
 800c42e:	47c0      	blx	r8
 800c430:	3001      	adds	r0, #1
 800c432:	d103      	bne.n	800c43c <_printf_common+0xac>
 800c434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43c:	3501      	adds	r5, #1
 800c43e:	e7c6      	b.n	800c3ce <_printf_common+0x3e>
 800c440:	18e1      	adds	r1, r4, r3
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	2030      	movs	r0, #48	; 0x30
 800c446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c44a:	4422      	add	r2, r4
 800c44c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c450:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c454:	3302      	adds	r3, #2
 800c456:	e7c7      	b.n	800c3e8 <_printf_common+0x58>
 800c458:	2301      	movs	r3, #1
 800c45a:	4622      	mov	r2, r4
 800c45c:	4649      	mov	r1, r9
 800c45e:	4638      	mov	r0, r7
 800c460:	47c0      	blx	r8
 800c462:	3001      	adds	r0, #1
 800c464:	d0e6      	beq.n	800c434 <_printf_common+0xa4>
 800c466:	3601      	adds	r6, #1
 800c468:	e7d9      	b.n	800c41e <_printf_common+0x8e>
	...

0800c46c <_printf_i>:
 800c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	7e0f      	ldrb	r7, [r1, #24]
 800c472:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c474:	2f78      	cmp	r7, #120	; 0x78
 800c476:	4691      	mov	r9, r2
 800c478:	4680      	mov	r8, r0
 800c47a:	460c      	mov	r4, r1
 800c47c:	469a      	mov	sl, r3
 800c47e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c482:	d807      	bhi.n	800c494 <_printf_i+0x28>
 800c484:	2f62      	cmp	r7, #98	; 0x62
 800c486:	d80a      	bhi.n	800c49e <_printf_i+0x32>
 800c488:	2f00      	cmp	r7, #0
 800c48a:	f000 80d8 	beq.w	800c63e <_printf_i+0x1d2>
 800c48e:	2f58      	cmp	r7, #88	; 0x58
 800c490:	f000 80a3 	beq.w	800c5da <_printf_i+0x16e>
 800c494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c49c:	e03a      	b.n	800c514 <_printf_i+0xa8>
 800c49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4a2:	2b15      	cmp	r3, #21
 800c4a4:	d8f6      	bhi.n	800c494 <_printf_i+0x28>
 800c4a6:	a101      	add	r1, pc, #4	; (adr r1, 800c4ac <_printf_i+0x40>)
 800c4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4ac:	0800c505 	.word	0x0800c505
 800c4b0:	0800c519 	.word	0x0800c519
 800c4b4:	0800c495 	.word	0x0800c495
 800c4b8:	0800c495 	.word	0x0800c495
 800c4bc:	0800c495 	.word	0x0800c495
 800c4c0:	0800c495 	.word	0x0800c495
 800c4c4:	0800c519 	.word	0x0800c519
 800c4c8:	0800c495 	.word	0x0800c495
 800c4cc:	0800c495 	.word	0x0800c495
 800c4d0:	0800c495 	.word	0x0800c495
 800c4d4:	0800c495 	.word	0x0800c495
 800c4d8:	0800c625 	.word	0x0800c625
 800c4dc:	0800c549 	.word	0x0800c549
 800c4e0:	0800c607 	.word	0x0800c607
 800c4e4:	0800c495 	.word	0x0800c495
 800c4e8:	0800c495 	.word	0x0800c495
 800c4ec:	0800c647 	.word	0x0800c647
 800c4f0:	0800c495 	.word	0x0800c495
 800c4f4:	0800c549 	.word	0x0800c549
 800c4f8:	0800c495 	.word	0x0800c495
 800c4fc:	0800c495 	.word	0x0800c495
 800c500:	0800c60f 	.word	0x0800c60f
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	602a      	str	r2, [r5, #0]
 800c50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c514:	2301      	movs	r3, #1
 800c516:	e0a3      	b.n	800c660 <_printf_i+0x1f4>
 800c518:	6820      	ldr	r0, [r4, #0]
 800c51a:	6829      	ldr	r1, [r5, #0]
 800c51c:	0606      	lsls	r6, r0, #24
 800c51e:	f101 0304 	add.w	r3, r1, #4
 800c522:	d50a      	bpl.n	800c53a <_printf_i+0xce>
 800c524:	680e      	ldr	r6, [r1, #0]
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	2e00      	cmp	r6, #0
 800c52a:	da03      	bge.n	800c534 <_printf_i+0xc8>
 800c52c:	232d      	movs	r3, #45	; 0x2d
 800c52e:	4276      	negs	r6, r6
 800c530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c534:	485e      	ldr	r0, [pc, #376]	; (800c6b0 <_printf_i+0x244>)
 800c536:	230a      	movs	r3, #10
 800c538:	e019      	b.n	800c56e <_printf_i+0x102>
 800c53a:	680e      	ldr	r6, [r1, #0]
 800c53c:	602b      	str	r3, [r5, #0]
 800c53e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c542:	bf18      	it	ne
 800c544:	b236      	sxthne	r6, r6
 800c546:	e7ef      	b.n	800c528 <_printf_i+0xbc>
 800c548:	682b      	ldr	r3, [r5, #0]
 800c54a:	6820      	ldr	r0, [r4, #0]
 800c54c:	1d19      	adds	r1, r3, #4
 800c54e:	6029      	str	r1, [r5, #0]
 800c550:	0601      	lsls	r1, r0, #24
 800c552:	d501      	bpl.n	800c558 <_printf_i+0xec>
 800c554:	681e      	ldr	r6, [r3, #0]
 800c556:	e002      	b.n	800c55e <_printf_i+0xf2>
 800c558:	0646      	lsls	r6, r0, #25
 800c55a:	d5fb      	bpl.n	800c554 <_printf_i+0xe8>
 800c55c:	881e      	ldrh	r6, [r3, #0]
 800c55e:	4854      	ldr	r0, [pc, #336]	; (800c6b0 <_printf_i+0x244>)
 800c560:	2f6f      	cmp	r7, #111	; 0x6f
 800c562:	bf0c      	ite	eq
 800c564:	2308      	moveq	r3, #8
 800c566:	230a      	movne	r3, #10
 800c568:	2100      	movs	r1, #0
 800c56a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c56e:	6865      	ldr	r5, [r4, #4]
 800c570:	60a5      	str	r5, [r4, #8]
 800c572:	2d00      	cmp	r5, #0
 800c574:	bfa2      	ittt	ge
 800c576:	6821      	ldrge	r1, [r4, #0]
 800c578:	f021 0104 	bicge.w	r1, r1, #4
 800c57c:	6021      	strge	r1, [r4, #0]
 800c57e:	b90e      	cbnz	r6, 800c584 <_printf_i+0x118>
 800c580:	2d00      	cmp	r5, #0
 800c582:	d04d      	beq.n	800c620 <_printf_i+0x1b4>
 800c584:	4615      	mov	r5, r2
 800c586:	fbb6 f1f3 	udiv	r1, r6, r3
 800c58a:	fb03 6711 	mls	r7, r3, r1, r6
 800c58e:	5dc7      	ldrb	r7, [r0, r7]
 800c590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c594:	4637      	mov	r7, r6
 800c596:	42bb      	cmp	r3, r7
 800c598:	460e      	mov	r6, r1
 800c59a:	d9f4      	bls.n	800c586 <_printf_i+0x11a>
 800c59c:	2b08      	cmp	r3, #8
 800c59e:	d10b      	bne.n	800c5b8 <_printf_i+0x14c>
 800c5a0:	6823      	ldr	r3, [r4, #0]
 800c5a2:	07de      	lsls	r6, r3, #31
 800c5a4:	d508      	bpl.n	800c5b8 <_printf_i+0x14c>
 800c5a6:	6923      	ldr	r3, [r4, #16]
 800c5a8:	6861      	ldr	r1, [r4, #4]
 800c5aa:	4299      	cmp	r1, r3
 800c5ac:	bfde      	ittt	le
 800c5ae:	2330      	movle	r3, #48	; 0x30
 800c5b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5b4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c5b8:	1b52      	subs	r2, r2, r5
 800c5ba:	6122      	str	r2, [r4, #16]
 800c5bc:	f8cd a000 	str.w	sl, [sp]
 800c5c0:	464b      	mov	r3, r9
 800c5c2:	aa03      	add	r2, sp, #12
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4640      	mov	r0, r8
 800c5c8:	f7ff fee2 	bl	800c390 <_printf_common>
 800c5cc:	3001      	adds	r0, #1
 800c5ce:	d14c      	bne.n	800c66a <_printf_i+0x1fe>
 800c5d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c5d4:	b004      	add	sp, #16
 800c5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5da:	4835      	ldr	r0, [pc, #212]	; (800c6b0 <_printf_i+0x244>)
 800c5dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c5e0:	6829      	ldr	r1, [r5, #0]
 800c5e2:	6823      	ldr	r3, [r4, #0]
 800c5e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5e8:	6029      	str	r1, [r5, #0]
 800c5ea:	061d      	lsls	r5, r3, #24
 800c5ec:	d514      	bpl.n	800c618 <_printf_i+0x1ac>
 800c5ee:	07df      	lsls	r7, r3, #31
 800c5f0:	bf44      	itt	mi
 800c5f2:	f043 0320 	orrmi.w	r3, r3, #32
 800c5f6:	6023      	strmi	r3, [r4, #0]
 800c5f8:	b91e      	cbnz	r6, 800c602 <_printf_i+0x196>
 800c5fa:	6823      	ldr	r3, [r4, #0]
 800c5fc:	f023 0320 	bic.w	r3, r3, #32
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	2310      	movs	r3, #16
 800c604:	e7b0      	b.n	800c568 <_printf_i+0xfc>
 800c606:	6823      	ldr	r3, [r4, #0]
 800c608:	f043 0320 	orr.w	r3, r3, #32
 800c60c:	6023      	str	r3, [r4, #0]
 800c60e:	2378      	movs	r3, #120	; 0x78
 800c610:	4828      	ldr	r0, [pc, #160]	; (800c6b4 <_printf_i+0x248>)
 800c612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c616:	e7e3      	b.n	800c5e0 <_printf_i+0x174>
 800c618:	0659      	lsls	r1, r3, #25
 800c61a:	bf48      	it	mi
 800c61c:	b2b6      	uxthmi	r6, r6
 800c61e:	e7e6      	b.n	800c5ee <_printf_i+0x182>
 800c620:	4615      	mov	r5, r2
 800c622:	e7bb      	b.n	800c59c <_printf_i+0x130>
 800c624:	682b      	ldr	r3, [r5, #0]
 800c626:	6826      	ldr	r6, [r4, #0]
 800c628:	6961      	ldr	r1, [r4, #20]
 800c62a:	1d18      	adds	r0, r3, #4
 800c62c:	6028      	str	r0, [r5, #0]
 800c62e:	0635      	lsls	r5, r6, #24
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	d501      	bpl.n	800c638 <_printf_i+0x1cc>
 800c634:	6019      	str	r1, [r3, #0]
 800c636:	e002      	b.n	800c63e <_printf_i+0x1d2>
 800c638:	0670      	lsls	r0, r6, #25
 800c63a:	d5fb      	bpl.n	800c634 <_printf_i+0x1c8>
 800c63c:	8019      	strh	r1, [r3, #0]
 800c63e:	2300      	movs	r3, #0
 800c640:	6123      	str	r3, [r4, #16]
 800c642:	4615      	mov	r5, r2
 800c644:	e7ba      	b.n	800c5bc <_printf_i+0x150>
 800c646:	682b      	ldr	r3, [r5, #0]
 800c648:	1d1a      	adds	r2, r3, #4
 800c64a:	602a      	str	r2, [r5, #0]
 800c64c:	681d      	ldr	r5, [r3, #0]
 800c64e:	6862      	ldr	r2, [r4, #4]
 800c650:	2100      	movs	r1, #0
 800c652:	4628      	mov	r0, r5
 800c654:	f7f3 fdc4 	bl	80001e0 <memchr>
 800c658:	b108      	cbz	r0, 800c65e <_printf_i+0x1f2>
 800c65a:	1b40      	subs	r0, r0, r5
 800c65c:	6060      	str	r0, [r4, #4]
 800c65e:	6863      	ldr	r3, [r4, #4]
 800c660:	6123      	str	r3, [r4, #16]
 800c662:	2300      	movs	r3, #0
 800c664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c668:	e7a8      	b.n	800c5bc <_printf_i+0x150>
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	462a      	mov	r2, r5
 800c66e:	4649      	mov	r1, r9
 800c670:	4640      	mov	r0, r8
 800c672:	47d0      	blx	sl
 800c674:	3001      	adds	r0, #1
 800c676:	d0ab      	beq.n	800c5d0 <_printf_i+0x164>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	079b      	lsls	r3, r3, #30
 800c67c:	d413      	bmi.n	800c6a6 <_printf_i+0x23a>
 800c67e:	68e0      	ldr	r0, [r4, #12]
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	4298      	cmp	r0, r3
 800c684:	bfb8      	it	lt
 800c686:	4618      	movlt	r0, r3
 800c688:	e7a4      	b.n	800c5d4 <_printf_i+0x168>
 800c68a:	2301      	movs	r3, #1
 800c68c:	4632      	mov	r2, r6
 800c68e:	4649      	mov	r1, r9
 800c690:	4640      	mov	r0, r8
 800c692:	47d0      	blx	sl
 800c694:	3001      	adds	r0, #1
 800c696:	d09b      	beq.n	800c5d0 <_printf_i+0x164>
 800c698:	3501      	adds	r5, #1
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	9903      	ldr	r1, [sp, #12]
 800c69e:	1a5b      	subs	r3, r3, r1
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dcf2      	bgt.n	800c68a <_printf_i+0x21e>
 800c6a4:	e7eb      	b.n	800c67e <_printf_i+0x212>
 800c6a6:	2500      	movs	r5, #0
 800c6a8:	f104 0619 	add.w	r6, r4, #25
 800c6ac:	e7f5      	b.n	800c69a <_printf_i+0x22e>
 800c6ae:	bf00      	nop
 800c6b0:	0802bbe1 	.word	0x0802bbe1
 800c6b4:	0802bbf2 	.word	0x0802bbf2

0800c6b8 <memmove>:
 800c6b8:	4288      	cmp	r0, r1
 800c6ba:	b510      	push	{r4, lr}
 800c6bc:	eb01 0402 	add.w	r4, r1, r2
 800c6c0:	d902      	bls.n	800c6c8 <memmove+0x10>
 800c6c2:	4284      	cmp	r4, r0
 800c6c4:	4623      	mov	r3, r4
 800c6c6:	d807      	bhi.n	800c6d8 <memmove+0x20>
 800c6c8:	1e43      	subs	r3, r0, #1
 800c6ca:	42a1      	cmp	r1, r4
 800c6cc:	d008      	beq.n	800c6e0 <memmove+0x28>
 800c6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6d6:	e7f8      	b.n	800c6ca <memmove+0x12>
 800c6d8:	4402      	add	r2, r0
 800c6da:	4601      	mov	r1, r0
 800c6dc:	428a      	cmp	r2, r1
 800c6de:	d100      	bne.n	800c6e2 <memmove+0x2a>
 800c6e0:	bd10      	pop	{r4, pc}
 800c6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6ea:	e7f7      	b.n	800c6dc <memmove+0x24>

0800c6ec <_realloc_r>:
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	4614      	mov	r4, r2
 800c6f4:	460e      	mov	r6, r1
 800c6f6:	b921      	cbnz	r1, 800c702 <_realloc_r+0x16>
 800c6f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fc:	4611      	mov	r1, r2
 800c6fe:	f7ff bbd1 	b.w	800bea4 <_malloc_r>
 800c702:	b92a      	cbnz	r2, 800c710 <_realloc_r+0x24>
 800c704:	f7ff fb62 	bl	800bdcc <_free_r>
 800c708:	4625      	mov	r5, r4
 800c70a:	4628      	mov	r0, r5
 800c70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c710:	f000 f81b 	bl	800c74a <_malloc_usable_size_r>
 800c714:	4284      	cmp	r4, r0
 800c716:	4607      	mov	r7, r0
 800c718:	d802      	bhi.n	800c720 <_realloc_r+0x34>
 800c71a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c71e:	d812      	bhi.n	800c746 <_realloc_r+0x5a>
 800c720:	4621      	mov	r1, r4
 800c722:	4640      	mov	r0, r8
 800c724:	f7ff fbbe 	bl	800bea4 <_malloc_r>
 800c728:	4605      	mov	r5, r0
 800c72a:	2800      	cmp	r0, #0
 800c72c:	d0ed      	beq.n	800c70a <_realloc_r+0x1e>
 800c72e:	42bc      	cmp	r4, r7
 800c730:	4622      	mov	r2, r4
 800c732:	4631      	mov	r1, r6
 800c734:	bf28      	it	cs
 800c736:	463a      	movcs	r2, r7
 800c738:	f7ff fb1c 	bl	800bd74 <memcpy>
 800c73c:	4631      	mov	r1, r6
 800c73e:	4640      	mov	r0, r8
 800c740:	f7ff fb44 	bl	800bdcc <_free_r>
 800c744:	e7e1      	b.n	800c70a <_realloc_r+0x1e>
 800c746:	4635      	mov	r5, r6
 800c748:	e7df      	b.n	800c70a <_realloc_r+0x1e>

0800c74a <_malloc_usable_size_r>:
 800c74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74e:	1f18      	subs	r0, r3, #4
 800c750:	2b00      	cmp	r3, #0
 800c752:	bfbc      	itt	lt
 800c754:	580b      	ldrlt	r3, [r1, r0]
 800c756:	18c0      	addlt	r0, r0, r3
 800c758:	4770      	bx	lr
	...

0800c75c <_init>:
 800c75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c75e:	bf00      	nop
 800c760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c762:	bc08      	pop	{r3}
 800c764:	469e      	mov	lr, r3
 800c766:	4770      	bx	lr

0800c768 <_fini>:
 800c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c76a:	bf00      	nop
 800c76c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c76e:	bc08      	pop	{r3}
 800c770:	469e      	mov	lr, r3
 800c772:	4770      	bx	lr
